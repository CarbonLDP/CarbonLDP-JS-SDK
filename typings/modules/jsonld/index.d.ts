// Generated by typings
// Source: https://raw.githubusercontent.com/typed-typings/npm-es6-promise/fb04188767acfec1defd054fc8024fafa5cd4de7/dist/es6-promise.d.ts
declare module '~jsonld~es6-promise' {
export interface Thenable <R> {
  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => U | Thenable<U>): Thenable<U>;
  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => void): Thenable<U>;
}

export class Promise <R> implements Thenable <R> {
  /**
   * If you call resolve in the body of the callback passed to the constructor,
   * your promise is fulfilled with result object passed to resolve.
   * If you call reject your promise is rejected with the object passed to resolve.
   * For consistency and debugging (eg stack traces), obj should be an instanceof Error.
   * Any errors thrown in the constructor callback will be implicitly passed to reject().
   */
  constructor (callback: (resolve : (value?: R | Thenable<R>) => void, reject: (error?: any) => void) => void);

  /**
   * onFulfilled is called when/if "promise" resolves. onRejected is called when/if "promise" rejects.
   * Both are optional, if either/both are omitted the next onFulfilled/onRejected in the chain is called.
   * Both callbacks have a single parameter , the fulfillment value or rejection reason.
   * "then" returns a new promise equivalent to the value you return from onFulfilled/onRejected after being passed through Promise.resolve.
   * If an error is thrown in the callback, the returned promise rejects with that error.
   *
   * @param onFulfilled called when/if "promise" resolves
   * @param onRejected called when/if "promise" rejects
   */
  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => U | Thenable<U>): Promise<U>;
  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => void): Promise<U>;

  /**
   * Sugar for promise.then(undefined, onRejected)
   *
   * @param onRejected called when/if "promise" rejects
   */
  catch <U> (onRejected?: (error: any) => U | Thenable<U>): Promise<U>;

  /**
   * Make a new promise from the thenable.
   * A thenable is promise-like in as far as it has a "then" method.
   */
  static resolve (): Promise<void>;
  static resolve <R> (value: R | Thenable<R>): Promise<R>;

  /**
   * Make a promise that rejects to obj. For consistency and debugging (eg stack traces), obj should be an instanceof Error
   */
  static reject <R> (error: any): Promise<R>;

  /**
   * Make a promise that fulfills when every item in the array fulfills, and rejects if (and when) any item rejects.
   * the array passed to all can be a mixture of promise-like objects and other objects.
   * The fulfillment value is an array (in order) of fulfillment values. The rejection value is the first rejection value.
   */
  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>, T9 | Thenable<T9>, T10 | Thenable<T10>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;
  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>, T9 | Thenable<T9>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;
  static all<T1, T2, T3, T4, T5, T6, T7, T8>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8]>;
  static all<T1, T2, T3, T4, T5, T6, T7>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>]): Promise<[T1, T2, T3, T4, T5, T6, T7]>;
  static all<T1, T2, T3, T4, T5, T6>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>]): Promise<[T1, T2, T3, T4, T5, T6]>;
  static all<T1, T2, T3, T4, T5>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>]): Promise<[T1, T2, T3, T4, T5]>;
  static all<T1, T2, T3, T4>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>]): Promise<[T1, T2, T3, T4]>;
  static all<T1, T2, T3>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>]): Promise<[T1, T2, T3]>;
  static all<T1, T2>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>]): Promise<[T1, T2]>;
  static all<T1>(values: [T1 | Thenable<T1>]): Promise<[T1]>;
  static all<TAll>(values: Array<TAll | Thenable<TAll>>): Promise<TAll[]>;

  /**
   * Make a Promise that fulfills when any item fulfills, and rejects if any item rejects.
   */
  static race <R> (promises: (R | Thenable<R>)[]): Promise<R>;
}

/**
 * The polyfill method will patch the global environment (in this case to the Promise name) when called.
 */
export function polyfill (): void;
}

// Generated by typings
// Source: https://raw.githubusercontent.com/tpluscode/jsonld-typings/39e4819b05ab05c3e79d56c6bb64c48fab6c04a6/jsonld.d.ts
declare module 'jsonld' {
import {Promise} from '~jsonld~es6-promise';

interface JsonLdCallback { (err:any, success:Object, context:any):void
}

interface JsonLdCompactCallback { (err:any, success:Object):void
}

interface DocumentLoaderCallback { (err, remoteDoc):void
}

interface DocumentLoaderDelegate { (url:string, callback:DocumentLoaderCallback)
}

interface NormalizeOptions {
    algorithm?:string;
    base?:string;
    expandContext?:any;
    inputFormat?:string;
    format?:string;
    documentLoader?:DocumentLoaderDelegate;
}

interface CompactionOptions {
    base?:string;
    compactArrays?:boolean;
    graph?:boolean;
    expandContext?:any;
    skipExpansion?:boolean;
    documentLoader?:DocumentLoaderDelegate;
}

interface ExpansionOptions {
    base?:string;
    expandContext?:any;
    keepFreeFloatingNodes?:boolean;
    documentLoader?:DocumentLoaderDelegate;
}

interface FlatteningOptions {
    base?:string;
    expandContext?:any;
    documentLoader?:DocumentLoaderDelegate;
}

interface FramingOptions {
    base?:string;
    expandContext?:any;
    embed?:EmbedEnum;
    explicit?:boolean;
    requireAll?:boolean;
    omitDefault?:boolean;
    documentLoader?:DocumentLoaderDelegate;
}

type EmbedEnum = '@last' | '@always' | '@never' | '@link';

interface ToRdfOptions {
    base?:string;
    expandContext?:any;
    format?:string;
    produceGeneralizedRdf?:boolean;
    documentLoader?:DocumentLoaderDelegate;
}

interface FromRdfOptions {
    rdfParser?:any;
    format?:string;
    useRdfType?:boolean;
    useNativeTypes?:boolean;
    documentLoader?:DocumentLoaderDelegate;
}

interface ParserDelegate {
    (input:any, func:any)
}

export function compact(doc:any, context:any, callback:JsonLdCompactCallback);
export function compact(doc:any, context:any, options:CompactionOptions, callback:JsonLdCompactCallback);

export function expand(compacted:any, callback:JsonLdCallback);
export function expand(compacted:any, options:ExpansionOptions, callback:JsonLdCallback);

export function flatten(doc:any, callback:JsonLdCallback);
export function flatten(doc:any, options:FlatteningOptions, callback:JsonLdCallback);

export function frame(doc:any, frame:any, callback:JsonLdCallback);
export function frame(doc:any, frame:any, options:FramingOptions, callback:JsonLdCallback);

export function normalize(doc:any, callback:JsonLdCallback);
export function normalize(doc:any, opts:NormalizeOptions, callback:JsonLdCallback);

export function toRDF(doc:any, callback:JsonLdCallback);
export function toRDF(doc:any, opts:ToRdfOptions, callback:JsonLdCallback);

export function fromRDF(nquads:any, callback:JsonLdCallback);
export function fromRDF(nquads:any, opts:FromRdfOptions, callback:JsonLdCallback);

export function registerRDFParser(contentType:string, parser:ParserDelegate);

export function unregisterRDFParser(contentType:string);

export var promises:JsonLdProcessor;

export class JsonLdProcessor {
    constructor();

    compact(doc:any, context:any, options:CompactionOptions):Promise<Object>;

    expand(compacted:any, options:ExpansionOptions):Promise<Object>;

    flatten(doc:any, options:FlatteningOptions):Promise<Object>;

    frame(doc:any, frame:any, options:FramingOptions):Promise<Object>;

    normalize(doc:any, opts:NormalizeOptions):Promise<Object>;

    toRDF(doc:any, opts:ToRdfOptions):Promise<string>;

    fromRDF(nquads:any, opts:FromRdfOptions):Promise<Object>;
}
}
