{"version":3,"sources":["BlankNode.ts"],"names":[],"mappings":";AACA,qCAAuC;AACvC,yBAA2B;AAE3B,2BAA6B;AAC7B,+BAAiC;AAEpB,QAAA,MAAM,GAAsB;IACxC,iBAAiB,EAAE;QAClB,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,eAAe;QACrC,OAAO,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM;KAC/B;CACD,CAAC;AAMF;IAAA;IAoBA,CAAC;IAhBO,kBAAU,GAAjB,UAAqC,MAAQ,EAAE,YAAgB,EAAE,QAAwB;QACxF,IAAI,EAAE,GAAU,CAAE,CAAE,YAAY,IAAI,KAAK,CAAC,QAAQ,CAAE,YAAY,CAAE,GAAG,YAAY,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;QACnH,QAAQ,GAAG,QAAQ,IAAI,YAAY,CAAC;QAEpC,IAAI,QAAQ,GAAsB,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAK,MAAM,EAAE,EAAE,EAAE,QAAQ,CAAE,CAAC;QAEzF,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAK,QAAQ,EAAS,QAAS,CAAC,eAAe,CAAE,CAAC;IAC1E,CAAC;IAEM,gBAAQ,GAAf,UAAmC,MAAQ,EAAE,eAA8C;QAA9C,gCAAA,EAAA,kBAAyB,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE;QAC1F,IAAI,KAAK,GAAmB,MAAM,CAAC;QAEnC,KAAK,CAAC,eAAe,GAAG,eAAe,CAAC;QACxC,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IAEF,cAAC;AAAD,CApBA,AAoBC,IAAA;AApBY,0BAAO","file":"BlankNode.js","sourcesContent":["import * as Document from \"./Document\";\nimport * as Fragment from \"./Fragment\";\nimport * as NS from \"./NS\";\nimport * as ObjectSchema from \"./ObjectSchema\";\nimport * as RDF from \"./RDF\";\nimport * as Utils from \"./Utils\";\n\nexport const SCHEMA:ObjectSchema.Class = {\n\t\"bNodeIdentifier\": {\n\t\t\"@id\": NS.C.Predicate.bNodeIdentifier,\n\t\t\"@type\": NS.XSD.DataType.string,\n\t},\n};\n\nexport interface Class extends Fragment.Class {\n\tbNodeIdentifier:string;\n}\n\nexport class Factory {\n\n\tstatic createFrom<T extends Object>( object:T, document:Document.Class ):T & Class;\n\tstatic createFrom<T extends Object>( object:T, id:string, document:Document.Class ):T & Class;\n\tstatic createFrom<T extends Object>( object:T, idOrDocument:any, document?:Document.Class ):T & Class {\n\t\tlet id:string = ! ! idOrDocument && Utils.isString( idOrDocument ) ? idOrDocument : RDF.URI.Util.generateBNodeID();\n\t\tdocument = document || idOrDocument;\n\n\t\tlet fragment:T & Fragment.Class = Fragment.Factory.createFrom<T>( object, id, document );\n\n\t\treturn Factory.decorate<T>( fragment, (<any> fragment).bNodeIdentifier );\n\t}\n\n\tstatic decorate<T extends Object>( object:T, bNodeIdentifier:string = Utils.UUID.generate() ):T & Class {\n\t\tlet bNode:T & Class = <any> object;\n\n\t\tbNode.bNodeIdentifier = bNodeIdentifier;\n\t\treturn bNode;\n\t}\n\n}\n\nexport default Class;\n"]}