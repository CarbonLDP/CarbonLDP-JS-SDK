{"version":3,"sources":["BlankNode.ts"],"names":[],"mappings":";;;;;;;;;AACA,uCAAsC;AACtC,yCAA6B;AAC7B,6CAAiC;AAKjC;IAAA;IAUA,CAAC;IANO,kBAAU,GAAjB,UAAqC,MAAQ,EAAE,YAAgB,EAAE,QAAkB;QAClF,IAAI,EAAE,GAAU,CAAE,CAAE,YAAY,IAAI,KAAK,CAAC,QAAQ,CAAE,YAAY,CAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;QACnH,QAAQ,GAAG,QAAQ,IAAI,YAAY,CAAC;QACpC,MAAM,CAAC,mBAAQ,CAAC,UAAU,CAAK,MAAM,EAAE,QAAQ,EAAE,EAAE,CAAE,CAAC;IACvD,CAAC;IAEF,cAAC;AAAD,CAVA,AAUC,IAAA;AAVY,0BAAO","file":"BlankNode.js","sourcesContent":["import { Document } from \"./Document\";\nimport { Fragment } from \"./Fragment\";\nimport * as RDF from \"./RDF\";\nimport * as Utils from \"./Utils\";\n\nexport interface Class extends Fragment {\n}\n\nexport class Factory {\n\n\tstatic createFrom<T extends Object>( object:T, document:Document ):T & Class;\n\tstatic createFrom<T extends Object>( object:T, id:string, document:Document ):T & Class;\n\tstatic createFrom<T extends Object>( object:T, idOrDocument:any, document?:Document ):T & Class {\n\t\tlet id:string = ! ! idOrDocument && Utils.isString( idOrDocument ) ? idOrDocument : RDF.URI.Util.generateBNodeID();\n\t\tdocument = document || idOrDocument;\n\t\treturn Fragment.createFrom<T>( object, document, id );\n\t}\n\n}\n\nexport default Class;\n"]}