{"version":3,"sources":["BlankNode.ts"],"names":[],"mappings":";;;;;;;;;AACA,mCAAgD;AAChD,uCAAsC;AAEtC,6CAAiC;AAcpB,QAAA,SAAS,GAAoB;IACzC,EAAE,EAAF,UAAI,MAAa;QAChB,MAAM,CAAC,mBAAQ,CAAC,EAAE,CAAE,MAAM,CAAE;YAC3B,GAAG,CAAC,IAAI,CAAC,SAAS,CAAE,MAAM,CAAC,EAAE,CAAE,CAC9B;IACH,CAAC;IAGD,MAAM,EAAN,UAAQ,QAAiB,EAAE,EAAU;QACpC,MAAM,CAAC,iBAAS,CAAC,UAAU,CAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,CAAE,CAAC;IACjD,CAAC;IAED,UAAU,EAAV,UAA8B,MAAQ,EAAE,QAAiB,EAAE,EAAU;QACpE,EAAE,CAAA,CAAE,EAAE,IAAI,CAAE,GAAG,CAAC,IAAI,CAAC,SAAS,CAAE,EAAE,CAAG,CAAC;YAAC,MAAM,IAAI,6BAAoB,CAAE,cAAY,EAAE,kCAA+B,CAAE,CAAC;QACvH,EAAE,CAAA,CAAE,CAAE,EAAG,CAAC;YAAC,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;QAE3C,MAAM,CAAC,mBAAQ,CAAC,UAAU,CAAK,MAAM,EAAE,QAAQ,EAAE,EAAE,CAAE,CAAC;IACvD,CAAC;CACD,CAAC;AAEF,kBAAe,iBAAS,CAAC","file":"BlankNode.js","sourcesContent":["import { Document } from \"./Document\";\nimport { IllegalArgumentError } from \"./Errors\";\nimport { Fragment } from \"./Fragment\";\nimport { ModelFactory } from \"./ModelFactory\";\nimport * as URI from \"./RDF/URI\";\n\nexport interface BlankNode extends Fragment {\n}\n\nexport interface BlankNodeFactory extends ModelFactory<BlankNode> {\n\tis( object:object ):object is BlankNode;\n\n\n\tcreate( document:Document, id?:string ):BlankNode;\n\n\tcreateFrom<T extends object>( object:T, document:Document, id?:string ):T & BlankNode;\n}\n\nexport const BlankNode:BlankNodeFactory = {\n\tis( object:object ):object is BlankNode {\n\t\treturn Fragment.is( object ) &&\n\t\t\tURI.Util.isBNodeID( object.id )\n\t\t\t;\n\t},\n\n\n\tcreate( document:Document, id?:string ):BlankNode {\n\t\treturn BlankNode.createFrom( {}, document, id );\n\t},\n\n\tcreateFrom<T extends object>( object:T, document:Document, id?:string ):T & BlankNode {\n\t\tif( id && ! URI.Util.isBNodeID( id ) ) throw new IllegalArgumentError( `The id \"${ id }\" is not an blank node label` );\n\t\tif( ! id ) id = URI.Util.generateBNodeID();\n\n\t\treturn Fragment.createFrom<T>( object, document, id );\n\t},\n};\n\nexport default BlankNode;\n"]}