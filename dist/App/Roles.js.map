{"version":3,"sources":["App/Roles.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,qCAAmC;AACnC,gCAAkC;AAClC,oCAAsC;AAEtC,4BAA8B;AAC9B,kDAAoD;AAGpD,yCAAwC;AAExC;IAA2B,yBAAS;IAEnC,eAAa,UAAqB;QAAlC,iBAGC;QAFA,EAAE,CAAA,CAAE,CAAE,CAAE,UAAU,YAAY,iBAAU,CAAG,CAAC;YAAC,MAAM,IAAI,MAAM,CAAC,mBAAmB,CAAE,2CAA2C,CAAE,CAAC;QACjI,QAAA,kBAAO,UAAU,CAAE,SAAC;;IACrB,CAAC;IAID,2BAAW,GAAX,UAAgB,UAAiC,EAAE,IAAsB,EAAE,oBAAyB,EAAE,cAAoC;QACzI,EAAE,CAAA,CAAE,CAAE,OAAO,CAAC,OAAO,CAAC,EAAE,CAAE,IAAI,CAAG,CAAC;YAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAO,IAAI,MAAM,CAAC,oBAAoB,CAAE,yDAAyD,CAAE,CAAE,CAAC;QAE9J,MAAM,CAAC,iBAAM,WAAW,YAAK,UAAU,EAAE,IAAI,EAAE,oBAAoB,EAAE,cAAc,CAAE,CAAC;IACvF,CAAC;IAED,mBAAG,GAAH,UAAQ,OAAc,EAAE,cAAoC;QAC3D,MAAM,CAAC,iBAAM,GAAG,YAAK,OAAO,EAAE,cAAc,CAAE,CAAC,IAAI,CAAE,UAAE,EAA+D;gBAA7D,YAAI,EAAE,gBAAQ;YACtE,EAAE,CAAA,CAAE,CAAE,gBAAgB,CAAC,OAAO,CAAC,EAAE,CAAE,IAAI,CAAG,CAAC;gBAAC,MAAM,IAAI,MAAM,CAAC,oBAAoB,CAAE,mCAAkC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,OAAU,CAAE,CAAC;YAE9I,MAAM,CAAC,CAAE,IAAI,EAAE,QAAQ,CAAyD,CAAC;QAClF,CAAC,CAAE,CAAC;IACL,CAAC;IAEF,YAAC;AAAD,CAvBA,AAuBC,CAvB0B,eAAS,GAuBnC;AAvBY,sBAAK;AAyBlB,kBAAe,KAAK,CAAC","file":"Roles.js","sourcesContent":["import AppContext from \"./Context\";\nimport * as AppRole from \"./Role\";\nimport * as Errors from \"./../Errors\";\nimport * as HTTP from \"./../HTTP\";\nimport * as NS from \"./../NS\";\nimport * as PersistedAppRole from \"./PersistedRole\";\nimport * as PersistedRole from \"./../Auth/PersistedRole\";\nimport * as Pointer from \"./../Pointer\";\nimport AuthRoles from \"./../Auth/Roles\";\n\nexport class Class extends AuthRoles {\n\n\tconstructor( appContext:AppContext ) {\n\t\tif( ! ( appContext instanceof AppContext ) ) throw new Errors.NotImplementedError( \"The context provided is not a AppContext.\" );\n\t\tsuper( appContext );\n\t}\n\n\tcreateChild<T>( parentRole:string | Pointer.Class, role:T & AppRole.Class, requestOptions?:HTTP.Request.Options ):Promise<[ T & PersistedRole.Class, HTTP.Response.Class ]>;\n\tcreateChild<T>( parentRole:string | Pointer.Class, role:T & AppRole.Class, slug?:string, requestOptions?:HTTP.Request.Options ):Promise<[ T & PersistedRole.Class, HTTP.Response.Class ]>;\n\tcreateChild<T>( parentRole:string | Pointer.Class, role:T & AppRole.Class, slugOrRequestOptions?:any, requestOptions?:HTTP.Request.Options ):Promise<[ T & PersistedRole.Class, HTTP.Response.Class ]> {\n\t\tif( ! AppRole.Factory.is( role ) ) return Promise.reject<any>( new Errors.IllegalArgumentError( \"The role is not a valid `Carbon.App.Role.Class` object.\" ) );\n\n\t\treturn super.createChild<T>( parentRole, role, slugOrRequestOptions, requestOptions );\n\t}\n\n\tget<T>( roleURI:string, requestOptions?:HTTP.Request.Options ):Promise<[ T & PersistedAppRole.Class, HTTP.Response.Class ]> {\n\t\treturn super.get<T>( roleURI, requestOptions ).then( ( [ role, response ]:[ PersistedRole.Class, HTTP.Response.Class ] ) => {\n\t\t\tif( ! PersistedAppRole.Factory.is( role ) ) throw new Errors.IllegalArgumentError( `The resource fetched is not a ${ NS.CS.Class.AppRole }` );\n\n\t\t\treturn [ role, response ] as [ T & PersistedAppRole.Class, HTTP.Response.Class ];\n\t\t} );\n\t}\n\n}\n\nexport default Class;\n"]}