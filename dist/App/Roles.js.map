{"version":3,"sources":["App/Roles.ts"],"names":[],"mappings":";;;;;;AAAA,wBAAuB,WAAW,CAAC,CAAA;AACnC,IAAY,OAAO,WAAM,QAAQ,CAAC,CAAA;AAClC,IAAY,MAAM,WAAM,aAAa,CAAC,CAAA;AAEtC,IAAY,EAAE,WAAM,SAAS,CAAC,CAAA;AAC9B,IAAY,gBAAgB,WAAM,iBAAiB,CAAC,CAAA;AAGpD,sBAAsB,iBAAiB,CAAC,CAAA;AAExC;IAA2B,yBAAS;IAEnC,eAAa,UAAqB;QACjC,EAAE,CAAA,CAAE,CAAE,CAAE,UAAU,YAAY,iBAAU,CAAG,CAAC;YAAC,MAAM,IAAI,MAAM,CAAC,mBAAmB,CAAE,2CAA2C,CAAE,CAAC;QACjI,kBAAO,UAAU,CAAE,CAAC;IACrB,CAAC;IAID,2BAAW,GAAX,UAAgB,UAAiC,EAAE,IAAsB,EAAE,oBAAyB,EAAE,cAAoC;QACzI,EAAE,CAAA,CAAE,CAAE,OAAO,CAAC,OAAO,CAAC,EAAE,CAAE,IAAI,CAAG,CAAC;YAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAO,IAAI,MAAM,CAAC,oBAAoB,CAAE,yDAAyD,CAAE,CAAE,CAAC;QAE9J,MAAM,CAAC,gBAAK,CAAC,WAAW,YAAK,UAAU,EAAE,IAAI,EAAE,oBAAoB,EAAE,cAAc,CAAE,CAAC;IACvF,CAAC;IAID,8BAAc,GAAd,UAAmB,UAAiC,EAAE,KAA2B,EAAE,qBAA0B,EAAE,cAAoC;QAClJ,IAAI,KAAK,GAAU,KAAK,CAAC,SAAS,CAAE,UAAA,IAAI,IAAI,OAAA,CAAE,OAAO,CAAC,OAAO,CAAC,EAAE,CAAE,IAAI,CAAE,EAA5B,CAA4B,CAAE,CAAC;QAC3E,EAAE,CAAA,CAAE,KAAK,KAAK,CAAC,CAAE,CAAC;YAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAO,IAAI,MAAM,CAAC,oBAAoB,CAAE,uBAAsB,KAAK,qDAAqD,CAAE,CAAE,CAAC;QAErK,MAAM,CAAC,gBAAK,CAAC,cAAc,YAAK,UAAU,EAAE,KAAK,EAAE,qBAAqB,EAAE,cAAc,CAAE,CAAC;IAC5F,CAAC;IAID,sCAAsB,GAAtB,UAA2B,UAAiC,EAAE,IAAsB,EAAE,oBAAyB,EAAE,cAAoC;QACpJ,EAAE,CAAA,CAAE,CAAE,OAAO,CAAC,OAAO,CAAC,EAAE,CAAE,IAAI,CAAG,CAAC;YAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAO,IAAI,MAAM,CAAC,oBAAoB,CAAE,yDAAyD,CAAE,CAAE,CAAC;QAE9J,MAAM,CAAC,gBAAK,CAAC,sBAAsB,YAAK,UAAU,EAAE,IAAI,EAAE,oBAAoB,EAAE,cAAc,CAAE,CAAC;IAClG,CAAC;IAED,mBAAG,GAAH,UAAK,OAAc,EAAE,cAAoC;QACxD,MAAM,CAAC,gBAAK,CAAC,GAAG,YAAE,OAAO,EAAE,cAAc,CAAE,CAAC,IAAI,CAAE,UAAE,EAA+D;gBAA7D,YAAI,EAAE,gBAAQ;YACnE,EAAE,CAAA,CAAE,CAAE,gBAAgB,CAAC,OAAO,CAAC,EAAE,CAAE,IAAI,CAAG,CAAC;gBAAC,MAAM,IAAI,MAAM,CAAC,oBAAoB,CAAE,mCAAkC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,OAAU,CAAE,CAAC;YAE9I,MAAM,CAAC,CAAE,IAAI,EAAE,QAAQ,CAAE,CAAC;QAC3B,CAAC,CAAE,CAAC;IACL,CAAC;IAEF,YAAC;AAAD,CAxCA,AAwCC,CAxC0B,eAAS,GAwCnC;AAxCY,aAAK,QAwCjB,CAAA;AAED;kBAAe,KAAK,CAAC","file":"Roles.js","sourcesContent":["import AppContext from \"./Context\";\nimport * as AppRole from \"./Role\";\nimport * as Errors from \"./../Errors\";\nimport * as HTTP from \"./../HTTP\";\nimport * as NS from \"./../NS\";\nimport * as PersistedAppRole from \"./PersistedRole\";\nimport * as PersistedRole from \"./../Auth/PersistedRole\";\nimport * as Pointer from \"./../Pointer\";\nimport AuthRoles from \"./../Auth/Roles\";\n\nexport class Class extends AuthRoles {\n\n\tconstructor( appContext:AppContext ) {\n\t\tif( ! ( appContext instanceof AppContext ) ) throw new Errors.NotImplementedError( \"The context provided is not a AppContext.\" );\n\t\tsuper( appContext );\n\t}\n\n\tcreateChild<T>( parentRole:string | Pointer.Class, role:T & AppRole.Class, requestOptions?:HTTP.Request.Options ):Promise<[ T & PersistedAppRole.Class, [ HTTP.Response.Class, HTTP.Response.Class ] ]>;\n\tcreateChild<T>( parentRole:string | Pointer.Class, role:T & AppRole.Class, slug?:string, requestOptions?:HTTP.Request.Options ):Promise<[ T & PersistedAppRole.Class, [ HTTP.Response.Class, HTTP.Response.Class ] ]>;\n\tcreateChild<T>( parentRole:string | Pointer.Class, role:T & AppRole.Class, slugOrRequestOptions?:any, requestOptions?:HTTP.Request.Options ):Promise<[ T & PersistedAppRole.Class, [ HTTP.Response.Class, HTTP.Response.Class ] ]> {\n\t\tif( ! AppRole.Factory.is( role ) ) return Promise.reject<any>( new Errors.IllegalArgumentError( \"The role is not a valid `Carbon.App.Role.Class` object.\" ) );\n\n\t\treturn super.createChild<T>( parentRole, role, slugOrRequestOptions, requestOptions );\n\t}\n\n\tcreateChildren<T>( parentRole:string | Pointer.Class, roles:(T & AppRole.Class)[], requestOptions?:HTTP.Request.Options ):Promise<[ (T & PersistedAppRole.Class)[], HTTP.Response.Class[] ]>;\n\tcreateChildren<T>( parentRole:string | Pointer.Class, roles:(T & AppRole.Class)[], slugs?:string[], requestOptions?:HTTP.Request.Options ):Promise<[ (T & PersistedAppRole.Class)[], HTTP.Response.Class[] ]>;\n\tcreateChildren<T>( parentRole:string | Pointer.Class, roles:(T & AppRole.Class)[], slugsOrRequestOptions?:any, requestOptions?:HTTP.Request.Options ):Promise<[ (T & PersistedAppRole.Class)[], HTTP.Response.Class[] ]> {\n\t\tlet index:number = roles.findIndex( role => ! AppRole.Factory.is( role ) );\n\t\tif( index !== -1 ) return Promise.reject<any>( new Errors.IllegalArgumentError( `The role at index ${ index }, is not a valid \\`Carbon.App.Role.Class\\` object.` ) );\n\n\t\treturn super.createChildren<T>( parentRole, roles, slugsOrRequestOptions, requestOptions );\n\t}\n\n\tcreateChildAndRetrieve<T>( parentRole:string | Pointer.Class, role:T & AppRole.Class, requestOptions?:HTTP.Request.Options ):Promise<[ T & PersistedAppRole.Class, [ HTTP.Response.Class, HTTP.Response.Class, HTTP.Response.Class ] ]>;\n\tcreateChildAndRetrieve<T>( parentRole:string | Pointer.Class, role:T & AppRole.Class, slug?:string, requestOptions?:HTTP.Request.Options ):Promise<[ T & PersistedAppRole.Class, [ HTTP.Response.Class, HTTP.Response.Class, HTTP.Response.Class ] ]>;\n\tcreateChildAndRetrieve<T>( parentRole:string | Pointer.Class, role:T & AppRole.Class, slugOrRequestOptions?:any, requestOptions?:HTTP.Request.Options ):Promise<[ T & PersistedAppRole.Class, [ HTTP.Response.Class, HTTP.Response.Class, HTTP.Response.Class ] ]> {\n\t\tif( ! AppRole.Factory.is( role ) ) return Promise.reject<any>( new Errors.IllegalArgumentError( \"The role is not a valid `Carbon.App.Role.Class` object.\" ) );\n\n\t\treturn super.createChildAndRetrieve<T>( parentRole, role, slugOrRequestOptions, requestOptions );\n\t}\n\n\tget( roleURI:string, requestOptions?:HTTP.Request.Options ):Promise<[ PersistedAppRole.Class, HTTP.Response.Class ]> {\n\t\treturn super.get( roleURI, requestOptions ).then( ( [ role, response ]:[ PersistedRole.Class, HTTP.Response.Class ] ) => {\n\t\t\tif( ! PersistedAppRole.Factory.is( role ) ) throw new Errors.IllegalArgumentError( `The resource fetched is not a ${ NS.CS.Class.AppRole }` );\n\n\t\t\treturn [ role, response ];\n\t\t} );\n\t}\n\n}\n\nexport default Class;\n"]}