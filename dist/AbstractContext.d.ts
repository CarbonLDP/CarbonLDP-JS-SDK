import { Authenticator } from "./Auth";
import { Context } from "./Context";
import { DigestedObjectSchema, ObjectSchema } from "./ObjectSchema";
import { Pointer } from "./Pointer";
import { RegistryService } from "./Registry";
import { ContextSettings } from "./Settings";
export declare abstract class AbstractContext<M extends Pointer, P extends AbstractContext<any, any>> implements Context {
    readonly abstract registry: RegistryService<M, AbstractContext<M, P>>;
    readonly abstract auth: Authenticator<any> | undefined;
    protected abstract _baseURI: string;
    readonly baseURI: string;
    protected _parentContext: P | undefined;
    readonly parentContext: P | undefined;
    protected _settings?: ContextSettings;
    protected _generalObjectSchema?: DigestedObjectSchema;
    protected _typeObjectSchemaMap: Map<string, DigestedObjectSchema>;
    constructor(parentContext?: P);
    resolve(relativeURI: string): string;
    _resolvePath(path: string): string;
    hasObjectSchema(type: string): boolean;
    getObjectSchema(type?: string): DigestedObjectSchema;
    extendObjectSchema(type: string, objectSchema: ObjectSchema): this;
    extendObjectSchema(objectSchema: ObjectSchema): this;
    clearObjectSchema(type?: string): void;
    _getTypeObjectSchemas(): DigestedObjectSchema[];
    protected _getObjectSchemasTypes(): string[];
    protected _extendGeneralSchema(digestedSchema: DigestedObjectSchema): void;
    protected _extendTypeSchema(digestedSchema: DigestedObjectSchema, type: string): void;
    private _resolveTypeURI(uri);
}
