{"version":3,"sources":["Auth.ts"],"names":[],"mappings":"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","file":"Auth.js","sourcesContent":["import * as Agent from \"./Auth/Agent\";\nimport * as Agents from \"./Auth/Agents\";\nimport AuthenticationToken from \"./Auth/AuthenticationToken\";\nimport Authenticator from \"./Auth/Authenticator\";\nimport BasicAuthenticator from \"./Auth/BasicAuthenticator\";\nimport * as PersistedAgent from \"./Auth/PersistedAgent\";\nimport TokenAuthenticator from \"./Auth/TokenAuthenticator\";\nimport * as Token from \"./Auth/Token\";\nimport UsernameAndPasswordToken from \"./Auth/UsernameAndPasswordToken\";\nimport UsernameAndPasswordCredentials from \"./Auth/UsernameAndPasswordCredentials\";\nimport Credentials from \"./Auth/Credentials\";\n\nimport * as HTTP from \"./HTTP\";\nimport * as Errors from \"./Errors\";\nimport Context from \"./Context\";\nimport * as Utils from \"./Utils\";\n\nexport {\n\tAgent,\n\tAgents,\n\tAuthenticationToken,\n\tAuthenticator,\n\tBasicAuthenticator,\n\tPersistedAgent,\n\tToken,\n\tTokenAuthenticator,\n\tUsernameAndPasswordToken\n}\n\nexport enum Method {\n\tBASIC,\n\tTOKEN\n}\n\nexport class Class {\n\tpublic agents:Agents.Class;\n\n\tprivate context:Context;\n\tprivate method:Method = null;\n\tprivate authenticators:Array<Authenticator<AuthenticationToken>>;\n\tprivate authenticator:Authenticator<AuthenticationToken>;\n\n\tconstructor( context:Context ) {\n\t\tthis.context = context;\n\n\t\tthis.agents = new Agents.Class( this.context );\n\n\t\tthis.authenticators = [];\n\t\tthis.authenticators[ Method.BASIC ] = new BasicAuthenticator();\n\t\tthis.authenticators[ Method.TOKEN ] = new TokenAuthenticator( this.context );\n\t}\n\n\tisAuthenticated( askParent:boolean = true ):boolean {\n\t\treturn (\n\t\t\t( this.authenticator && this.authenticator.isAuthenticated() ) ||\n\t\t\t( askParent && !! this.context.parentContext && this.context.parentContext.auth.isAuthenticated() )\n\t\t);\n\t}\n\n\tauthenticate( username:string, password:string ):Promise<Credentials> {\n\t\treturn this.authenticateUsing( \"TOKEN\", username, password );\n\t}\n\n\tauthenticateUsing( method:\"BASIC\", username:string, password:string ):Promise<UsernameAndPasswordCredentials>;\n\tauthenticateUsing( method:\"TOKEN\", username:string, password:string ):Promise<Token.Class>;\n\n\tauthenticateUsing( method:\"TOKEN\", token:Token.Class ):Promise<Token.Class>;\n\n\t// TODO remove non-specific overloads. Reference https://github.com/Microsoft/TypeScript/pull/6278, seems to be added for 1.9\n\tauthenticateUsing( method:string, username:string, password:string ):Promise<Credentials>;\n\tauthenticateUsing( method:string, token:Credentials ):Promise<Credentials>;\n\n\tauthenticateUsing( method:string, userOrTokenOrCredentials:any, password?:string ):Promise<any> {\n\t\tswitch ( method ) {\n\t\t\tcase \"BASIC\":\n\t\t\t\treturn this.authenticateWithBasic( userOrTokenOrCredentials, password );\n\t\t\tcase \"TOKEN\":\n\t\t\t\treturn this.authenticateWithToken( userOrTokenOrCredentials, password );\n\t\t\tdefault:\n\t\t\t\treturn Promise.reject( new Errors.IllegalArgumentError( `No exists the authentication method '${method}'` ) );\n\t\t}\n\t}\n\n\taddAuthentication( requestOptions:HTTP.Request.Options ):void {\n\t\tif( this.isAuthenticated( false ) ) {\n\t\t\tthis.authenticator.addAuthentication( requestOptions );\n\t\t} else if( !! this.context.parentContext ) {\n\t\t\tthis.context.parentContext.auth.addAuthentication( requestOptions );\n\t\t} else {\n\t\t\tconsole.warn( \"There is no authentication to add to the request.\" );\n\t\t}\n\t}\n\n\tclearAuthentication():void {\n\t\tif( ! this.authenticator ) return;\n\n\t\tthis.authenticator.clearAuthentication();\n\t\tthis.authenticator = null;\n\t}\n\n\tprivate authenticateWithBasic( username:string, password:string ):Promise<UsernameAndPasswordCredentials> {\n\t\tlet authenticator:BasicAuthenticator =  <BasicAuthenticator> this.authenticators[ Method.BASIC ];\n\t\tlet authenticationToken:UsernameAndPasswordToken;\n\n\t\tauthenticationToken = new UsernameAndPasswordToken( username, password );\n\t\tthis.clearAuthentication();\n\n\t\tthis.authenticator = authenticator;\n\t\treturn this.authenticator.authenticate( authenticationToken );\n\t}\n\n\tprivate authenticateWithToken( userOrTokenOrCredentials:any, password:string ):Promise<Token.Class> {\n\t\tlet authenticator:TokenAuthenticator =  <TokenAuthenticator> this.authenticators[ Method.TOKEN ];\n\t\tlet credentials:Token.Class = null;\n\t\tlet authenticationToken:UsernameAndPasswordToken = null;\n\n\t\tif ( Utils.isString( userOrTokenOrCredentials ) &&  Utils.isString( password ) ) {\n\t\t\tauthenticationToken = new UsernameAndPasswordToken( userOrTokenOrCredentials, password );\n\n\t\t} else if( Token.Factory.is( userOrTokenOrCredentials ) ) {\n\t\t\tcredentials = userOrTokenOrCredentials;\n\n\t\t} else {\n\t\t\treturn Promise.reject<Token.Class>( new Errors.IllegalArgumentError( \"Parameters do not match with the authentication request.\" ) );\n\t\t}\n\n\t\tthis.clearAuthentication();\n\t\tthis.authenticator = authenticator;\n\t\tif ( authenticationToken )\n\t\t\treturn authenticator.authenticate( authenticationToken );\n\n\t\treturn authenticator.authenticate( credentials );\n\t}\n\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}