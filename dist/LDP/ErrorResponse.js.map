{"version":3,"sources":["LDP/ErrorResponse.ts"],"names":[],"mappings":";AAAA,IAAY,QAAQ,WAAM,eAAe,CAAC,CAAA;AAE1C,IAAY,EAAE,WAAM,SAAS,CAAC,CAAA;AAE9B,IAAY,WAAW,WAAM,mBAAmB,CAAC,CAAA;AAGjD,2BAAuB,iBAAiB,CAAC,CAAA;AAE5B,iBAAS,GAAU,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC;AAE5C,cAAM,GAAgB;IAClC,QAAQ,EAAE;QACT,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK;QAC3B,OAAO,EAAE,KAAK;QACd,YAAY,EAAE,MAAM;KACpB;IACD,YAAY,EAAE;QACb,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,cAAc;QACpC,OAAO,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG;KAC5B;CACD,CAAC;AAOF;IAAA;IA8BA,CAAC;IA7BO,cAAM,GAAb,UAAe,IAAW;QACzB,IAAI,aAAmB,CAAC;QACxB,IAAI,MAAM,GAAW,EAAE,CAAC;QACxB,IAAI,MAAM,GAAsB,IAAI,WAAW,CAAC,MAAM,EAAE,CAAC;QACzD,IAAI,UAAU,GAAkB,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;QAE1D,MAAM,CAAC,MAAM,CAAC,KAAK,CAAE,IAAI,CAAE,CAAC,IAAI,CAAE,UAAE,UAA8B;YACjE,EAAE,CAAC,CAAE,UAAU,CAAC,MAAM,KAAK,CAAE,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC;YAE3C,IAAI,KAAK,GAAa,UAAU,CAAE,CAAC,CAAE,CAAE,QAAQ,CAAE,CAAC;YAClD,GAAG,CAAC,CAAc,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAM,CAAC;gBAAnB,IAAI,IAAI,cAAA;gBAEb,IAAI,SAAS,GAAkB,EAAE,CAAC;gBAClC,oBAAU,CAAC,SAAS,CAAC,OAAO,CAAE,IAAI,EAAE,SAAS,EAAE,UAAU,CAAE,CAAC;gBAE5D,EAAE,CAAC,CAAE,SAAS,CAAC,KAAK,CAAC,OAAO,CAAE,iBAAS,CAAE,KAAK,CAAC,CAAE,CAAC,CAAC,CAAC;oBACnD,aAAa,GAAS,SAAS,CAAC;gBACjC,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,MAAM,CAAC,IAAI,CAAQ,SAAS,CAAE,CAAC;gBAChC,CAAC;gBAED,OAAO,SAAS,CAAC,EAAE,CAAC;gBACpB,OAAO,SAAS,CAAC,KAAK,CAAC;aACvB;YAED,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC;YAC9B,MAAM,CAAC,aAAa,CAAC;QACtB,CAAC,CAAC,CAAC;IACJ,CAAC;IACF,cAAC;AAAD,CA9BA,AA8BC,IAAA;AA9BY,eAAO,UA8BnB,CAAA;AAED;IAAA;IAQA,CAAC;IAPO,gBAAU,GAAjB,UAAmB,aAAmB;QACrC,IAAI,QAAQ,GAAY,EAAE,CAAC;QAC3B,GAAG,CAAC,CAAe,UAAoB,EAApB,KAAA,aAAa,CAAC,MAAM,EAApB,cAAoB,EAApB,IAAqB,CAAC;YAAnC,IAAI,KAAK,SAAA;YACd,QAAQ,CAAC,IAAI,CAAE,KAAK,CAAC,OAAO,CAAE,CAAC;SAC/B;QACD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;IAC9B,CAAC;IACF,YAAC;AAAD,CARA,AAQC,IAAA;AARY,aAAK,QAQjB,CAAA","file":"LDP/ErrorResponse.js","sourcesContent":["import * as Document from \"./../Document\";\nimport Error from \"./Error\";\nimport * as NS from \"./../NS\";\nimport ObjectSchema from \"./../ObjectSchema\";\nimport * as RDFDocument from \"./../RDF/Document\";\nimport RDFNode from \"./../RDF/RDFNode\";\nimport Resource from \"./../Resource\";\nimport SDKContext from \"./../SDKContext\";\n\nexport const RDF_CLASS:string = NS.C.Class.ErrorResponse;\n\nexport const SCHEMA:ObjectSchema = {\n\t\"errors\": {\n\t\t\"@id\": NS.C.Predicate.error,\n\t\t\"@type\": \"@id\",\n\t\t\"@container\": \"@set\",\n\t},\n\t\"statusCode\": {\n\t\t\"@id\": NS.C.Predicate.httpStatusCode,\n\t\t\"@type\": NS.XSD.DataType.int,\n\t},\n};\n\nexport interface Class {\n\terrors: Error[];\n\tstatusCode: number;\n}\n\nexport class Factory {\n\tstatic create( data:string ):Promise<Class> {\n\t\tlet errorResponse:Class;\n\t\tlet errors:Error[] = [];\n\t\tlet parser:RDFDocument.Parser = new RDFDocument.Parser();\n\t\tlet pointerLib:Document.Class = Document.Factory.create();\n\n\t\treturn parser.parse( data ).then( ( parsedData:RDFDocument.Class[] ) => {\n\t\t\tif ( parsedData.length === 0 ) return null;\n\n\t\t\tlet nodes:RDFNode[] = parsedData[ 0 ][ \"@graph\" ];\n\t\t\tfor ( let node of nodes ) {\n\n\t\t\t\tlet compacted:Resource = <any> {};\n\t\t\t\tSDKContext.documents.compact( node, compacted, pointerLib );\n\n\t\t\t\tif ( compacted.types.indexOf( RDF_CLASS ) !== -1 ) {\n\t\t\t\t\terrorResponse = <any> compacted;\n\t\t\t\t} else {\n\t\t\t\t\terrors.push( <any> compacted );\n\t\t\t\t}\n\n\t\t\t\tdelete compacted.id;\n\t\t\t\tdelete compacted.types;\n\t\t\t}\n\n\t\t\terrorResponse.errors = errors;\n\t\t\treturn errorResponse;\n\t\t});\n\t}\n}\n\nexport class Utils {\n\tstatic getMessage( errorResponse:Class ):string {\n\t\tlet messages:string[] = [];\n\t\tfor ( let error of errorResponse.errors ) {\n\t\t\tmessages.push( error.message );\n\t\t}\n\t\treturn messages.join( \", \" );\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}