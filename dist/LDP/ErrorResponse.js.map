{"version":3,"sources":["LDP/ErrorResponse.ts"],"names":[],"mappings":";AAEA,kDAAoD;AAEpD,6CAA8C;AAC9C,4BAA8B;AAE9B,8BAAgC;AAEhC,8CAAyC;AACzC,uEAAkE;AAErD,QAAA,SAAS,GAAU,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC;AAE5C,QAAA,MAAM,GAAgB;IAClC,QAAQ,EAAE;QACT,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK;QAC3B,OAAO,EAAE,KAAK;QACd,YAAY,EAAE,MAAM;KACpB;IACD,WAAW,EAAE;QACZ,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS;QAC/B,OAAO,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM;KAC/B;IACD,YAAY,EAAE;QACb,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,cAAc;QACpC,OAAO,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG;KAC5B;CACD,CAAC;AAQF;IAAA;IAQA,CAAC;IAPO,eAAU,GAAjB,UAAmB,aAAmB;QACrC,IAAI,QAAQ,GAAY,EAAE,CAAC;QAC3B,GAAG,CAAA,CAAe,UAAoB,EAApB,KAAA,aAAa,CAAC,MAAM,EAApB,cAAoB,EAApB,IAAoB;YAAjC,IAAI,KAAK,SAAA;YACb,QAAQ,CAAC,IAAI,CAAE,KAAK,CAAC,OAAO,CAAE,CAAC;SAC/B;QACD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;IAC9B,CAAC;IACF,WAAC;AAAD,CARA,AAQC,IAAA;AARY,oBAAI;AAUjB;IAAA;IA6BA,CAAC;IA5BA,sBAAK,GAAL,UAAO,KAAY,EAAE,aAA6B;QAA7B,8BAAA,EAAA,gBAA2B,EAAE;QACjD,IAAI,SAAS,GAAa,oBAAU,CAAC,SAAS,CAAC;QAC/C,IAAI,MAAM,GAAgB,IAAI,gBAAY,EAAE,CAAC;QAE7C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAE,KAAK,CAAE,CAAC,IAAI,CAAE,UAAE,SAA0B;YAC9D,IAAI,aAAa,GAAuB,aAAa,CAAC,OAAO,CAAC,MAAM,CAAE,SAAS,CAAE,CAAC;YAElF,GAAG,CAAA,CAAc,UAAS,EAAT,uBAAS,EAAT,uBAAS,EAAT,IAAS;gBAArB,IAAI,IAAI,kBAAA;gBACZ,IAAI,QAAQ,SAAS,CAAC;gBACtB,IAAI,kBAAkB,GAAW,KAAK,CAAC;gBACvC,EAAE,CAAA,CAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAE,IAAI,EAAE,iBAAS,CAAG,CAAC,CAAC,CAAC;oBAC/C,EAAE,CAAA,CAAE,kBAAmB,CAAC;wBAAC,MAAM,IAAI,8BAAoB,CAAE,2DAA2D,CAAE,CAAC;oBAEvH,QAAQ,GAAG,aAAa,CAAC,kBAAkB,CAAE,aAAa,CAAE,CAAC;oBAE7D,kBAAkB,GAAG,IAAI,CAAC;gBAC3B,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,QAAQ,GAAG,aAAa,CAAC,UAAU,CAAE,IAAI,CAAE,KAAK,CAAE,CAAE,CAAC;gBACtD,CAAC;gBAED,SAAS,CAAC,eAAe,CAAC,OAAO,CAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,YAAY,CAAE,IAAI,CAAE,EAAE,aAAa,CAAE,CAAC;aACnG;YAED,EAAE,CAAA,CAAE,CAAE,aAAc,CAAC;gBAAC,MAAM,IAAI,8BAAoB,CAAE,uDAAuD,CAAE,CAAC;YAEhH,MAAM,CAAC,aAAa,CAAC;QACtB,CAAC,CAAE,CAAC;IACL,CAAC;IACF,aAAC;AAAD,CA7BA,AA6BC,IAAA;AA7BY,wBAAM","file":"ErrorResponse.js","sourcesContent":["import Documents from \"./../Documents\";\nimport Error from \"./Error\";\nimport * as FreeResources from \"./../FreeResources\";\nimport HTTPParser from \"./../HTTP/Parser\";\nimport JSONLDParser from \"./../JSONLD/Parser\";\nimport * as NS from \"./../NS\";\nimport ObjectSchema from \"./../ObjectSchema\";\nimport * as RDF from \"./../RDF\";\nimport Resource from \"./../Resource\";\nimport SDKContext from \"./../SDKContext\";\nimport IllegalArgumentError from \"../Errors/IllegalArgumentError\";\n\nexport const RDF_CLASS:string = NS.C.Class.ErrorResponse;\n\nexport const SCHEMA:ObjectSchema = {\n\t\"errors\": {\n\t\t\"@id\": NS.C.Predicate.error,\n\t\t\"@type\": \"@id\",\n\t\t\"@container\": \"@set\",\n\t},\n\t\"requestID\": {\n\t\t\"@id\": NS.C.Predicate.requestID,\n\t\t\"@type\": NS.XSD.DataType.string,\n\t},\n\t\"statusCode\": {\n\t\t\"@id\": NS.C.Predicate.httpStatusCode,\n\t\t\"@type\": NS.XSD.DataType.int,\n\t},\n};\n\nexport interface Class extends Resource {\n\terrors:Error[];\n\trequestID:string;\n\tstatusCode:number;\n}\n\nexport class Util {\n\tstatic getMessage( errorResponse:Class ):string {\n\t\tlet messages:string[] = [];\n\t\tfor( let error of errorResponse.errors ) {\n\t\t\tmessages.push( error.message );\n\t\t}\n\t\treturn messages.join( \", \" );\n\t}\n}\n\nexport class Parser implements HTTPParser<Class> {\n\tparse( input:string, errorResponse:Class = <any>{} ):Promise<Class> {\n\t\tlet documents:Documents = SDKContext.documents;\n\t\tlet parser:JSONLDParser = new JSONLDParser();\n\n\t\treturn parser.parse( input ).then( ( freeNodes:RDF.Node.Class[] ) => {\n\t\t\tlet freeResources:FreeResources.Class = FreeResources.Factory.create( documents );\n\n\t\t\tfor( let node of freeNodes ) {\n\t\t\t\tlet resource:Resource;\n\t\t\t\tlet errorResponseFound:boolean = false;\n\t\t\t\tif( RDF.Node.Util.hasType( node, RDF_CLASS ) ) {\n\t\t\t\t\tif( errorResponseFound ) throw new IllegalArgumentError( \"The input string contains more than once c:ErrorResponse.\" );\n\n\t\t\t\t\tresource = freeResources.createResourceFrom( errorResponse );\n\n\t\t\t\t\terrorResponseFound = true;\n\t\t\t\t} else {\n\t\t\t\t\tresource = freeResources.getPointer( node[ \"@id\" ] );\n\t\t\t\t}\n\n\t\t\t\tdocuments.jsonldConverter.compact( node, resource, documents.getSchemaFor( node ), freeResources );\n\t\t\t}\n\n\t\t\tif( ! errorResponse ) throw new IllegalArgumentError( \"The input string does not contains a c:ErrorResponse.\" );\n\n\t\t\treturn errorResponse;\n\t\t} );\n\t}\n}\n\nexport default Class;\n"]}