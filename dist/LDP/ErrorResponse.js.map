{"version":3,"sources":["LDP/ErrorResponse.ts"],"names":[],"mappings":";AAGA,IAAY,aAAa,WAAM,oBAAoB,CAAC,CAAA;AAEpD,6BAAyB,wBAAwB,CAAC,CAAA;AAClD,IAAY,EAAE,WAAM,SAAS,CAAC,CAAA;AAE9B,IAAY,GAAG,WAAM,UAAU,CAAC,CAAA;AAEhC,2BAAuB,iBAAiB,CAAC,CAAA;AACzC,qCAAiC,gCAAgC,CAAC,CAAA;AAErD,iBAAS,GAAU,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC;AAE5C,cAAM,GAAgB;IAClC,QAAQ,EAAE;QACT,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK;QAC3B,OAAO,EAAE,KAAK;QACd,YAAY,EAAE,MAAM;KACpB;IACD,YAAY,EAAE;QACb,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,cAAc;QACpC,OAAO,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG;KAC5B;CACD,CAAC;AAOF;IAAA;IAQA,CAAC;IAPO,eAAU,GAAjB,UAAmB,aAAmB;QACrC,IAAI,QAAQ,GAAY,EAAE,CAAC;QAC3B,GAAG,CAAC,CAAe,UAAoB,EAApB,KAAA,aAAa,CAAC,MAAM,EAApB,cAAoB,EAApB,IAAqB,CAAC;YAAnC,IAAI,KAAK,SAAA;YACd,QAAQ,CAAC,IAAI,CAAE,KAAK,CAAC,OAAO,CAAE,CAAC;SAC/B;QACD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;IAC9B,CAAC;IACF,WAAC;AAAD,CARA,AAQC,IAAA;AARY,YAAI,OAQhB,CAAA;AAED;IAAA;IAwBA,CAAC;IAvBA,sBAAK,GAAL,UAAO,KAAY;QAClB,IAAI,SAAS,GAAa,oBAAU,CAAC,SAAS,CAAC;QAC/C,IAAI,MAAM,GAAgB,IAAI,sBAAY,EAAE,CAAC;QAE7C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAE,KAAK,CAAE,CAAC,IAAI,CAAE,UAAE,SAA0B;YAC9D,IAAI,aAAa,GAAS,IAAI,CAAC;YAC/B,IAAI,aAAa,GAAuB,aAAa,CAAC,OAAO,CAAC,MAAM,CAAE,SAAS,CAAE,CAAC;YAElF,GAAG,CAAA,CAAc,UAAS,EAAT,uBAAS,EAAT,uBAAS,EAAT,IAAU,CAAC;gBAAvB,IAAI,IAAI,kBAAA;gBACZ,IAAI,QAAQ,GAAuB,aAAa,CAAC,UAAU,CAAE,IAAI,CAAE,KAAK,CAAE,CAAE,CAAC;gBAC7E,SAAS,CAAC,eAAe,CAAC,OAAO,CAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,YAAY,CAAE,IAAI,CAAE,EAAE,aAAa,CAAE,CAAC;gBAEnG,EAAE,CAAC,CAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAE,IAAI,EAAE,iBAAS,CAAG,CAAC,CAAC,CAAC;oBAChD,EAAE,CAAC,CAAE,aAAc,CAAC;wBAAC,MAAM,IAAI,8BAAoB,CAAE,2DAA2D,CAAE,CAAC;oBACnH,aAAa,GAAW,QAAQ,CAAC;gBAClC,CAAC;aACD;YAED,EAAE,CAAC,CAAE,CAAE,aAAc,CAAC;gBAAC,MAAM,IAAI,8BAAoB,CAAE,uDAAuD,CAAE,CAAC;YAEjH,MAAM,CAAC,aAAa,CAAC;QACtB,CAAC,CAAC,CAAC;IACJ,CAAC;IACF,aAAC;AAAD,CAxBA,AAwBC,IAAA;AAxBY,cAAM,SAwBlB,CAAA","file":"LDP/ErrorResponse.js","sourcesContent":["import BadResponseError from \"./../HTTP/Errors/server/BadResponseError\";\nimport Documents from \"./../Documents\";\nimport Error from \"./Error\";\nimport * as FreeResources from \"./../FreeResources\";\nimport HTTPParser from \"./../HTTP/Parser\";\nimport JSONLDParser from \"./../HTTP/JSONLDParser\";\nimport * as NS from \"./../NS\";\nimport ObjectSchema from \"./../ObjectSchema\";\nimport * as RDF from \"./../RDF\";\nimport Resource from \"./../Resource\";\nimport SDKContext from \"./../SDKContext\";\nimport IllegalArgumentError from \"../Errors/IllegalArgumentError\";\n\nexport const RDF_CLASS:string = NS.C.Class.ErrorResponse;\n\nexport const SCHEMA:ObjectSchema = {\n\t\"errors\": {\n\t\t\"@id\": NS.C.Predicate.error,\n\t\t\"@type\": \"@id\",\n\t\t\"@container\": \"@set\",\n\t},\n\t\"statusCode\": {\n\t\t\"@id\": NS.C.Predicate.httpStatusCode,\n\t\t\"@type\": NS.XSD.DataType.int,\n\t},\n};\n\nexport interface Class extends Resource{\n\terrors: Error[];\n\tstatusCode: number;\n}\n\nexport class Util {\n\tstatic getMessage( errorResponse:Class ):string {\n\t\tlet messages:string[] = [];\n\t\tfor ( let error of errorResponse.errors ) {\n\t\t\tmessages.push( error.message );\n\t\t}\n\t\treturn messages.join( \", \" );\n\t}\n}\n\nexport class Parser implements HTTPParser<Class> {\n\tparse( input:string ):Promise<Class> {\n\t\tlet documents:Documents = SDKContext.documents;\n\t\tlet parser:JSONLDParser = new JSONLDParser();\n\n\t\treturn parser.parse( input ).then( ( freeNodes:RDF.Node.Class[] ) => {\n\t\t\tlet errorResponse:Class = null;\n\t\t\tlet freeResources:FreeResources.Class = FreeResources.Factory.create( documents );\n\n\t\t\tfor( let node of freeNodes ) {\n\t\t\t\tlet resource:Resource = <Resource> freeResources.getPointer( node[ \"@id\" ] );\n\t\t\t\tdocuments.jsonldConverter.compact( node, resource, documents.getSchemaFor( node ), freeResources );\n\n\t\t\t\tif ( RDF.Node.Util.hasType( node, RDF_CLASS ) ) {\n\t\t\t\t\tif ( errorResponse ) throw new IllegalArgumentError( \"The input string contains more than once c:ErrorResponse.\" );\n\t\t\t\t\terrorResponse = <Class> resource;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! errorResponse ) throw new IllegalArgumentError( \"The input string does not contains a c:ErrorResponse.\" );\n\n\t\t\treturn errorResponse;\n\t\t});\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}