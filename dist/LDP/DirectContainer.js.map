{"version":3,"sources":["LDP/DirectContainer.ts"],"names":[],"mappings":";AAAA,IAAY,SAAS,WAAM,aAAa,CAAC,CAAA;AACzC,IAAY,QAAQ,WAAM,eAAe,CAAC,CAAA;AAC1C,IAAY,MAAM,WAAM,aAAa,CAAC,CAAA;AACtC,IAAY,EAAE,WAAM,SAAS,CAAC,CAAA;AAG9B,IAAY,KAAK,WAAM,YAAY,CAAC,CAAA;AAEvB,iBAAS,GAAU,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,eAAe,CAAC;AAM7D;IAAA;IA6CA,CAAC;IA5CO,0BAAkB,GAAzB,UAA2B,QAAe;QACzC,MAAM,CAAC,CACN,KAAK,CAAC,kBAAkB,CAAE,QAAQ,EAAE,oBAAoB,CAAE,CAC1D,CAAC;IACH,CAAC;IAIM,mBAAW,GAAlB,UAAoB,wBAA+B;QAClD,IAAI,KAAK,GAAY,EAAE,CAAC;QACxB,EAAE,CAAA,CAAE,OAAO,IAAI,wBAAyB,CAAC,CAAC,CAAC;YAC1C,KAAK,GAAG,wBAAwB,CAAE,OAAO,CAAE,CAAC;QAC7C,CAAC;QAAC,IAAI,CAAC,EAAE,CAAA,CAAE,OAAO,IAAI,wBAAyB,CAAC,CAAC,CAAC;YACjD,IAAI,QAAQ,GAAwB,wBAAwB,CAAC;YAC7D,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;QACxB,CAAC;QAED,MAAM,CAAC,KAAK,CAAC,OAAO,CAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,eAAe,CAAE,KAAK,CAAE,CAAC,CAAC;IAC9D,CAAC;IAEM,UAAE,GAAT,UAAW,MAAa;QACvB,MAAM,CAAC,CACN,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAE,MAAM,CAAE;YAC7B,OAAO,CAAC,kBAAkB,CAAE,MAAM,CAAE;YACpC,OAAO,CAAC,WAAW,CAAE,MAAM,CAAE,CAC7B,CAAC;IACH,CAAC;IAEM,cAAM,GAAb,UAAe,kBAAgC,EAAE,iBAAwC,EAAE,gBAAwC;QAClI,MAAM,CAAC,OAAO,CAAC,UAAU,CAAE,EAAE,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,gBAAgB,CAAE,CAAC;IAC1F,CAAC;IAEM,kBAAU,GAAjB,UAAqC,MAAQ,EAAE,kBAAgC,EAAE,iBAAwC,EAAE,gBAAwC;QAClK,EAAE,CAAA,CAAE,OAAO,CAAC,EAAE,CAAE,MAAM,CAAG,CAAC;YAAC,MAAM,IAAI,MAAM,CAAC,oBAAoB,CAAE,8CAA8C,CAAE,CAAC;QACnH,EAAE,CAAA,CAAE,CAAE,kBAAmB,CAAC;YAAC,MAAM,IAAI,MAAM,CAAC,oBAAoB,CAAE,mCAAmC,CAAE,CAAC;QAExG,EAAE,CAAA,CAAE,CAAE,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAE,MAAM,CAAG,CAAC;YAAC,MAAM,GAAS,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAE,MAAM,CAAE,CAAC;QAC3F,IAAI,SAAS,GAAa,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAQ,MAAM,EAAE,iBAAiB,EAAE,gBAAgB,CAAE,CAAC;QAE1G,SAAS,CAAC,KAAK,CAAC,IAAI,CAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,eAAe,CAAE,CAAC;QACrD,SAAS,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAElD,MAAM,CAAC,SAAS,CAAC;IAClB,CAAC;IACF,cAAC;AAAD,CA7CA,AA6CC,IAAA;AA7CY,eAAO,UA6CnB,CAAA","file":"LDP/DirectContainer.js","sourcesContent":["import * as Container from \"./Container\";\nimport * as Document from \"./../Document\";\nimport * as Errors from \"./../Errors\";\nimport * as NS from \"./../NS\";\nimport * as Pointer from \"./../Pointer\";\nimport * as Resource from \"./../Resource\";\nimport * as Utils from \"./../Utils\";\n\nexport const RDF_CLASS:string = NS.LDP.Class.DirectContainer;\n\nexport interface Class extends Container.Class {\n\tmembershipResource:Pointer.Class;\n}\n\nexport class Factory {\n\tstatic hasClassProperties( resource:Object ):boolean {\n\t\treturn (\n\t\t\tUtils.hasPropertyDefined( resource, \"membershipResource\" )\n\t\t);\n\t}\n\n\tstatic hasRDFClass( resource:Resource.Class ):boolean;\n\tstatic hasRDFClass( expandedObject:Object ):boolean;\n\tstatic hasRDFClass( resourceOrExpandedObject:Object ):boolean {\n\t\tlet types:string[] = [];\n\t\tif( \"@type\" in resourceOrExpandedObject ) {\n\t\t\ttypes = resourceOrExpandedObject[ \"@type\" ];\n\t\t} else if( \"types\" in resourceOrExpandedObject ) {\n\t\t\tlet resource:Resource.Class = <any> resourceOrExpandedObject;\n\t\t\ttypes = resource.types;\n\t\t}\n\n\t\treturn types.indexOf( NS.LDP.Class.DirectContainer ) !== - 1;\n\t}\n\n\tstatic is( object:Object ):boolean {\n\t\treturn (\n\t\t\tDocument.Factory.is( object ) &&\n\t\t\tFactory.hasClassProperties( object ) &&\n\t\t\tFactory.hasRDFClass( object )\n\t\t);\n\t}\n\n\tstatic create( membershipResource:Pointer.Class, hasMemberRelation:string | Pointer.Class, memberOfRelation?:string | Pointer.Class ):Class {\n\t\treturn Factory.createFrom( {}, membershipResource, hasMemberRelation, memberOfRelation );\n\t}\n\n\tstatic createFrom<T extends Object>( object:T, membershipResource:Pointer.Class, hasMemberRelation:string | Pointer.Class, memberOfRelation?:string | Pointer.Class ):T & Class {\n\t\tif( Factory.is( object ) ) throw new Errors.IllegalArgumentError( \"The base object is already a DirectContainer\" );\n\t\tif( ! membershipResource ) throw new Errors.IllegalArgumentError( \"membershipResource cannot be null\" );\n\n\t\tif( ! Document.Factory.is( object ) ) object = <any> Document.Factory.createFrom( object );\n\t\tlet container:T & Class = Container.Factory.decorate( <any> object, hasMemberRelation, memberOfRelation );\n\n\t\tcontainer.types.push( NS.LDP.Class.DirectContainer );\n\t\tcontainer.membershipResource = membershipResource;\n\n\t\treturn container;\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}