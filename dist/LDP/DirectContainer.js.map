{"version":3,"sources":["LDP/DirectContainer.ts"],"names":[],"mappings":";AAAA,IAAY,QAAQ,WAAM,eAAe,CAAC,CAAA;AAC1C,IAAY,MAAM,WAAM,aAAa,CAAC,CAAA;AACtC,IAAY,EAAE,WAAM,SAAS,CAAC,CAAA;AAC9B,IAAY,OAAO,WAAM,cAAc,CAAC,CAAA;AACxC,IAAY,QAAQ,WAAM,eAAe,CAAC,CAAA;AAC1C,IAAY,KAAK,WAAM,YAAY,CAAC,CAAA;AAEvB,iBAAS,GAAU,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,eAAe,CAAC;AAM7D;IAAA;IAyCA,CAAC;IAxCO,0BAAkB,GAAzB,UAA2B,QAAe;QACzC,MAAM,CAAC,CACN,KAAK,CAAC,kBAAkB,CAAE,QAAQ,EAAE,oBAAoB,CAAE,CAC1D,CAAC;IACH,CAAC;IAEM,UAAE,GAAT,UAAW,MAAa;QACvB,MAAM,CAAC,CACN,OAAO,CAAC,kBAAkB,CAAE,MAAM,CAAE;eACjC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAE,MAAM,EAAE,iBAAS,CAAE;eAC1C,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAE,MAAM,CAAE,CAChC,CAAC;IACH,CAAC;IAEM,cAAM,GAAb,UAAe,kBAAgC,EAAE,iBAAwC,EAAE,gBAAwC;QAClI,MAAM,CAAC,OAAO,CAAC,UAAU,CAAE,EAAE,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,gBAAgB,CAAE,CAAC;IAC1F,CAAC;IAEM,kBAAU,GAAjB,UAAqC,MAAQ,EAAE,kBAAgC,EAAE,iBAAwC,EAAE,gBAAwC;QAClK,EAAE,CAAA,CAAE,OAAO,CAAC,EAAE,CAAE,MAAM,CAAG,CAAC;YAAC,MAAM,IAAI,MAAM,CAAC,oBAAoB,CAAE,8CAA8C,CAAE,CAAC;QACnH,EAAE,CAAA,CAAE,CAAE,kBAAmB,CAAC;YAAC,MAAM,IAAI,MAAM,CAAC,oBAAoB,CAAE,uCAAuC,CAAE,CAAC;QAE5G,IAAI,SAAS,GAAmB,MAAM,CAAC;QACvC,EAAE,CAAA,CAAE,CAAE,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAE,MAAM,CAAG,CAAC;YAAC,SAAS,GAAS,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAE,MAAM,CAAE,CAAC;QAE9F,SAAS,CAAC,KAAK,CAAC,IAAI,CAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAE,CAAC;QAC/C,SAAS,CAAC,KAAK,CAAC,IAAI,CAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,eAAe,CAAE,CAAC;QAErD,SAAS,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAElD,EAAE,CAAA,CAAE,CAAE,CAAE,iBAAkB,CAAC,CAAC,CAAC;YAC5B,SAAS,CAAC,iBAAiB,GAAG,OAAO,CAAC,OAAO,CAAC,EAAE,CAAE,iBAAiB,CAAE,GAAmB,iBAAiB,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,CAAW,iBAAiB,CAAE,CAAC;QAClK,CAAC;QAED,EAAE,CAAA,CAAE,CAAE,CAAE,gBAAiB,CAAC,CAAC,CAAC;YAC3B,SAAS,CAAC,gBAAgB,GAAG,OAAO,CAAC,OAAO,CAAC,EAAE,CAAE,gBAAgB,CAAE,GAAmB,gBAAgB,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,CAAW,gBAAgB,CAAE,CAAC;QAC9J,CAAC;QAED,MAAM,CAAC,SAAS,CAAC;IAClB,CAAC;IACF,cAAC;AAAD,CAzCA,AAyCC,IAAA;AAzCY,eAAO,UAyCnB,CAAA","file":"LDP/DirectContainer.js","sourcesContent":["import * as Document from \"./../Document\";\nimport * as Errors from \"./../Errors\";\nimport * as NS from \"./../NS\";\nimport * as Pointer from \"./../Pointer\";\nimport * as Resource from \"./../Resource\";\nimport * as Utils from \"./../Utils\";\n\nexport const RDF_CLASS:string = NS.LDP.Class.DirectContainer;\n\nexport interface Class extends Document.Class {\n\tmembershipResource:Pointer.Class;\n}\n\nexport class Factory {\n\tstatic hasClassProperties( resource:Object ):boolean {\n\t\treturn (\n\t\t\tUtils.hasPropertyDefined( resource, \"membershipResource\" )\n\t\t);\n\t}\n\n\tstatic is( object:Object ):boolean {\n\t\treturn (\n\t\t\tFactory.hasClassProperties( object )\n\t\t\t&& Resource.Util.hasType( object, RDF_CLASS )\n\t\t\t&& Document.Factory.is( object )\n\t\t);\n\t}\n\n\tstatic create( membershipResource:Pointer.Class, hasMemberRelation:string | Pointer.Class, memberOfRelation?:string | Pointer.Class ):Class {\n\t\treturn Factory.createFrom( {}, membershipResource, hasMemberRelation, memberOfRelation );\n\t}\n\n\tstatic createFrom<T extends Object>( object:T, membershipResource:Pointer.Class, hasMemberRelation:string | Pointer.Class, memberOfRelation?:string | Pointer.Class ):T & Class {\n\t\tif( Factory.is( object ) ) throw new Errors.IllegalArgumentError( \"The base object is already a DirectContainer\" );\n\t\tif( ! membershipResource ) throw new Errors.IllegalArgumentError( \"The membershipResource cannot be null\" );\n\n\t\tlet container:T & Class = <any> object;\n\t\tif( ! Document.Factory.is( object ) ) container = <any> Document.Factory.createFrom( object );\n\n\t\tcontainer.types.push( NS.LDP.Class.Container );\n\t\tcontainer.types.push( NS.LDP.Class.DirectContainer );\n\n\t\tcontainer.membershipResource = membershipResource;\n\n\t\tif( ! ! hasMemberRelation ) {\n\t\t\tcontainer.hasMemberRelation = Pointer.Factory.is( hasMemberRelation ) ? <Pointer.Class> hasMemberRelation : Pointer.Factory.create( <string> hasMemberRelation );\n\t\t}\n\n\t\tif( ! ! memberOfRelation ) {\n\t\t\tcontainer.memberOfRelation = Pointer.Factory.is( memberOfRelation ) ? <Pointer.Class> memberOfRelation : Pointer.Factory.create( <string> memberOfRelation );\n\t\t}\n\n\t\treturn container;\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}