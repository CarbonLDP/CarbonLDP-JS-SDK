{"version":3,"sources":["LDP/BasicContainer.ts"],"names":[],"mappings":";AAEA,IAAY,EAAE,WAAM,SAAS,CAAC,CAAA;AAC9B,IAAY,OAAO,WAAM,cAAc,CAAC,CAAA;AAK3B,iBAAS,GAAU,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC;AAM5D;IAAA;IAeA,CAAC;IAZA,6BAAW,GAAX,UAAa,uBAA8B;QAC1C,IAAI,KAAK,GAAY,EAAE,CAAC;QACxB,EAAE,CAAA,CAAE,OAAO,IAAI,uBAAwB,CAAC,CAAC,CAAC;YACzC,KAAK,GAAG,uBAAuB,CAAE,OAAO,CAAE,CAAC;QAC5C,CAAC;QAAC,IAAI,CAAC,EAAE,CAAA,CAAE,OAAO,IAAI,uBAAwB,CAAC,CAAC,CAAC;YAEhD,IAAI,QAAQ,GAAoC,uBAAuB,CAAC;YACxE,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAE,QAAQ,CAAC,KAAK,CAAE,CAAC;QAC/C,CAAC;QAED,MAAM,CAAC,KAAK,CAAC,OAAO,CAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,cAAc,CAAE,KAAK,CAAE,CAAC,CAAC;IAC7D,CAAC;IACF,cAAC;AAAD,CAfA,AAeC,IAAA;AAfY,eAAO,UAenB,CAAA;AAEU,eAAO,GAAW,IAAI,OAAO,EAAE,CAAC","file":"LDP/BasicContainer.js","sourcesContent":["/// <reference path=\"./../../typings/typings.d.ts\" />\n\nimport * as NS from \"./../NS\";\nimport * as Pointer from \"./../Pointer\";\nimport * as RDF from \"./../RDF\";\nimport * as Container from \"./Container\";\nimport * as Utils from \"./../Utils\";\n\nexport const RDF_CLASS:string = NS.LDP.Class.BasicContainer;\n\nexport interface Class extends Container.Class {\n\n}\n\nexport class Factory {\n\thasRDFClass( pointer:Pointer.Class ):boolean;\n\thasRDFClass( expandedObject:Object ):boolean;\n\thasRDFClass( pointerOrExpandedObject:Object ):boolean {\n\t\tlet types:string[] = [];\n\t\tif( \"@type\" in pointerOrExpandedObject ) {\n\t\t\ttypes = pointerOrExpandedObject[ \"@type\" ];\n\t\t} else if( \"types\" in pointerOrExpandedObject ) {\n\t\t\t// TODO: Use proper class\n\t\t\tlet resource:{ types: Pointer.Class[] } = <any> pointerOrExpandedObject;\n\t\t\ttypes = Pointer.Util.getIDs( resource.types );\n\t\t}\n\n\t\treturn types.indexOf( NS.LDP.Class.BasicContainer ) !== - 1;\n\t}\n}\n\nexport let factory:Factory = new Factory();\n\nexport default Class;\n"],"sourceRoot":"/source/"}