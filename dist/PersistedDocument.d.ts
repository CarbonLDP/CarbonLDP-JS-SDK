import { QueryClause } from "sparqler/clauses";
import { AccessPointBase } from "./AccessPoint";
import { Document } from "./Document";
import Documents from "./Documents";
import * as Request from "./HTTP/Request";
import * as Response from "./HTTP/Response";
import * as MessagingDocument from "./Messaging/Document";
import * as PersistedAccessPoint from "./PersistedAccessPoint";
import * as PersistedFragment from "./PersistedFragment";
import * as PersistedNamedFragment from "./PersistedNamedFragment";
import * as PersistedProtectedDocument from "./PersistedProtectedDocument";
import * as PersistedResource from "./PersistedResource";
import { Pointer } from "./Pointer";
import { ServiceAwareDocument } from "./ServiceAwareDocument";
import * as SPARQL from "./SPARQL";
import { QueryDocumentsBuilder } from "./SPARQL/QueryDocument";
export interface Class extends Document, PersistedResource.Class, ServiceAwareDocument, MessagingDocument.Class {
    created?: Date;
    modified?: Date;
    defaultInteractionModel?: Pointer;
    accessPoints?: Pointer[];
    hasMemberRelation?: Pointer;
    isMemberOfRelation?: Pointer;
    contains?: Pointer[];
    _etag: string;
    _fragmentsIndex: Map<string, PersistedFragment.Class>;
    _savedFragments: PersistedFragment.Class[];
    _syncSavedFragments(): void;
    isLocallyOutDated(): boolean;
    getFragment<T extends object>(slug: string): T & PersistedFragment.Class;
    getNamedFragment<T extends object>(slug: string): T & PersistedNamedFragment.Class;
    getFragments(): PersistedFragment.Class[];
    createFragment(): PersistedFragment.Class;
    createFragment(slug: string): PersistedFragment.Class;
    createFragment<T extends object>(object: T): PersistedFragment.Class & T;
    createFragment<T extends object>(object: T, slug: string): PersistedFragment.Class & T;
    createNamedFragment(slug: string): PersistedNamedFragment.Class;
    createNamedFragment<T extends object>(object: T, slug: string): PersistedNamedFragment.Class & T;
    refresh<T extends object>(): Promise<[T & Class, Response.Class]>;
    save<T extends object>(requestOptions?: Request.Options): Promise<[T & Class, Response.Class]>;
    saveAndRefresh<T extends object>(): Promise<[T & Class, Response.Class[]]>;
    delete(): Promise<Response.Class>;
    getDownloadURL(): Promise<string>;
    addMember(member: Pointer): Promise<Response.Class>;
    addMember(memberURI: string): Promise<Response.Class>;
    addMembers(members: (Pointer | string)[]): Promise<Response.Class>;
    createChild<T extends object>(object: T, slug: string, requestOptions?: Request.Options): Promise<[T & PersistedProtectedDocument.Class, Response.Class]>;
    createChild<T extends object>(object: T, requestOptions?: Request.Options): Promise<[T & PersistedProtectedDocument.Class, Response.Class]>;
    createChild(slug: string, requestOptions?: Request.Options): Promise<[PersistedProtectedDocument.Class, Response.Class]>;
    createChild(requestOptions?: Request.Options): Promise<[PersistedProtectedDocument.Class, Response.Class]>;
    createChildren<T extends object>(objects: T[], slugs: string[], requestOptions?: Request.Options): Promise<[(T & PersistedProtectedDocument.Class)[], Response.Class[]]>;
    createChildren<T extends object>(objects: T[], requestOptions?: Request.Options): Promise<[(T & PersistedProtectedDocument.Class)[], Response.Class[]]>;
    createChildAndRetrieve<T extends object>(object: T, slug: string, requestOptions?: Request.Options): Promise<[T & PersistedProtectedDocument.Class, Response.Class]>;
    createChildAndRetrieve<T extends object>(object: T, requestOptions?: Request.Options): Promise<[T & PersistedProtectedDocument.Class, Response.Class]>;
    createChildAndRetrieve(slug: string, requestOptions?: Request.Options): Promise<[PersistedProtectedDocument.Class, Response.Class]>;
    createChildAndRetrieve(requestOptions?: Request.Options): Promise<[PersistedProtectedDocument.Class, Response.Class]>;
    createChildrenAndRetrieve<T extends object>(objects: T[], slugs: string[], requestOptions?: Request.Options): Promise<[(T & PersistedProtectedDocument.Class)[], Response.Class[]]>;
    createChildrenAndRetrieve<T extends object>(objects: T[], requestOptions?: Request.Options): Promise<[(T & PersistedProtectedDocument.Class)[], Response.Class[]]>;
    createAccessPoint<T extends object>(accessPoint: T & AccessPointBase, slug?: string, requestOptions?: Request.Options): Promise<[T & PersistedAccessPoint.Class, Response.Class]>;
    createAccessPoint<T extends object>(accessPoint: T & AccessPointBase, requestOptions?: Request.Options): Promise<[T & PersistedAccessPoint.Class, Response.Class]>;
    createAccessPoints<T extends object>(accessPoints: (T & AccessPointBase)[], slugs?: string[], requestOptions?: Request.Options): Promise<[(T & PersistedAccessPoint.Class)[], Response.Class[]]>;
    createAccessPoints<T extends object>(accessPoints: (T & AccessPointBase)[], requestOptions?: Request.Options): Promise<[(T & PersistedAccessPoint.Class)[], Response.Class[]]>;
    listChildren(requestOptions?: Request.Options): Promise<[Class[], Response.Class]>;
    getChildren<T extends object>(requestOptions?: Request.Options, queryBuilderFn?: (queryBuilder: QueryDocumentsBuilder.Class) => QueryDocumentsBuilder.Class): Promise<[(T & Class)[], Response.Class]>;
    getChildren<T extends object>(queryBuilderFn?: (queryBuilder: QueryDocumentsBuilder.Class) => QueryDocumentsBuilder.Class): Promise<[(T & Class)[], Response.Class]>;
    listMembers(requestOptions?: Request.Options): Promise<[Class[], Response.Class]>;
    getMembers<T extends object>(requestOptions?: Request.Options, queryBuilderFn?: (queryBuilder: QueryDocumentsBuilder.Class) => QueryDocumentsBuilder.Class): Promise<[(T & Class)[], Response.Class]>;
    getMembers<T extends object>(queryBuilderFn?: (queryBuilder: QueryDocumentsBuilder.Class) => QueryDocumentsBuilder.Class): Promise<[(T & Class)[], Response.Class]>;
    removeMember(member: Pointer): Promise<Response.Class>;
    removeMember(memberURI: string): Promise<Response.Class>;
    removeMembers(members: (Pointer | string)[]): Promise<Response.Class>;
    removeAllMembers(): Promise<Response.Class>;
    executeRawASKQuery(askQuery: string, requestOptions?: Request.Options): Promise<[SPARQL.RawResults.Class, Response.Class]>;
    executeASKQuery(askQuery: string, requestOptions?: Request.Options): Promise<[boolean, Response.Class]>;
    executeRawSELECTQuery(selectQuery: string, requestOptions?: Request.Options): Promise<[SPARQL.RawResults.Class, Response.Class]>;
    executeSELECTQuery<T extends object>(selectQuery: string, requestOptions?: Request.Options): Promise<[SPARQL.SELECTResults.Class<T>, Response.Class]>;
    executeRawCONSTRUCTQuery(constructQuery: string, requestOptions?: Request.Options): Promise<[string, Response.Class]>;
    executeRawDESCRIBEQuery(describeQuery: string, requestOptions?: Request.Options): Promise<[string, Response.Class]>;
    executeUPDATE(updateQuery: string, requestOptions?: Request.Options): Promise<Response.Class>;
    sparql(): QueryClause;
}
export declare class Factory {
    static hasClassProperties(object: object): object is Class;
    static is(object: object): object is Class;
    static create(uri: string, documents: Documents): Class;
    static createFrom<T extends object>(object: T, uri: string, documents: Documents): T & Class;
    static decorate<T extends object>(object: T, documents: Documents): T & Class;
}
export default Class;
