{"version":3,"sources":["Messaging/utils.ts"],"names":[],"mappings":";;AAEA,oCAAoE;AACpE,kCAA8C;AAC9C,qCAAgC;AAEhC,8BAAsC,OAAe;IACpD,EAAE,CAAA,CAAE,CAAE,CAAE,OAAO,IAAK,OAAkB,CAAC,SAAS,YAAY,iBAAO,CAAG,CAAC;QACtE,MAAM,IAAI,0BAAiB,CAAE,yDAAyD,CAAE,CAAC;AAC3F,CAAC;AAHD,oDAGC;AAED,2BAAmC,SAAgB;IAClD,EAAE,CAAA,CAAE,CAAE,qGAAqG,CAAC,IAAI,CAAE,SAAS,CAAG,CAAC;QAAC,MAAM,IAAI,6BAAoB,CAAE,2BAAyB,SAAS,mBAAgB,CAAE,CAAC;AACtN,CAAC;AAFD,8CAEC;AAED,yBAAiC,UAAiB,EAAE,OAAc;IACjE,EAAE,CAAA,CAAE,CAAE,UAAQ,CAAC,QAAQ,CAAE,OAAO,EAAE,UAAU,CAAG,CAAC;QAAC,MAAM,IAAI,6BAAoB,CAAE,2BAAyB,UAAU,+CAA4C,CAAE,CAAC;IAEnK,EAAE,CAAA,CAAE,UAAU,KAAK,GAAI,CAAC;QAAC,MAAM,CAAC,EAAE,CAAC;IACnC,UAAU,GAAG,UAAQ,CAAC,cAAc,CAAE,UAAU,EAAE,OAAO,CAAE,CAAC;IAC5D,UAAU,GAAG,UAAU,CAAC,SAAS,CAAE,CAAE,UAAU,CAAC,UAAU,CAAE,GAAG,CAAE,EAAE,UAAU,CAAC,MAAM,GAAG,CAAE,UAAU,CAAC,QAAQ,CAAE,GAAG,CAAE,CAAE,CAAC;IAEtH,MAAM,CAAC,UAAU;SACf,KAAK,CAAE,GAAG,CAAE;SACZ,GAAG,CAAE,UAAA,IAAI;QACT,EAAE,CAAA,CAAE,IAAI,KAAK,IAAK,CAAC;YAAC,MAAM,CAAC,GAAG,CAAC;QAC/B,MAAM,CAAC,kBAAkB,CAAE,IAAI,CAAE;aAC/B,OAAO,CAAE,KAAK,EAAE,GAAG,CAAE,CAAC;IACzB,CAAC,CAAE,CAAC,IAAI,CAAE,GAAG,CAAE,CACd;AACH,CAAC;AAfD,0CAeC;AAED,2BAAmC,KAAY,EAAE,UAAiB,EAAE,OAAc;IACjF,iBAAiB,CAAE,KAAK,CAAE,CAAC;IAE3B,UAAU,GAAG,eAAe,CAAE,UAAU,EAAE,OAAO,CAAE,CAAC;IACpD,MAAM,CAAC,YAAW,KAAK,IAAK,UAAU,GAAG,GAAG,GAAG,UAAU,GAAG,UAAU,CAAG,CAAC;AAC3E,CAAC;AALD,8CAKC","file":"utils.js","sourcesContent":["import Carbon from \"../Carbon\";\nimport { Class as Context } from \"../Context\";\nimport { IllegalArgumentError, IllegalStateError } from \"../Errors\";\nimport { Util as URIUtils } from \"../RDF/URI\";\nimport Service from \"./Service\";\n\nexport function validateEventContext( context:Context ):void {\n\tif( ! ( context && (context as Carbon).messaging instanceof Service ) )\n\t\tthrow new IllegalStateError( \"This instance does not support messaging subscriptions.\" );\n}\n\nexport function validateEventType( eventType:string ):void {\n\tif( ! /(access-point|child|\\*\\.created|\\*)|(document|\\*\\.modidied|deleted\\*)|(member|\\*\\.added|removed|\\*)/.test( eventType ) ) throw new IllegalArgumentError( `Provided event type \"${ eventType }\" is invalid.` );\n}\n\nexport function parseURIPattern( uriPattern:string, baseURI:string ):string {\n\tif( ! URIUtils.isBaseOf( baseURI, uriPattern ) ) throw new IllegalArgumentError( `Provided uriPattern \"${ uriPattern }\" is an invalid for your Carbon instance.` );\n\n\tif( uriPattern === \"/\" ) return \"\";\n\turiPattern = URIUtils.getRelativeURI( uriPattern, baseURI );\n\turiPattern = uriPattern.substring( + uriPattern.startsWith( \"/\" ), uriPattern.length - + uriPattern.endsWith( \"/\" ) );\n\n\treturn uriPattern\n\t\t.split( \"/\" )\n\t\t.map( slug => {\n\t\t\tif( slug === \"**\" ) return \"#\";\n\t\t\treturn encodeURIComponent( slug )\n\t\t\t\t.replace( /\\./g, \"^\" );\n\t\t} ).join( \".\" )\n\t\t;\n}\n\nexport function createDestination( event:string, uriPattern:string, baseURI:string ):string {\n\tvalidateEventType( event );\n\n\turiPattern = parseURIPattern( uriPattern, baseURI );\n\treturn `/topic/${ event }${ uriPattern ? \".\" + uriPattern : uriPattern }`;\n}\n"]}