{"version":3,"sources":["Messaging/utils.ts"],"names":[],"mappings":";;AAAA,oCAA4C;AAE5C,oCAAoE;AACpE,kCAA8C;AAE9C,8BAAsC,OAAe;IACpD,EAAE,CAAA,CAAE,CAAE,CAAC,OAAO,YAAY,cAAM,CAAG,CAAC;QAAC,MAAM,IAAI,0BAAiB,CAAE,iDAAiD,CAAE,CAAC;AACvH,CAAC;AAFD,oDAEC;AAED,2BAAmC,SAAgB;IAClD,EAAE,CAAA,CAAE,CAAE,qGAAqG,CAAC,IAAI,CAAE,SAAS,CAAG,CAAC;QAAC,MAAM,IAAI,6BAAoB,CAAE,2BAAyB,SAAS,kBAAe,CAAE,CAAC;AACrN,CAAC;AAFD,8CAEC;AAED,yBAAiC,UAAiB,EAAE,OAAc;IACjE,EAAE,CAAA,CAAE,CAAE,UAAQ,CAAC,QAAQ,CAAE,OAAO,EAAE,UAAU,CAAG,CAAC;QAAC,MAAM,IAAI,6BAAoB,CAAE,2BAAyB,UAAU,6BAA0B,CAAE,CAAC;IAEjJ,EAAE,CAAA,CAAE,UAAU,KAAK,GAAI,CAAC;QAAC,MAAM,CAAC,EAAE,CAAC;IACnC,UAAU,GAAG,UAAQ,CAAC,cAAc,CAAE,UAAU,EAAE,OAAO,CAAE,CAAC;IAC5D,UAAU,GAAG,UAAU,CAAC,SAAS,CAAE,CAAE,UAAU,CAAC,UAAU,CAAE,GAAG,CAAE,EAAE,UAAU,CAAC,MAAM,GAAG,CAAE,UAAU,CAAC,QAAQ,CAAE,GAAG,CAAE,CAAE,CAAC;IAEtH,MAAM,CAAC,UAAU;SACf,KAAK,CAAE,GAAG,CAAE;SACZ,GAAG,CAAE,UAAA,IAAI;QACT,EAAE,CAAA,CAAE,IAAI,KAAK,IAAK,CAAC;YAAC,MAAM,CAAC,GAAG,CAAC;QAC/B,MAAM,CAAC,kBAAkB,CAAE,IAAI,CAAE;aAC/B,OAAO,CAAE,GAAG,EAAE,GAAG,CAAE,CAAC;IACvB,CAAC,CAAE,CAAC,IAAI,CAAE,GAAG,CAAE,CACd;AACH,CAAC;AAfD,0CAeC;AAED,2BAAmC,SAAgB,EAAE,UAAiB,EAAE,OAAc;IACrF,UAAU,GAAG,eAAe,CAAE,UAAU,EAAE,OAAO,CAAE,CAAC;IACpD,MAAM,CAAC,YAAW,SAAS,IAAK,UAAU,GAAG,GAAG,GAAG,UAAU,GAAG,UAAU,CAAG,CAAC;AAC/E,CAAC;AAHD,8CAGC","file":"utils.js","sourcesContent":["import { Class as Carbon } from \"../Carbon\";\nimport { Class as Context } from \"../Context\";\nimport { IllegalArgumentError, IllegalStateError } from \"../Errors\";\nimport { Util as URIUtils } from \"../RDF/URI\";\n\nexport function validateEventContext( context:Context ):void {\n\tif( ! (context instanceof Carbon ) ) throw new IllegalStateError( \"This instance does not support messaging events\" );\n}\n\nexport function validateEventType( eventType:string ):void {\n\tif( ! /(access-point|child|\\*\\.created|\\*)|(document|\\*\\.modidied|deleted\\*)|(member|\\*\\.added|removed|\\*)/.test( eventType ) ) throw new IllegalArgumentError( `Provided event type \"${ eventType }\" is invalid` );\n}\n\nexport function parseURIPattern( uriPattern:string, baseURI:string ):string {\n\tif( ! URIUtils.isBaseOf( baseURI, uriPattern ) ) throw new IllegalArgumentError( `Provided uriPattern \"${ uriPattern }\" an invalid Carbon URI` );\n\n\tif( uriPattern === \"/\" ) return \"\";\n\turiPattern = URIUtils.getRelativeURI( uriPattern, baseURI );\n\turiPattern = uriPattern.substring( + uriPattern.startsWith( \"/\" ), uriPattern.length - + uriPattern.endsWith( \"/\" ) );\n\n\treturn uriPattern\n\t\t.split( \"/\" )\n\t\t.map( slug => {\n\t\t\tif( slug === \"**\" ) return \"#\";\n\t\t\treturn encodeURIComponent( slug )\n\t\t\t\t.replace( \".\", \"^\" );\n\t\t} ).join( \".\" )\n\t\t;\n}\n\nexport function createDestination( eventType:string, uriPattern:string, baseURI:string ):string {\n\turiPattern = parseURIPattern( uriPattern, baseURI );\n\treturn `/topic/${ eventType }${ uriPattern ? \".\" + uriPattern : uriPattern }`;\n}\n"]}