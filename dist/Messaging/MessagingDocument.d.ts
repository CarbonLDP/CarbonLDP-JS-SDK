import { ModelDecorator } from "../core";
import { DocumentsRegistry } from "../Registry";
import { TransientResource } from "../Resource";
import { AccessPointCreated } from "./AccessPointCreated";
import { ChildCreated } from "./ChildCreated";
import { DocumentCreated } from "./DocumentCreated";
import { DocumentDeleted } from "./DocumentDeleted";
import { DocumentModified } from "./DocumentModified";
import { Event } from "./Event";
import { EventMessage } from "./EventMessage";
import { MemberAdded } from "./MemberAdded";
import { MemberRemoved } from "./MemberRemoved";
export interface MessagingDocument extends TransientResource {
    _registry: DocumentsRegistry;
    on(event: Event.CHILD_CREATED, uriPattern: string, onEvent: (message: ChildCreated) => void, onError?: (error: Error) => void): void;
    on(event: Event.CHILD_CREATED, onEvent: (message: ChildCreated) => void, onError?: (error: Error) => void): void;
    on(event: Event.ACCESS_POINT_CREATED, uriPattern: string, onEvent: (message: AccessPointCreated) => void, onError?: (error: Error) => void): void;
    on(event: Event.ACCESS_POINT_CREATED, onEvent: (message: AccessPointCreated) => void, onError?: (error: Error) => void): void;
    on(event: Event.DOCUMENT_CREATED, uriPattern: string, onEvent: (message: DocumentCreated) => void, onError?: (error: Error) => void): void;
    on(event: Event.DOCUMENT_CREATED, onEvent: (message: DocumentCreated) => void, onError?: (error: Error) => void): void;
    on(event: Event.DOCUMENT_MODIFIED, uriPattern: string, onEvent: (message: DocumentModified) => void, onError?: (error: Error) => void): void;
    on(event: Event.DOCUMENT_MODIFIED, onEvent: (message: DocumentModified) => void, onError?: (error: Error) => void): void;
    on(event: Event.DOCUMENT_DELETED, uriPattern: string, onEvent: (message: DocumentDeleted) => void, onError?: (error: Error) => void): void;
    on(event: Event.DOCUMENT_DELETED, onEvent: (message: DocumentDeleted) => void, onError?: (error: Error) => void): void;
    on(event: Event.MEMBER_ADDED, uriPattern: string, onEvent: (message: MemberAdded) => void, onError?: (error: Error) => void): void;
    on(event: Event.MEMBER_ADDED, onEvent: (message: MemberAdded) => void, onError?: (error: Error) => void): void;
    on(event: Event.MEMBER_REMOVED, uriPattern: string, onEvent: (message: MemberRemoved) => void, onError?: (error: Error) => void): void;
    on(event: Event.MEMBER_REMOVED, onEvent: (message: MemberRemoved) => void, onError?: (error: Error) => void): void;
    on(event: Event | string, uriPattern: string, onEvent: (message: EventMessage) => void, onError?: (error: Error) => void): void;
    on(event: Event | string, onEvent: (message: EventMessage) => void, onError?: (error: Error) => void): void;
    off(event: Event.CHILD_CREATED, uriPattern: string, onEvent: (message: ChildCreated) => void, onError?: (error: Error) => void): void;
    off(event: Event.CHILD_CREATED, onEvent: (message: ChildCreated) => void, onError?: (error: Error) => void): void;
    off(event: Event.ACCESS_POINT_CREATED, uriPattern: string, onEvent: (message: AccessPointCreated) => void, onError?: (error: Error) => void): void;
    off(event: Event.ACCESS_POINT_CREATED, onEvent: (message: AccessPointCreated) => void, onError?: (error: Error) => void): void;
    off(event: Event.DOCUMENT_CREATED, uriPattern: string, onEvent: (message: DocumentCreated) => void, onError?: (error: Error) => void): void;
    off(event: Event.DOCUMENT_CREATED, onEvent: (message: DocumentCreated) => void, onError?: (error: Error) => void): void;
    off(event: Event.DOCUMENT_MODIFIED, uriPattern: string, onEvent: (message: DocumentModified) => void, onError?: (error: Error) => void): void;
    off(event: Event.DOCUMENT_MODIFIED, onEvent: (message: DocumentModified) => void, onError?: (error: Error) => void): void;
    off(event: Event.DOCUMENT_DELETED, uriPattern: string, onEvent: (message: DocumentDeleted) => void, onError?: (error: Error) => void): void;
    off(event: Event.DOCUMENT_DELETED, onEvent: (message: DocumentDeleted) => void, onError?: (error: Error) => void): void;
    off(event: Event.MEMBER_ADDED, uriPattern: string, onEvent: (message: MemberAdded) => void, onError?: (error: Error) => void): void;
    off(event: Event.MEMBER_ADDED, onEvent: (message: MemberAdded) => void, onError?: (error: Error) => void): void;
    off(event: Event.MEMBER_REMOVED, uriPattern: string, onEvent: (message: MemberRemoved) => void, onError?: (error: Error) => void): void;
    off(event: Event.MEMBER_REMOVED, onEvent: (message: MemberRemoved) => void, onError?: (error: Error) => void): void;
    off(event: Event | string, uriPattern: string, onEvent: (message: EventMessage) => void, onError?: (error: Error) => void): void;
    off(event: Event | string, onEvent: (message: EventMessage) => void, onError?: (error: Error) => void): void;
    one(event: Event.CHILD_CREATED, uriPattern: string, onEvent: (message: ChildCreated) => void, onError?: (error: Error) => void): void;
    one(event: Event.CHILD_CREATED, onEvent: (message: ChildCreated) => void, onError?: (error: Error) => void): void;
    one(event: Event.ACCESS_POINT_CREATED, onEvent: (message: AccessPointCreated) => void, onError?: (error: Error) => void): void;
    one(event: Event.ACCESS_POINT_CREATED, uriPattern: string, onEvent: (message: AccessPointCreated) => void, onError?: (error: Error) => void): void;
    one(event: Event.DOCUMENT_CREATED, uriPattern: string, onEvent: (message: DocumentCreated) => void, onError?: (error: Error) => void): void;
    one(event: Event.DOCUMENT_CREATED, onEvent: (message: DocumentCreated) => void, onError?: (error: Error) => void): void;
    one(event: Event.DOCUMENT_MODIFIED, uriPattern: string, onEvent: (message: DocumentModified) => void, onError?: (error: Error) => void): void;
    one(event: Event.DOCUMENT_MODIFIED, onEvent: (message: DocumentModified) => void, onError?: (error: Error) => void): void;
    one(event: Event.DOCUMENT_DELETED, uriPattern: string, onEvent: (message: DocumentDeleted) => void, onError?: (error: Error) => void): void;
    one(event: Event.DOCUMENT_DELETED, onEvent: (message: DocumentDeleted) => void, onError?: (error: Error) => void): void;
    one(event: Event.MEMBER_ADDED, uriPattern: string, onEvent: (message: MemberAdded) => void, onError?: (error: Error) => void): void;
    one(event: Event.MEMBER_ADDED, onEvent: (message: MemberAdded) => void, onError?: (error: Error) => void): void;
    one(event: Event.MEMBER_REMOVED, uriPattern: string, onEvent: (message: MemberRemoved) => void, onError?: (error: Error) => void): void;
    one(event: Event.MEMBER_REMOVED, onEvent: (message: MemberRemoved) => void, onError?: (error: Error) => void): void;
    one(event: Event | string, uriPattern: string, onEvent: (message: EventMessage) => void, onError?: (error: Error) => void): void;
    one(event: Event | string, onEvent: (message: EventMessage) => void, onError?: (error: Error) => void): void;
    onAccessPointCreated(uriPattern: string, onEvent: (message: AccessPointCreated) => void, onError?: (error: Error) => void): void;
    onAccessPointCreated(onEvent: (message: AccessPointCreated) => void, onError?: (error: Error) => void): void;
    onChildCreated(uriPattern: string, onEvent: (message: ChildCreated) => void, onError?: (error: Error) => void): void;
    onChildCreated(onEvent: (message: ChildCreated) => void, onError?: (error: Error) => void): void;
    onDocumentCreated(uriPattern: string, onEvent: (message: DocumentCreated) => void, onError?: (error: Error) => void): void;
    onDocumentCreated(onEvent: (message: DocumentCreated) => void, onError?: (error: Error) => void): void;
    onDocumentModified(uriPattern: string, onEvent: (message: DocumentModified) => void, onError?: (error: Error) => void): void;
    onDocumentModified(onEvent: (message: DocumentModified) => void, onError?: (error: Error) => void): void;
    onDocumentDeleted(uriPattern: string, onEvent: (message: DocumentDeleted) => void, onError?: (error: Error) => void): void;
    onDocumentDeleted(onEvent: (message: DocumentDeleted) => void, onError?: (error: Error) => void): void;
    onMemberAdded(uriPattern: string, onEvent: (message: MemberAdded) => void, onError?: (error: Error) => void): void;
    onMemberAdded(onEvent: (message: MemberAdded) => void, onError?: (error: Error) => void): void;
    onMemberRemoved(uriPattern: string, onEvent: (message: MemberRemoved) => void, onError?: (error: Error) => void): void;
    onMemberRemoved(onEvent: (message: MemberRemoved) => void, onError?: (error: Error) => void): void;
}
export interface MessagingDocumentFactory extends ModelDecorator<MessagingDocument> {
    isDecorated(object: object): object is MessagingDocument;
    decorate<T extends object>(object: T): T & MessagingDocument;
}
export declare const MessagingDocument: MessagingDocumentFactory;
