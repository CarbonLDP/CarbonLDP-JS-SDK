{"version":3,"sources":["Messaging/Service.ts"],"names":[],"mappings":"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","file":"Service.js","sourcesContent":["import * as SockJS from \"sockjs-client\";\nimport * as webstomp from \"webstomp-client\";\nimport { Client, ConnectionHeaders, ExtendedHeaders, Frame } from \"webstomp-client\";\n\nimport Carbon from \"../Carbon\";\nimport { IllegalStateError } from \"../Errors\";\nimport JSONLDParser from \"../JSONLD/Parser\";\nimport RDFNode from \"../RDF/Node\";\nimport { UUID } from \"../Utils\";\nimport Options from \"./Options\";\n\n// Fix of incorrect webstomp-client typings\ndeclare module \"webstomp-client\" {\n\n\t// noinspection TsLint\n\texport interface Client {\n\t\tconnected:boolean;\n\n\t\tconnect( headers:ConnectionHeaders, connectCallback:( frame?:Frame ) => any, errorCallback?:( error:Frame | CloseEvent ) => any ):void;\n\t}\n\n\t// noinspection TsLint\n\texport interface Frame {\n\t\tcommand:string;\n\t\tbody:string;\n\t\theaders:ExtendedHeaders,\n\t}\n}\n\nexport const DEFAULT_OPTIONS:Options = {\n\tmaxReconnectAttempts: 10,\n\treconnectDelay: 1000,\n};\n\nexport interface Subscription {\n\tid:string;\n\terrorCallback:( error:Error ) => void;\n}\n\nexport class Class {\n\n\tprivate context:Carbon;\n\n\tprivate _messagingOptions:Options;\n\tprivate _messagingClient?:Client;\n\tprivate _subscriptionsMap:Map<string, Map<Function, Subscription>>;\n\tprivate _subscriptionsQueue:Function[];\n\n\tconstructor( context:Carbon ) {\n\t\tthis.context = context;\n\t\tthis._subscriptionsMap = new Map();\n\t\tthis._subscriptionsQueue = [];\n\t\tthis._messagingOptions = DEFAULT_OPTIONS;\n\t}\n\n\tsetOptions( options:Options ):void {\n\t\tthis._messagingOptions = {\n\t\t\t...DEFAULT_OPTIONS,\n\t\t\t...options,\n\t\t};\n\t}\n\n\tconnect( onConnect?:() => void, onError?:( error:Error ) => void ):void {\n\t\tif( this._messagingClient ) {\n\t\t\tconst error:Error = new IllegalStateError( `The messaging service is already connect${ this._messagingClient.connected ? \"ed\" : \"ing\"}.` );\n\t\t\tif( onError ) onError( error );\n\t\t\tthrow error;\n\t\t}\n\n\t\tonError = onError ? onError : ( error:Error ):void => {\n\t\t\tthis._subscriptionsMap.forEach( callbacksMap => {\n\t\t\t\tcallbacksMap.forEach( subscription => subscription.errorCallback( error ) );\n\t\t\t} );\n\t\t};\n\n\t\tconst sock:SockJS.Socket = new SockJS( this.context.resolve( \"/broker\" ) );\n\t\tthis._messagingClient = webstomp.over( sock, {\n\t\t\tprotocols: webstomp.VERSIONS.supportedProtocols(),\n\t\t\tdebug: false,\n\t\t\theartbeat: false,\n\t\t\tbinary: false,\n\t\t} );\n\n\t\tthis._messagingClient.connect( {}, () => {\n\t\t\tthis._subscriptionsQueue.forEach( callback => callback() );\n\t\t\tthis._subscriptionsQueue.length = 0;\n\t\t\tif( onConnect ) onConnect();\n\n\t\t}, ( errorFrameOrEvent:Frame | CloseEvent ) => {\n\t\t\tlet errorMessage:string;\n\t\t\tif( isCloseError( errorFrameOrEvent ) ) {\n\t\t\t\t// TODO: Detect connection error to reconnect messaging\n\t\t\t\tthis._messagingClient = null;\n\t\t\t\terrorMessage = `CloseEventError: ${ errorFrameOrEvent.reason }`;\n\t\t\t} else if( isFrameError( errorFrameOrEvent ) ) {\n\t\t\t\terrorMessage = `${ errorFrameOrEvent.headers[ \"message\" ] }: ${ errorFrameOrEvent.body.trim() }`;\n\t\t\t} else {\n\t\t\t\terrorMessage = `Unknown error: ${ errorFrameOrEvent }`;\n\t\t\t}\n\t\t\tonError( new Error( errorMessage ) );\n\t\t} );\n\t}\n\n\tsubscribe( destination:string, onEvent:( data:RDFNode[] ) => void, onError:( error:Error ) => void ):void {\n\t\tif( ! this._subscriptionsMap.has( destination ) ) this._subscriptionsMap.set( destination, new Map() );\n\t\tconst callbacksMap:Map<Function, Subscription> = this._subscriptionsMap.get( destination );\n\n\t\tif( callbacksMap.has( onEvent ) ) return;\n\t\tconst subscriptionID:string = UUID.generate();\n\t\tcallbacksMap.set( onEvent, {\n\t\t\tid: subscriptionID,\n\t\t\terrorCallback: onError,\n\t\t} );\n\n\t\tconst subscribeTo:() => void = () => {\n\t\t\tthis._messagingClient.subscribe( destination, message => {\n\t\t\t\tnew JSONLDParser()\n\t\t\t\t\t.parse( message.body )\n\t\t\t\t\t.then( onEvent )\n\t\t\t\t\t.catch( onError );\n\t\t\t}, { id: subscriptionID } );\n\t\t};\n\n\t\tif( this._messagingClient ) {\n\t\t\tif( this._messagingClient.connected ) return subscribeTo();\n\t\t} else {\n\t\t\tthis.connect();\n\t\t}\n\t\tthis._subscriptionsQueue.push( subscribeTo );\n\t}\n\n\tunsubscribe( destination:string, onEvent:( data:RDFNode[] ) => void ):void {\n\t\tif( ! this._messagingClient || ! this._subscriptionsMap.has( destination ) ) return;\n\n\t\tconst callbackMap:Map<Function, Subscription> = this._subscriptionsMap.get( destination );\n\t\tif( ! callbackMap.has( onEvent ) ) return;\n\n\t\tconst subscriptionID:string = callbackMap.get( onEvent ).id;\n\t\tcallbackMap.delete( onEvent );\n\n\t\tif( callbackMap.size === 0 ) this._subscriptionsMap.delete( destination );\n\n\t\tthis._messagingClient.unsubscribe( subscriptionID );\n\t}\n\n}\n\nfunction isCloseError( object:any ):object is CloseEvent {\n\treturn \"reason\" in object;\n}\n\nfunction isFrameError( object:any ):object is Frame {\n\treturn \"body\" in object;\n}\n\nexport default Class;\n"]}