import { BaseAccessPoint } from "../AccessPoint";
import { GETOptions, RequestOptions } from "../HTTP";
import { ProtectedDocument } from "../ProtectedDocument";
import { PickSelfProps } from "../Utils";
import { Document } from "./Document";
import { PersistedDocument } from "./PersistedDocument";
export interface CRUDDocument extends PersistedDocument {
    get<T extends object>(requestOptions?: GETOptions): Promise<T & Document>;
    get<T extends object>(uri: string, requestOptions?: GETOptions): Promise<T & Document>;
    resolve<T extends object>(requestOptions?: GETOptions): Promise<T & Document>;
    exists(uri: string, requestOptions?: RequestOptions): Promise<boolean>;
    create<T extends object>(requestOptions?: RequestOptions): Promise<T & Document>;
    create<T extends object>(slug?: string, requestOptions?: RequestOptions): Promise<T & Document>;
    create<T extends object>(childObject: T, requestOptions?: RequestOptions): Promise<T & Document>;
    create<T extends object>(childObject: T, slug?: string, requestOptions?: RequestOptions): Promise<T & Document>;
    create<T extends object>(childrenObjects: T[], requestOptions?: RequestOptions): Promise<T & Document>;
    create<T extends object>(childrenObjects: T[], slugs?: string[], requestOptions?: RequestOptions): Promise<T & Document>;
    create<T extends object>(uri: string, childObject: T, requestOptions?: RequestOptions): Promise<T & Document>;
    create<T extends object>(uri: string, childObject: T, slug?: string, requestOptions?: RequestOptions): Promise<T & Document>;
    create<T extends object>(uri: string, childrenObjects: T[], requestOptions?: RequestOptions): Promise<T & Document>;
    create<T extends object>(uri: string, childrenObjects: T[], slugs?: string[], requestOptions?: RequestOptions): Promise<T & Document>;
    createAndRetrieve<T extends object>(requestOptions?: RequestOptions): Promise<T & Document>;
    createAndRetrieve<T extends object>(slug?: string, requestOptions?: RequestOptions): Promise<T & Document>;
    createAndRetrieve<T extends object>(child: T, requestOptions?: RequestOptions): Promise<T & Document>;
    createAndRetrieve<T extends object>(child: T, slug?: string, requestOptions?: RequestOptions): Promise<T & Document>;
    createAndRetrieve<T extends object>(children: T[], requestOptions?: RequestOptions): Promise<T & Document>;
    createAndRetrieve<T extends object>(children: T[], slugs?: string[], requestOptions?: RequestOptions): Promise<T & Document>;
    createAndRetrieve<T extends object>(uri: string, child: T, requestOptions?: RequestOptions): Promise<T & Document>;
    createAndRetrieve<T extends object>(uri: string, child: T, slug?: string, requestOptions?: RequestOptions): Promise<T & Document>;
    createAndRetrieve<T extends object>(uri: string, children: T[], requestOptions?: RequestOptions): Promise<T & Document>;
    createAndRetrieve<T extends object>(uri: string, children: T[], slugs?: string[], requestOptions?: RequestOptions): Promise<T & Document>;
    createAccessPoint<T extends object>(accessPoint: T & BaseAccessPoint, requestOptions?: RequestOptions): Promise<T & ProtectedDocument>;
    createAccessPoint<T extends object>(accessPoint: T & BaseAccessPoint, slug?: string, requestOptions?: RequestOptions): Promise<T & ProtectedDocument>;
    createAccessPoint<T extends object>(uri: string, accessPoint: T & BaseAccessPoint, requestOptions?: RequestOptions): Promise<T & ProtectedDocument>;
    createAccessPoint<T extends object>(uri: string, accessPoint: T & BaseAccessPoint, slug?: string, requestOptions?: RequestOptions): Promise<T & ProtectedDocument>;
    createAccessPointAndRetrieve<T extends object>(accessPoint: T & BaseAccessPoint, requestOptions?: RequestOptions): Promise<T & ProtectedDocument>;
    createAccessPointAndRetrieve<T extends object>(accessPoint: T & BaseAccessPoint, slug?: string, requestOptions?: RequestOptions): Promise<T & ProtectedDocument>;
    createAccessPointAndRetrieve<T extends object>(uri: string, accessPoint: T & BaseAccessPoint, requestOptions?: RequestOptions): Promise<T & ProtectedDocument>;
    createAccessPointAndRetrieve<T extends object>(uri: string, accessPoint: T & BaseAccessPoint, slug?: string, requestOptions?: RequestOptions): Promise<T & ProtectedDocument>;
    createAccessPoints<T extends object>(accessPoints: (T & BaseAccessPoint)[], requestOptions?: RequestOptions): Promise<T & ProtectedDocument>;
    createAccessPoints<T extends object>(accessPoints: (T & BaseAccessPoint)[], slugs?: string[], requestOptions?: RequestOptions): Promise<T & ProtectedDocument>;
    createAccessPoints<T extends object>(uri: string, accessPoints: (T & BaseAccessPoint)[], requestOptions?: RequestOptions): Promise<T & ProtectedDocument>;
    createAccessPoints<T extends object>(uri: string, accessPoints: (T & BaseAccessPoint)[], slugs?: string[], requestOptions?: RequestOptions): Promise<T & ProtectedDocument>;
    createAccessPointsAndRetrieve<T extends object>(accessPoints: (T & BaseAccessPoint)[], requestOptions?: RequestOptions): Promise<T & ProtectedDocument>;
    createAccessPointsAndRetrieve<T extends object>(accessPoints: (T & BaseAccessPoint)[], slugs?: string[], requestOptions?: RequestOptions): Promise<T & ProtectedDocument>;
    createAccessPointsAndRetrieve<T extends object>(uri: string, accessPoints: (T & BaseAccessPoint)[], requestOptions?: RequestOptions): Promise<T & ProtectedDocument>;
    createAccessPointsAndRetrieve<T extends object>(uri: string, accessPoints: (T & BaseAccessPoint)[], slugs?: string[], requestOptions?: RequestOptions): Promise<T & ProtectedDocument>;
    refresh<T extends object>(requestOptions?: RequestOptions): Promise<T & Document>;
    save<T extends object>(requestOptions?: RequestOptions): Promise<T & Document>;
    saveAndRefresh<T extends object>(requestOptions?: RequestOptions): Promise<T & Document>;
    delete(requestOptions?: RequestOptions): Promise<void>;
    delete(uri: string, requestOptions?: RequestOptions): Promise<void>;
}
export interface CRUDDocumentFactory {
    PROTOTYPE: PickSelfProps<CRUDDocument, PersistedDocument>;
    isDecorated(object: object): object is CRUDDocument;
    decorate<T extends object>(object: T): T & CRUDDocument;
    is(value: any): value is CRUDDocument;
}
export declare const CRUDDocument: CRUDDocumentFactory;
