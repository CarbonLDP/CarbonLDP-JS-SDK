import * as Fragment from "../Fragment";
import * as JSONLDConverter from "../JSONLD/Converter";
import * as NamedFragment from "../NamedFragment";
import * as ObjectSchema from "../ObjectSchema";
import * as Pointer from "../Pointer";
import * as RDF from "../RDF";
import { Document } from "./";
export declare function hasPointer(this: Document, id: string): boolean;
export declare function getPointer(this: Document, id: string): Pointer.Class;
export declare function inScope(this: Document, idOrPointer: string | Pointer.Class): boolean;
export declare function hasFragment(this: Document, id: string): boolean;
export declare function getFragment(this: Document, id: string): Fragment.Class;
export declare function getNamedFragment(this: Document, id: string): NamedFragment.Class;
export declare function getFragments(this: Document): Fragment.Class[];
export declare function createFragment<T extends object>(object: T, slug?: string): T & Fragment.Class;
export declare function createFragment(slug?: string): Fragment.Class;
export declare function createNamedFragment<T extends Object>(object: T, slug: string): NamedFragment.Class & T;
export declare function createNamedFragment(slug: string): NamedFragment.Class;
export declare function removeFragment(this: Document, fragmentOrSlug: string | Fragment.Class): void;
export declare function removeNamedFragment(this: Document, fragmentOrSlug: NamedFragment.Class | string): void;
export declare function toJSON(this: Document, key: string): RDF.Document.Class;
export declare function toJSON(this: Document, objectSchemaResolver?: ObjectSchema.Resolver, jsonldConverter?: JSONLDConverter.Class): RDF.Document.Class;
export declare function normalize(this: Document): void;
export declare const convertNestedObjects: (parent: Document, actual: any, fragmentsTracker?: Set<string>) => void;
