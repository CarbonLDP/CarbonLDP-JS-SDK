{"version":3,"sources":["Document/Document.ts"],"names":[],"mappings":"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","file":"Document.js","sourcesContent":["import { DocumentsRegistry } from \"../DocumentsRegistry/DocumentsRegistry\";\nimport { DocumentsRepository } from \"../DocumentsRepository/DocumentsRepository\";\n\nimport { Fragment } from \"../Fragment/Fragment\";\n\nimport { GETOptions, RequestOptions } from \"../HTTP/Request\";\n\nimport { ModelDecorator } from \"../Model/ModelDecorator\";\nimport { ModelFactory } from \"../Model/ModelFactory\";\nimport { ModelPrototype } from \"../Model/ModelPrototype\";\nimport { ModelSchema } from \"../Model/ModelSchema\";\nimport { ModelTypeGuard, } from \"../Model/ModelTypeGuard\";\n\nimport { QueryDocumentBuilder } from \"../QueryDocuments/QueryDocumentBuilder\";\n\nimport { RegisteredPointer } from \"../Registry/RegisteredPointer\";\nimport { ResolvablePointer } from \"../Repository/ResolvablePointer\";\n\nimport { isObject } from \"../Utils\";\n\nimport { C } from \"../Vocabularies/C\";\nimport { LDP } from \"../Vocabularies/LDP\";\nimport { XSD } from \"../Vocabularies/XSD\";\n\nimport { BaseDocument } from \"./BaseDocument\";\n\nimport { EventEmitterDocumentTrait } from \"./Traits/EventEmitterDocumentTrait\";\nimport { QueryableDocumentTrait } from \"./Traits/QueryableDocumentTrait\";\nimport { SPARQLDocumentTrait } from \"./Traits/SPARQLDocumentTrait\";\n\nimport { TransientDocument } from \"./TransientDocument\";\n\n\nexport interface BaseResolvableDocument extends BaseDocument {\n\t$registry:DocumentsRegistry;\n\t$repository:DocumentsRepository;\n}\n\nexport interface Document extends QueryableDocumentTrait, SPARQLDocumentTrait, EventEmitterDocumentTrait {\n\t$registry:DocumentsRegistry;\n\t$repository:DocumentsRepository;\n\n\n\t__modelDecorator:ModelDecorator<Fragment>;\n\t__resourcesMap:Map<string, Fragment>;\n\t__savedFragments:Fragment[];\n\n\n\tcreated?:Date;\n\tmodified?:Date;\n\taccessPoints?:Document[];\n\tcontains?:Document[];\n\n\n\tgetPointer( id:string ):RegisteredPointer;\n\tgetPointer( id:string, local:true ):Fragment;\n\n\tgetPointers():RegisteredPointer[];\n\tgetPointers( local:true ):Fragment[];\n\n\n\t_syncSavedFragments():void;\n\n\tgetFragment<T extends object>( id:string ):(T & Fragment) | null;\n\n\tgetFragments():Fragment[];\n\n\tcreateFragment<T extends object>( object:T, id?:string ):T & Fragment;\n\tcreateFragment( slug?:string ):Fragment;\n\n\tremoveFragment( slugOrFragment:string | Fragment ):boolean;\n\n\n\tget<T extends object>( queryBuilderFn:( queryBuilder:QueryDocumentBuilder ) => QueryDocumentBuilder ):Promise<T & Document>;\n\tget<T extends object>( requestOptions?:GETOptions, queryBuilderFn?:( queryBuilder:QueryDocumentBuilder ) => QueryDocumentBuilder ):Promise<T & Document>;\n\tget<T extends object>( uri:string, queryBuilderFn:( queryBuilder:QueryDocumentBuilder ) => QueryDocumentBuilder ):Promise<T & Document>;\n\tget<T extends object>( uri:string, requestOptions?:GETOptions, queryBuilderFn?:( queryBuilder:QueryDocumentBuilder ) => QueryDocumentBuilder ):Promise<T & Document>;\n\n\tresolve<T extends object>( requestOptions?:GETOptions, queryBuilderFn?:( queryBuilder:QueryDocumentBuilder ) => QueryDocumentBuilder ):Promise<T & this & Document>;\n\tresolve<T extends object>( queryBuilderFn?:( queryBuilder:QueryDocumentBuilder ) => QueryDocumentBuilder ):Promise<T & this & Document>;\n\tresolve<T extends object>( document:Document, queryBuilderFn:( queryBuilder:QueryDocumentBuilder ) => QueryDocumentBuilder ):Promise<T & Document>;\n\tresolve<T extends object>( document:Document, requestOptions?:GETOptions, queryBuilderFn?:( queryBuilder:QueryDocumentBuilder ) => QueryDocumentBuilder ):Promise<T & Document>;\n\n\n\trefresh<T extends object>( requestOptions?:RequestOptions ):Promise<T & this>;\n\trefresh<T extends object>( document:Document, requestOptions?:RequestOptions ):Promise<T & Document>;\n\n\tsave<T extends object>( requestOptions?:RequestOptions ):Promise<T & this>;\n\tsave<T extends object>( document:Document, requestOptions?:RequestOptions ):Promise<T & Document>;\n\n\tsaveAndRefresh<T extends object>( requestOptions?:RequestOptions ):Promise<T & this>;\n\tsaveAndRefresh<T extends object>( document:Document, requestOptions?:RequestOptions ):Promise<T & Document>;\n}\n\n\ntype ForcedMembers = {\n\t__resourcesMap:Map<string, Fragment>;\n\n\n\tgetPointer( id:string ):RegisteredPointer;\n\tgetPointer( id:string, local:true ):Fragment;\n\n\tgetPointers():RegisteredPointer[];\n\tgetPointers( local:true ):Fragment[];\n\n\n\tgetFragment<T extends object>( id:string ):(T & Fragment) | null;\n\n\tgetFragments():Fragment[];\n\n\tcreateFragment<T extends object>( object:T, id?:string ):T & Fragment;\n\tcreateFragment( slug?:string ):Fragment;\n\n\tremoveFragment( slugOrFragment:string | Fragment ):boolean;\n};\n\nexport type OverriddenMembers =\n\t| \"_syncSnapshot\"\n\t| \"isDirty\"\n\t| \"revert\"\n\t;\n\nexport type DocumentFactory =\n\t& ModelSchema<C[ \"Document\" ]>\n\t& ModelPrototype<Document, SPARQLDocumentTrait & EventEmitterDocumentTrait & QueryableDocumentTrait, OverriddenMembers>\n\t& ModelDecorator<Document, BaseResolvableDocument>\n\t& ModelTypeGuard<Document>\n\t& ModelFactory<TransientDocument, BaseDocument>\n\t;\n\nexport const Document:DocumentFactory = {\n\tTYPE: C.Document,\n\tSCHEMA: {\n\t\t\"contains\": {\n\t\t\t\"@id\": LDP.contains,\n\t\t\t\"@container\": \"@set\",\n\t\t\t\"@type\": \"@id\",\n\t\t},\n\t\t\"members\": {\n\t\t\t\"@id\": LDP.member,\n\t\t\t\"@container\": \"@set\",\n\t\t\t\"@type\": \"@id\",\n\t\t},\n\t\t\"membershipResource\": {\n\t\t\t\"@id\": LDP.membershipResource,\n\t\t\t\"@type\": \"@id\",\n\t\t},\n\t\t\"isMemberOfRelation\": {\n\t\t\t\"@id\": LDP.isMemberOfRelation,\n\t\t\t\"@type\": \"@id\",\n\t\t},\n\t\t\"hasMemberRelation\": {\n\t\t\t\"@id\": LDP.hasMemberRelation,\n\t\t\t\"@type\": \"@id\",\n\t\t},\n\t\t\"insertedContentRelation\": {\n\t\t\t\"@id\": LDP.insertedContentRelation,\n\t\t\t\"@type\": \"@id\",\n\t\t},\n\t\t\"created\": {\n\t\t\t\"@id\": C.created,\n\t\t\t\"@type\": XSD.dateTime,\n\t\t},\n\t\t\"modified\": {\n\t\t\t\"@id\": C.modified,\n\t\t\t\"@type\": XSD.dateTime,\n\t\t},\n\t\t\"defaultInteractionModel\": {\n\t\t\t\"@id\": C.defaultInteractionModel,\n\t\t\t\"@type\": \"@id\",\n\t\t},\n\t\t\"accessPoints\": {\n\t\t\t\"@id\": C.accessPoint,\n\t\t\t\"@type\": \"@id\",\n\t\t\t\"@container\": \"@set\",\n\t\t},\n\t},\n\n\tPROTOTYPE: {\n\t\tget __savedFragments():Fragment[] { return []; },\n\n\t\t_syncSavedFragments( this:Document ):void {\n\t\t\tthis.__savedFragments = Array\n\t\t\t\t.from( this.__resourcesMap.values() );\n\n\t\t\tthis.__savedFragments\n\t\t\t\t.forEach( fragment => fragment._syncSnapshot() );\n\t\t},\n\n\n\t\t_syncSnapshot( this:Document ):void {\n\t\t\tResolvablePointer.PROTOTYPE._syncSnapshot.call( this );\n\t\t\tthis._syncSavedFragments();\n\t\t},\n\n\t\tisDirty( this:Document ):boolean {\n\t\t\tconst isSelfDirty:boolean = ResolvablePointer.PROTOTYPE.isDirty.call( this );\n\t\t\tif( isSelfDirty ) return true;\n\n\t\t\tconst hasRemovedFragments:boolean = this\n\t\t\t\t.__savedFragments\n\t\t\t\t.some( fragment => ! this.hasFragment( fragment.$id ) );\n\t\t\tif( hasRemovedFragments ) return true;\n\n\t\t\tconst hasNewFragments:boolean = this\n\t\t\t\t.__savedFragments.length !== this.__resourcesMap.size;\n\t\t\tif( hasNewFragments ) return true;\n\n\t\t\treturn this\n\t\t\t\t.__savedFragments\n\t\t\t\t.some( fragment => fragment.isDirty() );\n\t\t},\n\n\t\trevert( this:Document ):void {\n\t\t\tResolvablePointer.PROTOTYPE.revert.call( this );\n\n\t\t\tthis.__resourcesMap.clear();\n\t\t\tthis\n\t\t\t\t.__savedFragments\n\t\t\t\t.forEach( fragment => {\n\t\t\t\t\tfragment.revert();\n\t\t\t\t\tthis.__resourcesMap.set( fragment.$slug, fragment );\n\t\t\t\t} );\n\t\t},\n\t},\n\n\n\tisDecorated( object:object ):object is Document {\n\t\treturn isObject( object )\n\t\t\t&& ModelDecorator\n\t\t\t\t.hasPropertiesFrom( Document.PROTOTYPE, object )\n\t\t\t;\n\t},\n\n\tis( object:object ):object is Document {\n\t\treturn TransientDocument.is( object )\n\t\t\t&& SPARQLDocumentTrait.isDecorated( object )\n\t\t\t&& EventEmitterDocumentTrait.isDecorated( object )\n\t\t\t&& QueryableDocumentTrait.isDecorated( object )\n\t\t\t&& Document.isDecorated( object )\n\t\t\t;\n\t},\n\n\n\tdecorate<T extends BaseResolvableDocument>( object:T ):T & Document {\n\t\tif( Document.isDecorated( object ) ) return object;\n\n\t\ttype ForcedT = T & ForcedMembers & { __modelDecorator:ModelDecorator<Fragment> };\n\t\tconst base:ForcedT = Object.assign( object as T & ForcedMembers, {\n\t\t\t__modelDecorator: Fragment,\n\t\t} );\n\n\t\tconst target:ForcedT & SPARQLDocumentTrait & EventEmitterDocumentTrait & QueryableDocumentTrait = ModelDecorator\n\t\t\t.decorateMultiple( base, SPARQLDocumentTrait, EventEmitterDocumentTrait, QueryableDocumentTrait );\n\n\t\treturn ModelDecorator\n\t\t\t.definePropertiesFrom( Document.PROTOTYPE, target );\n\t},\n\n\n\tcreate: TransientDocument.create,\n\tcreateFrom: TransientDocument.createFrom,\n};\n"]}