{"version":3,"sources":["Document/Traits/SPARQLDocumentTrait.ts"],"names":[],"mappings":";;AAMA,6DAA4D;AAG5D,qCAAoC;AAEpC,wEAAuE;AAKvE,qCAAuC;AAEvC,0DAAyD;AAwBzD,uBAAmC,QAA4B,EAAE,UAAiB,EAAE,cAAuC,EAAE,OAAuB;IACnJ,IAAI,GAAG,GAAU,QAAQ,CAAC,GAAG,CAAC;IAC9B,IAAI,KAAK,GAAU,UAAU,CAAC;IAE9B,EAAE,CAAA,CAAE,gBAAQ,CAAE,cAAc,CAAG,CAAC,CAAC,CAAC;QACjC,OAAO,GAAG,cAAc,CAAC;IAC1B,CAAC;IAAC,IAAI,CAAC,EAAE,CAAA,CAAE,cAAc,KAAK,KAAK,CAAE,CAAC,CAAC,CAAC;QACvC,KAAK,GAAG,cAAc,CAAC;QACvB,GAAG,GAAG,SAAG,CAAC,OAAO,CAAE,QAAQ,CAAC,GAAG,EAAE,UAAU,CAAE,CAAC;IAC/C,CAAC;IAGD,MAAM,CAAC,EAAE,GAAG,KAAA,EAAE,KAAK,OAAA,EAAE,OAAO,SAAA,EAAE,CAAC;AAChC,CAAC;AAOY,QAAA,mBAAmB,GAA8B;IAC7D,SAAS,EAAE;QACV,eAAe,EAAf,UAA2C,UAAiB,EAAE,cAAuC,EAAE,cAA8B;YAC9H,IAAA,oEAA2F,EAAzF,YAAG,EAAE,gBAAK,EAAE,oBAAO,CAAuE;YAClG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,eAAe,CAAE,GAAG,EAAE,KAAK,EAAE,OAAO,CAAE,CAAC;QAChE,CAAC;QAED,kBAAkB,EAAlB,UAAgE,UAAiB,EAAE,cAAuC,EAAE,cAA8B;YACnJ,IAAA,oEAA2F,EAAzF,YAAG,EAAE,gBAAK,EAAE,oBAAO,CAAuE;YAClG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAK,GAAG,EAAE,KAAK,EAAE,OAAO,CAAE,CAAC;QACtE,CAAC;QAED,aAAa,EAAb,UAAyC,UAAiB,EAAE,eAAwC,EAAE,cAA8B;YAC7H,IAAA,qEAA4F,EAA1F,YAAG,EAAE,gBAAK,EAAE,oBAAO,CAAwE;YACnG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAE,GAAG,EAAE,KAAK,EAAE,OAAO,CAAE,CAAC;QAC9D,CAAC;QAGD,MAAM,EAAN,UAAkC,GAAW;YAC5C,IAAM,IAAI,GAAU,GAAG,CAAC,CAAC,CAAC,SAAG,CAAC,OAAO,CAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;YAClE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAE,IAAI,CAAE,CAAC;QACxC,CAAC;KACD;IAED,WAAW,EAAX,UAAa,MAAa;QACzB,MAAM,CAAC,gBAAQ,CAAE,MAAM,CAAE;eACrB,+BAAc;iBACf,iBAAiB,CAAE,2BAAmB,CAAC,SAAS,EAAE,MAAM,CAAE,CAC3D;IACH,CAAC;IAED,QAAQ,EAAR,UAA6C,MAAQ;QACpD,EAAE,CAAA,CAAE,2BAAmB,CAAC,WAAW,CAAE,MAAM,CAAG,CAAC;YAAC,MAAM,CAAC,MAAM,CAAC;QAE9D,IAAM,MAAM,GAA6C,+BAAc;aACrE,gBAAgB,CAAE,MAAM,EAAE,qCAAiB,EAAE,qCAAiB,CAAE,CAAC;QAEnE,MAAM,CAAC,+BAAc;aACnB,oBAAoB,CAAE,2BAAmB,CAAC,SAAS,EAAE,MAAM,CAAE,CAAC;IACjE,CAAC;CACD,CAAC","file":"SPARQLDocumentTrait.js","sourcesContent":["import { QueryClause } from \"sparqler/clauses\";\n\nimport { SPARQLDocumentsRepositoryTrait } from \"../../DocumentsRepository/Traits/SPARQLDocumentsRepositoryTrait\";\n\nimport { RequestOptions } from \"../../HTTP/Request\";\n\nimport { ModelDecorator } from \"../../Model/ModelDecorator\";\nimport { ModelPrototype } from \"../../Model/ModelPrototype\";\n\nimport { URI } from \"../../RDF/URI\";\n\nimport { ResolvablePointer } from \"../../Repository/ResolvablePointer\";\n\nimport { SPARQLSelectResults } from \"../../SPARQL/SelectResults\";\nimport { FinishSPARQLSelect } from \"../../SPARQL/SPARQLBuilder\";\n\nimport { isObject } from \"../../Utils\";\n\nimport { TransientDocument } from \"../TransientDocument\";\n\n\nexport interface BaseSPARQLDocumentTrait {\n\t$repository:SPARQLDocumentsRepositoryTrait;\n}\n\nexport interface SPARQLDocumentTrait extends TransientDocument, ResolvablePointer {\n\t$repository:SPARQLDocumentsRepositoryTrait;\n\n\texecuteASKQuery( uri:string, askQuery:string, requestOptions?:RequestOptions ):Promise<boolean>;\n\texecuteASKQuery( askQuery:string, requestOptions?:RequestOptions ):Promise<boolean>;\n\n\texecuteSELECTQuery<T extends object>( uri:string, selectQuery:string, requestOptions?:RequestOptions ):Promise<SPARQLSelectResults<T>>;\n\texecuteSELECTQuery<T extends object>( selectQuery:string, requestOptions?:RequestOptions ):Promise<SPARQLSelectResults<T>>;\n\n\texecuteUPDATE( uri:string, update:string, requestOptions?:RequestOptions ):Promise<void>;\n\texecuteUPDATE( update:string, requestOptions?:RequestOptions ):Promise<void>;\n\n\n\tsparql( uri?:string ):QueryClause<FinishSPARQLSelect>;\n}\n\n\nfunction __parseParams( this:void, resource:SPARQLDocumentTrait, uriOrQuery:string, queryOrOptions?:string | RequestOptions, options?:RequestOptions ):{ uri:string, query:string, options?:RequestOptions } {\n\tlet uri:string = resource.$id;\n\tlet query:string = uriOrQuery;\n\n\tif( isObject( queryOrOptions ) ) {\n\t\toptions = queryOrOptions;\n\t} else if( queryOrOptions !== void 0 ) {\n\t\tquery = queryOrOptions;\n\t\turi = URI.resolve( resource.$id, uriOrQuery );\n\t}\n\n\n\treturn { uri, query, options };\n}\n\nexport type SPARQLDocumentTraitFactory =\n\t& ModelPrototype<SPARQLDocumentTrait, TransientDocument & ResolvablePointer>\n\t& ModelDecorator<SPARQLDocumentTrait, BaseSPARQLDocumentTrait>\n\t;\n\nexport const SPARQLDocumentTrait:SPARQLDocumentTraitFactory = {\n\tPROTOTYPE: {\n\t\texecuteASKQuery( this:SPARQLDocumentTrait, uriOrQuery:string, queryOrOptions?:string | RequestOptions, requestOptions?:RequestOptions ):Promise<boolean> {\n\t\t\tconst { uri, query, options } = __parseParams( this, uriOrQuery, queryOrOptions, requestOptions );\n\t\t\treturn this.$repository.executeASKQuery( uri, query, options );\n\t\t},\n\n\t\texecuteSELECTQuery<T extends object>( this:SPARQLDocumentTrait, uriOrQuery:string, queryOrOptions?:string | RequestOptions, requestOptions?:RequestOptions ):Promise<SPARQLSelectResults<T>> {\n\t\t\tconst { uri, query, options } = __parseParams( this, uriOrQuery, queryOrOptions, requestOptions );\n\t\t\treturn this.$repository.executeSELECTQuery<T>( uri, query, options );\n\t\t},\n\n\t\texecuteUPDATE( this:SPARQLDocumentTrait, uriOrQuery:string, updateOrOptions?:string | RequestOptions, requestOptions?:RequestOptions ):Promise<void> {\n\t\t\tconst { uri, query, options } = __parseParams( this, uriOrQuery, updateOrOptions, requestOptions );\n\t\t\treturn this.$repository.executeUPDATE( uri, query, options );\n\t\t},\n\n\n\t\tsparql( this:SPARQLDocumentTrait, uri?:string ):QueryClause<FinishSPARQLSelect> {\n\t\t\tconst $uri:string = uri ? URI.resolve( this.$id, uri ) : this.$id;\n\t\t\treturn this.$repository.sparql( $uri );\n\t\t},\n\t},\n\n\tisDecorated( object:object ):object is SPARQLDocumentTrait {\n\t\treturn isObject( object )\n\t\t\t&& ModelDecorator\n\t\t\t\t.hasPropertiesFrom( SPARQLDocumentTrait.PROTOTYPE, object )\n\t\t\t;\n\t},\n\n\tdecorate<T extends BaseSPARQLDocumentTrait>( object:T ):T & SPARQLDocumentTrait {\n\t\tif( SPARQLDocumentTrait.isDecorated( object ) ) return object;\n\n\t\tconst target:T & TransientDocument & ResolvablePointer = ModelDecorator\n\t\t\t.decorateMultiple( object, TransientDocument, ResolvablePointer );\n\n\t\treturn ModelDecorator\n\t\t\t.definePropertiesFrom( SPARQLDocumentTrait.PROTOTYPE, target );\n\t},\n};\n"]}