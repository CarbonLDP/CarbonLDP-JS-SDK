import { AccessPoint } from "./AccessPoint";
import { CarbonLDPSettings } from "./CarbonLDPSettings";
import { AbstractContext } from "./Context/AbstractContext";
import { DocumentsContext } from "./Context/DocumentsContext";
import { GlobalContext } from "./Context/GlobalContext";
import { Document } from "./Document/Document";
import * as Errors from "./Errors";
import { Fragment } from "./Fragment/Fragment";
import { FreeResources } from "./FreeResources/FreeResources";
import * as HTTP from "./HTTP";
import * as JSONLD from "./JSONLD";
import * as LDP from "./LDP";
import * as LDPatch from "./LDPatch";
import * as Messaging from "./Messaging";
import { ContainerType, DigestedObjectSchema, DigestedObjectSchemaProperty, ObjectSchemaDigester, ObjectSchemaUtils, PointerType } from "./ObjectSchema";
import { Pointer } from "./Pointer/Pointer";
import * as RDF from "./RDF";
import { Resource } from "./Resource/Resource";
import * as SHACL from "./SHACL";
import * as SPARQL from "./SPARQL";
import * as System from "./System";
import * as Utils from "./Utils";
import * as Vocabularies from "./Vocabularies";
export declare class CarbonLDP extends DocumentsContext {
    static AbstractContext: typeof AbstractContext;
    static AccessPoint: typeof AccessPoint;
    static Errors: typeof Errors;
    static FreeResources: typeof FreeResources;
    static HTTP: typeof HTTP;
    static JSONLD: typeof JSONLD;
    static LDP: typeof LDP;
    static LDPatch: typeof LDPatch;
    static Messaging: typeof Messaging;
    static Vocabularies: typeof Vocabularies;
    static ObjectSchemaUtils: typeof ObjectSchemaUtils;
    static ObjectSchemaDigester: typeof ObjectSchemaDigester;
    static DigestedObjectSchemaProperty: typeof DigestedObjectSchemaProperty;
    static PointerType: typeof PointerType;
    static ContainerType: typeof ContainerType;
    static DigestedObjectSchema: typeof DigestedObjectSchema;
    static Document: typeof Document;
    static Fragment: typeof Fragment;
    static Pointer: typeof Pointer;
    static RDF: typeof RDF;
    static TransientResource: typeof Resource;
    static GlobalContext: typeof GlobalContext;
    static SHACL: typeof SHACL;
    static SPARQL: typeof SPARQL;
    static System: typeof System;
    static Utils: typeof Utils;
    static readonly version: string;
    readonly version: string;
    protected _baseURI: string;
    readonly documents: Document;
    constructor(url: string);
    constructor(settings: CarbonLDPSettings);
    getPlatformMetadata(): Promise<System.PlatformMetadata>;
}
