import { GeneralRegistry } from "../GeneralRegistry/GeneralRegistry";
import { GeneralRepository } from "../GeneralRepository/GeneralRepository";
import { JSONLDConverter } from "../JSONLD/JSONLDConverter";
import { DigestedObjectSchema } from "../ObjectSchema/DigestedObjectSchema";
import { ObjectSchema } from "../ObjectSchema/ObjectSchema";
import { RegisteredPointer } from "../Registry/RegisteredPointer";
import { ResolvablePointer } from "../Repository/ResolvablePointer";
import { Context } from "./Context";
import { ContextSettings } from "./ContextSettings";
export declare abstract class AbstractContext<REGISTRY extends RegisteredPointer = RegisteredPointer, REPOSITORY extends ResolvablePointer = ResolvablePointer, PARENT extends AbstractContext = undefined> implements Context {
    abstract readonly registry: GeneralRegistry<REGISTRY> | undefined;
    abstract readonly repository: GeneralRepository<REPOSITORY> | undefined;
    readonly jsonldConverter: JSONLDConverter;
    protected abstract _baseURI: string;
    readonly baseURI: string;
    protected readonly _parentContext: PARENT | undefined;
    readonly parentContext: PARENT | undefined;
    protected _settings?: ContextSettings;
    protected _generalObjectSchema?: DigestedObjectSchema;
    protected _typeObjectSchemaMap: Map<string, DigestedObjectSchema>;
    constructor(parentContext?: PARENT);
    resolve(relativeURI: string): string;
    hasObjectSchema(type: string): boolean;
    getObjectSchema(type?: string): DigestedObjectSchema;
    extendObjectSchema(type: string, objectSchema: ObjectSchema): this;
    extendObjectSchema(objectSchema: ObjectSchema): this;
    clearObjectSchema(type?: string): void;
    _getTypeObjectSchemas(): DigestedObjectSchema[];
    protected __getObjectSchemasTypes(): string[];
    protected __extendGeneralSchema(digestedSchema: DigestedObjectSchema): void;
    protected __extendTypeSchema(digestedSchema: DigestedObjectSchema, type: string): void;
    private __resolveTypeURI;
}
