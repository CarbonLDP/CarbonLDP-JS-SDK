{"version":3,"sources":["ObjectSchema.ts"],"names":[],"mappings":"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","file":"ObjectSchema.js","sourcesContent":["import * as Errors from \"./Errors\";\nimport * as NS from \"./NS\";\nimport * as RDF from \"./RDF\";\nimport * as Utils from \"./Utils\";\n\nexport interface PropertyDefinition {\n\t\"@id\"?:string;\n\t\"@type\"?:string;\n\t\"@language\"?:string;\n\t\"@container\"?:string;\n}\n\nexport interface Class {\n\t\"@base\"?:string;\n\t\"@vocab\"?:string;\n\t\"@index\"?:Object;\n\t\"@language\"?:string;\n\t\"@reverse\"?:Object;\n\n\t[ name:string ]:(string | PropertyDefinition);\n}\n\nexport enum ContainerType {\n\tSET,\n\tLIST,\n\tLANGUAGE,\n}\n\nexport enum PointerType {\n\tID,\n\tVOCAB,\n}\n\nexport class DigestedObjectSchema {\n\tbase:string;\n\tlanguage:string;\n\tvocab:string;\n\tprefixes:Map<string, string>;\n\tproperties:Map<string, DigestedPropertyDefinition>;\n\n\tconstructor() {\n\t\tthis.base = \"\";\n\t\tthis.vocab = null;\n\t\tthis.language = null;\n\t\tthis.prefixes = new Map<string, string>();\n\t\tthis.properties = new Map<string, DigestedPropertyDefinition>();\n\t}\n}\n\nexport class DigestedPropertyDefinition {\n\turi:string = null;\n\tliteral:boolean = null;\n\tliteralType:string = null;\n\tpointerType:PointerType = null;\n\tlanguage:string;\n\tcontainerType:ContainerType = null;\n}\n\nexport interface Resolver {\n\tgetGeneralSchema():DigestedObjectSchema;\n\n\thasSchemaFor( object:object, path?:string ):boolean;\n\n\tgetSchemaFor( object:object, path?:string ):DigestedObjectSchema;\n}\n\nexport class Digester {\n\n\tstatic digestSchema( schemas:Class[], generalSchema?:DigestedObjectSchema ):DigestedObjectSchema;\n\tstatic digestSchema( schema:Class, generalSchema?:DigestedObjectSchema ):DigestedObjectSchema;\n\tstatic digestSchema( schemaOrSchemas:Class | Class[], generalSchema?:DigestedObjectSchema ):DigestedObjectSchema {\n\t\tconst schemas:Class[] = Array.isArray( schemaOrSchemas ) ? schemaOrSchemas : [ schemaOrSchemas ];\n\n\t\tconst digestedSchemas:DigestedObjectSchema[] = schemas\n\t\t\t.map( schema => Digester.digestSingleSchema( schema, generalSchema ) );\n\n\t\treturn Digester.combineDigestedObjectSchemas( digestedSchemas );\n\t}\n\n\tstatic combineDigestedObjectSchemas( digestedSchemas:DigestedObjectSchema[] ):DigestedObjectSchema {\n\t\tif( digestedSchemas.length === 0 ) throw new Errors.IllegalArgumentError( \"At least one DigestedObjectSchema needs to be specified.\" );\n\n\t\tconst target:DigestedObjectSchema = new DigestedObjectSchema();\n\t\ttarget.vocab = digestedSchemas[ 0 ].vocab;\n\t\ttarget.base = digestedSchemas[ 0 ].base;\n\t\ttarget.language = digestedSchemas[ 0 ].language;\n\n\t\tfor( const digestedSchema of digestedSchemas ) {\n\t\t\tUtils.M.extend( target.prefixes, digestedSchema.prefixes );\n\t\t\tUtils.M.extend( target.properties, digestedSchema.properties );\n\t\t}\n\n\t\treturn target;\n\t}\n\n\tstatic digestPropertyDefinition( digestedSchema:DigestedObjectSchema, propertyName:string, propertyDefinition:PropertyDefinition, generalSchema?:DigestedObjectSchema ):DigestedPropertyDefinition {\n\t\tconst digestedDefinition:DigestedPropertyDefinition = new DigestedPropertyDefinition();\n\n\t\tif( \"@id\" in propertyDefinition ) {\n\t\t\tif( RDF.URI.Util.isPrefixed( propertyName ) ) throw new Errors.IllegalArgumentError( \"A prefixed property cannot have assigned another URI.\" );\n\t\t\tif( ! Utils.isString( propertyDefinition[ \"@id\" ] ) ) throw new Errors.IllegalArgumentError( \"@id needs to point to a string\" );\n\t\t}\n\t\tdigestedDefinition.uri = Util.resolveURI( propertyDefinition[ \"@id\" ] || propertyName, digestedSchema, generalSchema );\n\n\t\tif( \"@type\" in propertyDefinition ) {\n\t\t\tif( ! Utils.isString( propertyDefinition[ \"@type\" ] ) ) throw new Errors.IllegalArgumentError( \"@type needs to point to a string\" );\n\n\t\t\tif( propertyDefinition[ \"@type\" ] === \"@id\" || propertyDefinition[ \"@type\" ] === \"@vocab\" ) {\n\t\t\t\tdigestedDefinition.literal = false;\n\t\t\t\tdigestedDefinition.pointerType = ( propertyDefinition[ \"@type\" ] === \"@id\" ) ? PointerType.ID : PointerType.VOCAB;\n\t\t\t} else {\n\t\t\t\tdigestedDefinition.literal = true;\n\n\t\t\t\tconst type:string = propertyDefinition[ \"@type\" ];\n\t\t\t\tdigestedDefinition.literalType = RDF.URI.Util.isRelative( type ) && type in NS.XSD.DataType ?\n\t\t\t\t\tNS.XSD.DataType[ type ] : Util.resolveURI( type, digestedSchema, generalSchema );\n\t\t\t}\n\t\t}\n\n\t\tif( \"@language\" in propertyDefinition ) {\n\t\t\tlet language:string = propertyDefinition[ \"@language\" ];\n\t\t\tif( language !== null && ! Utils.isString( language ) ) throw new Errors.IllegalArgumentError( \"@language needs to point to a string or null.\" );\n\t\t\tdigestedDefinition.language = language;\n\t\t}\n\n\t\tif( \"@container\" in propertyDefinition ) {\n\t\t\tswitch( propertyDefinition[ \"@container\" ] ) {\n\t\t\t\tcase \"@set\":\n\t\t\t\t\tdigestedDefinition.containerType = ContainerType.SET;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"@list\":\n\t\t\t\t\tdigestedDefinition.containerType = ContainerType.LIST;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"@language\":\n\t\t\t\t\tif( Utils.isString( digestedDefinition.language ) ) throw new Errors.IllegalArgumentError( \"@container cannot be set to @language when the property definition already contains an @language tag.\" );\n\t\t\t\t\tdigestedDefinition.containerType = ContainerType.LANGUAGE;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Errors.IllegalArgumentError( \"@container needs to be equal to '@list', '@set', or '@language'\" );\n\t\t\t}\n\t\t}\n\n\t\treturn digestedDefinition;\n\t}\n\n\tprivate static digestSingleSchema( schema:Class, generalSchema?:DigestedObjectSchema ):DigestedObjectSchema {\n\t\tconst digestedSchema:DigestedObjectSchema = new DigestedObjectSchema();\n\n\t\tfor( const propertyName of [ \"@base\", \"@vocab\" ] as [ \"@base\" | \"@vocab\" ] ) {\n\t\t\tif( ! ( propertyName in schema ) ) continue;\n\t\t\tlet value:string = schema[ propertyName ];\n\n\t\t\tif( value !== null && ! Utils.isString( value ) ) throw new Errors.IllegalArgumentError( `The value of '${ propertyName }' must be a string or null.` );\n\t\t\tif( ( propertyName === \"@vocab\" && value === \"\" ) || ! RDF.URI.Util.isAbsolute( value ) && ! RDF.URI.Util.isBNodeID( value ) ) throw new Errors.IllegalArgumentError( `The value of '${ propertyName }' must be an absolute URI${ propertyName === \"@base\" ? \" or an empty string\" : \"\" }.` );\n\n\t\t\tdigestedSchema[ propertyName.substr( 1 ) ] = value;\n\t\t}\n\t\tdigestedSchema.base = digestedSchema.base || \"\";\n\n\t\tif( \"@language\" in schema ) {\n\t\t\tlet value:string = schema[ \"@language\" ];\n\t\t\tif( value !== null && ! Utils.isString( value ) ) throw new Errors.InvalidJSONLDSyntaxError( `The value of '@language' must be a string or null.` );\n\t\t\tdigestedSchema.language = value;\n\t\t}\n\n\t\tconst properties:[ string, PropertyDefinition ][] = [];\n\n\t\tfor( let propertyName in schema ) {\n\t\t\tif( ! schema.hasOwnProperty( propertyName ) ) continue;\n\n\t\t\tif( propertyName === \"@reverse\" ) continue;\n\t\t\tif( propertyName === \"@index\" ) continue;\n\t\t\tif( propertyName === \"@base\" ) continue;\n\t\t\tif( propertyName === \"@vocab\" ) continue;\n\t\t\tif( propertyName === \"@language\" ) continue;\n\n\t\t\tlet propertyValue:( string | PropertyDefinition ) = schema[ propertyName ];\n\n\t\t\tif( Utils.isString( propertyValue ) ) {\n\t\t\t\tif( RDF.URI.Util.isPrefixed( propertyName ) ) throw new Errors.IllegalArgumentError( \"A prefixed property cannot be equal to another URI.\" );\n\n\t\t\t\tconst uri:string = Util.resolveURI( propertyValue, digestedSchema );\n\t\t\t\tdigestedSchema.prefixes.set( propertyName, uri );\n\n\t\t\t} else if( ! ! propertyValue && Utils.isObject( propertyValue ) ) {\n\t\t\t\tproperties.push( [ propertyName, propertyValue ] );\n\n\t\t\t} else {\n\t\t\t\tthrow new Errors.IllegalArgumentError( \"ObjectSchema Properties can only have string values or object values.\" );\n\t\t\t}\n\t\t}\n\n\t\tproperties.forEach( ( [ propertyName, definition ] ) => {\n\t\t\tconst digestedDefinition:DigestedPropertyDefinition = Digester\n\t\t\t\t.digestPropertyDefinition( digestedSchema, propertyName, definition, generalSchema );\n\t\t\tdigestedSchema.properties.set( propertyName, digestedDefinition );\n\t\t} );\n\n\t\treturn digestedSchema;\n\t}\n\n}\n\nexport class Util {\n\n\tstatic resolveURI( uri:string, schema:DigestedObjectSchema, generalSchema?:DigestedObjectSchema ):string {\n\t\tif( RDF.URI.Util.isAbsolute( uri ) ) return uri;\n\n\t\tif( RDF.URI.Util.isPrefixed( uri ) ) return Util._resolvePrefixedName( uri, schema, generalSchema );\n\n\t\treturn Util._resolveRelativeURI( uri, schema, generalSchema );\n\t}\n\n\tstatic resolvePrefixedURI( uri:string, schema:DigestedObjectSchema ):string {\n\t\tif( ! RDF.URI.Util.isPrefixed( uri ) ) return uri;\n\t\treturn this._resolvePrefixedName( uri, schema );\n\t}\n\n\tprivate static _resolveRelativeURI( uri:string, schema:DigestedObjectSchema, generalSchema?:DigestedObjectSchema ):string {\n\t\tif( schema && schema.vocab !== null ) return schema.vocab + uri;\n\t\tif( generalSchema && generalSchema.vocab !== null ) return generalSchema.vocab + uri;\n\n\t\treturn uri;\n\t}\n\n\tprivate static _resolvePrefixedName( uri:string, schema:DigestedObjectSchema, generalSchema?:DigestedObjectSchema ):string {\n\t\tconst [ namespace, localName ]:[ string, string ] = <[ string, string ]> uri.split( \":\" );\n\n\t\tif( schema && schema.prefixes.has( namespace ) ) return schema.prefixes.get( namespace ) + localName;\n\t\tif( generalSchema && generalSchema.prefixes.has( namespace ) ) return generalSchema.prefixes.get( namespace ) + localName;\n\n\t\tthrow new Errors.IllegalArgumentError( `The URI \"${ uri }\" cannot be resolved, its prefix \"${ namespace }\" has not been declared.` );\n\t}\n}\n\nexport default Class;\n"]}