{"version":3,"sources":["ObjectSchema.ts"],"names":[],"mappings":"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","file":"ObjectSchema.js","sourcesContent":["import * as Errors from \"./Errors\";\nimport * as NS from \"./Vocabularies/index\";\nimport * as RDF from \"./RDF\";\nimport * as Utils from \"./Utils\";\n\nexport interface PropertyDefinition {\n\t\"@id\"?:string;\n\t\"@type\"?:string;\n\t\"@language\"?:string;\n\t\"@container\"?:string;\n}\n\nexport interface Class {\n\t\"@base\"?:string;\n\t\"@vocab\"?:string;\n\t\"@index\"?:object;\n\t\"@language\"?:string;\n\t\"@reverse\"?:object;\n\n\t[ name:string ]:(string | PropertyDefinition);\n}\n\nexport enum ContainerType {\n\tSET,\n\tLIST,\n\tLANGUAGE,\n}\n\nexport enum PointerType {\n\tID,\n\tVOCAB,\n}\n\nexport class DigestedPropertyDefinition {\n\turi:string = null;\n\tliteral:boolean = null;\n\tliteralType:string = null;\n\tpointerType:PointerType = null;\n\tlanguage?:string;\n\tcontainerType:ContainerType = null;\n}\n\nexport class DigestedObjectSchema {\n\tbase:string;\n\tlanguage:string;\n\tvocab:string;\n\tprefixes:Map<string, string>;\n\tproperties:Map<string, DigestedPropertyDefinition>;\n\n\tconstructor() {\n\t\tthis.base = \"\";\n\t\tthis.vocab = null;\n\t\tthis.language = null;\n\t\tthis.prefixes = new Map<string, string>();\n\t\tthis.properties = new Map<string, DigestedPropertyDefinition>();\n\t}\n\n\t/*_resolve():this {\n\t\tthis.prefixes.forEach( ( uri, namespace, map ) => {\n\t\t\tif( RDF.URI.Util.isAbsolute( uri ) ) return;\n\t\t\tmap.set( namespace, Util.resolveURI( uri, this ) );\n\t\t} );\n\t\tthis.properties.forEach( ( definition, name, map ) => {\n\t\t\tconst resolved:DigestedPropertyDefinition = Util.resolveProperty( this, definition );\n\t\t\tif( definition !== resolved ) map.set( name, resolved );\n\t\t} );\n\n\t\treturn this;\n\t}*/\n\n}\n\nexport interface Resolver {\n\tgetGeneralSchema():DigestedObjectSchema;\n\n\thasSchemaFor( object:object, path?:string ):boolean;\n\n\tgetSchemaFor( object:object, path?:string ):DigestedObjectSchema;\n}\n\nexport class Digester {\n\n\tstatic digestSchema( schema:Class ):DigestedObjectSchema;\n\tstatic digestSchema( schemas:Class[] ):DigestedObjectSchema;\n\tstatic digestSchema( schemas:Class | Class[] ):DigestedObjectSchema {\n\t\tif( ! Array.isArray( schemas ) ) return Digester._digestSchema( schemas );\n\n\t\tconst digestedSchemas:DigestedObjectSchema[] = schemas\n\t\t\t.map( schema => Digester._digestSchema( schema ) );\n\n\t\treturn Digester._combineSchemas( digestedSchemas );\n\t}\n\n\tstatic digestProperty( name:string, definition:PropertyDefinition, digestedSchema?:DigestedObjectSchema ):DigestedPropertyDefinition {\n\t\tconst digestedDefinition:DigestedPropertyDefinition = new DigestedPropertyDefinition();\n\n\t\tif( \"@id\" in definition ) {\n\t\t\tconst uri:any = definition[ \"@id\" ];\n\n\t\t\tif( RDF.URI.Util.isPrefixed( name ) ) throw new Errors.IllegalArgumentError( \"A prefixed property cannot have assigned another URI.\" );\n\t\t\tif( ! Utils.isString( uri ) ) throw new Errors.IllegalArgumentError( \"@id needs to point to a string\" );\n\n\t\t\tdigestedDefinition.uri = uri;\n\t\t} else {\n\t\t\tdigestedDefinition.uri = name;\n\t\t}\n\n\t\tif( \"@type\" in definition ) {\n\t\t\tlet type:any = definition[ \"@type\" ];\n\t\t\tif( ! Utils.isString( type ) ) throw new Errors.IllegalArgumentError( \"@type needs to point to a string\" );\n\n\t\t\tif( type === \"@id\" || type === \"@vocab\" ) {\n\t\t\t\tdigestedDefinition.literal = false;\n\t\t\t\tdigestedDefinition.pointerType = type === \"@id\" ? PointerType.ID : PointerType.VOCAB;\n\n\t\t\t} else {\n\t\t\t\tif( RDF.URI.Util.isRelative( type ) && type in NS.XSD.DataType ) type = NS.XSD.DataType[ type ];\n\n\t\t\t\tdigestedDefinition.literal = true;\n\t\t\t\tdigestedDefinition.literalType = type;\n\t\t\t}\n\t\t}\n\n\t\tif( \"@language\" in definition ) {\n\t\t\tconst language:string = definition[ \"@language\" ];\n\t\t\tif( language !== null && ! Utils.isString( language ) ) throw new Errors.IllegalArgumentError( \"@language needs to point to a string or null.\" );\n\n\t\t\tdigestedDefinition.literal = true;\n\t\t\tdigestedDefinition.language = language;\n\t\t}\n\n\t\tif( \"@container\" in definition ) {\n\t\t\tswitch( definition[ \"@container\" ] ) {\n\t\t\t\tcase \"@set\":\n\t\t\t\t\tdigestedDefinition.containerType = ContainerType.SET;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"@list\":\n\t\t\t\t\tdigestedDefinition.containerType = ContainerType.LIST;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"@language\":\n\t\t\t\t\tif( Utils.isString( digestedDefinition.language ) ) throw new Errors.IllegalArgumentError( \"@container cannot be set to @language when the property definition already contains an @language tag.\" );\n\t\t\t\t\tdigestedDefinition.containerType = ContainerType.LANGUAGE;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Errors.IllegalArgumentError( \"@container needs to be equal to '@list', '@set', or '@language'\" );\n\t\t\t}\n\t\t}\n\n\t\treturn digestedSchema ?\n\t\t\tUtil.resolveProperty( digestedSchema, digestedDefinition, true ) :\n\t\t\tdigestedDefinition;\n\t}\n\n\tstatic combineDigestedObjectSchemas( digestedSchemas:DigestedObjectSchema[] ):DigestedObjectSchema {\n\t\tif( digestedSchemas.length === 0 ) throw new Errors.IllegalArgumentError( \"At least one DigestedObjectSchema needs to be specified.\" );\n\n\t\tdigestedSchemas.unshift( new DigestedObjectSchema() );\n\t\treturn Digester._combineSchemas( digestedSchemas );\n\t}\n\n\tprivate static _digestSchema( schema:Class ):DigestedObjectSchema {\n\t\tconst digestedSchema:DigestedObjectSchema = new DigestedObjectSchema();\n\n\t\tfor( const propertyName of [ \"@base\", \"@vocab\" ] as [ \"@base\", \"@vocab\" ] ) {\n\t\t\tif( ! ( propertyName in schema ) ) continue;\n\t\t\tconst value:string = schema[ propertyName ];\n\n\t\t\tif( value !== null && ! Utils.isString( value ) ) throw new Errors.IllegalArgumentError( `The value of '${ propertyName }' must be a string or null.` );\n\t\t\tif( ( propertyName === \"@vocab\" && value === \"\" ) || ! RDF.URI.Util.isAbsolute( value ) && ! RDF.URI.Util.isBNodeID( value ) ) throw new Errors.IllegalArgumentError( `The value of '${ propertyName }' must be an absolute URI${ propertyName === \"@base\" ? \" or an empty string\" : \"\" }.` );\n\n\t\t\tdigestedSchema[ propertyName.substr( 1 ) ] = value;\n\t\t}\n\t\tdigestedSchema.base = digestedSchema.base || \"\";\n\n\t\tif( \"@language\" in schema ) {\n\t\t\tconst value:string = schema[ \"@language\" ];\n\t\t\tif( value !== null && ! Utils.isString( value ) ) throw new Errors.InvalidJSONLDSyntaxError( `The value of '@language' must be a string or null.` );\n\t\t\tdigestedSchema.language = value;\n\t\t}\n\n\t\tfor( const propertyName in schema ) {\n\t\t\tif( ! schema.hasOwnProperty( propertyName ) ) continue;\n\n\t\t\tif( propertyName === \"@reverse\" ) continue;\n\t\t\tif( propertyName === \"@index\" ) continue;\n\t\t\tif( propertyName === \"@base\" ) continue;\n\t\t\tif( propertyName === \"@vocab\" ) continue;\n\t\t\tif( propertyName === \"@language\" ) continue;\n\n\t\t\tlet propertyValue:( string | PropertyDefinition ) = schema[ propertyName ];\n\n\t\t\tif( Utils.isString( propertyValue ) ) {\n\t\t\t\tif( RDF.URI.Util.isPrefixed( propertyName ) ) throw new Errors.IllegalArgumentError( \"A prefixed property cannot be equal to another URI.\" );\n\t\t\t\tdigestedSchema.prefixes.set( propertyName, propertyValue );\n\n\t\t\t} else if( ! ! propertyValue && Utils.isObject( propertyValue ) ) {\n\t\t\t\tconst definition:DigestedPropertyDefinition = Digester.digestProperty( propertyName, propertyValue );\n\t\t\t\tdigestedSchema.properties.set( propertyName, definition );\n\n\t\t\t} else {\n\t\t\t\tthrow new Errors.IllegalArgumentError( \"ObjectSchema Properties can only have string values or object values.\" );\n\t\t\t}\n\t\t}\n\n\t\treturn digestedSchema;\n\t}\n\n\tprivate static _combineSchemas( digestedSchemas:DigestedObjectSchema[] ):DigestedObjectSchema {\n\t\tconst [ targetSchema, ...restSchemas ] = digestedSchemas;\n\n\t\trestSchemas.forEach( schema => {\n\t\t\tif( schema.vocab !== null ) targetSchema.vocab = schema.vocab;\n\t\t\tif( schema.base !== \"\" ) targetSchema.base = schema.base;\n\t\t\tif( schema.language !== null ) targetSchema.language = schema.language;\n\n\t\t\tUtils.M.extend( targetSchema.prefixes, schema.prefixes );\n\t\t\tUtils.M.extend( targetSchema.properties, schema.properties );\n\t\t} );\n\n\t\treturn targetSchema;\n\t}\n\n}\n\nexport class Util {\n\n\tstatic resolveURI( uri:string, schema:DigestedObjectSchema, relativeTo:{ vocab?:boolean, base?:boolean } = {} ):string {\n\t\tif( uri === null || RDF.URI.Util.isAbsolute( uri ) || RDF.URI.Util.isBNodeID( uri ) ) return uri;\n\n\t\tconst [ prefix, localName = \"\" ]:[ string, string ] = uri.split( \":\" ) as [ string, string ];\n\n\t\tconst definedReference:string = schema.prefixes.has( prefix ) ?\n\t\t\tschema.prefixes.get( prefix ) : schema.properties.has( prefix ) ?\n\t\t\t\tschema.properties.get( prefix ).uri\n\t\t\t\t: null;\n\t\tif( definedReference !== null && definedReference !== prefix ) {\n\t\t\treturn Util.resolveURI( definedReference + localName, schema, { vocab: true } );\n\t\t}\n\n\t\tif( localName ) return uri;\n\n\t\tif( relativeTo.vocab && schema.vocab !== null ) return schema.vocab + uri;\n\t\tif( relativeTo.base ) return RDF.URI.Util.resolve( schema.base, uri );\n\n\t\treturn uri;\n\t}\n\n\tstatic resolveProperty( schema:DigestedObjectSchema, definition:DigestedPropertyDefinition, inSame?:boolean ):DigestedPropertyDefinition {\n\t\tconst uri:string = definition.uri;\n\t\tconst type:string = definition.literalType;\n\n\t\tconst resolvedURI:string = Util.resolveURI( uri, schema, { vocab: true } );\n\t\tconst resolvedType:string = Util.resolveURI( type, schema, { vocab: true, base: true } );\n\n\t\tif( resolvedURI !== uri || resolvedType !== type ) {\n\t\t\tdefinition = inSame ? definition : Utils.O.clone( definition );\n\t\t\tdefinition.uri = resolvedURI;\n\t\t\tdefinition.literalType = resolvedType;\n\t\t}\n\n\t\treturn definition;\n\t}\n}\n\nexport default Class;\n"]}