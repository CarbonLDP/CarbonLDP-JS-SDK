{"version":3,"sources":["ObjectSchema/ObjectSchemaResolver.ts"],"names":[],"mappings":";;AAAA,kCAGkB;AAgBL,QAAA,oBAAoB,GAA+B;IAC/D,EAAE,EAAF,UAAI,KAAS;QACZ,OAAO,gBAAQ,CAAE,KAAK,CAAE;eACpB,mBAAW,CAAE,KAAK,EAAE,kBAAkB,CAAE;eACxC,mBAAW,CAAE,KAAK,EAAE,cAAc,CAAE;eACpC,mBAAW,CAAE,KAAK,EAAE,cAAc,CAAE,CACtC;IACH,CAAC;CACD,CAAC","file":"ObjectSchemaResolver.js","sourcesContent":["import {\n\thasFunction,\n\tisObject\n} from \"../Utils\";\nimport { DigestedObjectSchema } from \"./DigestedObjectSchema\";\n\nexport interface ObjectSchemaResolver {\n\tgetGeneralSchema():DigestedObjectSchema;\n\n\thasSchemaFor( object:object, path?:string ):boolean;\n\n\tgetSchemaFor( object:object, path?:string ):DigestedObjectSchema;\n}\n\n\nexport interface ObjectSchemaResolverFactory {\n\tis( value:any ):value is ObjectSchemaResolver;\n}\n\nexport const ObjectSchemaResolver:ObjectSchemaResolverFactory = {\n\tis( value:any ):value is ObjectSchemaResolver {\n\t\treturn isObject( value )\n\t\t\t&& hasFunction( value, \"getGeneralSchema\" )\n\t\t\t&& hasFunction( value, \"hasSchemaFor\" )\n\t\t\t&& hasFunction( value, \"getSchemaFor\" )\n\t\t\t;\n\t},\n};\n"]}