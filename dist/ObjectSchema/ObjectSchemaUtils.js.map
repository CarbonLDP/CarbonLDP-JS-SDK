{"version":3,"sources":["ObjectSchema/ObjectSchemaUtils.ts"],"names":[],"mappings":";;;;;;;;;AAAA,8BAA6B;AAC7B,8CAAkC;AAIlC;IAAA;IAsCA,CAAC;IApCO,4BAAU,GAAjB,UAAmB,GAAU,EAAE,MAA2B,EAAE,UAAiD;QAAjD,2BAAA,EAAA,eAAiD;QAC5G,IAAI,GAAG,KAAK,IAAI,IAAI,SAAG,CAAC,UAAU,CAAE,GAAG,CAAE,IAAI,SAAG,CAAC,SAAS,CAAE,GAAG,CAAE;YAAG,OAAO,GAAG,CAAC;QAEzE,IAAA,mBAAsF,EAApF,cAAM,EAAE,UAAc,EAAd,mCAAc,CAA+D;QAE7F,IAAM,gBAAgB,GAAU,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAE,MAAM,CAAE,CAAC,CAAC;YAC9D,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAE,MAAM,CAAE,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAE,MAAM,CAAE,CAAC,CAAC;YAChE,MAAM,CAAC,UAAU,CAAC,GAAG,CAAE,MAAM,CAAE,CAAC,GAAG;YACnC,CAAC,CAAC,IAAI,CAAC;QACT,IAAI,gBAAgB,KAAK,IAAI,IAAI,gBAAgB,KAAK,MAAM,EAAG;YAC9D,OAAO,iBAAiB,CAAC,UAAU,CAAE,gBAAgB,GAAG,SAAS,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAE,CAAC;SAC7F;QAED,IAAI,SAAS;YAAG,OAAO,GAAG,CAAC;QAE3B,IAAI,UAAU,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK;YAAG,OAAO,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC;QACjE,IAAI,UAAU,CAAC,IAAI;YAAG,OAAO,SAAG,CAAC,OAAO,CAAE,MAAM,CAAC,IAAI,EAAE,GAAG,CAAE,CAAC;QAE7D,OAAO,GAAG,CAAC;IACZ,CAAC;IAEM,iCAAe,GAAtB,UAAwB,MAA2B,EAAE,UAAuC,EAAE,MAAe;QAC5G,IAAM,GAAG,GAAU,UAAU,CAAC,GAAG,CAAC;QAClC,IAAM,IAAI,GAAU,UAAU,CAAC,WAAW,CAAC;QAE3C,IAAM,WAAW,GAAU,iBAAiB,CAAC,UAAU,CAAE,GAAG,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAE,CAAC;QACxF,IAAM,YAAY,GAAU,iBAAiB,CAAC,UAAU,CAAE,IAAI,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAE,CAAC;QAEtG,IAAI,WAAW,KAAK,GAAG,IAAI,YAAY,KAAK,IAAI,EAAG;YAClD,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAE,UAAU,CAAE,CAAC;YACzE,UAAU,CAAC,GAAG,GAAG,WAAW,CAAC;YAC7B,UAAU,CAAC,WAAW,GAAG,YAAY,CAAC;SACtC;QAED,OAAO,UAAU,CAAC;IACnB,CAAC;IACF,wBAAC;AAAD,CAtCA,AAsCC,IAAA;AAtCY,8CAAiB","file":"ObjectSchemaUtils.js","sourcesContent":["import { URI } from \"../RDF\";\nimport * as Utils from \"../Utils\";\nimport { DigestedObjectSchema } from \"./DigestedObjectSchema\";\nimport { DigestedObjectSchemaProperty } from \"./DigestedObjectSchemaProperty\";\n\nexport class ObjectSchemaUtils {\n\n\tstatic resolveURI( uri:string, schema:DigestedObjectSchema, relativeTo:{ vocab?:boolean, base?:boolean } = {} ):string {\n\t\tif( uri === null || URI.isAbsolute( uri ) || URI.isBNodeID( uri ) ) return uri;\n\n\t\tconst [ prefix, localName = \"\" ]:[ string, string ] = uri.split( \":\" ) as [ string, string ];\n\n\t\tconst definedReference:string = schema.prefixes.has( prefix ) ?\n\t\t\tschema.prefixes.get( prefix ) : schema.properties.has( prefix ) ?\n\t\t\t\tschema.properties.get( prefix ).uri\n\t\t\t\t: null;\n\t\tif( definedReference !== null && definedReference !== prefix ) {\n\t\t\treturn ObjectSchemaUtils.resolveURI( definedReference + localName, schema, { vocab: true } );\n\t\t}\n\n\t\tif( localName ) return uri;\n\n\t\tif( relativeTo.vocab && schema.vocab ) return schema.vocab + uri;\n\t\tif( relativeTo.base ) return URI.resolve( schema.base, uri );\n\n\t\treturn uri;\n\t}\n\n\tstatic resolveProperty( schema:DigestedObjectSchema, definition:DigestedObjectSchemaProperty, inSame?:boolean ):DigestedObjectSchemaProperty {\n\t\tconst uri:string = definition.uri;\n\t\tconst type:string = definition.literalType;\n\n\t\tconst resolvedURI:string = ObjectSchemaUtils.resolveURI( uri, schema, { vocab: true } );\n\t\tconst resolvedType:string = ObjectSchemaUtils.resolveURI( type, schema, { vocab: true, base: true } );\n\n\t\tif( resolvedURI !== uri || resolvedType !== type ) {\n\t\t\tdefinition = inSame ? definition : Utils.ObjectUtils.clone( definition );\n\t\t\tdefinition.uri = resolvedURI;\n\t\t\tdefinition.literalType = resolvedType;\n\t\t}\n\n\t\treturn definition;\n\t}\n}"]}