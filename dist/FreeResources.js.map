{"version":3,"sources":["FreeResources.ts"],"names":[],"mappings":";;AACA,+BAGgB;AAChB,mCAA2C;AAC3C,+CAAsD;AAEtD,6BAGe;AACf,uCAGoB;AACpB,uCAA+C;AAC/C,iCAGiB;AA6BjB,IAAM,SAAS,GAA8E;IAC5F,QAAQ,EAAE,KAAK,CAAC;IAChB,SAAS,EAAE,KAAK,CAAC;IAGjB,WAAW,EAAX,UAAa,EAAS;QACrB,IAAI,SAAG,CAAC,SAAS,CAAE,EAAE,CAAE;YAAG,OAAO,EAAE,CAAC;QACpC,OAAO,IAAI,CAAC;IACb,CAAC;IAED,SAAS,EAAT,UAA6B,IAAuB;QACnD,IAAI,CAAE,IAAI,CAAC,EAAE;YAAG,IAAI,CAAC,EAAE,GAAG,SAAG,CAAC,eAAe,EAAE,CAAC;QAChD,IAAM,OAAO,GAAe,mBAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAE,IAAI,EAAE,IAAI,CAAE,CAAC;QAE5E,OAAO,4BAAiB,CAAC,QAAQ,CAAE,OAAO,CAAE,CAAC;IAC9C,CAAC;IAGD,MAAM,EAAN;QAAA,iBAeC;QAdA,IAAM,aAAa,GAAwB,IAAI,CAAC,SAAS,CAAC,CAAC;YAC1D,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,IAAI,mCAAoB,EAAE,CAAC;QAChE,IAAM,eAAe,GAAmB,IAAI,CAAC,SAAS,CAAC,CAAC;YACvD,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,wBAAe,EAAE,CAAC;QAExD,OAAO,IAAI;aACT,WAAW,CAAE,IAAI,CAAE;aACnB,GAAG,CAAE,UAAA,QAAQ;YACb,IAAM,cAAc,GAAwB,KAAI,CAAC,SAAS,CAAC,CAAC;gBAC3D,KAAI,CAAC,SAAS,CAAC,YAAY,CAAE,QAAQ,CAAE,CAAC,CAAC,CAAC,aAAa,CAAC;YAEzD,OAAO,eAAe,CAAC,MAAM,CAAE,QAAQ,EAAE,aAAa,EAAE,cAAc,CAAE,CAAC;QAC1E,CAAC,CAAE,CACF;IACH,CAAC;CACD,CAAC;AAwBW,QAAA,aAAa,GAAwB;IACjD,SAAS,WAAA;IAGT,EAAE,EAAF,UAAI,KAAS;QACZ,OAAO,gBAAQ,CAAE,KAAK,CAAE;eACpB,qBAAa,CAAC,WAAW,CAAE,KAAK,CAAE,CACpC;IACH,CAAC;IAED,WAAW,EAAX,UAAa,MAAa;QACzB,OAAO,gBAAQ,CAAE,MAAM,CAAE;eACrB,qBAAc;iBACf,iBAAiB,CAAE,SAAS,EAAE,MAAM,CAAE,CACvC;IACH,CAAC;IAGD,MAAM,EAAN,UAA0B,IAA0B;QACnD,IAAM,IAAI,GAAyB,MAAM,CAAC,MAAM,CAAE,EAAE,EAAE,IAAI,CAAE,CAAC;QAC7D,OAAO,qBAAa,CAAC,UAAU,CAAE,IAAI,CAAE,CAAC;IACzC,CAAC;IAED,UAAU,EAAV,UAA8B,MAA4B;QACzD,OAAO,qBAAa,CAAC,QAAQ,CAAE,MAAM,CAAE,CAAC;IACzC,CAAC;IAED,QAAQ,EAAR,UAA4B,MAAQ;QACnC,IAAI,qBAAa,CAAC,WAAW,CAAE,MAAM,CAAE;YAAG,OAAO,MAAM,CAAC;QAExD,IAAM,QAAQ,GAAmC,mBAAQ,CAAC,QAAQ,CAAE,MAAM,CAAE,CAAC;QAC7E,OAAO,qBAAc;aACnB,oBAAoB,CAAE,SAAS,EAAE,QAAQ,CAAE,CAAC;IAC/C,CAAC;CACD,CAAC","file":"FreeResources.js","sourcesContent":["import { AbstractContext } from \"./AbstractContext\";\nimport {\n\tModelDecorator,\n\tModelFactory,\n} from \"./core\";\nimport { JSONLDConverter } from \"./JSONLD\";\nimport { DigestedObjectSchema } from \"./ObjectSchema\";\nimport { Pointer } from \"./Pointer\";\nimport {\n\tRDFNode,\n\tURI,\n} from \"./RDF\";\nimport {\n\tRegistry,\n\tRegistryService,\n} from \"./Registry\";\nimport { TransientResource } from \"./Resource\";\nimport {\n\tisObject,\n\tPickSelfProps\n} from \"./Utils\";\n\n\nexport interface BaseFreeResources {\n\t_registry:RegistryService<Pointer, any>;\n\t_context:AbstractContext<Pointer, any>;\n}\n\n\nexport interface FreeResources extends Registry<TransientResource> {\n\t_context:AbstractContext<Pointer, any> | undefined;\n\t_registry:RegistryService<Pointer, any> | undefined;\n\n\n\t_getLocalID( id:string ):string | null;\n\n\t_register<T extends object>( base:T & { id?:string } ):T & TransientResource;\n\n\n\ttoJSON():RDFNode[];\n}\n\ntype OverloadedProps =\n\t| \"_context\"\n\t| \"_registry\"\n\t| \"_getLocalID\"\n\t| \"_register\"\n\t;\n\nconst PROTOTYPE:PickSelfProps<FreeResources, Registry<TransientResource>, OverloadedProps> = {\n\t_context: void 0,\n\t_registry: void 0,\n\n\n\t_getLocalID( id:string ):string | null {\n\t\tif( URI.isBNodeID( id ) ) return id;\n\t\treturn null;\n\t},\n\n\t_register<T extends object>( base:T & { id?:string } ):T & TransientResource {\n\t\tif( ! base.id ) base.id = URI.generateBNodeID();\n\t\tconst pointer:T & Pointer = Registry.PROTOTYPE._register.call( this, base );\n\n\t\treturn TransientResource.decorate( pointer );\n\t},\n\n\n\ttoJSON( this:FreeResources ):RDFNode[] {\n\t\tconst generalSchema:DigestedObjectSchema = this._registry ?\n\t\t\tthis._registry.getGeneralSchema() : new DigestedObjectSchema();\n\t\tconst jsonldConverter:JSONLDConverter = this._registry ?\n\t\t\tthis._registry.jsonldConverter : new JSONLDConverter();\n\n\t\treturn this\n\t\t\t.getPointers( true )\n\t\t\t.map( resource => {\n\t\t\t\tconst resourceSchema:DigestedObjectSchema = this._registry ?\n\t\t\t\t\tthis._registry.getSchemaFor( resource ) : generalSchema;\n\n\t\t\t\treturn jsonldConverter.expand( resource, generalSchema, resourceSchema );\n\t\t\t} )\n\t\t\t;\n\t},\n};\n\n\nexport interface FreeResourcesFactory extends ModelFactory<FreeResources>, ModelDecorator<FreeResources, BaseFreeResources> {\n\tPROTOTYPE:PickSelfProps<FreeResources,\n\t\tRegistry<TransientResource>,\n\t\t| \"_context\"\n\t\t| \"_registry\"\n\t\t| \"_getLocalID\"\n\t\t| \"_register\">;\n\n\n\tis( value:any ):value is FreeResources;\n\n\tisDecorated( object:object ):object is FreeResources;\n\n\n\tcreate<T extends object>( data:T & BaseFreeResources ):T & FreeResources;\n\n\tcreateFrom<T extends object>( object:T & BaseFreeResources ):T & FreeResources;\n\n\tdecorate<T extends object>( object:T ):T & FreeResources;\n}\n\nexport const FreeResources:FreeResourcesFactory = {\n\tPROTOTYPE,\n\n\n\tis( value:any ):value is FreeResources {\n\t\treturn isObject( value )\n\t\t\t&& FreeResources.isDecorated( value )\n\t\t\t;\n\t},\n\n\tisDecorated( object:object ):object is FreeResources {\n\t\treturn isObject( object )\n\t\t\t&& ModelDecorator\n\t\t\t\t.hasPropertiesFrom( PROTOTYPE, object )\n\t\t\t;\n\t},\n\n\n\tcreate<T extends object>( data:T & BaseFreeResources ):T & FreeResources {\n\t\tconst copy:T & BaseFreeResources = Object.assign( {}, data );\n\t\treturn FreeResources.createFrom( copy );\n\t},\n\n\tcreateFrom<T extends object>( object:T & BaseFreeResources ):T & FreeResources {\n\t\treturn FreeResources.decorate( object );\n\t},\n\n\tdecorate<T extends object>( object:T ):T & FreeResources {\n\t\tif( FreeResources.isDecorated( object ) ) return object;\n\n\t\tconst resource:T & Registry<TransientResource> = Registry.decorate( object );\n\t\treturn ModelDecorator\n\t\t\t.definePropertiesFrom( PROTOTYPE, resource );\n\t},\n};\n\n"]}