{"version":3,"sources":["Resource/TransientResource.ts"],"names":[],"mappings":";;AAAA,gCAAyC;AACzC,gDAGyB;AACzB,sCAAqC;AACrC,8BAA6B;AAC7B,kCAGkB;AA8BlB,oBAAqB,QAA0B,EAAE,GAAU;IAC1D,IAAI,SAAG,CAAC,UAAU,CAAE,GAAG,CAAE;QAAG,OAAO,GAAG,CAAC;IACvC,IAAI,CAAE,QAAQ,CAAC,SAAS,IAAI,CAAE,QAAQ,CAAC,SAAS,CAAC,QAAQ;QAAG,OAAO,GAAG,CAAC;IAEvE,IAAM,MAAM,GAAwB,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,eAAe,EAAE,CAAC;IAClF,OAAO,gCAAiB,CAAC,UAAU,CAAE,GAAG,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAE,CAAC;AACrE,CAAC;AAED,IAAM,SAAS,GAA6C;IAC3D,IAAI,KAAK,KAAc,OAAO,EAAE,CAAC,CAAC,CAAC;IAGnC,OAAO,EAAP,UAAiC,IAAW;QAC3C,IAAI,GAAG,UAAU,CAAE,IAAI,EAAE,IAAI,CAAE,CAAC;QAEhC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAE,IAAI,CAAE,KAAK,CAAE,CAAC;YAAG,OAAO;QAEhD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;IACzB,CAAC;IAED,OAAO,EAAP,UAAiC,IAAW;QAC3C,IAAI,GAAG,UAAU,CAAE,IAAI,EAAE,IAAI,CAAE,CAAC;QAChC,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAE,IAAI,CAAE,KAAK,CAAE,CAAC,CAAC;IAC3C,CAAC;IAED,UAAU,EAAV,UAAoC,IAAW;QAC9C,IAAI,GAAG,UAAU,CAAE,IAAI,EAAE,IAAI,CAAE,CAAC;QAEhC,IAAM,KAAK,GAAU,IAAI,CAAC,KAAK,CAAC,OAAO,CAAE,IAAI,CAAE,CAAC;QAChD,IAAI,KAAK,KAAK,CAAE,CAAC;YAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,KAAK,EAAE,CAAC,CAAE,CAAC;IACnD,CAAC;CACD,CAAC;AAEW,QAAA,iBAAiB,GAA4B;IACzD,WAAW,EAAX,UAAa,MAAa;QACzB,OAAO,gBAAQ,CAAE,MAAM,CAAE;eACrB,qBAAc;iBACf,iBAAiB,CAAE,SAAS,EAAE,MAAM,CAAE,CAAC;IAC3C,CAAC;IAED,EAAE,EAAF,UAAI,KAAS;QACZ,OAAO,iBAAO,CAAC,EAAE,CAAE,KAAK,CAAE;eACtB,yBAAiB,CAAC,WAAW,CAAE,KAAK,CAAE,CAAC;IAC5C,CAAC;IAED,MAAM,EAAN,UAA0B,IAAsB;QAC/C,IAAM,KAAK,GAAK,MAAM,CAAC,MAAM,CAAE,EAAE,EAAE,IAAI,CAAE,CAAC;QAC1C,OAAO,yBAAiB,CAAC,UAAU,CAAK,KAAK,CAAE,CAAC;IACjD,CAAC;IAED,UAAU,EAAV,UAA8B,MAAuB;QACpD,OAAO,yBAAiB,CAAC,QAAQ,CAAK,MAAM,CAAE,CAAC;IAChD,CAAC;IAED,QAAQ,EAAR,UAA4B,MAAQ;QACnC,IAAI,yBAAiB,CAAC,WAAW,CAAE,MAAM,CAAE;YAAG,OAAO,MAAM,CAAC;QAE5D,IAAM,QAAQ,GAAe,qBAAc;aACzC,gBAAgB,CAAE,MAAM,EAAE,iBAAO,CAAE,CAAC;QAEtC,OAAO,qBAAc;aACnB,oBAAoB,CAAE,SAAS,EAAE,QAAQ,CAAE,CAAC;IAC/C,CAAC;CACD,CAAC","file":"TransientResource.js","sourcesContent":["import { ModelDecorator } from \"../core\";\nimport {\n\tDigestedObjectSchema,\n\tObjectSchemaUtils,\n} from \"../ObjectSchema\";\nimport { Pointer } from \"../Pointer\";\nimport { URI } from \"../RDF\";\nimport {\n\tisObject,\n\tPickSelfProps\n} from \"../Utils\";\nimport { BaseResource } from \"./BaseResource\";\n\n\nexport interface TransientResource extends Pointer {\n\ttypes:string[];\n\n\n\taddType( type:string ):void;\n\n\thasType( type:string ):boolean;\n\n\tremoveType( type:string ):void;\n}\n\n\nexport interface TransientResourceFactory {\n\tisDecorated( object:object ):object is TransientResource;\n\n\tis( value:any ):value is TransientResource;\n\n\n\tcreate<T extends object>( data?:T & BaseResource ):T & TransientResource;\n\n\tcreateFrom<T extends object>( object:T & BaseResource ):T & TransientResource;\n\n\tdecorate<T extends object>( object:T ):T & TransientResource;\n}\n\n\nfunction resolveURI( resource:TransientResource, uri:string ):string {\n\tif( URI.isAbsolute( uri ) ) return uri;\n\tif( ! resource._registry || ! resource._registry._context ) return uri;\n\n\tconst schema:DigestedObjectSchema = resource._registry._context.getObjectSchema();\n\treturn ObjectSchemaUtils.resolveURI( uri, schema, { vocab: true } );\n}\n\nconst PROTOTYPE:PickSelfProps<TransientResource, Pointer> = {\n\tget types():string[] { return []; },\n\n\n\taddType( this:TransientResource, type:string ):void {\n\t\ttype = resolveURI( this, type );\n\n\t\tif( this.types.indexOf( type ) !== - 1 ) return;\n\n\t\tthis.types.push( type );\n\t},\n\n\thasType( this:TransientResource, type:string ):boolean {\n\t\ttype = resolveURI( this, type );\n\t\treturn this.types.indexOf( type ) !== - 1;\n\t},\n\n\tremoveType( this:TransientResource, type:string ):void {\n\t\ttype = resolveURI( this, type );\n\n\t\tconst index:number = this.types.indexOf( type );\n\t\tif( index !== - 1 ) this.types.splice( index, 1 );\n\t},\n};\n\nexport const TransientResource:TransientResourceFactory = {\n\tisDecorated( object:object ):object is TransientResource {\n\t\treturn isObject( object )\n\t\t\t&& ModelDecorator\n\t\t\t\t.hasPropertiesFrom( PROTOTYPE, object );\n\t},\n\n\tis( value:any ):value is TransientResource {\n\t\treturn Pointer.is( value )\n\t\t\t&& TransientResource.isDecorated( value );\n\t},\n\n\tcreate<T extends object>( data?:T & BaseResource ):T & TransientResource {\n\t\tconst clone:T = Object.assign( {}, data );\n\t\treturn TransientResource.createFrom<T>( clone );\n\t},\n\n\tcreateFrom<T extends object>( object:T & BaseResource ):T & TransientResource {\n\t\treturn TransientResource.decorate<T>( object );\n\t},\n\n\tdecorate<T extends object>( object:T ):T & TransientResource {\n\t\tif( TransientResource.isDecorated( object ) ) return object;\n\n\t\tconst resource:T & Pointer = ModelDecorator\n\t\t\t.decorateMultiple( object, Pointer );\n\n\t\treturn ModelDecorator\n\t\t\t.definePropertiesFrom( PROTOTYPE, resource );\n\t},\n};\n"]}