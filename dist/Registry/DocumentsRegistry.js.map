{"version":3,"sources":["Registry/DocumentsRegistry.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,wCAAuC;AACvC,oCAAiD;AAEjD,gCAAmC;AACnC,oCAAyC;AACzC,8BAAuC;AACvC,8BAGgB;AAChB,uCAAsC;AACtC,qDAAoD;AAGpD;IAAuC,qCAAoC;IAI1E,2BAAa,OAAkB;eAC9B,kBAAO,mBAAQ,EAAE,OAAO,CAAE;IAC3B,CAAC;IAGD,oCAAQ,GAAR,UAAU,EAAS;QAClB,OAAO,IAAI,CAAC,SAAS,CAAE,EAAE,EAAE,IAAA,EAAE,CAAE,CAAC;IACjC,CAAC;IAED,uCAAW,GAAX,UAAa,EAAS;QACrB,IAAI,SAAG,CAAC,SAAS,CAAE,EAAE,CAAE,IAAI,SAAG,CAAC,WAAW,CAAE,EAAE,CAAE;YAC/C,OAAO,mBAAQ,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAE,IAAI,EAAE,EAAE,CAAE,CAAC;QAExD,OAAO,iBAAM,WAAW,YAAE,EAAE,CAAE,CAAC;IAChC,CAAC;IAGD,gDAAoB,GAApB,UAAwC,QAAgC;QAAxE,iBAOC;QANA,IAAI,CAAE,CAAC,QAAQ,YAAY,eAAQ,CAAC;YAAG,OAAO,iBAAM,oBAAoB,YAAE,QAAQ,CAAE,CAAC;QAErF,OAAO,iBACL,oBAAoB,YAAE,QAAQ,CAAE;aAChC,KAAK,CAAE,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,qBAAqB,CAAE,QAAQ,EAAE,KAAK,CAAE,EAA7C,CAA6C,CAAE,CAC/D;IACH,CAAC;IAES,iDAAqB,GAA/B,UAAiC,QAAiB,EAAE,KAAW;QAA/D,iBAqBC;QApBA,IAAI,CAAE,QAAQ,CAAC,IAAI;YAAG,OAAO,OAAO,CAAC,MAAM,CAAE,KAAK,CAAE,CAAC;QAErD,OAAO,IAAI,qBAAY,EAAE;aACvB,KAAK,CAAE,QAAQ,CAAC,IAAI,CAAE;aACtB,IAAI,CAAE,UAAE,SAAmB;YAC3B,IAAM,aAAa,GAAiB,KAAI,CAAC,eAAe,CAAE,SAAS,CAAE,CAAC;YAEtE,IAAM,cAAc,GAAmB,aAAa;iBAClD,WAAW,CAAE,IAAI,CAAE;iBACnB,MAAM,CAAE,mBAAa,CAAC,EAAE,CAAE,CAAC;YAE7B,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC;gBAAG,OAAO,OAAO,CAAC,MAAM,CAAE,IAAI,6BAAoB,CAAE,0DAA0D,CAAE,CAAE,CAAC;YAClJ,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC;gBAAG,OAAO,OAAO,CAAC,MAAM,CAAE,IAAI,6BAAoB,CAAE,wDAAwD,CAAE,CAAE,CAAC;YAE9I,IAAM,aAAa,GAAiB,MAAM,CAAC,MAAM,CAAE,KAAK,EAAE,cAAc,CAAE,CAAC,CAAE,CAAE,CAAC;YAChF,KAAK,CAAC,OAAO,GAAG,mBAAa,CAAC,UAAU,CAAE,aAAa,CAAE,CAAC;YAC1D,OAAO,OAAO,CAAC,MAAM,CAAE,KAAK,CAAE,CAAC;QAChC,CAAC,EAAE;YACF,OAAO,OAAO,CAAC,MAAM,CAAE,KAAK,CAAE,CAAC;QAChC,CAAC,CAAE,CAAC;IACN,CAAC;IAEF,wBAAC;AAAD,CArDA,AAqDC,CArDsC,iCAAe,GAqDrD;AArDY,8CAAiB","file":"DocumentsRegistry.js","sourcesContent":["import { CarbonLDP } from \"../CarbonLDP\";\nimport { Document } from \"../Document\";\nimport { IllegalArgumentError } from \"../Errors\";\nimport { FreeResources } from \"../FreeResources\";\nimport { Response } from \"../HTTP\";\nimport { JSONLDParser } from \"../JSONLD\";\nimport { ErrorResponse } from \"../LDP\";\nimport {\n\tRDFNode,\n\tURI\n} from \"../RDF\";\nimport { Registry } from \"./Registry\";\nimport { RegistryService } from \"./RegistryService\";\n\n\nexport class DocumentsRegistry extends RegistryService<Document, CarbonLDP> {\n\n\treadonly context:CarbonLDP | undefined;\n\n\tconstructor( context?:CarbonLDP ) {\n\t\tsuper( Document, context );\n\t}\n\n\n\tregister( id:string ):Document {\n\t\treturn this._register( { id } );\n\t}\n\n\t_getLocalID( id:string ):string {\n\t\tif( URI.isBNodeID( id ) || URI.hasFragment( id ) )\n\t\t\treturn Registry.PROTOTYPE._getLocalID.call( this, id );\n\n\t\treturn super._getLocalID( id );\n\t}\n\n\n\t_parseFailedResponse<T extends object>( response:Response | Error | null ):Promise<never> {\n\t\tif( ! (response instanceof Response) ) return super._parseFailedResponse( response );\n\n\t\treturn super\n\t\t\t._parseFailedResponse( response )\n\t\t\t.catch( error => this._addErrorResponseData( response, error ) )\n\t\t\t;\n\t}\n\n\tprotected _addErrorResponseData( response:Response, error:Error ):Promise<never> {\n\t\tif( ! response.data ) return Promise.reject( error );\n\n\t\treturn new JSONLDParser()\n\t\t\t.parse( response.data )\n\t\t\t.then( ( freeNodes:RDFNode[] ) => {\n\t\t\t\tconst freeResources:FreeResources = this._parseFreeNodes( freeNodes );\n\n\t\t\t\tconst errorResponses:ErrorResponse[] = freeResources\n\t\t\t\t\t.getPointers( true )\n\t\t\t\t\t.filter( ErrorResponse.is );\n\n\t\t\t\tif( errorResponses.length === 0 ) return Promise.reject( new IllegalArgumentError( \"The response string does not contains a c:ErrorResponse.\" ) );\n\t\t\t\tif( errorResponses.length > 1 ) return Promise.reject( new IllegalArgumentError( \"The response string contains multiple c:ErrorResponse.\" ) );\n\n\t\t\t\tconst errorResponse:ErrorResponse = Object.assign( error, errorResponses[ 0 ] );\n\t\t\t\terror.message = ErrorResponse.getMessage( errorResponse );\n\t\t\t\treturn Promise.reject( error );\n\t\t\t}, () => {\n\t\t\t\treturn Promise.reject( error );\n\t\t\t} );\n\t}\n\n}\n"]}