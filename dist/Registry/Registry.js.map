{"version":3,"sources":["Registry/Registry.ts"],"names":[],"mappings":"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","file":"Registry.js","sourcesContent":["import { IDAlreadyInUseError } from \"../Errors/IDAlreadyInUseError\";\nimport { IllegalArgumentError } from \"../Errors/IllegalArgumentError\";\n\nimport { ModelDecorator } from \"../Model/ModelDecorator\";\nimport { ModelFactory } from \"../Model/ModelFactory\";\nimport { ModelPrototype } from \"../Model/ModelPrototype\";\n\nimport { Pointer } from \"../Pointer/Pointer\";\nimport { PointerLibrary } from \"../Pointer/PointerLibrary\";\nimport { PointerValidator } from \"../Pointer/PointerValidator\";\n\nimport { isObject } from \"../Utils\";\n\nimport { BaseRegisteredPointer } from \"./BaseRegisteredPointer\";\nimport { BaseRegistry } from \"./BaseRegistry\";\nimport { RegisteredPointer } from \"./RegisteredPointer\";\n\n\nexport interface Registry<M extends RegisteredPointer = RegisteredPointer> extends PointerLibrary, PointerValidator {\n\t// TODO: Change to unknown\n\treadonly $registry:Registry<any> | undefined;\n\n\treadonly $__modelDecorator:ModelDecorator<M, BaseRegisteredPointer>;\n\treadonly $__resourcesMap:Map<string, M>;\n\n\n\t$inScope( idOrPointer:string | Pointer ):boolean;\n\t$inScope( idOrPointer:string | Pointer, local:true ):boolean;\n\n\n\t$hasPointer( id:string ):boolean;\n\t$hasPointer( id:string, local:true ):boolean;\n\n\t$getPointer( id:string ):RegisteredPointer;\n\t$getPointer( id:string, local:true ):M;\n\n\t$getPointers():RegisteredPointer[];\n\t$getPointers( local:true ):M[];\n\n\t$removePointer( idOrPointer:string | RegisteredPointer ):boolean;\n\t$removePointer( idOrPointer:string | RegisteredPointer, local:true ):boolean;\n\n\n\t$_getLocalID( id:string ):string;\n\n\t$_addPointer<T extends object>( pointer:T & Pointer ):T & M;\n}\n\n\n// TODO: Use unknown\nexport type RegistryFactory =\n\t& ModelPrototype<Registry>\n\t& ModelDecorator<Registry<any>, BaseRegistry>\n\t& ModelFactory<Registry, BaseRegistry>\n\t;\n\nexport const Registry:RegistryFactory = {\n\tPROTOTYPE: {\n\t\t$registry: void 0,\n\n\t\tget $__modelDecorator():ModelDecorator<RegisteredPointer> {\n\t\t\tthrow new IllegalArgumentError( `Property \"$__modelDecorator\" is required` );\n\t\t},\n\n\t\tget $__resourcesMap():Map<string, RegisteredPointer> { return new Map(); },\n\n\n\t\t$inScope( this:Registry, idOrPointer:string | Pointer, local?:true ):boolean {\n\t\t\ttry {\n\t\t\t\tconst id:string = Pointer.getID( idOrPointer );\n\t\t\t\tthis.$_getLocalID( id );\n\t\t\t\treturn true;\n\t\t\t} catch {\n\t\t\t\tif( local === true || ! this.$registry ) return false;\n\t\t\t\treturn this.$registry.$inScope( idOrPointer );\n\t\t\t}\n\t\t},\n\n\n\t\t$hasPointer( this:Registry, id:string, local?:true ):boolean {\n\t\t\tif( this.$inScope( id, true ) ) {\n\t\t\t\tconst localID:string = this.$_getLocalID( id );\n\t\t\t\tif( this.$__resourcesMap.has( localID ) ) return true;\n\t\t\t}\n\n\t\t\tif( local === true || ! this.$registry ) return false;\n\t\t\treturn this.$registry.$hasPointer( id );\n\t\t},\n\n\t\t$getPointer( this:Registry, id:string, local?:true ):RegisteredPointer {\n\t\t\tif( ! this.$inScope( id, true ) ) {\n\t\t\t\tif( local === true || ! this.$registry ) throw new IllegalArgumentError( `\"${ id }\" is out of scope.` );\n\t\t\t\treturn this.$registry.$getPointer( id );\n\t\t\t}\n\n\t\t\tconst localID:string = this.$_getLocalID( id );\n\t\t\tif( this.$__resourcesMap.has( localID ) ) return this.$__resourcesMap.get( localID );\n\n\t\t\tif( local !== true && this.$registry && this.$registry.$hasPointer( id ) )\n\t\t\t\treturn this.$registry.$getPointer( id );\n\n\t\t\treturn this.$_addPointer( { $id: id } );\n\t\t},\n\n\t\t$getPointers( this:Registry, local?:true ):RegisteredPointer[] {\n\t\t\tconst pointers:RegisteredPointer[] = Array.from( this.$__resourcesMap.values() );\n\t\t\tif( local === true || ! this.$registry ) return pointers;\n\n\t\t\treturn [\n\t\t\t\t...this.$registry.$getPointers(),\n\t\t\t\t...pointers,\n\t\t\t];\n\t\t},\n\n\t\t$removePointer( this:Registry, idOrPointer:string | RegisteredPointer, local?:true ):boolean {\n\t\t\tconst id:string = Pointer.getID( idOrPointer );\n\n\t\t\tif( this.$inScope( id, true ) ) {\n\t\t\t\tconst localID:string = this.$_getLocalID( id );\n\t\t\t\tif( this.$__resourcesMap.delete( localID ) ) return true;\n\t\t\t}\n\n\t\t\tif( local === true || ! this.$registry ) return false;\n\t\t\treturn this.$registry.$removePointer( idOrPointer );\n\t\t},\n\n\n\t\t$_addPointer<T extends object>( this:Registry, pointer:T & Pointer ):T & RegisteredPointer {\n\t\t\tif( ! pointer.$id ) throw new IllegalArgumentError( \"The pointer $id cannot be empty.\" );\n\n\t\t\tconst localID:string = this.$_getLocalID( pointer.$id );\n\t\t\tif( this.$__resourcesMap.has( localID ) ) throw new IDAlreadyInUseError( `\"${ pointer.$id }\" is already being used.` );\n\n\t\t\tconst resource:T & RegisteredPointer = this.$__modelDecorator\n\t\t\t\t.decorate( Object.assign( pointer, {\n\t\t\t\t\t$registry: this,\n\t\t\t\t} ) );\n\n\t\t\tthis.$__resourcesMap.set( localID, resource );\n\t\t\treturn resource;\n\t\t},\n\n\t\t$_getLocalID( this:Registry, id:string ):never {\n\t\t\tthrow new IllegalArgumentError( `\"${ id }\" is out of scope.` );\n\t\t},\n\t},\n\n\n\tisDecorated( object:object ):object is Registry {\n\t\treturn isObject( object )\n\t\t\t&& ModelDecorator\n\t\t\t\t.hasPropertiesFrom( Registry.PROTOTYPE, object )\n\t\t\t;\n\t},\n\n\tdecorate<T extends BaseRegistry>( object:T ):T & Registry {\n\t\tif( Registry.isDecorated( object ) ) return object;\n\n\t\treturn ModelDecorator\n\t\t\t.definePropertiesFrom( Registry.PROTOTYPE, object );\n\t},\n\n\n\tcreate<T extends object>( data:T & BaseRegistry ):T & Registry {\n\t\tconst copy:T & BaseRegistry = Object.assign( {}, data );\n\t\treturn Registry.createFrom( copy );\n\t},\n\n\tcreateFrom<T extends object>( object:T & BaseRegistry ):T & Registry {\n\t\treturn Registry.decorate( object );\n\t},\n};\n"]}