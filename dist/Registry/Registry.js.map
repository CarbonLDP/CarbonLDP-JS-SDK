{"version":3,"sources":["Registry/Registry.ts"],"names":[],"mappings":"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","file":"Registry.js","sourcesContent":["import { IDAlreadyInUseError } from \"../Errors/IDAlreadyInUseError\";\nimport { IllegalArgumentError } from \"../Errors/IllegalArgumentError\";\n\nimport { BiModelDecorator } from \"../Model/BiModelDecorator\";\nimport { ModelDecorator } from \"../Model/ModelDecorator\";\nimport { ModelPrototype } from \"../Model/ModelPrototype\";\n\nimport { Pointer } from \"../Pointer/Pointer\";\nimport { $PointerLibrary, PointerLibrary } from \"../Pointer/PointerLibrary\";\nimport { $PointerValidator, PointerValidator } from \"../Pointer/PointerValidator\";\n\nimport { BaseRegisteredPointer } from \"./BaseRegisteredPointer\";\nimport { $BaseRegistry, BaseRegistry } from \"./BaseRegistry\";\nimport { RegisteredPointer } from \"./RegisteredPointer\";\n\n\nexport interface Registry<MODEL extends RegisteredPointer = RegisteredPointer> extends PointerLibrary, PointerValidator {\n\t// TODO: Change to unknown\n\treadonly registry:Registry<any> | $Registry<any> | undefined;\n\n\treadonly __modelDecorator:ModelDecorator<MODEL, BaseRegisteredPointer>;\n\treadonly __resourcesMap:Map<string, MODEL>;\n\n\n\tinScope( idOrPointer:string | Pointer ):boolean;\n\tinScope( idOrPointer:string | Pointer, local:true ):boolean;\n\n\n\thasPointer( id:string ):boolean;\n\thasPointer( id:string, local:true ):boolean;\n\n\tgetPointer( id:string ):RegisteredPointer;\n\tgetPointer( id:string, local:true ):MODEL;\n\n\tgetPointers():RegisteredPointer[];\n\tgetPointers( local:true ):MODEL[];\n\n\tremovePointer( idOrPointer:string | RegisteredPointer ):boolean;\n\tremovePointer( idOrPointer:string | RegisteredPointer, local:true ):boolean;\n\n\n\t_addPointer<T extends object>( pointer:T & Pointer ):T & MODEL;\n\n\t_getLocalID( id:string ):string;\n}\n\nexport interface $Registry<MODEL extends RegisteredPointer = RegisteredPointer> extends Pointer, $PointerLibrary, $PointerValidator {\n\t// TODO: Change to unknown\n\treadonly $registry:Registry<any> | $Registry<any> | undefined;\n\n\treadonly $__modelDecorator:ModelDecorator<MODEL, BaseRegisteredPointer>;\n\treadonly $__resourcesMap:Map<string, MODEL>;\n\n\n\t$inScope( idOrPointer:string | Pointer ):boolean;\n\t$inScope( idOrPointer:string | Pointer, local:true ):boolean;\n\n\n\t$hasPointer( id:string ):boolean;\n\t$hasPointer( id:string, local:true ):boolean;\n\n\t$getPointer( id:string ):RegisteredPointer;\n\t$getPointer( id:string, local:true ):MODEL;\n\n\t$getPointers():RegisteredPointer[];\n\t$getPointers( local:true ):MODEL[];\n\n\t$removePointer( idOrPointer:string | RegisteredPointer ):boolean;\n\t$removePointer( idOrPointer:string | RegisteredPointer, local:true ):boolean;\n\n\n\t$_getLocalID( id:string ):string;\n\n\t$_addPointer<T extends object>( pointer:T & Pointer ):T & MODEL;\n}\n\n\ntype AnyRegistry<MODEL extends RegisteredPointer = RegisteredPointer> = $Registry<MODEL> | Registry<MODEL>;\n\nfunction __getResourcesMaps( this:void, registry:AnyRegistry ):Map<string, RegisteredPointer> {\n\treturn \"$id\" in registry ? registry.$__resourcesMap : registry.__resourcesMap;\n}\n\nfunction __getParentResource( this:void, registry:AnyRegistry ):AnyRegistry | undefined {\n\treturn \"$id\" in registry ? registry.$registry : registry.registry;\n}\n\nfunction __getDecorator( this:void, registry:AnyRegistry ):ModelDecorator<RegisteredPointer, BaseRegisteredPointer> {\n\treturn \"$id\" in registry ?\n\t\tregistry.$__modelDecorator : registry.__modelDecorator;\n}\n\nfunction __getLocalID( this:void, registry:AnyRegistry, id:string ):string {\n\treturn \"$id\" in registry ?\n\t\tregistry.$_getLocalID( id ) : registry._getLocalID( id );\n}\n\nfunction __addPointer( this:void, registry:AnyRegistry, pointer:Pointer ):RegisteredPointer {\n\treturn \"$id\" in registry ?\n\t\tregistry.$_addPointer( pointer ) : registry._addPointer( pointer );\n}\n\n\nfunction __inScope( this:AnyRegistry | undefined, idOrPointer:string | Pointer, local?:true ):boolean {\n\tif( ! this ) return false;\n\n\ttry {\n\t\tconst id:string = Pointer.getID( idOrPointer );\n\t\t__getLocalID( this, id );\n\n\t\treturn true;\n\t} catch {\n\t\tif( local === true ) return false;\n\n\t\tconst parentRegistry:AnyRegistry | undefined = __getParentResource( this );\n\t\treturn __inScope.call( parentRegistry, idOrPointer );\n\t}\n}\n\nfunction __hasPointer( this:AnyRegistry | undefined, id:string, local?:true ):boolean {\n\tif( ! this ) return false;\n\n\tif( __inScope.call( this, id, true ) ) {\n\t\tconst localID:string = __getLocalID( this, id );\n\n\t\tconst resourcesMap:Map<string, RegisteredPointer> = __getResourcesMaps( this );\n\t\tif( resourcesMap.has( localID ) ) return true;\n\t}\n\n\tif( local === true ) return false;\n\n\tconst parentRegistry:AnyRegistry | undefined = __getParentResource( this );\n\treturn __hasPointer.call( parentRegistry, id );\n}\n\nfunction __getPointer( this:AnyRegistry, id:string, local?:true ):RegisteredPointer {\n\tconst parentRegistry:AnyRegistry | undefined = __getParentResource( this );\n\n\tif( ! __inScope.call( this, id, true ) ) {\n\t\tif( local === true || ! parentRegistry ) throw new IllegalArgumentError( `\"${ id }\" is out of scope.` );\n\t\treturn __getPointer.call( parentRegistry, id );\n\t}\n\n\tconst localID:string = __getLocalID( this, id );\n\n\tconst resourcesMap:Map<string, RegisteredPointer> = __getResourcesMaps( this );\n\tif( resourcesMap.has( localID ) ) return resourcesMap.get( localID );\n\n\tif( local !== true && __hasPointer.call( parentRegistry, id ) )\n\t\treturn __getPointer.call( parentRegistry, id );\n\n\treturn __addPointer( this, { $id: id } );\n}\n\nfunction __getPointers( this:AnyRegistry, local?:true ):RegisteredPointer[] {\n\tconst resourcesMap:Map<string, RegisteredPointer> = __getResourcesMaps( this );\n\n\tconst pointers:RegisteredPointer[] = Array.from( resourcesMap.values() );\n\n\tconst parentRegistry:AnyRegistry | undefined = __getParentResource( this );\n\tif( local === true || ! parentRegistry ) return pointers;\n\n\treturn [\n\t\t...__getPointers.call( parentRegistry ),\n\t\t...pointers,\n\t];\n}\n\nfunction __removePointer( this:AnyRegistry | undefined, idOrPointer:string | RegisteredPointer, local?:true ):boolean {\n\tif( ! this ) return false;\n\n\tconst id:string = Pointer.getID( idOrPointer );\n\tif( __inScope.call( this, id, true ) ) {\n\t\tconst localID:string = __getLocalID( this, id );\n\n\t\tconst resourcesMap:Map<string, RegisteredPointer> = __getResourcesMaps( this );\n\t\tif( resourcesMap.delete( localID ) ) return true;\n\t}\n\n\tif( local === true ) return false;\n\n\tconst parentRegistry:AnyRegistry | undefined = __getParentResource( this );\n\treturn __removePointer.call( parentRegistry, idOrPointer );\n}\n\n\nexport function _getPointer<T extends RegisteredPointer>( registry:Registry<T> | $Registry<T>, id:string, local?:true ):T {\n\treturn \"$id\" in registry ?\n\t\tregistry.$getPointer( id, local ) :\n\t\tregistry.getPointer( id, local );\n}\n\n// TODO: Use unknown\nexport type RegistryFactory =\n\t& ModelPrototype<Registry<any>>\n\t& BiModelDecorator<Registry<any>, $Registry<any>, BaseRegistry, $BaseRegistry>\n\t;\n\nexport const Registry:RegistryFactory = {\n\tPROTOTYPE: {\n\t\tregistry: void 0,\n\n\t\tget __modelDecorator():ModelDecorator<RegisteredPointer> {\n\t\t\tthrow new IllegalArgumentError( `Property \"__modelDecorator\" is required` );\n\t\t},\n\n\t\tget __resourcesMap():Map<string, RegisteredPointer> { return new Map(); },\n\n\n\t\tinScope: __inScope,\n\n\n\t\thasPointer: __hasPointer,\n\n\t\tgetPointer: __getPointer,\n\n\t\tgetPointers: __getPointers,\n\n\t\tremovePointer: __removePointer,\n\n\n\t\t_addPointer<T extends object>( this:AnyRegistry, pointer:T & Pointer ):T & RegisteredPointer {\n\t\t\tif( ! pointer.$id ) throw new IllegalArgumentError( \"The pointer $id cannot be empty.\" );\n\n\t\t\tconst localID:string = __getLocalID( this, pointer.$id );\n\n\t\t\tconst resourcesMap:Map<string, RegisteredPointer> = __getResourcesMaps( this );\n\t\t\tif( resourcesMap.has( localID ) ) throw new IDAlreadyInUseError( `\"${ pointer.$id }\" is already being used.` );\n\n\t\t\tconst resource:T & RegisteredPointer = __getDecorator( this )\n\t\t\t\t.decorate( Object.assign<T, BaseRegisteredPointer>( pointer, {\n\t\t\t\t\t$registry: this,\n\t\t\t\t} ) );\n\n\t\t\tresourcesMap.set( localID, resource );\n\n\t\t\treturn resource;\n\t\t},\n\n\t\t_getLocalID( this:AnyRegistry, id:string ):string {\n\t\t\treturn id;\n\t\t},\n\t},\n\n\n\tisDecorated<T extends object>( object:object ):object is any {\n\t\treturn BiModelDecorator\n\t\t\t.hasPropertiesFrom( Registry.PROTOTYPE, object );\n\t},\n\n\tdecorate<T extends object>( object:T ):T & any {\n\t\tif( Registry.isDecorated( object ) ) return object;\n\n\t\treturn BiModelDecorator\n\t\t\t.definePropertiesFrom( Registry.PROTOTYPE, object );\n\t},\n};\n"]}