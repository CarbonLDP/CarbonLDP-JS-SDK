{"version":3,"sources":["PersistedFragment.ts"],"names":[],"mappings":";AACA,IAAY,YAAY,WAAM,gBAAgB,CAAC,CAAA;AAE/C,IAAY,iBAAiB,WAAM,qBAAqB,CAAC,CAAA;AACzD,IAAY,GAAG,WAAM,OAAO,CAAC,CAAA;AAO7B,oBAAqB,GAAU;IAC9B,EAAE,CAAA,CAAE,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAE,GAAG,CAAG,CAAC;QAAC,MAAM,CAAC,GAAG,CAAC;IAEhD,GAAG,GAAG,YAAY,CAAC,QAAQ,CAAC,kBAAkB,CAAE,IAAI,GAAG,CAAC,GAAG,CAAC,KAAK,CAAE,GAAG,CAAE,EAAW,IAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAE,CAAC,WAAW,CAAC;IAE9I,IAAI,MAAM,GAA8C,IAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAE,IAAI,CAAE,CAAC;IACvG,EAAE,CAAA,CAAE,MAAM,CAAC,KAAM,CAAC;QAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAE,MAAM,CAAC,KAAK,EAAE,GAAG,CAAE,CAAC;IAEnE,MAAM,CAAC,GAAG,CAAC;AACZ,CAAC;AACD,uBAAwB,aAAqC;IAC5D,MAAM,CAAC,UAAU,IAAW;QAC3B,IAAI,GAAG,UAAU,CAAC,IAAI,CAAE,IAAI,EAAE,IAAI,CAAE,CAAC;QACrC,aAAa,CAAC,IAAI,CAAE,IAAI,EAAE,IAAI,CAAE,CAAC;IAClC,CAAC,CAAC;AACH,CAAC;AACD,uBAAwB,aAAwC;IAC/D,MAAM,CAAC,UAAU,IAAW;QAC3B,IAAI,GAAG,UAAU,CAAC,IAAI,CAAE,IAAI,EAAE,IAAI,CAAE,CAAC;QACrC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAE,IAAI,EAAE,IAAI,CAAE,CAAC;IACzC,CAAC,CAAC;AACH,CAAC;AACD,0BAA2B,aAAqC;IAC/D,MAAM,CAAC,UAAU,IAAW;QAC3B,IAAI,GAAG,UAAU,CAAC,IAAI,CAAE,IAAI,EAAE,IAAI,CAAE,CAAC;QACrC,aAAa,CAAC,IAAI,CAAE,IAAI,EAAE,IAAI,CAAE,CAAC;IAClC,CAAC,CAAC;AACH,CAAC;AAED;IAAA;IA2BA,CAAC;IA1BO,gBAAQ,GAAf,UAA2C,QAAU,EAAE,QAAoB;QAApB,wBAAoB,GAApB,aAAoB;QAC1E,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAE,QAAQ,EAAE,QAAQ,CAAE,CAAC;QAEzD,MAAM,CAAC,gBAAgB,CAAE,QAAQ,EAAE;YAClC,SAAS,EAAE;gBACV,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,IAAI;gBAClB,KAAK,EAAE,aAAa,CAAE,QAAQ,CAAC,OAAO,CAAE;aACxC;YACD,SAAS,EAAE;gBACV,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,IAAI;gBAClB,KAAK,EAAE,aAAa,CAAE,QAAQ,CAAC,OAAO,CAAE;aACxC;YACD,YAAY,EAAE;gBACb,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,IAAI;gBAClB,KAAK,EAAE,gBAAgB,CAAE,QAAQ,CAAC,UAAU,CAAE;aAC9C;SACD,CAAE,CAAC;QAEJ,MAAM,CAAO,QAAQ,CAAC;IACvB,CAAC;IACF,cAAC;AAAD,CA3BA,AA2BC,IAAA;AA3BY,eAAO,UA2BnB,CAAA","file":"PersistedFragment.js","sourcesContent":["import * as Fragment from \"./Fragment\";\nimport * as ObjectSchema from \"./ObjectSchema\";\nimport * as PersistedDocument from \"./PersistedDocument\";\nimport * as PersistedResource from \"./PersistedResource\";\nimport * as RDF from \"./RDF\";\nimport * as Utils from \"./Utils\";\n\nexport interface Class extends PersistedResource.Class, Fragment.Class {\n\tdocument: PersistedDocument.Class;\n}\n\nfunction resolveURI( uri:string ):string {\n\tif( RDF.URI.Util.isAbsolute( uri ) ) return uri;\n\n\turi = ObjectSchema.Digester.resolvePrefixedURI( new RDF.URI.Class( uri ), (<Class> this).document._documents.getGeneralSchema() ).stringValue;\n\n\tlet schema:ObjectSchema.DigestedObjectSchema = (<Class> this).document._documents.getSchemaFor( this );\n\tif( schema.vocab ) uri = RDF.URI.Util.resolve( schema.vocab, uri );\n\n\treturn uri;\n}\nfunction extendAddType( superFunction:( type:string ) => void ):( type:string ) => void {\n\treturn function( type:string ):void {\n\t\ttype = resolveURI.call( this, type );\n\t\tsuperFunction.call( this, type );\n\t};\n}\nfunction extendHasType( superFunction:( type:string ) => boolean ):( type:string ) => boolean {\n\treturn function( type:string ):boolean {\n\t\ttype = resolveURI.call( this, type );\n\t\treturn superFunction.call( this, type );\n\t};\n}\nfunction extendRemoveType( superFunction:( type:string ) => void ):( type:string ) => void {\n\treturn function( type:string ):void {\n\t\ttype = resolveURI.call( this, type );\n\t\tsuperFunction.call( this, type );\n\t};\n}\n\nexport class Factory {\n\tstatic decorate<T extends Fragment.Class>( fragment:T, snapshot:Object = {} ):T & Class {\n\t\tPersistedResource.Factory.decorate( fragment, snapshot );\n\n\t\tObject.defineProperties( fragment, {\n\t\t\t\"addType\": {\n\t\t\t\twritable: false,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: extendAddType( fragment.addType ),\n\t\t\t},\n\t\t\t\"hasType\": {\n\t\t\t\twritable: false,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: extendHasType( fragment.hasType ),\n\t\t\t},\n\t\t\t\"removeType\": {\n\t\t\t\twritable: false,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: extendRemoveType( fragment.removeType ),\n\t\t\t},\n\t\t} );\n\n\t\treturn <any> fragment;\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}