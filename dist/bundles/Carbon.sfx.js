!function(e){function r(e,r,t){e in l||(l[e]={name:e,declarative:!0,deps:r,declare:t,normalizedDeps:r})}function t(e){return p[e]||(p[e]={name:e,dependencies:[],exports:{},importers:[]})}function n(r){if(!r.module){var o=r.module=t(r.name),a=r.module.exports,u=r.declare.call(e,function(e,r){if(o.locked=!0,"object"==typeof e)for(var t in e)a[t]=e[t];else a[e]=r;for(var n=0,u=o.importers.length;u>n;n++){var i=o.importers[n];if(!i.locked)for(var l=0;l<i.dependencies.length;++l)i.dependencies[l]===o&&i.setters[l](a)}return o.locked=!1,r},r.name);o.setters=u.setters,o.execute=u.execute;for(var s=0,d=r.normalizedDeps.length;d>s;s++){var f,c=r.normalizedDeps[s],v=l[c],m=p[c];m?f=m.exports:v&&!v.declarative?f=v.esModule:v?(n(v),m=v.module,f=m.exports):f=i(c),m&&m.importers?(m.importers.push(o),o.dependencies.push(m)):o.dependencies.push(null),o.setters[s]&&o.setters[s](f)}}}function o(r){var t={};if(("object"==typeof r||"function"==typeof r)&&r!==e)if(d)for(var n in r)"default"!==n&&a(t,r,n);else{var o=r&&r.hasOwnProperty;for(var n in r)"default"===n||o&&!r.hasOwnProperty(n)||(t[n]=r[n])}return t["default"]=r,c(t,"__useDefault",{value:!0}),t}function a(e,r,t){try{var n;(n=Object.getOwnPropertyDescriptor(r,t))&&c(e,t,n)}catch(o){return e[t]=r[t],!1}}function u(r,t){var n=l[r];if(n&&!n.evaluated&&n.declarative){t.push(r);for(var o=0,a=n.normalizedDeps.length;a>o;o++){var d=n.normalizedDeps[o];-1==s.call(t,d)&&(l[d]?u(d,t):i(d))}n.evaluated||(n.evaluated=!0,n.module.execute.call(e))}}function i(e){if(m[e])return m[e];if("@node/"==e.substr(0,6))return m[e]=o(v(e.substr(6)));var r=l[e];if(!r)throw"Module "+e+" not present.";return n(l[e]),u(e,[]),l[e]=void 0,r.declarative&&c(r.module.exports,"__esModule",{value:!0}),m[e]=r.declarative?r.module.exports:r.esModule}var l={},s=Array.prototype.indexOf||function(e){for(var r=0,t=this.length;t>r;r++)if(this[r]===e)return r;return-1},d=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(f){d=!1}var c;!function(){try{Object.defineProperty({},"a",{})&&(c=Object.defineProperty)}catch(e){c=function(e,r,t){try{e[r]=t.value||t.get.call(e)}catch(n){}}}}();var p={},v="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&require.resolve&&"undefined"!=typeof process&&require,m={"@empty":{}};return function(e,t,n,a){return function(u){u(function(u){for(var l=0;l<t.length;l++)(function(e,r){r&&r.__esModule?m[e]=r:m[e]=o(r)})(t[l],arguments[l]);a({register:r});var s=i(e[0]);if(e.length>1)for(var l=1;l<e.length;l++)i(e[l]);return n?s["default"]:s})}}}("undefined"!=typeof self?self:global)

(["1"], [], false, function($__System) {
var require = this.require, exports = this.exports, module = this.module;
$__System.register("2", ["3", "4", "5", "6", "7", "8", "9", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var App, Context_1, Errors, NS, PersistedApp, Pointer, RDF, Utils;
    var Class;
    return {
        setters: [function (App_1) {
            App = App_1;
        }, function (Context_1_1) {
            Context_1 = Context_1_1;
        }, function (Errors_1) {
            Errors = Errors_1;
        }, function (NS_1) {
            NS = NS_1;
        }, function (PersistedApp_1) {
            PersistedApp = PersistedApp_1;
        }, function (Pointer_1) {
            Pointer = Pointer_1;
        }, function (RDF_1) {
            RDF = RDF_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            Class = function () {
                function Class(context) {
                    this.context = context;
                }
                Class.prototype.getContext = function (pointerOrURI) {
                    var _this = this;
                    var pointer = !Utils.isString(pointerOrURI) ? pointerOrURI : null;
                    var uri = !!pointer ? pointer.id : pointerOrURI;
                    if (!uri) return Promise.reject(new Errors.IllegalArgumentError("The application's URI must be defined."));
                    return this.resolveURI(uri).then(function (appURI) {
                        pointer = _this.context.documents.getPointer(appURI);
                        return pointer.resolve();
                    }).then(function (_a) {
                        var app = _a[0],
                            response = _a[1];
                        if (!PersistedApp.Factory.is(app)) throw new Errors.IllegalArgumentError("The resource fetched is not a " + NS.CS.Class.Application + ".");
                        return new Context_1.default(_this.context, app);
                    });
                };
                Class.prototype.getAllContexts = function () {
                    var _this = this;
                    return this.resolveURI("").then(function (appsContainerURI) {
                        if (!_this.context.auth || !_this.context.auth.isAuthenticated()) return _this.context.documents.getMembers(_this.getContainerURI(), false);
                        var agentID = _this.context.auth.authenticatedAgent.id;
                        return _this.context.documents.executeSELECTQuery(agentID, "\n\t\t\t\tSELECT ?app WHERE {\n\t\t\t\t\t<" + agentID + "> <" + NS.C.Predicate.appRoleMap + "> ?roleMap.\n\t\t\t\t\t?roleMap <" + NS.C.Predicate.entry + "> ?appEntry.\n\t\t\t\t\t?appEntry <" + NS.C.Predicate.key + "> ?app.\n\t\t\t\t}\n\t\t\t").then(function (_a) {
                            var results = _a[0],
                                response = _a[1];
                            var apps = results.bindings.map(function (binding) {
                                return binding["app"];
                            });
                            return Pointer.Util.resolveAll(apps);
                        });
                    }).then(function (_a) {
                        var apps = _a[0],
                            response = _a[1];
                        return apps.map(function (app) {
                            return new Context_1.default(_this.context, app);
                        });
                    });
                };
                Class.prototype.create = function (appDocument, slug) {
                    var _this = this;
                    if (slug === void 0) {
                        slug = null;
                    }
                    return this.resolveURI("").then(function (appsContainerURI) {
                        if (!App.Factory.is(appDocument)) throw new Errors.IllegalArgumentError("The Document is not a `Carbon.App.Class` object.");
                        return _this.context.documents.createChild(appsContainerURI, appDocument, slug);
                    });
                };
                Class.prototype.delete = function (appURI, requestOptions) {
                    var _this = this;
                    if (!appURI) return Promise.reject(new Errors.IllegalArgumentError("The application's URI must be defined."));
                    return this.resolveURI(appURI).then(function (uri) {
                        return _this.context.documents.delete(uri, requestOptions);
                    });
                };
                Class.prototype.resolveURI = function (appURI) {
                    var _this = this;
                    return new Promise(function (resolve) {
                        var containerURI = _this.context.resolve(_this.getContainerURI());
                        var uri = RDF.URI.Util.resolve(containerURI, appURI);
                        if (!RDF.URI.Util.isBaseOf(containerURI, uri)) throw new Errors.IllegalArgumentError("The URI provided is not a valid app of the current context.");
                        resolve(uri);
                    });
                };
                Class.prototype.getContainerURI = function () {
                    if (!this.context.hasSetting("platform.apps.container")) throw new Errors.IllegalStateError("The apps container URI hasn't been set.");
                    return this.context.getSetting("platform.apps.container");
                };
                return Class;
            }();
            exports_1("Class", Class);
            exports_1("default", Class);
        }
    };
});
$__System.register("b", ["c"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var SDKContext;
    var AbstractContext;
    return {
        setters: [function (SDKContext_1) {
            SDKContext = SDKContext_1;
        }],
        execute: function () {
            AbstractContext = function (_super) {
                __extends(AbstractContext, _super);
                // TODO: Make the property `auth:Auth.Class` abstract. In TSC 2.0 https://github.com/Microsoft/TypeScript/issues/4669;
                function AbstractContext(parentContext) {
                    if (parentContext === void 0) {
                        parentContext = null;
                    }
                    _super.call(this);
                    this._parentContext = !!parentContext ? parentContext : SDKContext.instance;
                    this.generalObjectSchema = null;
                    this.typeObjectSchemaMap = new Map();
                }
                Object.defineProperty(AbstractContext.prototype, "parentContext", {
                    get: function () {
                        return this._parentContext;
                    },
                    enumerable: true,
                    configurable: true
                });
                ;
                return AbstractContext;
            }(SDKContext.Class);
            exports_1("default", AbstractContext);
        }
    };
});
$__System.register("d", ["e"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Agents;
    var Class;
    return {
        setters: [function (Agents_1) {
            Agents = Agents_1;
        }],
        execute: function () {
            Class = function (_super) {
                __extends(Class, _super);
                function Class(appContext) {
                    _super.call(this, appContext);
                }
                Class.prototype.get = function (agentURI, requestOptions) {
                    return _super.prototype.get.call(this, agentURI, requestOptions);
                };
                return Class;
            }(Agents.Class);
            exports_1("Class", Class);
            exports_1("default", Class);
        }
    };
});
$__System.register("f", ["4", "10", "5", "6", "11", "12"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Context_1, AppRole, Errors, NS, PersistedAppRole, Roles_1;
    var Class;
    return {
        setters: [function (Context_1_1) {
            Context_1 = Context_1_1;
        }, function (AppRole_1) {
            AppRole = AppRole_1;
        }, function (Errors_1) {
            Errors = Errors_1;
        }, function (NS_1) {
            NS = NS_1;
        }, function (PersistedAppRole_1) {
            PersistedAppRole = PersistedAppRole_1;
        }, function (Roles_1_1) {
            Roles_1 = Roles_1_1;
        }],
        execute: function () {
            Class = function (_super) {
                __extends(Class, _super);
                function Class(appContext) {
                    if (!(appContext instanceof Context_1.default)) throw new Errors.NotImplementedError("The context provided is not a AppContext.");
                    _super.call(this, appContext);
                }
                Class.prototype.createChild = function (parentRole, role, slugOrRequestOptions, requestOptions) {
                    if (!AppRole.Factory.is(role)) return Promise.reject(new Errors.IllegalArgumentError("The role is not a valid `Carbon.App.Role.Class` object."));
                    return _super.prototype.createChild.call(this, parentRole, role, slugOrRequestOptions, requestOptions);
                };
                Class.prototype.get = function (roleURI, requestOptions) {
                    return _super.prototype.get.call(this, roleURI, requestOptions).then(function (_a) {
                        var role = _a[0],
                            response = _a[1];
                        if (!PersistedAppRole.Factory.is(role)) throw new Errors.IllegalArgumentError("The resource fetched is not a " + NS.CS.Class.AppRole);
                        return [role, response];
                    });
                };
                return Class;
            }(Roles_1.default);
            exports_1("Class", Class);
            exports_1("default", Class);
        }
    };
});
$__System.register("13", ["d", "f", "14"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Agents_1, Roles_1, Auth_1;
    var Class;
    return {
        setters: [function (Agents_1_1) {
            Agents_1 = Agents_1_1;
        }, function (Roles_1_1) {
            Roles_1 = Roles_1_1;
        }, function (Auth_1_1) {
            Auth_1 = Auth_1_1;
        }],
        execute: function () {
            Class = function (_super) {
                __extends(Class, _super);
                function Class(appContext) {
                    _super.call(this, appContext);
                    this.roles = new Roles_1.default(appContext);
                    this.agents = new Agents_1.default(appContext);
                }
                return Class;
            }(Auth_1.default);
            exports_1("Class", Class);
            exports_1("default", Class);
        }
    };
});
$__System.register("4", ["b", "13", "9"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var AbstractContext_1, Auth_1, RDF;
    var Class;
    return {
        setters: [function (AbstractContext_1_1) {
            AbstractContext_1 = AbstractContext_1_1;
        }, function (Auth_1_1) {
            Auth_1 = Auth_1_1;
        }, function (RDF_1) {
            RDF = RDF_1;
        }],
        execute: function () {
            Class = function (_super) {
                __extends(Class, _super);
                function Class(parentContext, app) {
                    _super.call(this, parentContext);
                    this.auth = new Auth_1.default(this);
                    this._app = app;
                    this.base = this.getBase(this.app);
                    // Reassign the rootContainer pointer because the previous one was created in the SDKContext and this one must be resolved by this context.
                    this.documents.removePointer(app.rootContainer);
                    app.rootContainer = this.documents.getPointer(app.rootContainer.id);
                }
                Object.defineProperty(Class.prototype, "app", {
                    get: function () {
                        return this._app;
                    },
                    enumerable: true,
                    configurable: true
                });
                ;
                Class.prototype.resolve = function (uri) {
                    if (RDF.URI.Util.isAbsolute(uri)) return uri;
                    var finalURI = this.parentContext.resolve(this.base);
                    return RDF.URI.Util.resolve(finalURI, uri);
                };
                Class.prototype.getBase = function (resource) {
                    return resource.rootContainer.id;
                };
                return Class;
            }(AbstractContext_1.default);
            exports_1("Class", Class);
            exports_1("default", Class);
        }
    };
});
$__System.register("3", ["15", "6", "a", "16", "11", "10", "f", "4"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Document, NS, Utils, IllegalArgumentError_1, PersistedRole, Role, Roles, Context_1;
    var RDF_CLASS, SCHEMA, Factory;
    return {
        setters: [function (Document_1) {
            Document = Document_1;
        }, function (NS_1) {
            NS = NS_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }, function (IllegalArgumentError_1_1) {
            IllegalArgumentError_1 = IllegalArgumentError_1_1;
        }, function (PersistedRole_1) {
            PersistedRole = PersistedRole_1;
        }, function (Role_1) {
            Role = Role_1;
        }, function (Roles_1) {
            Roles = Roles_1;
        }, function (Context_1_1) {
            Context_1 = Context_1_1;
        }],
        execute: function () {
            exports_1("RDF_CLASS", RDF_CLASS = NS.CS.Class.Application);
            // TODO Problem with circular reference: The SCHEMA is hardcoded in SDKContext module
            exports_1("SCHEMA", SCHEMA = {
                "name": {
                    "@id": NS.CS.Predicate.namae,
                    "@type": NS.XSD.DataType.string
                },
                "description": {
                    "@id": NS.CS.Predicate.description,
                    "@type": NS.XSD.DataType.string
                },
                "rootContainer": {
                    "@id": NS.CS.Predicate.rootContainer,
                    "@type": "@id"
                },
                "allowsOrigins": {
                    "@id": NS.CS.Predicate.allowsOrigin,
                    "@container": "@set"
                }
            });
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (resource) {
                    return Utils.hasPropertyDefined(resource, "name");
                };
                Factory.is = function (object) {
                    return Document.Factory.hasClassProperties(object) && Factory.hasClassProperties(object) && object.hasType(RDF_CLASS);
                };
                Factory.create = function (name, description) {
                    return Factory.createFrom({}, name, description);
                };
                Factory.createFrom = function (object, name, description) {
                    if (!Document.Factory.hasClassProperties(object)) object = Document.Factory.createFrom(object);
                    if (!Utils.isString(name) || !name) throw new IllegalArgumentError_1.default("The name cannot be empty.");
                    var app = object;
                    app.name = name;
                    app.types.push(NS.CS.Class.Application);
                    if (!!description) app.description = description;
                    return app;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
            exports_1("Context", Context_1.default);
            exports_1("PersistedRole", PersistedRole);
            exports_1("Role", Role);
            exports_1("Roles", Roles);
        }
    };
});
$__System.register("7", ["3", "17", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var App, PersistedProtectedDocument, Utils;
    var Factory;
    return {
        setters: [function (App_1) {
            App = App_1;
        }, function (PersistedProtectedDocument_1) {
            PersistedProtectedDocument = PersistedProtectedDocument_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (resource) {
                    return Utils.hasPropertyDefined(resource, "rootContainer");
                };
                Factory.is = function (object) {
                    return App.Factory.is(object) && PersistedProtectedDocument.Factory.is(object) && Factory.hasClassProperties(object);
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("18", ["e"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Agents;
    var Class;
    return {
        setters: [function (Agents_1) {
            Agents = Agents_1;
        }],
        execute: function () {
            Class = function (_super) {
                __extends(Class, _super);
                function Class(appContext) {
                    _super.call(this, appContext);
                }
                Class.prototype.get = function (agentURI, requestOptions) {
                    return _super.prototype.get.call(this, agentURI, requestOptions);
                };
                return Class;
            }(Agents.Class);
            exports_1("Class", Class);
            exports_1("default", Class);
        }
    };
});
$__System.register("19", ["18", "14", "5"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Agents, Auth, Errors;
    var Class;
    return {
        setters: [function (Agents_1) {
            Agents = Agents_1;
        }, function (Auth_1) {
            Auth = Auth_1;
        }, function (Errors_1) {
            Errors = Errors_1;
        }],
        execute: function () {
            Class = function (_super) {
                __extends(Class, _super);
                function Class(platformContext) {
                    _super.call(this, platformContext);
                    this.agents = new Agents.Class(platformContext);
                }
                Object.defineProperty(Class.prototype, "roles", {
                    get: function () {
                        throw new Errors.NotImplementedError("Currently there is no support for Platform Roles");
                    },
                    set: function (role) {},
                    enumerable: true,
                    configurable: true
                });
                return Class;
            }(Auth.Class);
            exports_1("Class", Class);
            exports_1("default", Class);
        }
    };
});
$__System.register("1a", ["19"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Auth;
    return {
        setters: [function (Auth_1) {
            Auth = Auth_1;
        }],
        execute: function () {
            exports_1("Auth", Auth);
        }
    };
});
$__System.register("1b", ["14"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Auth;
    var defaultSettings;
    return {
        setters: [function (Auth_1) {
            Auth = Auth_1;
        }],
        execute: function () {
            exports_1("defaultSettings", defaultSettings = {
                "domain": "carbonldp.com",
                "http.ssl": true,
                "auth.method": Auth.Method.TOKEN,
                "platform.container": "platform/",
                "platform.apps.container": "apps/",
                "platform.agents.container": "agents/",
                "platform.roles.container": "roles/",
                "vocabulary": "vocabulary/#"
            });
            exports_1("default", defaultSettings);
        }
    };
});
$__System.register("1c", ["a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Utils;
    var ValueTypes, Factory;
    return {
        setters: [function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            ValueTypes = function () {
                function ValueTypes() {}
                Object.defineProperty(ValueTypes, "URI", {
                    get: function () {
                        return "uri";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ValueTypes, "LITERAL", {
                    get: function () {
                        return "literal";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ValueTypes, "BNODE", {
                    get: function () {
                        return "bnode";
                    },
                    enumerable: true,
                    configurable: true
                });
                return ValueTypes;
            }();
            exports_1("ValueTypes", ValueTypes);
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (value) {
                    return Utils.hasPropertyDefined(value, "head");
                };
                Factory.is = function (value) {
                    return Utils.isObject(value) && Factory.hasClassProperties(value);
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("1d", [], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    return {
        setters: [],
        execute: function () {}
    };
});
$__System.register("1e", ["1f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var HTTPError_1;
    var name, statusCode, BadRequestError;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }],
        execute: function () {
            name = "BadRequestError";
            statusCode = 400;
            BadRequestError = function (_super) {
                __extends(BadRequestError, _super);
                function BadRequestError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(BadRequestError, "statusCode", {
                    get: function () {
                        return statusCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BadRequestError.prototype, "name", {
                    get: function () {
                        return name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return BadRequestError;
            }(HTTPError_1.default);
            exports_1("default", BadRequestError);
        }
    };
});
$__System.register("20", ["1f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var HTTPError_1;
    var name, statusCode, ConflictError;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }],
        execute: function () {
            name = "ConflictError";
            statusCode = 409;
            ConflictError = function (_super) {
                __extends(ConflictError, _super);
                function ConflictError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(ConflictError, "statusCode", {
                    get: function () {
                        return statusCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ConflictError.prototype, "name", {
                    get: function () {
                        return name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return ConflictError;
            }(HTTPError_1.default);
            exports_1("default", ConflictError);
        }
    };
});
$__System.register("21", ["1f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var HTTPError_1;
    var name, statusCode, ForbiddenError;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }],
        execute: function () {
            name = "ForbiddenError";
            statusCode = 403;
            ForbiddenError = function (_super) {
                __extends(ForbiddenError, _super);
                function ForbiddenError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(ForbiddenError, "statusCode", {
                    get: function () {
                        return statusCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ForbiddenError.prototype, "name", {
                    get: function () {
                        return name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return ForbiddenError;
            }(HTTPError_1.default);
            exports_1("default", ForbiddenError);
        }
    };
});
$__System.register("22", ["1f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var HTTPError_1;
    var name, statusCode, MethodNotAllowedError;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }],
        execute: function () {
            name = "MethodNotAllowedError";
            statusCode = 405;
            MethodNotAllowedError = function (_super) {
                __extends(MethodNotAllowedError, _super);
                function MethodNotAllowedError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(MethodNotAllowedError, "statusCode", {
                    get: function () {
                        return statusCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MethodNotAllowedError.prototype, "name", {
                    get: function () {
                        return name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return MethodNotAllowedError;
            }(HTTPError_1.default);
            exports_1("default", MethodNotAllowedError);
        }
    };
});
$__System.register("23", ["1f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var HTTPError_1;
    var name, statusCode, NotAcceptableError;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }],
        execute: function () {
            name = "NotAcceptableError";
            statusCode = 406;
            NotAcceptableError = function (_super) {
                __extends(NotAcceptableError, _super);
                function NotAcceptableError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(NotAcceptableError, "statusCode", {
                    get: function () {
                        return statusCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NotAcceptableError.prototype, "name", {
                    get: function () {
                        return name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return NotAcceptableError;
            }(HTTPError_1.default);
            exports_1("default", NotAcceptableError);
        }
    };
});
$__System.register("24", ["1f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var HTTPError_1;
    var name, statusCode, NotFoundError;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }],
        execute: function () {
            name = "NotFoundError";
            statusCode = 404;
            NotFoundError = function (_super) {
                __extends(NotFoundError, _super);
                function NotFoundError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(NotFoundError, "statusCode", {
                    get: function () {
                        return statusCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NotFoundError.prototype, "name", {
                    get: function () {
                        return name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return NotFoundError;
            }(HTTPError_1.default);
            exports_1("default", NotFoundError);
        }
    };
});
$__System.register("25", ["1f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var HTTPError_1;
    var name, statusCode, PreconditionFailedError;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }],
        execute: function () {
            name = "PreconditionFailedError";
            statusCode = 412;
            PreconditionFailedError = function (_super) {
                __extends(PreconditionFailedError, _super);
                function PreconditionFailedError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(PreconditionFailedError, "statusCode", {
                    get: function () {
                        return statusCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PreconditionFailedError.prototype, "name", {
                    get: function () {
                        return name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return PreconditionFailedError;
            }(HTTPError_1.default);
            exports_1("default", PreconditionFailedError);
        }
    };
});
$__System.register("26", ["1f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var HTTPError_1;
    var name, statusCode, PreconditionRequiredError;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }],
        execute: function () {
            name = "PreconditionRequiredError";
            statusCode = 428;
            PreconditionRequiredError = function (_super) {
                __extends(PreconditionRequiredError, _super);
                function PreconditionRequiredError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(PreconditionRequiredError, "statusCode", {
                    get: function () {
                        return statusCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PreconditionRequiredError.prototype, "name", {
                    get: function () {
                        return name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return PreconditionRequiredError;
            }(HTTPError_1.default);
            exports_1("default", PreconditionRequiredError);
        }
    };
});
$__System.register("27", ["1f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var HTTPError_1;
    var name, statusCode, RequestEntityTooLargeError;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }],
        execute: function () {
            name = "RequestEntityTooLargeError";
            statusCode = 413;
            RequestEntityTooLargeError = function (_super) {
                __extends(RequestEntityTooLargeError, _super);
                function RequestEntityTooLargeError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(RequestEntityTooLargeError, "statusCode", {
                    get: function () {
                        return statusCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RequestEntityTooLargeError.prototype, "name", {
                    get: function () {
                        return name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return RequestEntityTooLargeError;
            }(HTTPError_1.default);
            exports_1("default", RequestEntityTooLargeError);
        }
    };
});
$__System.register("28", ["1f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var HTTPError_1;
    var name, statusCode, RequestHeaderFieldsTooLargeError;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }],
        execute: function () {
            name = "RequestHeaderFieldsTooLargeError";
            statusCode = 431;
            RequestHeaderFieldsTooLargeError = function (_super) {
                __extends(RequestHeaderFieldsTooLargeError, _super);
                function RequestHeaderFieldsTooLargeError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(RequestHeaderFieldsTooLargeError, "statusCode", {
                    get: function () {
                        return statusCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RequestHeaderFieldsTooLargeError.prototype, "name", {
                    get: function () {
                        return name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return RequestHeaderFieldsTooLargeError;
            }(HTTPError_1.default);
            exports_1("default", RequestHeaderFieldsTooLargeError);
        }
    };
});
$__System.register("29", ["1f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var HTTPError_1;
    var name, statusCode, RequestURITooLongError;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }],
        execute: function () {
            name = "RequestURITooLongError";
            statusCode = 414;
            RequestURITooLongError = function (_super) {
                __extends(RequestURITooLongError, _super);
                function RequestURITooLongError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(RequestURITooLongError, "statusCode", {
                    get: function () {
                        return statusCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RequestURITooLongError.prototype, "name", {
                    get: function () {
                        return name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return RequestURITooLongError;
            }(HTTPError_1.default);
            exports_1("default", RequestURITooLongError);
        }
    };
});
$__System.register("2a", ["1f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var HTTPError_1;
    var name, statusCode, TooManyRequestsError;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }],
        execute: function () {
            name = "TooManyRequestsError";
            statusCode = 429;
            TooManyRequestsError = function (_super) {
                __extends(TooManyRequestsError, _super);
                function TooManyRequestsError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(TooManyRequestsError, "statusCode", {
                    get: function () {
                        return statusCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TooManyRequestsError.prototype, "name", {
                    get: function () {
                        return name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return TooManyRequestsError;
            }(HTTPError_1.default);
            exports_1("default", TooManyRequestsError);
        }
    };
});
$__System.register("2b", ["1f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var HTTPError_1;
    var name, statusCode, UnauthorizedError;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }],
        execute: function () {
            name = "UnauthorizedError";
            statusCode = 401;
            UnauthorizedError = function (_super) {
                __extends(UnauthorizedError, _super);
                function UnauthorizedError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(UnauthorizedError, "statusCode", {
                    get: function () {
                        return statusCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(UnauthorizedError.prototype, "name", {
                    get: function () {
                        return name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return UnauthorizedError;
            }(HTTPError_1.default);
            exports_1("default", UnauthorizedError);
        }
    };
});
$__System.register("2c", ["1f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var HTTPError_1;
    var name, statusCode, UnsupportedMediaTypeError;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }],
        execute: function () {
            name = "UnsupportedMediaTypeError";
            statusCode = 415;
            UnsupportedMediaTypeError = function (_super) {
                __extends(UnsupportedMediaTypeError, _super);
                function UnsupportedMediaTypeError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(UnsupportedMediaTypeError, "statusCode", {
                    get: function () {
                        return statusCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(UnsupportedMediaTypeError.prototype, "name", {
                    get: function () {
                        return name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return UnsupportedMediaTypeError;
            }(HTTPError_1.default);
            exports_1("default", UnsupportedMediaTypeError);
        }
    };
});
$__System.register("2d", ["1f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var HTTPError_1;
    var name, statusCode, Class;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }],
        execute: function () {
            name = "BadResponseError";
            statusCode = 0;
            Class = function (_super) {
                __extends(Class, _super);
                function Class() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(Class, "statusCode", {
                    get: function () {
                        return statusCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class.prototype, "name", {
                    get: function () {
                        return name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return Class;
            }(HTTPError_1.default);
            exports_1("default", Class);
        }
    };
});
$__System.register("2e", ["1f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var HTTPError_1;
    var name, statusCode, BadGatewayError;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }],
        execute: function () {
            name = "BadGatewayError";
            statusCode = 502;
            BadGatewayError = function (_super) {
                __extends(BadGatewayError, _super);
                function BadGatewayError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(BadGatewayError, "statusCode", {
                    get: function () {
                        return statusCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BadGatewayError.prototype, "name", {
                    get: function () {
                        return name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return BadGatewayError;
            }(HTTPError_1.default);
            exports_1("default", BadGatewayError);
        }
    };
});
$__System.register("2f", ["1f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var HTTPError_1;
    var name, statusCode, GatewayTimeoutError;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }],
        execute: function () {
            name = "GatewayTimeoutError";
            statusCode = 504;
            GatewayTimeoutError = function (_super) {
                __extends(GatewayTimeoutError, _super);
                function GatewayTimeoutError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(GatewayTimeoutError, "statusCode", {
                    get: function () {
                        return statusCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(GatewayTimeoutError.prototype, "name", {
                    get: function () {
                        return name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return GatewayTimeoutError;
            }(HTTPError_1.default);
            exports_1("default", GatewayTimeoutError);
        }
    };
});
$__System.register("30", ["1f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var HTTPError_1;
    var name, statusCode, HTTPVersionNotSupportedError;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }],
        execute: function () {
            name = "HTTPVersionNotSupportedError";
            statusCode = 505;
            HTTPVersionNotSupportedError = function (_super) {
                __extends(HTTPVersionNotSupportedError, _super);
                function HTTPVersionNotSupportedError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(HTTPVersionNotSupportedError, "statusCode", {
                    get: function () {
                        return statusCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(HTTPVersionNotSupportedError.prototype, "name", {
                    get: function () {
                        return name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return HTTPVersionNotSupportedError;
            }(HTTPError_1.default);
            exports_1("default", HTTPVersionNotSupportedError);
        }
    };
});
$__System.register("31", ["1f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var HTTPError_1;
    var name, statusCode, InternalServerErrorError;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }],
        execute: function () {
            name = "InternalServerErrorError";
            statusCode = 500;
            InternalServerErrorError = function (_super) {
                __extends(InternalServerErrorError, _super);
                function InternalServerErrorError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(InternalServerErrorError, "statusCode", {
                    get: function () {
                        return statusCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(InternalServerErrorError.prototype, "name", {
                    get: function () {
                        return name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return InternalServerErrorError;
            }(HTTPError_1.default);
            exports_1("default", InternalServerErrorError);
        }
    };
});
$__System.register("32", ["1f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var HTTPError_1;
    var name, statusCode, NotImplementedError;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }],
        execute: function () {
            name = "NotImplementedError";
            statusCode = 501;
            NotImplementedError = function (_super) {
                __extends(NotImplementedError, _super);
                function NotImplementedError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(NotImplementedError, "statusCode", {
                    get: function () {
                        return statusCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NotImplementedError.prototype, "name", {
                    get: function () {
                        return name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return NotImplementedError;
            }(HTTPError_1.default);
            exports_1("default", NotImplementedError);
        }
    };
});
$__System.register("33", ["1f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var HTTPError_1;
    var name, statusCode, ServiceUnavailableError;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }],
        execute: function () {
            name = "ServiceUnavailableError";
            statusCode = 503;
            ServiceUnavailableError = function (_super) {
                __extends(ServiceUnavailableError, _super);
                function ServiceUnavailableError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(ServiceUnavailableError, "statusCode", {
                    get: function () {
                        return statusCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ServiceUnavailableError.prototype, "name", {
                    get: function () {
                        return name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return ServiceUnavailableError;
            }(HTTPError_1.default);
            exports_1("default", ServiceUnavailableError);
        }
    };
});
$__System.register("1f", ["34", "35"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var AbstractError_1, Resource;
    var HTTPError;
    return {
        setters: [function (AbstractError_1_1) {
            AbstractError_1 = AbstractError_1_1;
        }, function (Resource_1) {
            Resource = Resource_1;
        }],
        execute: function () {
            HTTPError = function (_super) {
                __extends(HTTPError, _super);
                function HTTPError(message, response) {
                    _super.call(this, message);
                    Resource.Factory.createFrom(this);
                    this.errors = [];
                    this.requestID = null;
                    this.response = response;
                    this.statusCode = response.status;
                }
                Object.defineProperty(HTTPError, "statusCode", {
                    get: function () {
                        return null;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(HTTPError.prototype, "name", {
                    get: function () {
                        return "HTTPError";
                    },
                    enumerable: true,
                    configurable: true
                });
                return HTTPError;
            }(AbstractError_1.default);
            exports_1("default", HTTPError);
        }
    };
});
$__System.register("36", ["1f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var HTTPError_1;
    var name, UnknownError;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }],
        execute: function () {
            name = "UnknownError";
            UnknownError = function (_super) {
                __extends(UnknownError, _super);
                function UnknownError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(UnknownError.prototype, "name", {
                    get: function () {
                        return name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return UnknownError;
            }(HTTPError_1.default);
            exports_1("default", UnknownError);
        }
    };
});
$__System.register("37", ["1f", "1e", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "36"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var HTTPError_1, BadRequestError_1, ConflictError_1, ForbiddenError_1, MethodNotAllowedError_1, NotAcceptableError_1, NotFoundError_1, PreconditionFailedError_1, PreconditionRequiredError_1, RequestEntityTooLargeError_1, RequestHeaderFieldsTooLargeError_1, RequestURITooLongError_1, TooManyRequestsError_1, UnauthorizedError_1, UnsupportedMediaTypeError_1, BadResponseError_1, BadGatewayError_1, GatewayTimeoutError_1, HTTPVersionNotSupportedError_1, InternalServerErrorError_1, NotImplementedError_1, ServiceUnavailableError_1, UnknownError_1;
    var client, server, statusCodeMap;
    return {
        setters: [function (HTTPError_1_1) {
            HTTPError_1 = HTTPError_1_1;
        }, function (BadRequestError_1_1) {
            BadRequestError_1 = BadRequestError_1_1;
        }, function (ConflictError_1_1) {
            ConflictError_1 = ConflictError_1_1;
        }, function (ForbiddenError_1_1) {
            ForbiddenError_1 = ForbiddenError_1_1;
        }, function (MethodNotAllowedError_1_1) {
            MethodNotAllowedError_1 = MethodNotAllowedError_1_1;
        }, function (NotAcceptableError_1_1) {
            NotAcceptableError_1 = NotAcceptableError_1_1;
        }, function (NotFoundError_1_1) {
            NotFoundError_1 = NotFoundError_1_1;
        }, function (PreconditionFailedError_1_1) {
            PreconditionFailedError_1 = PreconditionFailedError_1_1;
        }, function (PreconditionRequiredError_1_1) {
            PreconditionRequiredError_1 = PreconditionRequiredError_1_1;
        }, function (RequestEntityTooLargeError_1_1) {
            RequestEntityTooLargeError_1 = RequestEntityTooLargeError_1_1;
        }, function (RequestHeaderFieldsTooLargeError_1_1) {
            RequestHeaderFieldsTooLargeError_1 = RequestHeaderFieldsTooLargeError_1_1;
        }, function (RequestURITooLongError_1_1) {
            RequestURITooLongError_1 = RequestURITooLongError_1_1;
        }, function (TooManyRequestsError_1_1) {
            TooManyRequestsError_1 = TooManyRequestsError_1_1;
        }, function (UnauthorizedError_1_1) {
            UnauthorizedError_1 = UnauthorizedError_1_1;
        }, function (UnsupportedMediaTypeError_1_1) {
            UnsupportedMediaTypeError_1 = UnsupportedMediaTypeError_1_1;
        }, function (BadResponseError_1_1) {
            BadResponseError_1 = BadResponseError_1_1;
        }, function (BadGatewayError_1_1) {
            BadGatewayError_1 = BadGatewayError_1_1;
        }, function (GatewayTimeoutError_1_1) {
            GatewayTimeoutError_1 = GatewayTimeoutError_1_1;
        }, function (HTTPVersionNotSupportedError_1_1) {
            HTTPVersionNotSupportedError_1 = HTTPVersionNotSupportedError_1_1;
        }, function (InternalServerErrorError_1_1) {
            InternalServerErrorError_1 = InternalServerErrorError_1_1;
        }, function (NotImplementedError_1_1) {
            NotImplementedError_1 = NotImplementedError_1_1;
        }, function (ServiceUnavailableError_1_1) {
            ServiceUnavailableError_1 = ServiceUnavailableError_1_1;
        }, function (UnknownError_1_1) {
            UnknownError_1 = UnknownError_1_1;
        }],
        execute: function () {
            client = [];
            client.push(BadRequestError_1.default);
            client.push(ConflictError_1.default);
            client.push(ForbiddenError_1.default);
            client.push(MethodNotAllowedError_1.default);
            client.push(NotAcceptableError_1.default);
            client.push(NotFoundError_1.default);
            client.push(PreconditionFailedError_1.default);
            client.push(PreconditionRequiredError_1.default);
            client.push(RequestEntityTooLargeError_1.default);
            client.push(RequestHeaderFieldsTooLargeError_1.default);
            client.push(RequestURITooLongError_1.default);
            client.push(TooManyRequestsError_1.default);
            client.push(UnauthorizedError_1.default);
            client.push(UnsupportedMediaTypeError_1.default);
            server = [];
            server.push(BadResponseError_1.default);
            server.push(BadGatewayError_1.default);
            server.push(GatewayTimeoutError_1.default);
            server.push(HTTPVersionNotSupportedError_1.default);
            server.push(InternalServerErrorError_1.default);
            server.push(NotImplementedError_1.default);
            server.push(ServiceUnavailableError_1.default);
            statusCodeMap = new Map();
            for (var i = 0, length = client.length; i < length; i++) {
                statusCodeMap.set(client[i].statusCode, client[i]);
            }
            for (var i = 0, length = server.length; i < length; i++) {
                statusCodeMap.set(server[i].statusCode, server[i]);
            }
            exports_1("Error", HTTPError_1.default);
            exports_1("BadRequestError", BadRequestError_1.default);
            exports_1("ConflictError", ConflictError_1.default);
            exports_1("ForbiddenError", ForbiddenError_1.default);
            exports_1("MethodNotAllowedError", MethodNotAllowedError_1.default);
            exports_1("NotAcceptableError", NotAcceptableError_1.default);
            exports_1("NotFoundError", NotFoundError_1.default);
            exports_1("PreconditionFailedError", PreconditionFailedError_1.default);
            exports_1("PreconditionRequiredError", PreconditionRequiredError_1.default);
            exports_1("RequestEntityTooLargeError", RequestEntityTooLargeError_1.default);
            exports_1("RequestHeaderFieldsTooLargeError", RequestHeaderFieldsTooLargeError_1.default);
            exports_1("RequestURITooLongError", RequestURITooLongError_1.default);
            exports_1("TooManyRequestsError", TooManyRequestsError_1.default);
            exports_1("UnauthorizedError", UnauthorizedError_1.default);
            exports_1("UnsupportedMediaTypeError", UnsupportedMediaTypeError_1.default);
            exports_1("BadResponseError", BadResponseError_1.default);
            exports_1("BadGatewayError", BadGatewayError_1.default);
            exports_1("GatewayTimeoutError", GatewayTimeoutError_1.default);
            exports_1("HTTPVersionNotSupportedError", HTTPVersionNotSupportedError_1.default);
            exports_1("InternalServerErrorError", InternalServerErrorError_1.default);
            exports_1("NotImplementedError", NotImplementedError_1.default);
            exports_1("ServiceUnavailableError", ServiceUnavailableError_1.default);
            exports_1("UnknownError", UnknownError_1.default);
            exports_1("client", client);
            exports_1("server", server);
            exports_1("statusCodeMap", statusCodeMap);
        }
    };
});
$__System.register("38", [], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Method;
    return {
        setters: [],
        execute: function () {
            (function (Method) {
                Method[Method["OPTIONS"] = 0] = "OPTIONS";
                Method[Method["HEAD"] = 1] = "HEAD";
                Method[Method["GET"] = 2] = "GET";
                Method[Method["POST"] = 3] = "POST";
                Method[Method["PUT"] = 4] = "PUT";
                Method[Method["PATCH"] = 5] = "PATCH";
                Method[Method["DELETE"] = 6] = "DELETE";
            })(Method || (Method = {}));
            exports_1("default", Method);
        }
    };
});
$__System.register("39", ["3a", "3b"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var JSONParser_1, Processor_1;
    var Class;
    return {
        setters: [function (JSONParser_1_1) {
            JSONParser_1 = JSONParser_1_1;
        }, function (Processor_1_1) {
            Processor_1 = Processor_1_1;
        }],
        execute: function () {
            Class = function () {
                function Class() {}
                Class.prototype.parse = function (input) {
                    var jsonParser = new JSONParser_1.default();
                    return jsonParser.parse(input).then(function (parsedObject) {
                        return Processor_1.default.expand(parsedObject);
                    });
                };
                return Class;
            }();
            exports_1("Class", Class);
            exports_1("default", Class);
        }
    };
});
$__System.register("3c", ["6"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var NS;
    var RDF_CLASS, SCHEMA;
    return {
        setters: [function (NS_1) {
            NS = NS_1;
        }],
        execute: function () {
            exports_1("RDF_CLASS", RDF_CLASS = NS.C.Class.API);
            exports_1("SCHEMA", SCHEMA = {
                "version": {
                    "@id": NS.C.Predicate.version,
                    "@type": NS.XSD.DataType.string
                },
                "buildDate": {
                    "@id": NS.C.Predicate.buildDate,
                    "@type": NS.XSD.DataType.dateTime
                }
            });
        }
    };
});
$__System.register("3d", ["3e", "6"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var LDP, NS;
    var RDF_CLASS, Factory;
    return {
        setters: [function (LDP_1) {
            LDP = LDP_1;
        }, function (NS_1) {
            NS = NS_1;
        }],
        execute: function () {
            exports_1("RDF_CLASS", RDF_CLASS = NS.C.Class.AccessPoint);
            Factory = function () {
                function Factory() {}
                Factory.is = function (object) {
                    return LDP.DirectContainer.Factory.is(object);
                };
                Factory.create = function (membershipResource, hasMemberRelation, isMemberOfRelation) {
                    return Factory.createFrom({}, membershipResource, hasMemberRelation, isMemberOfRelation);
                };
                Factory.createFrom = function (object, membershipResource, hasMemberRelation, isMemberOfRelation) {
                    return LDP.DirectContainer.Factory.createFrom(object, membershipResource, hasMemberRelation, isMemberOfRelation);
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("10", ["6", "3f", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var NS, Role, Utils;
    var RDF_CLASS, SCHEMA, Factory;
    return {
        setters: [function (NS_1) {
            NS = NS_1;
        }, function (Role_1) {
            Role = Role_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            exports_1("RDF_CLASS", RDF_CLASS = NS.CS.Class.AppRole);
            exports_1("SCHEMA", SCHEMA = {
                "parentRole": {
                    "@id": NS.CS.Predicate.parentRole,
                    "@type": "@id"
                },
                "childRoles": {
                    "@id": NS.CS.Predicate.childRole,
                    "@type": "@id",
                    "@container": "@set"
                }
            });
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (resource) {
                    return Utils.isObject(resource);
                };
                Factory.is = function (object) {
                    return Role.Factory.is(object) && object.hasType(RDF_CLASS);
                };
                Factory.create = function (name) {
                    return Factory.createFrom({}, name);
                };
                Factory.createFrom = function (object, name) {
                    var role = Role.Factory.createFrom(object, name);
                    role.types.push(NS.CS.Class.AppRole);
                    return role;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("11", ["10", "40", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var AppRole, PersistedRole, Utils;
    var Factory;
    return {
        setters: [function (AppRole_1) {
            AppRole = AppRole_1;
        }, function (PersistedRole_1) {
            PersistedRole = PersistedRole_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (object) {
                    return Utils.hasPropertyDefined(object, "_roles");
                };
                Factory.is = function (object) {
                    return Factory.hasClassProperties(object) && AppRole.Factory.is(object) && PersistedRole.Factory.is(object);
                };
                Factory.decorate = function (object, roles) {
                    var role = object;
                    if (Factory.hasClassProperties(role)) return role;
                    PersistedRole.Factory.decorate(role, roles);
                    return role;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("e", ["41", "5", "42"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Agent, Errors, URI;
    var Class;
    return {
        setters: [function (Agent_1) {
            Agent = Agent_1;
        }, function (Errors_1) {
            Errors = Errors_1;
        }, function (URI_1) {
            URI = URI_1;
        }],
        execute: function () {
            Class = function () {
                function Class(context) {
                    this.context = context;
                }
                Class.prototype.register = function (agentDocument, slug) {
                    var _this = this;
                    if (slug === void 0) {
                        slug = null;
                    }
                    return this.resolveURI("").then(function (containerURI) {
                        if (!Agent.Factory.is(agentDocument)) throw new Errors.IllegalArgumentError("The Document is not a cs:Agent object.");
                        return _this.context.documents.createChild(containerURI, agentDocument, slug);
                    });
                };
                Class.prototype.get = function (agentURI, requestOptions) {
                    var _this = this;
                    return this.resolveURI(agentURI).then(function (uri) {
                        return _this.context.documents.get(uri, requestOptions);
                    });
                };
                Class.prototype.enable = function (agentURI, requestOptions) {
                    return this.changeEnabledStatus(agentURI, true, requestOptions);
                };
                Class.prototype.disable = function (agentURI, requestOptions) {
                    return this.changeEnabledStatus(agentURI, false, requestOptions);
                };
                Class.prototype.delete = function (agentURI, requestOptions) {
                    var _this = this;
                    return this.resolveURI(agentURI).then(function (uri) {
                        return _this.context.documents.delete(uri, requestOptions);
                    });
                };
                Class.prototype.changeEnabledStatus = function (agentURI, value, requestOptions) {
                    var getResponse;
                    return this.get(agentURI, requestOptions).then(function (_a) {
                        var agent = _a[0],
                            response = _a[1];
                        getResponse = response;
                        agent.enabled = value;
                        return agent.save();
                    }).then(function (_a) {
                        var agent = _a[0],
                            response = _a[1];
                        return [agent, [getResponse, response]];
                    });
                };
                Class.prototype.resolveURI = function (agentURI) {
                    var _this = this;
                    return new Promise(function (resolve) {
                        var containerURI = _this.context.resolve(_this.getContainerURI());
                        var uri = URI.Util.resolve(containerURI, agentURI);
                        if (!URI.Util.isBaseOf(containerURI, uri)) throw new Errors.IllegalArgumentError("The URI provided is not a valid agent of the current context.");
                        resolve(uri);
                    });
                };
                Class.prototype.getContainerURI = function () {
                    if (!this.context.hasSetting("platform.agents.container")) throw new Errors.IllegalStateError("The agents container URI hasn't been set.");
                    return this.context.getSetting("platform.agents.container");
                };
                return Class;
            }();
            exports_1("Class", Class);
            exports_1("default", Class);
        }
    };
});
$__System.register("43", [], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    return {
        setters: [],
        execute: function () {}
    };
});
$__System.register("44", [], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    return {
        setters: [],
        execute: function () {}
    };
});
$__System.register("45", [], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    return {
        setters: [],
        execute: function () {}
    };
});
$__System.register("46", ["6", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var NS, Utils;
    var RDF_CLASS, SCHEMA, Factory;
    return {
        setters: [function (NS_1) {
            NS = NS_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            exports_1("RDF_CLASS", RDF_CLASS = NS.CS.Class.AccessControlEntry);
            exports_1("SCHEMA", SCHEMA = {
                "granting": {
                    "@id": NS.CS.Predicate.granting,
                    "@type": NS.XSD.DataType.boolean
                },
                "permissions": {
                    "@id": NS.CS.Predicate.permission,
                    "@type": "@id",
                    "@container": "@set"
                },
                "subjects": {
                    "@id": NS.CS.Predicate.subject,
                    "@type": "@id",
                    "@container": "@set"
                },
                "subjectsClass": {
                    "@id": NS.CS.Predicate.subjectClass,
                    "@type": "@id"
                }
            });
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (object) {
                    return Utils.hasPropertyDefined(object, "granting") && Utils.hasPropertyDefined(object, "permissions") && Utils.hasPropertyDefined(object, "subjects") && Utils.hasPropertyDefined(object, "subjectsClass");
                };
                Factory.createFrom = function (object, granting, subjects, subjectClass, permissions) {
                    var ace = object;
                    if (!ace.types) ace.types = [];
                    ace.types.push(RDF_CLASS);
                    ace.granting = granting;
                    ace.subjects = subjects;
                    ace.subjectsClass = subjectClass;
                    ace.permissions = permissions;
                    return ace;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("47", ["46", "6", "8", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var ACE, NS, Pointer, Utils;
    var RDF_CLASS, SCHEMA, Factory;
    function parsePointer(element) {
        return Pointer.Factory.is(element) ? element : Pointer.Factory.create(element);
    }
    function parsePointers(elements) {
        var _this = this;
        var elementsArray = Utils.isArray(elements) ? elements : [elements];
        return elementsArray.map(function (element) {
            return _this._parsePointer(element);
        });
    }
    function configACE(granting, subject, subjectClass, permissions, aces) {
        var subjectACEs = aces.filter(function (ace) {
            return ace.subjects.length === 1 && ace.granting === granting && Pointer.Util.areEqual(ace.subjects[0], subject);
        });
        var ace;
        if (subjectACEs.length === 0) {
            ace = ACE.Factory.createFrom(this.createFragment(), granting, [subject], subjectClass, []);
            aces.push(ace);
        } else {
            ace = subjectACEs[0];
        }
        Array.prototype.push.apply(ace.permissions, permissions);
        return ace;
    }
    function configACEs(granting, subjects, subjectsClass, permissions, aces) {
        var subjectPointers = parsePointers.call(this, subjects);
        var subjectClassPointer = this._parsePointer(subjectsClass);
        var permissionPointers = parsePointers.call(this, permissions);
        for (var _i = 0, subjectPointers_1 = subjectPointers; _i < subjectPointers_1.length; _i++) {
            var subject = subjectPointers_1[_i];
            removePermissionsFrom.call(this, subject, permissionPointers, aces);
            configACE.call(this, granting, subject, subjectClassPointer, permissionPointers, aces);
        }
    }
    function grant(subjects, subjectsClass, permissions) {
        var acl = this;
        acl.entries = acl.entries || [];
        configACEs.call(this, true, subjects, subjectsClass, permissions, acl.entries);
    }
    function deny(subjects, subjectsClass, permissions) {
        var acl = this;
        acl.entries = acl.entries || [];
        configACEs.call(this, false, subjects, subjectsClass, permissions, acl.entries);
    }
    function configureChildInheritance(granting, subjects, subjectsClass, permissions) {
        var acl = this;
        acl.inheritableEntries = acl.inheritableEntries || [];
        configACEs.call(this, granting, subjects, subjectsClass, permissions, acl.inheritableEntries);
    }
    function grantingFrom(subject, permission, aces) {
        var subjectACEs = aces.filter(function (ace) {
            return Utils.A.indexOf(ace.subjects, subject, Pointer.Util.areEqual) !== -1;
        });
        for (var _i = 0, subjectACEs_1 = subjectACEs; _i < subjectACEs_1.length; _i++) {
            var ace = subjectACEs_1[_i];
            if (Utils.A.indexOf(ace.permissions, permission, Pointer.Util.areEqual) !== -1) return ace.granting;
        }
        return null;
    }
    function getGranting(subject, permission, aces) {
        if (!aces) return null;
        var subjectPointer = this._parsePointer(subject);
        var permissionPointer = this._parsePointer(permission);
        return grantingFrom(subjectPointer, permissionPointer, aces);
    }
    function grants(subject, permission) {
        var acl = this;
        return getGranting.call(this, subject, permission, acl.entries);
    }
    function denies(subject, permission) {
        var acl = this;
        var granting = getGranting.call(this, subject, permission, acl.entries);
        return granting === null ? null : !granting;
    }
    function getChildInheritance(subject, permission) {
        var acl = this;
        return getGranting.call(this, subject, permission, acl.inheritableEntries);
    }
    function removePermissionsFrom(subject, permissions, aces) {
        if (!aces) return;
        var acl = this;
        var opposedAces = acl.entries === aces ? acl.inheritableEntries : acl.entries;
        var subjectACEs = aces.filter(function (ace) {
            return Utils.A.indexOf(ace.subjects, subject, Pointer.Util.areEqual) !== -1;
        });
        for (var _i = 0, subjectACEs_2 = subjectACEs; _i < subjectACEs_2.length; _i++) {
            var ace = subjectACEs_2[_i];
            if (opposedAces && Utils.A.indexOf(opposedAces, ace, Pointer.Util.areEqual) !== -1) {
                aces.splice(Utils.A.indexOf(aces, ace, Pointer.Util.areEqual), 1);
                var newACE = configACE.call(this, ace.granting, subject, ace.subjectsClass, ace.permissions, aces);
                subjectACEs.push(newACE);
                continue;
            }
            if (ace.subjects.length > 1) {
                ace.subjects.splice(Utils.A.indexOf(ace.subjects, subject, Pointer.Util.areEqual), 1);
                var newACE = configACE.call(this, ace.granting, subject, ace.subjectsClass, ace.permissions, aces);
                subjectACEs.push(newACE);
                continue;
            }
            for (var _a = 0, permissions_1 = permissions; _a < permissions_1.length; _a++) {
                var permission = permissions_1[_a];
                var index = Utils.A.indexOf(ace.permissions, permission, Pointer.Util.areEqual);
                if (index === -1) continue;
                ace.permissions.splice(index, 1);
            }
            if (ace.permissions.length === 0) {
                aces.splice(Utils.A.indexOf(aces, ace, Pointer.Util.areEqual), 1);
                acl._removeFragment(ace);
            }
        }
    }
    function removePermissions(subject, permissions, aces) {
        var subjectPointer = this._parsePointer(subject);
        var permissionPointers = parsePointers.call(this, permissions);
        removePermissionsFrom.call(this, subjectPointer, permissionPointers, aces);
    }
    function remove(subject, permissions) {
        var acl = this;
        removePermissions.call(this, subject, permissions, acl.entries);
    }
    function removeChildInheritance(subject, permissions) {
        var acl = this;
        removePermissions.call(this, subject, permissions, acl.inheritableEntries);
    }
    return {
        setters: [function (ACE_1) {
            ACE = ACE_1;
        }, function (NS_1) {
            NS = NS_1;
        }, function (Pointer_1) {
            Pointer = Pointer_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            exports_1("RDF_CLASS", RDF_CLASS = NS.CS.Class.AccessControlList);
            exports_1("SCHEMA", SCHEMA = {
                "entries": {
                    "@id": NS.CS.Predicate.accessControlEntry,
                    "@type": "@id",
                    "@container": "@set"
                },
                "accessTo": {
                    "@id": NS.CS.Predicate.accessTo,
                    "@type": "@id"
                },
                "inheritableEntries": {
                    "@id": NS.CS.Predicate.inheritableEntry,
                    "@type": "@id",
                    "@container": "@set"
                }
            });
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (object) {
                    return Utils.hasPropertyDefined(object, "accessTo") && Utils.hasFunction(object, "_parsePointer") && Utils.hasFunction(object, "grant") && Utils.hasFunction(object, "deny") && Utils.hasFunction(object, "configureChildInheritance") && Utils.hasFunction(object, "grants") && Utils.hasFunction(object, "denies") && Utils.hasFunction(object, "getChildInheritance") && Utils.hasFunction(object, "remove") && Utils.hasFunction(object, "removeChildInheritance");
                };
                Factory.decorate = function (object) {
                    var acl = object;
                    if (Factory.hasClassProperties(acl)) return acl;
                    Object.defineProperties(acl, {
                        "_parsePointer": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: parsePointer
                        },
                        "grant": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: grant
                        },
                        "deny": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: deny
                        },
                        "configureChildInheritance": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: configureChildInheritance
                        },
                        "grants": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: grants
                        },
                        "denies": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: denies
                        },
                        "getChildInheritance": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: getChildInheritance
                        },
                        "remove": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: remove
                        },
                        "removeChildInheritance": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: removeChildInheritance
                        }
                    });
                    return acl;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("48", ["47", "8", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var ACL, Pointer, Utils;
    var Factory;
    function parsePointer(element) {
        return Pointer.Factory.is(element) ? element : this.getPointer(element);
    }
    return {
        setters: [function (ACL_1) {
            ACL = ACL_1;
        }, function (Pointer_1) {
            Pointer = Pointer_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (object) {
                    return Utils.hasPropertyDefined(object, "accessTo");
                };
                Factory.decorate = function (document) {
                    var acl = ACL.Factory.decorate(document);
                    Object.defineProperties(acl, {
                        "_parsePointer": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: parsePointer
                        }
                    });
                    return acl;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("41", ["15", "16", "6", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Document, IllegalArgumentError_1, NS, Utils;
    var RDF_CLASS, SCHEMA, Factory;
    return {
        setters: [function (Document_1) {
            Document = Document_1;
        }, function (IllegalArgumentError_1_1) {
            IllegalArgumentError_1 = IllegalArgumentError_1_1;
        }, function (NS_1) {
            NS = NS_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            exports_1("RDF_CLASS", RDF_CLASS = NS.CS.Class.Agent);
            exports_1("SCHEMA", SCHEMA = {
                "name": {
                    "@id": NS.CS.Predicate.namae,
                    "@type": NS.XSD.DataType.string
                },
                "email": {
                    "@id": NS.VCARD.Predicate.email,
                    "@type": NS.XSD.DataType.string
                },
                "password": {
                    "@id": NS.CS.Predicate.password,
                    "@type": NS.XSD.DataType.string
                },
                "enabled": {
                    "@id": NS.CS.Predicate.enabled,
                    "@type": NS.XSD.DataType.boolean
                },
                "platformRoles": {
                    "@id": NS.CS.Predicate.platformRole,
                    "@type": "@id",
                    "@container": "@set"
                }
            });
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (object) {
                    return Utils.hasPropertyDefined(object, "name") && Utils.hasPropertyDefined(object, "email") && Utils.hasPropertyDefined(object, "password");
                };
                Factory.is = function (object) {
                    return Factory.hasClassProperties(object) && Document.Factory.hasClassProperties(object) && object.hasType(RDF_CLASS);
                };
                Factory.create = function (name, email, password) {
                    return Factory.createFrom({}, name, email, password);
                };
                Factory.createFrom = function (object, name, email, password) {
                    if (!Document.Factory.hasClassProperties(object)) object = Document.Factory.createFrom(object);
                    if (!name) throw new IllegalArgumentError_1.default("The name cannot be empty.");
                    if (!email) throw new IllegalArgumentError_1.default("The email cannot be empty.");
                    if (!password) throw new IllegalArgumentError_1.default("The password cannot be empty.");
                    var app = object;
                    app.name = name;
                    app.email = email;
                    app.password = password;
                    app.types.push(NS.CS.Class.Agent);
                    return app;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("49", ["41", "17", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Agent, PersistedProtectedDocument, Utils;
    var Factory;
    function enable() {
        this.enabled = true;
        return this.save();
    }
    function disable() {
        this.enabled = false;
        return this.save();
    }
    return {
        setters: [function (Agent_1) {
            Agent = Agent_1;
        }, function (PersistedProtectedDocument_1) {
            PersistedProtectedDocument = PersistedProtectedDocument_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (object) {
                    return Utils.hasPropertyDefined(object, "name") && Utils.hasPropertyDefined(object, "email") && Utils.hasPropertyDefined(object, "enabled") && Utils.hasFunction(object, "enable") && Utils.hasFunction(object, "disable");
                };
                Factory.is = function (object) {
                    return Factory.hasClassProperties(object) && PersistedProtectedDocument.Factory.is(object) && object.hasType(Agent.RDF_CLASS);
                };
                Factory.decorate = function (object) {
                    var agent = object;
                    if (Factory.hasClassProperties(agent)) return agent;
                    if (!PersistedProtectedDocument.Factory.hasClassProperties(agent)) PersistedProtectedDocument.Factory.decorate(agent);
                    Object.defineProperties(agent, {
                        "enable": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: enable
                        },
                        "disable": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: disable
                        }
                    });
                    return agent;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("3f", ["a", "15", "6", "16"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Utils, Document, NS, IllegalArgumentError_1;
    var SCHEMA, Factory;
    return {
        setters: [function (Utils_1) {
            Utils = Utils_1;
        }, function (Document_1) {
            Document = Document_1;
        }, function (NS_1) {
            NS = NS_1;
        }, function (IllegalArgumentError_1_1) {
            IllegalArgumentError_1 = IllegalArgumentError_1_1;
        }],
        execute: function () {
            exports_1("SCHEMA", SCHEMA = {
                "name": {
                    "@id": NS.CS.Predicate.namae,
                    "@type": NS.XSD.DataType.string
                },
                "agents": {
                    "@id": NS.CS.Predicate.agent,
                    "@type": "@id",
                    "@container": "@set"
                }
            });
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (object) {
                    return Utils.hasPropertyDefined(object, "name");
                };
                Factory.is = function (object) {
                    return Factory.hasClassProperties(object) && Document.Factory.is(object);
                };
                Factory.create = function (name) {
                    return Factory.createFrom({}, name);
                };
                Factory.createFrom = function (object, name) {
                    if (!Document.Factory.hasClassProperties(object)) object = Document.Factory.createFrom(object);
                    if (!name) throw new IllegalArgumentError_1.default("The name cannot be empty.");
                    var role = object;
                    role.name = name;
                    return role;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("40", ["5", "17", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Errors, PersistedProtectedDocument, Utils;
    var Factory;
    function createChild(role, slugOrRequestOptions, requestOptions) {
        checkState.call(this);
        return this._roles.createChild(this.id, role, slugOrRequestOptions, requestOptions);
    }
    function listAgents(requestOptions) {
        checkState.call(this);
        return this._roles.listAgents(this.id, requestOptions);
    }
    function getAgents(retrievalPreferencesOrRequestOptions, requestOptions) {
        checkState.call(this);
        return this._roles.getAgents(this.id, retrievalPreferencesOrRequestOptions, requestOptions);
    }
    function addAgent(agent, requestOptions) {
        checkState.call(this);
        return this._roles.addAgents(this.id, [agent], requestOptions);
    }
    function addAgents(agents, requestOptions) {
        checkState.call(this);
        return this._roles.addAgents(this.id, agents, requestOptions);
    }
    function removeAgent(agent, requestOptions) {
        checkState.call(this);
        return this._roles.removeAgents(this.id, [agent], requestOptions);
    }
    function removeAgents(agents, requestOptions) {
        checkState.call(this);
        return this._roles.removeAgents(this.id, agents, requestOptions);
    }
    function checkState() {
        if (!this._roles) throw new Errors.IllegalStateError("The context of the current role, does not support roles management.");
    }
    return {
        setters: [function (Errors_1) {
            Errors = Errors_1;
        }, function (PersistedProtectedDocument_1) {
            PersistedProtectedDocument = PersistedProtectedDocument_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (object) {
                    return Utils.hasPropertyDefined(object, "_roles") && Utils.hasFunction(object, "createChild") && Utils.hasFunction(object, "listAgents") && Utils.hasFunction(object, "getAgents") && Utils.hasFunction(object, "addAgent") && Utils.hasFunction(object, "addAgents") && Utils.hasFunction(object, "removeAgent") && Utils.hasFunction(object, "removeAgents");
                };
                Factory.is = function (object) {
                    return Factory.hasClassProperties(object) && PersistedProtectedDocument.Factory.is(object);
                };
                Factory.decorate = function (object, roles) {
                    var role = object;
                    if (Factory.hasClassProperties(role)) return role;
                    if (!PersistedProtectedDocument.Factory.hasClassProperties(role)) PersistedProtectedDocument.Factory.decorate(role);
                    Object.defineProperties(role, {
                        "_roles": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: roles
                        },
                        "createChild": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: createChild
                        },
                        "listAgents": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: listAgents
                        },
                        "getAgents": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: getAgents
                        },
                        "addAgent": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: addAgent
                        },
                        "addAgents": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: addAgents
                        },
                        "removeAgent": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: removeAgent
                        },
                        "removeAgents": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: removeAgents
                        }
                    });
                    return role;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("12", ["5", "4a", "17", "40", "42", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Errors, HTTP, PersistedProtectedDocument, PersistedRole, URI, Utils;
    var Class;
    return {
        setters: [function (Errors_1) {
            Errors = Errors_1;
        }, function (HTTP_1) {
            HTTP = HTTP_1;
        }, function (PersistedProtectedDocument_1) {
            PersistedProtectedDocument = PersistedProtectedDocument_1;
        }, function (PersistedRole_1) {
            PersistedRole = PersistedRole_1;
        }, function (URI_1) {
            URI = URI_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            Class = function () {
                function Class(context) {
                    this.context = context;
                }
                Class.prototype.createChild = function (parentRole, role, slugOrRequestOptions, requestOptions) {
                    var _this = this;
                    var parentURI = Utils.isString(parentRole) ? parentRole : parentRole.id;
                    var slug = Utils.isString(slugOrRequestOptions) ? slugOrRequestOptions : null;
                    requestOptions = HTTP.Request.Util.isOptions(slugOrRequestOptions) ? slugOrRequestOptions : requestOptions;
                    var containerURI;
                    var persistedRole;
                    var responseCreated;
                    return this.resolveURI("").then(function (uri) {
                        containerURI = uri;
                        parentURI = URI.Util.resolve(containerURI, parentURI);
                        if (!URI.Util.isBaseOf(containerURI, parentURI)) throw new Errors.IllegalArgumentError("The parent role provided is not a valid role of the current context.");
                        return _this.context.documents.exists(parentURI);
                    }).then(function (_a) {
                        var exists = _a[0],
                            response = _a[1];
                        if (!exists) throw new Errors.IllegalArgumentError("The parent role provided does not exist.");
                        return _this.context.documents.createChild(containerURI, role, slug, requestOptions);
                    }).then(function (_a) {
                        var newRole = _a[0],
                            response = _a[1];
                        responseCreated = response;
                        persistedRole = PersistedRole.Factory.decorate(newRole, _this);
                        return _this.context.documents.addMember(parentURI, newRole);
                    }).then(function (response) {
                        return [persistedRole, responseCreated];
                    });
                };
                Class.prototype.get = function (roleURI, requestOptions) {
                    var _this = this;
                    return this.resolveURI(roleURI).then(function (uri) {
                        return _this.context.documents.get(uri, requestOptions);
                    });
                };
                Class.prototype.listAgents = function (roleURI, requestOptions) {
                    var _this = this;
                    return this.getAgentsAccessPoint(roleURI).then(function (agentsAccessPoint) {
                        return _this.context.documents.listMembers(agentsAccessPoint.id, requestOptions);
                    }).then(function (_a) {
                        var agents = _a[0],
                            response = _a[1];
                        return [agents.map(function (agent) {
                            return PersistedProtectedDocument.Factory.decorate(agent);
                        }), response];
                    });
                };
                Class.prototype.getAgents = function (roleURI, retrievalPreferencesOrRequestOptions, requestOptions) {
                    var _this = this;
                    return this.getAgentsAccessPoint(roleURI).then(function (agentsAccessPoint) {
                        return _this.context.documents.getMembers(agentsAccessPoint.id, retrievalPreferencesOrRequestOptions, requestOptions);
                    });
                };
                Class.prototype.addAgent = function (roleURI, agent, requestOptions) {
                    return this.addAgents(roleURI, [agent], requestOptions);
                };
                Class.prototype.addAgents = function (roleURI, agents, requestOptions) {
                    var _this = this;
                    return this.getAgentsAccessPoint(roleURI).then(function (agentsAccessPoint) {
                        return _this.context.documents.addMembers(agentsAccessPoint.id, agents, requestOptions);
                    });
                };
                Class.prototype.removeAgent = function (roleURI, agent, requestOptions) {
                    return this.removeAgents(roleURI, [agent], requestOptions);
                };
                Class.prototype.removeAgents = function (roleURI, agents, requestOptions) {
                    var _this = this;
                    return this.getAgentsAccessPoint(roleURI).then(function (agentsAccessPoint) {
                        return _this.context.documents.removeMembers(agentsAccessPoint.id, agents, requestOptions);
                    });
                };
                Class.prototype.resolveURI = function (agentURI) {
                    var _this = this;
                    return new Promise(function (resolve) {
                        var containerURI = _this.context.resolve(_this.getContainerURI());
                        var uri = URI.Util.resolve(containerURI, agentURI);
                        if (!URI.Util.isBaseOf(containerURI, uri)) throw new Errors.IllegalArgumentError("The URI provided is not a valid role of the current context.");
                        resolve(uri);
                    });
                };
                // TODO: Optimize
                Class.prototype.getAgentsAccessPoint = function (roleURI) {
                    var _this = this;
                    return this.resolveURI(roleURI).then(function (uri) {
                        return _this.context.documents.executeSELECTQuery(uri, " select distinct ?agentsAccessPoint where {\n\t\t\t\t<" + uri + "> <https://carbonldp.com/ns/v1/platform#accessPoint> ?agentsAccessPoint .\n\t\t\t\t?agentsAccessPoint <http://www.w3.org/ns/ldp#hasMemberRelation> <https://carbonldp.com/ns/v1/security#agent> .\n\t\t\t}");
                    }).then(function (_a) {
                        var selectResults = _a[0],
                            response = _a[1];
                        return selectResults.bindings[0]["agentsAccessPoint"];
                    });
                };
                Class.prototype.getContainerURI = function () {
                    if (!this.context.hasSetting("platform.roles.container")) throw new Errors.IllegalStateError("The roles container setting hasn't been declared.");
                    return this.context.getSetting("platform.roles.container");
                };
                return Class;
            }();
            exports_1("Class", Class);
            exports_1("default", Class);
        }
    };
});
$__System.register("4b", [], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Class;
    return {
        setters: [],
        execute: function () {
            Class = function () {
                function Class(username, password) {
                    this._username = username;
                    this._password = password;
                }
                Object.defineProperty(Class.prototype, "username", {
                    get: function () {
                        return this._username;
                    },
                    enumerable: true,
                    configurable: true
                });
                ;
                Object.defineProperty(Class.prototype, "password", {
                    get: function () {
                        return this._password;
                    },
                    enumerable: true,
                    configurable: true
                });
                ;
                return Class;
            }();
            exports_1("Class", Class);
            exports_1("default", Class);
        }
    };
});
$__System.register("4c", ["4a", "5", "4b"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var HTTP, Errors, UsernameAndPasswordCredentials;
    var Class;
    function toB64(str) {
        return typeof btoa !== "undefined" ? btoa(str) : new Buffer(str).toString("base64");
    }
    return {
        setters: [function (HTTP_1) {
            HTTP = HTTP_1;
        }, function (Errors_1) {
            Errors = Errors_1;
        }, function (UsernameAndPasswordCredentials_1) {
            UsernameAndPasswordCredentials = UsernameAndPasswordCredentials_1;
        }],
        execute: function () {
            Class = function () {
                function Class() {}
                Class.prototype.isAuthenticated = function () {
                    return !!this.credentials;
                };
                Class.prototype.authenticate = function (authenticationToken) {
                    var _this = this;
                    if (authenticationToken === null) throw new Errors.IllegalArgumentError("The authenticationToken cannot be null.");
                    return new Promise(function (resolve, reject) {
                        if (!authenticationToken.username) throw new Errors.IllegalArgumentError("The username cannot be empty.");
                        if (!authenticationToken.password) throw new Errors.IllegalArgumentError("The password cannot be empty.");
                        _this.credentials = new UsernameAndPasswordCredentials.Class(authenticationToken.username, authenticationToken.password);
                        resolve(_this.credentials);
                    });
                };
                Class.prototype.addAuthentication = function (requestOptions) {
                    if (!this.isAuthenticated()) throw new Errors.IllegalStateError("The authenticator isn't authenticated.");
                    var headers = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map();
                    this.addBasicAuthenticationHeader(headers);
                    return requestOptions;
                };
                Class.prototype.clearAuthentication = function () {
                    this.credentials = null;
                };
                Class.prototype.addBasicAuthenticationHeader = function (headers) {
                    if (headers.has("authorization")) return;
                    var header = new HTTP.Header.Class();
                    headers.set("authorization", header);
                    var authorization = "Basic " + toB64(this.credentials.username + ":" + this.credentials.password);
                    header.values.push(new HTTP.Header.Value(authorization));
                };
                return Class;
            }();
            exports_1("Class", Class);
            exports_1("default", Class);
        }
    };
});
$__System.register("4d", ["5", "4a", "4e", "3e", "6", "9", "35", "4c", "4f", "50", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Errors, HTTP, JSONLD, LDP, NS, RDF, Resource, BasicAuthenticator_1, UsernameAndPasswordToken_1, Token, Utils;
    var Class;
    return {
        setters: [function (Errors_1) {
            Errors = Errors_1;
        }, function (HTTP_1) {
            HTTP = HTTP_1;
        }, function (JSONLD_1) {
            JSONLD = JSONLD_1;
        }, function (LDP_1) {
            LDP = LDP_1;
        }, function (NS_1) {
            NS = NS_1;
        }, function (RDF_1) {
            RDF = RDF_1;
        }, function (Resource_1) {
            Resource = Resource_1;
        }, function (BasicAuthenticator_1_1) {
            BasicAuthenticator_1 = BasicAuthenticator_1_1;
        }, function (UsernameAndPasswordToken_1_1) {
            UsernameAndPasswordToken_1 = UsernameAndPasswordToken_1_1;
        }, function (Token_1) {
            Token = Token_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            Class = function () {
                function Class(context) {
                    if (context === null) throw new Errors.IllegalArgumentError("context cannot be null");
                    this.context = context;
                    this.basicAuthenticator = new BasicAuthenticator_1.default();
                }
                Class.prototype.isAuthenticated = function () {
                    return !!this._credentials && this._credentials.expirationTime > new Date();
                };
                Class.prototype.authenticate = function (authenticationOrCredentials) {
                    var _this = this;
                    if (authenticationOrCredentials instanceof UsernameAndPasswordToken_1.default) return this.basicAuthenticator.authenticate(authenticationOrCredentials).then(function () {
                        return _this.createToken();
                    }).then(function (_a) {
                        var token = _a[0],
                            response = _a[1];
                        _this.basicAuthenticator.clearAuthentication();
                        _this._credentials = token;
                        return token;
                    });
                    var credentials = authenticationOrCredentials;
                    if (Utils.isString(credentials.expirationTime)) authenticationOrCredentials.expirationTime = new Date(credentials.expirationTime);
                    if (credentials.expirationTime <= new Date()) return Promise.reject(new Errors.IllegalArgumentError("The token provided in not valid."));
                    this._credentials = credentials;
                    return Promise.resolve(credentials);
                };
                Class.prototype.addAuthentication = function (requestOptions) {
                    var headers = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map();
                    this.addTokenAuthenticationHeader(headers);
                    return requestOptions;
                };
                Class.prototype.clearAuthentication = function () {
                    this._credentials = null;
                };
                Class.prototype.createToken = function () {
                    var _this = this;
                    var uri = this.context.resolve(Class.TOKEN_CONTAINER);
                    var requestOptions = {};
                    this.basicAuthenticator.addAuthentication(requestOptions);
                    HTTP.Request.Util.setAcceptHeader("application/ld+json", requestOptions);
                    HTTP.Request.Util.setPreferredInteractionModel(NS.LDP.Class.RDFSource, requestOptions);
                    return HTTP.Request.Service.post(uri, null, requestOptions, new JSONLD.Parser.Class()).then(function (_a) {
                        var expandedResult = _a[0],
                            response = _a[1];
                        var freeNodes = RDF.Node.Util.getFreeNodes(expandedResult);
                        var freeResources = _this.context.documents._getFreeResources(freeNodes);
                        var tokenResources = freeResources.getResources().filter(function (resource) {
                            return Resource.Util.hasType(resource, Token.RDF_CLASS);
                        });
                        if (tokenResources.length === 0) throw new HTTP.Errors.BadResponseError("No '" + Token.RDF_CLASS + "' was returned.", response);
                        if (tokenResources.length > 1) throw new HTTP.Errors.BadResponseError("Multiple '" + Token.RDF_CLASS + "' were returned. ", response);
                        var token = tokenResources[0];
                        var agentDocuments = RDF.Document.Util.getDocuments(expandedResult).filter(function (rdfDocument) {
                            return rdfDocument["@id"] === token.agent.id;
                        });
                        agentDocuments.forEach(function (document) {
                            return _this.context.documents._getPersistedDocument(document, response);
                        });
                        var responseMetadata = freeResources.getResources().find(function (resource) {
                            return Resource.Util.hasType(resource, LDP.ResponseMetadata.RDF_CLASS);
                        });
                        if (!!responseMetadata) responseMetadata.resourcesMetadata.forEach(function (resourceMetadata) {
                            resourceMetadata.resource._etag = resourceMetadata.eTag;
                        });
                        return [token, response];
                    });
                };
                Class.prototype.addTokenAuthenticationHeader = function (headers) {
                    if (headers.has("authorization")) return;
                    var header = new HTTP.Header.Class();
                    headers.set("authorization", header);
                    var authorization = "Token " + this._credentials.key;
                    header.values.push(new HTTP.Header.Value(authorization));
                };
                Class.TOKEN_CONTAINER = "auth-tokens/";
                return Class;
            }();
            exports_1("Class", Class);
            exports_1("default", Class);
        }
    };
});
$__System.register("51", ["6", "8", "35", "42"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var NS, Pointer, Resource, URI;
    var TICKETS_CONTAINER, RDF_CLASS, SCHEMA, Factory;
    return {
        setters: [function (NS_1) {
            NS = NS_1;
        }, function (Pointer_1) {
            Pointer = Pointer_1;
        }, function (Resource_1) {
            Resource = Resource_1;
        }, function (URI_1) {
            URI = URI_1;
        }],
        execute: function () {
            exports_1("TICKETS_CONTAINER", TICKETS_CONTAINER = "auth-tickets/");
            exports_1("RDF_CLASS", RDF_CLASS = NS.CS.Class.Ticket);
            exports_1("SCHEMA", SCHEMA = {
                "forURI": {
                    "@id": NS.CS.Predicate.forIRI,
                    "@type": "@id"
                },
                "expirationTime": {
                    "@id": NS.CS.Predicate.expirationTime,
                    "@type": NS.XSD.DataType.dateTime
                },
                "ticketKey": {
                    "@id": NS.CS.Predicate.ticketKey,
                    "@type": NS.XSD.DataType.string
                }
            });
            Factory = function () {
                function Factory() {}
                Factory.create = function (uri) {
                    return Factory.createFrom(Resource.Factory.create(URI.Util.generateBNodeID()), uri);
                };
                Factory.createFrom = function (object, uri) {
                    var ticket = object;
                    ticket.forURI = Pointer.Factory.create(uri);
                    ticket.types.push(RDF_CLASS);
                    return ticket;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("50", ["6", "35", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var NS, Resource, Utils;
    var RDF_CLASS, SCHEMA, Factory;
    return {
        setters: [function (NS_1) {
            NS = NS_1;
        }, function (Resource_1) {
            Resource = Resource_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            exports_1("RDF_CLASS", RDF_CLASS = NS.CS.Class.Token);
            exports_1("SCHEMA", SCHEMA = {
                "key": {
                    "@id": NS.CS.Predicate.tokenKey,
                    "@type": NS.XSD.DataType.string
                },
                "expirationTime": {
                    "@id": NS.CS.Predicate.expirationTime,
                    "@type": NS.XSD.DataType.dateTime
                },
                "agent": {
                    "@id": NS.CS.Predicate.credentialsOf,
                    "@type": "@id"
                }
            });
            Factory = function () {
                function Factory() {}
                Factory.is = function (value) {
                    return Resource.Factory.is(value) && Factory.hasClassProperties(value);
                };
                Factory.hasClassProperties = function (object) {
                    return Utils.hasPropertyDefined(object, "key") && Utils.hasPropertyDefined(object, "expirationTime") && Utils.hasPropertyDefined(object, "agent");
                };
                Factory.hasRequiredValues = function (object) {
                    return Utils.hasProperty(object, "key") && Utils.hasProperty(object, "expirationTime");
                };
                Factory.decorate = function (object) {
                    if (this.hasClassProperties(object)) return object;
                    return object;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("4f", [], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Class;
    return {
        setters: [],
        execute: function () {
            Class = function () {
                function Class(username, password) {
                    this._username = username;
                    this._password = password;
                }
                Object.defineProperty(Class.prototype, "username", {
                    get: function () {
                        return this._username;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class.prototype, "password", {
                    get: function () {
                        return this._password;
                    },
                    enumerable: true,
                    configurable: true
                });
                return Class;
            }();
            exports_1("Class", Class);
            exports_1("default", Class);
        }
    };
});
$__System.register("52", ["5", "53", "8", "9", "35", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Errors, Converter_1, Pointer, RDF, Resource, Utils;
    var Factory;
    function hasPointer(id) {
        var freeResources = this;
        if (!inLocalScope(id)) {
            return freeResources._documents.hasPointer(id);
        }
        return freeResources.hasResource(id);
    }
    function getPointer(id) {
        var freeResources = this;
        if (!inLocalScope(id)) {
            return freeResources._documents.getPointer(id);
        }
        var resource = freeResources.getResource(id);
        return !resource ? freeResources.createResource(id) : resource;
    }
    function inLocalScope(id) {
        return RDF.URI.Util.isBNodeID(id);
    }
    function inScope(idOrPointer) {
        var freeResources = this;
        var id = Pointer.Factory.is(idOrPointer) ? idOrPointer.id : idOrPointer;
        return inLocalScope(id) || freeResources._documents.inScope(id);
    }
    function hasResource(id) {
        var freeResources = this;
        return freeResources._resourcesIndex.has(id);
    }
    function getResource(id) {
        var freeResources = this;
        return freeResources._resourcesIndex.get(id) || null;
    }
    function getResources() {
        var freeResources = this;
        return Utils.A.from(freeResources._resourcesIndex.values());
    }
    function createResource(id) {
        return this.createResourceFrom({}, id);
    }
    function createResourceFrom(object, id) {
        var freeResources = this;
        if (id) {
            if (!inLocalScope(id)) throw new Errors.IllegalArgumentError("The id \"" + id + "\" is out of scope.");
            if (freeResources._resourcesIndex.has(id)) throw new Errors.IDAlreadyInUseError("The id \"" + id + "\" is already in use by another resource.");
        } else {
            id = RDF.URI.Util.generateBNodeID();
        }
        var resource = Resource.Factory.createFrom(object, id);
        freeResources._resourcesIndex.set(id, resource);
        return resource;
    }
    function toJSON() {
        var generalSchema = this._documents.getGeneralSchema();
        var jsonldConverter = new Converter_1.default();
        var resources = this.getResources();
        var expandedResources = [];
        for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {
            var resource = resources_1[_i];
            expandedResources.push(jsonldConverter.expand(resource, generalSchema, this._documents.getSchemaFor(resource)));
        }
        return JSON.stringify(expandedResources);
    }
    return {
        setters: [function (Errors_1) {
            Errors = Errors_1;
        }, function (Converter_1_1) {
            Converter_1 = Converter_1_1;
        }, function (Pointer_1) {
            Pointer = Pointer_1;
        }, function (RDF_1) {
            RDF = RDF_1;
        }, function (Resource_1) {
            Resource = Resource_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (object) {
                    return Utils.hasPropertyDefined(object, "_documents") && Utils.hasPropertyDefined(object, "_resourcesIndex") && Utils.hasFunction(object, "hasResource") && Utils.hasFunction(object, "getResource") && Utils.hasFunction(object, "getResources") && Utils.hasFunction(object, "createResource") && Utils.hasFunction(object, "createResourceFrom") && Utils.hasFunction(object, "hasPointer") && Utils.hasFunction(object, "getPointer") && Utils.hasFunction(object, "inScope") && Utils.hasFunction(object, "toJSON");
                };
                Factory.create = function (documents) {
                    return Factory.createFrom({}, documents);
                };
                Factory.createFrom = function (object, documents) {
                    var freeResources = Factory.decorate(object);
                    freeResources._documents = documents;
                    return freeResources;
                };
                Factory.decorate = function (object) {
                    if (Factory.hasClassProperties(object)) return object;
                    Object.defineProperties(object, {
                        "_resourcesIndex": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: new Map()
                        },
                        "hasPointer": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: hasPointer
                        },
                        "getPointer": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: getPointer
                        },
                        "inScope": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: inScope
                        },
                        "hasResource": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: hasResource
                        },
                        "getResource": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: getResource
                        },
                        "getResources": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: getResources
                        },
                        "createResource": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: createResource
                        },
                        "createResourceFrom": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: createResourceFrom
                        },
                        "toJSON": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: toJSON
                        }
                    });
                    return object;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("14", ["46", "47", "41", "e", "43", "44", "4c", "45", "48", "49", "3f", "12", "4d", "51", "50", "4f", "5", "52", "4e", "4a", "6", "35", "9", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var ACE, ACL, Agent, Agents, AuthenticationToken_1, Authenticator_1, BasicAuthenticator_1, PersistedACE, PersistedACL, PersistedAgent, Role, Roles, TokenAuthenticator_1, Ticket, Token, UsernameAndPasswordToken_1, Errors, FreeResources, JSONLD, HTTP, NS, Resource, RDF, Utils;
    var Method, Class;
    return {
        setters: [function (ACE_1) {
            ACE = ACE_1;
        }, function (ACL_1) {
            ACL = ACL_1;
        }, function (Agent_1) {
            Agent = Agent_1;
        }, function (Agents_1) {
            Agents = Agents_1;
        }, function (AuthenticationToken_1_1) {
            AuthenticationToken_1 = AuthenticationToken_1_1;
        }, function (Authenticator_1_1) {
            Authenticator_1 = Authenticator_1_1;
        }, function (BasicAuthenticator_1_1) {
            BasicAuthenticator_1 = BasicAuthenticator_1_1;
        }, function (PersistedACE_1) {
            PersistedACE = PersistedACE_1;
        }, function (PersistedACL_1) {
            PersistedACL = PersistedACL_1;
        }, function (PersistedAgent_1) {
            PersistedAgent = PersistedAgent_1;
        }, function (Role_1) {
            Role = Role_1;
        }, function (Roles_1) {
            Roles = Roles_1;
        }, function (TokenAuthenticator_1_1) {
            TokenAuthenticator_1 = TokenAuthenticator_1_1;
        }, function (Ticket_1) {
            Ticket = Ticket_1;
        }, function (Token_1) {
            Token = Token_1;
        }, function (UsernameAndPasswordToken_1_1) {
            UsernameAndPasswordToken_1 = UsernameAndPasswordToken_1_1;
        }, function (Errors_1) {
            Errors = Errors_1;
        }, function (FreeResources_1) {
            FreeResources = FreeResources_1;
        }, function (JSONLD_1) {
            JSONLD = JSONLD_1;
        }, function (HTTP_1) {
            HTTP = HTTP_1;
        }, function (NS_1) {
            NS = NS_1;
        }, function (Resource_1) {
            Resource = Resource_1;
        }, function (RDF_1) {
            RDF = RDF_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            exports_1("ACE", ACE);
            exports_1("ACL", ACL);
            exports_1("Agent", Agent);
            exports_1("Agents", Agents);
            exports_1("AuthenticationToken", AuthenticationToken_1.default);
            exports_1("Authenticator", Authenticator_1.default);
            exports_1("BasicAuthenticator", BasicAuthenticator_1.default);
            exports_1("PersistedACE", PersistedACE);
            exports_1("PersistedACL", PersistedACL);
            exports_1("PersistedAgent", PersistedAgent);
            exports_1("Role", Role);
            exports_1("Roles", Roles);
            exports_1("Ticket", Ticket);
            exports_1("Token", Token);
            exports_1("TokenAuthenticator", TokenAuthenticator_1.default);
            exports_1("UsernameAndPasswordToken", UsernameAndPasswordToken_1.default);
            (function (Method) {
                Method[Method["BASIC"] = 0] = "BASIC";
                Method[Method["TOKEN"] = 1] = "TOKEN";
            })(Method || (Method = {}));
            exports_1("Method", Method);
            Class = function () {
                function Class(context) {
                    this.roles = null;
                    this.agents = null;
                    this.context = context;
                    this.authenticators = [];
                    this.authenticators[Method.BASIC] = new BasicAuthenticator_1.default();
                    this.authenticators[Method.TOKEN] = new TokenAuthenticator_1.default(this.context);
                }
                Object.defineProperty(Class.prototype, "authenticatedAgent", {
                    get: function () {
                        if (!this._authenticatedAgent) {
                            if (this.context.parentContext && this.context.parentContext.auth) return this.context.parentContext.auth.authenticatedAgent;
                            return null;
                        }
                        return this._authenticatedAgent;
                    },
                    enumerable: true,
                    configurable: true
                });
                Class.prototype.isAuthenticated = function (askParent) {
                    if (askParent === void 0) {
                        askParent = true;
                    }
                    return this.authenticator && this.authenticator.isAuthenticated() || askParent && !!this.context.parentContext && !!this.context.parentContext.auth && this.context.parentContext.auth.isAuthenticated();
                };
                Class.prototype.authenticate = function (username, password) {
                    return this.authenticateUsing("TOKEN", username, password);
                };
                Class.prototype.authenticateUsing = function (method, userOrTokenOrCredentials, password) {
                    switch (method) {
                        case "BASIC":
                            return this.authenticateWithBasic(userOrTokenOrCredentials, password);
                        case "TOKEN":
                            return this.authenticateWithToken(userOrTokenOrCredentials, password);
                        default:
                            return Promise.reject(new Errors.IllegalArgumentError("No exists the authentication method '" + method + "'"));
                    }
                };
                Class.prototype.addAuthentication = function (requestOptions) {
                    if (this.isAuthenticated(false)) {
                        this.authenticator.addAuthentication(requestOptions);
                    } else if (!!this.context.parentContext && !!this.context.parentContext.auth) {
                        this.context.parentContext.auth.addAuthentication(requestOptions);
                    } else {
                        console.warn("There is no authentication to add to the request.");
                    }
                };
                Class.prototype.clearAuthentication = function () {
                    if (!this.authenticator) return;
                    this.authenticator.clearAuthentication();
                    this.authenticator = null;
                    this._authenticatedAgent = null;
                };
                Class.prototype.createTicket = function (uri, requestOptions) {
                    var _this = this;
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    var resourceURI = this.context.resolve(uri);
                    var containerURI = this.context.resolve(Ticket.TICKETS_CONTAINER);
                    var freeResources = FreeResources.Factory.create(this.context.documents);
                    Ticket.Factory.createFrom(freeResources.createResource(), resourceURI);
                    if (this.isAuthenticated()) this.addAuthentication(requestOptions);
                    HTTP.Request.Util.setAcceptHeader("application/ld+json", requestOptions);
                    HTTP.Request.Util.setContentTypeHeader("application/ld+json", requestOptions);
                    HTTP.Request.Util.setPreferredInteractionModel(NS.LDP.Class.RDFSource, requestOptions);
                    return HTTP.Request.Service.post(containerURI, freeResources.toJSON(), requestOptions, new JSONLD.Parser.Class()).then(function (_a) {
                        var expandedResult = _a[0],
                            response = _a[1];
                        var freeNodes = RDF.Node.Util.getFreeNodes(expandedResult);
                        var ticketNodes = freeNodes.filter(function (freeNode) {
                            return RDF.Node.Util.hasType(freeNode, Ticket.RDF_CLASS);
                        });
                        if (ticketNodes.length === 0) throw new HTTP.Errors.BadResponseError("No " + Ticket.RDF_CLASS + " was returned.", response);
                        if (ticketNodes.length > 1) throw new HTTP.Errors.BadResponseError("Multiple " + Ticket.RDF_CLASS + " were returned.", response);
                        var expandedTicket = ticketNodes[0];
                        var ticket = Resource.Factory.create();
                        var digestedSchema = _this.context.documents.getSchemaFor(expandedTicket);
                        _this.context.documents.jsonldConverter.compact(expandedTicket, ticket, digestedSchema, _this.context.documents);
                        return [ticket, response];
                    });
                };
                Class.prototype.getAuthenticatedURL = function (uri, requestOptions) {
                    var resourceURI = this.context.resolve(uri);
                    return this.createTicket(resourceURI, requestOptions).then(function (_a) {
                        var ticket = _a[0],
                            response = _a[1];
                        resourceURI += RDF.URI.Util.hasQuery(resourceURI) ? "&" : "?";
                        resourceURI += "ticket=" + ticket.ticketKey;
                        return resourceURI;
                    });
                };
                Class.prototype.authenticateWithBasic = function (username, password) {
                    var _this = this;
                    var authenticator = this.authenticators[Method.BASIC];
                    var authenticationToken;
                    authenticationToken = new UsernameAndPasswordToken_1.default(username, password);
                    this.clearAuthentication();
                    var credentials;
                    return authenticator.authenticate(authenticationToken).then(function (_credentials) {
                        credentials = _credentials;
                        return _this.getAuthenticatedAgent(authenticator);
                    }).then(function (persistedAgent) {
                        _this._authenticatedAgent = persistedAgent;
                        _this.authenticator = authenticator;
                        return credentials;
                    });
                };
                Class.prototype.authenticateWithToken = function (userOrTokenOrCredentials, password) {
                    var _this = this;
                    var authenticator = this.authenticators[Method.TOKEN];
                    var credentials = null;
                    var authenticationToken = null;
                    if (Utils.isString(userOrTokenOrCredentials) && Utils.isString(password)) {
                        authenticationToken = new UsernameAndPasswordToken_1.default(userOrTokenOrCredentials, password);
                    } else if (Token.Factory.hasRequiredValues(userOrTokenOrCredentials)) {
                        credentials = userOrTokenOrCredentials;
                    } else {
                        return Promise.reject(new Errors.IllegalArgumentError("Parameters do not match with the authentication request."));
                    }
                    this.clearAuthentication();
                    return authenticator.authenticate(authenticationToken ? authenticationToken : credentials).then(function (_credentials) {
                        credentials = _credentials;
                        if (PersistedAgent.Factory.is(credentials.agent)) return credentials.agent;
                        return _this.getAuthenticatedAgent(authenticator);
                    }).then(function (persistedAgent) {
                        _this._authenticatedAgent = persistedAgent;
                        credentials.agent = persistedAgent;
                        _this.authenticator = authenticator;
                        return credentials;
                    });
                };
                Class.prototype.getAuthenticatedAgent = function (authenticator) {
                    var requestOptions = {};
                    authenticator.addAuthentication(requestOptions);
                    return this.context.documents.get("agents/me/", requestOptions).then(function (_a) {
                        var agentDocument = _a[0],
                            response = _a[1];
                        return agentDocument;
                    });
                };
                return Class;
            }();
            exports_1("Class", Class);
            exports_1("default", Class);
        }
    };
});
$__System.register("17", ["4a", "14", "6", "54", "35", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var HTTP, Auth, NS, PersistedDocument, Resource, Utils;
    var Factory;
    function getACL(requestOptions) {
        var protectedDocument = this;
        var aclPromise;
        if (protectedDocument.isResolved()) {
            aclPromise = Promise.resolve(protectedDocument.accessControlList);
        } else {
            aclPromise = protectedDocument.executeSELECTQuery("SELECT ?acl WHERE {\n\t\t\t<" + protectedDocument.id + "> <" + NS.CS.Predicate.accessControlList + "> ?acl.\n\t\t}").then(function (_a) {
                var results = _a[0],
                    response = _a[1];
                return results.bindings[0]["acl"];
            });
        }
        return aclPromise.then(function (acl) {
            return protectedDocument._documents.get(acl.id, requestOptions);
        }).then(function (_a) {
            var acl = _a[0],
                response = _a[1];
            if (!Resource.Util.hasType(acl, Auth.ACL.RDF_CLASS)) throw new HTTP.Errors.BadResponseError("The response does not contains a " + Auth.ACL.RDF_CLASS + " object.", response);
            return [acl, response];
        });
    }
    return {
        setters: [function (HTTP_1) {
            HTTP = HTTP_1;
        }, function (Auth_1) {
            Auth = Auth_1;
        }, function (NS_1) {
            NS = NS_1;
        }, function (PersistedDocument_1) {
            PersistedDocument = PersistedDocument_1;
        }, function (Resource_1) {
            Resource = Resource_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (object) {
                    return Utils.isObject(object) && Utils.hasFunction(object, "getACL");
                };
                Factory.is = function (object) {
                    return Factory.hasClassProperties(object) && PersistedDocument.Factory.is(object);
                };
                Factory.decorate = function (document) {
                    if (Factory.hasClassProperties(document)) return document;
                    var rdfSource = document;
                    Object.defineProperties(rdfSource, {
                        "getACL": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: getACL
                        }
                    });
                    return rdfSource;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("55", ["16", "56", "57", "42", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var IllegalArgumentError_1, ObjectSchema, XSD, URI, Utils;
    var allowedTypes, Factory, Util;
    return {
        setters: [function (IllegalArgumentError_1_1) {
            IllegalArgumentError_1 = IllegalArgumentError_1_1;
        }, function (ObjectSchema_1) {
            ObjectSchema = ObjectSchema_1;
        }, function (XSD_1) {
            XSD = XSD_1;
        }, function (URI_1) {
            URI = URI_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            allowedTypes = ["numeric", "string", "boolean", "dateTime"];
            Factory = function () {
                function Factory() {}
                Factory.is = function (object) {
                    return Utils.hasPropertyDefined(object, "orderBy") || Utils.hasPropertyDefined(object, "limit") || Utils.hasPropertyDefined(object, "offset");
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
            Util = function () {
                function Util() {}
                Util.stringifyRetrievalPreferences = function (retrievalPreferences, digestedSchema) {
                    var stringPreferences = "";
                    if ("limit" in retrievalPreferences) {
                        stringPreferences += "limit=" + retrievalPreferences.limit;
                    }
                    if ("offset" in retrievalPreferences) {
                        stringPreferences += (stringPreferences ? "&" : "") + "offset=" + retrievalPreferences.offset;
                    }
                    if ("orderBy" in retrievalPreferences && retrievalPreferences.orderBy.length > 0) {
                        stringPreferences += (stringPreferences ? "&" : "") + "orderBy=";
                        var stringOrders = [];
                        for (var _i = 0, _a = retrievalPreferences.orderBy; _i < _a.length; _i++) {
                            var orderBy = _a[_i];
                            var stringOrder = "";
                            if ("@id" in orderBy) {
                                var id = orderBy["@id"];
                                var descending = false;
                                if (id.startsWith("-")) {
                                    descending = true;
                                    id = id.substr(1);
                                }
                                if (!!digestedSchema && URI.Util.isRelative(id)) id = ObjectSchema.Util.resolveURI(id, digestedSchema);
                                stringOrder += (descending ? "-" : "") + "<" + encodeURI(id).replace("#", "%23") + ">";
                            }
                            if ("@type" in orderBy) {
                                if (!stringOrder) throw new IllegalArgumentError_1.default("The @id property is missing in OrderBy property.");
                                var type = orderBy["@type"];
                                if (allowedTypes.indexOf(type) === -1) throw new IllegalArgumentError_1.default("The @type value specified is not valid.");
                                if (type !== "numeric") type = "<" + encodeURI(XSD.DataType[type]).replace("#", "%23") + ">";
                                stringOrder += ";" + type;
                            }
                            if ("@language" in orderBy) {
                                if (!stringOrder) throw new IllegalArgumentError_1.default("The @id property is missing in OrderBy property.");
                                stringOrder += ";" + orderBy["@language"];
                            }
                            stringOrders.push(stringOrder);
                        }
                        stringPreferences += stringOrders.join(",");
                    }
                    return stringPreferences ? "?" + stringPreferences : stringPreferences;
                };
                return Util;
            }();
            exports_1("Util", Util);
        }
    };
});
$__System.register("58", ["5", "4a", "9", "a", "3d", "10", "14", "15", "52", "4e", "11", "54", "17", "59", "8", "6", "56", "3e", "5a", "35", "55"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Errors, HTTP, RDF, Utils, AccessPoint, AppRole, Auth, Document, FreeResources, JSONLD, PersistedAppRole, PersistedDocument, PersistedProtectedDocument, ProtectedDocument, Pointer, NS, ObjectSchema, LDP, SPARQL, Resource, RetrievalPreferences;
    var Documents;
    return {
        setters: [function (Errors_1) {
            Errors = Errors_1;
        }, function (HTTP_1) {
            HTTP = HTTP_1;
        }, function (RDF_1) {
            RDF = RDF_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }, function (AccessPoint_1) {
            AccessPoint = AccessPoint_1;
        }, function (AppRole_1) {
            AppRole = AppRole_1;
        }, function (Auth_1) {
            Auth = Auth_1;
        }, function (Document_1) {
            Document = Document_1;
        }, function (FreeResources_1) {
            FreeResources = FreeResources_1;
        }, function (JSONLD_1) {
            JSONLD = JSONLD_1;
        }, function (PersistedAppRole_1) {
            PersistedAppRole = PersistedAppRole_1;
        }, function (PersistedDocument_1) {
            PersistedDocument = PersistedDocument_1;
        }, function (PersistedProtectedDocument_1) {
            PersistedProtectedDocument = PersistedProtectedDocument_1;
        }, function (ProtectedDocument_1) {
            ProtectedDocument = ProtectedDocument_1;
        }, function (Pointer_1) {
            Pointer = Pointer_1;
        }, function (NS_1) {
            NS = NS_1;
        }, function (ObjectSchema_1) {
            ObjectSchema = ObjectSchema_1;
        }, function (LDP_1) {
            LDP = LDP_1;
        }, function (SPARQL_1) {
            SPARQL = SPARQL_1;
        }, function (Resource_1) {
            Resource = Resource_1;
        }, function (RetrievalPreferences_1) {
            RetrievalPreferences = RetrievalPreferences_1;
        }],
        execute: function () {
            Documents = function () {
                function Documents(context) {
                    if (context === void 0) {
                        context = null;
                    }
                    this.context = context;
                    this.pointers = new Map();
                    this.documentsBeingResolved = new Map();
                    if (!!this.context && !!this.context.parentContext) {
                        var contextJSONLDConverter = this.context.parentContext.documents.jsonldConverter;
                        this._jsonldConverter = new JSONLD.Converter.Class(contextJSONLDConverter.literalSerializers);
                    } else {
                        this._jsonldConverter = new JSONLD.Converter.Class();
                    }
                    var decorators = new Map();
                    if (!!this.context && !!this.context.parentContext) {
                        var parentDecorators = this.context.parentContext.documents.documentDecorators;
                        if (parentDecorators) decorators = this._documentDecorators = Utils.M.extend(decorators, parentDecorators);
                    } else {
                        decorators.set(ProtectedDocument.RDF_CLASS, { decorator: PersistedProtectedDocument.Factory.decorate });
                        decorators.set(Auth.ACL.RDF_CLASS, { decorator: Auth.PersistedACL.Factory.decorate });
                        decorators.set(Auth.Agent.RDF_CLASS, { decorator: Auth.PersistedAgent.Factory.decorate });
                    }
                    decorators.set(AppRole.RDF_CLASS, { decorator: PersistedAppRole.Factory.decorate, parameters: [this.context && this.context.auth ? this.context.auth.roles : null] });
                    this._documentDecorators = decorators;
                }
                Object.defineProperty(Documents.prototype, "jsonldConverter", {
                    get: function () {
                        return this._jsonldConverter;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Documents.prototype, "documentDecorators", {
                    get: function () {
                        return this._documentDecorators;
                    },
                    enumerable: true,
                    configurable: true
                });
                Documents.prototype.inScope = function (idOrPointer) {
                    var id = Pointer.Factory.is(idOrPointer) ? idOrPointer.id : idOrPointer;
                    if (RDF.URI.Util.isBNodeID(id)) return false;
                    if (!!this.context) {
                        if (RDF.URI.Util.isPrefixed(id)) id = ObjectSchema.Digester.resolvePrefixedURI(id, this.context.getObjectSchema());
                        var baseURI = this.context.getBaseURI();
                        if (RDF.URI.Util.isRelative(id)) return true;
                        if (RDF.URI.Util.isBaseOf(baseURI, id)) return true;
                    } else {
                        if (RDF.URI.Util.isAbsolute(id)) return true;
                    }
                    if (!!this.context && !!this.context.parentContext) return this.context.parentContext.documents.inScope(id);
                    return RDF.URI.Util.isRelative(id);
                };
                Documents.prototype.hasPointer = function (id) {
                    id = this.getPointerID(id);
                    if (this.pointers.has(id)) return true;
                    if (!!this.context && !!this.context.parentContext) return this.context.parentContext.documents.hasPointer(id);
                    return false;
                };
                Documents.prototype.getPointer = function (id) {
                    var localID = this.getPointerID(id);
                    if (localID === null) {
                        if (!!this.context && !!this.context.parentContext) return this.context.parentContext.documents.getPointer(id);
                        throw new Errors.IllegalArgumentError("The pointer id is not supported by this module.");
                    }
                    var pointer;
                    if (!this.pointers.has(localID)) {
                        pointer = this.createPointer(localID);
                        this.pointers.set(localID, pointer);
                    }
                    return this.pointers.get(localID);
                };
                Documents.prototype.removePointer = function (idOrPointer) {
                    var id = Utils.isString(idOrPointer) ? idOrPointer : idOrPointer.id;
                    var localID = this.getPointerID(id);
                    if (localID === null) {
                        if (!!this.context && !!this.context.parentContext) return this.context.parentContext.documents.removePointer(id);
                        return false;
                    }
                    return this.pointers.delete(localID);
                };
                Documents.prototype.get = function (uri, requestOptions) {
                    var _this = this;
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    var pointerID = this.getPointerID(uri);
                    uri = this.getRequestURI(uri);
                    this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.RDFSource);
                    if (this.hasPointer(uri)) {
                        var pointer = this.getPointer(uri);
                        if (pointer.isResolved()) {
                            return Promise.resolve([pointer, null]);
                        }
                    }
                    if (this.documentsBeingResolved.has(pointerID)) return this.documentsBeingResolved.get(pointerID);
                    var promise = HTTP.Request.Service.get(uri, requestOptions, new RDF.Document.Parser()).then(function (_a) {
                        var rdfDocuments = _a[0],
                            response = _a[1];
                        var eTag = HTTP.Response.Util.getETag(response);
                        if (eTag === null) throw new HTTP.Errors.BadResponseError("The response doesn't contain an ETag", response);
                        var locationHeader = response.getHeader("Content-Location");
                        if (!!locationHeader) {
                            if (locationHeader.values.length !== 1) throw new HTTP.Errors.BadResponseError("The response contains more than one Content-Location header.", response);
                            uri = locationHeader.toString();
                            if (!uri) throw new HTTP.Errors.BadResponseError("The response doesn't contain a valid 'Content-Location' header.", response);
                        }
                        var rdfDocument = _this.getRDFDocument(uri, rdfDocuments, response);
                        if (rdfDocument === null) throw new HTTP.Errors.BadResponseError("No document was returned.", response);
                        var document = _this._getPersistedDocument(rdfDocument, response);
                        document._etag = eTag;
                        _this.documentsBeingResolved.delete(pointerID);
                        return [document, response];
                    });
                    this.documentsBeingResolved.set(pointerID, promise);
                    return promise;
                };
                Documents.prototype.exists = function (documentURI, requestOptions) {
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    documentURI = this.getRequestURI(documentURI);
                    this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.RDFSource);
                    return HTTP.Request.Service.head(documentURI, requestOptions).then(function (response) {
                        return [true, response];
                    }, function (error) {
                        if (error.response.status === 404) return [false, error.response];
                        return Promise.reject(error);
                    });
                };
                Documents.prototype.createChild = function (parentURI, childObject, slugOrRequestOptions, requestOptions) {
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    var slug = Utils.isString(slugOrRequestOptions) ? slugOrRequestOptions : null;
                    requestOptions = !Utils.isString(slugOrRequestOptions) && !!slugOrRequestOptions ? slugOrRequestOptions : requestOptions;
                    if (PersistedDocument.Factory.is(childObject)) return Promise.reject(new Errors.IllegalArgumentError("The child provided has been already persisted."));
                    var childDocument = Document.Factory.is(childObject) ? childObject : Document.Factory.createFrom(childObject);
                    this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.Container);
                    return this.persistDocument(parentURI, slug, childDocument, requestOptions);
                };
                Documents.prototype.createChildAndRetrieve = function (parentURI, childObject, slugOrRequestOptions, requestOptions) {
                    var _this = this;
                    var createResponse;
                    return this.createChild(parentURI, childObject, slugOrRequestOptions, requestOptions).then(function (_a) {
                        var document = _a[0],
                            response = _a[1];
                        createResponse = response;
                        return _this.get(document.id);
                    }).then(function (_a) {
                        var persistedDocument = _a[0],
                            response = _a[1];
                        return [persistedDocument, [createResponse, response]];
                    });
                };
                Documents.prototype.listChildren = function (parentURI, requestOptions) {
                    var _this = this;
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    parentURI = this.getRequestURI(parentURI);
                    this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.Container);
                    var containerRetrievalPreferences = {
                        include: [NS.LDP.Class.PreferContainment],
                        omit: [NS.LDP.Class.PreferMembership, NS.LDP.Class.PreferMinimalContainer, NS.C.Class.PreferContainmentResources, NS.C.Class.PreferMembershipResources]
                    };
                    HTTP.Request.Util.setContainerRetrievalPreferences(containerRetrievalPreferences, requestOptions);
                    return HTTP.Request.Service.get(parentURI, requestOptions, new RDF.Document.Parser()).then(function (_a) {
                        var rdfDocuments = _a[0],
                            response = _a[1];
                        var rdfDocument = _this.getRDFDocument(parentURI, rdfDocuments, response);
                        if (rdfDocument === null) return [[], response];
                        var documentResource = _this.getDocumentResource(rdfDocument, response);
                        var childPointers = RDF.Node.Util.getPropertyPointers(documentResource, NS.LDP.Predicate.contains, _this);
                        var persistedChildPointers = childPointers.map(function (pointer) {
                            return PersistedDocument.Factory.decorate(pointer, _this);
                        });
                        return [persistedChildPointers, response];
                    });
                };
                Documents.prototype.getChildren = function (parentURI, retPrefReqOpt, requestOptions) {
                    var _this = this;
                    var retrievalPreferences = RetrievalPreferences.Factory.is(retPrefReqOpt) ? retPrefReqOpt : null;
                    requestOptions = HTTP.Request.Util.isOptions(retPrefReqOpt) ? retPrefReqOpt : HTTP.Request.Util.isOptions(requestOptions) ? requestOptions : {};
                    parentURI = this.getRequestURI(parentURI);
                    this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.Container);
                    var containerURI = parentURI;
                    if (!!retrievalPreferences) parentURI += RetrievalPreferences.Util.stringifyRetrievalPreferences(retrievalPreferences, this.getGeneralSchema());
                    var containerRetrievalPreferences = {
                        include: [NS.LDP.Class.PreferContainment, NS.C.Class.PreferContainmentResources],
                        omit: [NS.LDP.Class.PreferMembership, NS.LDP.Class.PreferMinimalContainer, NS.C.Class.PreferMembershipResources]
                    };
                    HTTP.Request.Util.setContainerRetrievalPreferences(containerRetrievalPreferences, requestOptions);
                    return HTTP.Request.Service.get(parentURI, requestOptions, new JSONLD.Parser.Class()).then(function (_a) {
                        var expandedResult = _a[0],
                            response = _a[1];
                        var freeNodes = RDF.Node.Util.getFreeNodes(expandedResult);
                        var rdfDocuments = RDF.Document.Util.getDocuments(expandedResult).filter(function (document) {
                            return document["@id"] !== containerURI;
                        });
                        var resources = _this.getPersistedMetadataResources(freeNodes, rdfDocuments, response);
                        return [resources, response];
                    });
                };
                Documents.prototype.createAccessPoint = function (documentURI, accessPoint, slugOrRequestOptions, requestOptions) {
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    var slug = Utils.isString(slugOrRequestOptions) ? slugOrRequestOptions : null;
                    requestOptions = !Utils.isString(slugOrRequestOptions) && !!slugOrRequestOptions ? slugOrRequestOptions : requestOptions;
                    if (PersistedDocument.Factory.is(accessPoint)) return Promise.reject(new Errors.IllegalArgumentError("The accessPoint provided has been already persisted."));
                    var accessPointDocument = AccessPoint.Factory.is(accessPoint) ? accessPoint : AccessPoint.Factory.createFrom(accessPoint, this.getPointer(documentURI), accessPoint.hasMemberRelation, accessPoint.isMemberOfRelation);
                    if (accessPointDocument.membershipResource.id !== documentURI) return Promise.reject(new Errors.IllegalArgumentError("The documentURI must be the same as the accessPoint's membershipResource"));
                    this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.RDFSource);
                    return this.persistDocument(documentURI, slug, accessPointDocument, requestOptions);
                };
                Documents.prototype.upload = function (parentURI, data, slugOrRequestOptions, requestOptions) {
                    var _this = this;
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    var slug = Utils.isString(slugOrRequestOptions) ? slugOrRequestOptions : null;
                    requestOptions = !Utils.isString(slugOrRequestOptions) && !!slugOrRequestOptions ? slugOrRequestOptions : requestOptions;
                    if (typeof Blob !== "undefined") {
                        if (!(data instanceof Blob)) return Promise.reject(new Errors.IllegalArgumentError("The data is not a valid Blob object."));
                        HTTP.Request.Util.setContentTypeHeader(data.type, requestOptions);
                    } else {
                        if (!(data instanceof Buffer)) return Promise.reject(new Errors.IllegalArgumentError("The data is not a valid Buffer object."));
                        var fileType = require("file-type");
                        var bufferType = fileType(data);
                        HTTP.Request.Util.setContentTypeHeader(bufferType ? bufferType.mime : "application/octet-stream", requestOptions);
                    }
                    parentURI = this.getRequestURI(parentURI);
                    this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.Container);
                    if (!!slug) HTTP.Request.Util.setSlug(slug, requestOptions);
                    return HTTP.Request.Service.post(parentURI, data, requestOptions).then(function (response) {
                        var locationHeader = response.getHeader("Location");
                        if (locationHeader === null || locationHeader.values.length < 1) throw new HTTP.Errors.BadResponseError("The response is missing a Location header.", response);
                        if (locationHeader.values.length !== 1) throw new HTTP.Errors.BadResponseError("The response contains more than one Location header.", response);
                        var locationURI = locationHeader.values[0].toString();
                        var pointer = _this.getPointer(locationURI);
                        return [pointer, response];
                    });
                };
                Documents.prototype.listMembers = function (uri, nonReadReqOpt, reqOpt) {
                    var _this = this;
                    var includeNonReadable = Utils.isBoolean(nonReadReqOpt) ? nonReadReqOpt : true;
                    var requestOptions = HTTP.Request.Util.isOptions(nonReadReqOpt) ? nonReadReqOpt : HTTP.Request.Util.isOptions(reqOpt) ? reqOpt : {};
                    uri = this.getRequestURI(uri);
                    this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.Container);
                    var containerRetrievalPreferences = {
                        include: [NS.LDP.Class.PreferMinimalContainer, NS.LDP.Class.PreferMembership],
                        omit: [NS.LDP.Class.PreferContainment, NS.C.Class.PreferContainmentResources, NS.C.Class.PreferMembershipResources]
                    };
                    if (includeNonReadable) {
                        containerRetrievalPreferences.include.push(NS.C.Class.NonReadableMembershipResourceTriples);
                    } else {
                        containerRetrievalPreferences.omit.push(NS.C.Class.NonReadableMembershipResourceTriples);
                    }
                    HTTP.Request.Util.setContainerRetrievalPreferences(containerRetrievalPreferences, requestOptions);
                    return HTTP.Request.Service.get(uri, requestOptions, new RDF.Document.Parser()).then(function (_a) {
                        var rdfDocuments = _a[0],
                            response = _a[1];
                        var rdfDocument = _this.getRDFDocument(uri, rdfDocuments, response);
                        if (rdfDocument === null) throw new HTTP.Errors.BadResponseError("No document was returned.", response);
                        var documentResource = _this.getDocumentResource(rdfDocument, response);
                        var membershipResource = _this.getMembershipResource(documentResource, rdfDocuments, response);
                        if (membershipResource === null) return [[], response];
                        var hasMemberRelation = RDF.Node.Util.getPropertyURI(documentResource, NS.LDP.Predicate.hasMemberRelation);
                        var memberPointers = RDF.Node.Util.getPropertyPointers(membershipResource, hasMemberRelation, _this);
                        var persistedMemberPointers = memberPointers.map(function (pointer) {
                            return PersistedDocument.Factory.decorate(pointer, _this);
                        });
                        return [persistedMemberPointers, response];
                    });
                };
                Documents.prototype.getMembers = function (uri, nonReadRetPrefReqOpt, retPrefReqOpt, requestOptions) {
                    var _this = this;
                    var includeNonReadable = Utils.isBoolean(nonReadRetPrefReqOpt) ? nonReadRetPrefReqOpt : true;
                    var retrievalPreferences = RetrievalPreferences.Factory.is(nonReadRetPrefReqOpt) ? nonReadRetPrefReqOpt : RetrievalPreferences.Factory.is(retPrefReqOpt) ? retPrefReqOpt : null;
                    requestOptions = HTTP.Request.Util.isOptions(nonReadRetPrefReqOpt) ? nonReadRetPrefReqOpt : HTTP.Request.Util.isOptions(retPrefReqOpt) ? retPrefReqOpt : HTTP.Request.Util.isOptions(requestOptions) ? requestOptions : {};
                    uri = this.getRequestURI(uri);
                    this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.Container);
                    var containerURI = uri;
                    if (!!retrievalPreferences) uri += RetrievalPreferences.Util.stringifyRetrievalPreferences(retrievalPreferences, this.getGeneralSchema());
                    var containerRetrievalPreferences = {
                        include: [NS.LDP.Class.PreferMinimalContainer, NS.LDP.Class.PreferMembership, NS.C.Class.PreferMembershipResources],
                        omit: [NS.LDP.Class.PreferContainment, NS.C.Class.PreferContainmentResources]
                    };
                    if (includeNonReadable) {
                        containerRetrievalPreferences.include.push(NS.C.Class.NonReadableMembershipResourceTriples);
                    } else {
                        containerRetrievalPreferences.omit.push(NS.C.Class.NonReadableMembershipResourceTriples);
                    }
                    HTTP.Request.Util.setContainerRetrievalPreferences(containerRetrievalPreferences, requestOptions);
                    return HTTP.Request.Service.get(uri, requestOptions, new JSONLD.Parser.Class()).then(function (_a) {
                        var expandedResult = _a[0],
                            response = _a[1];
                        var freeNodes = RDF.Node.Util.getFreeNodes(expandedResult);
                        var rdfDocuments = RDF.Document.Util.getDocuments(expandedResult);
                        var rdfDocument = _this.getRDFDocument(containerURI, rdfDocuments, response);
                        if (rdfDocument === null) throw new HTTP.Errors.BadResponseError("No document was returned.", response);
                        var containerResource = _this.getDocumentResource(rdfDocument, response);
                        var membershipResource = _this.getMembershipResource(containerResource, rdfDocuments, response);
                        if (membershipResource === null) return [[], response];
                        rdfDocuments = rdfDocuments.filter(function (targetRDFDocument) {
                            return !RDF.Node.Util.areEqual(targetRDFDocument, containerResource) && !RDF.Node.Util.areEqual(targetRDFDocument, membershipResource);
                        });
                        var resources = _this.getPersistedMetadataResources(freeNodes, rdfDocuments, response);
                        return [resources, response];
                    });
                };
                Documents.prototype.addMember = function (documentURI, memberORUri, requestOptions) {
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    return this.addMembers(documentURI, [memberORUri], requestOptions);
                };
                Documents.prototype.addMembers = function (documentURI, members, requestOptions) {
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    var pointers = [];
                    for (var _i = 0, members_1 = members; _i < members_1.length; _i++) {
                        var member = members_1[_i];
                        member = Utils.isString(member) ? this.getPointer(member) : member;
                        if (!Pointer.Factory.is(member)) return Promise.reject(new Errors.IllegalArgumentError("No Carbon.Pointer or URI provided."));
                        pointers.push(member);
                    }
                    documentURI = this.getRequestURI(documentURI);
                    this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.Container);
                    HTTP.Request.Util.setContentTypeHeader("application/ld+json", requestOptions);
                    var document = LDP.AddMemberAction.Factory.createDocument(pointers);
                    var body = document.toJSON(this, this.jsonldConverter);
                    return HTTP.Request.Service.put(documentURI, body, requestOptions);
                };
                Documents.prototype.removeMember = function (documentURI, memberORUri, requestOptions) {
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    return this.removeMembers(documentURI, [memberORUri], requestOptions);
                };
                Documents.prototype.removeMembers = function (documentURI, members, requestOptions) {
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    var pointers = [];
                    for (var _i = 0, members_2 = members; _i < members_2.length; _i++) {
                        var member = members_2[_i];
                        member = Utils.isString(member) ? this.getPointer(member) : member;
                        if (!Pointer.Factory.is(member)) return Promise.reject(new Errors.IllegalArgumentError("No Carbon.Pointer or URI provided."));
                        pointers.push(member);
                    }
                    documentURI = this.getRequestURI(documentURI);
                    this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.Container);
                    HTTP.Request.Util.setContentTypeHeader("application/ld+json", requestOptions);
                    var document = LDP.RemoveMemberAction.Factory.createDocument(pointers);
                    var containerRetrievalPreferences = {
                        include: [NS.C.Class.PreferSelectedMembershipTriples],
                        omit: [NS.C.Class.PreferMembershipTriples]
                    };
                    HTTP.Request.Util.setContainerRetrievalPreferences(containerRetrievalPreferences, requestOptions, false);
                    var body = document.toJSON(this, this.jsonldConverter);
                    return HTTP.Request.Service.delete(documentURI, body, requestOptions);
                };
                Documents.prototype.removeAllMembers = function (documentURI, requestOptions) {
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    documentURI = this.getRequestURI(documentURI);
                    this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.Container);
                    var containerRetrievalPreferences = {
                        include: [NS.C.Class.PreferMembershipTriples],
                        omit: [NS.C.Class.PreferMembershipResources, NS.C.Class.PreferContainmentTriples, NS.C.Class.PreferContainmentResources, NS.C.Class.PreferContainer]
                    };
                    HTTP.Request.Util.setContainerRetrievalPreferences(containerRetrievalPreferences, requestOptions, false);
                    return HTTP.Request.Service.delete(documentURI, requestOptions);
                };
                Documents.prototype.save = function (persistedDocument, requestOptions) {
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    // TODO: Check if the document isDirty
                    /*
                    if( ! persistedDocument.isDirty() ) return new Promise<HTTP.Response.Class>( ( resolve:( result:HTTP.Response.Class ) => void ) => {
                        resolve( null );
                    });
                    */
                    var uri = this.getRequestURI(persistedDocument.id);
                    this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.RDFSource);
                    HTTP.Request.Util.setContentTypeHeader("application/ld+json", requestOptions);
                    HTTP.Request.Util.setIfMatchHeader(persistedDocument._etag, requestOptions);
                    persistedDocument._normalize();
                    var body = persistedDocument.toJSON(this, this.jsonldConverter);
                    return HTTP.Request.Service.put(uri, body, requestOptions).then(function (response) {
                        return [persistedDocument, response];
                    });
                };
                Documents.prototype.refresh = function (persistedDocument, requestOptions) {
                    var _this = this;
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    var uri = this.getRequestURI(persistedDocument.id);
                    this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.RDFSource);
                    return HTTP.Request.Service.head(uri, requestOptions).then(function (headerResponse) {
                        var eTag = HTTP.Response.Util.getETag(headerResponse);
                        if (eTag === persistedDocument._etag) return [persistedDocument, null];
                        return HTTP.Request.Service.get(uri, requestOptions, new RDF.Document.Parser());
                    }).then(function (_a) {
                        var rdfDocuments = _a[0],
                            response = _a[1];
                        if (response === null) return [rdfDocuments, response];
                        var eTag = HTTP.Response.Util.getETag(response);
                        if (eTag === null) throw new HTTP.Errors.BadResponseError("The response doesn't contain an ETag", response);
                        var rdfDocument = _this.getRDFDocument(uri, rdfDocuments, response);
                        if (rdfDocument === null) throw new HTTP.Errors.BadResponseError("No document was returned.", response);
                        var updatedPersistedDocument = _this._getPersistedDocument(rdfDocument, response);
                        updatedPersistedDocument._etag = eTag;
                        return [updatedPersistedDocument, response];
                    });
                };
                Documents.prototype.saveAndRefresh = function (persistedDocument, requestOptions) {
                    // TODO: Check how to manage the requestOptions for the multiple calls
                    var _this = this;
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    var saveResponse;
                    return this.save(persistedDocument).then(function (_a) {
                        var document = _a[0],
                            response = _a[1];
                        saveResponse = response;
                        return _this.refresh(persistedDocument);
                    }).then(function (_a) {
                        var document = _a[0],
                            response = _a[1];
                        return [persistedDocument, [saveResponse, response]];
                    });
                };
                Documents.prototype.delete = function (documentURI, requestOptions) {
                    var _this = this;
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    documentURI = this.getRequestURI(documentURI);
                    this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.RDFSource);
                    return HTTP.Request.Service.delete(documentURI, requestOptions).then(function (response) {
                        var pointerID = _this.getPointerID(documentURI);
                        _this.pointers.delete(pointerID);
                        return response;
                    });
                };
                Documents.prototype.getDownloadURL = function (documentURI, requestOptions) {
                    if (!this.context.auth) Promise.reject(new Errors.IllegalStateError("This instance doesn't support Authenticated request."));
                    return this.context.auth.getAuthenticatedURL(documentURI, requestOptions);
                };
                Documents.prototype.getGeneralSchema = function () {
                    if (!this.context) return new ObjectSchema.DigestedObjectSchema();
                    var schema = ObjectSchema.Digester.combineDigestedObjectSchemas([this.context.getObjectSchema()]);
                    if (this.context.hasSetting("vocabulary")) schema.vocab = this.context.resolve(this.context.getSetting("vocabulary"));
                    return schema;
                };
                Documents.prototype.getSchemaFor = function (object) {
                    var schema = "@id" in object ? this.getDigestedObjectSchemaForExpandedObject(object) : this.getDigestedObjectSchemaForDocument(object);
                    return schema;
                };
                Documents.prototype.executeRawASKQuery = function (documentURI, askQuery, requestOptions) {
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    documentURI = this.getRequestURI(documentURI);
                    if (this.context && this.context.auth && this.context.auth.isAuthenticated()) this.context.auth.addAuthentication(requestOptions);
                    return SPARQL.Service.executeRawASKQuery(documentURI, askQuery, requestOptions);
                };
                Documents.prototype.executeASKQuery = function (documentURI, askQuery, requestOptions) {
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    documentURI = this.getRequestURI(documentURI);
                    if (this.context && this.context.auth && this.context.auth.isAuthenticated()) this.context.auth.addAuthentication(requestOptions);
                    return SPARQL.Service.executeASKQuery(documentURI, askQuery, requestOptions);
                };
                Documents.prototype.executeRawSELECTQuery = function (documentURI, selectQuery, requestOptions) {
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    documentURI = this.getRequestURI(documentURI);
                    if (this.context && this.context.auth && this.context.auth.isAuthenticated()) this.context.auth.addAuthentication(requestOptions);
                    return SPARQL.Service.executeRawSELECTQuery(documentURI, selectQuery, requestOptions);
                };
                Documents.prototype.executeSELECTQuery = function (documentURI, selectQuery, requestOptions) {
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    documentURI = this.getRequestURI(documentURI);
                    if (this.context && this.context.auth && this.context.auth.isAuthenticated()) this.context.auth.addAuthentication(requestOptions);
                    return SPARQL.Service.executeSELECTQuery(documentURI, selectQuery, this, requestOptions);
                };
                Documents.prototype.executeRawCONSTRUCTQuery = function (documentURI, constructQuery, requestOptions) {
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    documentURI = this.getRequestURI(documentURI);
                    if (this.context && this.context.auth && this.context.auth.isAuthenticated()) this.context.auth.addAuthentication(requestOptions);
                    return SPARQL.Service.executeRawCONSTRUCTQuery(documentURI, constructQuery, requestOptions);
                };
                Documents.prototype.executeRawDESCRIBEQuery = function (documentURI, describeQuery, requestOptions) {
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    documentURI = this.getRequestURI(documentURI);
                    if (this.context && this.context.auth && this.context.auth.isAuthenticated()) this.context.auth.addAuthentication(requestOptions);
                    return SPARQL.Service.executeRawDESCRIBEQuery(documentURI, describeQuery, requestOptions);
                };
                Documents.prototype.executeUPDATE = function (documentURI, update, requestOptions) {
                    if (requestOptions === void 0) {
                        requestOptions = {};
                    }
                    if (!RDF.URI.Util.isAbsolute(documentURI)) {
                        if (!this.context) throw new Errors.IllegalArgumentError("This Documents instance doesn't support relative URIs.");
                        documentURI = this.context.resolve(documentURI);
                    }
                    if (this.context && this.context.auth && this.context.auth.isAuthenticated()) this.context.auth.addAuthentication(requestOptions);
                    return SPARQL.Service.executeUPDATE(documentURI, update, requestOptions);
                };
                Documents.prototype._getPersistedDocument = function (rdfDocument, response) {
                    var documentResource = this.getDocumentResource(rdfDocument, response);
                    var fragmentResources = RDF.Document.Util.getBNodeResources(rdfDocument);
                    fragmentResources = fragmentResources.concat(RDF.Document.Util.getFragmentResources(rdfDocument));
                    var uri = documentResource["@id"];
                    var documentPointer = this.getPointer(uri);
                    if (documentPointer.isResolved()) {
                        this.updatePersistedDocument(documentPointer, documentResource, fragmentResources);
                    } else {
                        this.createPersistedDocument(documentPointer, documentResource, fragmentResources);
                    }
                    return documentPointer;
                };
                Documents.prototype._getFreeResources = function (nodes) {
                    var freeResourcesDocument = FreeResources.Factory.create(this);
                    var resources = nodes.map(function (node) {
                        return freeResourcesDocument.createResource(node["@id"]);
                    });
                    this.compact(nodes, resources, freeResourcesDocument);
                    return freeResourcesDocument;
                };
                Documents.prototype.persistDocument = function (parentURI, slug, document, requestOptions) {
                    var _this = this;
                    parentURI = this.getRequestURI(parentURI);
                    HTTP.Request.Util.setContentTypeHeader("application/ld+json", requestOptions);
                    if (document.id) {
                        var childURI = document.id;
                        if (!!this.context) childURI = this.context.resolve(childURI);
                        if (!RDF.URI.Util.isBaseOf(parentURI, childURI)) {
                            return Promise.reject(new Errors.IllegalArgumentError("The document's URI is not relative to the parentURI specified"));
                        }
                    }
                    if (document["__CarbonSDK_InProgressOfPersisting"]) return Promise.reject(new Errors.IllegalArgumentError("The document is already being persisted."));
                    Object.defineProperty(document, "__CarbonSDK_InProgressOfPersisting", { configurable: true, enumerable: false, writable: false, value: true });
                    var body = document.toJSON(this, this.jsonldConverter);
                    if (!!slug) HTTP.Request.Util.setSlug(slug, requestOptions);
                    return HTTP.Request.Service.post(parentURI, body, requestOptions).then(function (response) {
                        delete document["__CarbonSDK_InProgressOfPersisting"];
                        var locationHeader = response.getHeader("Location");
                        if (locationHeader === null || locationHeader.values.length < 1) throw new HTTP.Errors.BadResponseError("The response is missing a Location header.", response);
                        if (locationHeader.values.length !== 1) throw new HTTP.Errors.BadResponseError("The response contains more than one Location header.", response);
                        var localID = _this.getPointerID(locationHeader.values[0].toString());
                        var persistedDocument = PersistedDocument.Factory.decorate(_this.createPointerFrom(document, localID), _this);
                        var persistedProtectedDocument = PersistedProtectedDocument.Factory.decorate(persistedDocument);
                        _this.pointers.set(localID, persistedProtectedDocument);
                        return [persistedProtectedDocument, response];
                    });
                };
                Documents.prototype.getRDFDocument = function (requestURL, rdfDocuments, response) {
                    rdfDocuments = rdfDocuments.filter(function (rdfDocument) {
                        return rdfDocument["@id"] === requestURL;
                    });
                    if (rdfDocuments.length > 1) throw new HTTP.Errors.BadResponseError("Several documents share the same id.", response);
                    return rdfDocuments.length > 0 ? rdfDocuments[0] : null;
                };
                Documents.prototype.getDocumentResource = function (rdfDocument, response) {
                    var documentResources = RDF.Document.Util.getDocumentResources(rdfDocument);
                    if (documentResources.length === 0) throw new HTTP.Errors.BadResponseError("The RDFDocument: " + rdfDocument["@id"] + ", doesn't contain a document resource.", response);
                    if (documentResources.length > 1) throw new HTTP.Errors.BadResponseError("The RDFDocument: " + rdfDocument["@id"] + ", contains more than one document resource.", response);
                    return documentResources[0];
                };
                Documents.prototype.getPointerID = function (uri) {
                    if (RDF.URI.Util.isBNodeID(uri)) throw new Errors.IllegalArgumentError("BNodes cannot be fetched directly.");
                    // TODO: Make named fragments independently resolvable
                    /*
                        if( RDF.URI.Util.hasFragment( uri ) ) throw new Errors.IllegalArgumentError( "Fragment URI's cannot be fetched directly." );
                    */
                    if (!!this.context) {
                        if (RDF.URI.Util.isPrefixed(uri)) uri = ObjectSchema.Digester.resolvePrefixedURI(uri, this.getGeneralSchema());
                        if (!RDF.URI.Util.isRelative(uri)) {
                            var baseURI = this.context.getBaseURI();
                            if (!RDF.URI.Util.isBaseOf(baseURI, uri)) return null;
                            return uri.substring(baseURI.length);
                        } else {
                            return uri[0] === "/" ? uri.substr(1) : uri;
                        }
                    } else {
                        if (RDF.URI.Util.isRelative(uri)) throw new Errors.IllegalArgumentError("This Documents instance doesn't support relative URIs.");
                        if (RDF.URI.Util.isPrefixed(uri)) throw new Errors.IllegalArgumentError("This Documents instance doesn't support prefixed URIs.");
                        return uri;
                    }
                };
                Documents.prototype.createPointer = function (localID) {
                    return this.createPointerFrom({}, localID);
                };
                Documents.prototype.createPointerFrom = function (object, localID) {
                    var _this = this;
                    var id = !!this.context ? this.context.resolve(localID) : localID;
                    var pointer = Pointer.Factory.createFrom(object, id);
                    Object.defineProperty(pointer, "resolve", {
                        writable: false,
                        enumerable: false,
                        configurable: true,
                        value: function () {
                            return _this.get(id);
                        }
                    });
                    return pointer;
                };
                Documents.prototype.compact = function (expandedObjectOrObjects, targetObjectOrObjects, pointerLibrary) {
                    if (!Utils.isArray(expandedObjectOrObjects)) return this.compactSingle(expandedObjectOrObjects, targetObjectOrObjects, pointerLibrary);
                    var expandedObjects = expandedObjectOrObjects;
                    var targetObjects = !!targetObjectOrObjects ? targetObjectOrObjects : [];
                    for (var i = 0, length = expandedObjects.length; i < length; i++) {
                        var expandedObject = expandedObjects[i];
                        var targetObject = targetObjects[i] = !!targetObjects[i] ? targetObjects[i] : {};
                        this.compactSingle(expandedObject, targetObject, pointerLibrary);
                    }
                    return targetObjects;
                };
                Documents.prototype.compactSingle = function (expandedObject, targetObject, pointerLibrary) {
                    var digestedSchema = this.getDigestedObjectSchemaForExpandedObject(expandedObject);
                    return this.jsonldConverter.compact(expandedObject, targetObject, digestedSchema, pointerLibrary);
                };
                Documents.prototype.getDigestedObjectSchemaForExpandedObject = function (expandedObject) {
                    var types = RDF.Node.Util.getTypes(expandedObject);
                    return this.getDigestedObjectSchema(types, expandedObject["@id"]);
                };
                Documents.prototype.getDigestedObjectSchemaForDocument = function (document) {
                    var types = Resource.Util.getTypes(document);
                    return this.getDigestedObjectSchema(types, document.id);
                };
                Documents.prototype.getDigestedObjectSchema = function (objectTypes, objectID) {
                    if (!this.context) return new ObjectSchema.DigestedObjectSchema();
                    var objectSchemas = [this.context.getObjectSchema()];
                    if (Utils.isDefined(objectID) && !RDF.URI.Util.hasFragment(objectID) && !RDF.URI.Util.isBNodeID(objectID)) objectSchemas.push(Documents._documentSchema);
                    for (var _i = 0, objectTypes_1 = objectTypes; _i < objectTypes_1.length; _i++) {
                        var type = objectTypes_1[_i];
                        if (this.context.hasObjectSchema(type)) objectSchemas.push(this.context.getObjectSchema(type));
                    }
                    var digestedSchema = ObjectSchema.Digester.combineDigestedObjectSchemas(objectSchemas);
                    if (this.context.hasSetting("vocabulary")) digestedSchema.vocab = this.context.resolve(this.context.getSetting("vocabulary"));
                    return digestedSchema;
                };
                Documents.prototype.updateObject = function (target, source) {
                    var keys = Utils.A.joinWithoutDuplicates(Object.keys(source), Object.keys(target));
                    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                        var key = keys_1[_i];
                        if (Utils.hasProperty(source, key)) {
                            target[key] = source[key];
                        } else {
                            delete target[key];
                        }
                    }
                    return target;
                };
                Documents.prototype.getAssociatedFragment = function (blankNodes, namedFragments, searchedFragment) {
                    if (!RDF.URI.Util.isBNodeID(searchedFragment["@id"])) return namedFragments.get(searchedFragment["@id"]);
                    var bNodeIdentifier = RDF.Node.Util.getProperty(searchedFragment, NS.C.Predicate.bNodeIdentifier, null);
                    for (var _i = 0, blankNodes_1 = blankNodes; _i < blankNodes_1.length; _i++) {
                        var fragment = blankNodes_1[_i];
                        if (!RDF.URI.Util.isBNodeID(fragment.id)) continue;
                        var persistedBlankNode = fragment;
                        if (!!persistedBlankNode.bNodeIdentifier && persistedBlankNode.bNodeIdentifier === bNodeIdentifier) return fragment;
                    }
                    return null;
                };
                Documents.prototype.getRequestURI = function (uri) {
                    if (RDF.URI.Util.isRelative(uri)) {
                        if (!this.context) throw new Errors.IllegalArgumentError("This Documents instance doesn't support relative URIs.");
                        uri = this.context.resolve(uri);
                    } else if (RDF.URI.Util.isPrefixed(uri)) {
                        if (!this.context) throw new Errors.IllegalArgumentError("This Documents instance doesn't support prefixed URIs.");
                        uri = ObjectSchema.Digester.resolvePrefixedURI(uri, this.context.getObjectSchema());
                        if (RDF.URI.Util.isPrefixed(uri)) throw new Errors.IllegalArgumentError("The prefixed URI \"" + uri + "\" could not be resolved.");
                    }
                    return uri;
                };
                Documents.prototype.setDefaultRequestOptions = function (requestOptions, interactionModel) {
                    if (this.context && this.context.auth && this.context.auth.isAuthenticated()) this.context.auth.addAuthentication(requestOptions);
                    HTTP.Request.Util.setAcceptHeader("application/ld+json", requestOptions);
                    HTTP.Request.Util.setPreferredInteractionModel(interactionModel, requestOptions);
                };
                Documents.prototype.getMembershipResource = function (documentResource, rdfDocuments, response) {
                    var membershipResource;
                    var membershipResourceURI = RDF.Node.Util.getPropertyURI(documentResource, NS.LDP.Predicate.membershipResource);
                    if (documentResource["@id"] === membershipResourceURI) {
                        membershipResource = documentResource;
                    } else if (membershipResourceURI === null) {
                        if (documentResource["@type"].indexOf(NS.LDP.Class.BasicContainer) !== -1) {
                            membershipResource = documentResource;
                        } else {
                            throw new HTTP.Errors.BadResponseError("The document is not an ldp:BasicContainer and it doesn't contain an ldp:membershipResource triple.", response);
                        }
                    } else {
                        var membershipResourceDocument = this.getRDFDocument(membershipResourceURI, rdfDocuments, response);
                        if (membershipResourceDocument === null) return null;
                        membershipResource = this.getDocumentResource(membershipResourceDocument, response);
                    }
                    return membershipResource;
                };
                Documents.prototype.createPersistedDocument = function (documentPointer, documentResource, fragmentResources) {
                    var persistedDocument = PersistedDocument.Factory.decorate(documentPointer, this);
                    var fragments = [];
                    for (var _i = 0, fragmentResources_1 = fragmentResources; _i < fragmentResources_1.length; _i++) {
                        var fragmentResource = fragmentResources_1[_i];
                        fragments.push(persistedDocument.createFragment(fragmentResource["@id"]));
                    }
                    this.compact(documentResource, persistedDocument, persistedDocument);
                    this.compact(fragmentResources, fragments, persistedDocument);
                    // TODO: Move this to a more appropriate place. See also updatePersistedDocument() method
                    persistedDocument._syncSnapshot();
                    fragments.forEach(function (fragment) {
                        return fragment._syncSnapshot();
                    });
                    persistedDocument._syncSavedFragments();
                    persistedDocument._resolved = true;
                    this.decoratePersistedDocument(persistedDocument);
                    return persistedDocument;
                };
                Documents.prototype.updatePersistedDocument = function (persistedDocument, documentResource, fragmentResources) {
                    var namedFragmentsMap = new Map();
                    var blankNodesArray = persistedDocument.getFragments().filter(function (fragment) {
                        persistedDocument._removeFragment(fragment.id);
                        if (RDF.URI.Util.isBNodeID(fragment.id)) return true;
                        namedFragmentsMap.set(fragment.id, fragment);
                        return false;
                    });
                    var newFragments = [];
                    for (var _i = 0, fragmentResources_2 = fragmentResources; _i < fragmentResources_2.length; _i++) {
                        var fragmentResource = fragmentResources_2[_i];
                        var fragment = this.getAssociatedFragment(blankNodesArray, namedFragmentsMap, fragmentResource);
                        fragment = persistedDocument.createFragment(fragment || {}, fragmentResource["@id"]);
                        newFragments.push([fragment, fragmentResource]);
                    }
                    for (var _a = 0, newFragments_1 = newFragments; _a < newFragments_1.length; _a++) {
                        var _b = newFragments_1[_a],
                            fragment = _b[0],
                            resource = _b[1];
                        this.updateObject(fragment, this.compact(resource, {}, persistedDocument));
                        fragment._syncSnapshot();
                    }
                    persistedDocument._syncSavedFragments();
                    this.updateObject(persistedDocument, this.compact(documentResource, {}, persistedDocument));
                    persistedDocument._syncSnapshot();
                    this.decoratePersistedDocument(persistedDocument);
                    return persistedDocument;
                };
                Documents.prototype.getPersistedMetadataResources = function (freeNodes, rdfDocuments, response) {
                    var _this = this;
                    var freeResources = this._getFreeResources(freeNodes);
                    var descriptionResources = freeResources.getResources().filter(LDP.ResponseMetadata.Factory.hasRDFClass);
                    if (descriptionResources.length === 0) return [];
                    if (descriptionResources.length > 1) throw new HTTP.Errors.BadResponseError("The response contained multiple " + LDP.ResponseMetadata.RDF_CLASS + " objects.", response);
                    rdfDocuments.forEach(function (rdfDocument) {
                        return _this._getPersistedDocument(rdfDocument, response);
                    });
                    var responseMetadata = descriptionResources[0];
                    return responseMetadata.resourcesMetadata.map(function (resourceMetadata) {
                        var resource = resourceMetadata.resource;
                        resource._etag = resourceMetadata.eTag;
                        return resource;
                    });
                };
                Documents.prototype.decoratePersistedDocument = function (persistedDocument) {
                    var entries = this._documentDecorators.entries();
                    for (var _i = 0, _a = Utils.A.from(entries); _i < _a.length; _i++) {
                        var _b = _a[_i],
                            type = _b[0],
                            options = _b[1];
                        if (persistedDocument.hasType(type)) {
                            options.decorator.apply(null, [persistedDocument].concat(options.parameters));
                        }
                    }
                };
                Documents._documentSchema = ObjectSchema.Digester.digestSchema(Document.SCHEMA);
                return Documents;
            }();
            exports_1("default", Documents);
        }
    };
});
$__System.register("5b", ["15", "6", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Document, NS, Utils;
    var RDF_CLASS, SCHEMA, Factory;
    return {
        setters: [function (Document_1) {
            Document = Document_1;
        }, function (NS_1) {
            NS = NS_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            exports_1("RDF_CLASS", RDF_CLASS = NS.C.Class.AddMemberAction);
            exports_1("SCHEMA", SCHEMA = {
                "targetMembers": {
                    "@id": NS.C.Predicate.targetMember,
                    "@type": "@id",
                    "@container": "@set"
                }
            });
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (object) {
                    return Utils.hasPropertyDefined(object, "targetMembers");
                };
                Factory.createDocument = function (targetMembers) {
                    var document = Document.Factory.create();
                    var fragment = document.createFragment({ targetMembers: targetMembers });
                    fragment.types.push(RDF_CLASS);
                    return document;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("5c", ["15", "5", "6", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Document, Errors, NS, Utils;
    var RDF_CLASS, Factory;
    return {
        setters: [function (Document_1) {
            Document = Document_1;
        }, function (Errors_1) {
            Errors = Errors_1;
        }, function (NS_1) {
            NS = NS_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            exports_1("RDF_CLASS", RDF_CLASS = NS.LDP.Class.DirectContainer);
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (resource) {
                    return Utils.hasPropertyDefined(resource, "membershipResource");
                };
                Factory.is = function (object) {
                    return Factory.hasClassProperties(object) && Document.Factory.is(object) && object.hasType(RDF_CLASS);
                };
                Factory.create = function (membershipResource, hasMemberRelation, isMemberOfRelation) {
                    return Factory.createFrom({}, membershipResource, hasMemberRelation, isMemberOfRelation);
                };
                Factory.createFrom = function (object, membershipResource, hasMemberRelation, isMemberOfRelation) {
                    if (Factory.is(object)) throw new Errors.IllegalArgumentError("The base object is already a DirectContainer.");
                    if (!membershipResource) throw new Errors.IllegalArgumentError("The property membershipResource cannot be null.");
                    if (!hasMemberRelation) throw new Errors.IllegalArgumentError("The property hasMemberRelation cannot be empty.");
                    if (!isMemberOfRelation && Utils.isDefined(isMemberOfRelation)) throw new Errors.IllegalArgumentError("The property isMemberOfRelation cannot be empty.");
                    var container = object;
                    if (!Document.Factory.is(object)) container = Document.Factory.createFrom(object);
                    container.types.push(NS.LDP.Class.Container);
                    container.types.push(NS.LDP.Class.DirectContainer);
                    container.membershipResource = membershipResource;
                    // TODO: Handle properties correctly and validate them
                    container.hasMemberRelation = hasMemberRelation;
                    container.isMemberOfRelation = isMemberOfRelation;
                    return container;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("5d", ["6"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var NS;
    var RDF_CLASS, SCHEMA;
    return {
        setters: [function (NS_1) {
            NS = NS_1;
        }],
        execute: function () {
            exports_1("RDF_CLASS", RDF_CLASS = NS.C.Class.Error);
            exports_1("SCHEMA", SCHEMA = {
                "carbonCode": {
                    "@id": NS.C.Predicate.carbonCode,
                    "@type": NS.XSD.DataType.string
                },
                "message": {
                    "@id": NS.C.Predicate.message,
                    "@type": NS.XSD.DataType.string
                }
            });
        }
    };
});
$__System.register("5e", ["6", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var NS, Utils;
    var RDF_CLASS, Factory;
    return {
        setters: [function (NS_1) {
            NS = NS_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            exports_1("RDF_CLASS", RDF_CLASS = NS.LDP.Class.IndirectContainer);
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (resource) {
                    return Utils.hasPropertyDefined(resource, "insertedContentRelation");
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("5f", ["15", "6", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Document, NS, Utils;
    var RDF_CLASS, SCHEMA, Factory;
    return {
        setters: [function (Document_1) {
            Document = Document_1;
        }, function (NS_1) {
            NS = NS_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            exports_1("RDF_CLASS", RDF_CLASS = NS.C.Class.RemoveMemberAction);
            exports_1("SCHEMA", SCHEMA = {
                "targetMembers": {
                    "@id": NS.C.Predicate.targetMember,
                    "@type": "@id",
                    "@container": "@set"
                }
            });
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (object) {
                    return Utils.hasPropertyDefined(object, "targetMembers");
                };
                Factory.createDocument = function (targetMembers) {
                    var document = Document.Factory.create();
                    var fragment = document.createFragment({ targetMembers: targetMembers });
                    fragment.types.push(RDF_CLASS);
                    return document;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("60", ["6", "a", "61"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var NS, Utils, VolatileResource;
    var RDF_CLASS, SCHEMA, Factory;
    return {
        setters: [function (NS_1) {
            NS = NS_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }, function (VolatileResource_1) {
            VolatileResource = VolatileResource_1;
        }],
        execute: function () {
            exports_1("RDF_CLASS", RDF_CLASS = NS.C.Class.ResponseMetadata);
            exports_1("SCHEMA", SCHEMA = {
                "resourcesMetadata": {
                    "@id": NS.C.Predicate.resourceMetadata,
                    "@type": "@id",
                    "@container": "@set"
                }
            });
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (object) {
                    return Utils.hasPropertyDefined(object, "resourcesMetadata");
                };
                Factory.is = function (object) {
                    return VolatileResource.Factory.is(object) && Factory.hasClassProperties(object) && Factory.hasRDFClass(object);
                };
                Factory.hasRDFClass = function (object) {
                    if (!object) return false;
                    var types = "@type" in object ? object["@type"] : "types" in object ? object.types : [];
                    return types.indexOf(RDF_CLASS) !== -1;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("61", ["6", "35"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var NS, Resource;
    var RDF_CLASS, Factory;
    return {
        setters: [function (NS_1) {
            NS = NS_1;
        }, function (Resource_1) {
            Resource = Resource_1;
        }],
        execute: function () {
            exports_1("RDF_CLASS", RDF_CLASS = NS.C.Class.VolatileResource);
            Factory = function () {
                function Factory() {}
                Factory.is = function (object) {
                    return Resource.Factory.is(object) && Factory.hasRDFClass(object);
                };
                Factory.hasRDFClass = function (object) {
                    if (!object) return false;
                    var types = "@type" in object ? object["@type"] : "types" in object ? object.types : [];
                    return types.indexOf(RDF_CLASS) !== -1;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("62", ["6", "a", "61"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var NS, Utils, VolatileResource;
    var RDF_CLASS, SCHEMA, Factory;
    return {
        setters: [function (NS_1) {
            NS = NS_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }, function (VolatileResource_1) {
            VolatileResource = VolatileResource_1;
        }],
        execute: function () {
            exports_1("RDF_CLASS", RDF_CLASS = NS.C.Class.ResourceMetadata);
            exports_1("SCHEMA", SCHEMA = {
                "eTag": {
                    "@id": NS.C.Predicate.eTag,
                    "@type": NS.XSD.DataType.string
                },
                "resource": {
                    "@id": NS.C.Predicate.resource,
                    "@type": "@id"
                }
            });
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (object) {
                    return Utils.hasPropertyDefined(object, "eTag") && Utils.hasPropertyDefined(object, "resource");
                };
                Factory.is = function (object) {
                    return VolatileResource.Factory.is(object) && Factory.hasClassProperties(object) && Factory.hasRDFClass(object);
                };
                Factory.hasRDFClass = function (object) {
                    if (!object) return false;
                    var types = "@type" in object ? object["@type"] : "types" in object ? object.types : [];
                    return types.indexOf(RDF_CLASS) !== -1;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("3e", ["5b", "5c", "5d", "63", "5e", "5f", "60", "62"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var AddMemberAction, DirectContainer, Error, ErrorResponse, IndirectContainer, RemoveMemberAction, ResponseMetadata, ResourceMetadata;
    return {
        setters: [function (AddMemberAction_1) {
            AddMemberAction = AddMemberAction_1;
        }, function (DirectContainer_1) {
            DirectContainer = DirectContainer_1;
        }, function (Error_1) {
            Error = Error_1;
        }, function (ErrorResponse_1) {
            ErrorResponse = ErrorResponse_1;
        }, function (IndirectContainer_1) {
            IndirectContainer = IndirectContainer_1;
        }, function (RemoveMemberAction_1) {
            RemoveMemberAction = RemoveMemberAction_1;
        }, function (ResponseMetadata_1) {
            ResponseMetadata = ResponseMetadata_1;
        }, function (ResourceMetadata_1) {
            ResourceMetadata = ResourceMetadata_1;
        }],
        execute: function () {
            exports_1("AddMemberAction", AddMemberAction);
            exports_1("DirectContainer", DirectContainer);
            exports_1("Error", Error);
            exports_1("ErrorResponse", ErrorResponse);
            exports_1("IndirectContainer", IndirectContainer);
            exports_1("RemoveMemberAction", RemoveMemberAction);
            exports_1("ResponseMetadata", ResponseMetadata);
            exports_1("ResourceMetadata", ResourceMetadata);
        }
    };
});
$__System.register("59", ["6"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var NS;
    var RDF_CLASS, SCHEMA;
    return {
        setters: [function (NS_1) {
            NS = NS_1;
        }],
        execute: function () {
            exports_1("RDF_CLASS", RDF_CLASS = NS.CS.Class.ProtectedDocument);
            exports_1("SCHEMA", SCHEMA = {
                "accessControlList": {
                    "@id": NS.CS.Predicate.accessControlList,
                    "@type": "@id"
                }
            });
        }
    };
});
$__System.register("64", ["65", "6", "9", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Fragment, NS, RDF, Utils;
    var SCHEMA, Factory;
    return {
        setters: [function (Fragment_1) {
            Fragment = Fragment_1;
        }, function (NS_1) {
            NS = NS_1;
        }, function (RDF_1) {
            RDF = RDF_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            exports_1("SCHEMA", SCHEMA = {
                "bNodeIdentifier": {
                    "@id": NS.C.Predicate.bNodeIdentifier,
                    "@type": NS.XSD.DataType.string
                }
            });
            Factory = function () {
                function Factory() {}
                Factory.createFrom = function (object, idOrDocument, document) {
                    var id = !!idOrDocument && Utils.isString(idOrDocument) ? idOrDocument : RDF.URI.Util.generateBNodeID();
                    document = document || idOrDocument;
                    var fragment = Fragment.Factory.createFrom(object, id, document);
                    return Factory.decorate(fragment, fragment.bNodeIdentifier);
                };
                Factory.decorate = function (object, bNodeIdentifier) {
                    if (bNodeIdentifier === void 0) {
                        bNodeIdentifier = Utils.UUID.generate();
                    }
                    var bNode = object;
                    bNode.bNodeIdentifier = bNodeIdentifier;
                    return bNode;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("53", ["5", "56", "6", "8", "9", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Errors, ObjectSchema, NS, Pointer, RDF, Utils;
    var Class;
    return {
        setters: [function (Errors_1) {
            Errors = Errors_1;
        }, function (ObjectSchema_1) {
            ObjectSchema = ObjectSchema_1;
        }, function (NS_1) {
            NS = NS_1;
        }, function (Pointer_1) {
            Pointer = Pointer_1;
        }, function (RDF_1) {
            RDF = RDF_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            // TODO: Use Literal.Parsers to parse literals
            Class = function () {
                function Class(literalSerializers) {
                    this._literalSerializers = !!literalSerializers ? literalSerializers : Class.getDefaultSerializers();
                }
                Object.defineProperty(Class.prototype, "literalSerializers", {
                    get: function () {
                        return this._literalSerializers;
                    },
                    enumerable: true,
                    configurable: true
                });
                ;
                Class.getDefaultSerializers = function () {
                    var literalSerializers = new Map();
                    literalSerializers.set(NS.XSD.DataType.date, RDF.Literal.Serializers.XSD.dateSerializer);
                    literalSerializers.set(NS.XSD.DataType.dateTime, RDF.Literal.Serializers.XSD.dateTimeSerializer);
                    literalSerializers.set(NS.XSD.DataType.time, RDF.Literal.Serializers.XSD.timeSerializer);
                    literalSerializers.set(NS.XSD.DataType.integer, RDF.Literal.Serializers.XSD.integerSerializer);
                    literalSerializers.set(NS.XSD.DataType.int, RDF.Literal.Serializers.XSD.integerSerializer);
                    literalSerializers.set(NS.XSD.DataType.unsignedInt, RDF.Literal.Serializers.XSD.unsignedIntegerSerializer);
                    literalSerializers.set(NS.XSD.DataType.long, RDF.Literal.Serializers.XSD.integerSerializer);
                    literalSerializers.set(NS.XSD.DataType.unsignedLong, RDF.Literal.Serializers.XSD.unsignedIntegerSerializer);
                    literalSerializers.set(NS.XSD.DataType.float, RDF.Literal.Serializers.XSD.floatSerializer);
                    literalSerializers.set(NS.XSD.DataType.double, RDF.Literal.Serializers.XSD.floatSerializer);
                    literalSerializers.set(NS.XSD.DataType.boolean, RDF.Literal.Serializers.XSD.booleanSerializer);
                    literalSerializers.set(NS.XSD.DataType.string, RDF.Literal.Serializers.XSD.stringSerializer);
                    return literalSerializers;
                };
                Class.prototype.compact = function (expandedObjectOrObjects, targetObjectOrObjectsOrDigestedContext, digestedSchemaOrPointerLibrary, pointerLibrary) {
                    if (pointerLibrary === void 0) {
                        pointerLibrary = null;
                    }
                    var targetObjectOrObjects = !pointerLibrary ? null : targetObjectOrObjectsOrDigestedContext;
                    var digestedSchema = !pointerLibrary ? targetObjectOrObjectsOrDigestedContext : digestedSchemaOrPointerLibrary;
                    pointerLibrary = !pointerLibrary ? digestedSchemaOrPointerLibrary : pointerLibrary;
                    if (!Utils.isArray(expandedObjectOrObjects)) return this.compactSingle(expandedObjectOrObjects, targetObjectOrObjects, digestedSchema, pointerLibrary);
                    var expandedObjects = expandedObjectOrObjects;
                    var targetObjects = !!targetObjectOrObjects ? targetObjectOrObjects : [];
                    for (var i = 0, length = expandedObjects.length; i < length; i++) {
                        var expandedObject = expandedObjects[i];
                        var targetObject = targetObjects[i] = !!targetObjects[i] ? targetObjects[i] : {};
                        this.compactSingle(expandedObject, targetObject, digestedSchema, pointerLibrary);
                    }
                    return targetObjects;
                };
                Class.prototype.expand = function (compactedObjectOrObjects, generalSchema, digestedSchema) {
                    if (!Utils.isArray(compactedObjectOrObjects)) return this.expandSingle(compactedObjectOrObjects, generalSchema, digestedSchema);
                };
                Class.prototype.expandSingle = function (compactedObject, generalSchema, digestedSchema) {
                    var _this = this;
                    var expandedObject = {};
                    expandedObject["@id"] = !!compactedObject["id"] ? compactedObject["id"] : "";
                    if (!!compactedObject["types"]) expandedObject["@type"] = compactedObject["types"].map(function (type) {
                        return ObjectSchema.Util.resolveURI(type, generalSchema);
                    });
                    Utils.forEachOwnProperty(compactedObject, function (propertyName, value) {
                        if (propertyName === "id") return;
                        if (propertyName === "types") return;
                        var expandedValue;
                        var expandedPropertyName = null;
                        if (digestedSchema.properties.has(propertyName)) {
                            var definition = Utils.O.clone(digestedSchema.properties.get(propertyName), { objects: true });
                            if (definition.uri !== null) {
                                expandedPropertyName = definition.uri.toString();
                            } else if (digestedSchema.vocab !== null) {
                                expandedPropertyName = digestedSchema.vocab + propertyName;
                                definition.uri = new RDF.URI.Class(expandedPropertyName);
                            } else {
                                throw new Errors.InvalidJSONLDSyntaxError("The context doesn't have a default vocabulary and the object schema does not define a proper @id for the property '" + propertyName + "'");
                            }
                            expandedValue = _this.expandProperty(value, definition, generalSchema, digestedSchema);
                        } else if (RDF.URI.Util.isAbsolute(propertyName) || digestedSchema.vocab !== null) {
                            expandedValue = _this.expandPropertyValue(value, generalSchema, digestedSchema);
                            expandedPropertyName = ObjectSchema.Util.resolveURI(propertyName, generalSchema);
                        }
                        if (!expandedValue || !expandedPropertyName) return;
                        expandedObject[expandedPropertyName] = expandedValue;
                    });
                    return expandedObject;
                };
                Class.prototype.expandProperty = function (propertyValue, propertyDefinition, generalSchema, digestedSchema) {
                    switch (propertyDefinition.containerType) {
                        case null:
                            // Property is not a list
                            if (propertyDefinition.literal) {
                                return this.expandPropertyLiteral(propertyValue, propertyDefinition.literalType.toString());
                            } else if (propertyDefinition.literal === false) {
                                return this.expandPropertyPointer(propertyValue, generalSchema, digestedSchema);
                            } else {
                                return this.expandPropertyValue(propertyValue, generalSchema, digestedSchema);
                            }
                        case ObjectSchema.ContainerType.LIST:
                            if (propertyDefinition.literal) {
                                return this.expandPropertyLiteralList(propertyValue, propertyDefinition.literalType.toString());
                            } else if (propertyDefinition.literal === false) {
                                return this.expandPropertyPointerList(propertyValue, generalSchema, digestedSchema);
                            } else {
                                return this.expandPropertyList(propertyValue, generalSchema, digestedSchema);
                            }
                        case ObjectSchema.ContainerType.SET:
                            if (propertyDefinition.literal) {
                                return this.expandPropertyLiterals(propertyValue, propertyDefinition.literalType.toString());
                            } else if (propertyDefinition.literal === false) {
                                return this.expandPropertyPointers(propertyValue, generalSchema, digestedSchema);
                            } else {
                                return this.expandPropertyValues(propertyValue, generalSchema, digestedSchema);
                            }
                        case ObjectSchema.ContainerType.LANGUAGE:
                            return this.expandPropertyLanguageMap(propertyValue);
                        default:
                            throw new Errors.IllegalArgumentError("The containerType specified is not supported.");
                    }
                };
                Class.prototype.expandPropertyValue = function (propertyValue, generalSchema, digestedSchema) {
                    if (Utils.isArray(propertyValue)) {
                        return this.expandPropertyValues(propertyValue, generalSchema, digestedSchema);
                    } else {
                        var expandedValue = this.expandValue(propertyValue, generalSchema, digestedSchema);
                        if (!expandedValue) return null;
                        return [expandedValue];
                    }
                };
                Class.prototype.expandPropertyPointer = function (propertyValue, generalSchema, digestedSchema) {
                    var expandedPointer = this.expandPointer(propertyValue, generalSchema, digestedSchema);
                    if (!expandedPointer) return null;
                    return [expandedPointer];
                };
                Class.prototype.expandPropertyLiteral = function (propertyValue, literalType) {
                    // TODO: Language
                    var serializedValue = this.serializeLiteral(propertyValue, literalType);
                    if (serializedValue === null) return null;
                    return [{ "@value": serializedValue, "@type": literalType }];
                };
                Class.prototype.expandPropertyList = function (propertyValues, generalSchema, digestedSchema) {
                    propertyValues = Utils.isArray(propertyValues) ? propertyValues : [propertyValues];
                    var expandedArray = this.expandArray(propertyValues, generalSchema, digestedSchema);
                    if (!expandedArray) return null;
                    return [{ "@list": expandedArray }];
                };
                Class.prototype.expandPropertyPointerList = function (propertyValues, generalSchema, digestedSchema) {
                    var listValues = this.expandPropertyPointers(propertyValues, generalSchema, digestedSchema);
                    return [{ "@list": listValues }];
                };
                Class.prototype.expandPropertyLiteralList = function (propertyValues, literalType) {
                    var listValues = this.expandPropertyLiterals(propertyValues, literalType);
                    return [{ "@list": listValues }];
                };
                Class.prototype.expandPropertyValues = function (propertyValues, generalSchema, digestedSchema) {
                    propertyValues = Utils.isArray(propertyValues) ? propertyValues : [propertyValues];
                    var expandedArray = this.expandArray(propertyValues, generalSchema, digestedSchema);
                    if (!expandedArray) return null;
                    return expandedArray;
                };
                Class.prototype.expandPropertyPointers = function (propertyValues, generalSchema, digestedSchema) {
                    propertyValues = Utils.isArray(propertyValues) ? propertyValues : [propertyValues];
                    var expandedPointers = [];
                    for (var _i = 0, propertyValues_1 = propertyValues; _i < propertyValues_1.length; _i++) {
                        var propertyValue = propertyValues_1[_i];
                        var expandedPointer = this.expandPointer(propertyValue, generalSchema, digestedSchema);
                        if (!expandedPointer) continue;
                        expandedPointers.push(expandedPointer);
                    }
                    return expandedPointers;
                };
                Class.prototype.expandPropertyLiterals = function (propertyValues, literalType) {
                    propertyValues = Utils.isArray(propertyValues) ? propertyValues : [propertyValues];
                    var listValues = [];
                    for (var _i = 0, propertyValues_2 = propertyValues; _i < propertyValues_2.length; _i++) {
                        var propertyValue = propertyValues_2[_i];
                        var serializedValue = this.serializeLiteral(propertyValue, literalType);
                        if (!serializedValue) continue;
                        listValues.push({ "@value": serializedValue, "@type": literalType });
                    }
                    return listValues;
                };
                Class.prototype.expandPropertyLanguageMap = function (propertyValue) {
                    var _this = this;
                    if (!Utils.isObject(propertyValue)) {
                        // TODO: Warn of data loss
                        return null;
                    }
                    var mapValues = [];
                    Utils.forEachOwnProperty(propertyValue, function (languageTag, value) {
                        // TODO: Validate language tags
                        var serializedValue = _this.literalSerializers.get(NS.XSD.DataType.string).serialize(value);
                        mapValues.push({ "@value": serializedValue, "@type": NS.XSD.DataType.string, "@language": languageTag });
                    });
                    return mapValues;
                };
                Class.prototype.serializeLiteral = function (propertyValue, literalType) {
                    if (Pointer.Factory.is(propertyValue)) {
                        // TODO: Warn of data loss
                        return null;
                    }
                    if (!this.literalSerializers.has(literalType)) {
                        // TODO: Warn of data loss
                        return null;
                    }
                    try {
                        return this.literalSerializers.get(literalType).serialize(propertyValue);
                    } catch (error) {
                        // TODO: Warn of data loss
                        return null;
                    }
                };
                Class.prototype.expandPointer = function (propertyValue, generalSchema, digestedSchema) {
                    var notPointer = true;
                    var id;
                    if (Pointer.Factory.is(propertyValue)) {
                        notPointer = false;
                        propertyValue = propertyValue.id;
                    } else if (!Utils.isString(propertyValue)) {
                        propertyValue = null;
                    }
                    id = propertyValue;
                    if (!id) {
                        // TODO: Warn of data loss
                        return null;
                    }
                    id = ObjectSchema.Digester.resolvePrefixedURI(id, generalSchema);
                    if (generalSchema.properties.has(id)) {
                        var definition = generalSchema.properties.get(id);
                        if (definition.uri) id = definition.uri.stringValue;
                    }
                    if (notPointer && !!digestedSchema.vocab) id = ObjectSchema.Util.resolveURI(id, generalSchema);
                    return { "@id": id };
                };
                Class.prototype.expandArray = function (propertyValue, generalSchema, digestedSchema) {
                    var listValues = [];
                    for (var _i = 0, propertyValue_1 = propertyValue; _i < propertyValue_1.length; _i++) {
                        var listValue = propertyValue_1[_i];
                        var expandedValue = this.expandValue(listValue, generalSchema, digestedSchema);
                        if (!expandedValue) continue;
                        listValues.push(expandedValue);
                    }
                    if (!listValues.length) return null;
                    return listValues;
                };
                Class.prototype.expandValue = function (propertyValue, generalSchema, digestedSchema) {
                    if (Utils.isArray(propertyValue)) {
                        // TODO: Lists of lists are not currently supported by the spec
                        return null;
                    } else if (Pointer.Factory.is(propertyValue)) {
                        return this.expandPointer(propertyValue, generalSchema, digestedSchema);
                    } else {
                        return this.expandLiteral(propertyValue);
                    }
                };
                Class.prototype.expandLiteral = function (literalValue) {
                    var serializedValue;
                    var literalType;
                    switch (true) {
                        case Utils.isFunction(literalValue):
                            return null;
                        case Utils.isDate(literalValue):
                            literalType = NS.XSD.DataType.dateTime;
                            break;
                        case Utils.isNumber(literalValue):
                            literalType = NS.XSD.DataType.float;
                            break;
                        case Utils.isBoolean(literalValue):
                            literalType = NS.XSD.DataType.boolean;
                            break;
                        case Utils.isString(literalValue):
                            literalType = NS.XSD.DataType.string;
                            break;
                        default:
                            // TODO: Warn of data loss
                            return null;
                    }
                    serializedValue = this.literalSerializers.get(literalType).serialize(literalValue);
                    return { "@value": serializedValue, "@type": literalType };
                };
                Class.prototype.compactSingle = function (expandedObject, targetObject, digestedSchema, pointerLibrary) {
                    var _this = this;
                    var propertyURINameMap = this.getPropertyURINameMap(digestedSchema);
                    if (!expandedObject["@id"]) throw new Errors.IllegalArgumentError("The expandedObject doesn't have an @id defined.");
                    targetObject["id"] = expandedObject["@id"];
                    targetObject["types"] = !!expandedObject["@type"] ? expandedObject["@type"] : [];
                    Utils.forEachOwnProperty(expandedObject, function (propertyURI, value) {
                        if (propertyURI === "@id") return;
                        if (propertyURI === "@type") return;
                        var propertyName = propertyURI;
                        var propertyValues = expandedObject[propertyURI];
                        var definition;
                        if (propertyURINameMap.has(propertyURI)) {
                            propertyName = propertyURINameMap.get(propertyURI);
                            definition = digestedSchema.properties.get(propertyName);
                        } else {
                            if (digestedSchema.vocab !== null) propertyName = RDF.URI.Util.getRelativeURI(propertyURI, digestedSchema.vocab);
                            definition = new ObjectSchema.DigestedPropertyDefinition();
                            definition.containerType = _this.getPropertyContainerType(propertyValues);
                        }
                        targetObject[propertyName] = _this.getPropertyValue(expandedObject, propertyURI, definition, pointerLibrary);
                    });
                    return targetObject;
                };
                Class.prototype.getPropertyContainerType = function (propertyValues) {
                    if (propertyValues.length === 1) {
                        if (RDF.List.Factory.is(propertyValues[0])) return ObjectSchema.ContainerType.LIST;
                    } else {
                        return ObjectSchema.ContainerType.SET;
                    }
                    return null;
                };
                Class.prototype.getPropertyValue = function (expandedObject, propertyURI, propertyDefinition, pointerLibrary) {
                    switch (propertyDefinition.containerType) {
                        case null:
                            // Property is not a list
                            if (propertyDefinition.literal) {
                                return RDF.Node.Util.getPropertyLiteral(expandedObject, propertyURI, propertyDefinition.literalType.toString());
                            } else if (propertyDefinition.literal === false) {
                                return RDF.Node.Util.getPropertyPointer(expandedObject, propertyURI, pointerLibrary);
                            } else {
                                return RDF.Node.Util.getProperty(expandedObject, propertyURI, pointerLibrary);
                            }
                        case ObjectSchema.ContainerType.LIST:
                            if (propertyDefinition.literal) {
                                return RDF.Node.Util.getPropertyLiteralList(expandedObject, propertyURI, propertyDefinition.literalType.toString());
                            } else if (propertyDefinition.literal === false) {
                                return RDF.Node.Util.getPropertyPointerList(expandedObject, propertyURI, pointerLibrary);
                            } else {
                                return RDF.Node.Util.getPropertyList(expandedObject, propertyURI, pointerLibrary);
                            }
                        case ObjectSchema.ContainerType.SET:
                            if (propertyDefinition.literal) {
                                return RDF.Node.Util.getPropertyLiterals(expandedObject, propertyURI, propertyDefinition.literalType.toString());
                            } else if (propertyDefinition.literal === false) {
                                return RDF.Node.Util.getPropertyPointers(expandedObject, propertyURI, pointerLibrary);
                            } else {
                                return RDF.Node.Util.getProperties(expandedObject, propertyURI, pointerLibrary);
                            }
                        case ObjectSchema.ContainerType.LANGUAGE:
                            return RDF.Node.Util.getPropertyLanguageMap(expandedObject, propertyURI);
                        default:
                            throw new Errors.IllegalArgumentError("The containerType specified is not supported.");
                    }
                };
                Class.prototype.getPropertyURINameMap = function (digestedSchema) {
                    var map = new Map();
                    digestedSchema.properties.forEach(function (definition, propertyName) {
                        var uri;
                        if (definition.uri !== null) {
                            uri = definition.uri.toString();
                        } else if (digestedSchema.vocab !== null) {
                            uri = digestedSchema.vocab + propertyName;
                        } else {
                            throw new Errors.InvalidJSONLDSyntaxError("The context doesn't have a default vocabulary and the object schema does not define a proper @id for the property '" + propertyName + "'");
                        }
                        map.set(uri, propertyName);
                    });
                    return map;
                };
                return Class;
            }();
            exports_1("Class", Class);
            exports_1("default", Class);
        }
    };
});
$__System.register("65", ["35", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Resource, Utils;
    var Factory;
    return {
        setters: [function (Resource_1) {
            Resource = Resource_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (resource) {
                    return Utils.hasPropertyDefined(resource, "document");
                };
                Factory.create = function (idOrDocument, document) {
                    return this.createFrom({}, idOrDocument, document);
                };
                Factory.createFrom = function (object, idOrDocument, document) {
                    if (document === void 0) {
                        document = null;
                    }
                    var id = !!idOrDocument && Utils.isString(idOrDocument) ? idOrDocument : "";
                    document = document || idOrDocument;
                    var resource = Resource.Factory.createFrom(object, id);
                    if (Factory.hasClassProperties(resource)) return resource;
                    Object.defineProperties(resource, {
                        "document": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: document
                        }
                    });
                    return resource;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("66", ["65", "9", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Fragment, RDF, Utils;
    var Factory;
    return {
        setters: [function (Fragment_1) {
            Fragment = Fragment_1;
        }, function (RDF_1) {
            RDF = RDF_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (resource) {
                    return Utils.hasPropertyDefined(resource, "slug");
                };
                Factory.create = function (slug, document) {
                    return this.createFrom({}, slug, document);
                };
                Factory.createFrom = function (object, slug, document) {
                    var uri = document.id + "#" + slug;
                    var fragment = Fragment.Factory.createFrom(object, uri, document);
                    if (this.hasClassProperties(fragment)) return fragment;
                    Object.defineProperties(fragment, {
                        "slug": {
                            enumerable: false,
                            configurable: true,
                            get: function () {
                                return RDF.URI.Util.getFragment(fragment.id);
                            },
                            set: function (value) {
                                this.id = this.document.id + "#" + value;
                            }
                        }
                    });
                    return fragment;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("35", ["8", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Pointer, Utils;
    var Factory, Util;
    function addType(type) {
        this.types.push(type);
    }
    function hasType(type) {
        return this.types.indexOf(type) !== -1;
    }
    function removeType(type) {
        var index = this.types.indexOf(type);
        if (index !== -1) this.types.splice(index, 1);
    }
    return {
        setters: [function (Pointer_1) {
            Pointer = Pointer_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (object) {
                    return Utils.hasPropertyDefined(object, "types") && Utils.hasFunction(object, "addType") && Utils.hasFunction(object, "hasType") && Utils.hasFunction(object, "removeType");
                };
                Factory.is = function (object) {
                    return Pointer.Factory.is(object) && Factory.hasClassProperties(object);
                };
                Factory.create = function (id, types) {
                    if (id === void 0) {
                        id = null;
                    }
                    if (types === void 0) {
                        types = null;
                    }
                    return Factory.createFrom({}, id, types);
                };
                Factory.createFrom = function (object, id, types) {
                    if (id === void 0) {
                        id = null;
                    }
                    if (types === void 0) {
                        types = null;
                    }
                    id = !!id ? id : object.id || "";
                    types = !!types ? types : object.types || [];
                    var resource = Factory.decorate(object);
                    resource.id = id;
                    resource.types = types;
                    return resource;
                };
                Factory.decorate = function (object) {
                    Pointer.Factory.decorate(object);
                    if (Factory.hasClassProperties(object)) return object;
                    Object.defineProperties(object, {
                        "types": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: []
                        },
                        "addType": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: addType
                        },
                        "hasType": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: hasType
                        },
                        "removeType": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: removeType
                        }
                    });
                    return object;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
            Util = function () {
                function Util() {}
                Util.hasType = function (resource, type) {
                    return Util.getTypes(resource).indexOf(type) !== -1;
                };
                Util.getTypes = function (resource) {
                    return resource.types || [];
                };
                return Util;
            }();
            exports_1("Util", Util);
        }
    };
});
$__System.register("15", ["64", "5", "53", "66", "6", "56", "8", "9", "35", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var BlankNode, Errors, Converter_1, NamedFragment, NS, ObjectSchema, Pointer, RDF, Resource, Utils;
    var RDF_CLASS, SCHEMA, Factory;
    function hasPointer(id) {
        var document = this;
        if (id === document.id) return true;
        if (!document.inScope(id)) return false;
        return document.hasFragment(id);
    }
    function getPointer(id) {
        var document = this;
        if (!document.inScope(id)) return null;
        if (id === document.id) return document;
        var fragment = document.getFragment(id);
        fragment = !fragment ? document.createFragment(id) : fragment;
        return fragment;
    }
    function inScope(idOrPointer) {
        var document = this;
        var id = Pointer.Factory.is(idOrPointer) ? idOrPointer.id : idOrPointer;
        if (id === document.id) return true;
        if (RDF.URI.Util.isBNodeID(id)) return true;
        if (RDF.URI.Util.isFragmentOf(id, document.id)) return true;
        return RDF.URI.Util.isFragmentOf(id, "");
    }
    function hasFragment(id) {
        var document = this;
        if (RDF.URI.Util.isAbsolute(id)) {
            if (!RDF.URI.Util.isFragmentOf(id, document.id)) return false;
            id = RDF.URI.Util.hasFragment(id) ? RDF.URI.Util.getFragment(id) : id;
        } else if (Utils.S.startsWith(id, "#")) id = id.substring(1);
        return document._fragmentsIndex.has(id);
    }
    function getFragment(id) {
        var document = this;
        if (!RDF.URI.Util.isBNodeID(id)) return document.getNamedFragment(id);
        return document._fragmentsIndex.get(id) || null;
    }
    function getNamedFragment(id) {
        var document = this;
        if (RDF.URI.Util.isBNodeID(id)) throw new Errors.IllegalArgumentError("Named fragments can't have a id that starts with '_:'.");
        if (RDF.URI.Util.isAbsolute(id)) {
            if (!RDF.URI.Util.isFragmentOf(id, document.id)) throw new Errors.IllegalArgumentError("The id is out of scope.");
            id = RDF.URI.Util.hasFragment(id) ? RDF.URI.Util.getFragment(id) : id;
        } else if (Utils.S.startsWith(id, "#")) id = id.substring(1);
        return document._fragmentsIndex.get(id) || null;
    }
    function getFragments() {
        var document = this;
        return Utils.A.from(document._fragmentsIndex.values());
    }
    function createFragment(slugOrObject, slug) {
        var document = this;
        slug = Utils.isString(slugOrObject) ? slugOrObject : slug;
        var object = !Utils.isString(slugOrObject) && !!slugOrObject ? slugOrObject : {};
        if (slug) {
            if (!RDF.URI.Util.isBNodeID(slug)) return document.createNamedFragment(object, slug);
            if (this._fragmentsIndex.has(slug)) throw new Errors.IDAlreadyInUseError("The slug provided is already being used by a fragment.");
        }
        var fragment = BlankNode.Factory.createFrom(object, slug, document);
        document._fragmentsIndex.set(fragment.id, fragment);
        convertNestedObjects(document, fragment);
        return fragment;
    }
    function createNamedFragment(slugOrObject, slug) {
        var document = this;
        slug = Utils.isString(slugOrObject) ? slugOrObject : slug;
        var object = !Utils.isString(slugOrObject) && !!slugOrObject ? slugOrObject : {};
        if (RDF.URI.Util.isBNodeID(slug)) throw new Errors.IllegalArgumentError("Named fragments can't have a slug that starts with '_:'.");
        if (RDF.URI.Util.isAbsolute(slug)) {
            if (!RDF.URI.Util.isFragmentOf(slug, document.id)) throw new Errors.IllegalArgumentError("The slug is out of scope.");
            slug = RDF.URI.Util.hasFragment(slug) ? RDF.URI.Util.getFragment(slug) : slug;
        } else if (Utils.S.startsWith(slug, "#")) slug = slug.substring(1);
        if (document._fragmentsIndex.has(slug)) throw new Errors.IDAlreadyInUseError("The slug provided is already being used by a fragment.");
        var fragment = NamedFragment.Factory.createFrom(object, slug, document);
        document._fragmentsIndex.set(slug, fragment);
        convertNestedObjects(document, fragment);
        return fragment;
    }
    function removeFragment(fragmentOrSlug) {
        var document = this;
        var id = Utils.isString(fragmentOrSlug) ? fragmentOrSlug : fragmentOrSlug.id;
        if (RDF.URI.Util.isAbsolute(id)) {
            if (!RDF.URI.Util.isFragmentOf(id, document.id)) return;
            id = RDF.URI.Util.hasFragment(id) ? RDF.URI.Util.getFragment(id) : id;
        } else if (Utils.S.startsWith(id, "#")) id = id.substring(1);
        document._fragmentsIndex.delete(id);
    }
    function removeNamedFragment(fragmentOrSlug) {
        var document = this;
        var id = Utils.isString(fragmentOrSlug) ? fragmentOrSlug : fragmentOrSlug.id;
        if (RDF.URI.Util.isBNodeID(id)) throw new Errors.IllegalArgumentError("You can only remove NamedFragments.");
        document._removeFragment(id);
    }
    function toJSON(objectSchemaResolver, jsonldConverter) {
        if (objectSchemaResolver === void 0) {
            objectSchemaResolver = null;
        }
        if (jsonldConverter === void 0) {
            jsonldConverter = null;
        }
        var generalSchema = objectSchemaResolver ? objectSchemaResolver.getGeneralSchema() : new ObjectSchema.DigestedObjectSchema();
        jsonldConverter = !!jsonldConverter ? jsonldConverter : new Converter_1.default();
        var resources = [];
        resources.push(this);
        resources = resources.concat(this.getFragments());
        var expandedResources = [];
        for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {
            var resource = resources_1[_i];
            var resourceSchema = objectSchemaResolver ? objectSchemaResolver.getSchemaFor(resource) : new ObjectSchema.DigestedObjectSchema();
            expandedResources.push(jsonldConverter.expand(resource, generalSchema, resourceSchema));
        }
        var graph = {
            "@id": this.id,
            "@graph": expandedResources
        };
        return JSON.stringify(graph);
    }
    function normalize() {
        var _this = this;
        var currentFragments = this.getFragments().filter(function (fragment) {
            return RDF.URI.Util.isBNodeID(fragment.id);
        });
        var usedFragmentsIDs = new Set();
        convertNestedObjects(this, this, usedFragmentsIDs);
        currentFragments.forEach(function (fragment) {
            if (!usedFragmentsIDs.has(fragment.id)) {
                _this._fragmentsIndex.delete(fragment.id);
            }
        });
    }
    function convertNestedObjects(parent, actual, fragmentsTracker) {
        var next;
        var idOrSlug;
        var fragment;
        var keys = Object.keys(actual);
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
            var key = keys_1[_i];
            next = actual[key];
            if (Utils.isArray(next)) {
                convertNestedObjects(parent, next, fragmentsTracker);
                continue;
            }
            if (!Utils.isPlainObject(next)) continue;
            if (Pointer.Factory.is(next)) {
                if (parent.hasFragment(next.id)) {
                    if (fragmentsTracker) fragmentsTracker.add(next.id);
                    convertNestedObjects(parent, next, fragmentsTracker);
                }
                continue;
            }
            idOrSlug = "id" in next ? next.id : "slug" in next ? "#" + next.slug : "";
            if (!!idOrSlug && !parent.inScope(idOrSlug)) continue;
            var parentFragment = parent.getFragment(idOrSlug);
            if (!parentFragment) {
                fragment = parent.createFragment(next, idOrSlug);
                convertNestedObjects(parent, fragment, fragmentsTracker);
            } else if (parentFragment !== next) {
                Object.assign(parentFragment, next);
                fragment = actual[key] = parentFragment;
                convertNestedObjects(parent, fragment, fragmentsTracker);
            }
        }
    }
    return {
        setters: [function (BlankNode_1) {
            BlankNode = BlankNode_1;
        }, function (Errors_1) {
            Errors = Errors_1;
        }, function (Converter_1_1) {
            Converter_1 = Converter_1_1;
        }, function (NamedFragment_1) {
            NamedFragment = NamedFragment_1;
        }, function (NS_1) {
            NS = NS_1;
        }, function (ObjectSchema_1) {
            ObjectSchema = ObjectSchema_1;
        }, function (Pointer_1) {
            Pointer = Pointer_1;
        }, function (RDF_1) {
            RDF = RDF_1;
        }, function (Resource_1) {
            Resource = Resource_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            exports_1("RDF_CLASS", RDF_CLASS = NS.C.Class.Document);
            exports_1("SCHEMA", SCHEMA = {
                "contains": {
                    "@id": NS.LDP.Predicate.contains,
                    "@container": "@set",
                    "@type": "@id"
                },
                "members": {
                    "@id": NS.LDP.Predicate.member,
                    "@container": "@set",
                    "@type": "@id"
                },
                "membershipResource": {
                    "@id": NS.LDP.Predicate.membershipResource,
                    "@type": "@id"
                },
                "isMemberOfRelation": {
                    "@id": NS.LDP.Predicate.isMemberOfRelation,
                    "@type": "@id"
                },
                "hasMemberRelation": {
                    "@id": NS.LDP.Predicate.hasMemberRelation,
                    "@type": "@id"
                },
                "insertedContentRelation": {
                    "@id": NS.LDP.Predicate.insertedContentRelation,
                    "@type": "@id"
                },
                "created": {
                    "@id": NS.C.Predicate.created,
                    "@type": NS.XSD.DataType.dateTime
                },
                "modified": {
                    "@id": NS.C.Predicate.modified,
                    "@type": NS.XSD.DataType.dateTime
                },
                "defaultInteractionModel": {
                    "@id": NS.C.Predicate.defaultInteractionModel,
                    "@type": "@id"
                },
                "accessPoints": {
                    "@id": NS.C.Predicate.accessPoint,
                    "@type": "@id",
                    "@container": "@set"
                }
            });
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (documentResource) {
                    return Utils.isObject(documentResource) && Utils.hasPropertyDefined(documentResource, "_fragmentsIndex") && Utils.hasFunction(documentResource, "_normalize") && Utils.hasFunction(documentResource, "_removeFragment") && Utils.hasFunction(documentResource, "hasFragment") && Utils.hasFunction(documentResource, "getFragment") && Utils.hasFunction(documentResource, "getNamedFragment") && Utils.hasFunction(documentResource, "getFragments") && Utils.hasFunction(documentResource, "createFragment") && Utils.hasFunction(documentResource, "createNamedFragment") && Utils.hasFunction(documentResource, "removeNamedFragment") && Utils.hasFunction(documentResource, "toJSON");
                };
                Factory.is = function (object) {
                    return Resource.Factory.is(object) && Factory.hasClassProperties(object);
                };
                Factory.create = function () {
                    return Factory.createFrom({});
                };
                Factory.createFrom = function (object) {
                    if (Factory.is(object)) throw new Errors.IllegalArgumentError("The object provided is already a Document");
                    var resource = object;
                    if (!Resource.Factory.is(object)) resource = Resource.Factory.createFrom(object);
                    var document = Factory.decorate(resource);
                    convertNestedObjects(document, document);
                    return document;
                };
                Factory.decorate = function (object) {
                    Resource.Factory.decorate(object);
                    if (Factory.hasClassProperties(object)) return object;
                    Object.defineProperties(object, {
                        "_fragmentsIndex": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: new Map()
                        },
                        "_normalize": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: normalize
                        },
                        "_removeFragment": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: removeFragment
                        },
                        "hasPointer": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: hasPointer
                        },
                        "getPointer": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: getPointer
                        },
                        "inScope": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: inScope
                        },
                        "hasFragment": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: hasFragment
                        },
                        "getFragment": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: getFragment
                        },
                        "getNamedFragment": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: getNamedFragment
                        },
                        "getFragments": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: getFragments
                        },
                        "createFragment": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: createFragment
                        },
                        "createNamedFragment": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: createNamedFragment
                        },
                        "removeNamedFragment": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: removeNamedFragment
                        },
                        "toJSON": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: toJSON
                        }
                    });
                    return object;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("67", ["a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Utils;
    var Factory;
    function syncSnapshot() {
        var resource = this;
        resource._snapshot = Utils.O.clone(resource, { arrays: true });
        if ("id" in resource) resource._snapshot.id = resource.id;
        if ("types" in resource) resource._snapshot.types = Utils.O.clone(resource.types);
    }
    function isDirty() {
        var resource = this;
        if (!Utils.O.areEqual(resource, resource._snapshot, { arrays: true }, { id: true, types: true })) return true;
        var response = false;
        if ("id" in resource) response = response || resource._snapshot.id !== resource.id;
        if ("types" in resource) response = response || !Utils.O.areEqual(resource._snapshot.types, resource.types);
        return response;
    }
    function revert() {
        var resource = this;
        for (var _i = 0, _a = Object.keys(resource); _i < _a.length; _i++) {
            var key = _a[_i];
            if (!(key in resource._snapshot)) delete resource[key];
        }
        Utils.O.extend(resource, resource._snapshot, { arrays: true });
    }
    return {
        setters: [function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (object) {
                    return Utils.hasPropertyDefined(object, "_snapshot") && Utils.hasFunction(object, "_syncSnapshot") && Utils.hasFunction(object, "isDirty") && Utils.hasFunction(object, "revert");
                };
                Factory.decorate = function (object, snapshot) {
                    if (snapshot === void 0) {
                        snapshot = {};
                    }
                    if (Factory.hasClassProperties(object)) return object;
                    var persistedResource = object;
                    Object.defineProperties(persistedResource, {
                        "_snapshot": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: snapshot
                        },
                        "_syncSnapshot": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: syncSnapshot
                        },
                        "isDirty": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: isDirty
                        },
                        "revert": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: revert
                        }
                    });
                    return persistedResource;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("68", ["56", "67", "9"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var ObjectSchema, PersistedResource, RDF;
    var Factory;
    function resolveURI(uri) {
        if (RDF.URI.Util.isAbsolute(uri)) return uri;
        var schema = this.document._documents.getGeneralSchema();
        return ObjectSchema.Util.resolveURI(uri, schema);
    }
    function extendAddType(superFunction) {
        return function (type) {
            type = resolveURI.call(this, type);
            superFunction.call(this, type);
        };
    }
    function extendHasType(superFunction) {
        return function (type) {
            type = resolveURI.call(this, type);
            return superFunction.call(this, type);
        };
    }
    function extendRemoveType(superFunction) {
        return function (type) {
            type = resolveURI.call(this, type);
            superFunction.call(this, type);
        };
    }
    return {
        setters: [function (ObjectSchema_1) {
            ObjectSchema = ObjectSchema_1;
        }, function (PersistedResource_1) {
            PersistedResource = PersistedResource_1;
        }, function (RDF_1) {
            RDF = RDF_1;
        }],
        execute: function () {
            Factory = function () {
                function Factory() {}
                Factory.decorate = function (fragment, snapshot) {
                    if (snapshot === void 0) {
                        snapshot = {};
                    }
                    PersistedResource.Factory.decorate(fragment, snapshot);
                    Object.defineProperties(fragment, {
                        "addType": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: extendAddType(fragment.addType)
                        },
                        "hasType": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: extendHasType(fragment.hasType)
                        },
                        "removeType": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: extendRemoveType(fragment.removeType)
                        }
                    });
                    return fragment;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("69", ["68"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var PersistedFragment;
    var Factory;
    return {
        setters: [function (PersistedFragment_1) {
            PersistedFragment = PersistedFragment_1;
        }],
        execute: function () {
            Factory = function () {
                function Factory() {}
                Factory.decorate = function (fragment, snapshot) {
                    if (snapshot === void 0) {
                        snapshot = {};
                    }
                    PersistedFragment.Factory.decorate(fragment, snapshot);
                    return fragment;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("8", ["5", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Errors, Utils;
    var Factory, Util;
    return {
        setters: [function (Errors_1) {
            Errors = Errors_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (object) {
                    return !!(Utils.hasPropertyDefined(object, "_id") && Utils.hasPropertyDefined(object, "_resolved") && Utils.hasPropertyDefined(object, "id") && Utils.hasFunction(object, "isResolved") && Utils.hasPropertyDefined(object, "resolve"));
                };
                Factory.is = function (value) {
                    return !!(Utils.isObject(value) && Factory.hasClassProperties(value));
                };
                Factory.create = function (id) {
                    return Factory.createFrom({}, id);
                };
                Factory.createFrom = function (object, id) {
                    id = !!id ? id : "";
                    var pointer = Factory.decorate(object);
                    pointer.id = id;
                    return pointer;
                };
                Factory.decorate = function (object) {
                    if (Factory.hasClassProperties(object)) return object;
                    Object.defineProperties(object, {
                        "_id": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: ""
                        },
                        "_resolved": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: false
                        },
                        "id": {
                            enumerable: false,
                            configurable: true,
                            get: function () {
                                if (!this._id) return "";
                                return this._id;
                            },
                            set: function (value) {
                                this._id = value;
                            }
                        },
                        "isResolved": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: function () {
                                return this._resolved;
                            }
                        },
                        "resolve": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: function () {
                                return Promise.reject(new Errors.NotImplementedError("A simple pointer cannot be resolved by it self."));
                            }
                        }
                    });
                    return object;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
            Util = function () {
                function Util() {}
                Util.areEqual = function (pointer1, pointer2) {
                    return pointer1.id === pointer2.id;
                };
                Util.getIDs = function (pointers) {
                    var ids = [];
                    for (var _i = 0, pointers_1 = pointers; _i < pointers_1.length; _i++) {
                        var pointer = pointers_1[_i];
                        ids.push(pointer.id);
                    }
                    return ids;
                };
                Util.resolveAll = function (pointers) {
                    var promises = pointers.map(function (pointer) {
                        return pointer.resolve();
                    });
                    return Promise.all(promises).then(function (results) {
                        var resolvedPointers = results.map(function (result) {
                            return result[0];
                        });
                        var responses = results.map(function (result) {
                            return result[1];
                        });
                        return [resolvedPointers, responses];
                    });
                };
                return Util;
            }();
            exports_1("Util", Util);
        }
    };
});
$__System.register("54", ["15", "4a", "56", "67", "68", "69", "8", "9", "a", "42"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Document, HTTP, ObjectSchema, PersistedResource, PersistedFragment, PersistedNamedFragment, Pointer, RDF, Utils, URI;
    var Factory;
    function extendIsDirty(superFunction) {
        return function () {
            var isDirty = superFunction.call(this);
            if (isDirty) return true;
            var document = this;
            for (var _i = 0, _a = document.getFragments(); _i < _a.length; _i++) {
                var fragment = _a[_i];
                if (fragment.isDirty()) return true;
            }
            // Check if an already saved fragment was removed
            for (var _b = 0, _c = document._savedFragments; _b < _c.length; _b++) {
                var fragment = _c[_b];
                if (!document.hasFragment(fragment.id)) return true;
            }
            return false;
        };
    }
    function extendRevert(superFunction) {
        return function () {
            var persistedDocument = this;
            persistedDocument._fragmentsIndex.clear();
            for (var _i = 0, _a = persistedDocument._savedFragments; _i < _a.length; _i++) {
                var fragment = _a[_i];
                var slug = "slug" in fragment ? fragment.slug : fragment.id;
                fragment.revert();
                persistedDocument._fragmentsIndex.set(slug, fragment);
            }
            superFunction.call(persistedDocument);
        };
    }
    function syncSavedFragments() {
        var document = this;
        document._savedFragments = Utils.A.from(document._fragmentsIndex.values());
    }
    function resolveURI(uri) {
        if (URI.Util.isAbsolute(uri)) return uri;
        var schema = this._documents.getGeneralSchema();
        return ObjectSchema.Util.resolveURI(uri, schema);
    }
    function extendAddType(superFunction) {
        return function (type) {
            type = resolveURI.call(this, type);
            superFunction.call(this, type);
        };
    }
    function extendHasType(superFunction) {
        return function (type) {
            type = resolveURI.call(this, type);
            return superFunction.call(this, type);
        };
    }
    function extendRemoveType(superFunction) {
        return function (type) {
            type = resolveURI.call(this, type);
            superFunction.call(this, type);
        };
    }
    function extendCreateFragment(superFunction) {
        return function (slugOrObject, slug) {
            var fragment = superFunction.call(this, slugOrObject, slug);
            var id = fragment.id;
            if (RDF.URI.Util.isBNodeID(id)) {
                PersistedFragment.Factory.decorate(fragment);
            } else {
                PersistedNamedFragment.Factory.decorate(fragment);
            }
            return fragment;
        };
    }
    function extendCreateNamedFragment(superFunction) {
        return function (slugOrObject, slug) {
            var fragment = superFunction.call(this, slugOrObject, slug);
            return PersistedFragment.Factory.decorate(fragment);
        };
    }
    function refresh() {
        return this._documents.refresh(this);
    }
    function save() {
        return this._documents.save(this);
    }
    function saveAndRefresh() {
        return this._documents.saveAndRefresh(this);
    }
    function _delete() {
        return this._documents.delete(this.id);
    }
    function getDownloadURL() {
        return this._documents.getDownloadURL(this.id);
    }
    function addMember(memberOrUri) {
        return this._documents.addMember(this.id, memberOrUri);
    }
    function addMembers(members) {
        return this._documents.addMembers(this.id, members);
    }
    function createChild(objectOrSlugOrRequestOptions, slugOrRequestOptions, requestOptions) {
        if (requestOptions === void 0) {
            requestOptions = {};
        }
        requestOptions = HTTP.Request.Util.isOptions(objectOrSlugOrRequestOptions) ? objectOrSlugOrRequestOptions : HTTP.Request.Util.isOptions(slugOrRequestOptions) ? slugOrRequestOptions : requestOptions;
        var object = Utils.isString(objectOrSlugOrRequestOptions) || HTTP.Request.Util.isOptions(objectOrSlugOrRequestOptions) || !objectOrSlugOrRequestOptions ? {} : objectOrSlugOrRequestOptions;
        var slug = Utils.isString(objectOrSlugOrRequestOptions) ? objectOrSlugOrRequestOptions : Utils.isString(slugOrRequestOptions) ? slugOrRequestOptions : null;
        return this._documents.createChild(this.id, object, slug, requestOptions);
    }
    function createChildAndRetrieve(objectOrSlugOrRequestOptions, slugOrRequestOptions, requestOptions) {
        if (requestOptions === void 0) {
            requestOptions = {};
        }
        requestOptions = HTTP.Request.Util.isOptions(objectOrSlugOrRequestOptions) ? objectOrSlugOrRequestOptions : HTTP.Request.Util.isOptions(slugOrRequestOptions) ? slugOrRequestOptions : requestOptions;
        var object = Utils.isString(objectOrSlugOrRequestOptions) || HTTP.Request.Util.isOptions(objectOrSlugOrRequestOptions) || !objectOrSlugOrRequestOptions ? {} : objectOrSlugOrRequestOptions;
        var slug = Utils.isString(objectOrSlugOrRequestOptions) ? objectOrSlugOrRequestOptions : Utils.isString(slugOrRequestOptions) ? slugOrRequestOptions : null;
        return this._documents.createChildAndRetrieve(this.id, object, slug, requestOptions);
    }
    function createAccessPoint(accessPoint, slugOrRequestOptions, requestOptions) {
        return this._documents.createAccessPoint(this.id, accessPoint, slugOrRequestOptions, requestOptions);
    }
    function listChildren() {
        return this._documents.listChildren(this.id);
    }
    function getChildren(retrievalPreferences) {
        return this._documents.getChildren(this.id, retrievalPreferences);
    }
    function listMembers(includeNonReadable) {
        if (includeNonReadable === void 0) {
            includeNonReadable = true;
        }
        return this._documents.listMembers(this.id, includeNonReadable);
    }
    function getMembers(nonReadRetPref, retrievalPreferences) {
        if (nonReadRetPref === void 0) {
            nonReadRetPref = true;
        }
        return this._documents.getMembers(this.id, nonReadRetPref, retrievalPreferences);
    }
    function removeMember(memberOrUri) {
        return this._documents.removeMember(this.id, memberOrUri);
    }
    function removeMembers(members) {
        return this._documents.removeMembers(this.id, members);
    }
    function removeAllMembers() {
        return this._documents.removeAllMembers(this.id);
    }
    function upload(data, slug) {
        return this._documents.upload(this.id, data, slug);
    }
    function executeRawASKQuery(askQuery, requestOptions) {
        if (requestOptions === void 0) {
            requestOptions = {};
        }
        return this._documents.executeRawASKQuery(this.id, askQuery, requestOptions);
    }
    function executeASKQuery(askQuery, requestOptions) {
        if (requestOptions === void 0) {
            requestOptions = {};
        }
        return this._documents.executeASKQuery(this.id, askQuery, requestOptions);
    }
    function executeRawSELECTQuery(selectQuery, requestOptions) {
        if (requestOptions === void 0) {
            requestOptions = {};
        }
        return this._documents.executeRawSELECTQuery(this.id, selectQuery, requestOptions);
    }
    function executeSELECTQuery(selectQuery, requestOptions) {
        if (requestOptions === void 0) {
            requestOptions = {};
        }
        return this._documents.executeSELECTQuery(this.id, selectQuery, requestOptions);
    }
    function executeRawCONSTRUCTQuery(constructQuery, requestOptions) {
        if (requestOptions === void 0) {
            requestOptions = {};
        }
        return this._documents.executeRawCONSTRUCTQuery(this.id, constructQuery, requestOptions);
    }
    function executeRawDESCRIBEQuery(describeQuery, requestOptions) {
        if (requestOptions === void 0) {
            requestOptions = {};
        }
        return this._documents.executeRawDESCRIBEQuery(this.id, describeQuery, requestOptions);
    }
    function executeUPDATE(updateQuery, requestOptions) {
        if (requestOptions === void 0) {
            requestOptions = {};
        }
        return this._documents.executeUPDATE(this.id, updateQuery, requestOptions);
    }
    return {
        setters: [function (Document_1) {
            Document = Document_1;
        }, function (HTTP_1) {
            HTTP = HTTP_1;
        }, function (ObjectSchema_1) {
            ObjectSchema = ObjectSchema_1;
        }, function (PersistedResource_1) {
            PersistedResource = PersistedResource_1;
        }, function (PersistedFragment_1) {
            PersistedFragment = PersistedFragment_1;
        }, function (PersistedNamedFragment_1) {
            PersistedNamedFragment = PersistedNamedFragment_1;
        }, function (Pointer_1) {
            Pointer = Pointer_1;
        }, function (RDF_1) {
            RDF = RDF_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }, function (URI_1) {
            URI = URI_1;
        }],
        execute: function () {
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (object) {
                    return Utils.hasPropertyDefined(object, "_documents") && Utils.hasPropertyDefined(object, "_etag") && Utils.hasFunction(object, "refresh") && Utils.hasFunction(object, "save") && Utils.hasFunction(object, "saveAndRefresh") && Utils.hasFunction(object, "delete") && Utils.hasFunction(object, "getDownloadURL") && Utils.hasFunction(object, "addMember") && Utils.hasFunction(object, "addMembers") && Utils.hasFunction(object, "createAccessPoint") && Utils.hasFunction(object, "createChild") && Utils.hasFunction(object, "createChildAndRetrieve") && Utils.hasFunction(object, "getChildren") && Utils.hasFunction(object, "getMembers") && Utils.hasFunction(object, "listChildren") && Utils.hasFunction(object, "listMembers") && Utils.hasFunction(object, "removeMember") && Utils.hasFunction(object, "removeMembers") && Utils.hasFunction(object, "removeAllMembers") && Utils.hasFunction(object, "upload") && Utils.hasFunction(object, "executeRawASKQuery") && Utils.hasFunction(object, "executeASKQuery") && Utils.hasFunction(object, "executeRawSELECTQuery") && Utils.hasFunction(object, "executeSELECTQuery") && Utils.hasFunction(object, "executeRawDESCRIBEQuery") && Utils.hasFunction(object, "executeRawCONSTRUCTQuery") && Utils.hasFunction(object, "executeUPDATE");
                };
                Factory.is = function (object) {
                    return Factory.hasClassProperties(object) && Document.Factory.is(object);
                };
                Factory.create = function (uri, documents, snapshot) {
                    if (snapshot === void 0) {
                        snapshot = {};
                    }
                    var document = Document.Factory.create();
                    document.id = uri;
                    return Factory.decorate(document, documents, snapshot);
                };
                Factory.createFrom = function (object, uri, documents, snapshot) {
                    if (snapshot === void 0) {
                        snapshot = {};
                    }
                    var document = Document.Factory.createFrom(object);
                    document.id = uri;
                    return Factory.decorate(document, documents, snapshot);
                };
                Factory.decorate = function (document, documents, snapshot) {
                    if (snapshot === void 0) {
                        snapshot = {};
                    }
                    Document.Factory.decorate(document);
                    PersistedResource.Factory.decorate(document, snapshot);
                    if (Factory.hasClassProperties(document)) return document;
                    var persistedDocument = document;
                    Object.defineProperties(persistedDocument, {
                        "_documents": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: documents
                        },
                        "_etag": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: null
                        },
                        "_savedFragments": {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: []
                        },
                        "_syncSavedFragments": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: syncSavedFragments
                        },
                        "addType": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: extendAddType(persistedDocument.addType)
                        },
                        "hasType": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: extendHasType(persistedDocument.hasType)
                        },
                        "removeType": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: extendRemoveType(persistedDocument.removeType)
                        },
                        "hasPointer": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: function () {
                                var superFunction = persistedDocument.hasPointer;
                                return function (id) {
                                    if (RDF.URI.Util.isPrefixed(id)) {
                                        id = ObjectSchema.Digester.resolvePrefixedURI(id, this._documents.getGeneralSchema());
                                    }
                                    if (superFunction.call(this, id)) return true;
                                    return !URI.Util.isBNodeID(id) && this._documents.hasPointer(id);
                                };
                            }()
                        },
                        "getPointer": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: function () {
                                var superFunction = persistedDocument.getPointer;
                                var inScopeFunction = persistedDocument.inScope;
                                return function (id) {
                                    if (RDF.URI.Util.isPrefixed(id)) {
                                        id = ObjectSchema.Digester.resolvePrefixedURI(id, this._documents.getGeneralSchema());
                                    }
                                    if (inScopeFunction.call(this, id)) return superFunction.call(this, id);
                                    return this._documents.getPointer(id);
                                };
                            }()
                        },
                        "inScope": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: function () {
                                var superFunction = persistedDocument.inScope;
                                return function (idOrPointer) {
                                    var uri = Pointer.Factory.is(idOrPointer) ? idOrPointer.id : idOrPointer;
                                    if (RDF.URI.Util.isPrefixed(uri)) {
                                        uri = ObjectSchema.Digester.resolvePrefixedURI(uri, this._documents.getGeneralSchema());
                                    }
                                    if (superFunction.call(this, uri)) return true;
                                    return this._documents.inScope(uri);
                                };
                            }()
                        },
                        "refresh": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: refresh
                        },
                        "save": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: save
                        },
                        "saveAndRefresh": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: saveAndRefresh
                        },
                        "delete": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: _delete
                        },
                        "getDownloadURL": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: getDownloadURL
                        },
                        "addMember": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: addMember
                        },
                        "addMembers": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: addMembers
                        },
                        "createChild": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: createChild
                        },
                        "createChildAndRetrieve": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: createChildAndRetrieve
                        },
                        "createAccessPoint": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: createAccessPoint
                        },
                        "listChildren": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: listChildren
                        },
                        "getChildren": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: getChildren
                        },
                        "listMembers": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: listMembers
                        },
                        "getMembers": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: getMembers
                        },
                        "removeMember": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: removeMember
                        },
                        "removeMembers": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: removeMembers
                        },
                        "removeAllMembers": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: removeAllMembers
                        },
                        "upload": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: upload
                        },
                        "executeRawASKQuery": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: executeRawASKQuery
                        },
                        "executeASKQuery": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: executeASKQuery
                        },
                        "executeRawSELECTQuery": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: executeRawSELECTQuery
                        },
                        "executeSELECTQuery": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: executeSELECTQuery
                        },
                        "executeRawCONSTRUCTQuery": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: executeRawCONSTRUCTQuery
                        },
                        "executeRawDESCRIBEQuery": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: executeRawDESCRIBEQuery
                        },
                        "executeUPDATE": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: executeUPDATE
                        },
                        "createFragment": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: extendCreateFragment(persistedDocument.createFragment)
                        },
                        "createNamedFragment": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: extendCreateNamedFragment(persistedDocument.createNamedFragment)
                        },
                        // Overwrite PersistedResource.isDirty to take into account fragments state
                        "isDirty": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: extendIsDirty(persistedDocument.isDirty)
                        },
                        "revert": {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: extendRevert(persistedDocument.revert)
                        }
                    });
                    return persistedDocument;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("6a", ["6", "54", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var NS, PersistedDocument, Utils;
    var RDF_CLASS, SCHEMA, Factory;
    return {
        setters: [function (NS_1) {
            NS = NS_1;
        }, function (PersistedDocument_1) {
            PersistedDocument = PersistedDocument_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            exports_1("RDF_CLASS", RDF_CLASS = NS.C.Class.RDFRepresentation);
            exports_1("SCHEMA", SCHEMA = {
                "mediaType": {
                    "@id": NS.C.Predicate.mediaType,
                    "@type": NS.XSD.DataType.string
                },
                "size": {
                    "@id": NS.C.Predicate.size,
                    "@type": NS.XSD.DataType.long
                }
            });
            Factory = function () {
                function Factory() {}
                Factory.hasClassProperties = function (object) {
                    return Utils.hasPropertyDefined(object, "mediaType") && Utils.hasPropertyDefined(object, "size");
                };
                Factory.is = function (object) {
                    return Factory.hasClassProperties(object) && PersistedDocument.Factory.is(object) && object.hasType(RDF_CLASS);
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("c", ["10", "3c", "14", "64", "58", "5d", "63", "5", "3e", "6", "56", "59", "9", "6a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var AppRole, APIDescription, Auth, BlankNode, Documents_1, Error, ErrorResponse, Errors, LDP, NS, ObjectSchema, ProtectedDocument, RDF, RDFRepresentation;
    var Class, instance;
    return {
        setters: [function (AppRole_1) {
            AppRole = AppRole_1;
        }, function (APIDescription_1) {
            APIDescription = APIDescription_1;
        }, function (Auth_1) {
            Auth = Auth_1;
        }, function (BlankNode_1) {
            BlankNode = BlankNode_1;
        }, function (Documents_1_1) {
            Documents_1 = Documents_1_1;
        }, function (Error_1) {
            Error = Error_1;
        }, function (ErrorResponse_1) {
            ErrorResponse = ErrorResponse_1;
        }, function (Errors_1) {
            Errors = Errors_1;
        }, function (LDP_1) {
            LDP = LDP_1;
        }, function (NS_1) {
            NS = NS_1;
        }, function (ObjectSchema_1) {
            ObjectSchema = ObjectSchema_1;
        }, function (ProtectedDocument_1) {
            ProtectedDocument = ProtectedDocument_1;
        }, function (RDF_1) {
            RDF = RDF_1;
        }, function (RDFRepresentation_1) {
            RDFRepresentation = RDFRepresentation_1;
        }],
        execute: function () {
            Class = function () {
                function Class() {
                    this.settings = new Map();
                    this.generalObjectSchema = new ObjectSchema.DigestedObjectSchema();
                    this.typeObjectSchemaMap = new Map();
                    this.auth = null;
                    this.documents = new Documents_1.default(this);
                    this.registerDefaultObjectSchemas();
                }
                Object.defineProperty(Class.prototype, "parentContext", {
                    get: function () {
                        return null;
                    },
                    enumerable: true,
                    configurable: true
                });
                Class.prototype.getBaseURI = function () {
                    return this.resolve("");
                };
                Class.prototype.resolve = function (relativeURI) {
                    return relativeURI;
                };
                Class.prototype.hasSetting = function (name) {
                    return this.settings.has(name) || !!this.parentContext && this.parentContext.hasSetting(name);
                };
                Class.prototype.getSetting = function (name) {
                    if (this.settings.has(name)) return this.settings.get(name);
                    if (this.parentContext && this.parentContext.hasSetting(name)) return this.parentContext.getSetting(name);
                    return null;
                };
                Class.prototype.setSetting = function (name, value) {
                    this.settings.set(name, value);
                };
                Class.prototype.deleteSetting = function (name) {
                    this.settings.delete(name);
                };
                Class.prototype.hasObjectSchema = function (type) {
                    type = this.resolveTypeURI(type);
                    if (this.typeObjectSchemaMap.has(type)) return true;
                    if (!!this.parentContext && this.parentContext.hasObjectSchema(type)) return true;
                    return false;
                };
                Class.prototype.getObjectSchema = function (type) {
                    if (type === void 0) {
                        type = null;
                    }
                    if (!!type) {
                        // Type specific schema
                        type = this.resolveTypeURI(type);
                        if (this.typeObjectSchemaMap.has(type)) return this.typeObjectSchemaMap.get(type);
                        if (!!this.parentContext && this.parentContext.hasObjectSchema(type)) return this.parentContext.getObjectSchema(type);
                        return null;
                    } else {
                        // General schema
                        if (!!this.generalObjectSchema) return this.generalObjectSchema;
                        if (!!this.parentContext) return this.parentContext.getObjectSchema();
                        throw new Errors.IllegalStateError();
                    }
                };
                Class.prototype.extendObjectSchema = function (typeOrObjectSchema, objectSchema) {
                    if (objectSchema === void 0) {
                        objectSchema = null;
                    }
                    var type = objectSchema ? typeOrObjectSchema : null;
                    objectSchema = !!objectSchema ? objectSchema : typeOrObjectSchema;
                    var digestedSchema = ObjectSchema.Digester.digestSchema(objectSchema);
                    if (!type) {
                        this.extendGeneralObjectSchema(digestedSchema);
                    } else {
                        this.extendTypeObjectSchema(digestedSchema, type);
                    }
                };
                Class.prototype.clearObjectSchema = function (type) {
                    if (type === void 0) {
                        type = null;
                    }
                    if (!type) {
                        this.generalObjectSchema = !!this.parentContext ? null : new ObjectSchema.DigestedObjectSchema();
                    } else {
                        type = this.resolveTypeURI(type);
                        this.typeObjectSchemaMap.delete(type);
                    }
                };
                Class.prototype.extendGeneralObjectSchema = function (digestedSchema) {
                    var digestedSchemaToExtend;
                    if (!!this.generalObjectSchema) {
                        digestedSchemaToExtend = this.generalObjectSchema;
                    } else if (!!this.parentContext) {
                        digestedSchemaToExtend = this.parentContext.getObjectSchema();
                    } else {
                        digestedSchemaToExtend = new ObjectSchema.DigestedObjectSchema();
                    }
                    this.generalObjectSchema = ObjectSchema.Digester.combineDigestedObjectSchemas([new ObjectSchema.DigestedObjectSchema(), digestedSchemaToExtend, digestedSchema]);
                };
                Class.prototype.extendTypeObjectSchema = function (digestedSchema, type) {
                    type = this.resolveTypeURI(type);
                    var digestedSchemaToExtend;
                    if (this.typeObjectSchemaMap.has(type)) {
                        digestedSchemaToExtend = this.typeObjectSchemaMap.get(type);
                    } else if (!!this.parentContext && this.parentContext.hasObjectSchema(type)) {
                        digestedSchemaToExtend = this.parentContext.getObjectSchema(type);
                    } else {
                        digestedSchemaToExtend = new ObjectSchema.DigestedObjectSchema();
                    }
                    var extendedDigestedSchema = ObjectSchema.Digester.combineDigestedObjectSchemas([digestedSchemaToExtend, digestedSchema]);
                    this.typeObjectSchemaMap.set(type, extendedDigestedSchema);
                };
                Class.prototype.registerDefaultObjectSchemas = function () {
                    this.extendObjectSchema(BlankNode.SCHEMA);
                    this.extendObjectSchema(ProtectedDocument.RDF_CLASS, ProtectedDocument.SCHEMA);
                    this.extendObjectSchema(RDFRepresentation.RDF_CLASS, RDFRepresentation.SCHEMA);
                    this.extendObjectSchema(APIDescription.RDF_CLASS, APIDescription.SCHEMA);
                    this.extendObjectSchema(Error.RDF_CLASS, Error.SCHEMA);
                    this.extendObjectSchema(ErrorResponse.RDF_CLASS, ErrorResponse.SCHEMA);
                    // TODO Fix error of cycle reference because the App module dependency of AbstractClass which has a dependency with SDKContext. For now add manual data
                    /* this.extendObjectSchema( App.RDF_CLASS, App.SCHEMA ); */
                    this.extendObjectSchema(NS.CS.Class.Application, {
                        "name": {
                            "@id": NS.CS.Predicate.namae,
                            "@type": NS.XSD.DataType.string
                        },
                        "description": {
                            "@id": NS.CS.Predicate.description,
                            "@type": NS.XSD.DataType.string
                        },
                        "rootContainer": {
                            "@id": NS.CS.Predicate.rootContainer,
                            "@type": "@id"
                        },
                        "allowsOrigins": {
                            "@id": NS.CS.Predicate.allowsOrigin,
                            "@container": "@set"
                        }
                    });
                    this.extendObjectSchema(AppRole.RDF_CLASS, Auth.Role.SCHEMA);
                    this.extendObjectSchema(AppRole.RDF_CLASS, AppRole.SCHEMA);
                    this.extendObjectSchema(LDP.ResponseMetadata.RDF_CLASS, LDP.ResponseMetadata.SCHEMA);
                    this.extendObjectSchema(LDP.ResourceMetadata.RDF_CLASS, LDP.ResourceMetadata.SCHEMA);
                    this.extendObjectSchema(LDP.AddMemberAction.RDF_CLASS, LDP.AddMemberAction.SCHEMA);
                    this.extendObjectSchema(LDP.RemoveMemberAction.RDF_CLASS, LDP.RemoveMemberAction.SCHEMA);
                    this.extendObjectSchema(Auth.ACE.RDF_CLASS, Auth.ACE.SCHEMA);
                    this.extendObjectSchema(Auth.ACL.RDF_CLASS, Auth.ACL.SCHEMA);
                    this.extendObjectSchema(Auth.Agent.RDF_CLASS, Auth.Agent.SCHEMA);
                    this.extendObjectSchema(Auth.Ticket.RDF_CLASS, Auth.Ticket.SCHEMA);
                    this.extendObjectSchema(Auth.Token.RDF_CLASS, Auth.Token.SCHEMA);
                };
                Class.prototype.resolveTypeURI = function (uri) {
                    if (RDF.URI.Util.isAbsolute(uri)) return uri;
                    var schema = this.getObjectSchema();
                    var vocab;
                    if (this.hasSetting("vocabulary")) vocab = this.resolve(this.getSetting("vocabulary"));
                    if (RDF.URI.Util.isPrefixed(uri)) {
                        uri = ObjectSchema.Digester.resolvePrefixedURI(uri, schema);
                    } else if (vocab) {
                        uri = vocab + uri;
                    }
                    return uri;
                };
                return Class;
            }();
            exports_1("Class", Class);
            exports_1("instance", instance = new Class());
            exports_1("default", instance);
        }
    };
});
$__System.register("63", ["52", "39", "6", "9", "c", "16"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var FreeResources, Parser_1, NS, RDF, SDKContext_1, IllegalArgumentError_1;
    var RDF_CLASS, SCHEMA, Util, Parser;
    return {
        setters: [function (FreeResources_1) {
            FreeResources = FreeResources_1;
        }, function (Parser_1_1) {
            Parser_1 = Parser_1_1;
        }, function (NS_1) {
            NS = NS_1;
        }, function (RDF_1) {
            RDF = RDF_1;
        }, function (SDKContext_1_1) {
            SDKContext_1 = SDKContext_1_1;
        }, function (IllegalArgumentError_1_1) {
            IllegalArgumentError_1 = IllegalArgumentError_1_1;
        }],
        execute: function () {
            exports_1("RDF_CLASS", RDF_CLASS = NS.C.Class.ErrorResponse);
            exports_1("SCHEMA", SCHEMA = {
                "errors": {
                    "@id": NS.C.Predicate.error,
                    "@type": "@id",
                    "@container": "@set"
                },
                "requestID": {
                    "@id": NS.C.Predicate.requestID,
                    "@type": NS.XSD.DataType.string
                },
                "statusCode": {
                    "@id": NS.C.Predicate.httpStatusCode,
                    "@type": NS.XSD.DataType.int
                }
            });
            Util = function () {
                function Util() {}
                Util.getMessage = function (errorResponse) {
                    var messages = [];
                    for (var _i = 0, _a = errorResponse.errors; _i < _a.length; _i++) {
                        var error = _a[_i];
                        messages.push(error.message);
                    }
                    return messages.join(", ");
                };
                return Util;
            }();
            exports_1("Util", Util);
            Parser = function () {
                function Parser() {}
                Parser.prototype.parse = function (input, errorResponse) {
                    if (errorResponse === void 0) {
                        errorResponse = {};
                    }
                    var documents = SDKContext_1.default.documents;
                    var parser = new Parser_1.default();
                    return parser.parse(input).then(function (freeNodes) {
                        var freeResources = FreeResources.Factory.create(documents);
                        for (var _i = 0, freeNodes_1 = freeNodes; _i < freeNodes_1.length; _i++) {
                            var node = freeNodes_1[_i];
                            var resource = void 0;
                            var errorResponseFound = false;
                            if (RDF.Node.Util.hasType(node, RDF_CLASS)) {
                                if (errorResponseFound) throw new IllegalArgumentError_1.default("The input string contains more than once c:ErrorResponse.");
                                resource = freeResources.createResourceFrom(errorResponse);
                                errorResponseFound = true;
                            } else {
                                resource = freeResources.getPointer(node["@id"]);
                            }
                            documents.jsonldConverter.compact(node, resource, documents.getSchemaFor(node), freeResources);
                        }
                        if (!errorResponse) throw new IllegalArgumentError_1.default("The input string does not contains a c:ErrorResponse.");
                        return errorResponse;
                    });
                };
                return Parser;
            }();
            exports_1("Parser", Parser);
        }
    };
});
$__System.register("6b", ["37", "6c", "38", "6d", "63", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Errors, Header, Method_1, Response_1, ErrorResponse, Utils;
    var Service, Util;
    function forEachHeaders(headers, setHeader) {
        var namesIterator = headers.keys();
        var next = namesIterator.next();
        while (!next.done) {
            var name = next.value;
            var value = headers.get(name);
            setHeader(name, value.toString());
            next = namesIterator.next();
        }
    }
    function onResolve(resolve, reject, response) {
        if (response.status >= 200 && response.status <= 299) {
            resolve(response);
        } else if (response.status >= 400 && response.status < 600 && Errors.statusCodeMap.has(response.status)) {
            var errorClass = Errors.statusCodeMap.get(response.status);
            var error_1 = new errorClass("", response);
            if (!response.data) {
                reject(error_1);
            }
            var parser = new ErrorResponse.Parser();
            parser.parse(response.data, error_1).then(function (errorResponse) {
                error_1.message = ErrorResponse.Util.getMessage(errorResponse);
                reject(error_1);
            }).catch(function () {
                error_1.message = response.data;
                reject(error_1);
            });
        } else {
            reject(new Errors.UnknownError(response.data, response));
        }
    }
    function sendWithBrowser(method, url, body, options) {
        return new Promise(function (resolve, reject) {
            var request = options.request ? options.request : new XMLHttpRequest();
            request.open(method, url, true);
            if (options.headers) forEachHeaders(options.headers, function (name, value) {
                return request.setRequestHeader(name, value);
            });
            request.withCredentials = options.sendCredentialsOnCORS;
            if (options.timeout) request.timeout = options.timeout;
            request.onload = request.onerror = function () {
                var response = new Response_1.default(request);
                onResolve(resolve, reject, response);
            };
            if (body) {
                request.send(body);
            } else {
                request.send();
            }
        });
    }
    function sendWithNode(method, url, body, options) {
        return new Promise(function (resolve, reject) {
            var URL = require("url");
            function returnResponse(request, res) {
                var rawData = [];
                res.on("data", function (chunk) {
                    rawData.push(chunk);
                }).on("end", function () {
                    var data = Buffer.concat(rawData).toString("utf8");
                    var response = new Response_1.default(request, data, res);
                    onResolve(resolve, reject, response);
                });
            }
            var numberOfRedirects = 0;
            function sendRequest(_url) {
                var parsedURL = URL.parse(_url);
                var HTTP = parsedURL.protocol === "http:" ? require("http") : require("https");
                var requestOptions = {
                    protocol: parsedURL.protocol,
                    host: parsedURL.host,
                    hostname: parsedURL.hostname,
                    port: parseFloat(parsedURL.port),
                    path: parsedURL.path,
                    method: method,
                    headers: {},
                    withCredentials: options.sendCredentialsOnCORS
                };
                if (options.headers) forEachHeaders(options.headers, function (name, value) {
                    return requestOptions.headers[name] = value;
                });
                var request = HTTP.request(requestOptions);
                if (options.timeout) request.setTimeout(options.timeout);
                request.on("response", function (res) {
                    if (res.statusCode >= 300 && res.statusCode <= 399 && "location" in res.headers) {
                        if (++numberOfRedirects < 10) return sendRequest(URL.resolve(_url, res.headers.location));
                    }
                    returnResponse(request, res);
                });
                request.on("error", function (error) {
                    var response = new Response_1.default(request, error.message);
                    onResolve(resolve, reject, response);
                });
                request.end(body);
            }
            sendRequest(url);
        });
    }
    function isBody(data) {
        return Utils.isString(data) || typeof Blob !== "undefined" && data instanceof Blob || typeof Buffer !== "undefined" && data instanceof Buffer;
    }
    return {
        setters: [function (Errors_1) {
            Errors = Errors_1;
        }, function (Header_1) {
            Header = Header_1;
        }, function (Method_1_1) {
            Method_1 = Method_1_1;
        }, function (Response_1_1) {
            Response_1 = Response_1_1;
        }, function (ErrorResponse_1) {
            ErrorResponse = ErrorResponse_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            Service = function () {
                function Service() {}
                Service.send = function (method, url, bodyOrOptions, optionsOrParser, parser) {
                    if (bodyOrOptions === void 0) {
                        bodyOrOptions = Service.defaultOptions;
                    }
                    if (optionsOrParser === void 0) {
                        optionsOrParser = Service.defaultOptions;
                    }
                    if (parser === void 0) {
                        parser = null;
                    }
                    var body = null;
                    var options = Utils.hasProperty(optionsOrParser, "parse") ? bodyOrOptions : optionsOrParser;
                    parser = Utils.hasProperty(optionsOrParser, "parse") ? optionsOrParser : parser;
                    if (isBody(bodyOrOptions)) {
                        body = bodyOrOptions;
                    } else {
                        options = bodyOrOptions ? bodyOrOptions : options;
                    }
                    options = Utils.extend({}, Service.defaultOptions, options);
                    if (Utils.isNumber(method)) method = Method_1.default[method];
                    var requestPromise;
                    if (typeof XMLHttpRequest !== "undefined") {
                        requestPromise = sendWithBrowser(method, url, body, options);
                    } else {
                        requestPromise = sendWithNode(method, url, body, options);
                    }
                    if (parser === null) return requestPromise;
                    return requestPromise.then(function (response) {
                        return parser.parse(response.data).then(function (parsedBody) {
                            return [parsedBody, response];
                        });
                    });
                };
                Service.options = function (url, options) {
                    if (options === void 0) {
                        options = Service.defaultOptions;
                    }
                    return Service.send(Method_1.default.OPTIONS, url, options);
                };
                Service.head = function (url, options) {
                    if (options === void 0) {
                        options = Service.defaultOptions;
                    }
                    return Service.send(Method_1.default.HEAD, url, options);
                };
                Service.get = function (url, options, parser) {
                    if (options === void 0) {
                        options = Service.defaultOptions;
                    }
                    if (parser === void 0) {
                        parser = null;
                    }
                    return Service.send(Method_1.default.GET, url, null, options, parser);
                };
                Service.post = function (url, bodyOrOptions, options, parser) {
                    if (bodyOrOptions === void 0) {
                        bodyOrOptions = Service.defaultOptions;
                    }
                    if (options === void 0) {
                        options = Service.defaultOptions;
                    }
                    if (parser === void 0) {
                        parser = null;
                    }
                    return Service.send(Method_1.default.POST, url, bodyOrOptions, options, parser);
                };
                Service.put = function (url, bodyOrOptions, options, parser) {
                    if (bodyOrOptions === void 0) {
                        bodyOrOptions = Service.defaultOptions;
                    }
                    if (options === void 0) {
                        options = Service.defaultOptions;
                    }
                    if (parser === void 0) {
                        parser = null;
                    }
                    return Service.send(Method_1.default.PUT, url, bodyOrOptions, options, parser);
                };
                Service.patch = function (url, bodyOrOptions, options, parser) {
                    if (bodyOrOptions === void 0) {
                        bodyOrOptions = Service.defaultOptions;
                    }
                    if (options === void 0) {
                        options = Service.defaultOptions;
                    }
                    if (parser === void 0) {
                        parser = null;
                    }
                    return Service.send(Method_1.default.PATCH, url, bodyOrOptions, options, parser);
                };
                Service.delete = function (url, bodyOrOptions, optionsOrParser, parser) {
                    if (bodyOrOptions === void 0) {
                        bodyOrOptions = Service.defaultOptions;
                    }
                    if (optionsOrParser === void 0) {
                        optionsOrParser = Service.defaultOptions;
                    }
                    if (parser === void 0) {
                        parser = null;
                    }
                    return Service.send(Method_1.default.DELETE, url, bodyOrOptions, optionsOrParser, parser);
                };
                Service.defaultOptions = {
                    sendCredentialsOnCORS: true
                };
                return Service;
            }();
            exports_1("Service", Service);
            Util = function () {
                function Util() {}
                Util.getHeader = function (headerName, requestOptions, initialize) {
                    if (initialize === void 0) {
                        initialize = false;
                    }
                    headerName = headerName.toLowerCase();
                    if (initialize) {
                        var headers = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map();
                        if (!headers.has(headerName)) headers.set(headerName, new Header.Class());
                    }
                    if (!requestOptions.headers) return undefined;
                    return requestOptions.headers.get(headerName);
                };
                Util.setAcceptHeader = function (accept, requestOptions) {
                    var headers = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map();
                    headers.set("accept", new Header.Class(accept));
                    return requestOptions;
                };
                Util.setContentTypeHeader = function (contentType, requestOptions) {
                    var headers = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map();
                    headers.set("content-type", new Header.Class(contentType));
                    return requestOptions;
                };
                Util.setIfMatchHeader = function (etag, requestOptions) {
                    var headers = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map();
                    headers.set("if-match", new Header.Class(etag));
                    return requestOptions;
                };
                Util.setPreferredInteractionModel = function (interactionModelURI, requestOptions) {
                    var prefer = Util.getHeader("prefer", requestOptions, true);
                    prefer.values.push(new Header.Value(interactionModelURI + "; rel=interaction-model"));
                    return requestOptions;
                };
                Util.setContainerRetrievalPreferences = function (preferences, requestOptions, returnRepresentation) {
                    if (returnRepresentation === void 0) {
                        returnRepresentation = true;
                    }
                    var prefer = Util.getHeader("prefer", requestOptions, true);
                    var representation = returnRepresentation ? "return=representation; " : "";
                    var keys = ["include", "omit"];
                    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                        var key = keys_1[_i];
                        if (key in preferences && preferences[key].length > 0) {
                            prefer.values.push(new Header.Value("" + representation + key + "=\"" + preferences[key].join(" ") + "\""));
                        }
                    }
                    return requestOptions;
                };
                Util.setSlug = function (slug, requestOptions) {
                    var slugHeader = Util.getHeader("slug", requestOptions, true);
                    slugHeader.values.push(new Header.Value(slug));
                    return requestOptions;
                };
                Util.isOptions = function (object) {
                    return Utils.hasPropertyDefined(object, "headers") || Utils.hasPropertyDefined(object, "sendCredentialsOnCORS") || Utils.hasPropertyDefined(object, "timeout") || Utils.hasPropertyDefined(object, "request");
                };
                return Util;
            }();
            exports_1("Util", Util);
        }
    };
});
$__System.register("6c", [], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Class, Value, Util;
    return {
        setters: [],
        execute: function () {
            Class = function () {
                function Class(valueOrValues) {
                    this.values = [];
                    if (!valueOrValues) {
                        return;
                    } else if (Array.isArray(valueOrValues)) {
                        this.values = valueOrValues;
                    } else {
                        this.setValues(valueOrValues);
                    }
                }
                Class.prototype.toString = function () {
                    return this.values.join(", ");
                };
                Class.prototype.setValues = function (valuesString) {
                    this.values = [];
                    var valueStrings = valuesString.split(",");
                    for (var i = 0, length = valueStrings.length; i < length; i++) {
                        var valueString = valueStrings[i].trim();
                        this.values.push(new Value(valueString));
                    }
                };
                return Class;
            }();
            exports_1("Class", Class);
            Value = function () {
                function Value(value) {
                    this.value = value;
                }
                Value.prototype.toString = function () {
                    return this.value;
                };
                return Value;
            }();
            exports_1("Value", Value);
            Util = function () {
                function Util() {}
                Util.parseHeaders = function (headersString) {
                    var headers = new Map();
                    var headerStrings = headersString.split(/\r?\n/);
                    for (var i = 0, length = headerStrings.length; i < length; i++) {
                        var headerString = headerStrings[i];
                        if (!headerString.trim()) continue;
                        var parts = headerString.split(":");
                        if (parts.length < 2) throw new Error("ParseError: The header couldn't be parsed.");
                        if (parts.length > 2) parts[1] = parts.slice(1).join(":");
                        var name = parts[0].trim().toLowerCase();
                        var header = new Class(parts[1].trim());
                        if (headers.has(name)) {
                            var existingHeader = headers.get(name);
                            existingHeader.values.concat(header.values);
                        } else headers.set(name, header);
                    }
                    return headers;
                };
                return Util;
            }();
            exports_1("Util", Util);
            exports_1("default", Class);
        }
    };
});
$__System.register("6d", ["6c", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Header, Utils_1;
    var Class, Util;
    return {
        setters: [function (Header_1) {
            Header = Header_1;
        }, function (Utils_1_1) {
            Utils_1 = Utils_1_1;
        }],
        execute: function () {
            Class = function () {
                function Class(request, data, response) {
                    if (response === void 0) {
                        response = {};
                    }
                    if (typeof XMLHttpRequest !== "undefined" && request instanceof XMLHttpRequest) {
                        var res = request;
                        this.status = res.status;
                        this.data = res.responseText;
                        this.setHeaders(res.getAllResponseHeaders());
                    } else {
                        this.status = response.statusCode;
                        this.data = data || "";
                        this.setHeaders(response.headers);
                    }
                    this.request = request;
                }
                Class.prototype.getHeader = function (name) {
                    name = name.toLowerCase();
                    return this.headers.get(name) || null;
                };
                Class.prototype.setHeaders = function (headers) {
                    if (Utils_1.isString(headers)) {
                        this.headers = Header.Util.parseHeaders(headers);
                    } else {
                        this.headers = new Map();
                        if (Utils_1.isObject(headers)) {
                            for (var _i = 0, _a = Object.keys(headers); _i < _a.length; _i++) {
                                var name = _a[_i];
                                this.headers.set(name, new Header.Class(headers[name]));
                            }
                        }
                    }
                };
                return Class;
            }();
            exports_1("Class", Class);
            Util = function () {
                function Util() {}
                Util.getETag = function (response) {
                    if (!response || !response.headers) return null;
                    var etagHeader = response.getHeader("ETag");
                    if (!etagHeader) return null;
                    if (!etagHeader.values.length) return null;
                    if (etagHeader.values.length > 1) console.warn("The response contains more than one ETag. Response: %o", response);
                    return etagHeader.values[0].toString();
                };
                return Util;
            }();
            exports_1("Util", Util);
            exports_1("default", Class);
        }
    };
});
$__System.register("6e", [], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var StatusCode;
    return {
        setters: [],
        execute: function () {
            (function (StatusCode) {
                StatusCode[StatusCode["CONTINUE"] = 100] = "CONTINUE";
                StatusCode[StatusCode["SWITCHING_PROTOCOLS"] = 101] = "SWITCHING_PROTOCOLS";
                StatusCode[StatusCode["OK"] = 200] = "OK";
                StatusCode[StatusCode["CREATED"] = 201] = "CREATED";
                StatusCode[StatusCode["ACCEPTED"] = 202] = "ACCEPTED";
                StatusCode[StatusCode["NON_AUTHORITATIVE_INFORMATION"] = 203] = "NON_AUTHORITATIVE_INFORMATION";
                StatusCode[StatusCode["NO_CONTENT"] = 204] = "NO_CONTENT";
                StatusCode[StatusCode["RESET_CONTENT"] = 205] = "RESET_CONTENT";
                StatusCode[StatusCode["PARTIAL_CONTENT"] = 206] = "PARTIAL_CONTENT";
                StatusCode[StatusCode["MULTIPLE_CHOICES"] = 300] = "MULTIPLE_CHOICES";
                StatusCode[StatusCode["MOVED_PERMANENTLY"] = 301] = "MOVED_PERMANENTLY";
                StatusCode[StatusCode["FOUND"] = 302] = "FOUND";
                StatusCode[StatusCode["SEE_OTHER"] = 303] = "SEE_OTHER";
                StatusCode[StatusCode["NOT_MODIFIED"] = 304] = "NOT_MODIFIED";
                StatusCode[StatusCode["USE_PROXY"] = 305] = "USE_PROXY";
                StatusCode[StatusCode["TEMPORARY_REDIRECT"] = 307] = "TEMPORARY_REDIRECT";
                StatusCode[StatusCode["BAD_REQUEST"] = 400] = "BAD_REQUEST";
                StatusCode[StatusCode["UNAUTHORIZED"] = 401] = "UNAUTHORIZED";
                StatusCode[StatusCode["PAYMENT_REQUIRED"] = 402] = "PAYMENT_REQUIRED";
                StatusCode[StatusCode["FORBIDDEN"] = 403] = "FORBIDDEN";
                StatusCode[StatusCode["NOT_FOUND"] = 404] = "NOT_FOUND";
                StatusCode[StatusCode["METHOD_NOT_ALLOWED"] = 405] = "METHOD_NOT_ALLOWED";
                StatusCode[StatusCode["NOT_ACCEPTABLE"] = 406] = "NOT_ACCEPTABLE";
                StatusCode[StatusCode["PROXY_AUTHENTICATION_REQUIRED"] = 407] = "PROXY_AUTHENTICATION_REQUIRED";
                StatusCode[StatusCode["REQUEST_TIME_OUT"] = 408] = "REQUEST_TIME_OUT";
                StatusCode[StatusCode["CONFLICT"] = 409] = "CONFLICT";
                StatusCode[StatusCode["GONE"] = 410] = "GONE";
                StatusCode[StatusCode["LENGTH_REQUIRED"] = 411] = "LENGTH_REQUIRED";
                StatusCode[StatusCode["PRECONDITION_FAILED"] = 412] = "PRECONDITION_FAILED";
                StatusCode[StatusCode["REQUEST_ENTITY_TOO_LARGE"] = 413] = "REQUEST_ENTITY_TOO_LARGE";
                StatusCode[StatusCode["REQUEST_URI_TOO_LARGE"] = 414] = "REQUEST_URI_TOO_LARGE";
                StatusCode[StatusCode["UNSUPPORTED_MEDIA_TYPE"] = 415] = "UNSUPPORTED_MEDIA_TYPE";
                StatusCode[StatusCode["REQUESTED_RANGE_NOT_SATISFIABLE"] = 416] = "REQUESTED_RANGE_NOT_SATISFIABLE";
                StatusCode[StatusCode["EXPECTATION_FAILED"] = 417] = "EXPECTATION_FAILED";
                StatusCode[StatusCode["INTERNAL_SERVER_ERROR"] = 500] = "INTERNAL_SERVER_ERROR";
                StatusCode[StatusCode["NOT_IMPLEMENTED"] = 501] = "NOT_IMPLEMENTED";
                StatusCode[StatusCode["BAD_GATEWAY"] = 502] = "BAD_GATEWAY";
                StatusCode[StatusCode["SERVICE_UNAVAILABLE"] = 503] = "SERVICE_UNAVAILABLE";
                StatusCode[StatusCode["GATEWAY_TIME_OUT"] = 504] = "GATEWAY_TIME_OUT";
                StatusCode[StatusCode["HTTP_VERSION_NOT_SUPPORTED"] = 505] = "HTTP_VERSION_NOT_SUPPORTED";
            })(StatusCode || (StatusCode = {}));
            exports_1("default", StatusCode);
        }
    };
});
$__System.register("6f", [], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Class;
    return {
        setters: [],
        execute: function () {
            Class = function () {
                function Class() {}
                Class.prototype.parse = function (body) {
                    return new Promise(function (resolve, reject) {
                        resolve(body);
                    });
                };
                return Class;
            }();
            exports_1("Class", Class);
            exports_1("default", Class);
        }
    };
});
$__System.register("4a", ["37", "6c", "3a", "38", "1d", "6b", "6d", "6e", "6f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Errors, Header, JSONParser, Method_1, Parser, Request, Response, StatusCode_1, StringParser;
    return {
        setters: [function (Errors_1) {
            Errors = Errors_1;
        }, function (Header_1) {
            Header = Header_1;
        }, function (JSONParser_1) {
            JSONParser = JSONParser_1;
        }, function (Method_1_1) {
            Method_1 = Method_1_1;
        }, function (Parser_1) {
            Parser = Parser_1;
        }, function (Request_1) {
            Request = Request_1;
        }, function (Response_1) {
            Response = Response_1;
        }, function (StatusCode_1_1) {
            StatusCode_1 = StatusCode_1_1;
        }, function (StringParser_1) {
            StringParser = StringParser_1;
        }],
        execute: function () {
            exports_1("Errors", Errors);
            exports_1("Header", Header);
            exports_1("JSONParser", JSONParser);
            exports_1("Method", Method_1.default);
            exports_1("Parser", Parser);
            exports_1("Request", Request);
            exports_1("Response", Response);
            exports_1("StatusCode", StatusCode_1.default);
            exports_1("StringParser", StringParser);
        }
    };
});
$__System.register("70", [], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var namespace, Class, Predicate;
    return {
        setters: [],
        execute: function () {
            exports_1("namespace", namespace = "https://carbonldp.com/ns/v1/platform#");
            Class = function () {
                function Class() {}
                Object.defineProperty(Class, "AccessPoint", {
                    get: function () {
                        return namespace + "AccessPoint";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "AddMemberAction", {
                    get: function () {
                        return namespace + "AddMemberAction";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "API", {
                    get: function () {
                        return namespace + "API";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "Document", {
                    get: function () {
                        return namespace + "Document";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "NonReadableMembershipResourceTriples", {
                    get: function () {
                        return namespace + "NonReadableMembershipResourceTriples";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "PreferContainer", {
                    get: function () {
                        return namespace + "PreferContainer";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "PreferContainmentResources", {
                    get: function () {
                        return namespace + "PreferContainmentResources";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "PreferContainmentTriples", {
                    get: function () {
                        return namespace + "PreferContainmentTriples";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "PreferMembershipResources", {
                    get: function () {
                        return namespace + "PreferMembershipResources";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "PreferMembershipTriples", {
                    get: function () {
                        return namespace + "PreferMembershipTriples";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "PreferSelectedMembershipTriples", {
                    get: function () {
                        return namespace + "PreferSelectedMembershipTriples";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "VolatileResource", {
                    get: function () {
                        return namespace + "VolatileResource";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "RDFRepresentation", {
                    get: function () {
                        return namespace + "RDFRepresentation";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "RemoveMemberAction", {
                    get: function () {
                        return namespace + "RemoveMemberAction";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "ErrorResponse", {
                    get: function () {
                        return namespace + "ErrorResponse";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "Error", {
                    get: function () {
                        return namespace + "Error";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "ResponseMetadata", {
                    get: function () {
                        return namespace + "ResponseMetadata";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "ResourceMetadata", {
                    get: function () {
                        return namespace + "ResourceMetadata";
                    },
                    enumerable: true,
                    configurable: true
                });
                return Class;
            }();
            exports_1("Class", Class);
            Predicate = function () {
                function Predicate() {}
                Object.defineProperty(Predicate, "accessPoint", {
                    get: function () {
                        return namespace + "accessPoint";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "appRoleMap", {
                    get: function () {
                        return namespace + "appRoleMap";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "bNodeIdentifier", {
                    get: function () {
                        return namespace + "bNodeIdentifier";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "buildDate", {
                    get: function () {
                        return namespace + "buildDate";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "carbonCode", {
                    get: function () {
                        return namespace + "carbonCode";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "created", {
                    get: function () {
                        return namespace + "created";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "defaultInteractionModel", {
                    get: function () {
                        return namespace + "defaultInteractionModel";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "entry", {
                    get: function () {
                        return namespace + "entry";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "error", {
                    get: function () {
                        return namespace + "error";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "eTag", {
                    get: function () {
                        return namespace + "eTag";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "httpStatusCode", {
                    get: function () {
                        return namespace + "httpStatusCode";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "key", {
                    get: function () {
                        return namespace + "key";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "mediaType", {
                    get: function () {
                        return namespace + "mediaType";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "message", {
                    get: function () {
                        return namespace + "message";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "modified", {
                    get: function () {
                        return namespace + "modified";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "requestID", {
                    get: function () {
                        return namespace + "requestID";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "resourceMetadata", {
                    get: function () {
                        return namespace + "resourceMetadata";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "resource", {
                    get: function () {
                        return namespace + "resource";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "size", {
                    get: function () {
                        return namespace + "size";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "targetMember", {
                    get: function () {
                        return namespace + "targetMember";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "version", {
                    get: function () {
                        return namespace + "version";
                    },
                    enumerable: true,
                    configurable: true
                });
                return Predicate;
            }();
            exports_1("Predicate", Predicate);
        }
    };
});
$__System.register("71", [], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var namespace, Predicate;
    return {
        setters: [],
        execute: function () {
            namespace = "https://carbonldp.com/ns/v1/patch#";
            Predicate = function () {
                function Predicate() {}
                Predicate.ADD_ACTION = namespace + "addAction";
                Predicate.SET_ACTION = namespace + "setAction";
                Predicate.DELETE_ACTION = namespace + "deleteAction";
                return Predicate;
            }();
            exports_1("namespace", namespace);
            exports_1("Predicate", Predicate);
        }
    };
});
$__System.register("72", [], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var namespace, Class, Predicate;
    return {
        setters: [],
        execute: function () {
            namespace = "https://carbonldp.com/ns/v1/security#";
            Class = function () {
                function Class() {}
                Object.defineProperty(Class, "AccessControlEntry", {
                    get: function () {
                        return namespace + "AccessControlEntry";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "AccessControlList", {
                    get: function () {
                        return namespace + "AccessControlList";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "AddMember", {
                    get: function () {
                        return namespace + "AddMember";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "Agent", {
                    get: function () {
                        return namespace + "Agent";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "AllOrigins", {
                    get: function () {
                        return namespace + "AllOrigins";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "Application", {
                    get: function () {
                        return namespace + "Application";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "AppRole", {
                    get: function () {
                        return namespace + "AppRole";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "CreateAccessPoint", {
                    get: function () {
                        return namespace + "CreateAccessPoint";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "CreateChild", {
                    get: function () {
                        return namespace + "CreateChild";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "Delete", {
                    get: function () {
                        return namespace + "Delete";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "Download", {
                    get: function () {
                        return namespace + "Download";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "Extend", {
                    get: function () {
                        return namespace + "Extend";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "ManageSecurity", {
                    get: function () {
                        return namespace + "ManageSecurity";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "PlatformRole", {
                    get: function () {
                        return namespace + "PlatformRole";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "ProtectedDocument", {
                    get: function () {
                        return namespace + "ProtectedDocument";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "Read", {
                    get: function () {
                        return namespace + "Read";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "RemoveMember", {
                    get: function () {
                        return namespace + "RemoveMember";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "Ticket", {
                    get: function () {
                        return namespace + "Ticket";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "Token", {
                    get: function () {
                        return namespace + "Token";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "Update", {
                    get: function () {
                        return namespace + "Update";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "Upload", {
                    get: function () {
                        return namespace + "Upload";
                    },
                    enumerable: true,
                    configurable: true
                });
                return Class;
            }();
            Predicate = function () {
                function Predicate() {}
                Object.defineProperty(Predicate, "accessControlEntry", {
                    get: function () {
                        return namespace + "accessControlEntry";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "accessControlList", {
                    get: function () {
                        return namespace + "accessControlList";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "accessTo", {
                    get: function () {
                        return namespace + "accessTo";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "agent", {
                    get: function () {
                        return namespace + "agent";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "allowsOrigin", {
                    get: function () {
                        return namespace + "allowsOrigin";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "childRole", {
                    get: function () {
                        return namespace + "childRole";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "credentialsOf", {
                    get: function () {
                        return namespace + "credentialsOf";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "description", {
                    get: function () {
                        return namespace + "description";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "enabled", {
                    get: function () {
                        return namespace + "enabled";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "expirationTime", {
                    get: function () {
                        return namespace + "expirationTime";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "forIRI", {
                    get: function () {
                        return namespace + "forIRI";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "granting", {
                    get: function () {
                        return namespace + "granting";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "inheritableEntry", {
                    get: function () {
                        return namespace + "inheritableEntry";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "namae", {
                    get: function () {
                        return namespace + "name";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "parentRole", {
                    get: function () {
                        return namespace + "parentRole";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "password", {
                    get: function () {
                        return namespace + "password";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "permission", {
                    get: function () {
                        return namespace + "permission";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "platformRole", {
                    get: function () {
                        return namespace + "platformRole";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "rootContainer", {
                    get: function () {
                        return namespace + "rootContainer";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "subject", {
                    get: function () {
                        return namespace + "subject";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "subjectClass", {
                    get: function () {
                        return namespace + "subjectClass";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "ticketKey", {
                    get: function () {
                        return namespace + "ticketKey";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "tokenKey", {
                    get: function () {
                        return namespace + "tokenKey";
                    },
                    enumerable: true,
                    configurable: true
                });
                return Predicate;
            }();
            exports_1("namespace", namespace);
            exports_1("Class", Class);
            exports_1("Predicate", Predicate);
        }
    };
});
$__System.register("73", [], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var namespace, Class, Predicate;
    return {
        setters: [],
        execute: function () {
            namespace = "http://www.w3.org/ns/ldp#";
            Class = function () {
                function Class() {}
                Object.defineProperty(Class, "Resource", {
                    get: function () {
                        return namespace + "Resource";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "RDFSource", {
                    get: function () {
                        return namespace + "RDFSource";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "Container", {
                    get: function () {
                        return namespace + "Container";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "BasicContainer", {
                    get: function () {
                        return namespace + "BasicContainer";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "DirectContainer", {
                    get: function () {
                        return namespace + "DirectContainer";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "IndirectContainer", {
                    get: function () {
                        return namespace + "IndirectContainer";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "NonRDFSource", {
                    get: function () {
                        return namespace + "NonRDFSource";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "MemberSubject", {
                    get: function () {
                        return namespace + "MemberSubject";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "PreferContainment", {
                    get: function () {
                        return namespace + "PreferContainment";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "PreferMembership", {
                    get: function () {
                        return namespace + "PreferMembership";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "PreferEmptyContainer", {
                    get: function () {
                        return namespace + "PreferEmptyContainer";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "PreferMinimalContainer", {
                    get: function () {
                        return namespace + "PreferMinimalContainer";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "Page", {
                    get: function () {
                        return namespace + "Page";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "PageSortCriterion", {
                    get: function () {
                        return namespace + "PageSortCriterion";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "Ascending", {
                    get: function () {
                        return namespace + "Ascending";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Class, "Descending", {
                    get: function () {
                        return namespace + "Descending";
                    },
                    enumerable: true,
                    configurable: true
                });
                return Class;
            }();
            Predicate = function () {
                function Predicate() {}
                Object.defineProperty(Predicate, "contains", {
                    get: function () {
                        return namespace + "contains";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "member", {
                    get: function () {
                        return namespace + "member";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "hasMemberRelation", {
                    get: function () {
                        return namespace + "hasMemberRelation";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "isMemberOfRelation", {
                    get: function () {
                        return namespace + "isMemberOfRelation";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "membershipResource", {
                    get: function () {
                        return namespace + "membershipResource";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "insertedContentRelation", {
                    get: function () {
                        return namespace + "insertedContentRelation";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "constrainedBy", {
                    get: function () {
                        return namespace + "constrainedBy";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "pageSortCriteria", {
                    get: function () {
                        return namespace + "pageSortCriteria";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "pageSortOrder", {
                    get: function () {
                        return namespace + "pageSortOrder";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "pageSortCollation", {
                    get: function () {
                        return namespace + "pageSortCollation";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Predicate, "pageSequence", {
                    get: function () {
                        return namespace + "pageSequence";
                    },
                    enumerable: true,
                    configurable: true
                });
                return Predicate;
            }();
            exports_1("namespace", namespace);
            exports_1("Class", Class);
            exports_1("Predicate", Predicate);
        }
    };
});
$__System.register("74", [], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var namespace, Predicate;
    return {
        setters: [],
        execute: function () {
            namespace = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
            Predicate = function () {
                function Predicate() {}
                Predicate.type = namespace + "type";
                return Predicate;
            }();
            exports_1("namespace", namespace);
            exports_1("Predicate", Predicate);
        }
    };
});
$__System.register("75", [], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var namespace, Predicate;
    return {
        setters: [],
        execute: function () {
            exports_1("namespace", namespace = "http://www.w3.org/2001/vcard-rdf/3.0#");
            Predicate = function () {
                function Predicate() {}
                Object.defineProperty(Predicate, "email", {
                    get: function () {
                        return namespace + "email";
                    },
                    enumerable: true,
                    configurable: true
                });
                return Predicate;
            }();
            exports_1("Predicate", Predicate);
        }
    };
});
$__System.register("6", ["70", "71", "72", "73", "74", "57", "75"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var C, CP, CS, LDP, RDF, XSD, VCARD;
    return {
        setters: [function (C_1) {
            C = C_1;
        }, function (CP_1) {
            CP = CP_1;
        }, function (CS_1) {
            CS = CS_1;
        }, function (LDP_1) {
            LDP = LDP_1;
        }, function (RDF_1) {
            RDF = RDF_1;
        }, function (XSD_1) {
            XSD = XSD_1;
        }, function (VCARD_1) {
            VCARD = VCARD_1;
        }],
        execute: function () {
            exports_1("C", C);
            exports_1("CP", CP);
            exports_1("CS", CS);
            exports_1("LDP", LDP);
            exports_1("RDF", RDF);
            exports_1("XSD", XSD);
            exports_1("VCARD", VCARD);
        }
    };
});
$__System.register("56", ["5", "6", "9", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Errors, NS, RDF, Utils;
    var ContainerType, PointerType, DigestedObjectSchema, DigestedPropertyDefinition, Digester, Util;
    return {
        setters: [function (Errors_1) {
            Errors = Errors_1;
        }, function (NS_1) {
            NS = NS_1;
        }, function (RDF_1) {
            RDF = RDF_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            (function (ContainerType) {
                ContainerType[ContainerType["SET"] = 0] = "SET";
                ContainerType[ContainerType["LIST"] = 1] = "LIST";
                ContainerType[ContainerType["LANGUAGE"] = 2] = "LANGUAGE";
            })(ContainerType || (ContainerType = {}));
            exports_1("ContainerType", ContainerType);
            (function (PointerType) {
                PointerType[PointerType["ID"] = 0] = "ID";
                PointerType[PointerType["VOCAB"] = 1] = "VOCAB";
            })(PointerType || (PointerType = {}));
            exports_1("PointerType", PointerType);
            DigestedObjectSchema = function () {
                function DigestedObjectSchema() {
                    this.base = "";
                    this.vocab = null;
                    this.language = null;
                    this.prefixes = new Map();
                    this.properties = new Map();
                    this.prefixedURIs = new Map();
                }
                return DigestedObjectSchema;
            }();
            exports_1("DigestedObjectSchema", DigestedObjectSchema);
            DigestedPropertyDefinition = function () {
                function DigestedPropertyDefinition() {
                    this.uri = null;
                    this.literal = null;
                    this.literalType = null;
                    this.pointerType = null;
                    this.containerType = null;
                }
                return DigestedPropertyDefinition;
            }();
            exports_1("DigestedPropertyDefinition", DigestedPropertyDefinition);
            Digester = function () {
                function Digester() {}
                Digester.digestSchema = function (schemaOrSchemas) {
                    if (!Utils.isArray(schemaOrSchemas)) return Digester.digestSingleSchema(schemaOrSchemas);
                    var digestedSchemas = [];
                    for (var _i = 0, _a = schemaOrSchemas; _i < _a.length; _i++) {
                        var schema = _a[_i];
                        digestedSchemas.push(Digester.digestSingleSchema(schema));
                    }
                    return Digester.combineDigestedObjectSchemas(digestedSchemas);
                };
                Digester.combineDigestedObjectSchemas = function (digestedSchemas) {
                    if (digestedSchemas.length === 0) throw new Errors.IllegalArgumentError("At least one DigestedObjectSchema needs to be specified.");
                    var combinedSchema = new DigestedObjectSchema();
                    combinedSchema.vocab = digestedSchemas[0].vocab;
                    combinedSchema.base = digestedSchemas[0].base;
                    combinedSchema.language = digestedSchemas[0].language;
                    for (var _i = 0, digestedSchemas_1 = digestedSchemas; _i < digestedSchemas_1.length; _i++) {
                        var digestedSchema = digestedSchemas_1[_i];
                        Utils.M.extend(combinedSchema.prefixes, digestedSchema.prefixes);
                        Utils.M.extend(combinedSchema.prefixedURIs, digestedSchema.prefixedURIs);
                        Utils.M.extend(combinedSchema.properties, digestedSchema.properties);
                    }
                    Digester.resolvePrefixedURIs(combinedSchema);
                    return combinedSchema;
                };
                Digester.resolvePrefixedURI = function (uri, digestedSchema) {
                    if (uri === null) return null;
                    if (!RDF.URI.Util.isPrefixed(uri)) return uri;
                    var _a = uri.split(":"),
                        prefix = _a[0],
                        slug = _a[1];
                    if (digestedSchema.prefixes.has(prefix)) {
                        uri = digestedSchema.prefixes.get(prefix) + slug;
                    }
                    return uri;
                };
                Digester._resolvePrefixedURI = function (uri, digestedSchema) {
                    if (uri.stringValue === null || !RDF.URI.Util.isPrefixed(uri.stringValue)) return uri;
                    var _a = uri.stringValue.split(":"),
                        prefix = _a[0],
                        slug = _a[1];
                    if (digestedSchema.prefixes.has(prefix)) {
                        uri.stringValue = digestedSchema.prefixes.get(prefix) + slug;
                    } else {
                        if (!digestedSchema.prefixedURIs.has(prefix)) digestedSchema.prefixedURIs.set(prefix, []);
                        digestedSchema.prefixedURIs.get(prefix).push(uri);
                    }
                    return uri;
                };
                Digester.digestSingleSchema = function (schema) {
                    var digestedSchema = new DigestedObjectSchema();
                    for (var _i = 0, _a = ["@base", "@vocab"]; _i < _a.length; _i++) {
                        var propertyName = _a[_i];
                        if (!(propertyName in schema)) continue;
                        var value = schema[propertyName];
                        if (!Utils.isString(value)) throw new Errors.IllegalArgumentError("The value of '" + propertyName + "' must be a string or null.");
                        if ((propertyName === "@vocab" || !!value) && !RDF.URI.Util.isAbsolute(value) && !RDF.URI.Util.isBNodeID(value)) throw new Errors.IllegalArgumentError("The value of '" + propertyName + "' must be an absolute URI" + (propertyName === "@base" ? " or an empty string" : "") + ".");
                        digestedSchema[propertyName.substr(1)] = value;
                    }
                    digestedSchema.base = digestedSchema.base || "";
                    if ("@language" in schema) {
                        var value = schema["@language"];
                        if (value !== null && !Utils.isString(value)) throw new Errors.InvalidJSONLDSyntaxError("The value of '@language' must be a string or null.");
                        digestedSchema.language = value;
                    }
                    for (var propertyName in schema) {
                        if (!schema.hasOwnProperty(propertyName)) continue;
                        if (propertyName === "@reverse") continue;
                        if (propertyName === "@index") continue;
                        if (propertyName === "@base") continue;
                        if (propertyName === "@vocab") continue;
                        if (propertyName === "@language") continue;
                        var propertyValue = schema[propertyName];
                        if (Utils.isString(propertyValue)) {
                            if (RDF.URI.Util.isPrefixed(propertyName)) throw new Errors.IllegalArgumentError("A prefixed property cannot be equal to another URI.");
                            var uri = new RDF.URI.Class(propertyValue);
                            if (RDF.URI.Util.isPrefixed(uri.stringValue)) uri = Digester._resolvePrefixedURI(uri, digestedSchema);
                            digestedSchema.prefixes.set(propertyName, uri);
                        } else if (!!propertyValue && Utils.isObject(propertyValue)) {
                            var schemaDefinition = propertyValue;
                            var digestedDefinition = new DigestedPropertyDefinition();
                            if ("@id" in schemaDefinition) {
                                if (RDF.URI.Util.isPrefixed(propertyName)) throw new Errors.IllegalArgumentError("A prefixed property cannot have assigned another URI.");
                                if (!Utils.isString(schemaDefinition["@id"])) throw new Errors.IllegalArgumentError("@id needs to point to a string");
                                digestedDefinition.uri = Digester._resolvePrefixedURI(new RDF.URI.Class(schemaDefinition["@id"]), digestedSchema);
                            } else if (RDF.URI.Util.isPrefixed(propertyName)) {
                                digestedDefinition.uri = Digester._resolvePrefixedURI(new RDF.URI.Class(propertyName), digestedSchema);
                            } else if (digestedSchema.vocab !== null) {
                                digestedDefinition.uri = new RDF.URI.Class(digestedSchema.vocab + propertyName);
                            }
                            if ("@type" in schemaDefinition) {
                                if (!Utils.isString(schemaDefinition["@type"])) throw new Errors.IllegalArgumentError("@type needs to point to a string");
                                if (schemaDefinition["@type"] === "@id" || schemaDefinition["@type"] === "@vocab") {
                                    digestedDefinition.literal = false;
                                    digestedDefinition.pointerType = schemaDefinition["@type"] === "@id" ? PointerType.ID : PointerType.VOCAB;
                                } else {
                                    digestedDefinition.literal = true;
                                    var type = Digester._resolvePrefixedURI(new RDF.URI.Class(schemaDefinition["@type"]), digestedSchema);
                                    if (RDF.URI.Util.isRelative(type.stringValue) && type.stringValue in NS.XSD.DataType) type.stringValue = NS.XSD.DataType[type.stringValue];
                                    digestedDefinition.literalType = type;
                                }
                            }
                            if ("@language" in schemaDefinition) {
                                var language = schemaDefinition["@language"];
                                if (language !== null && !Utils.isString(language)) throw new Errors.IllegalArgumentError("@language needs to point to a string or null.");
                                digestedDefinition.language = language;
                            }
                            if ("@container" in schemaDefinition) {
                                switch (schemaDefinition["@container"]) {
                                    case "@set":
                                        digestedDefinition.containerType = ContainerType.SET;
                                        break;
                                    case "@list":
                                        digestedDefinition.containerType = ContainerType.LIST;
                                        break;
                                    case "@language":
                                        if (Utils.isString(digestedDefinition.language)) throw new Errors.IllegalArgumentError("@container cannot be set to @language when the property definition already contains an @language tag.");
                                        digestedDefinition.containerType = ContainerType.LANGUAGE;
                                        break;
                                    default:
                                        throw new Errors.IllegalArgumentError("@container needs to be equal to '@list', '@set', or '@language'");
                                }
                            }
                            digestedSchema.properties.set(propertyName, digestedDefinition);
                        } else {
                            throw new Errors.IllegalArgumentError("ObjectSchema Properties can only have string values or object values.");
                        }
                    }
                    Digester.resolvePrefixedURIs(digestedSchema);
                    return digestedSchema;
                };
                Digester.resolvePrefixedURIs = function (digestedSchema) {
                    digestedSchema.prefixes.forEach(function (prefixValue, prefixName) {
                        if (!digestedSchema.prefixedURIs.has(prefixName)) return;
                        var prefixedURIs = digestedSchema.prefixedURIs.get(prefixName);
                        for (var _i = 0, prefixedURIs_1 = prefixedURIs; _i < prefixedURIs_1.length; _i++) {
                            var prefixedURI = prefixedURIs_1[_i];
                            Digester._resolvePrefixedURI(prefixedURI, digestedSchema);
                        }
                        digestedSchema.prefixedURIs.delete(prefixName);
                    });
                    return digestedSchema;
                };
                return Digester;
            }();
            exports_1("Digester", Digester);
            Util = function () {
                function Util() {}
                Util.resolveURI = function (uri, schema) {
                    if (RDF.URI.Util.isAbsolute(uri)) return uri;
                    if (RDF.URI.Util.isPrefixed(uri)) {
                        uri = Digester.resolvePrefixedURI(uri, schema);
                    } else if (schema.vocab !== null) {
                        uri = schema.vocab + uri;
                    }
                    return uri;
                };
                return Util;
            }();
            exports_1("Util", Util);
        }
    };
});
$__System.register("3b", ["76", "5", "4a", "56", "9", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var InvalidJSONLDSyntaxError_1, Errors, HTTP, ObjectSchema, RDF, Utils;
    var MAX_CONTEXT_URLS, LINK_HEADER_REL, Class;
    return {
        setters: [function (InvalidJSONLDSyntaxError_1_1) {
            InvalidJSONLDSyntaxError_1 = InvalidJSONLDSyntaxError_1_1;
        }, function (Errors_1) {
            Errors = Errors_1;
        }, function (HTTP_1) {
            HTTP = HTTP_1;
        }, function (ObjectSchema_1) {
            ObjectSchema = ObjectSchema_1;
        }, function (RDF_1) {
            RDF = RDF_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            MAX_CONTEXT_URLS = 10;
            LINK_HEADER_REL = "http://www.w3.org/ns/json-ld#context";
            Class = function () {
                function Class() {}
                Class.expand = function (input) {
                    // Find and resolve context URLs
                    return this.retrieveContexts(input, Object.create(null), "").then(function () {
                        // Expand the document
                        var expanded = Class.process(new ObjectSchema.DigestedObjectSchema(), input);
                        // Optimize @graph
                        if (Utils.isObject(expanded) && "@graph" in expanded && Object.keys(expanded).length === 1) {
                            expanded = expanded["@graph"];
                        } else if (expanded === null) {
                            expanded = [];
                        }
                        // Normalize to an array
                        if (!Utils.isArray(expanded)) expanded = [expanded];
                        return expanded;
                    });
                };
                Class.getTargetFromLinkHeader = function (header) {
                    var rLinkHeader = /\s*<([^>]*?)>\s*(?:;\s*(.*))?/;
                    for (var _i = 0, _a = header.values; _i < _a.length; _i++) {
                        var value = _a[_i];
                        var match = value.toString().match(rLinkHeader);
                        if (!match) continue;
                        var target = match[1];
                        var params = match[2];
                        var rParams = /(.*?)=(?:(?:"([^"]*?)")|([^"]*?))\s*(?:(?:;\s*)|$)/g;
                        var result = {};
                        while (true) {
                            match = rParams.exec(params);
                            if (!match) break;
                            result[match[1]] = match[2] === undefined ? match[3] : match[2];
                        }
                        if (result["rel"] === LINK_HEADER_REL) return target;
                    }
                    return null;
                };
                Class.findContextURLs = function (input, contexts, base, replace) {
                    if (replace === void 0) {
                        replace = false;
                    }
                    var previousContexts = Object.keys(contexts).length;
                    if (Utils.isArray(input)) {
                        for (var _i = 0, _a = input; _i < _a.length; _i++) {
                            var element = _a[_i];
                            Class.findContextURLs(element, contexts, base);
                        }
                    } else if (Utils.isPlainObject(input)) {
                        for (var key in input) {
                            if ("@context" !== key) {
                                Class.findContextURLs(input[key], contexts, base);
                                continue;
                            }
                            var urlOrArrayOrContext = input[key];
                            if (Utils.isArray(urlOrArrayOrContext)) {
                                var contextArray = urlOrArrayOrContext;
                                for (var index = 0, length = contextArray.length; index < length; ++index) {
                                    var urlOrContext = contextArray[index];
                                    if (!Utils.isString(urlOrContext)) continue;
                                    var url = urlOrContext;
                                    url = RDF.URI.Util.resolve(base, url);
                                    if (replace) {
                                        if (Utils.isArray(contexts[url])) {
                                            Array.prototype.splice.apply(contextArray, [index, 1].concat(contexts[url]));
                                            index += contexts[url].length - 1;
                                            length = contextArray.length;
                                        } else {
                                            contextArray[index] = contexts[url];
                                        }
                                    } else if (!(url in contexts)) {
                                        contexts[url] = true;
                                    }
                                }
                            } else if (Utils.isString(urlOrArrayOrContext)) {
                                var url = urlOrArrayOrContext;
                                url = RDF.URI.Util.resolve(base, url);
                                if (replace) {
                                    input[key] = contexts[url];
                                } else if (!(url in contexts)) {
                                    contexts[url] = null;
                                }
                            }
                        }
                    }
                    return previousContexts < Object.keys(contexts).length;
                };
                Class.retrieveContexts = function (input, contextsRequested, base) {
                    if (Object.keys(contextsRequested).length > MAX_CONTEXT_URLS) return Promise.reject(new InvalidJSONLDSyntaxError_1.default("Maximum number of @context URLs exceeded."));
                    var contextToResolved = Object.create(null);
                    if (!Class.findContextURLs(input, contextToResolved, base)) return Promise.resolve();
                    function resolved(url, promise) {
                        return promise.then(function (_a) {
                            var object = _a[0],
                                response = _a[1];
                            var _contextsRequested = Utils.O.clone(contextsRequested);
                            _contextsRequested[url] = true;
                            var contextWrapper = { "@context": {} };
                            var header = response.getHeader("Content-Type");
                            if (!Utils.S.contains(header.toString(), "application/ld+json")) {
                                header = response.getHeader("Link");
                                var link = void 0;
                                if (!!header) link = Class.getTargetFromLinkHeader(header);
                                if (!!link) contextWrapper["@context"] = link;
                            } else {
                                contextWrapper["@context"] = "@context" in object ? object["@context"] : {};
                            }
                            contextToResolved[url] = contextWrapper["@context"];
                            return Class.retrieveContexts(contextWrapper, _contextsRequested, url);
                        });
                    }
                    var promises = [];
                    for (var url in contextToResolved) {
                        if (url in contextsRequested) return Promise.reject(new InvalidJSONLDSyntaxError_1.default("Cyclical @context URLs detected."));
                        var requestOptions = { sendCredentialsOnCORS: false };
                        HTTP.Request.Util.setAcceptHeader("application/ld+json, application/json", requestOptions);
                        var promise = HTTP.Request.Service.get(url, requestOptions, new HTTP.JSONParser.Class());
                        promises.push(resolved(url, promise));
                    }
                    return Promise.all(promises).then(function () {
                        Class.findContextURLs(input, contextToResolved, base, true);
                    });
                };
                Class.isKeyword = function (value) {
                    if (!Utils.isString(value)) return false;
                    switch (value) {
                        case "@base":
                        case "@context":
                        case "@container":
                        case "@default":
                        case "@embed":
                        case "@explicit":
                        case "@graph":
                        case "@id":
                        case "@index":
                        case "@language":
                        case "@list":
                        case "@omitDefault":
                        case "@preserve":
                        case "@requireAll":
                        case "@reverse":
                        case "@set":
                        case "@type":
                        case "@value":
                        case "@vocab":
                            return true;
                        default:
                            return false;
                    }
                };
                Class.isValidType = function (value) {
                    if (Utils.isString(value)) return true;
                    if (!Utils.isArray(value)) return false;
                    for (var _i = 0, _a = value; _i < _a.length; _i++) {
                        var element = _a[_i];
                        if (!Utils.isString(element)) return false;
                    }
                    return true;
                };
                Class.expandURI = function (schema, uri, relativeTo) {
                    if (relativeTo === void 0) {
                        relativeTo = {};
                    }
                    if (uri === null || Class.isKeyword(uri) || RDF.URI.Util.isAbsolute(uri)) return uri;
                    if (schema.properties.has(uri)) return schema.properties.get(uri).uri.stringValue;
                    if (RDF.URI.Util.isPrefixed(uri)) return ObjectSchema.Digester.resolvePrefixedURI(uri, schema);
                    if (schema.prefixes.has(uri)) return schema.prefixes.get(uri).stringValue;
                    if (relativeTo.vocab) {
                        if (schema.vocab === null) return null;
                        return schema.vocab + uri;
                    }
                    if (relativeTo.base) RDF.URI.Util.resolve(schema.base, uri);
                    return uri;
                };
                Class.expandLanguageMap = function (languageMap) {
                    var expandedLanguage = [];
                    var keys = Object.keys(languageMap).sort();
                    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                        var key = keys_1[_i];
                        var values = languageMap[key];
                        if (!Utils.isArray(values)) values = [values];
                        for (var _a = 0, values_1 = values; _a < values_1.length; _a++) {
                            var item = values_1[_a];
                            if (item === null) continue;
                            if (!Utils.isString(item)) throw new InvalidJSONLDSyntaxError_1.default("Language map values must be strings.");
                            expandedLanguage.push({
                                "@value": item,
                                "@language": key.toLowerCase()
                            });
                        }
                    }
                    return expandedLanguage;
                };
                Class.getContainer = function (context, property) {
                    if (context.properties.has(property)) return context.properties.get(property).containerType;
                    return undefined;
                };
                Class.expandValue = function (context, value, propertyName) {
                    if (Utils.isNull(value) || !Utils.isDefined(value)) return null;
                    if (propertyName === "@id") {
                        return Class.expandURI(context, value, { base: true });
                    } else if (propertyName === "@type") {
                        return Class.expandURI(context, value, { vocab: true, base: true });
                    }
                    var definition = new ObjectSchema.DigestedPropertyDefinition();
                    if (context.properties.has(propertyName)) definition = context.properties.get(propertyName);
                    if (definition.literal === false || propertyName === "@graph" && Utils.isString(value)) {
                        var options = { base: true };
                        if (definition.pointerType === ObjectSchema.PointerType.VOCAB) options.vocab = true;
                        return { "@id": Class.expandURI(context, value, options) };
                    }
                    if (Class.isKeyword(propertyName)) return value;
                    var expandedValue = {};
                    if (!!definition.literalType) {
                        expandedValue["@type"] = definition.literalType.stringValue;
                    } else if (Utils.isString(value)) {
                        var language = Utils.isDefined(definition.language) ? definition.language : context.language;
                        if (language !== null) expandedValue["@language"] = language;
                    }
                    // Normalize to string unknowns types
                    if (["boolean", "number", "string"].indexOf(typeof value) === -1) value = value.toString();
                    expandedValue["@value"] = value;
                    return expandedValue;
                };
                Class.process = function (context, element, activeProperty, insideList) {
                    if (Utils.isNull(element) || !Utils.isDefined(element)) return null;
                    // Expand an element according to the context
                    if (!Utils.isArray(element) && !Utils.isObject(element)) {
                        if (!insideList && (activeProperty === null || activeProperty === "@graph")) return null;
                        return Class.expandValue(context, element, activeProperty);
                    }
                    // Recursively expand the array
                    if (Utils.isArray(element)) {
                        var container = Class.getContainer(context, activeProperty);
                        insideList = insideList || container === ObjectSchema.ContainerType.LIST;
                        var expandedElement_1 = [];
                        for (var _i = 0, _a = element; _i < _a.length; _i++) {
                            var item = _a[_i];
                            var expandedItem = Class.process(context, item, activeProperty);
                            if (expandedItem === null) continue;
                            if (insideList && (Utils.isArray(expandedItem) || RDF.List.Factory.is(expandedItem))) throw new InvalidJSONLDSyntaxError_1.default("Lists of lists are not permitted.");
                            if (!Utils.isArray(expandedItem)) expandedItem = [expandedItem];
                            Array.prototype.push.apply(expandedElement_1, expandedItem);
                        }
                        return expandedElement_1;
                    }
                    // Expand current context
                    if ("@context" in element) {
                        context = ObjectSchema.Digester.combineDigestedObjectSchemas([ObjectSchema.Digester.digestSchema(element["@context"]), context]);
                    }
                    // Recursively expand the object
                    var expandedElement = {};
                    var keys = Object.keys(element);
                    for (var _b = 0, keys_2 = keys; _b < keys_2.length; _b++) {
                        var key = keys_2[_b];
                        if (key === "@context") continue;
                        var uri = Class.expandURI(context, key, { vocab: true });
                        if (!uri || !(RDF.URI.Util.isAbsolute(uri) || RDF.URI.Util.isBNodeID(uri) || Class.isKeyword(uri))) continue;
                        var value = element[key];
                        // Validate value
                        if (Class.isKeyword(uri)) {
                            if (uri === "@id" && !Utils.isString(value)) throw new InvalidJSONLDSyntaxError_1.default("\"@id\" value must a string.");
                            if (uri === "@type" && !Class.isValidType(value)) throw new InvalidJSONLDSyntaxError_1.default("\"@type\" value must a string, an array of strings.");
                            if (uri === "@graph" && !(Utils.isObject(value) || Utils.isArray(value))) throw new InvalidJSONLDSyntaxError_1.default("\"@graph\" value must not be an object or an array.");
                            if (uri === "@value" && (Utils.isObject(value) || Utils.isArray(value))) throw new InvalidJSONLDSyntaxError_1.default("\"@value\" value must not be an object or an array.");
                            if (uri === "@language") {
                                if (value === null) continue;
                                if (!Utils.isString(value)) throw new InvalidJSONLDSyntaxError_1.default("\"@language\" value must be a string.");
                                value = value.toLowerCase();
                            }
                            if (uri === "@index" && !Utils.isString(value)) throw new InvalidJSONLDSyntaxError_1.default("\"@index\" value must be a string.");
                            if (uri === "@reverse" && !Utils.isObject(value)) throw new InvalidJSONLDSyntaxError_1.default("\"@reverse\" value must be an object.");
                            // TODO: Not supported
                            if (uri === "@index" || uri === "@reverse") throw new Errors.NotImplementedError("The SDK does not support \"@index\" and \"@reverse\" tags.");
                        }
                        var expandedValue = void 0;
                        var container = Class.getContainer(context, key);
                        if (container === ObjectSchema.ContainerType.LANGUAGE && Utils.isObject(value)) {
                            expandedValue = Class.expandLanguageMap(value);
                        } else {
                            var nextActiveProperty = key;
                            var isList = uri === "@list";
                            if (isList || uri === "@set") {
                                nextActiveProperty = activeProperty;
                                if (isList && activeProperty === "@graph") nextActiveProperty = null;
                            }
                            expandedValue = Class.process(context, value, nextActiveProperty, isList);
                        }
                        // Drop null values if is not a "@value" property
                        if (expandedValue === null && uri !== "@value") continue;
                        if (uri !== "@list" && !RDF.List.Factory.is(expandedValue) && container === ObjectSchema.ContainerType.LIST) {
                            if (!Utils.isArray(expandedValue)) expandedValue = [expandedValue];
                            expandedValue = { "@list": expandedValue };
                        }
                        var useArray = ["@type", "@id", "@value", "@language"].indexOf(uri) === -1;
                        Class.addValue(expandedElement, uri, expandedValue, { propertyIsArray: useArray });
                    }
                    if ("@value" in expandedElement) {
                        if (expandedElement["@value"] === null) expandedElement = null;
                    } else if ("@type" in expandedElement) {
                        if (!Utils.isArray(expandedElement["@type"])) expandedElement["@type"] = [expandedElement["@type"]];
                    } else if ("@set" in expandedElement) {
                        expandedElement = expandedElement["@set"];
                    }
                    return expandedElement;
                };
                Class.addValue = function (element, propertyName, value, options) {
                    if (Utils.isArray(value)) {
                        var values = value;
                        if (values.length === 0 && options.propertyIsArray && !Utils.hasProperty(element, propertyName)) element[propertyName] = [];
                        for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {
                            var item = values_2[_i];
                            Class.addValue(element, propertyName, item, options);
                        }
                    } else if (propertyName in element) {
                        if (!Class.hasValue(element, propertyName, value)) {
                            var items = element[propertyName];
                            if (!Utils.isArray(items)) items = element[propertyName] = [items];
                            items.push(value);
                        }
                    } else {
                        element[propertyName] = options.propertyIsArray ? [value] : value;
                    }
                };
                Class.hasProperty = function (element, propertyName) {
                    if (propertyName in element) {
                        var item = element[propertyName];
                        return !Utils.isArray(item) || item.length > 0;
                    }
                    return false;
                };
                Class.compareValues = function (value1, value2) {
                    if (value1 === value2) return true;
                    if (Utils.isObject(value1) && Utils.isObject(value2)) {
                        if ("@value" in value1 && value1["@value"] === value2["@value"] && value1["@type"] === value2["@type"] && value1["@language"] === value2["@language"] && value1["@index"] === value2["@index"]) return true;
                        if ("@id" in value1) return value1["@id"] === value2["@id"];
                    }
                    return false;
                };
                Class.hasValue = function (element, propertyName, value) {
                    if (Class.hasProperty(element, propertyName)) {
                        var item = element[propertyName];
                        var isList = RDF.List.Factory.is(item);
                        if (isList || Utils.isArray(item)) {
                            var items = isList ? item["@list"] : item;
                            for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                                var entry = items_1[_i];
                                if (Class.compareValues(entry, value)) return true;
                            }
                        } else if (!Utils.isArray(value)) {
                            return Class.compareValues(item, value);
                        }
                    }
                    return false;
                };
                return Class;
            }();
            exports_1("Class", Class);
            exports_1("default", Class);
        }
    };
});
$__System.register("4e", ["53", "39", "3b"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Converter, Parser, Processor;
    return {
        setters: [function (Converter_1) {
            Converter = Converter_1;
        }, function (Parser_1) {
            Parser = Parser_1;
        }, function (Processor_1) {
            Processor = Processor_1;
        }],
        execute: function () {
            exports_1("Converter", Converter);
            exports_1("Parser", Parser);
            exports_1("Processor", Processor);
        }
    };
});
$__System.register("42", ["5", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Errors, Utils;
    var Class, Util;
    function prefixWithObjectSchema(uri, objectSchema) {
        var prefixEntries = objectSchema.prefixes.entries();
        while (true) {
            var result = prefixEntries.next();
            if (result.done) return uri;
            var _a = result.value,
                prefix = _a[0],
                prefixURI = _a[1];
            if (!Util.isAbsolute(prefixURI.toString())) continue;
            if (!uri.startsWith(prefixURI.toString())) continue;
            return Util.prefix(uri, prefix, prefixURI.toString());
        }
    }
    return {
        setters: [function (Errors_1) {
            Errors = Errors_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            Class = function () {
                function Class(stringValue) {
                    this.stringValue = stringValue;
                }
                Class.prototype.toString = function () {
                    return this.stringValue;
                };
                return Class;
            }();
            exports_1("Class", Class);
            Util = function () {
                function Util() {}
                Util.hasFragment = function (uri) {
                    return uri.indexOf("#") !== -1;
                };
                Util.hasQuery = function (uri) {
                    return uri.indexOf("?") !== -1;
                };
                Util.hasProtocol = function (uri) {
                    return Utils.S.startsWith(uri, "https://") || Utils.S.startsWith(uri, "http://");
                };
                Util.isAbsolute = function (uri) {
                    return Utils.S.startsWith(uri, "http://") || Utils.S.startsWith(uri, "https://") || Utils.S.startsWith(uri, "://");
                };
                Util.isRelative = function (uri) {
                    return !Util.isAbsolute(uri);
                };
                Util.isBNodeID = function (uri) {
                    return Utils.S.startsWith(uri, "_:");
                };
                Util.generateBNodeID = function () {
                    return "_:" + Utils.UUID.generate();
                };
                Util.isPrefixed = function (uri) {
                    return !Util.isAbsolute(uri) && !Util.isBNodeID(uri) && Utils.S.contains(uri, ":");
                };
                Util.isFragmentOf = function (fragmentURI, uri) {
                    if (!Util.hasFragment(fragmentURI)) return false;
                    return Util.getDocumentURI(fragmentURI) === uri;
                };
                Util.isBaseOf = function (baseURI, uri) {
                    if (baseURI === uri) return true;
                    if (baseURI === "") return true;
                    if (uri.startsWith(baseURI)) {
                        if (Utils.S.endsWith(baseURI, "/") || Utils.S.endsWith(baseURI, "#")) return true;
                        var relativeURI = uri.substring(baseURI.length);
                        if (Utils.S.startsWith(relativeURI, "/") || Utils.S.startsWith(relativeURI, "#")) return true;
                    }
                    return false;
                };
                Util.getRelativeURI = function (absoluteURI, base) {
                    if (!absoluteURI.startsWith(base)) return absoluteURI;
                    return absoluteURI.substring(base.length);
                };
                Util.getDocumentURI = function (uri) {
                    var parts = uri.split("#");
                    if (parts.length > 2) throw new Error("IllegalArgument: The URI provided has more than one # sign.");
                    return parts[0];
                };
                Util.getFragment = function (uri) {
                    var parts = uri.split("#");
                    if (parts.length < 2) return null;
                    if (parts.length > 2) throw new Error("IllegalArgument: The URI provided has more than one # sign.");
                    return parts[1];
                };
                Util.getSlug = function (uri) {
                    var uriParts = uri.split("#");
                    if (uriParts.length === 2) return Util.getSlug(uriParts[1]);
                    if (uriParts.length > 2) throw new Errors.IllegalArgumentError("Invalid URI: The uri contains two '#' symbols.");
                    uri = uriParts[0];
                    if (uri === "") return uri;
                    if (uri === "/") return uri;
                    var parts = uri.split("/");
                    if (parts[parts.length - 1] === "") {
                        return parts[parts.length - 2] + "/";
                    } else {
                        return parts[parts.length - 1];
                    }
                };
                Util.getParameters = function (uri) {
                    var parameters = new Map();
                    if (!Util.hasQuery(uri)) return parameters;
                    uri.replace(/^.*\?/, "").split("&").forEach(function (param) {
                        var parts = param.replace(/\+/g, " ").split("=");
                        var key = parts.shift();
                        var val = parts.length > 0 ? parts.join("=") : null;
                        if (!parameters.has(key)) {
                            parameters.set(key, val);
                        } else {
                            parameters.set(key, [].concat(parameters.get(key), val));
                        }
                    });
                    return parameters;
                };
                Util.resolve = function (parentURI, childURI) {
                    if (Util.isAbsolute(childURI) || Util.isBNodeID(childURI) || Util.isPrefixed(childURI)) return childURI;
                    var protocol = parentURI.substr(0, parentURI.indexOf("://") + 3);
                    var path = parentURI.substr(parentURI.indexOf("://") + 3, parentURI.length - 1);
                    if (path.lastIndexOf("/") === -1) path += "/";
                    if (Utils.S.startsWith(childURI, "?") || Utils.S.startsWith(childURI, "#")) {
                        if (Util.hasQuery(path)) path = path.substr(0, path.indexOf("?"));
                        if (Util.hasFragment(path) && (!Utils.S.startsWith(childURI, "?") || Utils.S.endsWith(path, "#"))) path = Util.getDocumentURI(path);
                    } else {
                        path = path.substr(0, path.lastIndexOf("/") + 1);
                        if (!Utils.S.endsWith(path, "?") && !Utils.S.endsWith(path, "#") && !Utils.S.endsWith(path, "/")) path += "/";
                    }
                    if (Utils.S.startsWith(childURI, "/")) {
                        childURI = childURI.substr(1, childURI.length);
                    }
                    return protocol + path + childURI;
                };
                Util.removeProtocol = function (uri) {
                    if (Utils.S.startsWith(uri, "https://")) return uri.substr(5, uri.length);
                    if (Utils.S.startsWith(uri, "http://")) return uri.substr(4, uri.length);
                    return uri;
                };
                Util.prefix = function (uri, prefixOrObjectSchema, prefixURI) {
                    if (prefixURI === void 0) {
                        prefixURI = null;
                    }
                    var objectSchema = !Utils.isString(prefixOrObjectSchema) ? prefixOrObjectSchema : null;
                    var prefix = Utils.isString(prefixOrObjectSchema) ? prefixOrObjectSchema : null;
                    if (objectSchema !== null) return prefixWithObjectSchema(uri, objectSchema);
                    if (Util.isPrefixed(uri) || !uri.startsWith(prefixURI)) return uri;
                    return prefix + ":" + uri.substring(prefixURI.length);
                };
                return Util;
            }();
            exports_1("Util", Util);
            exports_1("default", Class);
        }
    };
});
$__System.register("77", ["4e", "78", "a", "42"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var JSONLD, RDFNode, Utils, URI;
    var Factory, Util, Parser;
    return {
        setters: [function (JSONLD_1) {
            JSONLD = JSONLD_1;
        }, function (RDFNode_1) {
            RDFNode = RDFNode_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }, function (URI_1) {
            URI = URI_1;
        }],
        execute: function () {
            Factory = function () {
                function Factory() {}
                Factory.is = function (object) {
                    return Utils.hasProperty(object, "@graph") && Utils.isArray(object["@graph"]);
                };
                Factory.create = function (resources, uri) {
                    var document = uri ? RDFNode.Factory.create(uri) : {};
                    document["@graph"] = resources;
                    return document;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
            Util = function () {
                function Util() {}
                Util.getDocuments = function (value) {
                    if (Utils.isArray(value)) {
                        var array = value;
                        return array.filter(function (element) {
                            return Factory.is(element);
                        });
                    } else if (Utils.isObject(value)) {
                        if (Factory.is(value)) return [value];
                    }
                    return [];
                };
                Util.getResources = function (value) {
                    var freeNodes = RDFNode.Util.getFreeNodes(value);
                    var documents = Util.getDocuments(value);
                    var resources = [].concat(freeNodes);
                    for (var _i = 0, documents_1 = documents; _i < documents_1.length; _i++) {
                        var document = documents_1[_i];
                        resources = resources.concat(document["@graph"]);
                    }
                    return resources;
                };
                Util.getDocumentResources = function (document) {
                    var resources = Util.getResources(document);
                    var documentResources = [];
                    for (var i = 0, length = resources.length; i < length; i++) {
                        var resource = resources[i];
                        var uri = resource["@id"];
                        if (!uri) continue;
                        if (!URI.Util.hasFragment(uri) && !URI.Util.isBNodeID(uri)) documentResources.push(resource);
                    }
                    return documentResources;
                };
                Util.getFragmentResources = function (document, documentResource) {
                    var resources = Util.getResources(document);
                    var documentURIToMatch = null;
                    if (documentResource) {
                        if (Utils.isString(documentResource)) {
                            documentURIToMatch = documentResource;
                        } else documentURIToMatch = documentResource["@id"];
                    }
                    var fragmentResources = [];
                    for (var i = 0, length = resources.length; i < length; i++) {
                        var resource = resources[i];
                        var uri = resource["@id"];
                        if (!uri) continue;
                        if (!URI.Util.hasFragment(uri)) continue;
                        if (!documentURIToMatch) {
                            fragmentResources.push(resource);
                        } else {
                            var documentURI = URI.Util.getDocumentURI(uri);
                            if (documentURI === documentURIToMatch) fragmentResources.push(resource);
                        }
                    }
                    return fragmentResources;
                };
                Util.getBNodeResources = function (document) {
                    var resources = Util.getResources(document);
                    var bnodes = [];
                    for (var i = 0, length = resources.length; i < length; i++) {
                        var resource = resources[i];
                        if (!("@id" in resource) || URI.Util.isBNodeID(resource["@id"])) bnodes.push(resource);
                    }
                    return bnodes;
                };
                return Util;
            }();
            exports_1("Util", Util);
            Parser = function () {
                function Parser() {}
                Parser.prototype.parse = function (input) {
                    var jsonLDParser = new JSONLD.Parser.Class();
                    return jsonLDParser.parse(input).then(function (expandedResult) {
                        return Util.getDocuments(expandedResult);
                    });
                };
                return Parser;
            }();
            exports_1("Parser", Parser);
        }
    };
});
$__System.register("79", ["a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Utils;
    var Factory;
    return {
        setters: [function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            Factory = function () {
                function Factory() {}
                Factory.is = function (value) {
                    return Utils.hasPropertyDefined(value, "@list");
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
        }
    };
});
$__System.register("7a", [], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    return {
        setters: [],
        execute: function () {}
    };
});
$__System.register("7b", ["34"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var AbstractError_1;
    var IDAlreadyInUseError;
    return {
        setters: [function (AbstractError_1_1) {
            AbstractError_1 = AbstractError_1_1;
        }],
        execute: function () {
            IDAlreadyInUseError = function (_super) {
                __extends(IDAlreadyInUseError, _super);
                function IDAlreadyInUseError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(IDAlreadyInUseError.prototype, "name", {
                    get: function () {
                        return "IDAlreadyInUseError";
                    },
                    enumerable: true,
                    configurable: true
                });
                return IDAlreadyInUseError;
            }(AbstractError_1.default);
            exports_1("default", IDAlreadyInUseError);
        }
    };
});
$__System.register("7c", ["34"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var AbstractError_1;
    var IllegalActionError;
    return {
        setters: [function (AbstractError_1_1) {
            AbstractError_1 = AbstractError_1_1;
        }],
        execute: function () {
            IllegalActionError = function (_super) {
                __extends(IllegalActionError, _super);
                function IllegalActionError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(IllegalActionError.prototype, "name", {
                    get: function () {
                        return "IllegalActionError";
                    },
                    enumerable: true,
                    configurable: true
                });
                return IllegalActionError;
            }(AbstractError_1.default);
            exports_1("default", IllegalActionError);
        }
    };
});
$__System.register("16", ["34"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var AbstractError_1;
    var IllegalArgumentError;
    return {
        setters: [function (AbstractError_1_1) {
            AbstractError_1 = AbstractError_1_1;
        }],
        execute: function () {
            IllegalArgumentError = function (_super) {
                __extends(IllegalArgumentError, _super);
                function IllegalArgumentError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(IllegalArgumentError.prototype, "name", {
                    get: function () {
                        return "IllegalArgumentError";
                    },
                    enumerable: true,
                    configurable: true
                });
                return IllegalArgumentError;
            }(AbstractError_1.default);
            exports_1("default", IllegalArgumentError);
        }
    };
});
$__System.register("7d", ["34"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var AbstractError_1;
    var IllegalStateError;
    return {
        setters: [function (AbstractError_1_1) {
            AbstractError_1 = AbstractError_1_1;
        }],
        execute: function () {
            IllegalStateError = function (_super) {
                __extends(IllegalStateError, _super);
                function IllegalStateError(message) {
                    if (message === void 0) {
                        message = "";
                    }
                    _super.call(this, message);
                }
                Object.defineProperty(IllegalStateError.prototype, "name", {
                    get: function () {
                        return "IllegalStateError";
                    },
                    enumerable: true,
                    configurable: true
                });
                return IllegalStateError;
            }(AbstractError_1.default);
            exports_1("default", IllegalStateError);
        }
    };
});
$__System.register("76", ["34"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var AbstractError_1;
    var InvalidJSONLDSyntaxError;
    return {
        setters: [function (AbstractError_1_1) {
            AbstractError_1 = AbstractError_1_1;
        }],
        execute: function () {
            InvalidJSONLDSyntaxError = function (_super) {
                __extends(InvalidJSONLDSyntaxError, _super);
                function InvalidJSONLDSyntaxError() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(InvalidJSONLDSyntaxError.prototype, "name", {
                    get: function () {
                        return "InvalidJSONLDSyntaxError";
                    },
                    enumerable: true,
                    configurable: true
                });
                return InvalidJSONLDSyntaxError;
            }(AbstractError_1.default);
            exports_1("default", InvalidJSONLDSyntaxError);
        }
    };
});
$__System.register("34", [], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var AbstractError;
    return {
        setters: [],
        execute: function () {
            AbstractError = function (_super) {
                __extends(AbstractError, _super);
                function AbstractError(message) {
                    _super.call(this, message);
                    if ("captureStackTrace" in Error) Error.captureStackTrace(this, this.constructor);
                    this.message = message;
                }
                Object.defineProperty(AbstractError.prototype, "name", {
                    get: function () {
                        return "AbstractError";
                    },
                    enumerable: true,
                    configurable: true
                });
                AbstractError.prototype.toString = function () {
                    return this.name + ": " + this.message;
                };
                return AbstractError;
            }(Error);
            exports_1("default", AbstractError);
        }
    };
});
$__System.register("7e", ["34"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var AbstractError_1;
    var NotImplementedError;
    return {
        setters: [function (AbstractError_1_1) {
            AbstractError_1 = AbstractError_1_1;
        }],
        execute: function () {
            NotImplementedError = function (_super) {
                __extends(NotImplementedError, _super);
                function NotImplementedError(message) {
                    if (message === void 0) {
                        message = "";
                    }
                    _super.call(this, message);
                }
                Object.defineProperty(NotImplementedError.prototype, "name", {
                    get: function () {
                        return "NotImplementedError";
                    },
                    enumerable: true,
                    configurable: true
                });
                return NotImplementedError;
            }(AbstractError_1.default);
            exports_1("default", NotImplementedError);
        }
    };
});
$__System.register("5", ["7b", "7c", "16", "7d", "76", "7e"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var IDAlreadyInUseError_1, IllegalActionError_1, IllegalArgumentError_1, IllegalStateError_1, InvalidJSONLDSyntaxError_1, NotImplementedError_1;
    return {
        setters: [function (IDAlreadyInUseError_1_1) {
            IDAlreadyInUseError_1 = IDAlreadyInUseError_1_1;
        }, function (IllegalActionError_1_1) {
            IllegalActionError_1 = IllegalActionError_1_1;
        }, function (IllegalArgumentError_1_1) {
            IllegalArgumentError_1 = IllegalArgumentError_1_1;
        }, function (IllegalStateError_1_1) {
            IllegalStateError_1 = IllegalStateError_1_1;
        }, function (InvalidJSONLDSyntaxError_1_1) {
            InvalidJSONLDSyntaxError_1 = InvalidJSONLDSyntaxError_1_1;
        }, function (NotImplementedError_1_1) {
            NotImplementedError_1 = NotImplementedError_1_1;
        }],
        execute: function () {
            exports_1("IDAlreadyInUseError", IDAlreadyInUseError_1.default);
            exports_1("IllegalActionError", IllegalActionError_1.default);
            exports_1("IllegalArgumentError", IllegalArgumentError_1.default);
            exports_1("IllegalStateError", IllegalStateError_1.default);
            exports_1("InvalidJSONLDSyntaxError", InvalidJSONLDSyntaxError_1.default);
            exports_1("NotImplementedError", NotImplementedError_1.default);
        }
    };
});
$__System.register("7f", ["5", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Errors, Utils;
    var DateSerializer, dateSerializer, DateTimeSerializer, dateTimeSerializer, TimeSerializer, timeSerializer, IntegerSerializer, integerSerializer, UnsignedIntegerSerializer, unsignedIntegerSerializer, FloatSerializer, floatSerializer, BooleanSerializer, booleanSerializer, StringSerializer, stringSerializer;
    function pad(value) {
        var paddedValue = String(value);
        if (paddedValue.length === 1) paddedValue = "0" + paddedValue;
        return paddedValue;
    }
    return {
        setters: [function (Errors_1) {
            Errors = Errors_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            DateSerializer = function () {
                function DateSerializer() {}
                DateSerializer.prototype.serialize = function (value) {
                    if (!Utils.isDate(value)) throw new Errors.IllegalArgumentError("The value is not a Date object.");
                    return value.getUTCFullYear() + "-" + pad(value.getUTCMonth() + 1) + "-" + pad(value.getUTCDate());
                };
                return DateSerializer;
            }();
            exports_1("DateSerializer", DateSerializer);
            exports_1("dateSerializer", dateSerializer = new DateSerializer());
            DateTimeSerializer = function () {
                function DateTimeSerializer() {}
                DateTimeSerializer.prototype.serialize = function (value) {
                    if (!Utils.isDate(value)) throw new Errors.IllegalArgumentError("The value is not a Date object.");
                    return value.toISOString();
                };
                return DateTimeSerializer;
            }();
            exports_1("DateTimeSerializer", DateTimeSerializer);
            exports_1("dateTimeSerializer", dateTimeSerializer = new DateTimeSerializer());
            TimeSerializer = function () {
                function TimeSerializer() {}
                TimeSerializer.prototype.serialize = function (value) {
                    if (!Utils.isDate(value)) throw new Errors.IllegalArgumentError("The value is not a Date object.");
                    return pad(value.getUTCHours()) + ":" + pad(value.getUTCMinutes()) + ":" + pad(value.getUTCSeconds()) + "." + String((value.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5) + "Z";
                };
                return TimeSerializer;
            }();
            exports_1("TimeSerializer", TimeSerializer);
            exports_1("timeSerializer", timeSerializer = new TimeSerializer());
            IntegerSerializer = function () {
                function IntegerSerializer() {}
                IntegerSerializer.prototype.serialize = function (value) {
                    if (!Utils.isNumber(value)) throw new Errors.IllegalArgumentError("The value is not a number.");
                    // Negative truncate
                    return (~~value).toString();
                };
                return IntegerSerializer;
            }();
            exports_1("IntegerSerializer", IntegerSerializer);
            exports_1("integerSerializer", integerSerializer = new IntegerSerializer());
            UnsignedIntegerSerializer = function (_super) {
                __extends(UnsignedIntegerSerializer, _super);
                function UnsignedIntegerSerializer() {
                    _super.apply(this, arguments);
                }
                UnsignedIntegerSerializer.prototype.serialize = function (value) {
                    var stringValue = _super.prototype.serialize.call(this, value);
                    stringValue = Utils.S.startsWith(stringValue, "-") ? stringValue.substring(1) : stringValue;
                    return stringValue;
                };
                return UnsignedIntegerSerializer;
            }(IntegerSerializer);
            exports_1("UnsignedIntegerSerializer", UnsignedIntegerSerializer);
            exports_1("unsignedIntegerSerializer", unsignedIntegerSerializer = new UnsignedIntegerSerializer());
            FloatSerializer = function () {
                function FloatSerializer() {}
                FloatSerializer.prototype.serialize = function (value) {
                    if (!Utils.isNumber(value)) throw new Errors.IllegalArgumentError("The value is not a number.");
                    if (value === Number.POSITIVE_INFINITY) return "INF";
                    if (value === Number.NEGATIVE_INFINITY) return "-INF";
                    return value.toString();
                };
                return FloatSerializer;
            }();
            exports_1("FloatSerializer", FloatSerializer);
            exports_1("floatSerializer", floatSerializer = new FloatSerializer());
            BooleanSerializer = function () {
                function BooleanSerializer() {}
                BooleanSerializer.prototype.serialize = function (value) {
                    return (!!value).toString();
                };
                return BooleanSerializer;
            }();
            exports_1("BooleanSerializer", BooleanSerializer);
            exports_1("booleanSerializer", booleanSerializer = new BooleanSerializer());
            StringSerializer = function () {
                function StringSerializer() {}
                StringSerializer.prototype.serialize = function (value) {
                    return String(value);
                };
                return StringSerializer;
            }();
            exports_1("StringSerializer", StringSerializer);
            exports_1("stringSerializer", stringSerializer = new StringSerializer());
        }
    };
});
$__System.register("80", ["7f"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var XSD;
    return {
        setters: [function (XSD_1) {
            XSD = XSD_1;
        }],
        execute: function () {
            exports_1("XSD", XSD);
        }
    };
});
$__System.register("81", ["a", "57", "5", "7a", "80"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Utils, XSD, Errors, Serializer_1, Serializers;
    var Factory;
    return {
        setters: [function (Utils_1) {
            Utils = Utils_1;
        }, function (XSD_1) {
            XSD = XSD_1;
        }, function (Errors_1) {
            Errors = Errors_1;
        }, function (Serializer_1_1) {
            Serializer_1 = Serializer_1_1;
        }, function (Serializers_1) {
            Serializers = Serializers_1;
        }],
        execute: function () {
            Factory = function () {
                function Factory() {}
                Factory.from = function (value) {
                    if (Utils.isNull(value)) throw new Errors.IllegalArgumentError("Null cannot be converted into a Literal");
                    if (!Utils.isDefined(value)) throw new Errors.IllegalArgumentError("The value is undefined");
                    var type;
                    switch (true) {
                        case Utils.isDate(value):
                            type = XSD.DataType.dateTime;
                            value = value.toISOString();
                            break;
                        case Utils.isNumber(value):
                            if (Utils.isInteger(value)) {
                                type = XSD.DataType.integer;
                            } else {
                                type = XSD.DataType.double;
                            }
                            break;
                        case Utils.isString(value):
                            type = XSD.DataType.string;
                            break;
                        case Utils.isBoolean(value):
                            type = XSD.DataType.boolean;
                            break;
                        default:
                            // Treat it as an unknown object
                            type = XSD.DataType.object;
                            value = JSON.stringify(value);
                            break;
                    }
                    var literal = { "@value": value.toString() };
                    if (type) literal["@type"] = type;
                    return literal;
                };
                Factory.parse = function (literalValueOrLiteral, literalDataType) {
                    if (literalDataType === void 0) {
                        literalDataType = null;
                    }
                    var literalValue;
                    if (Utils.isString(literalValueOrLiteral)) {
                        literalValue = literalValueOrLiteral;
                    } else {
                        var literal = literalValueOrLiteral;
                        if (!literal) return null;
                        if (!Utils.hasProperty(literal, "@value")) return null;
                        literalDataType = "@type" in literal ? literal["@type"] : null;
                        literalValue = literal["@value"];
                    }
                    if (literalDataType === null) return literalValue;
                    // The DataType isn't supported
                    if (!Utils.hasProperty(XSD.DataType, literalDataType)) return literalValue;
                    var value;
                    var parts;
                    switch (literalDataType) {
                        // Dates
                        case XSD.DataType.date:
                        case XSD.DataType.dateTime:
                            value = new Date(literalValue);
                            break;
                        case XSD.DataType.time:
                            parts = literalValue.match(/(\d+):(\d+):(\d+)\.(\d+)Z/);
                            value = new Date();
                            value.setUTCHours(parseFloat(parts[1]), parseFloat(parts[2]), parseFloat(parts[3]), parseFloat(parts[4]));
                            break;
                        case XSD.DataType.duration:
                            // TODO: Support duration values (create a class or something...)
                            break;
                        case XSD.DataType.gDay:
                        case XSD.DataType.gMonth:
                        case XSD.DataType.gMonthDay:
                        case XSD.DataType.gYear:
                        case XSD.DataType.gYearMonth:
                            // TODO: Decide. Should we return it as a Date?
                            break;
                        // Numbers
                        case XSD.DataType.byte:
                        case XSD.DataType.decimal:
                        case XSD.DataType.int:
                        case XSD.DataType.integer:
                        case XSD.DataType.long:
                        case XSD.DataType.negativeInteger:
                        case XSD.DataType.nonNegativeInteger:
                        case XSD.DataType.nonPositiveInteger:
                        case XSD.DataType.positiveInteger:
                        case XSD.DataType.short:
                        case XSD.DataType.unsignedLong:
                        case XSD.DataType.unsignedInt:
                        case XSD.DataType.unsignedShort:
                        case XSD.DataType.unsignedByte:
                        case XSD.DataType.double:
                        case XSD.DataType.float:
                            value = parseFloat(literalValue);
                            break;
                        // Misc
                        case XSD.DataType.boolean:
                            value = Utils.parseBoolean(literalValue);
                            break;
                        case XSD.DataType.string:
                            value = literalValue;
                            break;
                        case XSD.DataType.object:
                            value = JSON.parse(literalValue);
                            break;
                        default:
                            break;
                    }
                    return value;
                };
                Factory.is = function (value) {
                    return Utils.hasProperty(value, "@value") && Utils.isString(value["@value"]);
                };
                Factory.hasType = function (value, type) {
                    if (!value["@type"] && type === XSD.DataType.string) return true;
                    return value["@type"] === type;
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
            exports_1("Serializer", Serializer_1.default);
            exports_1("Serializers", Serializers);
        }
    };
});
$__System.register("57", ["a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Utils;
    var namespace, DataType;
    return {
        setters: [function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            exports_1("namespace", namespace = "http://www.w3.org/2001/XMLSchema#");
            DataType = function () {
                function DataType() {}
                DataType.date = namespace + "date";
                DataType.dateTime = namespace + "dateTime";
                DataType.duration = namespace + "duration";
                DataType.gDay = namespace + "gDay";
                DataType.gMonth = namespace + "gMonth";
                DataType.gMonthDay = namespace + "gMonthDay";
                DataType.gYear = namespace + "gYear";
                DataType.gYearMonth = namespace + "gYearMonth";
                DataType.time = namespace + "time";
                DataType.byte = namespace + "byte";
                DataType.decimal = namespace + "decimal";
                DataType.int = namespace + "int";
                DataType.integer = namespace + "integer";
                DataType.long = namespace + "long";
                DataType.negativeInteger = namespace + "negativeInteger";
                DataType.nonNegativeInteger = namespace + "nonNegativeInteger";
                DataType.nonPositiveInteger = namespace + "nonPositiveInteger";
                DataType.positiveInteger = namespace + "positiveInteger";
                DataType.short = namespace + "short";
                DataType.unsignedLong = namespace + "unsignedLong";
                DataType.unsignedInt = namespace + "unsignedInt";
                DataType.unsignedShort = namespace + "unsignedShort";
                DataType.unsignedByte = namespace + "unsignedByte";
                DataType.double = namespace + "double";
                DataType.float = namespace + "float";
                DataType.boolean = namespace + "boolean";
                DataType.string = namespace + "string";
                DataType.object = namespace + "object";
                return DataType;
            }();
            exports_1("DataType", DataType);
            Utils.forEachOwnProperty(DataType, function (key, value) {
                DataType[value] = key;
            });
        }
    };
});
$__System.register("78", ["a", "77", "79", "81", "82", "57"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Utils, Document, List, Literal, Value, XSD;
    var Factory, Util;
    return {
        setters: [function (Utils_1) {
            Utils = Utils_1;
        }, function (Document_1) {
            Document = Document_1;
        }, function (List_1) {
            List = List_1;
        }, function (Literal_1) {
            Literal = Literal_1;
        }, function (Value_1) {
            Value = Value_1;
        }, function (XSD_1) {
            XSD = XSD_1;
        }],
        execute: function () {
            Factory = function () {
                function Factory() {}
                Factory.is = function (value) {
                    return Utils.hasProperty(value, "@id") && Utils.isString(value["@id"]);
                };
                Factory.create = function (uri) {
                    return {
                        "@id": uri
                    };
                };
                return Factory;
            }();
            exports_1("Factory", Factory);
            Util = function () {
                function Util() {}
                Util.areEqual = function (node1, node2) {
                    return node1["@id"] === node2["@id"];
                };
                Util.hasType = function (node, type) {
                    return Util.getTypes(node).indexOf(type) !== -1;
                };
                Util.getTypes = function (node) {
                    if (!("@type" in node)) return [];
                    return node["@type"];
                };
                Util.getPropertyURI = function (node, predicate) {
                    if (!(predicate in node)) return null;
                    if (!Utils.isArray(node[predicate])) return null;
                    var uri = node[predicate].find(function (value) {
                        return Factory.is(value);
                    });
                    return typeof uri !== "undefined" ? uri["@id"] : null;
                };
                Util.getFreeNodes = function (value) {
                    if (!Utils.isArray(value)) return [];
                    var array = value;
                    return array.filter(function (element) {
                        return !Document.Factory.is(element);
                    }).filter(function (element) {
                        return Factory.is(element);
                    });
                };
                Util.getProperty = function (expandedObject, propertyURI, pointerLibrary) {
                    var propertyValues = expandedObject[propertyURI];
                    if (!propertyValues) return null;
                    if (!propertyValues.length) return null;
                    var propertyValue = propertyValues[0];
                    return Value.Util.parseValue(propertyValue, pointerLibrary);
                };
                Util.getPropertyPointer = function (expandedObject, propertyURI, pointerLibrary) {
                    var propertyValues = expandedObject[propertyURI];
                    if (!propertyValues) return null;
                    for (var _i = 0, propertyValues_1 = propertyValues; _i < propertyValues_1.length; _i++) {
                        var propertyValue = propertyValues_1[_i];
                        if (!Factory.is(propertyValue)) continue;
                        return pointerLibrary.getPointer(propertyValue["@id"]);
                    }
                    return null;
                };
                Util.getPropertyLiteral = function (expandedObject, propertyURI, literalType) {
                    var propertyValues = expandedObject[propertyURI];
                    if (!propertyValues) return null;
                    for (var _i = 0, propertyValues_2 = propertyValues; _i < propertyValues_2.length; _i++) {
                        var propertyValue = propertyValues_2[_i];
                        if (!Literal.Factory.is(propertyValue)) continue;
                        if (!Literal.Factory.hasType(propertyValue, literalType)) continue;
                        return Literal.Factory.parse(propertyValue);
                    }
                    return null;
                };
                Util.getPropertyList = function (expandedObject, propertyURI, pointerLibrary) {
                    var propertyValues = expandedObject[propertyURI];
                    if (!propertyValues) return null;
                    var propertyList = Util.getList(propertyValues);
                    if (!propertyList) return null;
                    var listValues = [];
                    for (var _i = 0, _a = propertyList["@list"]; _i < _a.length; _i++) {
                        var listValue = _a[_i];
                        listValues.push(Value.Util.parseValue(listValue, pointerLibrary));
                    }
                    return listValues;
                };
                Util.getPropertyPointerList = function (expandedObject, propertyURI, pointerLibrary) {
                    var propertyValues = expandedObject[propertyURI];
                    if (!propertyValues) return null;
                    var propertyList = Util.getList(propertyValues);
                    if (!propertyList) return null;
                    var listPointers = [];
                    for (var _i = 0, _a = propertyList["@list"]; _i < _a.length; _i++) {
                        var listValue = _a[_i];
                        if (!Factory.is(listValue)) continue;
                        var pointer = pointerLibrary.getPointer(listValue["@id"]);
                        listPointers.push(pointer);
                    }
                    return listPointers;
                };
                Util.getPropertyLiteralList = function (expandedObject, propertyURI, literalType) {
                    var propertyValues = expandedObject[propertyURI];
                    if (!propertyValues) return null;
                    var propertyList = Util.getList(propertyValues);
                    if (!propertyList) return null;
                    var listLiterals = [];
                    for (var _i = 0, _a = propertyList["@list"]; _i < _a.length; _i++) {
                        var listValue = _a[_i];
                        if (!Literal.Factory.is(listValue)) continue;
                        if (!Literal.Factory.hasType(listValue, literalType)) continue;
                        listLiterals.push(Literal.Factory.parse(listValue));
                    }
                    return listLiterals;
                };
                Util.getProperties = function (expandedObject, propertyURI, pointerLibrary) {
                    var propertyValues = expandedObject[propertyURI];
                    if (!propertyValues) return null;
                    if (!propertyValues.length) return null;
                    var properties = [];
                    for (var _i = 0, propertyValues_3 = propertyValues; _i < propertyValues_3.length; _i++) {
                        var propertyValue = propertyValues_3[_i];
                        var parsedValue = Value.Util.parseValue(propertyValue, pointerLibrary);
                        if (parsedValue !== null) properties.push(parsedValue);
                    }
                    return properties;
                };
                Util.getPropertyPointers = function (expandedObject, propertyURI, pointerLibrary) {
                    var propertyValues = expandedObject[propertyURI];
                    if (!propertyValues) return [];
                    if (!propertyValues.length) return [];
                    var propertyPointers = [];
                    for (var _i = 0, propertyValues_4 = propertyValues; _i < propertyValues_4.length; _i++) {
                        var propertyValue = propertyValues_4[_i];
                        if (!Factory.is(propertyValue)) continue;
                        var pointer = pointerLibrary.getPointer(propertyValue["@id"]);
                        if (pointer !== null) propertyPointers.push(pointer);
                    }
                    return propertyPointers;
                };
                Util.getPropertyURIs = function (expandedObject, propertyURI) {
                    var propertyValues = expandedObject[propertyURI];
                    if (!propertyValues) return null;
                    if (!propertyValues.length) return null;
                    var propertyURIs = [];
                    for (var _i = 0, propertyValues_5 = propertyValues; _i < propertyValues_5.length; _i++) {
                        var propertyValue = propertyValues_5[_i];
                        if (!Factory.is(propertyValue)) continue;
                        propertyURIs.push(propertyValue["@id"]);
                    }
                    return propertyURIs;
                };
                Util.getPropertyLiterals = function (expandedObject, propertyURI, literalType) {
                    var propertyValues = expandedObject[propertyURI];
                    if (!propertyValues) return null;
                    var propertyLiterals = [];
                    for (var _i = 0, propertyValues_6 = propertyValues; _i < propertyValues_6.length; _i++) {
                        var propertyValue = propertyValues_6[_i];
                        if (!Literal.Factory.is(propertyValue)) continue;
                        if (!Literal.Factory.hasType(propertyValue, literalType)) continue;
                        propertyLiterals.push(Literal.Factory.parse(propertyValue));
                    }
                    return propertyLiterals;
                };
                Util.getPropertyLanguageMap = function (expandedObject, propertyURI) {
                    var propertyValues = expandedObject[propertyURI];
                    if (!propertyValues) return null;
                    var propertyLanguageMap = {};
                    for (var _i = 0, propertyValues_7 = propertyValues; _i < propertyValues_7.length; _i++) {
                        var propertyValue = propertyValues_7[_i];
                        if (!Literal.Factory.is(propertyValue)) continue;
                        if (!Literal.Factory.hasType(propertyValue, XSD.DataType.string)) continue;
                        var languageTag = propertyValue["@language"];
                        if (!languageTag) continue;
                        propertyLanguageMap[languageTag] = Literal.Factory.parse(propertyValue);
                    }
                    return propertyLanguageMap;
                };
                Util.getList = function (propertyValues) {
                    for (var _i = 0, propertyValues_8 = propertyValues; _i < propertyValues_8.length; _i++) {
                        var propertyValue = propertyValues_8[_i];
                        if (!List.Factory.is(propertyValue)) continue;
                        return propertyValue;
                    }
                    return null;
                };
                return Util;
            }();
            exports_1("Util", Util);
        }
    };
});
$__System.register("82", ["79", "81", "78"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var List, Literal, RDFNode;
    var Util;
    return {
        setters: [function (List_1) {
            List = List_1;
        }, function (Literal_1) {
            Literal = Literal_1;
        }, function (RDFNode_1) {
            RDFNode = RDFNode_1;
        }],
        execute: function () {
            Util = function () {
                function Util() {}
                Util.parseValue = function (propertyValue, pointerLibrary) {
                    if (Literal.Factory.is(propertyValue)) {
                        return Literal.Factory.parse(propertyValue);
                    } else if (RDFNode.Factory.is(propertyValue)) {
                        return pointerLibrary.getPointer(propertyValue["@id"]);
                    } else if (List.Factory.is(propertyValue)) {
                        var parsedValue = [];
                        var listValues = propertyValue["@list"];
                        for (var _i = 0, listValues_1 = listValues; _i < listValues_1.length; _i++) {
                            var listValue = listValues_1[_i];
                            parsedValue.push(Util.parseValue(listValue, pointerLibrary));
                        }
                        return parsedValue;
                    } else {}
                    return null;
                };
                return Util;
            }();
            exports_1("Util", Util);
        }
    };
});
$__System.register("9", ["81", "77", "79", "78", "42", "82"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Literal, Document, List, Node, URI, Value;
    return {
        setters: [function (Literal_1) {
            Literal = Literal_1;
        }, function (Document_1) {
            Document = Document_1;
        }, function (List_1) {
            List = List_1;
        }, function (Node_1) {
            Node = Node_1;
        }, function (URI_1) {
            URI = URI_1;
        }, function (Value_1) {
            Value = Value_1;
        }],
        execute: function () {
            exports_1("Literal", Literal);
            exports_1("Document", Document);
            exports_1("List", List);
            exports_1("Node", Node);
            exports_1("URI", URI);
            exports_1("Value", Value);
        }
    };
});
$__System.register("3a", [], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Class;
    return {
        setters: [],
        execute: function () {
            Class = function () {
                function Class() {}
                Class.prototype.parse = function (body) {
                    return new Promise(function (resolve, reject) {
                        try {
                            resolve(JSON.parse(body));
                        } catch (error) {
                            // TODO: Handle SyntaxError
                            reject(error);
                        }
                    });
                };
                return Class;
            }();
            exports_1("Class", Class);
            exports_1("default", Class);
        }
    };
});
$__System.register("83", ["3a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var JSONParser_1;
    var Class;
    return {
        setters: [function (JSONParser_1_1) {
            JSONParser_1 = JSONParser_1_1;
        }],
        execute: function () {
            Class = function () {
                function Class() {}
                Class.prototype.parse = function (input) {
                    var jsonParser = new JSONParser_1.default();
                    return jsonParser.parse(input).then(function (parsedObject) {
                        return parsedObject;
                    });
                };
                return Class;
            }();
            exports_1("Class", Class);
            exports_1("default", Class);
        }
    };
});
$__System.register("84", ["5", "4a", "9", "a", "83"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Errors, HTTP, RDF, Utils, RawResultsParser_1;
    var Class;
    return {
        setters: [function (Errors_1) {
            Errors = Errors_1;
        }, function (HTTP_1) {
            HTTP = HTTP_1;
        }, function (RDF_1) {
            RDF = RDF_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }, function (RawResultsParser_1_1) {
            RawResultsParser_1 = RawResultsParser_1_1;
        }],
        execute: function () {
            Class = function () {
                function Class() {}
                Class.executeRawASKQuery = function (url, askQuery, options) {
                    if (options === void 0) {
                        options = {};
                    }
                    options = Utils.extend(options, Class.defaultOptions);
                    HTTP.Request.Util.setAcceptHeader("application/sparql-results+json", options);
                    HTTP.Request.Util.setContentTypeHeader("application/sparql-query", options);
                    return HTTP.Request.Service.post(url, askQuery, options, Class.resultsParser);
                };
                Class.executeASKQuery = function (url, askQuery, options) {
                    if (options === void 0) {
                        options = {};
                    }
                    return Class.executeRawASKQuery(url, askQuery, options).then(function (_a) {
                        var rawResults = _a[0],
                            response = _a[1];
                        return [rawResults.boolean, response];
                    });
                };
                Class.executeRawSELECTQuery = function (url, selectQuery, options) {
                    if (options === void 0) {
                        options = {};
                    }
                    options = Utils.extend(options, Class.defaultOptions);
                    HTTP.Request.Util.setAcceptHeader("application/sparql-results+json", options);
                    HTTP.Request.Util.setContentTypeHeader("application/sparql-query", options);
                    return HTTP.Request.Service.post(url, selectQuery, options, Class.resultsParser);
                };
                Class.executeSELECTQuery = function (url, selectQuery, pointerLibrary, options) {
                    if (options === void 0) {
                        options = {};
                    }
                    return Class.executeRawSELECTQuery(url, selectQuery, options).then(function (_a) {
                        var rawResults = _a[0],
                            response = _a[1];
                        var rawBindings = rawResults.results.bindings;
                        var bindings = [];
                        for (var _i = 0, rawBindings_1 = rawBindings; _i < rawBindings_1.length; _i++) {
                            var bindingColumn = rawBindings_1[_i];
                            var binding = {};
                            for (var bindingRow in bindingColumn) {
                                if (!bindingColumn.hasOwnProperty(bindingRow)) continue;
                                var bindingCell = bindingColumn[bindingRow];
                                binding[bindingRow] = Class.parseRawBindingProperty(bindingCell, pointerLibrary);
                            }
                            bindings.push(binding);
                        }
                        var results = {
                            vars: rawResults.head.vars,
                            bindings: bindings
                        };
                        return [results, response];
                    });
                };
                Class.executeRawCONSTRUCTQuery = function (url, constructQuery, options) {
                    if (options === void 0) {
                        options = {};
                    }
                    options = Utils.extend(options, Class.defaultOptions);
                    if (HTTP.Request.Util.getHeader("Accept", options) === undefined) HTTP.Request.Util.setAcceptHeader("application/ld+json", options);
                    HTTP.Request.Util.setContentTypeHeader("application/sparql-query", options);
                    return HTTP.Request.Service.post(url, constructQuery, options, Class.stringParser);
                };
                Class.executeRawDESCRIBEQuery = function (url, describeQuery, options) {
                    if (options === void 0) {
                        options = {};
                    }
                    options = Utils.extend(options, Class.defaultOptions);
                    if (HTTP.Request.Util.getHeader("Accept", options) === undefined) HTTP.Request.Util.setAcceptHeader("application/ld+json", options);
                    HTTP.Request.Util.setContentTypeHeader("application/sparql-query", options);
                    return HTTP.Request.Service.post(url, describeQuery, options, Class.stringParser);
                };
                Class.executeUPDATE = function (url, updateQuery, options) {
                    if (options === void 0) {
                        options = {};
                    }
                    options = Utils.extend(options, Class.defaultOptions);
                    if (HTTP.Request.Util.getHeader("Accept", options) === undefined) HTTP.Request.Util.setAcceptHeader("application/ld+json", options);
                    HTTP.Request.Util.setContentTypeHeader("application/sparql-update", options);
                    return HTTP.Request.Service.post(url, updateQuery, options);
                };
                Class.parseRawBindingProperty = function (rawBindingProperty, pointerLibrary) {
                    switch (rawBindingProperty.type) {
                        case "uri":
                            return pointerLibrary.getPointer(rawBindingProperty.value);
                        case "bnode":
                            throw new Errors.NotImplementedError("BNodes cannot be queried directly");
                        case "literal":
                            if ("datatype" in rawBindingProperty) {
                                return RDF.Literal.Factory.parse(rawBindingProperty.value, rawBindingProperty.datatype);
                            } else {
                                return RDF.Literal.Factory.parse(rawBindingProperty.value);
                            }
                        default:
                            throw new Errors.IllegalArgumentError("The bindingProperty has an unsupported type");
                    }
                };
                Class.defaultOptions = {};
                Class.resultsParser = new RawResultsParser_1.default();
                Class.stringParser = new HTTP.StringParser.Class();
                return Class;
            }();
            exports_1("Class", Class);
            exports_1("default", Class);
        }
    };
});
$__System.register("85", [], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    return {
        setters: [],
        execute: function () {}
    };
});
$__System.register("5a", ["1c", "83", "84", "85"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var RawResults, RawResultsParser, Service_1, SELECTResults;
    return {
        setters: [function (RawResults_1) {
            RawResults = RawResults_1;
        }, function (RawResultsParser_1) {
            RawResultsParser = RawResultsParser_1;
        }, function (Service_1_1) {
            Service_1 = Service_1_1;
        }, function (SELECTResults_1) {
            SELECTResults = SELECTResults_1;
        }],
        execute: function () {
            exports_1("RawResults", RawResults);
            exports_1("RawResultsParser", RawResultsParser);
            exports_1("Service", Service_1.default);
            exports_1("SELECTResults", SELECTResults);
        }
    };
});
$__System.register("a", [], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var O, S, A, M, UUID;
    function hasFunction(object, functionName) {
        return typeof object[functionName] === "function";
    }
    function hasProperty(object, property) {
        if (!object) return false;
        return isDefined(object[property]);
    }
    function hasPropertyDefined(object, property) {
        if (!object) return false;
        return !!Object.getOwnPropertyDescriptor(object, property);
    }
    function isDefined(value) {
        return void 0 !== value;
    }
    function isNull(value) {
        return value === null;
    }
    function isArray(object) {
        return object instanceof Array;
    }
    function isString(value) {
        return typeof value === "string" || value instanceof String;
    }
    function isBoolean(value) {
        return typeof value === "boolean";
    }
    function isNumber(value) {
        return typeof value === "number" || value instanceof Number;
    }
    function isInteger(value) {
        if (!isNumber(value)) return false;
        return value % 1 === 0;
    }
    function isDouble(value) {
        if (!isNumber(value)) return false;
        return value % 1 !== 0;
    }
    function isDate(date) {
        return typeof date === "date" || date instanceof Date;
    }
    function isObject(object) {
        return typeof object === "object" && !!object;
    }
    function isPlainObject(object) {
        return isObject(object) && !isArray(object) && !isDate(object) && !isMap(object) && !(typeof Blob !== "undefined" && object instanceof Blob) && !(Object.prototype.toString.call(object) === "[object Set]");
    }
    function isFunction(value) {
        return typeof value === "function";
    }
    function isMap(value) {
        return isObject(value) && hasFunction(value, "get") && hasFunction(value, "has") && hasProperty(value, "size") && hasFunction(value, "clear") && hasFunction(value, "delete") && hasFunction(value, "entries") && hasFunction(value, "forEach") && hasFunction(value, "get") && hasFunction(value, "has") && hasFunction(value, "keys") && hasFunction(value, "set") && hasFunction(value, "values");
    }
    function parseBoolean(value) {
        if (!isString(value)) return false;
        /* tslint:disable: no-switch-case-fall-through */
        switch (value.toLowerCase()) {
            case "true":
            case "yes":
            case "y":
            case "1":
                return true;
            case "false":
            case "no":
            case "n":
            case "0":
            default:
                return false;
        }
        /* tslint:enable: no-switch-case-fall-through */
    }
    function extend(target) {
        var objects = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            objects[_i - 1] = arguments[_i];
        }
        for (var _a = 0, objects_1 = objects; _a < objects_1.length; _a++) {
            var toMerge = objects_1[_a];
            if (!toMerge) continue;
            for (var name in toMerge) {
                if (toMerge.hasOwnProperty(name)) {
                    target[name] = toMerge[name];
                }
            }
        }
        return target;
    }
    function forEachOwnProperty(object, action) {
        if (!(isObject(object) || isFunction(object))) throw new Error("IllegalArgument");
        for (var name in object) {
            if (object.hasOwnProperty(name)) {
                if (action(name, object[name]) === false) break;
            }
        }
    }
    function internalAreEqual(object1, object2, config, stack1, stack2, ignore) {
        if (ignore === void 0) {
            ignore = {};
        }
        if (object1 === object2) return true;
        if (!isObject(object1) || !isObject(object2)) return false;
        if (isDate(object1)) return object1.getTime() === object2.getTime();
        var keys = A.joinWithoutDuplicates(Object.keys(object1), Object.keys(object2));
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
            var key = keys_1[_i];
            if (!(key in object1) || !(key in object2)) return false;
            if (typeof object1 !== typeof object2) return false;
            if (key in ignore) continue;
            if (isFunction(object1[key])) continue;
            var firstIsPlainObject = isPlainObject(object1[key]);
            if (isArray(object1[key]) && config.arrays || firstIsPlainObject && config.objects || isDate(object1[key])) {
                if (firstIsPlainObject) {
                    var lengthStack = stack1.length;
                    while (lengthStack--) {
                        if (stack1[lengthStack] === object1[key]) return stack2[lengthStack] === object2[key];
                    }
                    stack1.push(object1[key]);
                    stack2.push(object2[key]);
                }
                if (!internalAreEqual(object1[key], object2[key], config, stack1, stack2)) return false;
                if (firstIsPlainObject) {
                    stack1.pop();
                    stack2.pop();
                }
            } else {
                if (object1[key] !== object2[key]) return false;
            }
        }
        return true;
    }
    return {
        setters: [],
        execute: function () {
            O = function () {
                function O() {}
                O.extend = function (target, source, config, ignore) {
                    if (config === void 0) {
                        config = { arrays: false, objects: false };
                    }
                    if (ignore === void 0) {
                        ignore = {};
                    }
                    if (!isArray(source) && !isPlainObject(source) || !isArray(target) && !isPlainObject(target)) return null;
                    var clone = target;
                    source.__CarbonSDK_circularReferenceFlag = clone;
                    for (var _i = 0, _a = Object.keys(source); _i < _a.length; _i++) {
                        var key = _a[_i];
                        if (isFunction(source[key]) || key === "__CarbonSDK_circularReferenceFlag") continue;
                        if (key in ignore) continue;
                        var property = source[key];
                        if (isArray(property) && config.arrays || isPlainObject(property) && config.objects) {
                            property = property.__CarbonSDK_circularReferenceFlag || O.clone(property, config);
                        }
                        clone[key] = property;
                    }
                    delete source.__CarbonSDK_circularReferenceFlag;
                    return clone;
                };
                O.clone = function (object, config, ignore) {
                    if (config === void 0) {
                        config = { arrays: false, objects: false };
                    }
                    if (ignore === void 0) {
                        ignore = {};
                    }
                    var isAnArray = isArray(object);
                    if (!isAnArray && !isPlainObject(object)) return null;
                    var clone = isAnArray ? [] : Object.create(Object.getPrototypeOf(object));
                    return O.extend(clone, object, config, ignore);
                };
                O.areEqual = function (object1, object2, config, ignore) {
                    if (config === void 0) {
                        config = { arrays: false, objects: false };
                    }
                    if (ignore === void 0) {
                        ignore = {};
                    }
                    return internalAreEqual(object1, object2, config, [object1], [object2], ignore);
                };
                O.areShallowlyEqual = function (object1, object2) {
                    if (object1 === object2) return true;
                    if (!isObject(object1) || !isObject(object2)) return false;
                    var properties = [];
                    for (var propertyName in object1) {
                        if (!object1.hasOwnProperty(propertyName)) continue;
                        if (isFunction(object1[propertyName])) continue;
                        if (!(propertyName in object2)) return false;
                        if (object1[propertyName] !== object2[propertyName]) return false;
                        properties.push(propertyName);
                    }
                    for (var propertyName in object2) {
                        if (!object2.hasOwnProperty(propertyName)) continue;
                        if (isFunction(object2[propertyName])) continue;
                        if (!(propertyName in object1)) return false;
                        if (properties.indexOf(propertyName) === -1) return false;
                    }
                    return true;
                };
                return O;
            }();
            S = function () {
                function S() {}
                S.startsWith = function (str, substring) {
                    return str.lastIndexOf(substring, 0) === 0;
                };
                S.endsWith = function (str, substring) {
                    return str.indexOf(substring, str.length - substring.length) !== -1;
                };
                S.contains = function (str, substring) {
                    return str.indexOf(substring) !== -1;
                };
                return S;
            }();
            A = function () {
                function A() {}
                A.from = function (iterator) {
                    var array = [];
                    var next = iterator.next();
                    while (!next.done) {
                        array.push(next.value);
                        next = iterator.next();
                    }
                    return array;
                };
                A.joinWithoutDuplicates = function () {
                    var arrays = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        arrays[_i - 0] = arguments[_i];
                    }
                    var result = arrays[0].slice();
                    for (var i = 1, length = arrays.length; i < length; i++) {
                        result = result.concat(arrays[i].filter(function (item) {
                            return result.indexOf(item) < 0;
                        }));
                    }
                    return result;
                };
                A.indexOf = function (array, searchedElement, comparator) {
                    if (comparator === void 0) {
                        comparator = function (a, b) {
                            return a === b;
                        };
                    }
                    for (var i = 0, length = array.length; i < length; ++i) {
                        if (comparator(array[i], searchedElement)) return i;
                    }
                    return -1;
                };
                return A;
            }();
            M = function () {
                function M() {}
                M.from = function (object) {
                    var map = new Map();
                    forEachOwnProperty(object, function (name, value) {
                        map.set(name, value);
                    });
                    return map;
                };
                M.extend = function (toExtend) {
                    var extenders = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        extenders[_i - 1] = arguments[_i];
                    }
                    for (var i = 0, length = extenders.length; i < length; i++) {
                        var extender = extenders[i];
                        var values = extender.entries();
                        var next = values.next();
                        while (!next.done) {
                            var entry = next.value;
                            var key = entry[0];
                            var value = entry[1];
                            if (!toExtend.has(key)) toExtend.set(key, value);
                            next = values.next();
                        }
                    }
                    return toExtend;
                };
                return M;
            }();
            UUID = function () {
                function UUID() {}
                UUID.is = function (uuid) {
                    return UUID.regExp.test(uuid);
                };
                UUID.generate = function () {
                    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
                        var r = Math.random() * 16 | 0;
                        var v = c === "x" ? r : r & 0x3 | 0x8;
                        return v.toString(16);
                    });
                };
                UUID.regExp = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
                return UUID;
            }();
            exports_1("hasFunction", hasFunction);
            exports_1("hasProperty", hasProperty);
            exports_1("hasPropertyDefined", hasPropertyDefined);
            exports_1("isDefined", isDefined);
            exports_1("isNull", isNull);
            exports_1("isArray", isArray);
            exports_1("isString", isString);
            exports_1("isBoolean", isBoolean);
            exports_1("isNumber", isNumber);
            exports_1("isInteger", isInteger);
            exports_1("isDouble", isDouble);
            exports_1("isDate", isDate);
            exports_1("isObject", isObject);
            exports_1("isPlainObject", isPlainObject);
            exports_1("isFunction", isFunction);
            exports_1("isMap", isMap);
            exports_1("parseBoolean", parseBoolean);
            exports_1("extend", extend);
            exports_1("forEachOwnProperty", forEachOwnProperty);
            exports_1("O", O);
            exports_1("S", S);
            exports_1("A", A);
            exports_1("M", M);
            exports_1("UUID", UUID);
        }
    };
});
$__System.register("86", ["b", "3d", "3", "2", "14", "15", "58", "5", "65", "4a", "4e", "3e", "66", "6", "56", "7", "54", "68", "69", "67", "1a", "8", "9", "35", "c", "1b", "5a", "a"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var AbstractContext_1, AccessPoint, App, Apps, Auth, Document, Documents_1, Errors, Fragment, HTTP, JSONLD, LDP, NamedFragment, NS, ObjectSchema, PersistedApp, PersistedDocument, PersistedFragment, PersistedNamedFragment, PersistedResource, Platform, Pointer, RDF, Resource, SDKContext, Settings, SPARQL, Utils;
    var Carbon;
    return {
        setters: [function (AbstractContext_1_1) {
            AbstractContext_1 = AbstractContext_1_1;
        }, function (AccessPoint_1) {
            AccessPoint = AccessPoint_1;
        }, function (App_1) {
            App = App_1;
        }, function (Apps_1) {
            Apps = Apps_1;
        }, function (Auth_1) {
            Auth = Auth_1;
        }, function (Document_1) {
            Document = Document_1;
        }, function (Documents_1_1) {
            Documents_1 = Documents_1_1;
        }, function (Errors_1) {
            Errors = Errors_1;
        }, function (Fragment_1) {
            Fragment = Fragment_1;
        }, function (HTTP_1) {
            HTTP = HTTP_1;
        }, function (JSONLD_1) {
            JSONLD = JSONLD_1;
        }, function (LDP_1) {
            LDP = LDP_1;
        }, function (NamedFragment_1) {
            NamedFragment = NamedFragment_1;
        }, function (NS_1) {
            NS = NS_1;
        }, function (ObjectSchema_1) {
            ObjectSchema = ObjectSchema_1;
        }, function (PersistedApp_1) {
            PersistedApp = PersistedApp_1;
        }, function (PersistedDocument_1) {
            PersistedDocument = PersistedDocument_1;
        }, function (PersistedFragment_1) {
            PersistedFragment = PersistedFragment_1;
        }, function (PersistedNamedFragment_1) {
            PersistedNamedFragment = PersistedNamedFragment_1;
        }, function (PersistedResource_1) {
            PersistedResource = PersistedResource_1;
        }, function (Platform_1) {
            Platform = Platform_1;
        }, function (Pointer_1) {
            Pointer = Pointer_1;
        }, function (RDF_1) {
            RDF = RDF_1;
        }, function (Resource_1) {
            Resource = Resource_1;
        }, function (SDKContext_1) {
            SDKContext = SDKContext_1;
        }, function (Settings_1) {
            Settings = Settings_1;
        }, function (SPARQL_1) {
            SPARQL = SPARQL_1;
        }, function (Utils_1) {
            Utils = Utils_1;
        }],
        execute: function () {
            Carbon = function (_super) {
                __extends(Carbon, _super);
                function Carbon(settings) {
                    _super.call(this);
                    this.auth = new Platform.Auth.Class(this);
                    settings = settings ? Utils.extend({}, Settings.defaultSettings, settings) : Settings.defaultSettings;
                    Utils.M.extend(this.settings, Utils.M.from(settings));
                    this.apps = new Apps.Class(this);
                }
                Object.defineProperty(Carbon, "version", {
                    /* tslint:enable: variable-name */
                    get: function () {
                        return "0.38.0";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Carbon.prototype, "version", {
                    get: function () {
                        return Carbon.version;
                    },
                    enumerable: true,
                    configurable: true
                });
                Carbon.prototype.resolve = function (uri) {
                    if (RDF.URI.Util.isAbsolute(uri)) return uri;
                    var finalURI = this.settings.get("http.ssl") ? "https://" : "http://";
                    finalURI += this.settings.get("domain") + "/" + this.getSetting("platform.container");
                    return RDF.URI.Util.resolve(finalURI, uri);
                };
                Carbon.prototype.getAPIDescription = function () {
                    return this.documents.get("api/").then(function (_a) {
                        var description = _a[0],
                            response = _a[1];
                        return description;
                    });
                };
                /* tslint:disable: variable-name */
                Carbon.AccessPoint = AccessPoint;
                Carbon.App = App;
                Carbon.Apps = Apps;
                Carbon.Auth = Auth;
                Carbon.Document = Document;
                Carbon.Documents = Documents_1.default;
                Carbon.Errors = Errors;
                Carbon.Fragment = Fragment;
                Carbon.HTTP = HTTP;
                Carbon.JSONLD = JSONLD;
                Carbon.LDP = LDP;
                Carbon.NamedFragment = NamedFragment;
                Carbon.NS = NS;
                Carbon.ObjectSchema = ObjectSchema;
                Carbon.PersistedApp = PersistedApp;
                Carbon.PersistedDocument = PersistedDocument;
                Carbon.PersistedFragment = PersistedFragment;
                Carbon.PersistedNamedFragment = PersistedNamedFragment;
                Carbon.PersistedResource = PersistedResource;
                Carbon.Platform = Platform;
                Carbon.Pointer = Pointer;
                Carbon.RDF = RDF;
                Carbon.Resource = Resource;
                Carbon.SDKContext = SDKContext;
                Carbon.Settings = Settings;
                Carbon.SPARQL = SPARQL;
                Carbon.Utils = Utils;
                return Carbon;
            }(AbstractContext_1.default);
            exports_1("default", Carbon);
        }
    };
});
$__System.register("1", ["86"], function (exports_1, context_1) {
    "use strict";

    var __moduleName = context_1 && context_1.id;
    var Carbon_1;
    return {
        setters: [function (Carbon_1_1) {
            Carbon_1 = Carbon_1_1;
        }],
        execute: function () {
            window.Carbon = Carbon_1.default;
        }
    };
});
})
(function(factory) {
  if (typeof define == 'function' && define.amd)
    define([], factory);
  else if (typeof module == 'object' && module.exports && typeof require == 'function')
    module.exports = factory();
  else
    factory();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BcHBzLnRzIiwiLi4vLi4vc3JjL0Fic3RyYWN0Q29udGV4dC50cyIsIi4uLy4uL3NyYy9BcHAvQWdlbnRzLnRzIiwiLi4vLi4vc3JjL0FwcC9Sb2xlcy50cyIsIi4uLy4uL3NyYy9BcHAvQXV0aC50cyIsIi4uLy4uL3NyYy9BcHAvQ29udGV4dC50cyIsIi4uLy4uL3NyYy9BcHAudHMiLCIuLi8uLi9zcmMvUGVyc2lzdGVkQXBwLnRzIiwiLi4vLi4vc3JjL1BsYXRmb3JtL0FnZW50cy50cyIsIi4uLy4uL3NyYy9QbGF0Zm9ybS9BdXRoLnRzIiwiLi4vLi4vc3JjL1BsYXRmb3JtLnRzIiwiLi4vLi4vc3JjL1NldHRpbmdzLnRzIiwiLi4vLi4vc3JjL1NQQVJRTC9SYXdSZXN1bHRzLnRzIiwiLi4vLi4vc3JjL0hUVFAvRXJyb3JzL2NsaWVudC9CYWRSZXF1ZXN0RXJyb3IudHMiLCIuLi8uLi9zcmMvSFRUUC9FcnJvcnMvY2xpZW50L0NvbmZsaWN0RXJyb3IudHMiLCIuLi8uLi9zcmMvSFRUUC9FcnJvcnMvY2xpZW50L0ZvcmJpZGRlbkVycm9yLnRzIiwiLi4vLi4vc3JjL0hUVFAvRXJyb3JzL2NsaWVudC9NZXRob2ROb3RBbGxvd2VkRXJyb3IudHMiLCIuLi8uLi9zcmMvSFRUUC9FcnJvcnMvY2xpZW50L05vdEFjY2VwdGFibGVFcnJvci50cyIsIi4uLy4uL3NyYy9IVFRQL0Vycm9ycy9jbGllbnQvTm90Rm91bmRFcnJvci50cyIsIi4uLy4uL3NyYy9IVFRQL0Vycm9ycy9jbGllbnQvUHJlY29uZGl0aW9uRmFpbGVkRXJyb3IudHMiLCIuLi8uLi9zcmMvSFRUUC9FcnJvcnMvY2xpZW50L1ByZWNvbmRpdGlvblJlcXVpcmVkRXJyb3IudHMiLCIuLi8uLi9zcmMvSFRUUC9FcnJvcnMvY2xpZW50L1JlcXVlc3RFbnRpdHlUb29MYXJnZUVycm9yLnRzIiwiLi4vLi4vc3JjL0hUVFAvRXJyb3JzL2NsaWVudC9SZXF1ZXN0SGVhZGVyRmllbGRzVG9vTGFyZ2VFcnJvci50cyIsIi4uLy4uL3NyYy9IVFRQL0Vycm9ycy9jbGllbnQvUmVxdWVzdFVSSVRvb0xvbmdFcnJvci50cyIsIi4uLy4uL3NyYy9IVFRQL0Vycm9ycy9jbGllbnQvVG9vTWFueVJlcXVlc3RzRXJyb3IudHMiLCIuLi8uLi9zcmMvSFRUUC9FcnJvcnMvY2xpZW50L1VuYXV0aG9yaXplZEVycm9yLnRzIiwiLi4vLi4vc3JjL0hUVFAvRXJyb3JzL2NsaWVudC9VbnN1cHBvcnRlZE1lZGlhVHlwZUVycm9yLnRzIiwiLi4vLi4vc3JjL0hUVFAvRXJyb3JzL3NlcnZlci9CYWRSZXNwb25zZUVycm9yLnRzIiwiLi4vLi4vc3JjL0hUVFAvRXJyb3JzL3NlcnZlci9CYWRHYXRld2F5RXJyb3IudHMiLCIuLi8uLi9zcmMvSFRUUC9FcnJvcnMvc2VydmVyL0dhdGV3YXlUaW1lb3V0RXJyb3IudHMiLCIuLi8uLi9zcmMvSFRUUC9FcnJvcnMvc2VydmVyL0hUVFBWZXJzaW9uTm90U3VwcG9ydGVkRXJyb3IudHMiLCIuLi8uLi9zcmMvSFRUUC9FcnJvcnMvc2VydmVyL0ludGVybmFsU2VydmVyRXJyb3JFcnJvci50cyIsIi4uLy4uL3NyYy9IVFRQL0Vycm9ycy9zZXJ2ZXIvTm90SW1wbGVtZW50ZWRFcnJvci50cyIsIi4uLy4uL3NyYy9IVFRQL0Vycm9ycy9zZXJ2ZXIvU2VydmljZVVuYXZhaWxhYmxlRXJyb3IudHMiLCIuLi8uLi9zcmMvSFRUUC9FcnJvcnMvSFRUUEVycm9yLnRzIiwiLi4vLi4vc3JjL0hUVFAvRXJyb3JzL1Vua25vd25FcnJvci50cyIsIi4uLy4uL3NyYy9IVFRQL0Vycm9ycy50cyIsIi4uLy4uL3NyYy9IVFRQL01ldGhvZC50cyIsIi4uLy4uL3NyYy9KU09OTEQvUGFyc2VyLnRzIiwiLi4vLi4vc3JjL0FQSURlc2NyaXB0aW9uLnRzIiwiLi4vLi4vc3JjL0FjY2Vzc1BvaW50LnRzIiwiLi4vLi4vc3JjL0FwcC9Sb2xlLnRzIiwiLi4vLi4vc3JjL0FwcC9QZXJzaXN0ZWRSb2xlLnRzIiwiLi4vLi4vc3JjL0F1dGgvQWdlbnRzLnRzIiwiLi4vLi4vc3JjL0F1dGgvQUNFLnRzIiwiLi4vLi4vc3JjL0F1dGgvQUNMLnRzIiwiLi4vLi4vc3JjL0F1dGgvUGVyc2lzdGVkQUNMLnRzIiwiLi4vLi4vc3JjL0F1dGgvQWdlbnQudHMiLCIuLi8uLi9zcmMvQXV0aC9QZXJzaXN0ZWRBZ2VudC50cyIsIi4uLy4uL3NyYy9BdXRoL1JvbGUudHMiLCIuLi8uLi9zcmMvQXV0aC9QZXJzaXN0ZWRSb2xlLnRzIiwiLi4vLi4vc3JjL0F1dGgvUm9sZXMudHMiLCIuLi8uLi9zcmMvQXV0aC9Vc2VybmFtZUFuZFBhc3N3b3JkQ3JlZGVudGlhbHMudHMiLCIuLi8uLi9zcmMvQXV0aC9CYXNpY0F1dGhlbnRpY2F0b3IudHMiLCIuLi8uLi9zcmMvQXV0aC9Ub2tlbkF1dGhlbnRpY2F0b3IudHMiLCIuLi8uLi9zcmMvQXV0aC9UaWNrZXQudHMiLCIuLi8uLi9zcmMvQXV0aC9Ub2tlbi50cyIsIi4uLy4uL3NyYy9BdXRoL1VzZXJuYW1lQW5kUGFzc3dvcmRUb2tlbi50cyIsIi4uLy4uL3NyYy9GcmVlUmVzb3VyY2VzLnRzIiwiLi4vLi4vc3JjL0F1dGgudHMiLCIuLi8uLi9zcmMvUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQudHMiLCIuLi8uLi9zcmMvUmV0cmlldmFsUHJlZmVyZW5jZXMudHMiLCIuLi8uLi9zcmMvRG9jdW1lbnRzLnRzIiwiLi4vLi4vc3JjL0xEUC9BZGRNZW1iZXJBY3Rpb24udHMiLCIuLi8uLi9zcmMvTERQL0RpcmVjdENvbnRhaW5lci50cyIsIi4uLy4uL3NyYy9MRFAvRXJyb3IudHMiLCIuLi8uLi9zcmMvTERQL0luZGlyZWN0Q29udGFpbmVyLnRzIiwiLi4vLi4vc3JjL0xEUC9SZW1vdmVNZW1iZXJBY3Rpb24udHMiLCIuLi8uLi9zcmMvTERQL1Jlc3BvbnNlTWV0YWRhdGEudHMiLCIuLi8uLi9zcmMvTERQL1ZvbGF0aWxlUmVzb3VyY2UudHMiLCIuLi8uLi9zcmMvTERQL1Jlc291cmNlTWV0YWRhdGEudHMiLCIuLi8uLi9zcmMvTERQLnRzIiwiLi4vLi4vc3JjL1Byb3RlY3RlZERvY3VtZW50LnRzIiwiLi4vLi4vc3JjL0JsYW5rTm9kZS50cyIsIi4uLy4uL3NyYy9KU09OTEQvQ29udmVydGVyLnRzIiwiLi4vLi4vc3JjL0ZyYWdtZW50LnRzIiwiLi4vLi4vc3JjL05hbWVkRnJhZ21lbnQudHMiLCIuLi8uLi9zcmMvUmVzb3VyY2UudHMiLCIuLi8uLi9zcmMvRG9jdW1lbnQudHMiLCIuLi8uLi9zcmMvUGVyc2lzdGVkUmVzb3VyY2UudHMiLCIuLi8uLi9zcmMvUGVyc2lzdGVkRnJhZ21lbnQudHMiLCIuLi8uLi9zcmMvUGVyc2lzdGVkTmFtZWRGcmFnbWVudC50cyIsIi4uLy4uL3NyYy9Qb2ludGVyLnRzIiwiLi4vLi4vc3JjL1BlcnNpc3RlZERvY3VtZW50LnRzIiwiLi4vLi4vc3JjL1JERlJlcHJlc2VudGF0aW9uLnRzIiwiLi4vLi4vc3JjL1NES0NvbnRleHQudHMiLCIuLi8uLi9zcmMvTERQL0Vycm9yUmVzcG9uc2UudHMiLCIuLi8uLi9zcmMvSFRUUC9SZXF1ZXN0LnRzIiwiLi4vLi4vc3JjL0hUVFAvSGVhZGVyLnRzIiwiLi4vLi4vc3JjL0hUVFAvUmVzcG9uc2UudHMiLCIuLi8uLi9zcmMvSFRUUC9TdGF0dXNDb2RlLnRzIiwiLi4vLi4vc3JjL0hUVFAvU3RyaW5nUGFyc2VyLnRzIiwiLi4vLi4vc3JjL0hUVFAudHMiLCIuLi8uLi9zcmMvTlMvQy50cyIsIi4uLy4uL3NyYy9OUy9DUC50cyIsIi4uLy4uL3NyYy9OUy9DUy50cyIsIi4uLy4uL3NyYy9OUy9MRFAudHMiLCIuLi8uLi9zcmMvTlMvUkRGLnRzIiwiLi4vLi4vc3JjL05TL1ZDQVJELnRzIiwiLi4vLi4vc3JjL05TLnRzIiwiLi4vLi4vc3JjL09iamVjdFNjaGVtYS50cyIsIi4uLy4uL3NyYy9KU09OTEQvUHJvY2Vzc29yLnRzIiwiLi4vLi4vc3JjL0pTT05MRC50cyIsIi4uLy4uL3NyYy9SREYvVVJJLnRzIiwiLi4vLi4vc3JjL1JERi9Eb2N1bWVudC50cyIsIi4uLy4uL3NyYy9SREYvTGlzdC50cyIsIi4uLy4uL3NyYy9FcnJvcnMvSURBbHJlYWR5SW5Vc2VFcnJvci50cyIsIi4uLy4uL3NyYy9FcnJvcnMvSWxsZWdhbEFjdGlvbkVycm9yLnRzIiwiLi4vLi4vc3JjL0Vycm9ycy9JbGxlZ2FsQXJndW1lbnRFcnJvci50cyIsIi4uLy4uL3NyYy9FcnJvcnMvSWxsZWdhbFN0YXRlRXJyb3IudHMiLCIuLi8uLi9zcmMvRXJyb3JzL0ludmFsaWRKU09OTERTeW50YXhFcnJvci50cyIsIi4uLy4uL3NyYy9FcnJvcnMvQWJzdHJhY3RFcnJvci50cyIsIi4uLy4uL3NyYy9FcnJvcnMvTm90SW1wbGVtZW50ZWRFcnJvci50cyIsIi4uLy4uL3NyYy9FcnJvcnMudHMiLCIuLi8uLi9zcmMvUkRGL0xpdGVyYWwvU2VyaWFsaXplcnMvWFNELnRzIiwiLi4vLi4vc3JjL1JERi9MaXRlcmFsL1NlcmlhbGl6ZXJzLnRzIiwiLi4vLi4vc3JjL1JERi9MaXRlcmFsLnRzIiwiLi4vLi4vc3JjL05TL1hTRC50cyIsIi4uLy4uL3NyYy9SREYvUkRGTm9kZS50cyIsIi4uLy4uL3NyYy9SREYvVmFsdWUudHMiLCIuLi8uLi9zcmMvUkRGLnRzIiwiLi4vLi4vc3JjL0hUVFAvSlNPTlBhcnNlci50cyIsIi4uLy4uL3NyYy9TUEFSUUwvUmF3UmVzdWx0c1BhcnNlci50cyIsIi4uLy4uL3NyYy9TUEFSUUwvU2VydmljZS50cyIsIi4uLy4uL3NyYy9TUEFSUUwudHMiLCIuLi8uLi9zcmMvVXRpbHMudHMiLCIuLi8uLi9zcmMvQ2FyYm9uLnRzIiwiLi4vLi4vYnVpbGQvc2Z4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdCQywrQkFBYSxBQUFlO0FBQzNCLEFBQUkseUJBQUMsQUFBTyxVQUFHLEFBQU8sQUFBQyxBQUN4QjtBQUFDO0FBSUQsZ0NBQVUsYUFBVixVQUFZLEFBQWdCO0FBQTVC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Q3hCLHVCQUFNLFNBQWlCLEFBQU0sQUFBQztBQUM5Qix1QkFBRyxNQUFjLEFBQUcsQUFBQztBQUNyQix1QkFBYSxnQkFBd0IsQUFBYSxBQUFDO0FBQ25ELHVCQUFFLEtBQWEsQUFBRSxBQUFDO0FBQ2xCLHVCQUFZLGVBQXVCLEFBQVksQUFBQztBQUNoRCx1QkFBWSxlQUF1QixBQUFZLEFBQUM7QUFDaEQsdUJBQWlCLG9CQUE0QixBQUFpQixBQUFDO0FBQy9ELHVCQUFpQixvQkFBNEIsQUFBaUIsQUFBQztBQUMvRCx1QkFBc0IseUJBQWlDLEFBQXNCLEFBQUM7QUFDOUUsdUJBQWlCLG9CQUE0QixBQUFpQixBQUFDO0FBQy9ELHVCQUFRLFdBQW1CLEFBQVEsQUFBQztBQUNwQyx1QkFBTyxVQUFrQixBQUFPLEFBQUM7QUFDakMsdUJBQUcsTUFBYyxBQUFHLEFBQUM7QUFDckIsdUJBQVEsV0FBbUIsQUFBUSxBQUFDO0FBQ3BDLHVCQUFVLGFBQXFCLEFBQVUsQUFBQztBQUMxQyx1QkFBUSxXQUFtQixBQUFRLEFBQUM7QUFDcEMsdUJBQU0sU0FBaUIsQUFBTSxBQUFDO0FBQzlCLHVCQUFLLFFBQWdCLEFBQUssQUFBQzt1QkFtQ2xDO0FBQUEsY0FoRW9CLGtCQUFlLEFBZ0VuQztpQ0FFYyxBQUFNLEFBQUM7Ozs7Ozs7Ozs7Ozs7O0FDOUZoQixtQkFBQyxBQUFNLFNBQUcsU0FBTSxBQUFDIiwiZmlsZSI6IkNhcmJvbi5zZnguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBBcHAgZnJvbSBcIi4vQXBwXCI7XG5pbXBvcnQgQXBwQ29udGV4dCBmcm9tIFwiLi9BcHAvQ29udGV4dFwiO1xuaW1wb3J0IENvbnRleHQgZnJvbSBcIi4vQ29udGV4dFwiO1xuaW1wb3J0ICogYXMgRXJyb3JzIGZyb20gXCIuL0Vycm9yc1wiO1xuaW1wb3J0ICogYXMgSFRUUCBmcm9tIFwiLi9IVFRQXCI7XG5pbXBvcnQgKiBhcyBOUyBmcm9tIFwiLi9OU1wiO1xuaW1wb3J0ICogYXMgUGVyc2lzdGVkQXBwIGZyb20gXCIuL1BlcnNpc3RlZEFwcFwiO1xuaW1wb3J0ICogYXMgUGVyc2lzdGVkRG9jdW1lbnQgZnJvbSBcIi4vUGVyc2lzdGVkRG9jdW1lbnRcIjtcbmltcG9ydCAqIGFzIFBvaW50ZXIgZnJvbSBcIi4vUG9pbnRlclwiO1xuaW1wb3J0ICogYXMgUkRGIGZyb20gXCIuL1JERlwiO1xuaW1wb3J0ICogYXMgU1BBUlFMIGZyb20gXCIuL1NQQVJRTFwiO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vVXRpbHNcIjtcblxuZXhwb3J0IGNsYXNzIENsYXNzIHtcblx0cHJpdmF0ZSBjb250ZXh0OkNvbnRleHQ7XG5cblx0Y29uc3RydWN0b3IoIGNvbnRleHQ6Q29udGV4dCApIHtcblx0XHR0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuXHR9XG5cblx0Z2V0Q29udGV4dCggdXJpOnN0cmluZyApOlByb21pc2U8QXBwQ29udGV4dD47XG5cdGdldENvbnRleHQoIHBvaW50ZXI6UG9pbnRlci5DbGFzcyApOlByb21pc2U8QXBwQ29udGV4dD47XG5cdGdldENvbnRleHQoIHBvaW50ZXJPclVSSTphbnkgKTpQcm9taXNlPEFwcENvbnRleHQ+IHtcblx0XHRsZXQgcG9pbnRlcjpQb2ludGVyLkNsYXNzID0gISBVdGlscy5pc1N0cmluZyggcG9pbnRlck9yVVJJICkgPyBwb2ludGVyT3JVUkkgOiBudWxsO1xuXHRcdGxldCB1cmk6c3RyaW5nID0gISAhIHBvaW50ZXIgPyBwb2ludGVyLmlkIDogcG9pbnRlck9yVVJJO1xuXG5cdFx0aWYoICEgdXJpICkgcmV0dXJuIFByb21pc2UucmVqZWN0PEFwcENvbnRleHQ+KCBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIlRoZSBhcHBsaWNhdGlvbidzIFVSSSBtdXN0IGJlIGRlZmluZWQuXCIgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXMucmVzb2x2ZVVSSSggdXJpICkudGhlbiggKCBhcHBVUkk6c3RyaW5nICkgPT4ge1xuXHRcdFx0cG9pbnRlciA9IHRoaXMuY29udGV4dC5kb2N1bWVudHMuZ2V0UG9pbnRlciggYXBwVVJJICk7XG5cdFx0XHRyZXR1cm4gcG9pbnRlci5yZXNvbHZlPFBlcnNpc3RlZEFwcC5DbGFzcz4oKTtcblxuXHRcdH0gKS50aGVuKCAoIFsgYXBwLCByZXNwb25zZSBdOlsgUGVyc2lzdGVkQXBwLkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0gKSA9PiB7XG5cdFx0XHRpZiggISBQZXJzaXN0ZWRBcHAuRmFjdG9yeS5pcyggYXBwICkgKSB0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBgVGhlIHJlc291cmNlIGZldGNoZWQgaXMgbm90IGEgJHsgTlMuQ1MuQ2xhc3MuQXBwbGljYXRpb24gfS5gICk7XG5cdFx0XHRyZXR1cm4gbmV3IEFwcENvbnRleHQoIHRoaXMuY29udGV4dCwgYXBwICk7XG5cdFx0fSApO1xuXG5cdH1cblxuXHRnZXRBbGxDb250ZXh0cygpOlByb21pc2U8QXBwQ29udGV4dFtdPiB7XG5cdFx0cmV0dXJuIHRoaXMucmVzb2x2ZVVSSSggXCJcIiApLnRoZW4oICggYXBwc0NvbnRhaW5lclVSSTpzdHJpbmcgKSA9PiB7XG5cdFx0XHRpZiggISB0aGlzLmNvbnRleHQuYXV0aCB8fCAhIHRoaXMuY29udGV4dC5hdXRoLmlzQXV0aGVudGljYXRlZCgpICkgcmV0dXJuIHRoaXMuY29udGV4dC5kb2N1bWVudHMuZ2V0TWVtYmVyczxQZXJzaXN0ZWRBcHAuQ2xhc3M+KCB0aGlzLmdldENvbnRhaW5lclVSSSgpLCBmYWxzZSApO1xuXG5cdFx0XHRsZXQgYWdlbnRJRDpzdHJpbmcgPSB0aGlzLmNvbnRleHQuYXV0aC5hdXRoZW50aWNhdGVkQWdlbnQuaWQ7XG5cdFx0XHRyZXR1cm4gdGhpcy5jb250ZXh0LmRvY3VtZW50cy5leGVjdXRlU0VMRUNUUXVlcnkoIGFnZW50SUQsIGBcblx0XHRcdFx0U0VMRUNUID9hcHAgV0hFUkUge1xuXHRcdFx0XHRcdDwkeyBhZ2VudElEIH0+IDwkeyBOUy5DLlByZWRpY2F0ZS5hcHBSb2xlTWFwIH0+ID9yb2xlTWFwLlxuXHRcdFx0XHRcdD9yb2xlTWFwIDwkeyBOUy5DLlByZWRpY2F0ZS5lbnRyeSB9PiA/YXBwRW50cnkuXG5cdFx0XHRcdFx0P2FwcEVudHJ5IDwkeyBOUy5DLlByZWRpY2F0ZS5rZXkgfT4gP2FwcC5cblx0XHRcdFx0fVxuXHRcdFx0YCApLnRoZW4oICggWyByZXN1bHRzLCByZXNwb25zZSBdOlsgU1BBUlFMLlNFTEVDVFJlc3VsdHMuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXSApID0+IHtcblx0XHRcdFx0bGV0IGFwcHM6UG9pbnRlci5DbGFzc1tdID0gcmVzdWx0cy5iaW5kaW5ncy5tYXAoIGJpbmRpbmcgPT4gPFBvaW50ZXIuQ2xhc3M+IGJpbmRpbmdbIFwiYXBwXCIgXSApO1xuXHRcdFx0XHRyZXR1cm4gPFByb21pc2U8W1BlcnNpc3RlZEFwcC5DbGFzc1tdLCBhbnldPj4gUG9pbnRlci5VdGlsLnJlc29sdmVBbGw8UGVyc2lzdGVkQXBwLkNsYXNzPiggYXBwcyApO1xuXHRcdFx0fSApO1xuXG5cdFx0fSApLnRoZW4oICggWyBhcHBzLCByZXNwb25zZSBdOlsgUGVyc2lzdGVkQXBwLkNsYXNzW10sIGFueSBdICkgPT4ge1xuXHRcdFx0cmV0dXJuIGFwcHMubWFwKCAoIGFwcDpQb2ludGVyLkNsYXNzICkgPT4gbmV3IEFwcENvbnRleHQoIHRoaXMuY29udGV4dCwgPGFueT4gYXBwICkgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRjcmVhdGUoIGFwcERvY3VtZW50OkFwcC5DbGFzcywgc2x1ZzpzdHJpbmcgPSBudWxsICk6UHJvbWlzZTxbIFBlcnNpc3RlZERvY3VtZW50LkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzXT4ge1xuXHRcdHJldHVybiB0aGlzLnJlc29sdmVVUkkoIFwiXCIgKS50aGVuKCAoIGFwcHNDb250YWluZXJVUkk6c3RyaW5nICkgPT4ge1xuXHRcdFx0aWYoICEgQXBwLkZhY3RvcnkuaXMoIGFwcERvY3VtZW50ICkgKSB0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIlRoZSBEb2N1bWVudCBpcyBub3QgYSBgQ2FyYm9uLkFwcC5DbGFzc2Agb2JqZWN0LlwiICk7XG5cblx0XHRcdHJldHVybiB0aGlzLmNvbnRleHQuZG9jdW1lbnRzLmNyZWF0ZUNoaWxkKCBhcHBzQ29udGFpbmVyVVJJLCBhcHBEb2N1bWVudCwgc2x1ZyApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGRlbGV0ZSggYXBwVVJJOnN0cmluZywgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxIVFRQLlJlc3BvbnNlLkNsYXNzPiB7XG5cdFx0aWYoICEgYXBwVVJJICkgcmV0dXJuIFByb21pc2UucmVqZWN0PGFueT4oIG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiVGhlIGFwcGxpY2F0aW9uJ3MgVVJJIG11c3QgYmUgZGVmaW5lZC5cIiApICk7XG5cblx0XHRyZXR1cm4gdGhpcy5yZXNvbHZlVVJJKCBhcHBVUkkgKS50aGVuKCAoIHVyaTpzdHJpbmcgKSA9PiB7XG5cdFx0XHRyZXR1cm4gdGhpcy5jb250ZXh0LmRvY3VtZW50cy5kZWxldGUoIHVyaSwgcmVxdWVzdE9wdGlvbnMgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRwcml2YXRlIHJlc29sdmVVUkkoIGFwcFVSSTpzdHJpbmcgKTpQcm9taXNlPHN0cmluZz4ge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KCAoIHJlc29sdmU6KCB1cmk6c3RyaW5nICkgPT4gdm9pZCApID0+IHtcblx0XHRcdGxldCBjb250YWluZXJVUkk6c3RyaW5nID0gdGhpcy5jb250ZXh0LnJlc29sdmUoIHRoaXMuZ2V0Q29udGFpbmVyVVJJKCkgKTtcblx0XHRcdGxldCB1cmk6c3RyaW5nID0gUkRGLlVSSS5VdGlsLnJlc29sdmUoIGNvbnRhaW5lclVSSSwgYXBwVVJJICk7XG5cblx0XHRcdGlmKCAhIFJERi5VUkkuVXRpbC5pc0Jhc2VPZiggY29udGFpbmVyVVJJLCB1cmkgKSApIHRocm93IG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiVGhlIFVSSSBwcm92aWRlZCBpcyBub3QgYSB2YWxpZCBhcHAgb2YgdGhlIGN1cnJlbnQgY29udGV4dC5cIiApO1xuXG5cdFx0XHRyZXNvbHZlKCB1cmkgKTtcblx0XHR9ICk7XG5cblx0fVxuXG5cdHByaXZhdGUgZ2V0Q29udGFpbmVyVVJJKCk6c3RyaW5nIHtcblx0XHRpZiggISB0aGlzLmNvbnRleHQuaGFzU2V0dGluZyggXCJwbGF0Zm9ybS5hcHBzLmNvbnRhaW5lclwiICkgKSB0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxTdGF0ZUVycm9yKCBcIlRoZSBhcHBzIGNvbnRhaW5lciBVUkkgaGFzbid0IGJlZW4gc2V0LlwiICk7XG5cdFx0cmV0dXJuIHRoaXMuY29udGV4dC5nZXRTZXR0aW5nKCBcInBsYXRmb3JtLmFwcHMuY29udGFpbmVyXCIgKTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCAqIGFzIEF1dGggZnJvbSBcIi4vQXV0aFwiO1xuaW1wb3J0IENvbnRleHQgZnJvbSBcIi4vQ29udGV4dFwiO1xuaW1wb3J0IERvY3VtZW50cyBmcm9tIFwiLi9Eb2N1bWVudHNcIjtcbmltcG9ydCAqIGFzIEVycm9ycyBmcm9tIFwiLi9FcnJvcnNcIjtcbmltcG9ydCAqIGFzIEpTT05MRENvbnZlcnRlciBmcm9tIFwiLi9KU09OTEQvQ29udmVydGVyXCI7XG5pbXBvcnQgKiBhcyBQb2ludGVyIGZyb20gXCIuL1BvaW50ZXJcIjtcbmltcG9ydCAqIGFzIFJERiBmcm9tIFwiLi9SREZcIjtcbmltcG9ydCAqIGFzIFNES0NvbnRleHQgZnJvbSBcIi4vU0RLQ29udGV4dFwiO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vVXRpbHNcIjtcbmltcG9ydCAqIGFzIE9iamVjdFNjaGVtYSBmcm9tIFwiLi9PYmplY3RTY2hlbWFcIjtcblxuYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RDb250ZXh0IGV4dGVuZHMgU0RLQ29udGV4dC5DbGFzcyB7XG5cdF9wYXJlbnRDb250ZXh0OkNvbnRleHQ7XG5cdGdldCBwYXJlbnRDb250ZXh0KCk6Q29udGV4dCB7IHJldHVybiB0aGlzLl9wYXJlbnRDb250ZXh0OyB9O1xuXG5cdC8vIFRPRE86IE1ha2UgdGhlIHByb3BlcnR5IGBhdXRoOkF1dGguQ2xhc3NgIGFic3RyYWN0LiBJbiBUU0MgMi4wIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvNDY2OTtcblxuXHRjb25zdHJ1Y3RvciggcGFyZW50Q29udGV4dDpDb250ZXh0ID0gbnVsbCApIHtcblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5fcGFyZW50Q29udGV4dCA9ICEgISBwYXJlbnRDb250ZXh0ID8gcGFyZW50Q29udGV4dCA6IFNES0NvbnRleHQuaW5zdGFuY2U7XG5cblx0XHR0aGlzLmdlbmVyYWxPYmplY3RTY2hlbWEgPSBudWxsO1xuXHRcdHRoaXMudHlwZU9iamVjdFNjaGVtYU1hcCA9IG5ldyBNYXA8c3RyaW5nLCBPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWE+KCk7XG5cdH1cblxuXHRhYnN0cmFjdCByZXNvbHZlKCByZWxhdGl2ZVVSSTpzdHJpbmcgKTpzdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFic3RyYWN0Q29udGV4dDtcbiIsImltcG9ydCAqIGFzIEFnZW50cyBmcm9tIFwiLi8uLi9BdXRoL0FnZW50c1wiO1xuaW1wb3J0ICogYXMgQ29udGV4dCBmcm9tIFwiLi9Db250ZXh0XCI7XG5pbXBvcnQgKiBhcyBIVFRQIGZyb20gXCIuLy4uL0hUVFBcIjtcbmltcG9ydCAqIGFzIFBlcnNpc3RlZEFnZW50IGZyb20gXCIuL1BlcnNpc3RlZEFnZW50XCI7XG5cbmV4cG9ydCBjbGFzcyBDbGFzcyBleHRlbmRzIEFnZW50cy5DbGFzcyB7XG5cblx0Y29uc3RydWN0b3IoIGFwcENvbnRleHQ6Q29udGV4dC5DbGFzcyApIHtcblx0XHRzdXBlciggYXBwQ29udGV4dCApO1xuXHR9XG5cblx0Z2V0KCBhZ2VudFVSSTpzdHJpbmcsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBQZXJzaXN0ZWRBZ2VudC5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdPiB7XG5cdFx0cmV0dXJuIHN1cGVyLmdldCggYWdlbnRVUkksIHJlcXVlc3RPcHRpb25zICk7XG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCBBcHBDb250ZXh0IGZyb20gXCIuL0NvbnRleHRcIjtcbmltcG9ydCAqIGFzIEFwcFJvbGUgZnJvbSBcIi4vUm9sZVwiO1xuaW1wb3J0ICogYXMgRXJyb3JzIGZyb20gXCIuLy4uL0Vycm9yc1wiO1xuaW1wb3J0ICogYXMgSFRUUCBmcm9tIFwiLi8uLi9IVFRQXCI7XG5pbXBvcnQgKiBhcyBOUyBmcm9tIFwiLi8uLi9OU1wiO1xuaW1wb3J0ICogYXMgUGVyc2lzdGVkQXBwUm9sZSBmcm9tIFwiLi9QZXJzaXN0ZWRSb2xlXCI7XG5pbXBvcnQgKiBhcyBQZXJzaXN0ZWRSb2xlIGZyb20gXCIuLy4uL0F1dGgvUGVyc2lzdGVkUm9sZVwiO1xuaW1wb3J0ICogYXMgUG9pbnRlciBmcm9tIFwiLi8uLi9Qb2ludGVyXCI7XG5pbXBvcnQgQXV0aFJvbGVzIGZyb20gXCIuLy4uL0F1dGgvUm9sZXNcIjtcblxuZXhwb3J0IGNsYXNzIENsYXNzIGV4dGVuZHMgQXV0aFJvbGVzIHtcblxuXHRjb25zdHJ1Y3RvciggYXBwQ29udGV4dDpBcHBDb250ZXh0ICkge1xuXHRcdGlmKCAhICggYXBwQ29udGV4dCBpbnN0YW5jZW9mIEFwcENvbnRleHQgKSApIHRocm93IG5ldyBFcnJvcnMuTm90SW1wbGVtZW50ZWRFcnJvciggXCJUaGUgY29udGV4dCBwcm92aWRlZCBpcyBub3QgYSBBcHBDb250ZXh0LlwiICk7XG5cdFx0c3VwZXIoIGFwcENvbnRleHQgKTtcblx0fVxuXG5cdGNyZWF0ZUNoaWxkKCBwYXJlbnRSb2xlOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHJvbGU6QXBwUm9sZS5DbGFzcywgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIFBlcnNpc3RlZFJvbGUuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cdGNyZWF0ZUNoaWxkKCBwYXJlbnRSb2xlOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHJvbGU6QXBwUm9sZS5DbGFzcywgc2x1Zz86c3RyaW5nLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgUGVyc2lzdGVkUm9sZS5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdPjtcblx0Y3JlYXRlQ2hpbGQoIHBhcmVudFJvbGU6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcm9sZTpBcHBSb2xlLkNsYXNzLCBzbHVnT3JSZXF1ZXN0T3B0aW9ucz86YW55LCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgUGVyc2lzdGVkUm9sZS5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdPiB7XG5cdFx0aWYoICEgQXBwUm9sZS5GYWN0b3J5LmlzKCByb2xlICkgKSByZXR1cm4gUHJvbWlzZS5yZWplY3Q8YW55PiggbmV3IEVycm9ycy5JbGxlZ2FsQXJndW1lbnRFcnJvciggXCJUaGUgcm9sZSBpcyBub3QgYSB2YWxpZCBgQ2FyYm9uLkFwcC5Sb2xlLkNsYXNzYCBvYmplY3QuXCIgKSApO1xuXG5cdFx0cmV0dXJuIHN1cGVyLmNyZWF0ZUNoaWxkKCBwYXJlbnRSb2xlLCByb2xlLCBzbHVnT3JSZXF1ZXN0T3B0aW9ucywgcmVxdWVzdE9wdGlvbnMgKTtcblx0fVxuXG5cdGdldCggcm9sZVVSSTpzdHJpbmcsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBQZXJzaXN0ZWRBcHBSb2xlLkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+IHtcblx0XHRyZXR1cm4gc3VwZXIuZ2V0KCByb2xlVVJJLCByZXF1ZXN0T3B0aW9ucyApLnRoZW4oICggWyByb2xlLCByZXNwb25zZSBdOlsgUGVyc2lzdGVkUm9sZS5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdICkgPT4ge1xuXHRcdFx0aWYoICEgUGVyc2lzdGVkQXBwUm9sZS5GYWN0b3J5LmlzKCByb2xlICkgKSB0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBgVGhlIHJlc291cmNlIGZldGNoZWQgaXMgbm90IGEgJHsgTlMuQ1MuQ2xhc3MuQXBwUm9sZSB9YCApO1xuXG5cdFx0XHRyZXR1cm4gWyByb2xlLCByZXNwb25zZSBdO1xuXHRcdH0gKTtcblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0IEFwcEFnZW50cyBmcm9tIFwiLi9BZ2VudHNcIjtcbmltcG9ydCBBcHBDb250ZXh0IGZyb20gXCIuL0NvbnRleHRcIjtcbmltcG9ydCBBcHBSb2xlcyBmcm9tIFwiLi9Sb2xlc1wiO1xuaW1wb3J0IEF1dGggZnJvbSBcIi4vLi4vQXV0aFwiO1xuaW1wb3J0ICogYXMgRXJyb3JzIGZyb20gXCIuLy4uL0Vycm9yc1wiO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vLi4vVXRpbHNcIjtcblxuZXhwb3J0IGNsYXNzIENsYXNzIGV4dGVuZHMgQXV0aCB7XG5cdHB1YmxpYyBhZ2VudHM6QXBwQWdlbnRzO1xuXHRwdWJsaWMgcm9sZXM6QXBwUm9sZXM7XG5cblx0Y29uc3RydWN0b3IoIGFwcENvbnRleHQ6QXBwQ29udGV4dCApIHtcblx0XHRzdXBlciggYXBwQ29udGV4dCApO1xuXHRcdHRoaXMucm9sZXMgPSBuZXcgQXBwUm9sZXMoIGFwcENvbnRleHQgKTtcblx0XHR0aGlzLmFnZW50cyA9IG5ldyBBcHBBZ2VudHMoIGFwcENvbnRleHQgKTtcblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0IEFic3RyYWN0Q29udGV4dCBmcm9tIFwiLi8uLi9BYnN0cmFjdENvbnRleHRcIjtcbmltcG9ydCBBdXRoIGZyb20gXCIuL0F1dGhcIjtcbmltcG9ydCBDb250ZXh0IGZyb20gXCIuLy4uL0NvbnRleHRcIjtcbmltcG9ydCAqIGFzIFJERiBmcm9tIFwiLi8uLi9SREZcIjtcbmltcG9ydCBQZXJzaXN0ZWRBcHAgZnJvbSBcIi4vLi4vUGVyc2lzdGVkQXBwXCI7XG5cbmV4cG9ydCBjbGFzcyBDbGFzcyBleHRlbmRzIEFic3RyYWN0Q29udGV4dCB7XG5cdHB1YmxpYyBhdXRoOkF1dGg7XG5cblx0cHVibGljIGdldCBhcHAoKTpQZXJzaXN0ZWRBcHAgeyByZXR1cm4gdGhpcy5fYXBwOyB9O1xuXG5cdHByaXZhdGUgX2FwcDpQZXJzaXN0ZWRBcHA7XG5cdHByaXZhdGUgYmFzZTpzdHJpbmc7XG5cblx0Y29uc3RydWN0b3IoIHBhcmVudENvbnRleHQ6Q29udGV4dCwgYXBwOlBlcnNpc3RlZEFwcCApIHtcblx0XHRzdXBlciggcGFyZW50Q29udGV4dCApO1xuXHRcdHRoaXMuYXV0aCA9IG5ldyBBdXRoKCB0aGlzICk7XG5cdFx0dGhpcy5fYXBwID0gYXBwO1xuXG5cdFx0dGhpcy5iYXNlID0gdGhpcy5nZXRCYXNlKCB0aGlzLmFwcCApO1xuXG5cdFx0Ly8gUmVhc3NpZ24gdGhlIHJvb3RDb250YWluZXIgcG9pbnRlciBiZWNhdXNlIHRoZSBwcmV2aW91cyBvbmUgd2FzIGNyZWF0ZWQgaW4gdGhlIFNES0NvbnRleHQgYW5kIHRoaXMgb25lIG11c3QgYmUgcmVzb2x2ZWQgYnkgdGhpcyBjb250ZXh0LlxuXHRcdHRoaXMuZG9jdW1lbnRzLnJlbW92ZVBvaW50ZXIoIGFwcC5yb290Q29udGFpbmVyICk7XG5cdFx0YXBwLnJvb3RDb250YWluZXIgPSA8YW55PiB0aGlzLmRvY3VtZW50cy5nZXRQb2ludGVyKCBhcHAucm9vdENvbnRhaW5lci5pZCApO1xuXHR9XG5cblx0cmVzb2x2ZSggdXJpOnN0cmluZyApOnN0cmluZyB7XG5cdFx0aWYoIFJERi5VUkkuVXRpbC5pc0Fic29sdXRlKCB1cmkgKSApIHJldHVybiB1cmk7XG5cblx0XHRsZXQgZmluYWxVUkk6c3RyaW5nID0gdGhpcy5wYXJlbnRDb250ZXh0LnJlc29sdmUoIHRoaXMuYmFzZSApO1xuXHRcdHJldHVybiBSREYuVVJJLlV0aWwucmVzb2x2ZSggZmluYWxVUkksIHVyaSApO1xuXHR9XG5cblx0cHJpdmF0ZSBnZXRCYXNlKCByZXNvdXJjZTpQZXJzaXN0ZWRBcHAgKTpzdHJpbmcge1xuXHRcdHJldHVybiByZXNvdXJjZS5yb290Q29udGFpbmVyLmlkO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0ICogYXMgRG9jdW1lbnQgZnJvbSBcIi4vRG9jdW1lbnRcIjtcbmltcG9ydCAqIGFzIE5TIGZyb20gXCIuL05TXCI7XG5pbXBvcnQgKiBhcyBPYmplY3RTY2hlbWEgZnJvbSBcIi4vT2JqZWN0U2NoZW1hXCI7XG5pbXBvcnQgUG9pbnRlciBmcm9tIFwiLi9Qb2ludGVyXCI7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi9VdGlsc1wiO1xuaW1wb3J0IElsbGVnYWxBcmd1bWVudEVycm9yIGZyb20gXCIuL0Vycm9ycy9JbGxlZ2FsQXJndW1lbnRFcnJvclwiO1xuXG5pbXBvcnQgKiBhcyBQZXJzaXN0ZWRSb2xlIGZyb20gXCIuL0FwcC9QZXJzaXN0ZWRSb2xlXCI7XG5pbXBvcnQgKiBhcyBSb2xlIGZyb20gXCIuL0FwcC9Sb2xlXCI7XG5pbXBvcnQgKiBhcyBSb2xlcyBmcm9tIFwiLi9BcHAvUm9sZXNcIjtcbmltcG9ydCBDb250ZXh0IGZyb20gXCIuL0FwcC9Db250ZXh0XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xhc3MgZXh0ZW5kcyBEb2N1bWVudC5DbGFzcyB7XG5cdG5hbWU6c3RyaW5nO1xuXHRkZXNjcmlwdGlvbj86c3RyaW5nO1xuXHRhbGxvd3NPcmlnaW5zPzooUG9pbnRlciB8IHN0cmluZylbXTtcbn1cblxuZXhwb3J0IGNvbnN0IFJERl9DTEFTUzpzdHJpbmcgPSBOUy5DUy5DbGFzcy5BcHBsaWNhdGlvbjtcblxuLy8gVE9ETyBQcm9ibGVtIHdpdGggY2lyY3VsYXIgcmVmZXJlbmNlOiBUaGUgU0NIRU1BIGlzIGhhcmRjb2RlZCBpbiBTREtDb250ZXh0IG1vZHVsZVxuZXhwb3J0IGNvbnN0IFNDSEVNQTpPYmplY3RTY2hlbWEuQ2xhc3MgPSB7XG5cdFwibmFtZVwiOiB7XG5cdFx0XCJAaWRcIjogTlMuQ1MuUHJlZGljYXRlLm5hbWFlLFxuXHRcdFwiQHR5cGVcIjogTlMuWFNELkRhdGFUeXBlLnN0cmluZyxcblx0fSxcblx0XCJkZXNjcmlwdGlvblwiOiB7XG5cdFx0XCJAaWRcIjogTlMuQ1MuUHJlZGljYXRlLmRlc2NyaXB0aW9uLFxuXHRcdFwiQHR5cGVcIjogTlMuWFNELkRhdGFUeXBlLnN0cmluZyxcblx0fSxcblx0XCJyb290Q29udGFpbmVyXCI6IHtcblx0XHRcIkBpZFwiOiBOUy5DUy5QcmVkaWNhdGUucm9vdENvbnRhaW5lcixcblx0XHRcIkB0eXBlXCI6IFwiQGlkXCIsXG5cdH0sXG5cdFwiYWxsb3dzT3JpZ2luc1wiOiB7XG5cdFx0XCJAaWRcIjogTlMuQ1MuUHJlZGljYXRlLmFsbG93c09yaWdpbixcblx0XHRcIkBjb250YWluZXJcIjogXCJAc2V0XCIsXG5cdH0sXG59O1xuXG5leHBvcnQgY2xhc3MgRmFjdG9yeSB7XG5cdHN0YXRpYyBoYXNDbGFzc1Byb3BlcnRpZXMoIHJlc291cmNlOk9iamVjdCApOmJvb2xlYW4ge1xuXHRcdHJldHVybiBVdGlscy5oYXNQcm9wZXJ0eURlZmluZWQoIHJlc291cmNlLCBcIm5hbWVcIiApO1xuXHR9XG5cblx0c3RhdGljIGlzKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIERvY3VtZW50LkZhY3RvcnkuaGFzQ2xhc3NQcm9wZXJ0aWVzKCBvYmplY3QgKVxuXHRcdFx0JiYgRmFjdG9yeS5oYXNDbGFzc1Byb3BlcnRpZXMoIG9iamVjdCApXG5cdFx0XHQmJiAob2JqZWN0IGFzIERvY3VtZW50LkNsYXNzKS5oYXNUeXBlKCBSREZfQ0xBU1MgKTtcblx0fVxuXG5cdHN0YXRpYyBjcmVhdGUoIG5hbWU6c3RyaW5nLCBkZXNjcmlwdGlvbj86c3RyaW5nICk6Q2xhc3Mge1xuXHRcdHJldHVybiBGYWN0b3J5LmNyZWF0ZUZyb208T2JqZWN0Pigge30sIG5hbWUsIGRlc2NyaXB0aW9uICk7XG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlRnJvbTxUIGV4dGVuZHMgT2JqZWN0Piggb2JqZWN0OlQsIG5hbWU6c3RyaW5nLCBkZXNjcmlwdGlvbj86c3RyaW5nICk6VCAmIENsYXNzIHtcblx0XHRpZiggISBEb2N1bWVudC5GYWN0b3J5Lmhhc0NsYXNzUHJvcGVydGllcyggb2JqZWN0ICkgKVxuXHRcdFx0b2JqZWN0ID0gRG9jdW1lbnQuRmFjdG9yeS5jcmVhdGVGcm9tKCBvYmplY3QgKTtcblxuXHRcdGlmKCAhIFV0aWxzLmlzU3RyaW5nKCBuYW1lICkgfHwgISBuYW1lIClcblx0XHRcdHRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFcnJvciggXCJUaGUgbmFtZSBjYW5ub3QgYmUgZW1wdHkuXCIgKTtcblxuXHRcdGxldCBhcHA6VCAmIENsYXNzID0gPFQgJiBDbGFzcz4gb2JqZWN0O1xuXHRcdGFwcC5uYW1lID0gbmFtZTtcblx0XHRhcHAudHlwZXMucHVzaCggTlMuQ1MuQ2xhc3MuQXBwbGljYXRpb24gKTtcblxuXHRcdGlmKCAhICEgZGVzY3JpcHRpb24gKSBhcHAuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcblxuXHRcdHJldHVybiBhcHA7XG5cdH1cblxufVxuXG5leHBvcnQge1xuXHRDb250ZXh0LFxuXHRQZXJzaXN0ZWRSb2xlLFxuXHRSb2xlLFxuXHRSb2xlcyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0ICogYXMgQXBwIGZyb20gXCIuL0FwcFwiO1xuaW1wb3J0ICogYXMgUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQgZnJvbSBcIi4vUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnRcIjtcbmltcG9ydCBQb2ludGVyIGZyb20gXCIuL1BvaW50ZXJcIjtcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuL1V0aWxzXCI7XG5cbi8vIFRPRE8gTWFyayBhbiBlcnJvciBpZiBpdCBleHRlbmRzIGZyb20gQXBwLkNsYXNzXG5leHBvcnQgaW50ZXJmYWNlIENsYXNzIGV4dGVuZHMgUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQuQ2xhc3Mge1xuXHRuYW1lOnN0cmluZztcblx0ZGVzY3JpcHRpb24/OnN0cmluZztcblx0cm9vdENvbnRhaW5lcjpQb2ludGVyO1xuXHRhbGxvd3NPcmlnaW5zPzooUG9pbnRlciB8IHN0cmluZylbXTtcbn1cblxuZXhwb3J0IGNsYXNzIEZhY3Rvcnkge1xuXG5cdHN0YXRpYyBoYXNDbGFzc1Byb3BlcnRpZXMoIHJlc291cmNlOk9iamVjdCApOmJvb2xlYW4ge1xuXHRcdHJldHVybiBVdGlscy5oYXNQcm9wZXJ0eURlZmluZWQoIHJlc291cmNlLCBcInJvb3RDb250YWluZXJcIiApO1xuXHR9XG5cblx0c3RhdGljIGlzKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIEFwcC5GYWN0b3J5LmlzKCBvYmplY3QgKVxuXHRcdFx0JiYgUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQuRmFjdG9yeS5pcyggb2JqZWN0IClcblx0XHRcdCYmIEZhY3RvcnkuaGFzQ2xhc3NQcm9wZXJ0aWVzKCBvYmplY3QgKTtcblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0ICogYXMgQWdlbnRzIGZyb20gXCIuLy4uL0F1dGgvQWdlbnRzXCI7XG5pbXBvcnQgQ2FyYm9uIGZyb20gXCIuLy4uL0NhcmJvblwiO1xuaW1wb3J0ICogYXMgSFRUUCBmcm9tIFwiLi8uLi9IVFRQXCI7XG5pbXBvcnQgKiBhcyBQZXJzaXN0ZWRBZ2VudCBmcm9tIFwiLi9QZXJzaXN0ZWRBZ2VudFwiO1xuXG5leHBvcnQgY2xhc3MgQ2xhc3MgZXh0ZW5kcyBBZ2VudHMuQ2xhc3Mge1xuXG5cdGNvbnN0cnVjdG9yKCBhcHBDb250ZXh0OkNhcmJvbiApIHtcblx0XHRzdXBlciggYXBwQ29udGV4dCApO1xuXHR9XG5cblx0Z2V0KCBhZ2VudFVSSTpzdHJpbmcsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBQZXJzaXN0ZWRBZ2VudC5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdPiB7XG5cdFx0cmV0dXJuIHN1cGVyLmdldCggYWdlbnRVUkksIHJlcXVlc3RPcHRpb25zICk7XG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCAqIGFzIEFnZW50cyBmcm9tIFwiLi9BZ2VudHNcIjtcbmltcG9ydCBDYXJib24gZnJvbSBcIi4vLi4vQ2FyYm9uXCI7XG5pbXBvcnQgKiBhcyBBdXRoIGZyb20gXCIuLy4uL0F1dGhcIjtcbmltcG9ydCAqIGFzIEVycm9ycyBmcm9tIFwiLi8uLi9FcnJvcnNcIjtcblxuZXhwb3J0IGNsYXNzIENsYXNzIGV4dGVuZHMgQXV0aC5DbGFzcyB7XG5cdHB1YmxpYyBhZ2VudHM6QWdlbnRzLkNsYXNzO1xuXG5cdHNldCByb2xlcyggcm9sZTpBdXRoLlJvbGVzLkNsYXNzICkge31cblxuXHRnZXQgcm9sZXMoKTpBdXRoLlJvbGVzLkNsYXNzIHsgdGhyb3cgbmV3IEVycm9ycy5Ob3RJbXBsZW1lbnRlZEVycm9yKCBcIkN1cnJlbnRseSB0aGVyZSBpcyBubyBzdXBwb3J0IGZvciBQbGF0Zm9ybSBSb2xlc1wiICk7IH1cblxuXHRjb25zdHJ1Y3RvciggcGxhdGZvcm1Db250ZXh0OkNhcmJvbiApIHtcblx0XHRzdXBlciggcGxhdGZvcm1Db250ZXh0ICk7XG5cdFx0dGhpcy5hZ2VudHMgPSBuZXcgQWdlbnRzLkNsYXNzKCBwbGF0Zm9ybUNvbnRleHQgKTtcblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0ICogYXMgQXV0aCBmcm9tIFwiLi9QbGF0Zm9ybS9BdXRoXCI7XG5cbmV4cG9ydCB7XG5cdEF1dGgsXG59O1xuIiwiaW1wb3J0ICogYXMgQXV0aCBmcm9tIFwiLi9BdXRoXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xhc3Mge1xuXHRcImRvbWFpblwiPzpzdHJpbmc7XG5cdFwiaHR0cC5zc2xcIj86Ym9vbGVhbjtcblx0XCJhdXRoLm1ldGhvZFwiPzpBdXRoLk1ldGhvZDtcblx0XCJwbGF0Zm9ybS5jb250YWluZXJcIj86c3RyaW5nO1xuXHRcInBsYXRmb3JtLmFwcHMuY29udGFpbmVyXCI/OnN0cmluZztcblx0XCJwbGF0Zm9ybS5hZ2VudHMuY29udGFpbmVyXCI/OnN0cmluZztcblx0XCJwbGF0Zm9ybS5yb2xlcy5jb250YWluZXJcIj86c3RyaW5nO1xuXHRcInZvY2FidWxhcnlcIj86c3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgZGVmYXVsdFNldHRpbmdzOkNsYXNzID0ge1xuXHRcImRvbWFpblwiOiBcImNhcmJvbmxkcC5jb21cIixcblx0XCJodHRwLnNzbFwiOiB0cnVlLFxuXHRcImF1dGgubWV0aG9kXCI6IEF1dGguTWV0aG9kLlRPS0VOLFxuXHRcInBsYXRmb3JtLmNvbnRhaW5lclwiOiBcInBsYXRmb3JtL1wiLFxuXHRcInBsYXRmb3JtLmFwcHMuY29udGFpbmVyXCI6IFwiYXBwcy9cIixcblx0XCJwbGF0Zm9ybS5hZ2VudHMuY29udGFpbmVyXCI6IFwiYWdlbnRzL1wiLFxuXHRcInBsYXRmb3JtLnJvbGVzLmNvbnRhaW5lclwiOiBcInJvbGVzL1wiLFxuXHRcInZvY2FidWxhcnlcIjogXCJ2b2NhYnVsYXJ5LyNcIixcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRTZXR0aW5ncztcbiIsImltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuLy4uL1V0aWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBWYWx1ZVR5cGVzIHtcblx0c3RhdGljIGdldCBVUkkoKTpzdHJpbmcgeyByZXR1cm4gXCJ1cmlcIjsgfVxuXG5cdHN0YXRpYyBnZXQgTElURVJBTCgpOnN0cmluZyB7IHJldHVybiBcImxpdGVyYWxcIjsgfVxuXG5cdHN0YXRpYyBnZXQgQk5PREUoKTpzdHJpbmcgeyByZXR1cm4gXCJibm9kZVwiOyB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmluZGluZ09iamVjdCB7XG5cdFsgbmFtZTpzdHJpbmcgXTpCaW5kaW5nUHJvcGVydHk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmluZGluZ1Byb3BlcnR5IHtcblx0XCJ0eXBlXCI6c3RyaW5nO1xuXHRcInZhbHVlXCI6c3RyaW5nO1xuXHRcImRhdGF0eXBlXCI/OnN0cmluZztcblx0XCJ4bWw6bGFuZ1wiPzpzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xhc3Mge1xuXHRcImhlYWRcIjp7IFwidmFyc1wiPzpzdHJpbmdbXSwgXCJsaW5rc1wiPzpzdHJpbmdbXSB9O1xuXHRcInJlc3VsdHNcIj86e1xuXHRcdFwiYmluZGluZ3NcIjpCaW5kaW5nT2JqZWN0W10sXG5cdH07XG5cdFwiYm9vbGVhblwiPzpib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgRmFjdG9yeSB7XG5cdHN0YXRpYyBoYXNDbGFzc1Byb3BlcnRpZXMoIHZhbHVlOk9iamVjdCApOmJvb2xlYW4ge1xuXHRcdHJldHVybiAoXG5cdFx0XHRVdGlscy5oYXNQcm9wZXJ0eURlZmluZWQoIHZhbHVlLCBcImhlYWRcIiApXG5cdFx0KTtcblx0fVxuXG5cdHN0YXRpYyBpcyggdmFsdWU6YW55ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIChcblx0XHRcdFV0aWxzLmlzT2JqZWN0KCB2YWx1ZSApICYmXG5cdFx0XHRGYWN0b3J5Lmhhc0NsYXNzUHJvcGVydGllcyggdmFsdWUgKVxuXHRcdCk7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xhc3M7XG4iLCJpbXBvcnQgSFRUUEVycm9yIGZyb20gXCIuLy4uL0hUVFBFcnJvclwiO1xuXG5jb25zdCBuYW1lOnN0cmluZyA9IFwiQmFkUmVxdWVzdEVycm9yXCI7XG5jb25zdCBzdGF0dXNDb2RlOm51bWJlciA9IDQwMDtcblxuY2xhc3MgQmFkUmVxdWVzdEVycm9yIGV4dGVuZHMgSFRUUEVycm9yIHtcblx0c3RhdGljIGdldCBzdGF0dXNDb2RlKCk6bnVtYmVyIHsgcmV0dXJuIHN0YXR1c0NvZGU7IH1cblxuXHRnZXQgbmFtZSgpOnN0cmluZyB7IHJldHVybiBuYW1lOyB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJhZFJlcXVlc3RFcnJvcjtcbiIsImltcG9ydCBIVFRQRXJyb3IgZnJvbSBcIi4vLi4vSFRUUEVycm9yXCI7XG5cbmNvbnN0IG5hbWU6c3RyaW5nID0gXCJDb25mbGljdEVycm9yXCI7XG5jb25zdCBzdGF0dXNDb2RlOm51bWJlciA9IDQwOTtcblxuY2xhc3MgQ29uZmxpY3RFcnJvciBleHRlbmRzIEhUVFBFcnJvciB7XG5cdHN0YXRpYyBnZXQgc3RhdHVzQ29kZSgpOm51bWJlciB7IHJldHVybiBzdGF0dXNDb2RlOyB9XG5cblx0Z2V0IG5hbWUoKTpzdHJpbmcgeyByZXR1cm4gbmFtZTsgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb25mbGljdEVycm9yO1xuIiwiaW1wb3J0IEhUVFBFcnJvciBmcm9tIFwiLi8uLi9IVFRQRXJyb3JcIjtcblxuY29uc3QgbmFtZTpzdHJpbmcgPSBcIkZvcmJpZGRlbkVycm9yXCI7XG5jb25zdCBzdGF0dXNDb2RlOm51bWJlciA9IDQwMztcblxuY2xhc3MgRm9yYmlkZGVuRXJyb3IgZXh0ZW5kcyBIVFRQRXJyb3Ige1xuXHRzdGF0aWMgZ2V0IHN0YXR1c0NvZGUoKTpudW1iZXIgeyByZXR1cm4gc3RhdHVzQ29kZTsgfVxuXG5cdGdldCBuYW1lKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWU7IH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9yYmlkZGVuRXJyb3I7XG4iLCJpbXBvcnQgSFRUUEVycm9yIGZyb20gXCIuLy4uL0hUVFBFcnJvclwiO1xuXG5jb25zdCBuYW1lOnN0cmluZyA9IFwiTWV0aG9kTm90QWxsb3dlZEVycm9yXCI7XG5jb25zdCBzdGF0dXNDb2RlOm51bWJlciA9IDQwNTtcblxuY2xhc3MgTWV0aG9kTm90QWxsb3dlZEVycm9yIGV4dGVuZHMgSFRUUEVycm9yIHtcblx0c3RhdGljIGdldCBzdGF0dXNDb2RlKCk6bnVtYmVyIHsgcmV0dXJuIHN0YXR1c0NvZGU7IH1cblxuXHRnZXQgbmFtZSgpOnN0cmluZyB7IHJldHVybiBuYW1lOyB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1ldGhvZE5vdEFsbG93ZWRFcnJvcjtcbiIsImltcG9ydCBIVFRQRXJyb3IgZnJvbSBcIi4vLi4vSFRUUEVycm9yXCI7XG5cbmNvbnN0IG5hbWU6c3RyaW5nID0gXCJOb3RBY2NlcHRhYmxlRXJyb3JcIjtcbmNvbnN0IHN0YXR1c0NvZGU6bnVtYmVyID0gNDA2O1xuXG5jbGFzcyBOb3RBY2NlcHRhYmxlRXJyb3IgZXh0ZW5kcyBIVFRQRXJyb3Ige1xuXHRzdGF0aWMgZ2V0IHN0YXR1c0NvZGUoKTpudW1iZXIgeyByZXR1cm4gc3RhdHVzQ29kZTsgfVxuXG5cdGdldCBuYW1lKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWU7IH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTm90QWNjZXB0YWJsZUVycm9yO1xuIiwiaW1wb3J0IEhUVFBFcnJvciBmcm9tIFwiLi8uLi9IVFRQRXJyb3JcIjtcblxuY29uc3QgbmFtZTpzdHJpbmcgPSBcIk5vdEZvdW5kRXJyb3JcIjtcbmNvbnN0IHN0YXR1c0NvZGU6bnVtYmVyID0gNDA0O1xuXG5jbGFzcyBOb3RGb3VuZEVycm9yIGV4dGVuZHMgSFRUUEVycm9yIHtcblx0c3RhdGljIGdldCBzdGF0dXNDb2RlKCk6bnVtYmVyIHsgcmV0dXJuIHN0YXR1c0NvZGU7IH1cblxuXHRnZXQgbmFtZSgpOnN0cmluZyB7IHJldHVybiBuYW1lOyB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vdEZvdW5kRXJyb3I7XG4iLCJpbXBvcnQgSFRUUEVycm9yIGZyb20gXCIuLy4uL0hUVFBFcnJvclwiO1xuXG5jb25zdCBuYW1lOnN0cmluZyA9IFwiUHJlY29uZGl0aW9uRmFpbGVkRXJyb3JcIjtcbmNvbnN0IHN0YXR1c0NvZGU6bnVtYmVyID0gNDEyO1xuXG5jbGFzcyBQcmVjb25kaXRpb25GYWlsZWRFcnJvciBleHRlbmRzIEhUVFBFcnJvciB7XG5cdHN0YXRpYyBnZXQgc3RhdHVzQ29kZSgpOm51bWJlciB7IHJldHVybiBzdGF0dXNDb2RlOyB9XG5cblx0Z2V0IG5hbWUoKTpzdHJpbmcgeyByZXR1cm4gbmFtZTsgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQcmVjb25kaXRpb25GYWlsZWRFcnJvcjtcbiIsImltcG9ydCBIVFRQRXJyb3IgZnJvbSBcIi4vLi4vSFRUUEVycm9yXCI7XG5cbmNvbnN0IG5hbWU6c3RyaW5nID0gXCJQcmVjb25kaXRpb25SZXF1aXJlZEVycm9yXCI7XG5jb25zdCBzdGF0dXNDb2RlOm51bWJlciA9IDQyODtcblxuY2xhc3MgUHJlY29uZGl0aW9uUmVxdWlyZWRFcnJvciBleHRlbmRzIEhUVFBFcnJvciB7XG5cdHN0YXRpYyBnZXQgc3RhdHVzQ29kZSgpOm51bWJlciB7IHJldHVybiBzdGF0dXNDb2RlOyB9XG5cblx0Z2V0IG5hbWUoKTpzdHJpbmcgeyByZXR1cm4gbmFtZTsgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQcmVjb25kaXRpb25SZXF1aXJlZEVycm9yO1xuIiwiaW1wb3J0IEhUVFBFcnJvciBmcm9tIFwiLi8uLi9IVFRQRXJyb3JcIjtcblxuY29uc3QgbmFtZTpzdHJpbmcgPSBcIlJlcXVlc3RFbnRpdHlUb29MYXJnZUVycm9yXCI7XG5jb25zdCBzdGF0dXNDb2RlOm51bWJlciA9IDQxMztcblxuY2xhc3MgUmVxdWVzdEVudGl0eVRvb0xhcmdlRXJyb3IgZXh0ZW5kcyBIVFRQRXJyb3Ige1xuXHRzdGF0aWMgZ2V0IHN0YXR1c0NvZGUoKTpudW1iZXIgeyByZXR1cm4gc3RhdHVzQ29kZTsgfVxuXG5cdGdldCBuYW1lKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWU7IH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVxdWVzdEVudGl0eVRvb0xhcmdlRXJyb3I7XG4iLCJpbXBvcnQgSFRUUEVycm9yIGZyb20gXCIuLy4uL0hUVFBFcnJvclwiO1xuXG5jb25zdCBuYW1lOnN0cmluZyA9IFwiUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlRXJyb3JcIjtcbmNvbnN0IHN0YXR1c0NvZGU6bnVtYmVyID0gNDMxO1xuXG5jbGFzcyBSZXF1ZXN0SGVhZGVyRmllbGRzVG9vTGFyZ2VFcnJvciBleHRlbmRzIEhUVFBFcnJvciB7XG5cdHN0YXRpYyBnZXQgc3RhdHVzQ29kZSgpOm51bWJlciB7IHJldHVybiBzdGF0dXNDb2RlOyB9XG5cblx0Z2V0IG5hbWUoKTpzdHJpbmcgeyByZXR1cm4gbmFtZTsgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSZXF1ZXN0SGVhZGVyRmllbGRzVG9vTGFyZ2VFcnJvcjtcbiIsImltcG9ydCBIVFRQRXJyb3IgZnJvbSBcIi4vLi4vSFRUUEVycm9yXCI7XG5cbmNvbnN0IG5hbWU6c3RyaW5nID0gXCJSZXF1ZXN0VVJJVG9vTG9uZ0Vycm9yXCI7XG5jb25zdCBzdGF0dXNDb2RlOm51bWJlciA9IDQxNDtcblxuY2xhc3MgUmVxdWVzdFVSSVRvb0xvbmdFcnJvciBleHRlbmRzIEhUVFBFcnJvciB7XG5cdHN0YXRpYyBnZXQgc3RhdHVzQ29kZSgpOm51bWJlciB7IHJldHVybiBzdGF0dXNDb2RlOyB9XG5cblx0Z2V0IG5hbWUoKTpzdHJpbmcgeyByZXR1cm4gbmFtZTsgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSZXF1ZXN0VVJJVG9vTG9uZ0Vycm9yO1xuIiwiaW1wb3J0IEhUVFBFcnJvciBmcm9tIFwiLi8uLi9IVFRQRXJyb3JcIjtcblxuY29uc3QgbmFtZTpzdHJpbmcgPSBcIlRvb01hbnlSZXF1ZXN0c0Vycm9yXCI7XG5jb25zdCBzdGF0dXNDb2RlOm51bWJlciA9IDQyOTtcblxuY2xhc3MgVG9vTWFueVJlcXVlc3RzRXJyb3IgZXh0ZW5kcyBIVFRQRXJyb3Ige1xuXHRzdGF0aWMgZ2V0IHN0YXR1c0NvZGUoKTpudW1iZXIgeyByZXR1cm4gc3RhdHVzQ29kZTsgfVxuXG5cdGdldCBuYW1lKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWU7IH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVG9vTWFueVJlcXVlc3RzRXJyb3I7XG4iLCJpbXBvcnQgSFRUUEVycm9yIGZyb20gXCIuLy4uL0hUVFBFcnJvclwiO1xuXG5jb25zdCBuYW1lOnN0cmluZyA9IFwiVW5hdXRob3JpemVkRXJyb3JcIjtcbmNvbnN0IHN0YXR1c0NvZGU6bnVtYmVyID0gNDAxO1xuXG5jbGFzcyBVbmF1dGhvcml6ZWRFcnJvciBleHRlbmRzIEhUVFBFcnJvciB7XG5cdHN0YXRpYyBnZXQgc3RhdHVzQ29kZSgpOm51bWJlciB7IHJldHVybiBzdGF0dXNDb2RlOyB9XG5cblx0Z2V0IG5hbWUoKTpzdHJpbmcgeyByZXR1cm4gbmFtZTsgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBVbmF1dGhvcml6ZWRFcnJvcjtcbiIsImltcG9ydCBIVFRQRXJyb3IgZnJvbSBcIi4vLi4vSFRUUEVycm9yXCI7XG5cbmNvbnN0IG5hbWU6c3RyaW5nID0gXCJVbnN1cHBvcnRlZE1lZGlhVHlwZUVycm9yXCI7XG5jb25zdCBzdGF0dXNDb2RlOm51bWJlciA9IDQxNTtcblxuY2xhc3MgVW5zdXBwb3J0ZWRNZWRpYVR5cGVFcnJvciBleHRlbmRzIEhUVFBFcnJvciB7XG5cdHN0YXRpYyBnZXQgc3RhdHVzQ29kZSgpOm51bWJlciB7IHJldHVybiBzdGF0dXNDb2RlOyB9XG5cblx0Z2V0IG5hbWUoKTpzdHJpbmcgeyByZXR1cm4gbmFtZTsgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBVbnN1cHBvcnRlZE1lZGlhVHlwZUVycm9yO1xuIiwiaW1wb3J0IEhUVFBFcnJvciBmcm9tIFwiLi8uLi9IVFRQRXJyb3JcIjtcblxuY29uc3QgbmFtZTpzdHJpbmcgPSBcIkJhZFJlc3BvbnNlRXJyb3JcIjtcbmNvbnN0IHN0YXR1c0NvZGU6bnVtYmVyID0gMDtcblxuY2xhc3MgQ2xhc3MgZXh0ZW5kcyBIVFRQRXJyb3Ige1xuXHRzdGF0aWMgZ2V0IHN0YXR1c0NvZGUoKTpudW1iZXIgeyByZXR1cm4gc3RhdHVzQ29kZTsgfVxuXG5cdGdldCBuYW1lKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWU7IH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xhc3M7XG4iLCJpbXBvcnQgSFRUUEVycm9yIGZyb20gXCIuLy4uL0hUVFBFcnJvclwiO1xuXG5jb25zdCBuYW1lOnN0cmluZyA9IFwiQmFkR2F0ZXdheUVycm9yXCI7XG5jb25zdCBzdGF0dXNDb2RlOm51bWJlciA9IDUwMjtcblxuY2xhc3MgQmFkR2F0ZXdheUVycm9yIGV4dGVuZHMgSFRUUEVycm9yIHtcblx0c3RhdGljIGdldCBzdGF0dXNDb2RlKCk6bnVtYmVyIHsgcmV0dXJuIHN0YXR1c0NvZGU7IH1cblxuXHRnZXQgbmFtZSgpOnN0cmluZyB7IHJldHVybiBuYW1lOyB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJhZEdhdGV3YXlFcnJvcjtcbiIsImltcG9ydCBIVFRQRXJyb3IgZnJvbSBcIi4vLi4vSFRUUEVycm9yXCI7XG5cbmNvbnN0IG5hbWU6c3RyaW5nID0gXCJHYXRld2F5VGltZW91dEVycm9yXCI7XG5jb25zdCBzdGF0dXNDb2RlOm51bWJlciA9IDUwNDtcblxuY2xhc3MgR2F0ZXdheVRpbWVvdXRFcnJvciBleHRlbmRzIEhUVFBFcnJvciB7XG5cdHN0YXRpYyBnZXQgc3RhdHVzQ29kZSgpOm51bWJlciB7IHJldHVybiBzdGF0dXNDb2RlOyB9XG5cblx0Z2V0IG5hbWUoKTpzdHJpbmcgeyByZXR1cm4gbmFtZTsgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHYXRld2F5VGltZW91dEVycm9yO1xuIiwiaW1wb3J0IEhUVFBFcnJvciBmcm9tIFwiLi8uLi9IVFRQRXJyb3JcIjtcblxuY29uc3QgbmFtZTpzdHJpbmcgPSBcIkhUVFBWZXJzaW9uTm90U3VwcG9ydGVkRXJyb3JcIjtcbmNvbnN0IHN0YXR1c0NvZGU6bnVtYmVyID0gNTA1O1xuXG5jbGFzcyBIVFRQVmVyc2lvbk5vdFN1cHBvcnRlZEVycm9yIGV4dGVuZHMgSFRUUEVycm9yIHtcblx0c3RhdGljIGdldCBzdGF0dXNDb2RlKCk6bnVtYmVyIHsgcmV0dXJuIHN0YXR1c0NvZGU7IH1cblxuXHRnZXQgbmFtZSgpOnN0cmluZyB7IHJldHVybiBuYW1lOyB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEhUVFBWZXJzaW9uTm90U3VwcG9ydGVkRXJyb3I7XG4iLCJpbXBvcnQgSFRUUEVycm9yIGZyb20gXCIuLy4uL0hUVFBFcnJvclwiO1xuXG5jb25zdCBuYW1lOnN0cmluZyA9IFwiSW50ZXJuYWxTZXJ2ZXJFcnJvckVycm9yXCI7XG5jb25zdCBzdGF0dXNDb2RlOm51bWJlciA9IDUwMDtcblxuY2xhc3MgSW50ZXJuYWxTZXJ2ZXJFcnJvckVycm9yIGV4dGVuZHMgSFRUUEVycm9yIHtcblx0c3RhdGljIGdldCBzdGF0dXNDb2RlKCk6bnVtYmVyIHsgcmV0dXJuIHN0YXR1c0NvZGU7IH1cblxuXHRnZXQgbmFtZSgpOnN0cmluZyB7IHJldHVybiBuYW1lOyB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEludGVybmFsU2VydmVyRXJyb3JFcnJvcjtcbiIsImltcG9ydCBIVFRQRXJyb3IgZnJvbSBcIi4vLi4vSFRUUEVycm9yXCI7XG5cbmNvbnN0IG5hbWU6c3RyaW5nID0gXCJOb3RJbXBsZW1lbnRlZEVycm9yXCI7XG5jb25zdCBzdGF0dXNDb2RlOm51bWJlciA9IDUwMTtcblxuY2xhc3MgTm90SW1wbGVtZW50ZWRFcnJvciBleHRlbmRzIEhUVFBFcnJvciB7XG5cdHN0YXRpYyBnZXQgc3RhdHVzQ29kZSgpOm51bWJlciB7IHJldHVybiBzdGF0dXNDb2RlOyB9XG5cblx0Z2V0IG5hbWUoKTpzdHJpbmcgeyByZXR1cm4gbmFtZTsgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBOb3RJbXBsZW1lbnRlZEVycm9yO1xuIiwiaW1wb3J0IEhUVFBFcnJvciBmcm9tIFwiLi8uLi9IVFRQRXJyb3JcIjtcblxuY29uc3QgbmFtZTpzdHJpbmcgPSBcIlNlcnZpY2VVbmF2YWlsYWJsZUVycm9yXCI7XG5jb25zdCBzdGF0dXNDb2RlOm51bWJlciA9IDUwMztcblxuY2xhc3MgU2VydmljZVVuYXZhaWxhYmxlRXJyb3IgZXh0ZW5kcyBIVFRQRXJyb3Ige1xuXHRzdGF0aWMgZ2V0IHN0YXR1c0NvZGUoKTpudW1iZXIgeyByZXR1cm4gc3RhdHVzQ29kZTsgfVxuXG5cdGdldCBuYW1lKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWU7IH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2VydmljZVVuYXZhaWxhYmxlRXJyb3I7XG4iLCJpbXBvcnQgQWJzdHJhY3RFcnJvciBmcm9tIFwiLi8uLi8uLi9FcnJvcnMvQWJzdHJhY3RFcnJvclwiO1xuaW1wb3J0ICogYXMgUG9pbnRlciBmcm9tIFwiLi8uLi8uLi9Qb2ludGVyXCI7XG5pbXBvcnQgKiBhcyBMRFAgZnJvbSBcIi4vLi4vLi4vTERQXCI7XG5pbXBvcnQgKiBhcyBSZXNvdXJjZSBmcm9tIFwiLi8uLi8uLi9SZXNvdXJjZVwiO1xuaW1wb3J0IFJlc3BvbnNlIGZyb20gXCIuLy4uL1Jlc3BvbnNlXCI7XG5cbmNsYXNzIEhUVFBFcnJvciBleHRlbmRzIEFic3RyYWN0RXJyb3IgaW1wbGVtZW50cyBMRFAuRXJyb3JSZXNwb25zZS5DbGFzcyB7XG5cdHN0YXRpYyBnZXQgc3RhdHVzQ29kZSgpOm51bWJlciB7IHJldHVybiBudWxsOyB9XG5cblx0Z2V0IG5hbWUoKTpzdHJpbmcgeyByZXR1cm4gXCJIVFRQRXJyb3JcIjsgfVxuXG5cdF9pZDpzdHJpbmc7XG5cdF9yZXNvbHZlZDpib29sZWFuO1xuXG5cdGlkOnN0cmluZztcblx0ZXJyb3JzOkxEUC5FcnJvci5DbGFzc1tdO1xuXHRyZXF1ZXN0SUQ6c3RyaW5nO1xuXHRyZXNwb25zZTpSZXNwb25zZTtcblx0c3RhdHVzQ29kZTpudW1iZXI7XG5cdHR5cGVzOnN0cmluZ1tdO1xuXG5cdGlzUmVzb2x2ZWQ6KCkgPT4gYm9vbGVhbjtcblxuXHRyZXNvbHZlOigpID0+IFByb21pc2U8WyBQb2ludGVyLkNsYXNzLCBSZXNwb25zZSBdPjtcblxuXHRhZGRUeXBlOiggdHlwZTpzdHJpbmcgKSA9PiB2b2lkO1xuXHRoYXNUeXBlOiggdHlwZTpzdHJpbmcgKSA9PiBib29sZWFuO1xuXHRyZW1vdmVUeXBlOiggdHlwZTpzdHJpbmcgKSA9PiB2b2lkO1xuXG5cdGNvbnN0cnVjdG9yKCBtZXNzYWdlOnN0cmluZywgcmVzcG9uc2U6UmVzcG9uc2UgKSB7XG5cdFx0c3VwZXIoIG1lc3NhZ2UgKTtcblxuXHRcdFJlc291cmNlLkZhY3RvcnkuY3JlYXRlRnJvbSggdGhpcyApO1xuXG5cdFx0dGhpcy5lcnJvcnMgPSBbXTtcblx0XHR0aGlzLnJlcXVlc3RJRCA9IG51bGw7XG5cdFx0dGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlO1xuXHRcdHRoaXMuc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1cztcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBIVFRQRXJyb3I7XG4iLCJpbXBvcnQgSFRUUEVycm9yIGZyb20gXCIuL0hUVFBFcnJvclwiO1xuXG5jb25zdCBuYW1lOnN0cmluZyA9IFwiVW5rbm93bkVycm9yXCI7XG5cbmNsYXNzIFVua25vd25FcnJvciBleHRlbmRzIEhUVFBFcnJvciB7XG5cdGdldCBuYW1lKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWU7IH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVW5rbm93bkVycm9yO1xuIiwiaW1wb3J0IEhUVFBFcnJvciBmcm9tIFwiLi9FcnJvcnMvSFRUUEVycm9yXCI7XG5cbmltcG9ydCBCYWRSZXF1ZXN0RXJyb3IgZnJvbSBcIi4vRXJyb3JzL2NsaWVudC9CYWRSZXF1ZXN0RXJyb3JcIjtcbmltcG9ydCBDb25mbGljdEVycm9yIGZyb20gXCIuL0Vycm9ycy9jbGllbnQvQ29uZmxpY3RFcnJvclwiO1xuaW1wb3J0IEZvcmJpZGRlbkVycm9yIGZyb20gXCIuL0Vycm9ycy9jbGllbnQvRm9yYmlkZGVuRXJyb3JcIjtcbmltcG9ydCBNZXRob2ROb3RBbGxvd2VkRXJyb3IgZnJvbSBcIi4vRXJyb3JzL2NsaWVudC9NZXRob2ROb3RBbGxvd2VkRXJyb3JcIjtcbmltcG9ydCBOb3RBY2NlcHRhYmxlRXJyb3IgZnJvbSBcIi4vRXJyb3JzL2NsaWVudC9Ob3RBY2NlcHRhYmxlRXJyb3JcIjtcbmltcG9ydCBOb3RGb3VuZEVycm9yIGZyb20gXCIuL0Vycm9ycy9jbGllbnQvTm90Rm91bmRFcnJvclwiO1xuaW1wb3J0IFByZWNvbmRpdGlvbkZhaWxlZEVycm9yIGZyb20gXCIuL0Vycm9ycy9jbGllbnQvUHJlY29uZGl0aW9uRmFpbGVkRXJyb3JcIjtcbmltcG9ydCBQcmVjb25kaXRpb25SZXF1aXJlZEVycm9yIGZyb20gXCIuL0Vycm9ycy9jbGllbnQvUHJlY29uZGl0aW9uUmVxdWlyZWRFcnJvclwiO1xuaW1wb3J0IFJlcXVlc3RFbnRpdHlUb29MYXJnZUVycm9yIGZyb20gXCIuL0Vycm9ycy9jbGllbnQvUmVxdWVzdEVudGl0eVRvb0xhcmdlRXJyb3JcIjtcbmltcG9ydCBSZXF1ZXN0SGVhZGVyRmllbGRzVG9vTGFyZ2VFcnJvciBmcm9tIFwiLi9FcnJvcnMvY2xpZW50L1JlcXVlc3RIZWFkZXJGaWVsZHNUb29MYXJnZUVycm9yXCI7XG5pbXBvcnQgUmVxdWVzdFVSSVRvb0xvbmdFcnJvciBmcm9tIFwiLi9FcnJvcnMvY2xpZW50L1JlcXVlc3RVUklUb29Mb25nRXJyb3JcIjtcbmltcG9ydCBUb29NYW55UmVxdWVzdHNFcnJvciBmcm9tIFwiLi9FcnJvcnMvY2xpZW50L1Rvb01hbnlSZXF1ZXN0c0Vycm9yXCI7XG5pbXBvcnQgVW5hdXRob3JpemVkRXJyb3IgZnJvbSBcIi4vRXJyb3JzL2NsaWVudC9VbmF1dGhvcml6ZWRFcnJvclwiO1xuaW1wb3J0IFVuc3VwcG9ydGVkTWVkaWFUeXBlRXJyb3IgZnJvbSBcIi4vRXJyb3JzL2NsaWVudC9VbnN1cHBvcnRlZE1lZGlhVHlwZUVycm9yXCI7XG5cbmltcG9ydCBCYWRSZXNwb25zZUVycm9yIGZyb20gXCIuL0Vycm9ycy9zZXJ2ZXIvQmFkUmVzcG9uc2VFcnJvclwiO1xuaW1wb3J0IEJhZEdhdGV3YXlFcnJvciBmcm9tIFwiLi9FcnJvcnMvc2VydmVyL0JhZEdhdGV3YXlFcnJvclwiO1xuaW1wb3J0IEdhdGV3YXlUaW1lb3V0RXJyb3IgZnJvbSBcIi4vRXJyb3JzL3NlcnZlci9HYXRld2F5VGltZW91dEVycm9yXCI7XG5pbXBvcnQgSFRUUFZlcnNpb25Ob3RTdXBwb3J0ZWRFcnJvciBmcm9tIFwiLi9FcnJvcnMvc2VydmVyL0hUVFBWZXJzaW9uTm90U3VwcG9ydGVkRXJyb3JcIjtcbmltcG9ydCBJbnRlcm5hbFNlcnZlckVycm9yRXJyb3IgZnJvbSBcIi4vRXJyb3JzL3NlcnZlci9JbnRlcm5hbFNlcnZlckVycm9yRXJyb3JcIjtcbmltcG9ydCBOb3RJbXBsZW1lbnRlZEVycm9yIGZyb20gXCIuL0Vycm9ycy9zZXJ2ZXIvTm90SW1wbGVtZW50ZWRFcnJvclwiO1xuaW1wb3J0IFNlcnZpY2VVbmF2YWlsYWJsZUVycm9yIGZyb20gXCIuL0Vycm9ycy9zZXJ2ZXIvU2VydmljZVVuYXZhaWxhYmxlRXJyb3JcIjtcblxuaW1wb3J0IFVua25vd25FcnJvciBmcm9tIFwiLi9FcnJvcnMvVW5rbm93bkVycm9yXCI7XG5cblxubGV0IGNsaWVudDpBcnJheTx0eXBlb2YgSFRUUEVycm9yPiA9IFtdO1xuY2xpZW50LnB1c2goIEJhZFJlcXVlc3RFcnJvciApO1xuY2xpZW50LnB1c2goIENvbmZsaWN0RXJyb3IgKTtcbmNsaWVudC5wdXNoKCBGb3JiaWRkZW5FcnJvciApO1xuY2xpZW50LnB1c2goIE1ldGhvZE5vdEFsbG93ZWRFcnJvciApO1xuY2xpZW50LnB1c2goIE5vdEFjY2VwdGFibGVFcnJvciApO1xuY2xpZW50LnB1c2goIE5vdEZvdW5kRXJyb3IgKTtcbmNsaWVudC5wdXNoKCBQcmVjb25kaXRpb25GYWlsZWRFcnJvciApO1xuY2xpZW50LnB1c2goIFByZWNvbmRpdGlvblJlcXVpcmVkRXJyb3IgKTtcbmNsaWVudC5wdXNoKCBSZXF1ZXN0RW50aXR5VG9vTGFyZ2VFcnJvciApO1xuY2xpZW50LnB1c2goIFJlcXVlc3RIZWFkZXJGaWVsZHNUb29MYXJnZUVycm9yICk7XG5jbGllbnQucHVzaCggUmVxdWVzdFVSSVRvb0xvbmdFcnJvciApO1xuY2xpZW50LnB1c2goIFRvb01hbnlSZXF1ZXN0c0Vycm9yICk7XG5jbGllbnQucHVzaCggVW5hdXRob3JpemVkRXJyb3IgKTtcbmNsaWVudC5wdXNoKCBVbnN1cHBvcnRlZE1lZGlhVHlwZUVycm9yICk7XG5cbmxldCBzZXJ2ZXI6QXJyYXk8dHlwZW9mIEhUVFBFcnJvcj4gPSBbXTtcbnNlcnZlci5wdXNoKCBCYWRSZXNwb25zZUVycm9yICk7XG5zZXJ2ZXIucHVzaCggQmFkR2F0ZXdheUVycm9yICk7XG5zZXJ2ZXIucHVzaCggR2F0ZXdheVRpbWVvdXRFcnJvciApO1xuc2VydmVyLnB1c2goIEhUVFBWZXJzaW9uTm90U3VwcG9ydGVkRXJyb3IgKTtcbnNlcnZlci5wdXNoKCBJbnRlcm5hbFNlcnZlckVycm9yRXJyb3IgKTtcbnNlcnZlci5wdXNoKCBOb3RJbXBsZW1lbnRlZEVycm9yICk7XG5zZXJ2ZXIucHVzaCggU2VydmljZVVuYXZhaWxhYmxlRXJyb3IgKTtcblxubGV0IHN0YXR1c0NvZGVNYXA6TWFwPG51bWJlciwgdHlwZW9mIEhUVFBFcnJvcj4gPSBuZXcgTWFwPG51bWJlciwgdHlwZW9mIEhUVFBFcnJvcj4oKTtcbmZvciggbGV0IGk6bnVtYmVyID0gMCwgbGVuZ3RoOm51bWJlciA9IGNsaWVudC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKysgKSB7XG5cdHN0YXR1c0NvZGVNYXAuc2V0KCBjbGllbnRbIGkgXS5zdGF0dXNDb2RlLCBjbGllbnRbIGkgXSApO1xufVxuZm9yKCBsZXQgaTpudW1iZXIgPSAwLCBsZW5ndGg6bnVtYmVyID0gc2VydmVyLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArKyApIHtcblx0c3RhdHVzQ29kZU1hcC5zZXQoIHNlcnZlclsgaSBdLnN0YXR1c0NvZGUsIHNlcnZlclsgaSBdICk7XG59XG5cbmV4cG9ydCB7XG5cdEhUVFBFcnJvciBhcyBFcnJvcixcblxuXHRCYWRSZXF1ZXN0RXJyb3IsXG5cdENvbmZsaWN0RXJyb3IsXG5cdEZvcmJpZGRlbkVycm9yLFxuXHRNZXRob2ROb3RBbGxvd2VkRXJyb3IsXG5cdE5vdEFjY2VwdGFibGVFcnJvcixcblx0Tm90Rm91bmRFcnJvcixcblx0UHJlY29uZGl0aW9uRmFpbGVkRXJyb3IsXG5cdFByZWNvbmRpdGlvblJlcXVpcmVkRXJyb3IsXG5cdFJlcXVlc3RFbnRpdHlUb29MYXJnZUVycm9yLFxuXHRSZXF1ZXN0SGVhZGVyRmllbGRzVG9vTGFyZ2VFcnJvcixcblx0UmVxdWVzdFVSSVRvb0xvbmdFcnJvcixcblx0VG9vTWFueVJlcXVlc3RzRXJyb3IsXG5cdFVuYXV0aG9yaXplZEVycm9yLFxuXHRVbnN1cHBvcnRlZE1lZGlhVHlwZUVycm9yLFxuXG5cdEJhZFJlc3BvbnNlRXJyb3IsXG5cdEJhZEdhdGV3YXlFcnJvcixcblx0R2F0ZXdheVRpbWVvdXRFcnJvcixcblx0SFRUUFZlcnNpb25Ob3RTdXBwb3J0ZWRFcnJvcixcblx0SW50ZXJuYWxTZXJ2ZXJFcnJvckVycm9yLFxuXHROb3RJbXBsZW1lbnRlZEVycm9yLFxuXHRTZXJ2aWNlVW5hdmFpbGFibGVFcnJvcixcblxuXHRVbmtub3duRXJyb3IsXG5cblx0Y2xpZW50LFxuXHRzZXJ2ZXIsXG5cdHN0YXR1c0NvZGVNYXBcbn07XG4iLCJlbnVtIE1ldGhvZCB7XG5cdE9QVElPTlMsXG5cdEhFQUQsXG5cdEdFVCxcblx0UE9TVCxcblx0UFVULFxuXHRQQVRDSCxcblx0REVMRVRFXG59XG5cbmV4cG9ydCBkZWZhdWx0IE1ldGhvZDtcbiIsImltcG9ydCBKU09OUGFyc2VyIGZyb20gXCIuLy4uL0hUVFAvSlNPTlBhcnNlclwiO1xuaW1wb3J0IFBhcnNlciBmcm9tIFwiLi8uLi9IVFRQL1BhcnNlclwiO1xuaW1wb3J0IFByb2Nlc3NvciBmcm9tIFwiLi9Qcm9jZXNzb3JcIjtcblxuZXhwb3J0IGNsYXNzIENsYXNzIGltcGxlbWVudHMgUGFyc2VyPGFueT4ge1xuXHRwYXJzZSggaW5wdXQ6c3RyaW5nICk6UHJvbWlzZTxhbnk+IHtcblx0XHRsZXQganNvblBhcnNlcjpKU09OUGFyc2VyID0gbmV3IEpTT05QYXJzZXIoKTtcblx0XHRyZXR1cm4ganNvblBhcnNlci5wYXJzZSggaW5wdXQgKS50aGVuKCAoIHBhcnNlZE9iamVjdDpPYmplY3QgKSA9PiB7XG5cdFx0XHRyZXR1cm4gUHJvY2Vzc29yLmV4cGFuZCggcGFyc2VkT2JqZWN0ICk7XG5cdFx0fSApO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0ICogYXMgTlMgZnJvbSBcIi4vTlNcIjtcbmltcG9ydCAqIGFzIE9iamVjdFNjaGVtYSBmcm9tIFwiLi9PYmplY3RTY2hlbWFcIjtcbmltcG9ydCAqIGFzIFJERiBmcm9tIFwiLi9SREZcIjtcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuL1V0aWxzXCI7XG5cbmV4cG9ydCBjb25zdCBSREZfQ0xBU1M6c3RyaW5nID0gTlMuQy5DbGFzcy5BUEk7XG5cbmV4cG9ydCBjb25zdCBTQ0hFTUE6T2JqZWN0U2NoZW1hLkNsYXNzID0ge1xuXHRcInZlcnNpb25cIjoge1xuXHRcdFwiQGlkXCI6IE5TLkMuUHJlZGljYXRlLnZlcnNpb24sXG5cdFx0XCJAdHlwZVwiOiBOUy5YU0QuRGF0YVR5cGUuc3RyaW5nLFxuXHR9LFxuXHRcImJ1aWxkRGF0ZVwiOiB7XG5cdFx0XCJAaWRcIjogTlMuQy5QcmVkaWNhdGUuYnVpbGREYXRlLFxuXHRcdFwiQHR5cGVcIjogTlMuWFNELkRhdGFUeXBlLmRhdGVUaW1lLFxuXHR9LFxufTtcblxuZXhwb3J0IGludGVyZmFjZSBDbGFzcyB7XG5cdHZlcnNpb246c3RyaW5nO1xuXHRidWlsZERhdGU6RGF0ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xhc3M7XG4iLCJpbXBvcnQgKiBhcyBMRFAgZnJvbSBcIi4vTERQXCI7XG5pbXBvcnQgKiBhcyBOUyBmcm9tIFwiLi9OU1wiO1xuaW1wb3J0ICogYXMgUG9pbnRlciBmcm9tIFwiLi9Qb2ludGVyXCI7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi9VdGlsc1wiO1xuXG5leHBvcnQgY29uc3QgUkRGX0NMQVNTOnN0cmluZyA9IE5TLkMuQ2xhc3MuQWNjZXNzUG9pbnQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xhc3Mge1xuXHRoYXNNZW1iZXJSZWxhdGlvbjpzdHJpbmcgfCBQb2ludGVyLkNsYXNzO1xuXHRpc01lbWJlck9mUmVsYXRpb24/OnN0cmluZyB8IFBvaW50ZXIuQ2xhc3M7XG5cdGluc2VydGVkQ29udGVudFJlbGF0aW9uPzogc3RyaW5nIHwgUG9pbnRlci5DbGFzcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEb2N1bWVudENsYXNzIGV4dGVuZHMgTERQLkRpcmVjdENvbnRhaW5lci5DbGFzcyB7XG5cdG1lbWJlcnNoaXBSZXNvdXJjZTpQb2ludGVyLkNsYXNzO1xuXHRoYXNNZW1iZXJSZWxhdGlvbjpQb2ludGVyLkNsYXNzO1xuXHRpbnNlcnRlZENvbnRlbnRSZWxhdGlvbj86UG9pbnRlci5DbGFzcztcbn1cblxuZXhwb3J0IGNsYXNzIEZhY3Rvcnkge1xuXHRzdGF0aWMgaXMoIG9iamVjdDpPYmplY3QgKTpib29sZWFuIHtcblx0XHRyZXR1cm4gTERQLkRpcmVjdENvbnRhaW5lci5GYWN0b3J5LmlzKCBvYmplY3QgKTtcblx0fVxuXG5cdHN0YXRpYyBjcmVhdGUoIG1lbWJlcnNoaXBSZXNvdXJjZTpQb2ludGVyLkNsYXNzLCBoYXNNZW1iZXJSZWxhdGlvbjpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBpc01lbWJlck9mUmVsYXRpb24/OnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MgKTpEb2N1bWVudENsYXNzIHtcblx0XHRyZXR1cm4gRmFjdG9yeS5jcmVhdGVGcm9tKCB7fSwgbWVtYmVyc2hpcFJlc291cmNlLCBoYXNNZW1iZXJSZWxhdGlvbiwgaXNNZW1iZXJPZlJlbGF0aW9uICk7XG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlRnJvbTxUIGV4dGVuZHMgT2JqZWN0Piggb2JqZWN0OlQsIG1lbWJlcnNoaXBSZXNvdXJjZTpQb2ludGVyLkNsYXNzLCBoYXNNZW1iZXJSZWxhdGlvbjpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBpc01lbWJlck9mUmVsYXRpb24/OnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MgKTpUICYgRG9jdW1lbnRDbGFzcyB7XG5cdFx0cmV0dXJuIDxhbnk+IExEUC5EaXJlY3RDb250YWluZXIuRmFjdG9yeS5jcmVhdGVGcm9tPFQ+KCBvYmplY3QsIG1lbWJlcnNoaXBSZXNvdXJjZSwgaGFzTWVtYmVyUmVsYXRpb24sIGlzTWVtYmVyT2ZSZWxhdGlvbiApO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0ICogYXMgT2JqZWN0U2NoZW1hIGZyb20gXCIuLy4uL09iamVjdFNjaGVtYVwiO1xuaW1wb3J0ICogYXMgTlMgZnJvbSBcIi4vLi4vTlNcIjtcbmltcG9ydCAqIGFzIFJlc291cmNlIGZyb20gXCIuLy4uL1Jlc291cmNlXCI7XG5pbXBvcnQgKiBhcyBSb2xlIGZyb20gXCIuLy4uL0F1dGgvUm9sZVwiO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vLi4vVXRpbHNcIjtcblxuZXhwb3J0IGNvbnN0IFJERl9DTEFTUzpzdHJpbmcgPSBOUy5DUy5DbGFzcy5BcHBSb2xlO1xuXG5leHBvcnQgY29uc3QgU0NIRU1BOk9iamVjdFNjaGVtYS5DbGFzcyA9IHtcblx0XCJwYXJlbnRSb2xlXCI6IHtcblx0XHRcIkBpZFwiOiBOUy5DUy5QcmVkaWNhdGUucGFyZW50Um9sZSxcblx0XHRcIkB0eXBlXCI6IFwiQGlkXCIsXG5cdH0sXG5cdFwiY2hpbGRSb2xlc1wiOiB7XG5cdFx0XCJAaWRcIjogTlMuQ1MuUHJlZGljYXRlLmNoaWxkUm9sZSxcblx0XHRcIkB0eXBlXCI6IFwiQGlkXCIsXG5cdFx0XCJAY29udGFpbmVyXCI6IFwiQHNldFwiLFxuXHR9LFxufTtcblxuZXhwb3J0IGludGVyZmFjZSBDbGFzcyBleHRlbmRzIFJvbGUuQ2xhc3Mge1xuXG59XG5cbmV4cG9ydCBjbGFzcyBGYWN0b3J5IHtcblxuXHRzdGF0aWMgaGFzQ2xhc3NQcm9wZXJ0aWVzKCByZXNvdXJjZTpPYmplY3QgKTpib29sZWFuIHtcblx0XHRyZXR1cm4gVXRpbHMuaXNPYmplY3QoIHJlc291cmNlICk7XG5cdH1cblxuXHRzdGF0aWMgaXMoIG9iamVjdDpPYmplY3QgKTpib29sZWFuIHtcblx0XHRyZXR1cm4gUm9sZS5GYWN0b3J5LmlzKCBvYmplY3QgKVxuXHRcdFx0JiYgKG9iamVjdCBhcyBSb2xlLkNsYXNzKS5oYXNUeXBlKCBSREZfQ0xBU1MgKVxuXHRcdFx0O1xuXHR9XG5cblx0c3RhdGljIGNyZWF0ZSggbmFtZTpzdHJpbmcgKTpDbGFzcyB7XG5cdFx0cmV0dXJuIEZhY3RvcnkuY3JlYXRlRnJvbTxPYmplY3Q+KCB7fSwgbmFtZSApO1xuXHR9XG5cblx0c3RhdGljIGNyZWF0ZUZyb208VCBleHRlbmRzIE9iamVjdD4oIG9iamVjdDpULCBuYW1lOnN0cmluZyApOlQgJiBDbGFzcyB7XG5cdFx0bGV0IHJvbGU6VCAmIENsYXNzID0gPFQgJiBDbGFzcz4gUm9sZS5GYWN0b3J5LmNyZWF0ZUZyb20oIG9iamVjdCwgbmFtZSApO1xuXHRcdHJvbGUudHlwZXMucHVzaCggTlMuQ1MuQ2xhc3MuQXBwUm9sZSApO1xuXG5cdFx0cmV0dXJuIHJvbGU7XG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCAqIGFzIEFwcFJvbGUgZnJvbSBcIi4vUm9sZVwiO1xuaW1wb3J0ICogYXMgUGVyc2lzdGVkRG9jdW1lbnQgZnJvbSBcIi4vLi4vUGVyc2lzdGVkRG9jdW1lbnRcIjtcbmltcG9ydCAqIGFzIFBlcnNpc3RlZFJvbGUgZnJvbSBcIi4vLi4vQXV0aC9QZXJzaXN0ZWRSb2xlXCI7XG5pbXBvcnQgKiBhcyBQb2ludGVyIGZyb20gXCIuLy4uL1BvaW50ZXJcIjtcbmltcG9ydCAqIGFzIFJvbGVzIGZyb20gXCIuL1JvbGVzXCI7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi8uLi9VdGlsc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIENsYXNzIGV4dGVuZHMgUGVyc2lzdGVkUm9sZS5DbGFzcyB7XG5cdF9yb2xlczpSb2xlcy5DbGFzcztcblxuXHRwYXJlbnRSb2xlPzpQb2ludGVyLkNsYXNzO1xuXHRjaGlsZFJvbGVzPzpQb2ludGVyLkNsYXNzW107XG59XG5cbmV4cG9ydCBjbGFzcyBGYWN0b3J5IHtcblx0c3RhdGljIGhhc0NsYXNzUHJvcGVydGllcyggb2JqZWN0Ok9iamVjdCApOmJvb2xlYW4ge1xuXHRcdHJldHVybiBVdGlscy5oYXNQcm9wZXJ0eURlZmluZWQoIG9iamVjdCwgXCJfcm9sZXNcIiApXG5cdFx0XHQ7XG5cdH1cblxuXHRzdGF0aWMgaXMoIG9iamVjdDpPYmplY3QgKTpib29sZWFuIHtcblx0XHRyZXR1cm4gRmFjdG9yeS5oYXNDbGFzc1Byb3BlcnRpZXMoIG9iamVjdCApXG5cdFx0XHQmJiBBcHBSb2xlLkZhY3RvcnkuaXMoIG9iamVjdCApXG5cdFx0XHQmJiBQZXJzaXN0ZWRSb2xlLkZhY3RvcnkuaXMoIG9iamVjdCApXG5cdFx0XHQ7XG5cdH1cblxuXHRzdGF0aWMgZGVjb3JhdGU8VCBleHRlbmRzIFBlcnNpc3RlZERvY3VtZW50LkNsYXNzPiggb2JqZWN0OlQsIHJvbGVzOlJvbGVzLkNsYXNzICk6VCAmIENsYXNzIHtcblx0XHRsZXQgcm9sZTpUICYgQ2xhc3MgPSA8YW55PiBvYmplY3Q7XG5cdFx0aWYoIEZhY3RvcnkuaGFzQ2xhc3NQcm9wZXJ0aWVzKCByb2xlICkgKSByZXR1cm4gcm9sZTtcblxuXHRcdFBlcnNpc3RlZFJvbGUuRmFjdG9yeS5kZWNvcmF0ZSggcm9sZSwgcm9sZXMgKTtcblxuXHRcdHJldHVybiByb2xlO1xuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xhc3M7XG4iLCJpbXBvcnQgKiBhcyBBZ2VudCBmcm9tIFwiLi9BZ2VudFwiO1xuaW1wb3J0IENvbnRleHQgZnJvbSBcIi4vLi4vQ29udGV4dFwiO1xuaW1wb3J0ICogYXMgRXJyb3JzIGZyb20gXCIuLy4uL0Vycm9yc1wiO1xuaW1wb3J0ICogYXMgSFRUUCBmcm9tIFwiLi8uLi9IVFRQXCI7XG5pbXBvcnQgKiBhcyBQZXJzaXN0ZWRBZ2VudCBmcm9tIFwiLi9QZXJzaXN0ZWRBZ2VudFwiO1xuaW1wb3J0ICogYXMgUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQgZnJvbSBcIi4vLi4vUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnRcIjtcbmltcG9ydCAqIGFzIFVSSSBmcm9tIFwiLi8uLi9SREYvVVJJXCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDbGFzcyB7XG5cdHByaXZhdGUgY29udGV4dDpDb250ZXh0O1xuXG5cdGNvbnN0cnVjdG9yKCBjb250ZXh0OkNvbnRleHQgKSB7XG5cdFx0dGhpcy5jb250ZXh0ID0gY29udGV4dDtcblx0fVxuXG5cdHJlZ2lzdGVyKCBhZ2VudERvY3VtZW50OkFnZW50LkNsYXNzLCBzbHVnOnN0cmluZyA9IG51bGwgKTpQcm9taXNlPFsgUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4ge1xuXHRcdHJldHVybiB0aGlzLnJlc29sdmVVUkkoIFwiXCIgKS50aGVuKCAoIGNvbnRhaW5lclVSSTpzdHJpbmcgKSA9PiB7XG5cdFx0XHRpZiggISBBZ2VudC5GYWN0b3J5LmlzKCBhZ2VudERvY3VtZW50ICkgKSB0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIlRoZSBEb2N1bWVudCBpcyBub3QgYSBjczpBZ2VudCBvYmplY3QuXCIgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXMuY29udGV4dC5kb2N1bWVudHMuY3JlYXRlQ2hpbGQoIGNvbnRhaW5lclVSSSwgYWdlbnREb2N1bWVudCwgc2x1ZyApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGdldCggYWdlbnRVUkk6c3RyaW5nLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgUGVyc2lzdGVkQWdlbnQuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4ge1xuXHRcdHJldHVybiB0aGlzLnJlc29sdmVVUkkoIGFnZW50VVJJICkudGhlbiggKCB1cmk6c3RyaW5nICkgPT4ge1xuXHRcdFx0cmV0dXJuIHRoaXMuY29udGV4dC5kb2N1bWVudHMuZ2V0KCB1cmksIHJlcXVlc3RPcHRpb25zICk7XG5cdFx0fSApO1xuXHR9XG5cblx0ZW5hYmxlKCBhZ2VudFVSSTpzdHJpbmcsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBQZXJzaXN0ZWRBZ2VudC5DbGFzcywgWyBIVFRQLlJlc3BvbnNlLkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0gXT4ge1xuXHRcdHJldHVybiB0aGlzLmNoYW5nZUVuYWJsZWRTdGF0dXMoIGFnZW50VVJJLCB0cnVlLCByZXF1ZXN0T3B0aW9ucyApO1xuXHR9XG5cblx0ZGlzYWJsZSggYWdlbnRVUkk6c3RyaW5nLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgUGVyc2lzdGVkQWdlbnQuQ2xhc3MsIFsgSFRUUC5SZXNwb25zZS5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdIF0+IHtcblx0XHRyZXR1cm4gdGhpcy5jaGFuZ2VFbmFibGVkU3RhdHVzKCBhZ2VudFVSSSwgZmFsc2UsIHJlcXVlc3RPcHRpb25zICk7XG5cdH1cblxuXHRkZWxldGUoIGFnZW50VVJJOnN0cmluZywgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxIVFRQLlJlc3BvbnNlLkNsYXNzPiB7XG5cdFx0cmV0dXJuIHRoaXMucmVzb2x2ZVVSSSggYWdlbnRVUkkgKS50aGVuKCB1cmkgPT4ge1xuXHRcdFx0cmV0dXJuIHRoaXMuY29udGV4dC5kb2N1bWVudHMuZGVsZXRlKCB1cmksIHJlcXVlc3RPcHRpb25zICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cHJpdmF0ZSBjaGFuZ2VFbmFibGVkU3RhdHVzKCBhZ2VudFVSSTpzdHJpbmcsIHZhbHVlOmJvb2xlYW4sIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBQZXJzaXN0ZWRBZ2VudC5DbGFzcywgWyBIVFRQLlJlc3BvbnNlLkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0gXT4ge1xuXHRcdGxldCBnZXRSZXNwb25zZTpIVFRQLlJlc3BvbnNlLkNsYXNzO1xuXHRcdHJldHVybiB0aGlzLmdldCggYWdlbnRVUkksIHJlcXVlc3RPcHRpb25zICkudGhlbiggKCBbIGFnZW50LCByZXNwb25zZSBdOlsgUGVyc2lzdGVkQWdlbnQuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXSApID0+IHtcblx0XHRcdGdldFJlc3BvbnNlID0gcmVzcG9uc2U7XG5cdFx0XHRhZ2VudC5lbmFibGVkID0gdmFsdWU7XG5cdFx0XHRyZXR1cm4gYWdlbnQuc2F2ZSgpO1xuXHRcdH0gKS50aGVuKCAoIFsgYWdlbnQsIHJlc3BvbnNlIF06WyBQZXJzaXN0ZWRBZ2VudC5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdICkgPT4ge1xuXHRcdFx0cmV0dXJuIFsgYWdlbnQsIFsgZ2V0UmVzcG9uc2UsIHJlc3BvbnNlIF0gXTtcblx0XHR9ICk7XG5cdH1cblxuXHRwcml2YXRlIHJlc29sdmVVUkkoIGFnZW50VVJJOnN0cmluZyApOlByb21pc2U8c3RyaW5nPiB7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlPHN0cmluZz4oICggcmVzb2x2ZTooIHVyaTpzdHJpbmcgKSA9PiB2b2lkICkgPT4ge1xuXHRcdFx0bGV0IGNvbnRhaW5lclVSSTpzdHJpbmcgPSB0aGlzLmNvbnRleHQucmVzb2x2ZSggdGhpcy5nZXRDb250YWluZXJVUkkoKSApO1xuXHRcdFx0bGV0IHVyaTpzdHJpbmcgPSBVUkkuVXRpbC5yZXNvbHZlKCBjb250YWluZXJVUkksIGFnZW50VVJJICk7XG5cblx0XHRcdGlmKCAhIFVSSS5VdGlsLmlzQmFzZU9mKCBjb250YWluZXJVUkksIHVyaSApICkgdGhyb3cgbmV3IEVycm9ycy5JbGxlZ2FsQXJndW1lbnRFcnJvciggXCJUaGUgVVJJIHByb3ZpZGVkIGlzIG5vdCBhIHZhbGlkIGFnZW50IG9mIHRoZSBjdXJyZW50IGNvbnRleHQuXCIgKTtcblxuXHRcdFx0cmVzb2x2ZSggdXJpICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cHJpdmF0ZSBnZXRDb250YWluZXJVUkkoKTpzdHJpbmcge1xuXHRcdGlmKCAhIHRoaXMuY29udGV4dC5oYXNTZXR0aW5nKCBcInBsYXRmb3JtLmFnZW50cy5jb250YWluZXJcIiApICkgdGhyb3cgbmV3IEVycm9ycy5JbGxlZ2FsU3RhdGVFcnJvciggXCJUaGUgYWdlbnRzIGNvbnRhaW5lciBVUkkgaGFzbid0IGJlZW4gc2V0LlwiICk7XG5cdFx0cmV0dXJuIHRoaXMuY29udGV4dC5nZXRTZXR0aW5nKCBcInBsYXRmb3JtLmFnZW50cy5jb250YWluZXJcIiApO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0ICogYXMgRnJhZ21lbnQgZnJvbSBcIi4vLi4vRnJhZ21lbnRcIjtcbmltcG9ydCAqIGFzIE5TIGZyb20gXCIuLy4uL05TXCI7XG5pbXBvcnQgKiBhcyBPYmplY3RTY2hlbWEgZnJvbSBcIi4vLi4vT2JqZWN0U2NoZW1hXCI7XG5pbXBvcnQgKiBhcyBQb2ludGVyIGZyb20gXCIuLy4uL1BvaW50ZXJcIjtcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuLy4uL1V0aWxzXCI7XG5cbmV4cG9ydCBjb25zdCBSREZfQ0xBU1M6c3RyaW5nID0gTlMuQ1MuQ2xhc3MuQWNjZXNzQ29udHJvbEVudHJ5O1xuXG5leHBvcnQgY29uc3QgU0NIRU1BOk9iamVjdFNjaGVtYS5DbGFzcyA9IHtcblx0XCJncmFudGluZ1wiOiB7XG5cdFx0XCJAaWRcIjogTlMuQ1MuUHJlZGljYXRlLmdyYW50aW5nLFxuXHRcdFwiQHR5cGVcIjogTlMuWFNELkRhdGFUeXBlLmJvb2xlYW4sXG5cdH0sXG5cdFwicGVybWlzc2lvbnNcIjoge1xuXHRcdFwiQGlkXCI6IE5TLkNTLlByZWRpY2F0ZS5wZXJtaXNzaW9uLFxuXHRcdFwiQHR5cGVcIjogXCJAaWRcIixcblx0XHRcIkBjb250YWluZXJcIjogXCJAc2V0XCIsXG5cdH0sXG5cdFwic3ViamVjdHNcIjoge1xuXHRcdFwiQGlkXCI6IE5TLkNTLlByZWRpY2F0ZS5zdWJqZWN0LFxuXHRcdFwiQHR5cGVcIjogXCJAaWRcIixcblx0XHRcIkBjb250YWluZXJcIjogXCJAc2V0XCIsXG5cdH0sXG5cdFwic3ViamVjdHNDbGFzc1wiOiB7XG5cdFx0XCJAaWRcIjogTlMuQ1MuUHJlZGljYXRlLnN1YmplY3RDbGFzcyxcblx0XHRcIkB0eXBlXCI6IFwiQGlkXCIsXG5cdH0sXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIENsYXNzIGV4dGVuZHMgRnJhZ21lbnQuQ2xhc3Mge1xuXHRncmFudGluZzpib29sZWFuO1xuXHRwZXJtaXNzaW9uczpQb2ludGVyLkNsYXNzW107XG5cdHN1YmplY3RzOlBvaW50ZXIuQ2xhc3NbXTtcblx0c3ViamVjdHNDbGFzczpQb2ludGVyLkNsYXNzO1xufVxuXG5leHBvcnQgY2xhc3MgRmFjdG9yeSB7XG5cblx0c3RhdGljIGhhc0NsYXNzUHJvcGVydGllcyggb2JqZWN0Ok9iamVjdCApOmJvb2xlYW4ge1xuXHRcdHJldHVybiBVdGlscy5oYXNQcm9wZXJ0eURlZmluZWQoIG9iamVjdCwgXCJncmFudGluZ1wiIClcblx0XHRcdCYmIFV0aWxzLmhhc1Byb3BlcnR5RGVmaW5lZCggb2JqZWN0LCBcInBlcm1pc3Npb25zXCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzUHJvcGVydHlEZWZpbmVkKCBvYmplY3QsIFwic3ViamVjdHNcIiApXG5cdFx0XHQmJiBVdGlscy5oYXNQcm9wZXJ0eURlZmluZWQoIG9iamVjdCwgXCJzdWJqZWN0c0NsYXNzXCIgKVxuXHRcdFx0O1xuXHR9XG5cblx0c3RhdGljIGNyZWF0ZUZyb208VCBleHRlbmRzIE9iamVjdD4oIG9iamVjdDpULCBncmFudGluZzpib29sZWFuLCBzdWJqZWN0czpQb2ludGVyLkNsYXNzW10sIHN1YmplY3RDbGFzczpQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uczpQb2ludGVyLkNsYXNzW10gKTpUICYgQ2xhc3Mge1xuXHRcdGxldCBhY2U6VCAmIENsYXNzID0gPGFueT4gb2JqZWN0O1xuXG5cdFx0aWYoICEgYWNlLnR5cGVzICkgYWNlLnR5cGVzID0gW107XG5cdFx0YWNlLnR5cGVzLnB1c2goIFJERl9DTEFTUyApO1xuXG5cdFx0YWNlLmdyYW50aW5nID0gZ3JhbnRpbmc7XG5cdFx0YWNlLnN1YmplY3RzID0gc3ViamVjdHM7XG5cdFx0YWNlLnN1YmplY3RzQ2xhc3MgPSBzdWJqZWN0Q2xhc3M7XG5cdFx0YWNlLnBlcm1pc3Npb25zID0gcGVybWlzc2lvbnM7XG5cblx0XHRyZXR1cm4gYWNlO1xuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xhc3M7XG4iLCJpbXBvcnQgKiBhcyBBQ0UgZnJvbSBcIi4vQUNFXCI7XG5pbXBvcnQgKiBhcyBOUyBmcm9tIFwiLi8uLi9OU1wiO1xuaW1wb3J0ICogYXMgT2JqZWN0U2NoZW1hIGZyb20gXCIuLy4uL09iamVjdFNjaGVtYVwiO1xuaW1wb3J0ICogYXMgRG9jdW1lbnQgZnJvbSBcIi4vLi4vRG9jdW1lbnRcIjtcbmltcG9ydCAqIGFzIFBvaW50ZXIgZnJvbSBcIi4vLi4vUG9pbnRlclwiO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vLi4vVXRpbHNcIjtcblxuZXhwb3J0IGNvbnN0IFJERl9DTEFTUzpzdHJpbmcgPSBOUy5DUy5DbGFzcy5BY2Nlc3NDb250cm9sTGlzdDtcblxuZXhwb3J0IGNvbnN0IFNDSEVNQTpPYmplY3RTY2hlbWEuQ2xhc3MgPSB7XG5cdFwiZW50cmllc1wiOiB7XG5cdFx0XCJAaWRcIjogTlMuQ1MuUHJlZGljYXRlLmFjY2Vzc0NvbnRyb2xFbnRyeSxcblx0XHRcIkB0eXBlXCI6IFwiQGlkXCIsXG5cdFx0XCJAY29udGFpbmVyXCI6IFwiQHNldFwiLFxuXHR9LFxuXHRcImFjY2Vzc1RvXCI6IHtcblx0XHRcIkBpZFwiOiBOUy5DUy5QcmVkaWNhdGUuYWNjZXNzVG8sXG5cdFx0XCJAdHlwZVwiOiBcIkBpZFwiLFxuXHR9LFxuXHRcImluaGVyaXRhYmxlRW50cmllc1wiOiB7XG5cdFx0XCJAaWRcIjogTlMuQ1MuUHJlZGljYXRlLmluaGVyaXRhYmxlRW50cnksXG5cdFx0XCJAdHlwZVwiOiBcIkBpZFwiLFxuXHRcdFwiQGNvbnRhaW5lclwiOiBcIkBzZXRcIixcblx0fSxcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xhc3MgZXh0ZW5kcyBEb2N1bWVudC5DbGFzcyB7XG5cdGFjY2Vzc1RvOlBvaW50ZXIuQ2xhc3M7XG5cdGVudHJpZXM/OkFDRS5DbGFzc1tdO1xuXHRpbmhlcml0YWJsZUVudHJpZXM/OkFDRS5DbGFzc1tdO1xuXG5cdF9wYXJzZVBvaW50ZXIoIGVsZW1lbnQ6IHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MgKTpQb2ludGVyLkNsYXNzO1xuXG5cdGdyYW50KCBzdWJqZWN0OnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHN1YmplY3RDbGFzczpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MgKTp2b2lkO1xuXHRncmFudCggc3ViamVjdDpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBzdWJqZWN0Q2xhc3M6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbnM6KHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10gKTp2b2lkO1xuXHRncmFudCggc3ViamVjdHM6KHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10sIHN1YmplY3RDbGFzczpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MgKTp2b2lkO1xuXHRncmFudCggc3ViamVjdHM6KHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10sIHN1YmplY3RDbGFzczpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uczooc3RyaW5nIHwgUG9pbnRlci5DbGFzcylbXSApOnZvaWQ7XG5cblx0ZGVueSggc3ViamVjdDpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBzdWJqZWN0Q2xhc3M6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbjpzdHJpbmcgfCBQb2ludGVyLkNsYXNzICk6dm9pZDtcblx0ZGVueSggc3ViamVjdDpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBzdWJqZWN0Q2xhc3M6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbnM6KHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10gKTp2b2lkO1xuXHRkZW55KCBzdWJqZWN0czooc3RyaW5nIHwgUG9pbnRlci5DbGFzcylbXSwgc3ViamVjdENsYXNzOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHBlcm1pc3Npb246c3RyaW5nIHwgUG9pbnRlci5DbGFzcyApOnZvaWQ7XG5cdGRlbnkoIHN1YmplY3RzOihzdHJpbmcgfCBQb2ludGVyLkNsYXNzKVtdLCBzdWJqZWN0Q2xhc3M6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbnM6KHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10gKTp2b2lkO1xuXG5cdGNvbmZpZ3VyZUNoaWxkSW5oZXJpdGFuY2UoIGdyYW50aW5nOmJvb2xlYW4sIHN1YmplY3Q6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgc3ViamVjdENsYXNzOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHBlcm1pc3Npb246c3RyaW5nIHwgUG9pbnRlci5DbGFzcyApOnZvaWQ7XG5cdGNvbmZpZ3VyZUNoaWxkSW5oZXJpdGFuY2UoIGdyYW50aW5nOmJvb2xlYW4sIHN1YmplY3Q6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgc3ViamVjdENsYXNzOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHBlcm1pc3Npb25zOihzdHJpbmcgfCBQb2ludGVyLkNsYXNzKVtdICk6dm9pZDtcblx0Y29uZmlndXJlQ2hpbGRJbmhlcml0YW5jZSggZ3JhbnRpbmc6Ym9vbGVhbiwgc3ViamVjdHM6KHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10sIHN1YmplY3RDbGFzczpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MgKTp2b2lkO1xuXHRjb25maWd1cmVDaGlsZEluaGVyaXRhbmNlKCBncmFudGluZzpib29sZWFuLCBzdWJqZWN0czooc3RyaW5nIHwgUG9pbnRlci5DbGFzcylbXSwgc3ViamVjdENsYXNzOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHBlcm1pc3Npb25zOihzdHJpbmcgfCBQb2ludGVyLkNsYXNzKVtdICk6dm9pZDtcblxuXHRncmFudHMoIHN1YmplY3Q6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbjpzdHJpbmcgfCBQb2ludGVyLkNsYXNzICk6Ym9vbGVhbjtcblx0ZGVuaWVzKCBzdWJqZWN0OnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHBlcm1pc3Npb246c3RyaW5nIHwgUG9pbnRlci5DbGFzcyApOmJvb2xlYW47XG5cdGdldENoaWxkSW5oZXJpdGFuY2UoIHN1YmplY3Q6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbnM6c3RyaW5nIHwgUG9pbnRlci5DbGFzcyApOmJvb2xlYW47XG5cblx0cmVtb3ZlKCBzdWJqZWN0OnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHBlcm1pc3Npb246c3RyaW5nIHwgUG9pbnRlci5DbGFzcyApOnZvaWQ7XG5cdHJlbW92ZSggc3ViamVjdDpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uczooc3RyaW5nIHwgUG9pbnRlci5DbGFzcylbXSApOnZvaWQ7XG5cdHJlbW92ZUNoaWxkSW5oZXJpdGFuY2UoIHN1YmplY3Q6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbjpzdHJpbmcgfCBQb2ludGVyLkNsYXNzICk6dm9pZDtcblx0cmVtb3ZlQ2hpbGRJbmhlcml0YW5jZSggc3ViamVjdDpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uczooc3RyaW5nIHwgUG9pbnRlci5DbGFzcylbXSApOnZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBGYWN0b3J5IHtcblxuXHRzdGF0aWMgaGFzQ2xhc3NQcm9wZXJ0aWVzKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIFV0aWxzLmhhc1Byb3BlcnR5RGVmaW5lZCggb2JqZWN0LCBcImFjY2Vzc1RvXCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJfcGFyc2VQb2ludGVyXCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJncmFudFwiIClcblx0XHRcdCYmIFV0aWxzLmhhc0Z1bmN0aW9uKCBvYmplY3QsIFwiZGVueVwiIClcblx0XHRcdCYmIFV0aWxzLmhhc0Z1bmN0aW9uKCBvYmplY3QsIFwiY29uZmlndXJlQ2hpbGRJbmhlcml0YW5jZVwiIClcblx0XHRcdCYmIFV0aWxzLmhhc0Z1bmN0aW9uKCBvYmplY3QsIFwiZ3JhbnRzXCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJkZW5pZXNcIiApXG5cdFx0XHQmJiBVdGlscy5oYXNGdW5jdGlvbiggb2JqZWN0LCBcImdldENoaWxkSW5oZXJpdGFuY2VcIiApXG5cdFx0XHQmJiBVdGlscy5oYXNGdW5jdGlvbiggb2JqZWN0LCBcInJlbW92ZVwiIClcblx0XHRcdCYmIFV0aWxzLmhhc0Z1bmN0aW9uKCBvYmplY3QsIFwicmVtb3ZlQ2hpbGRJbmhlcml0YW5jZVwiICk7XG5cdH1cblxuXHRzdGF0aWMgZGVjb3JhdGU8VCBleHRlbmRzIE9iamVjdD4oIG9iamVjdDpUICk6VCAmIENsYXNzIHtcblx0XHRsZXQgYWNsOlQgJiBDbGFzcyA9IDxhbnk+IG9iamVjdDtcblxuXHRcdGlmKCBGYWN0b3J5Lmhhc0NsYXNzUHJvcGVydGllcyggYWNsICkgKSByZXR1cm4gYWNsO1xuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIGFjbCwge1xuXHRcdFx0XCJfcGFyc2VQb2ludGVyXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBwYXJzZVBvaW50ZXIsXG5cdFx0XHR9LFxuXHRcdFx0XCJncmFudFwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogZ3JhbnQsXG5cdFx0XHR9LFxuXHRcdFx0XCJkZW55XCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBkZW55LFxuXHRcdFx0fSxcblx0XHRcdFwiY29uZmlndXJlQ2hpbGRJbmhlcml0YW5jZVwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogY29uZmlndXJlQ2hpbGRJbmhlcml0YW5jZSxcblx0XHRcdH0sXG5cdFx0XHRcImdyYW50c1wiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogZ3JhbnRzLFxuXHRcdFx0fSxcblx0XHRcdFwiZGVuaWVzXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBkZW5pZXMsXG5cdFx0XHR9LFxuXHRcdFx0XCJnZXRDaGlsZEluaGVyaXRhbmNlXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBnZXRDaGlsZEluaGVyaXRhbmNlLFxuXHRcdFx0fSxcblx0XHRcdFwicmVtb3ZlXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiByZW1vdmUsXG5cdFx0XHR9LFxuXHRcdFx0XCJyZW1vdmVDaGlsZEluaGVyaXRhbmNlXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiByZW1vdmVDaGlsZEluaGVyaXRhbmNlLFxuXHRcdFx0fSxcblx0XHR9ICk7XG5cblx0XHRyZXR1cm4gYWNsO1xuXHR9XG5cbn1cblxuZnVuY3Rpb24gcGFyc2VQb2ludGVyKCBlbGVtZW50OnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MgKTpQb2ludGVyLkNsYXNzIHtcblx0cmV0dXJuIFBvaW50ZXIuRmFjdG9yeS5pcyggZWxlbWVudCApID8gPFBvaW50ZXIuQ2xhc3M+IGVsZW1lbnQgOiBQb2ludGVyLkZhY3RvcnkuY3JlYXRlKCA8c3RyaW5nPiBlbGVtZW50ICk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlUG9pbnRlcnMoIGVsZW1lbnRzOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MgfCAoc3RyaW5nIHwgUG9pbnRlci5DbGFzcylbXSApOlBvaW50ZXIuQ2xhc3NbXSB7XG5cdGxldCBlbGVtZW50c0FycmF5OihzdHJpbmcgfCBQb2ludGVyLkNsYXNzKVtdID0gVXRpbHMuaXNBcnJheSggZWxlbWVudHMgKSA/IDwoc3RyaW5nIHwgUG9pbnRlci5DbGFzcylbXT4gZWxlbWVudHMgOiBbIDxzdHJpbmcgfCBQb2ludGVyLkNsYXNzPiBlbGVtZW50cyBdO1xuXHRyZXR1cm4gZWxlbWVudHNBcnJheS5tYXAoICggZWxlbWVudDpzdHJpbmcgfCBQb2ludGVyLkNsYXNzICkgPT4gKHRoaXMgYXMgQ2xhc3MpLl9wYXJzZVBvaW50ZXIoIGVsZW1lbnQgKSApO1xufVxuXG5mdW5jdGlvbiBjb25maWdBQ0UoIGdyYW50aW5nOmJvb2xlYW4sIHN1YmplY3Q6UG9pbnRlci5DbGFzcywgc3ViamVjdENsYXNzOlBvaW50ZXIuQ2xhc3MsIHBlcm1pc3Npb25zOlBvaW50ZXIuQ2xhc3NbXSwgYWNlczpBQ0UuQ2xhc3NbXSApOkFDRS5DbGFzcyB7XG5cdGxldCBzdWJqZWN0QUNFczpBQ0UuQ2xhc3NbXSA9IGFjZXMuZmlsdGVyKCBhY2UgPT4gYWNlLnN1YmplY3RzLmxlbmd0aCA9PT0gMSAmJiBhY2UuZ3JhbnRpbmcgPT09IGdyYW50aW5nICYmIFBvaW50ZXIuVXRpbC5hcmVFcXVhbCggYWNlLnN1YmplY3RzWyAwIF0sIHN1YmplY3QgKSApO1xuXG5cdGxldCBhY2U6QUNFLkNsYXNzO1xuXHRpZiggc3ViamVjdEFDRXMubGVuZ3RoID09PSAwICkge1xuXHRcdGFjZSA9IEFDRS5GYWN0b3J5LmNyZWF0ZUZyb20oICg8Q2xhc3M+IHRoaXMpLmNyZWF0ZUZyYWdtZW50KCksIGdyYW50aW5nLCBbIHN1YmplY3QgXSwgc3ViamVjdENsYXNzLCBbXSApO1xuXHRcdGFjZXMucHVzaCggYWNlICk7XG5cdH0gZWxzZSB7XG5cdFx0YWNlID0gc3ViamVjdEFDRXNbIDAgXTtcblx0fVxuXG5cdEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KCBhY2UucGVybWlzc2lvbnMsIHBlcm1pc3Npb25zICk7XG5cdHJldHVybiBhY2U7XG59XG5mdW5jdGlvbiBjb25maWdBQ0VzKCBncmFudGluZzpib29sZWFuLCBzdWJqZWN0czpzdHJpbmcgfCBQb2ludGVyLkNsYXNzIHwgKHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10sIHN1YmplY3RzQ2xhc3M6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbnM6c3RyaW5nIHwgUG9pbnRlci5DbGFzcyB8IChzdHJpbmcgfCBQb2ludGVyLkNsYXNzKVtdLCBhY2VzOkFDRS5DbGFzc1tdICk6dm9pZCB7XG5cdGxldCBzdWJqZWN0UG9pbnRlcnM6UG9pbnRlci5DbGFzc1tdID0gcGFyc2VQb2ludGVycy5jYWxsKCB0aGlzLCBzdWJqZWN0cyApO1xuXHRsZXQgc3ViamVjdENsYXNzUG9pbnRlcjpQb2ludGVyLkNsYXNzID0gKHRoaXMgYXMgQ2xhc3MpLl9wYXJzZVBvaW50ZXIoIHN1YmplY3RzQ2xhc3MgKTtcblx0bGV0IHBlcm1pc3Npb25Qb2ludGVyczpQb2ludGVyLkNsYXNzW10gPSBwYXJzZVBvaW50ZXJzLmNhbGwoIHRoaXMsIHBlcm1pc3Npb25zICk7XG5cblx0Zm9yKCBsZXQgc3ViamVjdCBvZiBzdWJqZWN0UG9pbnRlcnMgKSB7XG5cdFx0cmVtb3ZlUGVybWlzc2lvbnNGcm9tLmNhbGwoIHRoaXMsIHN1YmplY3QsIHBlcm1pc3Npb25Qb2ludGVycywgYWNlcyApO1xuXHRcdGNvbmZpZ0FDRS5jYWxsKCB0aGlzLCBncmFudGluZywgc3ViamVjdCwgc3ViamVjdENsYXNzUG9pbnRlciwgcGVybWlzc2lvblBvaW50ZXJzLCBhY2VzICk7XG5cdH1cbn1cbmZ1bmN0aW9uIGdyYW50KCBzdWJqZWN0OnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHN1YmplY3RDbGFzczpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MgKTp2b2lkO1xuZnVuY3Rpb24gZ3JhbnQoIHN1YmplY3Q6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgc3ViamVjdENsYXNzOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHBlcm1pc3Npb25zOihzdHJpbmcgfCBQb2ludGVyLkNsYXNzKVtdICk6dm9pZDtcbmZ1bmN0aW9uIGdyYW50KCBzdWJqZWN0czooc3RyaW5nIHwgUG9pbnRlci5DbGFzcylbXSwgc3ViamVjdENsYXNzOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHBlcm1pc3Npb246c3RyaW5nIHwgUG9pbnRlci5DbGFzcyApOnZvaWQ7XG5mdW5jdGlvbiBncmFudCggc3ViamVjdHM6KHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10sIHN1YmplY3RDbGFzczpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uczooc3RyaW5nIHwgUG9pbnRlci5DbGFzcylbXSApOnZvaWQ7XG5mdW5jdGlvbiBncmFudCggc3ViamVjdHM6c3RyaW5nIHwgUG9pbnRlci5DbGFzcyB8IChzdHJpbmcgfCBQb2ludGVyLkNsYXNzKVtdLCBzdWJqZWN0c0NsYXNzOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHBlcm1pc3Npb25zOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MgfCAoc3RyaW5nIHwgUG9pbnRlci5DbGFzcylbXSApOnZvaWQge1xuXHRsZXQgYWNsOkNsYXNzID0gdGhpcztcblx0YWNsLmVudHJpZXMgPSBhY2wuZW50cmllcyB8fCBbXTtcblx0Y29uZmlnQUNFcy5jYWxsKCB0aGlzLCB0cnVlLCBzdWJqZWN0cywgc3ViamVjdHNDbGFzcywgcGVybWlzc2lvbnMsIGFjbC5lbnRyaWVzICk7XG59XG5mdW5jdGlvbiBkZW55KCBzdWJqZWN0OnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHN1YmplY3RDbGFzczpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MgKTp2b2lkO1xuZnVuY3Rpb24gZGVueSggc3ViamVjdDpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBzdWJqZWN0Q2xhc3M6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbnM6KHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10gKTp2b2lkO1xuZnVuY3Rpb24gZGVueSggc3ViamVjdHM6KHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10sIHN1YmplY3RDbGFzczpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MgKTp2b2lkO1xuZnVuY3Rpb24gZGVueSggc3ViamVjdHM6KHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10sIHN1YmplY3RDbGFzczpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uczooc3RyaW5nIHwgUG9pbnRlci5DbGFzcylbXSApOnZvaWQ7XG5mdW5jdGlvbiBkZW55KCBzdWJqZWN0czpzdHJpbmcgfCBQb2ludGVyLkNsYXNzIHwgKHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10sIHN1YmplY3RzQ2xhc3M6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbnM6c3RyaW5nIHwgUG9pbnRlci5DbGFzcyB8IChzdHJpbmcgfCBQb2ludGVyLkNsYXNzKVtdICk6dm9pZCB7XG5cdGxldCBhY2w6Q2xhc3MgPSB0aGlzO1xuXHRhY2wuZW50cmllcyA9IGFjbC5lbnRyaWVzIHx8IFtdO1xuXHRjb25maWdBQ0VzLmNhbGwoIHRoaXMsIGZhbHNlLCBzdWJqZWN0cywgc3ViamVjdHNDbGFzcywgcGVybWlzc2lvbnMsIGFjbC5lbnRyaWVzICk7XG59XG5mdW5jdGlvbiBjb25maWd1cmVDaGlsZEluaGVyaXRhbmNlKCBncmFudGluZzpib29sZWFuLCBzdWJqZWN0OnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHN1YmplY3RDbGFzczpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MgKTp2b2lkO1xuZnVuY3Rpb24gY29uZmlndXJlQ2hpbGRJbmhlcml0YW5jZSggZ3JhbnRpbmc6Ym9vbGVhbiwgc3ViamVjdDpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBzdWJqZWN0Q2xhc3M6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbnM6KHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10gKTp2b2lkO1xuZnVuY3Rpb24gY29uZmlndXJlQ2hpbGRJbmhlcml0YW5jZSggZ3JhbnRpbmc6Ym9vbGVhbiwgc3ViamVjdHM6KHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10sIHN1YmplY3RDbGFzczpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MgKTp2b2lkO1xuZnVuY3Rpb24gY29uZmlndXJlQ2hpbGRJbmhlcml0YW5jZSggZ3JhbnRpbmc6Ym9vbGVhbiwgc3ViamVjdHM6KHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10sIHN1YmplY3RDbGFzczpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uczooc3RyaW5nIHwgUG9pbnRlci5DbGFzcylbXSApOnZvaWQ7XG5mdW5jdGlvbiBjb25maWd1cmVDaGlsZEluaGVyaXRhbmNlKCBncmFudGluZzpib29sZWFuLCBzdWJqZWN0czpzdHJpbmcgfCBQb2ludGVyLkNsYXNzIHwgKHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10sIHN1YmplY3RzQ2xhc3M6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbnM6c3RyaW5nIHwgUG9pbnRlci5DbGFzcyB8IChzdHJpbmcgfCBQb2ludGVyLkNsYXNzKVtdICk6dm9pZCB7XG5cdGxldCBhY2w6Q2xhc3MgPSB0aGlzO1xuXHRhY2wuaW5oZXJpdGFibGVFbnRyaWVzID0gYWNsLmluaGVyaXRhYmxlRW50cmllcyB8fCBbXTtcblx0Y29uZmlnQUNFcy5jYWxsKCB0aGlzLCBncmFudGluZywgc3ViamVjdHMsIHN1YmplY3RzQ2xhc3MsIHBlcm1pc3Npb25zLCBhY2wuaW5oZXJpdGFibGVFbnRyaWVzICk7XG59XG5cbmZ1bmN0aW9uIGdyYW50aW5nRnJvbSggc3ViamVjdDpQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uOlBvaW50ZXIuQ2xhc3MsIGFjZXM6QUNFLkNsYXNzW10gKTpib29sZWFuIHtcblx0bGV0IHN1YmplY3RBQ0VzOkFDRS5DbGFzc1tdID0gYWNlcy5maWx0ZXIoIGFjZSA9PiBVdGlscy5BLmluZGV4T2YoIGFjZS5zdWJqZWN0cywgc3ViamVjdCwgUG9pbnRlci5VdGlsLmFyZUVxdWFsICkgIT09IC0gMSApO1xuXG5cdGZvciggbGV0IGFjZSBvZiBzdWJqZWN0QUNFcyApIHtcblx0XHRpZiggVXRpbHMuQS5pbmRleE9mKCBhY2UucGVybWlzc2lvbnMsIHBlcm1pc3Npb24sIFBvaW50ZXIuVXRpbC5hcmVFcXVhbCApICE9PSAtIDEgKVxuXHRcdFx0cmV0dXJuIGFjZS5ncmFudGluZztcblx0fVxuXHRyZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldEdyYW50aW5nKCBzdWJqZWN0OnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHBlcm1pc3Npb246c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgYWNlczpBQ0UuQ2xhc3NbXSApOmJvb2xlYW4ge1xuXHRpZiggISBhY2VzICkgcmV0dXJuIG51bGw7XG5cblx0bGV0IHN1YmplY3RQb2ludGVyOlBvaW50ZXIuQ2xhc3MgPSAodGhpcyBhcyBDbGFzcykuX3BhcnNlUG9pbnRlciggc3ViamVjdCApO1xuXHRsZXQgcGVybWlzc2lvblBvaW50ZXI6UG9pbnRlci5DbGFzcyA9ICh0aGlzIGFzIENsYXNzKS5fcGFyc2VQb2ludGVyKCBwZXJtaXNzaW9uICk7XG5cblx0cmV0dXJuIGdyYW50aW5nRnJvbSggc3ViamVjdFBvaW50ZXIsIHBlcm1pc3Npb25Qb2ludGVyLCBhY2VzICk7XG59XG5mdW5jdGlvbiBncmFudHMoIHN1YmplY3Q6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbjpzdHJpbmcgfCBQb2ludGVyLkNsYXNzICk6Ym9vbGVhbiB7XG5cdGxldCBhY2w6Q2xhc3MgPSB0aGlzO1xuXHRyZXR1cm4gZ2V0R3JhbnRpbmcuY2FsbCggdGhpcywgc3ViamVjdCwgcGVybWlzc2lvbiwgYWNsLmVudHJpZXMgKTtcbn1cbmZ1bmN0aW9uIGRlbmllcyggc3ViamVjdDpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MgKTpib29sZWFuIHtcblx0bGV0IGFjbDpDbGFzcyA9IHRoaXM7XG5cdGxldCBncmFudGluZzpib29sZWFuID0gZ2V0R3JhbnRpbmcuY2FsbCggdGhpcywgc3ViamVjdCwgcGVybWlzc2lvbiwgYWNsLmVudHJpZXMgKTtcblx0cmV0dXJuIGdyYW50aW5nID09PSBudWxsID8gbnVsbCA6ICEgZ3JhbnRpbmc7XG59XG5mdW5jdGlvbiBnZXRDaGlsZEluaGVyaXRhbmNlKCBzdWJqZWN0OnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHBlcm1pc3Npb246c3RyaW5nIHwgUG9pbnRlci5DbGFzcyApOmJvb2xlYW4ge1xuXHRsZXQgYWNsOkNsYXNzID0gdGhpcztcblx0cmV0dXJuIGdldEdyYW50aW5nLmNhbGwoIHRoaXMsIHN1YmplY3QsIHBlcm1pc3Npb24sIGFjbC5pbmhlcml0YWJsZUVudHJpZXMgKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlUGVybWlzc2lvbnNGcm9tKCBzdWJqZWN0OlBvaW50ZXIuQ2xhc3MsIHBlcm1pc3Npb25zOlBvaW50ZXIuQ2xhc3NbXSwgYWNlczpBQ0UuQ2xhc3NbXSApOnZvaWQge1xuXHRpZiggISBhY2VzICkgcmV0dXJuO1xuXG5cdGxldCBhY2w6Q2xhc3MgPSA8Q2xhc3M+IHRoaXM7XG5cdGxldCBvcHBvc2VkQWNlczpBQ0UuQ2xhc3NbXSA9IGFjbC5lbnRyaWVzID09PSBhY2VzID8gYWNsLmluaGVyaXRhYmxlRW50cmllcyA6IGFjbC5lbnRyaWVzO1xuXG5cdGxldCBzdWJqZWN0QUNFczpBQ0UuQ2xhc3NbXSA9IGFjZXMuZmlsdGVyKCBhY2UgPT4gVXRpbHMuQS5pbmRleE9mKCBhY2Uuc3ViamVjdHMsIHN1YmplY3QsIFBvaW50ZXIuVXRpbC5hcmVFcXVhbCApICE9PSAtIDEgKTtcblx0Zm9yKCBsZXQgYWNlIG9mIHN1YmplY3RBQ0VzICkge1xuXHRcdGlmKCBvcHBvc2VkQWNlcyAmJiBVdGlscy5BLmluZGV4T2YoIG9wcG9zZWRBY2VzLCBhY2UsIFBvaW50ZXIuVXRpbC5hcmVFcXVhbCApICE9PSAtIDEgKSB7XG5cdFx0XHRhY2VzLnNwbGljZSggVXRpbHMuQS5pbmRleE9mKCBhY2VzLCBhY2UsIFBvaW50ZXIuVXRpbC5hcmVFcXVhbCApLCAxICk7XG5cblx0XHRcdGxldCBuZXdBQ0U6QUNFLkNsYXNzID0gY29uZmlnQUNFLmNhbGwoIHRoaXMsIGFjZS5ncmFudGluZywgc3ViamVjdCwgYWNlLnN1YmplY3RzQ2xhc3MsIGFjZS5wZXJtaXNzaW9ucywgYWNlcyApO1xuXHRcdFx0c3ViamVjdEFDRXMucHVzaCggbmV3QUNFICk7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRpZiggYWNlLnN1YmplY3RzLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRhY2Uuc3ViamVjdHMuc3BsaWNlKCBVdGlscy5BLmluZGV4T2YoIGFjZS5zdWJqZWN0cywgc3ViamVjdCwgUG9pbnRlci5VdGlsLmFyZUVxdWFsICksIDEgKTtcblxuXHRcdFx0bGV0IG5ld0FDRTpBQ0UuQ2xhc3MgPSBjb25maWdBQ0UuY2FsbCggdGhpcywgYWNlLmdyYW50aW5nLCBzdWJqZWN0LCBhY2Uuc3ViamVjdHNDbGFzcywgYWNlLnBlcm1pc3Npb25zLCBhY2VzICk7XG5cdFx0XHRzdWJqZWN0QUNFcy5wdXNoKCBuZXdBQ0UgKTtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGZvciggbGV0IHBlcm1pc3Npb24gb2YgcGVybWlzc2lvbnMgKSB7XG5cdFx0XHRsZXQgaW5kZXg6bnVtYmVyID0gVXRpbHMuQS5pbmRleE9mKCBhY2UucGVybWlzc2lvbnMsIHBlcm1pc3Npb24sIFBvaW50ZXIuVXRpbC5hcmVFcXVhbCApO1xuXG5cdFx0XHRpZiggaW5kZXggPT09IC0gMSApIGNvbnRpbnVlO1xuXHRcdFx0YWNlLnBlcm1pc3Npb25zLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHR9XG5cblx0XHRpZiggYWNlLnBlcm1pc3Npb25zLmxlbmd0aCA9PT0gMCApIHtcblx0XHRcdGFjZXMuc3BsaWNlKCBVdGlscy5BLmluZGV4T2YoIGFjZXMsIGFjZSwgUG9pbnRlci5VdGlsLmFyZUVxdWFsICksIDEgKTtcblx0XHRcdGFjbC5fcmVtb3ZlRnJhZ21lbnQoIGFjZSApO1xuXHRcdH1cblx0fVxufVxuZnVuY3Rpb24gcmVtb3ZlUGVybWlzc2lvbnMoIHN1YmplY3Q6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbnM6c3RyaW5nIHwgUG9pbnRlci5DbGFzcyB8IChzdHJpbmcgfCBQb2ludGVyLkNsYXNzKVtdLCBhY2VzOkFDRS5DbGFzc1tdICk6dm9pZCB7XG5cdGxldCBzdWJqZWN0UG9pbnRlcjpQb2ludGVyLkNsYXNzID0gKHRoaXMgYXMgQ2xhc3MpLl9wYXJzZVBvaW50ZXIoIHN1YmplY3QgKTtcblx0bGV0IHBlcm1pc3Npb25Qb2ludGVyczpQb2ludGVyLkNsYXNzW10gPSBwYXJzZVBvaW50ZXJzLmNhbGwoIHRoaXMsIHBlcm1pc3Npb25zICk7XG5cdHJlbW92ZVBlcm1pc3Npb25zRnJvbS5jYWxsKCB0aGlzLCBzdWJqZWN0UG9pbnRlciwgcGVybWlzc2lvblBvaW50ZXJzLCBhY2VzICk7XG59XG5mdW5jdGlvbiByZW1vdmUoIHN1YmplY3Q6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbjpzdHJpbmcgfCBQb2ludGVyLkNsYXNzICk6dm9pZDtcbmZ1bmN0aW9uIHJlbW92ZSggc3ViamVjdDpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uczooc3RyaW5nIHwgUG9pbnRlci5DbGFzcylbXSApOnZvaWQ7XG5mdW5jdGlvbiByZW1vdmUoIHN1YmplY3Q6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbnM6c3RyaW5nIHwgUG9pbnRlci5DbGFzcyB8IChzdHJpbmcgfCBQb2ludGVyLkNsYXNzKVtdICk6dm9pZCB7XG5cdGxldCBhY2w6Q2xhc3MgPSB0aGlzO1xuXHRyZW1vdmVQZXJtaXNzaW9ucy5jYWxsKCB0aGlzLCBzdWJqZWN0LCBwZXJtaXNzaW9ucywgYWNsLmVudHJpZXMgKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkSW5oZXJpdGFuY2UoIHN1YmplY3Q6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbjpzdHJpbmcgfCBQb2ludGVyLkNsYXNzICk6dm9pZDtcbmZ1bmN0aW9uIHJlbW92ZUNoaWxkSW5oZXJpdGFuY2UoIHN1YmplY3Q6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbnM6KHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10gKTp2b2lkO1xuZnVuY3Rpb24gcmVtb3ZlQ2hpbGRJbmhlcml0YW5jZSggc3ViamVjdDpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uczpzdHJpbmcgfCBQb2ludGVyLkNsYXNzIHwgKHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10gKTp2b2lkIHtcblx0bGV0IGFjbDpDbGFzcyA9IHRoaXM7XG5cdHJlbW92ZVBlcm1pc3Npb25zLmNhbGwoIHRoaXMsIHN1YmplY3QsIHBlcm1pc3Npb25zLCBhY2wuaW5oZXJpdGFibGVFbnRyaWVzICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0ICogYXMgQUNMIGZyb20gXCIuL0FDTFwiO1xuaW1wb3J0ICogYXMgUGVyc2lzdGVkQUNFIGZyb20gXCIuL1BlcnNpc3RlZEFDRVwiO1xuaW1wb3J0ICogYXMgUGVyc2lzdGVkRG9jdW1lbnQgZnJvbSBcIi4vLi4vUGVyc2lzdGVkRG9jdW1lbnRcIjtcbmltcG9ydCAqIGFzIFBvaW50ZXIgZnJvbSBcIi4vLi4vUG9pbnRlclwiO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vLi4vVXRpbHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBDbGFzcyBleHRlbmRzIFBlcnNpc3RlZERvY3VtZW50LkNsYXNzIHtcblx0YWNjZXNzVG86UG9pbnRlci5DbGFzcztcblx0ZW50cmllcz86UGVyc2lzdGVkQUNFLkNsYXNzW107XG5cdGluaGVyaXRhYmxlRW50cmllcz86UGVyc2lzdGVkQUNFLkNsYXNzW107XG5cblx0X3BhcnNlUG9pbnRlciggZWxlbWVudDpzdHJpbmcgfCBQb2ludGVyLkNsYXNzICk6UG9pbnRlci5DbGFzcztcblxuXHRncmFudCggc3ViamVjdDpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBzdWJqZWN0Q2xhc3M6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbjpzdHJpbmcgfCBQb2ludGVyLkNsYXNzICk6dm9pZDtcblx0Z3JhbnQoIHN1YmplY3Q6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgc3ViamVjdENsYXNzOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHBlcm1pc3Npb25zOihzdHJpbmcgfCBQb2ludGVyLkNsYXNzKVtdICk6dm9pZDtcblx0Z3JhbnQoIHN1YmplY3RzOihzdHJpbmcgfCBQb2ludGVyLkNsYXNzKVtdLCBzdWJqZWN0Q2xhc3M6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbjpzdHJpbmcgfCBQb2ludGVyLkNsYXNzICk6dm9pZDtcblx0Z3JhbnQoIHN1YmplY3RzOihzdHJpbmcgfCBQb2ludGVyLkNsYXNzKVtdLCBzdWJqZWN0Q2xhc3M6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbnM6KHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10gKTp2b2lkO1xuXG5cdGRlbnkoIHN1YmplY3Q6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgc3ViamVjdENsYXNzOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHBlcm1pc3Npb246c3RyaW5nIHwgUG9pbnRlci5DbGFzcyApOnZvaWQ7XG5cdGRlbnkoIHN1YmplY3Q6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgc3ViamVjdENsYXNzOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHBlcm1pc3Npb25zOihzdHJpbmcgfCBQb2ludGVyLkNsYXNzKVtdICk6dm9pZDtcblx0ZGVueSggc3ViamVjdHM6KHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10sIHN1YmplY3RDbGFzczpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MgKTp2b2lkO1xuXHRkZW55KCBzdWJqZWN0czooc3RyaW5nIHwgUG9pbnRlci5DbGFzcylbXSwgc3ViamVjdENsYXNzOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHBlcm1pc3Npb25zOihzdHJpbmcgfCBQb2ludGVyLkNsYXNzKVtdICk6dm9pZDtcblxuXHRjb25maWd1cmVDaGlsZEluaGVyaXRhbmNlKCBncmFudGluZzpib29sZWFuLCBzdWJqZWN0OnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHN1YmplY3RDbGFzczpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MgKTp2b2lkO1xuXHRjb25maWd1cmVDaGlsZEluaGVyaXRhbmNlKCBncmFudGluZzpib29sZWFuLCBzdWJqZWN0OnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHN1YmplY3RDbGFzczpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uczooc3RyaW5nIHwgUG9pbnRlci5DbGFzcylbXSApOnZvaWQ7XG5cdGNvbmZpZ3VyZUNoaWxkSW5oZXJpdGFuY2UoIGdyYW50aW5nOmJvb2xlYW4sIHN1YmplY3RzOihzdHJpbmcgfCBQb2ludGVyLkNsYXNzKVtdLCBzdWJqZWN0Q2xhc3M6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbjpzdHJpbmcgfCBQb2ludGVyLkNsYXNzICk6dm9pZDtcblx0Y29uZmlndXJlQ2hpbGRJbmhlcml0YW5jZSggZ3JhbnRpbmc6Ym9vbGVhbiwgc3ViamVjdHM6KHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10sIHN1YmplY3RDbGFzczpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uczooc3RyaW5nIHwgUG9pbnRlci5DbGFzcylbXSApOnZvaWQ7XG5cblx0Z3JhbnRzKCBzdWJqZWN0OnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHBlcm1pc3Npb246c3RyaW5nIHwgUG9pbnRlci5DbGFzcyApOmJvb2xlYW47XG5cdGRlbmllcyggc3ViamVjdDpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MgKTpib29sZWFuO1xuXHRnZXRDaGlsZEluaGVyaXRhbmNlKCBzdWJqZWN0OnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHBlcm1pc3Npb25zOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MgKTpib29sZWFuO1xuXG5cdHJlbW92ZSggc3ViamVjdDpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBwZXJtaXNzaW9uOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MgKTp2b2lkO1xuXHRyZW1vdmUoIHN1YmplY3Q6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbnM6KHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10gKTp2b2lkO1xuXHRyZW1vdmVDaGlsZEluaGVyaXRhbmNlKCBzdWJqZWN0OnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHBlcm1pc3Npb246c3RyaW5nIHwgUG9pbnRlci5DbGFzcyApOnZvaWQ7XG5cdHJlbW92ZUNoaWxkSW5oZXJpdGFuY2UoIHN1YmplY3Q6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcGVybWlzc2lvbnM6KHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MpW10gKTp2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgRmFjdG9yeSB7XG5cblx0c3RhdGljIGhhc0NsYXNzUHJvcGVydGllcyggb2JqZWN0Ok9iamVjdCApOmJvb2xlYW4ge1xuXHRcdHJldHVybiBVdGlscy5oYXNQcm9wZXJ0eURlZmluZWQoIG9iamVjdCwgXCJhY2Nlc3NUb1wiIClcblx0XHRcdDtcblx0fVxuXG5cdHN0YXRpYyBkZWNvcmF0ZTxUIGV4dGVuZHMgUGVyc2lzdGVkRG9jdW1lbnQuQ2xhc3M+KCBkb2N1bWVudDpUICk6VCAmIENsYXNzIHtcblx0XHRsZXQgYWNsOlQgJiBDbGFzcyA9IDxhbnk+IEFDTC5GYWN0b3J5LmRlY29yYXRlKCBkb2N1bWVudCApO1xuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIGFjbCwge1xuXHRcdFx0XCJfcGFyc2VQb2ludGVyXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBwYXJzZVBvaW50ZXIsXG5cdFx0XHR9LFxuXHRcdH0gKTtcblxuXHRcdHJldHVybiBhY2w7XG5cdH1cblxufVxuXG5mdW5jdGlvbiBwYXJzZVBvaW50ZXIoIGVsZW1lbnQ6IHN0cmluZyB8IFBvaW50ZXIuQ2xhc3MgKTpQb2ludGVyLkNsYXNzIHtcblx0cmV0dXJuIFBvaW50ZXIuRmFjdG9yeS5pcyggZWxlbWVudCApID8gPFBvaW50ZXIuQ2xhc3M+IGVsZW1lbnQgOiAodGhpcyBhcyBDbGFzcykuZ2V0UG9pbnRlciggPHN0cmluZz4gZWxlbWVudCApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCAqIGFzIERvY3VtZW50IGZyb20gXCIuLy4uL0RvY3VtZW50XCI7XG5pbXBvcnQgSWxsZWdhbEFyZ3VtZW50RXJyb3IgZnJvbSBcIi4vLi4vRXJyb3JzL0lsbGVnYWxBcmd1bWVudEVycm9yXCI7XG5pbXBvcnQgKiBhcyBOUyBmcm9tIFwiLi8uLi9OU1wiO1xuaW1wb3J0ICogYXMgT2JqZWN0U2NoZW1hIGZyb20gXCIuLy4uL09iamVjdFNjaGVtYVwiO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vLi4vVXRpbHNcIjtcblxuZXhwb3J0IGNvbnN0IFJERl9DTEFTUzpzdHJpbmcgPSBOUy5DUy5DbGFzcy5BZ2VudDtcblxuZXhwb3J0IGNvbnN0IFNDSEVNQTpPYmplY3RTY2hlbWEuQ2xhc3MgPSB7XG5cdFwibmFtZVwiOiB7XG5cdFx0XCJAaWRcIjogTlMuQ1MuUHJlZGljYXRlLm5hbWFlLFxuXHRcdFwiQHR5cGVcIjogTlMuWFNELkRhdGFUeXBlLnN0cmluZyxcblx0fSxcblx0XCJlbWFpbFwiOiB7XG5cdFx0XCJAaWRcIjogTlMuVkNBUkQuUHJlZGljYXRlLmVtYWlsLFxuXHRcdFwiQHR5cGVcIjogTlMuWFNELkRhdGFUeXBlLnN0cmluZyxcblx0fSxcblx0XCJwYXNzd29yZFwiOiB7XG5cdFx0XCJAaWRcIjogTlMuQ1MuUHJlZGljYXRlLnBhc3N3b3JkLFxuXHRcdFwiQHR5cGVcIjogTlMuWFNELkRhdGFUeXBlLnN0cmluZyxcblx0fSxcblx0XCJlbmFibGVkXCI6IHtcblx0XHRcIkBpZFwiOiBOUy5DUy5QcmVkaWNhdGUuZW5hYmxlZCxcblx0XHRcIkB0eXBlXCI6IE5TLlhTRC5EYXRhVHlwZS5ib29sZWFuLFxuXHR9LFxuXHRcInBsYXRmb3JtUm9sZXNcIjoge1xuXHRcdFwiQGlkXCI6IE5TLkNTLlByZWRpY2F0ZS5wbGF0Zm9ybVJvbGUsXG5cdFx0XCJAdHlwZVwiOiBcIkBpZFwiLFxuXHRcdFwiQGNvbnRhaW5lclwiOiBcIkBzZXRcIixcblx0fSxcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xhc3MgZXh0ZW5kcyBEb2N1bWVudC5DbGFzcyB7XG5cdG5hbWU6c3RyaW5nO1xuXHRlbWFpbDpzdHJpbmc7XG5cdHBhc3N3b3JkOnN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIEZhY3Rvcnkge1xuXHRzdGF0aWMgaGFzQ2xhc3NQcm9wZXJ0aWVzKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIFV0aWxzLmhhc1Byb3BlcnR5RGVmaW5lZCggb2JqZWN0LCBcIm5hbWVcIiApXG5cdFx0XHQmJiBVdGlscy5oYXNQcm9wZXJ0eURlZmluZWQoIG9iamVjdCwgXCJlbWFpbFwiIClcblx0XHRcdCYmIFV0aWxzLmhhc1Byb3BlcnR5RGVmaW5lZCggb2JqZWN0LCBcInBhc3N3b3JkXCIgKVxuXHRcdFx0O1xuXHR9XG5cblx0c3RhdGljIGlzKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIEZhY3RvcnkuaGFzQ2xhc3NQcm9wZXJ0aWVzKCBvYmplY3QgKVxuXHRcdFx0JiYgRG9jdW1lbnQuRmFjdG9yeS5oYXNDbGFzc1Byb3BlcnRpZXMoIG9iamVjdCApXG5cdFx0XHQmJiAoPERvY3VtZW50LkNsYXNzPiBvYmplY3QpLmhhc1R5cGUoIFJERl9DTEFTUyApXG5cdFx0XHQ7XG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlKCBuYW1lOnN0cmluZywgZW1haWw6c3RyaW5nLCBwYXNzd29yZDpzdHJpbmcgKTpDbGFzcyB7XG5cdFx0cmV0dXJuIEZhY3RvcnkuY3JlYXRlRnJvbTxPYmplY3Q+KCB7fSwgbmFtZSwgZW1haWwsIHBhc3N3b3JkICk7XG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlRnJvbTxUIGV4dGVuZHMgT2JqZWN0Piggb2JqZWN0OlQsIG5hbWU6c3RyaW5nLCBlbWFpbDpzdHJpbmcsIHBhc3N3b3JkOnN0cmluZyApOlQgJiBDbGFzcyB7XG5cdFx0aWYoICEgRG9jdW1lbnQuRmFjdG9yeS5oYXNDbGFzc1Byb3BlcnRpZXMoIG9iamVjdCApIClcblx0XHRcdG9iamVjdCA9IERvY3VtZW50LkZhY3RvcnkuY3JlYXRlRnJvbSggb2JqZWN0ICk7XG5cblx0XHRpZiggISBuYW1lICkgdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEVycm9yKCBcIlRoZSBuYW1lIGNhbm5vdCBiZSBlbXB0eS5cIiApO1xuXHRcdGlmKCAhIGVtYWlsICkgdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEVycm9yKCBcIlRoZSBlbWFpbCBjYW5ub3QgYmUgZW1wdHkuXCIgKTtcblx0XHRpZiggISBwYXNzd29yZCApIHRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFcnJvciggXCJUaGUgcGFzc3dvcmQgY2Fubm90IGJlIGVtcHR5LlwiICk7XG5cblx0XHRsZXQgYXBwOlQgJiBDbGFzcyA9IDxUICYgQ2xhc3M+IG9iamVjdDtcblx0XHRhcHAubmFtZSA9IG5hbWU7XG5cdFx0YXBwLmVtYWlsID0gZW1haWw7XG5cdFx0YXBwLnBhc3N3b3JkID0gcGFzc3dvcmQ7XG5cdFx0YXBwLnR5cGVzLnB1c2goIE5TLkNTLkNsYXNzLkFnZW50ICk7XG5cblx0XHRyZXR1cm4gYXBwO1xuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xhc3M7XG4iLCJpbXBvcnQgKiBhcyBBZ2VudCBmcm9tIFwiLi9BZ2VudFwiO1xuaW1wb3J0ICogYXMgSFRUUCBmcm9tIFwiLi8uLi9IVFRQXCI7XG5pbXBvcnQgKiBhcyBQZXJzaXN0ZWREb2N1bWVudCBmcm9tIFwiLi8uLi9QZXJzaXN0ZWREb2N1bWVudFwiO1xuaW1wb3J0ICogYXMgUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQgZnJvbSBcIi4vLi4vUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnRcIjtcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuLy4uL1V0aWxzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xhc3MgZXh0ZW5kcyBQZXJzaXN0ZWRQcm90ZWN0ZWREb2N1bWVudC5DbGFzcyB7XG5cdG5hbWU6c3RyaW5nO1xuXHRlbWFpbDpzdHJpbmc7XG5cdGVuYWJsZWQ6Ym9vbGVhbjtcblxuXHRlbmFibGUoKTpQcm9taXNlPFsgQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cdGRpc2FibGUoKTpQcm9taXNlPFsgQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG59XG5cbmV4cG9ydCBjbGFzcyBGYWN0b3J5IHtcblx0c3RhdGljIGhhc0NsYXNzUHJvcGVydGllcyggb2JqZWN0Ok9iamVjdCApOmJvb2xlYW4ge1xuXHRcdHJldHVybiBVdGlscy5oYXNQcm9wZXJ0eURlZmluZWQoIG9iamVjdCwgXCJuYW1lXCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzUHJvcGVydHlEZWZpbmVkKCBvYmplY3QsIFwiZW1haWxcIiApXG5cdFx0XHQmJiBVdGlscy5oYXNQcm9wZXJ0eURlZmluZWQoIG9iamVjdCwgXCJlbmFibGVkXCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJlbmFibGVcIiApXG5cdFx0XHQmJiBVdGlscy5oYXNGdW5jdGlvbiggb2JqZWN0LCBcImRpc2FibGVcIiApXG5cdFx0XHQ7XG5cdH1cblxuXHRzdGF0aWMgaXMoIG9iamVjdDpPYmplY3QgKTpib29sZWFuIHtcblx0XHRyZXR1cm4gRmFjdG9yeS5oYXNDbGFzc1Byb3BlcnRpZXMoIG9iamVjdCApXG5cdFx0XHQmJiBQZXJzaXN0ZWRQcm90ZWN0ZWREb2N1bWVudC5GYWN0b3J5LmlzKCBvYmplY3QgKVxuXHRcdFx0JiYgKDxQZXJzaXN0ZWRQcm90ZWN0ZWREb2N1bWVudC5DbGFzcz4gb2JqZWN0KS5oYXNUeXBlKCBBZ2VudC5SREZfQ0xBU1MgKVxuXHRcdFx0O1xuXHR9XG5cblx0c3RhdGljIGRlY29yYXRlPFQgZXh0ZW5kcyBQZXJzaXN0ZWREb2N1bWVudC5DbGFzcz4oIG9iamVjdDpUICk6Q2xhc3MgJiBUIHtcblx0XHRsZXQgYWdlbnQ6VCAmIENsYXNzID0gPGFueT4gb2JqZWN0O1xuXG5cdFx0aWYoIEZhY3RvcnkuaGFzQ2xhc3NQcm9wZXJ0aWVzKCBhZ2VudCApICkgcmV0dXJuIGFnZW50O1xuXHRcdGlmKCAhIFBlcnNpc3RlZFByb3RlY3RlZERvY3VtZW50LkZhY3RvcnkuaGFzQ2xhc3NQcm9wZXJ0aWVzKCBhZ2VudCApICkgUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQuRmFjdG9yeS5kZWNvcmF0ZSggYWdlbnQgKTtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBhZ2VudCwge1xuXHRcdFx0XCJlbmFibGVcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogZmFsc2UsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBlbmFibGUsXG5cdFx0XHR9LFxuXHRcdFx0XCJkaXNhYmxlXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogZGlzYWJsZSxcblx0XHRcdH0sXG5cdFx0fSApO1xuXG5cdFx0cmV0dXJuIGFnZW50O1xuXHR9XG5cbn1cblxuZnVuY3Rpb24gZW5hYmxlKCk6UHJvbWlzZTxbIENsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+IHtcblx0KDxDbGFzcz4gdGhpcykuZW5hYmxlZCA9IHRydWU7XG5cdHJldHVybiAoPENsYXNzPiB0aGlzKS5zYXZlKCk7XG59XG5mdW5jdGlvbiBkaXNhYmxlKCk6UHJvbWlzZTxbIENsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+IHtcblx0KDxDbGFzcz4gdGhpcykuZW5hYmxlZCA9IGZhbHNlO1xuXHRyZXR1cm4gKDxDbGFzcz4gdGhpcykuc2F2ZSgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuLy4uL1V0aWxzXCI7XG5pbXBvcnQgKiBhcyBEb2N1bWVudCBmcm9tIFwiLi8uLi9Eb2N1bWVudFwiO1xuaW1wb3J0ICogYXMgTlMgZnJvbSBcIi4vLi4vTlNcIjtcbmltcG9ydCAqIGFzIE9iamVjdFNjaGVtYSBmcm9tIFwiLi8uLi9PYmplY3RTY2hlbWFcIjtcbmltcG9ydCAqIGFzIFBvaW50ZXIgZnJvbSBcIi4vLi4vUG9pbnRlclwiO1xuaW1wb3J0IElsbGVnYWxBcmd1bWVudEVycm9yIGZyb20gXCIuLy4uL0Vycm9ycy9JbGxlZ2FsQXJndW1lbnRFcnJvclwiO1xuXG5leHBvcnQgY29uc3QgU0NIRU1BOk9iamVjdFNjaGVtYS5DbGFzcyA9IHtcblx0XCJuYW1lXCI6IHtcblx0XHRcIkBpZFwiOiBOUy5DUy5QcmVkaWNhdGUubmFtYWUsXG5cdFx0XCJAdHlwZVwiOiBOUy5YU0QuRGF0YVR5cGUuc3RyaW5nLFxuXHR9LFxuXHRcImFnZW50c1wiOiB7XG5cdFx0XCJAaWRcIjogTlMuQ1MuUHJlZGljYXRlLmFnZW50LFxuXHRcdFwiQHR5cGVcIjogXCJAaWRcIixcblx0XHRcIkBjb250YWluZXJcIjogXCJAc2V0XCIsXG5cdH0sXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIENsYXNzIGV4dGVuZHMgRG9jdW1lbnQuQ2xhc3Mge1xuXHRuYW1lOnN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIEZhY3Rvcnkge1xuXHRzdGF0aWMgaGFzQ2xhc3NQcm9wZXJ0aWVzKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIFV0aWxzLmhhc1Byb3BlcnR5RGVmaW5lZCggb2JqZWN0LCBcIm5hbWVcIiApO1xuXHR9XG5cblx0c3RhdGljIGlzKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIEZhY3RvcnkuaGFzQ2xhc3NQcm9wZXJ0aWVzKCBvYmplY3QgKVxuXHRcdFx0JiYgRG9jdW1lbnQuRmFjdG9yeS5pcyggb2JqZWN0IClcblx0XHRcdDtcblx0fVxuXG5cdHN0YXRpYyBjcmVhdGUoIG5hbWU6c3RyaW5nICk6Q2xhc3Mge1xuXHRcdHJldHVybiBGYWN0b3J5LmNyZWF0ZUZyb208T2JqZWN0Pigge30sIG5hbWUgKTtcblx0fVxuXG5cdHN0YXRpYyBjcmVhdGVGcm9tPFQgZXh0ZW5kcyBPYmplY3Q+KCBvYmplY3Q6VCwgbmFtZTpzdHJpbmcgKTpUICYgQ2xhc3Mge1xuXHRcdGlmKCAhIERvY3VtZW50LkZhY3RvcnkuaGFzQ2xhc3NQcm9wZXJ0aWVzKCBvYmplY3QgKSApXG5cdFx0XHRvYmplY3QgPSBEb2N1bWVudC5GYWN0b3J5LmNyZWF0ZUZyb20oIG9iamVjdCApO1xuXG5cdFx0aWYoICEgbmFtZSApIHRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFcnJvciggXCJUaGUgbmFtZSBjYW5ub3QgYmUgZW1wdHkuXCIgKTtcblxuXHRcdGxldCByb2xlOlQgJiBDbGFzcyA9IDxUICYgQ2xhc3M+IG9iamVjdDtcblx0XHRyb2xlLm5hbWUgPSBuYW1lO1xuXG5cdFx0cmV0dXJuIHJvbGU7XG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCAqIGFzIEhUVFAgZnJvbSBcIi4vLi4vSFRUUFwiO1xuaW1wb3J0ICogYXMgRXJyb3JzIGZyb20gXCIuLy4uL0Vycm9yc1wiO1xuaW1wb3J0ICogYXMgUGVyc2lzdGVkRG9jdW1lbnQgZnJvbSBcIi4vLi4vUGVyc2lzdGVkRG9jdW1lbnRcIjtcbmltcG9ydCAqIGFzIFBlcnNpc3RlZFByb3RlY3RlZERvY3VtZW50IGZyb20gXCIuLy4uL1BlcnNpc3RlZFByb3RlY3RlZERvY3VtZW50XCI7XG5pbXBvcnQgKiBhcyBQb2ludGVyIGZyb20gXCIuLy4uL1BvaW50ZXJcIjtcbmltcG9ydCAqIGFzIFJldHJpZXZhbFByZWZlcmVuY2VzIGZyb20gXCIuLy4uL1JldHJpZXZhbFByZWZlcmVuY2VzXCI7XG5pbXBvcnQgKiBhcyBSb2xlIGZyb20gXCIuL1JvbGVcIjtcbmltcG9ydCAqIGFzIFJvbGVzIGZyb20gXCIuL1JvbGVzXCI7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi8uLi9VdGlsc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIENsYXNzIGV4dGVuZHMgUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQuQ2xhc3Mge1xuXHRfcm9sZXM6Um9sZXMuQ2xhc3M7XG5cblx0bmFtZT86c3RyaW5nO1xuXHRhZ2VudHM/OlBvaW50ZXIuQ2xhc3M7XG5cblx0Y3JlYXRlQ2hpbGQ8VCBleHRlbmRzIFJvbGUuQ2xhc3M+KCByb2xlOlQsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBUICYgQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cdGNyZWF0ZUNoaWxkPFQgZXh0ZW5kcyBSb2xlLkNsYXNzPiggcm9sZTpULCBzbHVnPzpzdHJpbmcsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBUICYgQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cblx0bGlzdEFnZW50cyggcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIFBvaW50ZXIuQ2xhc3NbXSwgSFRUUC5SZXNwb25zZS5DbGFzcyBdPjtcblxuXHRnZXRBZ2VudHMoIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBQb2ludGVyLkNsYXNzW10sIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cdGdldEFnZW50cyggcmV0cmlldmFsUHJlZmVyZW5jZXNPclJlcXVlc3RPcHRpb25zPzpSZXRyaWV2YWxQcmVmZXJlbmNlcy5DbGFzcywgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIFBvaW50ZXIuQ2xhc3NbXSwgSFRUUC5SZXNwb25zZS5DbGFzcyBdPjtcblxuXHRhZGRBZ2VudCggYWdlbnQ6UG9pbnRlci5DbGFzcyB8IHN0cmluZywgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxIVFRQLlJlc3BvbnNlLkNsYXNzPjtcblx0YWRkQWdlbnRzKCBhZ2VudHM6KFBvaW50ZXIuQ2xhc3MgfCBzdHJpbmcpW10sIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8SFRUUC5SZXNwb25zZS5DbGFzcz47XG5cblx0cmVtb3ZlQWdlbnQoIGFnZW50OlBvaW50ZXIuQ2xhc3MgfCBzdHJpbmcsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8SFRUUC5SZXNwb25zZS5DbGFzcz47XG5cdHJlbW92ZUFnZW50cyggYWdlbnRzOihQb2ludGVyLkNsYXNzIHwgc3RyaW5nKVtdLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+O1xufVxuXG5leHBvcnQgY2xhc3MgRmFjdG9yeSB7XG5cblx0c3RhdGljIGhhc0NsYXNzUHJvcGVydGllcyggb2JqZWN0Ok9iamVjdCApOmJvb2xlYW4ge1xuXHRcdHJldHVybiBVdGlscy5oYXNQcm9wZXJ0eURlZmluZWQoIG9iamVjdCwgXCJfcm9sZXNcIiApXG5cdFx0XHQmJiBVdGlscy5oYXNGdW5jdGlvbiggb2JqZWN0LCBcImNyZWF0ZUNoaWxkXCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJsaXN0QWdlbnRzXCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJnZXRBZ2VudHNcIiApXG5cdFx0XHQmJiBVdGlscy5oYXNGdW5jdGlvbiggb2JqZWN0LCBcImFkZEFnZW50XCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJhZGRBZ2VudHNcIiApXG5cdFx0XHQmJiBVdGlscy5oYXNGdW5jdGlvbiggb2JqZWN0LCBcInJlbW92ZUFnZW50XCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJyZW1vdmVBZ2VudHNcIiApXG5cdFx0XHQ7XG5cdH1cblxuXHRzdGF0aWMgaXMoIG9iamVjdDpPYmplY3QgKTpib29sZWFuIHtcblx0XHRyZXR1cm4gRmFjdG9yeS5oYXNDbGFzc1Byb3BlcnRpZXMoIG9iamVjdCApXG5cdFx0XHQmJiBQZXJzaXN0ZWRQcm90ZWN0ZWREb2N1bWVudC5GYWN0b3J5LmlzKCBvYmplY3QgKTtcblx0fVxuXG5cdHN0YXRpYyBkZWNvcmF0ZTxUIGV4dGVuZHMgUGVyc2lzdGVkRG9jdW1lbnQuQ2xhc3M+KCBvYmplY3Q6VCwgcm9sZXM6Um9sZXMuQ2xhc3MgKTpUICYgQ2xhc3Mge1xuXHRcdGxldCByb2xlOkNsYXNzICYgVCA9IDxhbnk+IG9iamVjdDtcblxuXHRcdGlmKCBGYWN0b3J5Lmhhc0NsYXNzUHJvcGVydGllcyggcm9sZSApICkgcmV0dXJuIHJvbGU7XG5cdFx0aWYoICEgUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQuRmFjdG9yeS5oYXNDbGFzc1Byb3BlcnRpZXMoIHJvbGUgKSApIFBlcnNpc3RlZFByb3RlY3RlZERvY3VtZW50LkZhY3RvcnkuZGVjb3JhdGUoIHJvbGUgKTtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCByb2xlLCB7XG5cdFx0XHRcIl9yb2xlc1wiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IHJvbGVzLFxuXHRcdFx0fSxcblx0XHRcdFwiY3JlYXRlQ2hpbGRcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IGNyZWF0ZUNoaWxkLFxuXHRcdFx0fSxcblx0XHRcdFwibGlzdEFnZW50c1wiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogbGlzdEFnZW50cyxcblx0XHRcdH0sXG5cdFx0XHRcImdldEFnZW50c1wiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogZ2V0QWdlbnRzLFxuXHRcdFx0fSxcblx0XHRcdFwiYWRkQWdlbnRcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IGFkZEFnZW50LFxuXHRcdFx0fSxcblx0XHRcdFwiYWRkQWdlbnRzXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBhZGRBZ2VudHMsXG5cdFx0XHR9LFxuXHRcdFx0XCJyZW1vdmVBZ2VudFwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogcmVtb3ZlQWdlbnQsXG5cdFx0XHR9LFxuXHRcdFx0XCJyZW1vdmVBZ2VudHNcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IHJlbW92ZUFnZW50cyxcblx0XHRcdH0sXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gcm9sZTtcblx0fVxuXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNoaWxkPFQgZXh0ZW5kcyBSb2xlLkNsYXNzPiggcm9sZTpULCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgVCAmIENsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+O1xuZnVuY3Rpb24gY3JlYXRlQ2hpbGQ8VCBleHRlbmRzIFJvbGUuQ2xhc3M+KCByb2xlOlQsIHNsdWc/OnN0cmluZywgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIFQgJiBDbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdPjtcbmZ1bmN0aW9uIGNyZWF0ZUNoaWxkPFQgZXh0ZW5kcyBSb2xlLkNsYXNzPiggcm9sZTpULCBzbHVnT3JSZXF1ZXN0T3B0aW9ucz86YW55LCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgVCAmIENsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+IHtcblx0Y2hlY2tTdGF0ZS5jYWxsKCB0aGlzICk7XG5cdHJldHVybiAoPENsYXNzPiB0aGlzKS5fcm9sZXMuY3JlYXRlQ2hpbGQoICg8Q2xhc3M+IHRoaXMpLmlkLCByb2xlLCBzbHVnT3JSZXF1ZXN0T3B0aW9ucywgcmVxdWVzdE9wdGlvbnMgKTtcbn1cblxuZnVuY3Rpb24gbGlzdEFnZW50cyggcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIFBvaW50ZXIuQ2xhc3NbXSwgSFRUUC5SZXNwb25zZS5DbGFzcyBdPiB7XG5cdGNoZWNrU3RhdGUuY2FsbCggdGhpcyApO1xuXHRyZXR1cm4gKDxDbGFzcz4gdGhpcykuX3JvbGVzLmxpc3RBZ2VudHMoICg8Q2xhc3M+IHRoaXMpLmlkLCByZXF1ZXN0T3B0aW9ucyApO1xufVxuXG5mdW5jdGlvbiBnZXRBZ2VudHMoIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBQb2ludGVyLkNsYXNzW10sIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5mdW5jdGlvbiBnZXRBZ2VudHMoIHJldHJpZXZhbFByZWZlcmVuY2VzT3JSZXF1ZXN0T3B0aW9ucz86UmV0cmlldmFsUHJlZmVyZW5jZXMuQ2xhc3MsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBQb2ludGVyLkNsYXNzW10sIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4ge1xuXHRjaGVja1N0YXRlLmNhbGwoIHRoaXMgKTtcblx0cmV0dXJuICg8Q2xhc3M+IHRoaXMpLl9yb2xlcy5nZXRBZ2VudHMoICg8Q2xhc3M+IHRoaXMpLmlkLCByZXRyaWV2YWxQcmVmZXJlbmNlc09yUmVxdWVzdE9wdGlvbnMsIHJlcXVlc3RPcHRpb25zICk7XG59XG5cblxuZnVuY3Rpb24gYWRkQWdlbnQoIGFnZW50OlBvaW50ZXIuQ2xhc3MgfCBzdHJpbmcsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8SFRUUC5SZXNwb25zZS5DbGFzcz4ge1xuXHRjaGVja1N0YXRlLmNhbGwoIHRoaXMgKTtcblx0cmV0dXJuICg8Q2xhc3M+IHRoaXMpLl9yb2xlcy5hZGRBZ2VudHMoICg8Q2xhc3M+IHRoaXMpLmlkLCBbIGFnZW50IF0sIHJlcXVlc3RPcHRpb25zICk7XG59XG5mdW5jdGlvbiBhZGRBZ2VudHMoIGFnZW50czooUG9pbnRlci5DbGFzcyB8IHN0cmluZylbXSwgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxIVFRQLlJlc3BvbnNlLkNsYXNzPiB7XG5cdGNoZWNrU3RhdGUuY2FsbCggdGhpcyApO1xuXHRyZXR1cm4gKDxDbGFzcz4gdGhpcykuX3JvbGVzLmFkZEFnZW50cyggKDxDbGFzcz4gdGhpcykuaWQsIGFnZW50cywgcmVxdWVzdE9wdGlvbnMgKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQWdlbnQoIGFnZW50OlBvaW50ZXIuQ2xhc3MgfCBzdHJpbmcsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8SFRUUC5SZXNwb25zZS5DbGFzcz4ge1xuXHRjaGVja1N0YXRlLmNhbGwoIHRoaXMgKTtcblx0cmV0dXJuICg8Q2xhc3M+IHRoaXMpLl9yb2xlcy5yZW1vdmVBZ2VudHMoICg8Q2xhc3M+IHRoaXMpLmlkLCBbIGFnZW50IF0sIHJlcXVlc3RPcHRpb25zICk7XG59XG5mdW5jdGlvbiByZW1vdmVBZ2VudHMoIGFnZW50czooUG9pbnRlci5DbGFzcyB8IHN0cmluZylbXSwgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxIVFRQLlJlc3BvbnNlLkNsYXNzPiB7XG5cdGNoZWNrU3RhdGUuY2FsbCggdGhpcyApO1xuXHRyZXR1cm4gKDxDbGFzcz4gdGhpcykuX3JvbGVzLnJlbW92ZUFnZW50cyggKDxDbGFzcz4gdGhpcykuaWQsIGFnZW50cywgcmVxdWVzdE9wdGlvbnMgKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tTdGF0ZSgpOnZvaWQge1xuXHRpZiggISAoPENsYXNzPiB0aGlzKS5fcm9sZXMgKSB0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxTdGF0ZUVycm9yKCBcIlRoZSBjb250ZXh0IG9mIHRoZSBjdXJyZW50IHJvbGUsIGRvZXMgbm90IHN1cHBvcnQgcm9sZXMgbWFuYWdlbWVudC5cIiApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCBDb250ZXh0IGZyb20gXCIuLy4uL0NvbnRleHRcIjtcbmltcG9ydCAqIGFzIEVycm9ycyBmcm9tIFwiLi8uLi9FcnJvcnNcIjtcbmltcG9ydCAqIGFzIFBvaW50ZXIgZnJvbSBcIi4vLi4vUG9pbnRlclwiO1xuaW1wb3J0ICogYXMgSFRUUCBmcm9tIFwiLi8uLi9IVFRQXCI7XG5pbXBvcnQgKiBhcyBQZXJzaXN0ZWRBZ2VudCBmcm9tIFwiLi8uLi9BdXRoL1BlcnNpc3RlZEFnZW50XCI7XG5pbXBvcnQgKiBhcyBQZXJzaXN0ZWREb2N1bWVudCBmcm9tIFwiLi8uLi9QZXJzaXN0ZWREb2N1bWVudFwiO1xuaW1wb3J0ICogYXMgUmV0cmlldmFsUHJlZmVyZW5jZXMgZnJvbSBcIi4vLi4vUmV0cmlldmFsUHJlZmVyZW5jZXNcIjtcbmltcG9ydCAqIGFzIFBlcnNpc3RlZFByb3RlY3RlZERvY3VtZW50IGZyb20gXCIuLy4uL1BlcnNpc3RlZFByb3RlY3RlZERvY3VtZW50XCI7XG5pbXBvcnQgKiBhcyBQZXJzaXN0ZWRSb2xlIGZyb20gXCIuL1BlcnNpc3RlZFJvbGVcIjtcbmltcG9ydCAqIGFzIFJvbGUgZnJvbSBcIi4vUm9sZVwiO1xuaW1wb3J0ICogYXMgU1BBUlFMIGZyb20gXCIuLy4uL1NQQVJRTFwiO1xuaW1wb3J0ICogYXMgVVJJIGZyb20gXCIuLy4uL1JERi9VUklcIjtcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuLy4uL1V0aWxzXCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDbGFzcyB7XG5cdHByaXZhdGUgY29udGV4dDpDb250ZXh0O1xuXG5cdGNvbnN0cnVjdG9yKCBjb250ZXh0OkNvbnRleHQgKSB7XG5cdFx0dGhpcy5jb250ZXh0ID0gY29udGV4dDtcblx0fVxuXG5cdC8vIFRPRE86IFJlcXVlc3RzIG11c3QgcmV0dXJuIGFsbCB0aGUgcmVzcG9uc2VzIG1hZGVcblx0Y3JlYXRlQ2hpbGQ8VCBleHRlbmRzIFJvbGUuQ2xhc3M+KCBwYXJlbnRSb2xlOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHJvbGU6VCwgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIFQgJiBQZXJzaXN0ZWRSb2xlLkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+O1xuXHRjcmVhdGVDaGlsZDxUIGV4dGVuZHMgUm9sZS5DbGFzcz4oIHBhcmVudFJvbGU6c3RyaW5nIHwgUG9pbnRlci5DbGFzcywgcm9sZTpULCBzbHVnPzpzdHJpbmcsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBUICYgUGVyc2lzdGVkUm9sZS5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdPjtcblx0Y3JlYXRlQ2hpbGQ8VCBleHRlbmRzIFJvbGUuQ2xhc3M+KCBwYXJlbnRSb2xlOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIHJvbGU6VCwgc2x1Z09yUmVxdWVzdE9wdGlvbnM/OmFueSwgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIFQgJiBQZXJzaXN0ZWRSb2xlLkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+IHtcblx0XHRsZXQgcGFyZW50VVJJOnN0cmluZyA9IFV0aWxzLmlzU3RyaW5nKCBwYXJlbnRSb2xlICkgPyA8c3RyaW5nPiBwYXJlbnRSb2xlIDogKCA8UG9pbnRlci5DbGFzcz4gcGFyZW50Um9sZSkuaWQ7XG5cdFx0bGV0IHNsdWc6c3RyaW5nID0gVXRpbHMuaXNTdHJpbmcoIHNsdWdPclJlcXVlc3RPcHRpb25zICkgPyBzbHVnT3JSZXF1ZXN0T3B0aW9ucyA6IG51bGw7XG5cdFx0cmVxdWVzdE9wdGlvbnMgPSBIVFRQLlJlcXVlc3QuVXRpbC5pc09wdGlvbnMoIHNsdWdPclJlcXVlc3RPcHRpb25zICkgPyBzbHVnT3JSZXF1ZXN0T3B0aW9ucyA6IHJlcXVlc3RPcHRpb25zO1xuXG5cdFx0bGV0IGNvbnRhaW5lclVSSTpzdHJpbmc7XG5cdFx0bGV0IHBlcnNpc3RlZFJvbGU6VCAmIFBlcnNpc3RlZFJvbGUuQ2xhc3M7XG5cdFx0bGV0IHJlc3BvbnNlQ3JlYXRlZDpIVFRQLlJlc3BvbnNlLkNsYXNzO1xuXHRcdHJldHVybiB0aGlzLnJlc29sdmVVUkkoIFwiXCIgKS50aGVuKCAoIHVyaTpzdHJpbmcgKSA9PiB7XG5cdFx0XHRjb250YWluZXJVUkkgPSB1cmk7XG5cblx0XHRcdHBhcmVudFVSSSA9IFVSSS5VdGlsLnJlc29sdmUoIGNvbnRhaW5lclVSSSwgcGFyZW50VVJJICk7XG5cdFx0XHRpZiggISBVUkkuVXRpbC5pc0Jhc2VPZiggY29udGFpbmVyVVJJLCBwYXJlbnRVUkkgKSApIHRocm93IG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiVGhlIHBhcmVudCByb2xlIHByb3ZpZGVkIGlzIG5vdCBhIHZhbGlkIHJvbGUgb2YgdGhlIGN1cnJlbnQgY29udGV4dC5cIiApO1xuXHRcdFx0cmV0dXJuIHRoaXMuY29udGV4dC5kb2N1bWVudHMuZXhpc3RzKCBwYXJlbnRVUkkgKTtcblxuXHRcdH0gKS50aGVuKCAoIFsgZXhpc3RzLCByZXNwb25zZSBdOlsgYm9vbGVhbiwgSFRUUC5SZXNwb25zZS5DbGFzcyBdICkgPT4ge1xuXHRcdFx0aWYoICEgZXhpc3RzICkgdGhyb3cgbmV3IEVycm9ycy5JbGxlZ2FsQXJndW1lbnRFcnJvciggXCJUaGUgcGFyZW50IHJvbGUgcHJvdmlkZWQgZG9lcyBub3QgZXhpc3QuXCIgKTtcblx0XHRcdHJldHVybiB0aGlzLmNvbnRleHQuZG9jdW1lbnRzLmNyZWF0ZUNoaWxkPFQ+KCBjb250YWluZXJVUkksIHJvbGUsIHNsdWcsIHJlcXVlc3RPcHRpb25zICk7XG5cblx0XHR9ICkudGhlbiggKCBbIG5ld1JvbGUsIHJlc3BvbnNlIF06WyBUICYgUGVyc2lzdGVkRG9jdW1lbnQuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3NdICkgPT4ge1xuXHRcdFx0cmVzcG9uc2VDcmVhdGVkID0gcmVzcG9uc2U7XG5cdFx0XHRwZXJzaXN0ZWRSb2xlID0gUGVyc2lzdGVkUm9sZS5GYWN0b3J5LmRlY29yYXRlKCBuZXdSb2xlLCB0aGlzICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5jb250ZXh0LmRvY3VtZW50cy5hZGRNZW1iZXIoIHBhcmVudFVSSSwgbmV3Um9sZSApO1xuXG5cdFx0fSApLnRoZW4oICggcmVzcG9uc2UgKSA9PiB7XG5cdFx0XHRyZXR1cm4gWyBwZXJzaXN0ZWRSb2xlLCByZXNwb25zZUNyZWF0ZWQgXTtcblx0XHR9ICk7XG5cdH1cblxuXHRnZXQ8VD4oIHJvbGVVUkk6c3RyaW5nLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgVCAmIFBlcnNpc3RlZFJvbGUuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4ge1xuXHRcdHJldHVybiB0aGlzLnJlc29sdmVVUkkoIHJvbGVVUkkgKS50aGVuKCAoIHVyaTpzdHJpbmcgKSA9PiB7XG5cdFx0XHRyZXR1cm4gdGhpcy5jb250ZXh0LmRvY3VtZW50cy5nZXQ8VCAmIFBlcnNpc3RlZFJvbGUuQ2xhc3M+KCB1cmksIHJlcXVlc3RPcHRpb25zICk7XG5cdFx0fSApO1xuXHR9XG5cblx0bGlzdEFnZW50cyggcm9sZVVSSTpzdHJpbmcsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBQZXJzaXN0ZWRQcm90ZWN0ZWREb2N1bWVudC5DbGFzc1tdLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+IHtcblx0XHRyZXR1cm4gdGhpcy5nZXRBZ2VudHNBY2Nlc3NQb2ludCggcm9sZVVSSSApLnRoZW4oICggYWdlbnRzQWNjZXNzUG9pbnQ6UG9pbnRlci5DbGFzcyApID0+IHtcblx0XHRcdHJldHVybiB0aGlzLmNvbnRleHQuZG9jdW1lbnRzLmxpc3RNZW1iZXJzKCBhZ2VudHNBY2Nlc3NQb2ludC5pZCwgcmVxdWVzdE9wdGlvbnMgKTtcblx0XHR9ICkudGhlbiggKCBbIGFnZW50cywgcmVzcG9uc2UgXTpbIFBlcnNpc3RlZERvY3VtZW50LkNsYXNzW10sIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXSApID0+IHtcblx0XHRcdHJldHVybiBbIGFnZW50cy5tYXAoIGFnZW50ID0+IFBlcnNpc3RlZFByb3RlY3RlZERvY3VtZW50LkZhY3RvcnkuZGVjb3JhdGUoIGFnZW50ICkgKSwgcmVzcG9uc2UgXTtcblx0XHR9ICk7XG5cdH1cblxuXHRnZXRBZ2VudHM8VD4oIHJvbGVVUkk6c3RyaW5nLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgKFQgJiBQZXJzaXN0ZWRBZ2VudC5DbGFzcylbXSwgSFRUUC5SZXNwb25zZS5DbGFzcyBdPjtcblx0Z2V0QWdlbnRzPFQ+KCByb2xlVVJJOnN0cmluZywgcmV0cmlldmFsUHJlZmVyZW5jZXM/OlJldHJpZXZhbFByZWZlcmVuY2VzLkNsYXNzLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgKFQgJiBQZXJzaXN0ZWRBZ2VudC5DbGFzcylbXSwgSFRUUC5SZXNwb25zZS5DbGFzcyBdPjtcblx0Z2V0QWdlbnRzPFQ+KCByb2xlVVJJOnN0cmluZywgcmV0cmlldmFsUHJlZmVyZW5jZXNPclJlcXVlc3RPcHRpb25zPzpSZXRyaWV2YWxQcmVmZXJlbmNlcy5DbGFzcywgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIChUICYgUGVyc2lzdGVkQWdlbnQuQ2xhc3MpW10sIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4ge1xuXHRcdHJldHVybiB0aGlzLmdldEFnZW50c0FjY2Vzc1BvaW50KCByb2xlVVJJICkudGhlbiggKCBhZ2VudHNBY2Nlc3NQb2ludDpQb2ludGVyLkNsYXNzICkgPT4ge1xuXHRcdFx0cmV0dXJuIHRoaXMuY29udGV4dC5kb2N1bWVudHMuZ2V0TWVtYmVyczxUPiggYWdlbnRzQWNjZXNzUG9pbnQuaWQsIHJldHJpZXZhbFByZWZlcmVuY2VzT3JSZXF1ZXN0T3B0aW9ucywgcmVxdWVzdE9wdGlvbnMgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRhZGRBZ2VudCggcm9sZVVSSTpzdHJpbmcsIGFnZW50OlBvaW50ZXIuQ2xhc3MgfCBzdHJpbmcsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8SFRUUC5SZXNwb25zZS5DbGFzcz4ge1xuXHRcdHJldHVybiB0aGlzLmFkZEFnZW50cyggcm9sZVVSSSwgWyBhZ2VudCBdLCByZXF1ZXN0T3B0aW9ucyApO1xuXHR9XG5cblx0YWRkQWdlbnRzKCByb2xlVVJJOnN0cmluZywgYWdlbnRzOihQb2ludGVyLkNsYXNzIHwgc3RyaW5nKVtdLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+IHtcblx0XHRyZXR1cm4gdGhpcy5nZXRBZ2VudHNBY2Nlc3NQb2ludCggcm9sZVVSSSApLnRoZW4oICggYWdlbnRzQWNjZXNzUG9pbnQ6UG9pbnRlci5DbGFzcyApID0+IHtcblx0XHRcdHJldHVybiB0aGlzLmNvbnRleHQuZG9jdW1lbnRzLmFkZE1lbWJlcnMoIGFnZW50c0FjY2Vzc1BvaW50LmlkLCBhZ2VudHMsIHJlcXVlc3RPcHRpb25zICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmVtb3ZlQWdlbnQoIHJvbGVVUkk6c3RyaW5nLCBhZ2VudDpQb2ludGVyLkNsYXNzIHwgc3RyaW5nLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+IHtcblx0XHRyZXR1cm4gdGhpcy5yZW1vdmVBZ2VudHMoIHJvbGVVUkksIFsgYWdlbnQgXSwgcmVxdWVzdE9wdGlvbnMgKTtcblx0fVxuXG5cdHJlbW92ZUFnZW50cyggcm9sZVVSSTpzdHJpbmcsIGFnZW50czooUG9pbnRlci5DbGFzcyB8IHN0cmluZylbXSwgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxIVFRQLlJlc3BvbnNlLkNsYXNzPiB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0QWdlbnRzQWNjZXNzUG9pbnQoIHJvbGVVUkkgKS50aGVuKCAoIGFnZW50c0FjY2Vzc1BvaW50OlBvaW50ZXIuQ2xhc3MgKSA9PiB7XG5cdFx0XHRyZXR1cm4gdGhpcy5jb250ZXh0LmRvY3VtZW50cy5yZW1vdmVNZW1iZXJzKCBhZ2VudHNBY2Nlc3NQb2ludC5pZCwgYWdlbnRzLCByZXF1ZXN0T3B0aW9ucyApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHByaXZhdGUgcmVzb2x2ZVVSSSggYWdlbnRVUkk6c3RyaW5nICk6UHJvbWlzZTxzdHJpbmc+IHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPiggKCByZXNvbHZlOiggdXJpOnN0cmluZyApID0+IHZvaWQgKSA9PiB7XG5cdFx0XHRsZXQgY29udGFpbmVyVVJJOnN0cmluZyA9IHRoaXMuY29udGV4dC5yZXNvbHZlKCB0aGlzLmdldENvbnRhaW5lclVSSSgpICk7XG5cdFx0XHRsZXQgdXJpOnN0cmluZyA9IFVSSS5VdGlsLnJlc29sdmUoIGNvbnRhaW5lclVSSSwgYWdlbnRVUkkgKTtcblxuXHRcdFx0aWYoICEgVVJJLlV0aWwuaXNCYXNlT2YoIGNvbnRhaW5lclVSSSwgdXJpICkgKSB0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIlRoZSBVUkkgcHJvdmlkZWQgaXMgbm90IGEgdmFsaWQgcm9sZSBvZiB0aGUgY3VycmVudCBjb250ZXh0LlwiICk7XG5cblx0XHRcdHJlc29sdmUoIHVyaSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFRPRE86IE9wdGltaXplXG5cdHByaXZhdGUgZ2V0QWdlbnRzQWNjZXNzUG9pbnQoIHJvbGVVUkk6c3RyaW5nICk6UHJvbWlzZTxQb2ludGVyLkNsYXNzPiB7XG5cdFx0cmV0dXJuIHRoaXMucmVzb2x2ZVVSSSggcm9sZVVSSSApLnRoZW4oICggdXJpOnN0cmluZyApID0+IHtcblx0XHRcdHJldHVybiB0aGlzLmNvbnRleHQuZG9jdW1lbnRzLmV4ZWN1dGVTRUxFQ1RRdWVyeSggdXJpLCBgIHNlbGVjdCBkaXN0aW5jdCA/YWdlbnRzQWNjZXNzUG9pbnQgd2hlcmUge1xuXHRcdFx0XHQ8JHsgdXJpIH0+IDxodHRwczovL2NhcmJvbmxkcC5jb20vbnMvdjEvcGxhdGZvcm0jYWNjZXNzUG9pbnQ+ID9hZ2VudHNBY2Nlc3NQb2ludCAuXG5cdFx0XHRcdD9hZ2VudHNBY2Nlc3NQb2ludCA8aHR0cDovL3d3dy53My5vcmcvbnMvbGRwI2hhc01lbWJlclJlbGF0aW9uPiA8aHR0cHM6Ly9jYXJib25sZHAuY29tL25zL3YxL3NlY3VyaXR5I2FnZW50PiAuXG5cdFx0XHR9YCApO1xuXHRcdH0gKS50aGVuKCAoIFsgc2VsZWN0UmVzdWx0cywgcmVzcG9uc2UgXTpbIFNQQVJRTC5TRUxFQ1RSZXN1bHRzLkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0gKSA9PiB7XG5cdFx0XHRyZXR1cm4gPFBvaW50ZXIuQ2xhc3M+IHNlbGVjdFJlc3VsdHMuYmluZGluZ3NbIDAgXVsgXCJhZ2VudHNBY2Nlc3NQb2ludFwiIF07XG5cdFx0fSApO1xuXHR9XG5cblx0cHJpdmF0ZSBnZXRDb250YWluZXJVUkkoKTpzdHJpbmcge1xuXHRcdGlmKCAhIHRoaXMuY29udGV4dC5oYXNTZXR0aW5nKCBcInBsYXRmb3JtLnJvbGVzLmNvbnRhaW5lclwiICkgKSB0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxTdGF0ZUVycm9yKCBcIlRoZSByb2xlcyBjb250YWluZXIgc2V0dGluZyBoYXNuJ3QgYmVlbiBkZWNsYXJlZC5cIiApO1xuXHRcdHJldHVybiB0aGlzLmNvbnRleHQuZ2V0U2V0dGluZyggXCJwbGF0Zm9ybS5yb2xlcy5jb250YWluZXJcIiApO1xuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xhc3M7XG4iLCJpbXBvcnQgKiBhcyBDcmVkZW50aWFscyBmcm9tIFwiLi9DcmVkZW50aWFsc1wiO1xuXG5leHBvcnQgY2xhc3MgQ2xhc3MgaW1wbGVtZW50cyBDcmVkZW50aWFscy5DbGFzcyB7XG5cdHByaXZhdGUgX3VzZXJuYW1lOnN0cmluZztcblx0cHJpdmF0ZSBfcGFzc3dvcmQ6c3RyaW5nO1xuXG5cdGdldCB1c2VybmFtZSgpOnN0cmluZyB7IHJldHVybiB0aGlzLl91c2VybmFtZTsgfTtcblxuXHRnZXQgcGFzc3dvcmQoKTpzdHJpbmcgeyByZXR1cm4gdGhpcy5fcGFzc3dvcmQ7IH07XG5cblx0Y29uc3RydWN0b3IoIHVzZXJuYW1lOnN0cmluZywgcGFzc3dvcmQ6c3RyaW5nICkge1xuXHRcdHRoaXMuX3VzZXJuYW1lID0gdXNlcm5hbWU7XG5cdFx0dGhpcy5fcGFzc3dvcmQgPSBwYXNzd29yZDtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCAqIGFzIEhUVFAgZnJvbSBcIi4vLi4vSFRUUFwiO1xuaW1wb3J0IEF1dGhlbnRpY2F0b3IgZnJvbSBcIi4vQXV0aGVudGljYXRvclwiO1xuaW1wb3J0ICogYXMgRXJyb3JzIGZyb20gXCIuLy4uL0Vycm9yc1wiO1xuaW1wb3J0IFVzZXJuYW1lQW5kUGFzc3dvcmRUb2tlbiBmcm9tIFwiLi9Vc2VybmFtZUFuZFBhc3N3b3JkVG9rZW5cIjtcbmltcG9ydCAqIGFzIFVzZXJuYW1lQW5kUGFzc3dvcmRDcmVkZW50aWFscyBmcm9tIFwiLi9Vc2VybmFtZUFuZFBhc3N3b3JkQ3JlZGVudGlhbHNcIjtcblxuXG5leHBvcnQgY2xhc3MgQ2xhc3MgaW1wbGVtZW50cyBBdXRoZW50aWNhdG9yPFVzZXJuYW1lQW5kUGFzc3dvcmRUb2tlbj4ge1xuXHRwcml2YXRlIGNyZWRlbnRpYWxzOlVzZXJuYW1lQW5kUGFzc3dvcmRDcmVkZW50aWFscy5DbGFzcztcblxuXHRpc0F1dGhlbnRpY2F0ZWQoKTpib29sZWFuIHtcblx0XHRyZXR1cm4gISAhIHRoaXMuY3JlZGVudGlhbHM7XG5cdH1cblxuXHRhdXRoZW50aWNhdGUoIGF1dGhlbnRpY2F0aW9uVG9rZW46VXNlcm5hbWVBbmRQYXNzd29yZFRva2VuICk6UHJvbWlzZTxVc2VybmFtZUFuZFBhc3N3b3JkQ3JlZGVudGlhbHMuQ2xhc3M+IHtcblx0XHRpZiggYXV0aGVudGljYXRpb25Ub2tlbiA9PT0gbnVsbCApIHRocm93IG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiVGhlIGF1dGhlbnRpY2F0aW9uVG9rZW4gY2Fubm90IGJlIG51bGwuXCIgKTtcblxuXHRcdHJldHVybiBuZXcgUHJvbWlzZTxVc2VybmFtZUFuZFBhc3N3b3JkQ3JlZGVudGlhbHMuQ2xhc3M+KCAoIHJlc29sdmU6KCByZXN1bHQ6YW55ICkgPT4gdm9pZCwgcmVqZWN0OiggZXJyb3I6YW55ICkgPT4gdm9pZCApID0+IHtcblx0XHRcdGlmKCAhIGF1dGhlbnRpY2F0aW9uVG9rZW4udXNlcm5hbWUgKSB0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIlRoZSB1c2VybmFtZSBjYW5ub3QgYmUgZW1wdHkuXCIgKTtcblx0XHRcdGlmKCAhIGF1dGhlbnRpY2F0aW9uVG9rZW4ucGFzc3dvcmQgKSB0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIlRoZSBwYXNzd29yZCBjYW5ub3QgYmUgZW1wdHkuXCIgKTtcblxuXHRcdFx0dGhpcy5jcmVkZW50aWFscyA9IG5ldyBVc2VybmFtZUFuZFBhc3N3b3JkQ3JlZGVudGlhbHMuQ2xhc3MoIGF1dGhlbnRpY2F0aW9uVG9rZW4udXNlcm5hbWUsIGF1dGhlbnRpY2F0aW9uVG9rZW4ucGFzc3dvcmQgKTtcblxuXHRcdFx0cmVzb2x2ZSggdGhpcy5jcmVkZW50aWFscyApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGFkZEF1dGhlbnRpY2F0aW9uKCByZXF1ZXN0T3B0aW9uczpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOkhUVFAuUmVxdWVzdC5PcHRpb25zIHtcblx0XHRpZiggISB0aGlzLmlzQXV0aGVudGljYXRlZCgpICkgdGhyb3cgbmV3IEVycm9ycy5JbGxlZ2FsU3RhdGVFcnJvciggXCJUaGUgYXV0aGVudGljYXRvciBpc24ndCBhdXRoZW50aWNhdGVkLlwiICk7XG5cblx0XHRsZXQgaGVhZGVyczpNYXA8c3RyaW5nLCBIVFRQLkhlYWRlci5DbGFzcz4gPSByZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID8gcmVxdWVzdE9wdGlvbnMuaGVhZGVycyA6IHJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBuZXcgTWFwPHN0cmluZywgSFRUUC5IZWFkZXIuQ2xhc3M+KCk7XG5cblx0XHR0aGlzLmFkZEJhc2ljQXV0aGVudGljYXRpb25IZWFkZXIoIGhlYWRlcnMgKTtcblxuXHRcdHJldHVybiByZXF1ZXN0T3B0aW9ucztcblx0fVxuXG5cdGNsZWFyQXV0aGVudGljYXRpb24oKTp2b2lkIHtcblx0XHR0aGlzLmNyZWRlbnRpYWxzID0gbnVsbDtcblx0fVxuXG5cdHByaXZhdGUgYWRkQmFzaWNBdXRoZW50aWNhdGlvbkhlYWRlciggaGVhZGVyczpNYXA8c3RyaW5nLCBIVFRQLkhlYWRlci5DbGFzcz4gKTp2b2lkIHtcblx0XHRpZiggaGVhZGVycy5oYXMoIFwiYXV0aG9yaXphdGlvblwiICkgKSByZXR1cm47XG5cblx0XHRsZXQgaGVhZGVyOkhUVFAuSGVhZGVyLkNsYXNzID0gbmV3IEhUVFAuSGVhZGVyLkNsYXNzKCk7XG5cdFx0aGVhZGVycy5zZXQoIFwiYXV0aG9yaXphdGlvblwiLCBoZWFkZXIgKTtcblxuXHRcdGxldCBhdXRob3JpemF0aW9uOnN0cmluZyA9IFwiQmFzaWMgXCIgKyB0b0I2NCggdGhpcy5jcmVkZW50aWFscy51c2VybmFtZSArIFwiOlwiICsgdGhpcy5jcmVkZW50aWFscy5wYXNzd29yZCApO1xuXHRcdGhlYWRlci52YWx1ZXMucHVzaCggbmV3IEhUVFAuSGVhZGVyLlZhbHVlKCBhdXRob3JpemF0aW9uICkgKTtcblx0fVxufVxuXG5mdW5jdGlvbiB0b0I2NCggc3RyOnN0cmluZyApOnN0cmluZyB7XG5cdHJldHVybiAoIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiICkgPyBidG9hKCBzdHIgKSA6IG5ldyBCdWZmZXIoIHN0ciApLnRvU3RyaW5nKCBcImJhc2U2NFwiICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0IENvbnRleHQgZnJvbSBcIi4vLi4vQ29udGV4dFwiO1xuaW1wb3J0ICogYXMgRXJyb3JzIGZyb20gXCIuLy4uL0Vycm9yc1wiO1xuaW1wb3J0ICogYXMgRnJlZVJlc291cmNlcyBmcm9tIFwiLi8uLi9GcmVlUmVzb3VyY2VzXCI7XG5pbXBvcnQgKiBhcyBIVFRQIGZyb20gXCIuLy4uL0hUVFBcIjtcbmltcG9ydCAqIGFzIEpTT05MRCBmcm9tIFwiLi8uLi9KU09OTERcIjtcbmltcG9ydCAqIGFzIExEUCBmcm9tIFwiLi8uLi9MRFBcIjtcbmltcG9ydCAqIGFzIE5TIGZyb20gXCIuLy4uL05TXCI7XG5pbXBvcnQgKiBhcyBPYmplY3RTY2hlbWEgZnJvbSBcIi4vLi4vT2JqZWN0U2NoZW1hXCI7XG5pbXBvcnQgKiBhcyBQZXJzaXN0ZWREb2N1bWVudCBmcm9tIFwiLi8uLi9QZXJzaXN0ZWREb2N1bWVudFwiO1xuaW1wb3J0ICogYXMgUkRGIGZyb20gXCIuLy4uL1JERlwiO1xuaW1wb3J0ICogYXMgUmVzb3VyY2UgZnJvbSBcIi4vLi4vUmVzb3VyY2VcIjtcbmltcG9ydCBBdXRoZW50aWNhdG9yIGZyb20gXCIuL0F1dGhlbnRpY2F0b3JcIjtcbmltcG9ydCBBdXRoZW50aWNhdGlvblRva2VuIGZyb20gXCIuL0F1dGhlbnRpY2F0aW9uVG9rZW5cIjtcbmltcG9ydCBCYXNpY0F1dGhlbnRpY2F0b3IgZnJvbSBcIi4vQmFzaWNBdXRoZW50aWNhdG9yXCI7XG5pbXBvcnQgVXNlcm5hbWVBbmRQYXNzd29yZFRva2VuIGZyb20gXCIuL1VzZXJuYW1lQW5kUGFzc3dvcmRUb2tlblwiO1xuaW1wb3J0ICogYXMgVG9rZW4gZnJvbSBcIi4vVG9rZW5cIjtcbmltcG9ydCAqIGFzIENyZWRlbnRpYWxzIGZyb20gXCIuL0NyZWRlbnRpYWxzXCI7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi8uLi9VdGlsc1wiO1xuXG5leHBvcnQgY2xhc3MgQ2xhc3MgaW1wbGVtZW50cyBBdXRoZW50aWNhdG9yPFVzZXJuYW1lQW5kUGFzc3dvcmRUb2tlbj4ge1xuXHRwcml2YXRlIHN0YXRpYyBUT0tFTl9DT05UQUlORVI6c3RyaW5nID0gXCJhdXRoLXRva2Vucy9cIjtcblxuXHRwcml2YXRlIGNvbnRleHQ6Q29udGV4dDtcblx0cHJpdmF0ZSBiYXNpY0F1dGhlbnRpY2F0b3I6QmFzaWNBdXRoZW50aWNhdG9yO1xuXHRwcml2YXRlIF9jcmVkZW50aWFsczpUb2tlbi5DbGFzcztcblxuXHRjb25zdHJ1Y3RvciggY29udGV4dDpDb250ZXh0ICkge1xuXHRcdGlmKCBjb250ZXh0ID09PSBudWxsICkgdGhyb3cgbmV3IEVycm9ycy5JbGxlZ2FsQXJndW1lbnRFcnJvciggXCJjb250ZXh0IGNhbm5vdCBiZSBudWxsXCIgKTtcblxuXHRcdHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG5cdFx0dGhpcy5iYXNpY0F1dGhlbnRpY2F0b3IgPSBuZXcgQmFzaWNBdXRoZW50aWNhdG9yKCk7XG5cdH1cblxuXHRpc0F1dGhlbnRpY2F0ZWQoKTpib29sZWFuIHtcblx0XHRyZXR1cm4gISAhIHRoaXMuX2NyZWRlbnRpYWxzICYmIHRoaXMuX2NyZWRlbnRpYWxzLmV4cGlyYXRpb25UaW1lID4gbmV3IERhdGUoKTtcblx0fVxuXG5cdGF1dGhlbnRpY2F0ZSggYXV0aGVudGljYXRpb25Ub2tlbjpVc2VybmFtZUFuZFBhc3N3b3JkVG9rZW4gKTpQcm9taXNlPFRva2VuLkNsYXNzPjtcblx0YXV0aGVudGljYXRlKCBjcmVkZW50aWFsczpUb2tlbi5DbGFzcyApOlByb21pc2U8VG9rZW4uQ2xhc3M+O1xuXHRhdXRoZW50aWNhdGUoIGF1dGhlbnRpY2F0aW9uT3JDcmVkZW50aWFsczphbnkgKTpQcm9taXNlPFRva2VuLkNsYXNzPiB7XG5cdFx0aWYoIGF1dGhlbnRpY2F0aW9uT3JDcmVkZW50aWFscyBpbnN0YW5jZW9mIFVzZXJuYW1lQW5kUGFzc3dvcmRUb2tlbiApIHJldHVybiB0aGlzLmJhc2ljQXV0aGVudGljYXRvci5hdXRoZW50aWNhdGUoIGF1dGhlbnRpY2F0aW9uT3JDcmVkZW50aWFscyApLnRoZW4oICgpID0+IHtcblx0XHRcdHJldHVybiB0aGlzLmNyZWF0ZVRva2VuKCk7XG5cdFx0fSApLnRoZW4oICggWyB0b2tlbiwgcmVzcG9uc2UgXTpbIFRva2VuLkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0gKTpUb2tlbi5DbGFzcyA9PiB7XG5cdFx0XHR0aGlzLmJhc2ljQXV0aGVudGljYXRvci5jbGVhckF1dGhlbnRpY2F0aW9uKCk7XG5cdFx0XHR0aGlzLl9jcmVkZW50aWFscyA9IHRva2VuO1xuXHRcdFx0cmV0dXJuIHRva2VuO1xuXHRcdH0gKTtcblxuXHRcdGxldCBjcmVkZW50aWFsczpUb2tlbi5DbGFzcyA9IDxUb2tlbi5DbGFzcz4gYXV0aGVudGljYXRpb25PckNyZWRlbnRpYWxzO1xuXHRcdGlmKCBVdGlscy5pc1N0cmluZyggY3JlZGVudGlhbHMuZXhwaXJhdGlvblRpbWUgKSApIGF1dGhlbnRpY2F0aW9uT3JDcmVkZW50aWFscy5leHBpcmF0aW9uVGltZSA9IG5ldyBEYXRlKCA8YW55PiBjcmVkZW50aWFscy5leHBpcmF0aW9uVGltZSApO1xuXHRcdGlmKCBjcmVkZW50aWFscy5leHBpcmF0aW9uVGltZSA8PSBuZXcgRGF0ZSgpICkgcmV0dXJuIFByb21pc2UucmVqZWN0PGFueT4oIG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiVGhlIHRva2VuIHByb3ZpZGVkIGluIG5vdCB2YWxpZC5cIiApICk7XG5cblx0XHR0aGlzLl9jcmVkZW50aWFscyA9IGNyZWRlbnRpYWxzO1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoIGNyZWRlbnRpYWxzICk7XG5cdH1cblxuXHRhZGRBdXRoZW50aWNhdGlvbiggcmVxdWVzdE9wdGlvbnM6SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpIVFRQLlJlcXVlc3QuT3B0aW9ucyB7XG5cdFx0bGV0IGhlYWRlcnM6TWFwPHN0cmluZywgSFRUUC5IZWFkZXIuQ2xhc3M+ID0gcmVxdWVzdE9wdGlvbnMuaGVhZGVycyA/IHJlcXVlc3RPcHRpb25zLmhlYWRlcnMgOiByZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gbmV3IE1hcDxzdHJpbmcsIEhUVFAuSGVhZGVyLkNsYXNzPigpO1xuXG5cdFx0dGhpcy5hZGRUb2tlbkF1dGhlbnRpY2F0aW9uSGVhZGVyKCBoZWFkZXJzICk7XG5cblx0XHRyZXR1cm4gcmVxdWVzdE9wdGlvbnM7XG5cdH1cblxuXHRjbGVhckF1dGhlbnRpY2F0aW9uKCk6dm9pZCB7XG5cdFx0dGhpcy5fY3JlZGVudGlhbHMgPSBudWxsO1xuXHR9XG5cblx0cHJpdmF0ZSBjcmVhdGVUb2tlbigpOlByb21pc2U8WyBUb2tlbi5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdPiB7XG5cdFx0bGV0IHVyaTpzdHJpbmcgPSB0aGlzLmNvbnRleHQucmVzb2x2ZSggQ2xhc3MuVE9LRU5fQ09OVEFJTkVSICk7XG5cdFx0bGV0IHJlcXVlc3RPcHRpb25zOkhUVFAuUmVxdWVzdC5PcHRpb25zID0ge307XG5cblx0XHR0aGlzLmJhc2ljQXV0aGVudGljYXRvci5hZGRBdXRoZW50aWNhdGlvbiggcmVxdWVzdE9wdGlvbnMgKTtcblxuXHRcdEhUVFAuUmVxdWVzdC5VdGlsLnNldEFjY2VwdEhlYWRlciggXCJhcHBsaWNhdGlvbi9sZCtqc29uXCIsIHJlcXVlc3RPcHRpb25zICk7XG5cdFx0SFRUUC5SZXF1ZXN0LlV0aWwuc2V0UHJlZmVycmVkSW50ZXJhY3Rpb25Nb2RlbCggTlMuTERQLkNsYXNzLlJERlNvdXJjZSwgcmVxdWVzdE9wdGlvbnMgKTtcblxuXHRcdHJldHVybiBIVFRQLlJlcXVlc3QuU2VydmljZS5wb3N0KCB1cmksIG51bGwsIHJlcXVlc3RPcHRpb25zLCBuZXcgSlNPTkxELlBhcnNlci5DbGFzcygpICkudGhlbiggKCBbIGV4cGFuZGVkUmVzdWx0LCByZXNwb25zZSBdOlsgYW55LCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0gKSA9PiB7XG5cdFx0XHRsZXQgZnJlZU5vZGVzOlJERi5Ob2RlLkNsYXNzW10gPSBSREYuTm9kZS5VdGlsLmdldEZyZWVOb2RlcyggZXhwYW5kZWRSZXN1bHQgKTtcblxuXHRcdFx0bGV0IGZyZWVSZXNvdXJjZXM6RnJlZVJlc291cmNlcy5DbGFzcyA9IHRoaXMuY29udGV4dC5kb2N1bWVudHMuX2dldEZyZWVSZXNvdXJjZXMoIGZyZWVOb2RlcyApO1xuXHRcdFx0bGV0IHRva2VuUmVzb3VyY2VzOlRva2VuLkNsYXNzW10gPSA8VG9rZW4uQ2xhc3NbXT4gZnJlZVJlc291cmNlcy5nZXRSZXNvdXJjZXMoKS5maWx0ZXIoIHJlc291cmNlID0+IFJlc291cmNlLlV0aWwuaGFzVHlwZSggcmVzb3VyY2UsIFRva2VuLlJERl9DTEFTUyApICk7XG5cblx0XHRcdGlmKCB0b2tlblJlc291cmNlcy5sZW5ndGggPT09IDAgKSB0aHJvdyBuZXcgSFRUUC5FcnJvcnMuQmFkUmVzcG9uc2VFcnJvciggXCJObyAnXCIgKyBUb2tlbi5SREZfQ0xBU1MgKyBcIicgd2FzIHJldHVybmVkLlwiLCByZXNwb25zZSApO1xuXHRcdFx0aWYoIHRva2VuUmVzb3VyY2VzLmxlbmd0aCA+IDEgKSB0aHJvdyBuZXcgSFRUUC5FcnJvcnMuQmFkUmVzcG9uc2VFcnJvciggXCJNdWx0aXBsZSAnXCIgKyBUb2tlbi5SREZfQ0xBU1MgKyBcIicgd2VyZSByZXR1cm5lZC4gXCIsIHJlc3BvbnNlICk7XG5cdFx0XHRsZXQgdG9rZW46VG9rZW4uQ2xhc3MgPSB0b2tlblJlc291cmNlc1sgMCBdO1xuXG5cdFx0XHRsZXQgYWdlbnREb2N1bWVudHM6UkRGLkRvY3VtZW50LkNsYXNzW10gPSBSREYuRG9jdW1lbnQuVXRpbC5nZXREb2N1bWVudHMoIGV4cGFuZGVkUmVzdWx0ICkuZmlsdGVyKCByZGZEb2N1bWVudCA9PiByZGZEb2N1bWVudFsgXCJAaWRcIiBdID09PSB0b2tlbi5hZ2VudC5pZCApO1xuXHRcdFx0YWdlbnREb2N1bWVudHMuZm9yRWFjaCggZG9jdW1lbnQgPT4gdGhpcy5jb250ZXh0LmRvY3VtZW50cy5fZ2V0UGVyc2lzdGVkRG9jdW1lbnQoIGRvY3VtZW50LCByZXNwb25zZSApICk7XG5cblx0XHRcdGxldCByZXNwb25zZU1ldGFkYXRhOkxEUC5SZXNwb25zZU1ldGFkYXRhLkNsYXNzID0gPExEUC5SZXNwb25zZU1ldGFkYXRhLkNsYXNzPiBmcmVlUmVzb3VyY2VzLmdldFJlc291cmNlcygpLmZpbmQoIHJlc291cmNlID0+IFJlc291cmNlLlV0aWwuaGFzVHlwZSggcmVzb3VyY2UsIExEUC5SZXNwb25zZU1ldGFkYXRhLlJERl9DTEFTUyApICk7XG5cblx0XHRcdGlmKCAhICEgcmVzcG9uc2VNZXRhZGF0YSApIHJlc3BvbnNlTWV0YWRhdGEucmVzb3VyY2VzTWV0YWRhdGEuZm9yRWFjaCggKCByZXNvdXJjZU1ldGFkYXRhOkxEUC5SZXNvdXJjZU1ldGFkYXRhLkNsYXNzICkgPT4ge1xuXHRcdFx0XHQoPFBlcnNpc3RlZERvY3VtZW50LkNsYXNzPiByZXNvdXJjZU1ldGFkYXRhLnJlc291cmNlKS5fZXRhZyA9IHJlc291cmNlTWV0YWRhdGEuZVRhZztcblx0XHRcdH0gKTtcblxuXHRcdFx0cmV0dXJuIFsgdG9rZW4sIHJlc3BvbnNlIF07XG5cdFx0fSApO1xuXHR9XG5cblx0cHJpdmF0ZSBhZGRUb2tlbkF1dGhlbnRpY2F0aW9uSGVhZGVyKCBoZWFkZXJzOk1hcDxzdHJpbmcsIEhUVFAuSGVhZGVyLkNsYXNzPiApOnZvaWQge1xuXHRcdGlmKCBoZWFkZXJzLmhhcyggXCJhdXRob3JpemF0aW9uXCIgKSApIHJldHVybjtcblxuXHRcdGxldCBoZWFkZXI6SFRUUC5IZWFkZXIuQ2xhc3MgPSBuZXcgSFRUUC5IZWFkZXIuQ2xhc3MoKTtcblx0XHRoZWFkZXJzLnNldCggXCJhdXRob3JpemF0aW9uXCIsIGhlYWRlciApO1xuXG5cdFx0bGV0IGF1dGhvcml6YXRpb246c3RyaW5nID0gXCJUb2tlbiBcIiArIHRoaXMuX2NyZWRlbnRpYWxzLmtleTtcblx0XHRoZWFkZXIudmFsdWVzLnB1c2goIG5ldyBIVFRQLkhlYWRlci5WYWx1ZSggYXV0aG9yaXphdGlvbiApICk7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xhc3M7XG4iLCJpbXBvcnQgKiBhcyBOUyBmcm9tIFwiLi8uLi9OU1wiO1xuaW1wb3J0ICogYXMgT2JqZWN0U2NoZW1hIGZyb20gXCIuLy4uL09iamVjdFNjaGVtYVwiO1xuaW1wb3J0ICogYXMgUG9pbnRlciBmcm9tIFwiLi8uLi9Qb2ludGVyXCI7XG5pbXBvcnQgKiBhcyBSZXNvdXJjZSBmcm9tIFwiLi8uLi9SZXNvdXJjZVwiO1xuaW1wb3J0ICogYXMgVVJJIGZyb20gXCIuLy4uL1JERi9VUklcIjtcblxuXG5leHBvcnQgY29uc3QgVElDS0VUU19DT05UQUlORVI6c3RyaW5nID0gXCJhdXRoLXRpY2tldHMvXCI7XG5cbmV4cG9ydCBjb25zdCBSREZfQ0xBU1M6c3RyaW5nID0gTlMuQ1MuQ2xhc3MuVGlja2V0O1xuXG5leHBvcnQgY29uc3QgU0NIRU1BOk9iamVjdFNjaGVtYS5DbGFzcyA9IHtcblx0XCJmb3JVUklcIjoge1xuXHRcdFwiQGlkXCI6IE5TLkNTLlByZWRpY2F0ZS5mb3JJUkksXG5cdFx0XCJAdHlwZVwiOiBcIkBpZFwiLFxuXHR9LFxuXHRcImV4cGlyYXRpb25UaW1lXCI6IHtcblx0XHRcIkBpZFwiOiBOUy5DUy5QcmVkaWNhdGUuZXhwaXJhdGlvblRpbWUsXG5cdFx0XCJAdHlwZVwiOiBOUy5YU0QuRGF0YVR5cGUuZGF0ZVRpbWUsXG5cdH0sXG5cdFwidGlja2V0S2V5XCI6IHtcblx0XHRcIkBpZFwiOiBOUy5DUy5QcmVkaWNhdGUudGlja2V0S2V5LFxuXHRcdFwiQHR5cGVcIjogTlMuWFNELkRhdGFUeXBlLnN0cmluZyxcblx0fSxcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xhc3MgZXh0ZW5kcyBSZXNvdXJjZS5DbGFzcyB7XG5cdGZvclVSSTpQb2ludGVyLkNsYXNzO1xuXHRleHBpcmF0aW9uVGltZTpEYXRlO1xuXHR0aWNrZXRLZXk6c3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgRmFjdG9yeSB7XG5cblx0c3RhdGljIGNyZWF0ZSggdXJpOnN0cmluZyApOkNsYXNzIHtcblx0XHRyZXR1cm4gRmFjdG9yeS5jcmVhdGVGcm9tKCBSZXNvdXJjZS5GYWN0b3J5LmNyZWF0ZSggVVJJLlV0aWwuZ2VuZXJhdGVCTm9kZUlEKCkgKSwgdXJpICk7XG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlRnJvbTxUIGV4dGVuZHMgUmVzb3VyY2UuQ2xhc3M+KCBvYmplY3Q6VCwgdXJpOnN0cmluZyApOkNsYXNzICYgVCB7XG5cdFx0bGV0IHRpY2tldDpDbGFzcyAmIFQgPSA8YW55PiBvYmplY3Q7XG5cdFx0dGlja2V0LmZvclVSSSA9IFBvaW50ZXIuRmFjdG9yeS5jcmVhdGUoIHVyaSApO1xuXHRcdHRpY2tldC50eXBlcy5wdXNoKCBSREZfQ0xBU1MgKTtcblxuXHRcdHJldHVybiB0aWNrZXQ7XG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCBDcmVkZW50aWFscyBmcm9tIFwiLi9DcmVkZW50aWFsc1wiO1xuaW1wb3J0ICogYXMgTlMgZnJvbSBcIi4vLi4vTlNcIjtcbmltcG9ydCAqIGFzIE9iamVjdFNjaGVtYSBmcm9tIFwiLi8uLi9PYmplY3RTY2hlbWFcIjtcbmltcG9ydCAqIGFzIFBlcnNpc3RlZEFnZW50IGZyb20gXCIuL1BlcnNpc3RlZEFnZW50XCI7XG5pbXBvcnQgKiBhcyBSZXNvdXJjZSBmcm9tIFwiLi8uLi9SZXNvdXJjZVwiO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vLi4vVXRpbHNcIjtcblxuZXhwb3J0IGNvbnN0IFJERl9DTEFTUzpzdHJpbmcgPSBOUy5DUy5DbGFzcy5Ub2tlbjtcblxuZXhwb3J0IGNvbnN0IFNDSEVNQTpPYmplY3RTY2hlbWEuQ2xhc3MgPSB7XG5cdFwia2V5XCI6IHtcblx0XHRcIkBpZFwiOiBOUy5DUy5QcmVkaWNhdGUudG9rZW5LZXksXG5cdFx0XCJAdHlwZVwiOiBOUy5YU0QuRGF0YVR5cGUuc3RyaW5nLFxuXHR9LFxuXHRcImV4cGlyYXRpb25UaW1lXCI6IHtcblx0XHRcIkBpZFwiOiBOUy5DUy5QcmVkaWNhdGUuZXhwaXJhdGlvblRpbWUsXG5cdFx0XCJAdHlwZVwiOiBOUy5YU0QuRGF0YVR5cGUuZGF0ZVRpbWUsXG5cdH0sXG5cdFwiYWdlbnRcIjoge1xuXHRcdFwiQGlkXCI6IE5TLkNTLlByZWRpY2F0ZS5jcmVkZW50aWFsc09mLFxuXHRcdFwiQHR5cGVcIjogXCJAaWRcIixcblx0fSxcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xhc3MgZXh0ZW5kcyBSZXNvdXJjZS5DbGFzcywgQ3JlZGVudGlhbHMge1xuXHRrZXk6c3RyaW5nO1xuXHRleHBpcmF0aW9uVGltZTpEYXRlO1xuXHRhZ2VudDpQZXJzaXN0ZWRBZ2VudC5DbGFzcztcbn1cblxuZXhwb3J0IGNsYXNzIEZhY3Rvcnkge1xuXHRzdGF0aWMgaXMoIHZhbHVlOmFueSApOmJvb2xlYW4ge1xuXHRcdHJldHVybiAoXG5cdFx0XHRSZXNvdXJjZS5GYWN0b3J5LmlzKCB2YWx1ZSApXG5cdFx0XHQmJiBGYWN0b3J5Lmhhc0NsYXNzUHJvcGVydGllcyggdmFsdWUgKVxuXHRcdCk7XG5cdH1cblxuXHRzdGF0aWMgaGFzQ2xhc3NQcm9wZXJ0aWVzKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIChcblx0XHRcdFV0aWxzLmhhc1Byb3BlcnR5RGVmaW5lZCggb2JqZWN0LCBcImtleVwiIClcblx0XHRcdCYmIFV0aWxzLmhhc1Byb3BlcnR5RGVmaW5lZCggb2JqZWN0LCBcImV4cGlyYXRpb25UaW1lXCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzUHJvcGVydHlEZWZpbmVkKCBvYmplY3QsIFwiYWdlbnRcIiApXG5cdFx0KTtcblx0fVxuXG5cdHN0YXRpYyBoYXNSZXF1aXJlZFZhbHVlcyggb2JqZWN0Ok9iamVjdCApOmJvb2xlYW4ge1xuXHRcdHJldHVybiAoXG5cdFx0XHRVdGlscy5oYXNQcm9wZXJ0eSggb2JqZWN0LCBcImtleVwiIClcblx0XHRcdCYmIFV0aWxzLmhhc1Byb3BlcnR5KCBvYmplY3QsIFwiZXhwaXJhdGlvblRpbWVcIiApXG5cdFx0KTtcblx0fVxuXG5cdHN0YXRpYyBkZWNvcmF0ZTxUIGV4dGVuZHMgT2JqZWN0Piggb2JqZWN0OlQgKTpUICYgQ2xhc3Mge1xuXHRcdGlmKCB0aGlzLmhhc0NsYXNzUHJvcGVydGllcyggb2JqZWN0ICkgKSByZXR1cm4gPGFueT4gb2JqZWN0O1xuXG5cdFx0cmV0dXJuIDxhbnk+IG9iamVjdDtcblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0IEF1dGhlbnRpY2F0aW9uVG9rZW4gZnJvbSBcIi4vQXV0aGVudGljYXRpb25Ub2tlblwiO1xuXG5leHBvcnQgY2xhc3MgQ2xhc3MgaW1wbGVtZW50cyBBdXRoZW50aWNhdGlvblRva2VuIHtcblx0cHJpdmF0ZSBfdXNlcm5hbWU6c3RyaW5nO1xuXHRwcml2YXRlIF9wYXNzd29yZDpzdHJpbmc7XG5cblx0Y29uc3RydWN0b3IoIHVzZXJuYW1lOnN0cmluZywgcGFzc3dvcmQ6c3RyaW5nICkge1xuXHRcdHRoaXMuX3VzZXJuYW1lID0gdXNlcm5hbWU7XG5cdFx0dGhpcy5fcGFzc3dvcmQgPSBwYXNzd29yZDtcblx0fVxuXG5cdGdldCB1c2VybmFtZSgpOnN0cmluZyB7IHJldHVybiB0aGlzLl91c2VybmFtZTsgfVxuXG5cdGdldCBwYXNzd29yZCgpOnN0cmluZyB7IHJldHVybiB0aGlzLl9wYXNzd29yZDsgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCBEb2N1bWVudHMgZnJvbSBcIi4vRG9jdW1lbnRzXCI7XG5pbXBvcnQgKiBhcyBFcnJvcnMgZnJvbSBcIi4vRXJyb3JzXCI7XG5pbXBvcnQgSlNPTkxEQ29udmVydGVyIGZyb20gXCIuL0pTT05MRC9Db252ZXJ0ZXJcIjtcbmltcG9ydCAqIGFzIE9iamVjdFNjaGVtYSBmcm9tIFwiLi9PYmplY3RTY2hlbWFcIjtcbmltcG9ydCAqIGFzIFBvaW50ZXIgZnJvbSBcIi4vUG9pbnRlclwiO1xuaW1wb3J0ICogYXMgUkRGIGZyb20gXCIuL1JERlwiO1xuaW1wb3J0ICogYXMgUmVzb3VyY2UgZnJvbSBcIi4vUmVzb3VyY2VcIjtcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuL1V0aWxzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xhc3MgZXh0ZW5kcyBQb2ludGVyLkxpYnJhcnksIFBvaW50ZXIuVmFsaWRhdG9yIHtcblx0X2RvY3VtZW50czpEb2N1bWVudHM7XG5cdF9yZXNvdXJjZXNJbmRleDpNYXA8c3RyaW5nLCBSZXNvdXJjZS5DbGFzcz47XG5cblx0aGFzUmVzb3VyY2UoIGlkOnN0cmluZyApOmJvb2xlYW47XG5cdGdldFJlc291cmNlKCBpZDpzdHJpbmcgKTpSZXNvdXJjZS5DbGFzcztcblx0Z2V0UmVzb3VyY2VzKCk6UmVzb3VyY2UuQ2xhc3NbXTtcblxuXHRnZXRQb2ludGVyKCBpZDpzdHJpbmcgKTpSZXNvdXJjZS5DbGFzcztcblxuXHRjcmVhdGVSZXNvdXJjZSggaWQ/OnN0cmluZyApOlJlc291cmNlLkNsYXNzO1xuXHRjcmVhdGVSZXNvdXJjZUZyb208VCBleHRlbmRzIE9iamVjdD4oIG9iamVjdDpULCBpZD86c3RyaW5nICk6UmVzb3VyY2UuQ2xhc3MgJiBUO1xuXG5cdHRvSlNPTigpOnN0cmluZztcbn1cblxuZnVuY3Rpb24gaGFzUG9pbnRlciggaWQ6c3RyaW5nICk6Ym9vbGVhbiB7XG5cdGxldCBmcmVlUmVzb3VyY2VzOkNsYXNzID0gPENsYXNzPiB0aGlzO1xuXG5cdGlmKCAhIGluTG9jYWxTY29wZSggaWQgKSApIHtcblx0XHRyZXR1cm4gZnJlZVJlc291cmNlcy5fZG9jdW1lbnRzLmhhc1BvaW50ZXIoIGlkICk7XG5cdH1cblxuXHRyZXR1cm4gZnJlZVJlc291cmNlcy5oYXNSZXNvdXJjZSggaWQgKTtcbn1cblxuZnVuY3Rpb24gZ2V0UG9pbnRlciggaWQ6c3RyaW5nICk6UG9pbnRlci5DbGFzcyB7XG5cdGxldCBmcmVlUmVzb3VyY2VzOkNsYXNzID0gPENsYXNzPiB0aGlzO1xuXG5cdGlmKCAhIGluTG9jYWxTY29wZSggaWQgKSApIHtcblx0XHRyZXR1cm4gZnJlZVJlc291cmNlcy5fZG9jdW1lbnRzLmdldFBvaW50ZXIoIGlkICk7XG5cdH1cblxuXHRsZXQgcmVzb3VyY2U6UmVzb3VyY2UuQ2xhc3MgPSBmcmVlUmVzb3VyY2VzLmdldFJlc291cmNlKCBpZCApO1xuXG5cdHJldHVybiAhIHJlc291cmNlID8gZnJlZVJlc291cmNlcy5jcmVhdGVSZXNvdXJjZSggaWQgKSA6IHJlc291cmNlO1xufVxuXG5mdW5jdGlvbiBpbkxvY2FsU2NvcGUoIGlkOnN0cmluZyApOmJvb2xlYW4ge1xuXHRyZXR1cm4gUkRGLlVSSS5VdGlsLmlzQk5vZGVJRCggaWQgKTtcbn1cblxuZnVuY3Rpb24gaW5TY29wZSggcG9pbnRlcjpQb2ludGVyLkNsYXNzICk6Ym9vbGVhbjtcbmZ1bmN0aW9uIGluU2NvcGUoIGlkOnN0cmluZyApOmJvb2xlYW47XG5mdW5jdGlvbiBpblNjb3BlKCBpZE9yUG9pbnRlcjphbnkgKTpib29sZWFuIHtcblx0bGV0IGZyZWVSZXNvdXJjZXM6Q2xhc3MgPSA8Q2xhc3M+IHRoaXM7XG5cdGxldCBpZDpzdHJpbmcgPSBQb2ludGVyLkZhY3RvcnkuaXMoIGlkT3JQb2ludGVyICkgPyBpZE9yUG9pbnRlci5pZCA6IGlkT3JQb2ludGVyO1xuXG5cdHJldHVybiBpbkxvY2FsU2NvcGUoIGlkICkgfHwgZnJlZVJlc291cmNlcy5fZG9jdW1lbnRzLmluU2NvcGUoIGlkICk7XG59XG5cbmZ1bmN0aW9uIGhhc1Jlc291cmNlKCBpZDpzdHJpbmcgKTpib29sZWFuIHtcblx0bGV0IGZyZWVSZXNvdXJjZXM6Q2xhc3MgPSA8Q2xhc3M+IHRoaXM7XG5cblx0cmV0dXJuIGZyZWVSZXNvdXJjZXMuX3Jlc291cmNlc0luZGV4LmhhcyggaWQgKTtcbn1cblxuZnVuY3Rpb24gZ2V0UmVzb3VyY2UoIGlkOnN0cmluZyApOlJlc291cmNlLkNsYXNzIHtcblx0bGV0IGZyZWVSZXNvdXJjZXM6Q2xhc3MgPSA8Q2xhc3M+IHRoaXM7XG5cblx0cmV0dXJuIGZyZWVSZXNvdXJjZXMuX3Jlc291cmNlc0luZGV4LmdldCggaWQgKSB8fCBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRSZXNvdXJjZXMoKTpSZXNvdXJjZS5DbGFzc1tdIHtcblx0bGV0IGZyZWVSZXNvdXJjZXM6Q2xhc3MgPSA8Q2xhc3M+IHRoaXM7XG5cblx0cmV0dXJuIFV0aWxzLkEuZnJvbSggZnJlZVJlc291cmNlcy5fcmVzb3VyY2VzSW5kZXgudmFsdWVzKCkgKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVzb3VyY2UoIGlkPzpzdHJpbmcgKTpSZXNvdXJjZS5DbGFzcyB7XG5cdHJldHVybiB0aGlzLmNyZWF0ZVJlc291cmNlRnJvbSgge30sIGlkICk7XG59XG5mdW5jdGlvbiBjcmVhdGVSZXNvdXJjZUZyb208VCBleHRlbmRzIE9iamVjdD4oIG9iamVjdDpULCBpZD86c3RyaW5nICk6UmVzb3VyY2UuQ2xhc3MgJiBUIHtcblx0bGV0IGZyZWVSZXNvdXJjZXM6Q2xhc3MgPSA8Q2xhc3M+IHRoaXM7XG5cblx0aWYoIGlkICkge1xuXHRcdGlmKCAhIGluTG9jYWxTY29wZSggaWQgKSApIHRocm93IG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIGBUaGUgaWQgXCIkeyBpZCB9XCIgaXMgb3V0IG9mIHNjb3BlLmAgKTtcblx0XHRpZiggZnJlZVJlc291cmNlcy5fcmVzb3VyY2VzSW5kZXguaGFzKCBpZCApICkgdGhyb3cgbmV3IEVycm9ycy5JREFscmVhZHlJblVzZUVycm9yKCBgVGhlIGlkIFwiJHsgaWQgfVwiIGlzIGFscmVhZHkgaW4gdXNlIGJ5IGFub3RoZXIgcmVzb3VyY2UuYCApO1xuXHR9IGVsc2Uge1xuXHRcdGlkID0gUkRGLlVSSS5VdGlsLmdlbmVyYXRlQk5vZGVJRCgpO1xuXHR9XG5cblx0bGV0IHJlc291cmNlOlJlc291cmNlLkNsYXNzICYgVCA9IFJlc291cmNlLkZhY3RvcnkuY3JlYXRlRnJvbTxUPiggb2JqZWN0LCBpZCApO1xuXHRmcmVlUmVzb3VyY2VzLl9yZXNvdXJjZXNJbmRleC5zZXQoIGlkLCByZXNvdXJjZSApO1xuXG5cdHJldHVybiByZXNvdXJjZTtcbn1cblxuZnVuY3Rpb24gdG9KU09OKCk6c3RyaW5nIHtcblx0bGV0IGdlbmVyYWxTY2hlbWE6T2JqZWN0U2NoZW1hLkRpZ2VzdGVkT2JqZWN0U2NoZW1hID0gdGhpcy5fZG9jdW1lbnRzLmdldEdlbmVyYWxTY2hlbWEoKTtcblx0bGV0IGpzb25sZENvbnZlcnRlcjpKU09OTERDb252ZXJ0ZXIgPSBuZXcgSlNPTkxEQ29udmVydGVyKCk7XG5cdGxldCByZXNvdXJjZXM6UmVzb3VyY2UuQ2xhc3NbXSA9IHRoaXMuZ2V0UmVzb3VyY2VzKCk7XG5cdGxldCBleHBhbmRlZFJlc291cmNlczpSREYuTm9kZS5DbGFzc1tdID0gW107XG5cblx0Zm9yKCBsZXQgcmVzb3VyY2Ugb2YgcmVzb3VyY2VzICkge1xuXHRcdGV4cGFuZGVkUmVzb3VyY2VzLnB1c2goIGpzb25sZENvbnZlcnRlci5leHBhbmQoIHJlc291cmNlLCBnZW5lcmFsU2NoZW1hLCB0aGlzLl9kb2N1bWVudHMuZ2V0U2NoZW1hRm9yKCByZXNvdXJjZSApICkgKTtcblx0fVxuXG5cdHJldHVybiBKU09OLnN0cmluZ2lmeSggZXhwYW5kZWRSZXNvdXJjZXMgKTtcbn1cblxuZXhwb3J0IGNsYXNzIEZhY3Rvcnkge1xuXHRzdGF0aWMgaGFzQ2xhc3NQcm9wZXJ0aWVzKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIChcblx0XHRcdFV0aWxzLmhhc1Byb3BlcnR5RGVmaW5lZCggb2JqZWN0LCBcIl9kb2N1bWVudHNcIiApICYmXG5cdFx0XHRVdGlscy5oYXNQcm9wZXJ0eURlZmluZWQoIG9iamVjdCwgXCJfcmVzb3VyY2VzSW5kZXhcIiApICYmXG5cblx0XHRcdFV0aWxzLmhhc0Z1bmN0aW9uKCBvYmplY3QsIFwiaGFzUmVzb3VyY2VcIiApICYmXG5cdFx0XHRVdGlscy5oYXNGdW5jdGlvbiggb2JqZWN0LCBcImdldFJlc291cmNlXCIgKSAmJlxuXHRcdFx0VXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJnZXRSZXNvdXJjZXNcIiApICYmXG5cdFx0XHRVdGlscy5oYXNGdW5jdGlvbiggb2JqZWN0LCBcImNyZWF0ZVJlc291cmNlXCIgKSAmJlxuXHRcdFx0VXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJjcmVhdGVSZXNvdXJjZUZyb21cIiApICYmXG5cblx0XHRcdFV0aWxzLmhhc0Z1bmN0aW9uKCBvYmplY3QsIFwiaGFzUG9pbnRlclwiICkgJiZcblx0XHRcdFV0aWxzLmhhc0Z1bmN0aW9uKCBvYmplY3QsIFwiZ2V0UG9pbnRlclwiICkgJiZcblxuXHRcdFx0VXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJpblNjb3BlXCIgKSAmJlxuXG5cdFx0XHRVdGlscy5oYXNGdW5jdGlvbiggb2JqZWN0LCBcInRvSlNPTlwiIClcblx0XHQpO1xuXHR9XG5cblx0c3RhdGljIGNyZWF0ZSggZG9jdW1lbnRzOkRvY3VtZW50cyApOkNsYXNzIHtcblx0XHRyZXR1cm4gRmFjdG9yeS5jcmVhdGVGcm9tKCB7fSwgZG9jdW1lbnRzICk7XG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlRnJvbTxUIGV4dGVuZHMgT2JqZWN0Piggb2JqZWN0OlQsIGRvY3VtZW50czpEb2N1bWVudHMgKTpUICYgQ2xhc3Mge1xuXHRcdGxldCBmcmVlUmVzb3VyY2VzOlQgJiBDbGFzcyA9IEZhY3RvcnkuZGVjb3JhdGU8VD4oIG9iamVjdCApO1xuXHRcdGZyZWVSZXNvdXJjZXMuX2RvY3VtZW50cyA9IGRvY3VtZW50cztcblxuXHRcdHJldHVybiBmcmVlUmVzb3VyY2VzO1xuXHR9XG5cblx0c3RhdGljIGRlY29yYXRlPFQgZXh0ZW5kcyBPYmplY3Q+KCBvYmplY3Q6VCApOlQgJiBDbGFzcyB7XG5cdFx0aWYoIEZhY3RvcnkuaGFzQ2xhc3NQcm9wZXJ0aWVzKCBvYmplY3QgKSApIHJldHVybiA8YW55PiBvYmplY3Q7XG5cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyggb2JqZWN0LCB7XG5cdFx0XHRcIl9yZXNvdXJjZXNJbmRleFwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IG5ldyBNYXA8c3RyaW5nLCBSZXNvdXJjZS5DbGFzcz4oKSxcblx0XHRcdH0sXG5cdFx0XHRcImhhc1BvaW50ZXJcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogZmFsc2UsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBoYXNQb2ludGVyLFxuXHRcdFx0fSxcblx0XHRcdFwiZ2V0UG9pbnRlclwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IGdldFBvaW50ZXIsXG5cdFx0XHR9LFxuXHRcdFx0XCJpblNjb3BlXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogaW5TY29wZSxcblx0XHRcdH0sXG5cdFx0XHRcImhhc1Jlc291cmNlXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogaGFzUmVzb3VyY2UsXG5cdFx0XHR9LFxuXHRcdFx0XCJnZXRSZXNvdXJjZVwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IGdldFJlc291cmNlLFxuXHRcdFx0fSxcblx0XHRcdFwiZ2V0UmVzb3VyY2VzXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogZ2V0UmVzb3VyY2VzLFxuXHRcdFx0fSxcblx0XHRcdFwiY3JlYXRlUmVzb3VyY2VcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogZmFsc2UsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBjcmVhdGVSZXNvdXJjZSxcblx0XHRcdH0sXG5cdFx0XHRcImNyZWF0ZVJlc291cmNlRnJvbVwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IGNyZWF0ZVJlc291cmNlRnJvbSxcblx0XHRcdH0sXG5cdFx0XHRcInRvSlNPTlwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IHRvSlNPTixcblx0XHRcdH0sXG5cdFx0fSApO1xuXG5cdFx0cmV0dXJuIDxhbnk+IG9iamVjdDtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCAqIGFzIEFDRSBmcm9tIFwiLi9BdXRoL0FDRVwiO1xuaW1wb3J0ICogYXMgQUNMIGZyb20gXCIuL0F1dGgvQUNMXCI7XG5pbXBvcnQgKiBhcyBBZ2VudCBmcm9tIFwiLi9BdXRoL0FnZW50XCI7XG5pbXBvcnQgKiBhcyBBZ2VudHMgZnJvbSBcIi4vQXV0aC9BZ2VudHNcIjtcbmltcG9ydCBBdXRoZW50aWNhdGlvblRva2VuIGZyb20gXCIuL0F1dGgvQXV0aGVudGljYXRpb25Ub2tlblwiO1xuaW1wb3J0IEF1dGhlbnRpY2F0b3IgZnJvbSBcIi4vQXV0aC9BdXRoZW50aWNhdG9yXCI7XG5pbXBvcnQgQmFzaWNBdXRoZW50aWNhdG9yIGZyb20gXCIuL0F1dGgvQmFzaWNBdXRoZW50aWNhdG9yXCI7XG5pbXBvcnQgKiBhcyBQZXJzaXN0ZWRBQ0UgZnJvbSBcIi4vQXV0aC9QZXJzaXN0ZWRBQ0VcIjtcbmltcG9ydCAqIGFzIFBlcnNpc3RlZEFDTCBmcm9tIFwiLi9BdXRoL1BlcnNpc3RlZEFDTFwiO1xuaW1wb3J0ICogYXMgUGVyc2lzdGVkQWdlbnQgZnJvbSBcIi4vQXV0aC9QZXJzaXN0ZWRBZ2VudFwiO1xuaW1wb3J0ICogYXMgUm9sZSBmcm9tIFwiLi9BdXRoL1JvbGVcIjtcbmltcG9ydCAqIGFzIFJvbGVzIGZyb20gXCIuL0F1dGgvUm9sZXNcIjtcbmltcG9ydCBUb2tlbkF1dGhlbnRpY2F0b3IgZnJvbSBcIi4vQXV0aC9Ub2tlbkF1dGhlbnRpY2F0b3JcIjtcbmltcG9ydCAqIGFzIFRpY2tldCBmcm9tIFwiLi9BdXRoL1RpY2tldFwiO1xuaW1wb3J0ICogYXMgVG9rZW4gZnJvbSBcIi4vQXV0aC9Ub2tlblwiO1xuaW1wb3J0IFVzZXJuYW1lQW5kUGFzc3dvcmRUb2tlbiBmcm9tIFwiLi9BdXRoL1VzZXJuYW1lQW5kUGFzc3dvcmRUb2tlblwiO1xuaW1wb3J0IFVzZXJuYW1lQW5kUGFzc3dvcmRDcmVkZW50aWFscyBmcm9tIFwiLi9BdXRoL1VzZXJuYW1lQW5kUGFzc3dvcmRDcmVkZW50aWFsc1wiO1xuaW1wb3J0IENyZWRlbnRpYWxzIGZyb20gXCIuL0F1dGgvQ3JlZGVudGlhbHNcIjtcblxuaW1wb3J0IENvbnRleHQgZnJvbSBcIi4vQ29udGV4dFwiO1xuaW1wb3J0ICogYXMgT2JqZWN0U2NoZW1hIGZyb20gXCIuL09iamVjdFNjaGVtYVwiO1xuaW1wb3J0ICogYXMgRXJyb3JzIGZyb20gXCIuL0Vycm9yc1wiO1xuaW1wb3J0ICogYXMgRnJlZVJlc291cmNlcyBmcm9tIFwiLi9GcmVlUmVzb3VyY2VzXCI7XG5pbXBvcnQgKiBhcyBKU09OTEQgZnJvbSBcIi4vSlNPTkxEXCI7XG5pbXBvcnQgKiBhcyBIVFRQIGZyb20gXCIuL0hUVFBcIjtcbmltcG9ydCAqIGFzIE5TIGZyb20gXCIuL05TXCI7XG5pbXBvcnQgKiBhcyBQZXJzaXN0ZWREb2N1bWVudCBmcm9tIFwiLi9QZXJzaXN0ZWREb2N1bWVudFwiO1xuaW1wb3J0ICogYXMgUmVzb3VyY2UgZnJvbSBcIi4vUmVzb3VyY2VcIjtcbmltcG9ydCAqIGFzIFJERiBmcm9tIFwiLi9SREZcIjtcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuL1V0aWxzXCI7XG5cbmV4cG9ydCB7XG5cdEFDRSxcblx0QUNMLFxuXHRBZ2VudCxcblx0QWdlbnRzLFxuXHRBdXRoZW50aWNhdGlvblRva2VuLFxuXHRBdXRoZW50aWNhdG9yLFxuXHRCYXNpY0F1dGhlbnRpY2F0b3IsXG5cdFBlcnNpc3RlZEFDRSxcblx0UGVyc2lzdGVkQUNMLFxuXHRQZXJzaXN0ZWRBZ2VudCxcblx0Um9sZSxcblx0Um9sZXMsXG5cdFRpY2tldCxcblx0VG9rZW4sXG5cdFRva2VuQXV0aGVudGljYXRvcixcblx0VXNlcm5hbWVBbmRQYXNzd29yZFRva2VuXG59XG5cbmV4cG9ydCBlbnVtIE1ldGhvZCB7XG5cdEJBU0lDLFxuXHRUT0tFTlxufVxuXG5leHBvcnQgY2xhc3MgQ2xhc3Mge1xuXHQvLyBUT0RPOiBNYWtlIHRoZSBhZ2VudHMgcHJvcGVydHkgYW4gYWJzdHJhY3QgcHJvcGVydHkuXG5cdHB1YmxpYyBhZ2VudHM6QWdlbnRzLkNsYXNzO1xuXHRwdWJsaWMgcm9sZXM6Um9sZXMuQ2xhc3M7XG5cblx0cHJvdGVjdGVkIF9hdXRoZW50aWNhdGVkQWdlbnQ6UGVyc2lzdGVkQWdlbnQuQ2xhc3M7XG5cblx0cHJpdmF0ZSBjb250ZXh0OkNvbnRleHQ7XG5cdHByaXZhdGUgbWV0aG9kOk1ldGhvZDtcblx0cHJpdmF0ZSBhdXRoZW50aWNhdG9yczpBcnJheTxBdXRoZW50aWNhdG9yPEF1dGhlbnRpY2F0aW9uVG9rZW4+Pjtcblx0cHJpdmF0ZSBhdXRoZW50aWNhdG9yOkF1dGhlbnRpY2F0b3I8QXV0aGVudGljYXRpb25Ub2tlbj47XG5cblx0cHVibGljIGdldCBhdXRoZW50aWNhdGVkQWdlbnQoKTpQZXJzaXN0ZWRBZ2VudC5DbGFzcyB7XG5cdFx0aWYoICEgdGhpcy5fYXV0aGVudGljYXRlZEFnZW50ICkge1xuXHRcdFx0aWYoIHRoaXMuY29udGV4dC5wYXJlbnRDb250ZXh0ICYmIHRoaXMuY29udGV4dC5wYXJlbnRDb250ZXh0LmF1dGggKSByZXR1cm4gdGhpcy5jb250ZXh0LnBhcmVudENvbnRleHQuYXV0aC5hdXRoZW50aWNhdGVkQWdlbnQ7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuX2F1dGhlbnRpY2F0ZWRBZ2VudDtcblx0fVxuXG5cdGNvbnN0cnVjdG9yKCBjb250ZXh0OkNvbnRleHQgKSB7XG5cdFx0dGhpcy5yb2xlcyA9IG51bGw7XG5cdFx0dGhpcy5hZ2VudHMgPSBudWxsO1xuXG5cdFx0dGhpcy5jb250ZXh0ID0gY29udGV4dDtcblxuXHRcdHRoaXMuYXV0aGVudGljYXRvcnMgPSBbXTtcblx0XHR0aGlzLmF1dGhlbnRpY2F0b3JzWyBNZXRob2QuQkFTSUMgXSA9IG5ldyBCYXNpY0F1dGhlbnRpY2F0b3IoKTtcblx0XHR0aGlzLmF1dGhlbnRpY2F0b3JzWyBNZXRob2QuVE9LRU4gXSA9IG5ldyBUb2tlbkF1dGhlbnRpY2F0b3IoIHRoaXMuY29udGV4dCApO1xuXHR9XG5cblx0aXNBdXRoZW50aWNhdGVkKCBhc2tQYXJlbnQ6Ym9vbGVhbiA9IHRydWUgKTpib29sZWFuIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0KCB0aGlzLmF1dGhlbnRpY2F0b3IgJiYgdGhpcy5hdXRoZW50aWNhdG9yLmlzQXV0aGVudGljYXRlZCgpICkgfHxcblx0XHRcdCggYXNrUGFyZW50ICYmICEgISB0aGlzLmNvbnRleHQucGFyZW50Q29udGV4dCAmJiAhICEgdGhpcy5jb250ZXh0LnBhcmVudENvbnRleHQuYXV0aCAmJiB0aGlzLmNvbnRleHQucGFyZW50Q29udGV4dC5hdXRoLmlzQXV0aGVudGljYXRlZCgpIClcblx0XHQpO1xuXHR9XG5cblx0YXV0aGVudGljYXRlKCB1c2VybmFtZTpzdHJpbmcsIHBhc3N3b3JkOnN0cmluZyApOlByb21pc2U8VG9rZW4uQ2xhc3M+IHtcblx0XHRyZXR1cm4gdGhpcy5hdXRoZW50aWNhdGVVc2luZyggXCJUT0tFTlwiLCB1c2VybmFtZSwgcGFzc3dvcmQgKTtcblx0fVxuXG5cdGF1dGhlbnRpY2F0ZVVzaW5nKCBtZXRob2Q6XCJCQVNJQ1wiLCB1c2VybmFtZTpzdHJpbmcsIHBhc3N3b3JkOnN0cmluZyApOlByb21pc2U8VXNlcm5hbWVBbmRQYXNzd29yZENyZWRlbnRpYWxzPjtcblx0YXV0aGVudGljYXRlVXNpbmcoIG1ldGhvZDpcIlRPS0VOXCIsIHVzZXJuYW1lOnN0cmluZywgcGFzc3dvcmQ6c3RyaW5nICk6UHJvbWlzZTxUb2tlbi5DbGFzcz47XG5cblx0YXV0aGVudGljYXRlVXNpbmcoIG1ldGhvZDpcIlRPS0VOXCIsIHRva2VuOlRva2VuLkNsYXNzICk6UHJvbWlzZTxUb2tlbi5DbGFzcz47XG5cblx0Ly8gVE9ETyByZW1vdmUgbm9uLXNwZWNpZmljIG92ZXJsb2Fkcy4gUmVmZXJlbmNlIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9wdWxsLzYyNzgsIHNlZW1zIHRvIGJlIGFkZGVkIGZvciAxLjlcblx0YXV0aGVudGljYXRlVXNpbmcoIG1ldGhvZDpzdHJpbmcsIHVzZXJuYW1lOnN0cmluZywgcGFzc3dvcmQ6c3RyaW5nICk6UHJvbWlzZTxDcmVkZW50aWFscz47XG5cdGF1dGhlbnRpY2F0ZVVzaW5nKCBtZXRob2Q6c3RyaW5nLCB0b2tlbjpDcmVkZW50aWFscyApOlByb21pc2U8Q3JlZGVudGlhbHM+O1xuXG5cdGF1dGhlbnRpY2F0ZVVzaW5nKCBtZXRob2Q6c3RyaW5nLCB1c2VyT3JUb2tlbk9yQ3JlZGVudGlhbHM6YW55LCBwYXNzd29yZD86c3RyaW5nICk6UHJvbWlzZTxhbnk+IHtcblx0XHRzd2l0Y2goIG1ldGhvZCApIHtcblx0XHRcdGNhc2UgXCJCQVNJQ1wiOlxuXHRcdFx0XHRyZXR1cm4gdGhpcy5hdXRoZW50aWNhdGVXaXRoQmFzaWMoIHVzZXJPclRva2VuT3JDcmVkZW50aWFscywgcGFzc3dvcmQgKTtcblx0XHRcdGNhc2UgXCJUT0tFTlwiOlxuXHRcdFx0XHRyZXR1cm4gdGhpcy5hdXRoZW50aWNhdGVXaXRoVG9rZW4oIHVzZXJPclRva2VuT3JDcmVkZW50aWFscywgcGFzc3dvcmQgKTtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdCggbmV3IEVycm9ycy5JbGxlZ2FsQXJndW1lbnRFcnJvciggYE5vIGV4aXN0cyB0aGUgYXV0aGVudGljYXRpb24gbWV0aG9kICcke21ldGhvZH0nYCApICk7XG5cdFx0fVxuXHR9XG5cblx0YWRkQXV0aGVudGljYXRpb24oIHJlcXVlc3RPcHRpb25zOkhUVFAuUmVxdWVzdC5PcHRpb25zICk6dm9pZCB7XG5cdFx0aWYoIHRoaXMuaXNBdXRoZW50aWNhdGVkKCBmYWxzZSApICkge1xuXHRcdFx0dGhpcy5hdXRoZW50aWNhdG9yLmFkZEF1dGhlbnRpY2F0aW9uKCByZXF1ZXN0T3B0aW9ucyApO1xuXHRcdH0gZWxzZSBpZiggISAhIHRoaXMuY29udGV4dC5wYXJlbnRDb250ZXh0ICYmICEgISB0aGlzLmNvbnRleHQucGFyZW50Q29udGV4dC5hdXRoICkge1xuXHRcdFx0dGhpcy5jb250ZXh0LnBhcmVudENvbnRleHQuYXV0aC5hZGRBdXRoZW50aWNhdGlvbiggcmVxdWVzdE9wdGlvbnMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKCBcIlRoZXJlIGlzIG5vIGF1dGhlbnRpY2F0aW9uIHRvIGFkZCB0byB0aGUgcmVxdWVzdC5cIiApO1xuXHRcdH1cblx0fVxuXG5cdGNsZWFyQXV0aGVudGljYXRpb24oKTp2b2lkIHtcblx0XHRpZiggISB0aGlzLmF1dGhlbnRpY2F0b3IgKSByZXR1cm47XG5cblx0XHR0aGlzLmF1dGhlbnRpY2F0b3IuY2xlYXJBdXRoZW50aWNhdGlvbigpO1xuXHRcdHRoaXMuYXV0aGVudGljYXRvciA9IG51bGw7XG5cdFx0dGhpcy5fYXV0aGVudGljYXRlZEFnZW50ID0gbnVsbDtcblx0fVxuXG5cdGNyZWF0ZVRpY2tldCggdXJpOnN0cmluZywgcmVxdWVzdE9wdGlvbnM6SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgPSB7fSApOlByb21pc2U8WyBUaWNrZXQuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4ge1xuXHRcdGxldCByZXNvdXJjZVVSSTpzdHJpbmcgPSB0aGlzLmNvbnRleHQucmVzb2x2ZSggdXJpICk7XG5cdFx0bGV0IGNvbnRhaW5lclVSSTpzdHJpbmcgPSB0aGlzLmNvbnRleHQucmVzb2x2ZSggVGlja2V0LlRJQ0tFVFNfQ09OVEFJTkVSICk7XG5cblx0XHRsZXQgZnJlZVJlc291cmNlczpGcmVlUmVzb3VyY2VzLkNsYXNzID0gRnJlZVJlc291cmNlcy5GYWN0b3J5LmNyZWF0ZSggdGhpcy5jb250ZXh0LmRvY3VtZW50cyApO1xuXHRcdFRpY2tldC5GYWN0b3J5LmNyZWF0ZUZyb20oIGZyZWVSZXNvdXJjZXMuY3JlYXRlUmVzb3VyY2UoKSwgcmVzb3VyY2VVUkkgKTtcblxuXHRcdGlmKCB0aGlzLmlzQXV0aGVudGljYXRlZCgpICkgdGhpcy5hZGRBdXRoZW50aWNhdGlvbiggcmVxdWVzdE9wdGlvbnMgKTtcblx0XHRIVFRQLlJlcXVlc3QuVXRpbC5zZXRBY2NlcHRIZWFkZXIoIFwiYXBwbGljYXRpb24vbGQranNvblwiLCByZXF1ZXN0T3B0aW9ucyApO1xuXHRcdEhUVFAuUmVxdWVzdC5VdGlsLnNldENvbnRlbnRUeXBlSGVhZGVyKCBcImFwcGxpY2F0aW9uL2xkK2pzb25cIiwgcmVxdWVzdE9wdGlvbnMgKTtcblx0XHRIVFRQLlJlcXVlc3QuVXRpbC5zZXRQcmVmZXJyZWRJbnRlcmFjdGlvbk1vZGVsKCBOUy5MRFAuQ2xhc3MuUkRGU291cmNlLCByZXF1ZXN0T3B0aW9ucyApO1xuXG5cdFx0cmV0dXJuIEhUVFAuUmVxdWVzdC5TZXJ2aWNlLnBvc3QoIGNvbnRhaW5lclVSSSwgZnJlZVJlc291cmNlcy50b0pTT04oKSwgcmVxdWVzdE9wdGlvbnMsIG5ldyBKU09OTEQuUGFyc2VyLkNsYXNzKCkgKS50aGVuKCAoIFsgZXhwYW5kZWRSZXN1bHQsIHJlc3BvbnNlIF06WyBhbnksIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXSApID0+IHtcblx0XHRcdGxldCBmcmVlTm9kZXM6UkRGLk5vZGUuQ2xhc3NbXSA9IFJERi5Ob2RlLlV0aWwuZ2V0RnJlZU5vZGVzKCBleHBhbmRlZFJlc3VsdCApO1xuXG5cdFx0XHRsZXQgdGlja2V0Tm9kZXM6UkRGLk5vZGUuQ2xhc3NbXSA9IGZyZWVOb2Rlcy5maWx0ZXIoIGZyZWVOb2RlID0+IFJERi5Ob2RlLlV0aWwuaGFzVHlwZSggZnJlZU5vZGUsIFRpY2tldC5SREZfQ0xBU1MgKSApO1xuXG5cdFx0XHRpZiggdGlja2V0Tm9kZXMubGVuZ3RoID09PSAwICkgdGhyb3cgbmV3IEhUVFAuRXJyb3JzLkJhZFJlc3BvbnNlRXJyb3IoIGBObyAkeyBUaWNrZXQuUkRGX0NMQVNTIH0gd2FzIHJldHVybmVkLmAsIHJlc3BvbnNlICk7XG5cdFx0XHRpZiggdGlja2V0Tm9kZXMubGVuZ3RoID4gMSApIHRocm93IG5ldyBIVFRQLkVycm9ycy5CYWRSZXNwb25zZUVycm9yKCBgTXVsdGlwbGUgJHsgVGlja2V0LlJERl9DTEFTUyB9IHdlcmUgcmV0dXJuZWQuYCwgcmVzcG9uc2UgKTtcblxuXHRcdFx0bGV0IGV4cGFuZGVkVGlja2V0OlJERi5Ob2RlLkNsYXNzID0gdGlja2V0Tm9kZXNbIDAgXTtcblx0XHRcdGxldCB0aWNrZXQ6VGlja2V0LkNsYXNzID0gPGFueT4gUmVzb3VyY2UuRmFjdG9yeS5jcmVhdGUoKTtcblxuXHRcdFx0bGV0IGRpZ2VzdGVkU2NoZW1hOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSA9IHRoaXMuY29udGV4dC5kb2N1bWVudHMuZ2V0U2NoZW1hRm9yKCBleHBhbmRlZFRpY2tldCApO1xuXG5cdFx0XHR0aGlzLmNvbnRleHQuZG9jdW1lbnRzLmpzb25sZENvbnZlcnRlci5jb21wYWN0KCBleHBhbmRlZFRpY2tldCwgdGlja2V0LCBkaWdlc3RlZFNjaGVtYSwgdGhpcy5jb250ZXh0LmRvY3VtZW50cyApO1xuXG5cdFx0XHRyZXR1cm4gWyB0aWNrZXQsIHJlc3BvbnNlIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Z2V0QXV0aGVudGljYXRlZFVSTCggdXJpOnN0cmluZywgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxzdHJpbmc+IHtcblx0XHRsZXQgcmVzb3VyY2VVUkk6c3RyaW5nID0gdGhpcy5jb250ZXh0LnJlc29sdmUoIHVyaSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuY3JlYXRlVGlja2V0KCByZXNvdXJjZVVSSSwgcmVxdWVzdE9wdGlvbnMgKS50aGVuKCAoIFsgdGlja2V0LCByZXNwb25zZSBdOlsgVGlja2V0LkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0gKSA9PiB7XG5cdFx0XHRyZXNvdXJjZVVSSSArPSBSREYuVVJJLlV0aWwuaGFzUXVlcnkoIHJlc291cmNlVVJJICkgPyBcIiZcIiA6IFwiP1wiO1xuXHRcdFx0cmVzb3VyY2VVUkkgKz0gYHRpY2tldD0keyB0aWNrZXQudGlja2V0S2V5IH1gO1xuXG5cdFx0XHRyZXR1cm4gcmVzb3VyY2VVUkk7XG5cdFx0fSApO1xuXHR9XG5cblx0cHJpdmF0ZSBhdXRoZW50aWNhdGVXaXRoQmFzaWMoIHVzZXJuYW1lOnN0cmluZywgcGFzc3dvcmQ6c3RyaW5nICk6UHJvbWlzZTxVc2VybmFtZUFuZFBhc3N3b3JkQ3JlZGVudGlhbHM+IHtcblx0XHRsZXQgYXV0aGVudGljYXRvcjpCYXNpY0F1dGhlbnRpY2F0b3IgPSA8QmFzaWNBdXRoZW50aWNhdG9yPiB0aGlzLmF1dGhlbnRpY2F0b3JzWyBNZXRob2QuQkFTSUMgXTtcblx0XHRsZXQgYXV0aGVudGljYXRpb25Ub2tlbjpVc2VybmFtZUFuZFBhc3N3b3JkVG9rZW47XG5cblx0XHRhdXRoZW50aWNhdGlvblRva2VuID0gbmV3IFVzZXJuYW1lQW5kUGFzc3dvcmRUb2tlbiggdXNlcm5hbWUsIHBhc3N3b3JkICk7XG5cdFx0dGhpcy5jbGVhckF1dGhlbnRpY2F0aW9uKCk7XG5cblx0XHRsZXQgY3JlZGVudGlhbHM6VXNlcm5hbWVBbmRQYXNzd29yZENyZWRlbnRpYWxzO1xuXHRcdHJldHVybiBhdXRoZW50aWNhdG9yLmF1dGhlbnRpY2F0ZSggYXV0aGVudGljYXRpb25Ub2tlbiApLnRoZW4oICggX2NyZWRlbnRpYWxzOlVzZXJuYW1lQW5kUGFzc3dvcmRDcmVkZW50aWFscyApID0+IHtcblx0XHRcdGNyZWRlbnRpYWxzID0gX2NyZWRlbnRpYWxzO1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0QXV0aGVudGljYXRlZEFnZW50KCBhdXRoZW50aWNhdG9yICk7XG5cdFx0fSApLnRoZW4oICggcGVyc2lzdGVkQWdlbnQ6UGVyc2lzdGVkQWdlbnQuQ2xhc3MgKSA9PiB7XG5cdFx0XHR0aGlzLl9hdXRoZW50aWNhdGVkQWdlbnQgPSBwZXJzaXN0ZWRBZ2VudDtcblx0XHRcdHRoaXMuYXV0aGVudGljYXRvciA9IGF1dGhlbnRpY2F0b3I7XG5cdFx0XHRyZXR1cm4gY3JlZGVudGlhbHM7XG5cdFx0fSApO1xuXHR9XG5cblx0cHJpdmF0ZSBhdXRoZW50aWNhdGVXaXRoVG9rZW4oIHVzZXJPclRva2VuT3JDcmVkZW50aWFsczphbnksIHBhc3N3b3JkOnN0cmluZyApOlByb21pc2U8VG9rZW4uQ2xhc3M+IHtcblx0XHRsZXQgYXV0aGVudGljYXRvcjpUb2tlbkF1dGhlbnRpY2F0b3IgPSA8VG9rZW5BdXRoZW50aWNhdG9yPiB0aGlzLmF1dGhlbnRpY2F0b3JzWyBNZXRob2QuVE9LRU4gXTtcblx0XHRsZXQgY3JlZGVudGlhbHM6VG9rZW4uQ2xhc3MgPSBudWxsO1xuXHRcdGxldCBhdXRoZW50aWNhdGlvblRva2VuOlVzZXJuYW1lQW5kUGFzc3dvcmRUb2tlbiA9IG51bGw7XG5cblx0XHRpZiggVXRpbHMuaXNTdHJpbmcoIHVzZXJPclRva2VuT3JDcmVkZW50aWFscyApICYmIFV0aWxzLmlzU3RyaW5nKCBwYXNzd29yZCApICkge1xuXHRcdFx0YXV0aGVudGljYXRpb25Ub2tlbiA9IG5ldyBVc2VybmFtZUFuZFBhc3N3b3JkVG9rZW4oIHVzZXJPclRva2VuT3JDcmVkZW50aWFscywgcGFzc3dvcmQgKTtcblxuXHRcdH0gZWxzZSBpZiggVG9rZW4uRmFjdG9yeS5oYXNSZXF1aXJlZFZhbHVlcyggdXNlck9yVG9rZW5PckNyZWRlbnRpYWxzICkgKSB7XG5cdFx0XHRjcmVkZW50aWFscyA9IHVzZXJPclRva2VuT3JDcmVkZW50aWFscztcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3Q8VG9rZW4uQ2xhc3M+KCBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIlBhcmFtZXRlcnMgZG8gbm90IG1hdGNoIHdpdGggdGhlIGF1dGhlbnRpY2F0aW9uIHJlcXVlc3QuXCIgKSApO1xuXHRcdH1cblxuXHRcdHRoaXMuY2xlYXJBdXRoZW50aWNhdGlvbigpO1xuXHRcdHJldHVybiBhdXRoZW50aWNhdG9yLmF1dGhlbnRpY2F0ZSggKCBhdXRoZW50aWNhdGlvblRva2VuICkgPyBhdXRoZW50aWNhdGlvblRva2VuIDogPGFueT4gY3JlZGVudGlhbHMgKS50aGVuKCAoIF9jcmVkZW50aWFsczpUb2tlbi5DbGFzcyApID0+IHtcblx0XHRcdGNyZWRlbnRpYWxzID0gX2NyZWRlbnRpYWxzO1xuXG5cdFx0XHRpZiggUGVyc2lzdGVkQWdlbnQuRmFjdG9yeS5pcyggY3JlZGVudGlhbHMuYWdlbnQgKSApIHJldHVybiBjcmVkZW50aWFscy5hZ2VudDtcblx0XHRcdHJldHVybiB0aGlzLmdldEF1dGhlbnRpY2F0ZWRBZ2VudCggYXV0aGVudGljYXRvciApO1xuXG5cdFx0fSApLnRoZW4oICggcGVyc2lzdGVkQWdlbnQ6UGVyc2lzdGVkQWdlbnQuQ2xhc3MgKSA9PiB7XG5cdFx0XHR0aGlzLl9hdXRoZW50aWNhdGVkQWdlbnQgPSBwZXJzaXN0ZWRBZ2VudDtcblx0XHRcdGNyZWRlbnRpYWxzLmFnZW50ID0gcGVyc2lzdGVkQWdlbnQ7XG5cblx0XHRcdHRoaXMuYXV0aGVudGljYXRvciA9IGF1dGhlbnRpY2F0b3I7XG5cdFx0XHRyZXR1cm4gY3JlZGVudGlhbHM7XG5cdFx0fSApO1xuXHR9XG5cblx0cHJpdmF0ZSBnZXRBdXRoZW50aWNhdGVkQWdlbnQoIGF1dGhlbnRpY2F0b3I6QXV0aGVudGljYXRvcjxhbnk+ICk6UHJvbWlzZTxQZXJzaXN0ZWRBZ2VudC5DbGFzcz4ge1xuXHRcdGxldCByZXF1ZXN0T3B0aW9uczpIVFRQLlJlcXVlc3QuT3B0aW9ucyA9IHt9O1xuXHRcdGF1dGhlbnRpY2F0b3IuYWRkQXV0aGVudGljYXRpb24oIHJlcXVlc3RPcHRpb25zICk7XG5cblx0XHRyZXR1cm4gdGhpcy5jb250ZXh0LmRvY3VtZW50cy5nZXQ8UGVyc2lzdGVkQWdlbnQuQ2xhc3M+KCBcImFnZW50cy9tZS9cIiwgcmVxdWVzdE9wdGlvbnMgKS50aGVuKFxuXHRcdFx0KCBbIGFnZW50RG9jdW1lbnQsIHJlc3BvbnNlIF06WyBQZXJzaXN0ZWRBZ2VudC5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdICkgPT4gYWdlbnREb2N1bWVudFxuXHRcdCk7XG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCAqIGFzIEhUVFAgZnJvbSBcIi4vSFRUUFwiO1xuaW1wb3J0ICogYXMgQXV0aCBmcm9tIFwiLi9BdXRoXCI7XG5pbXBvcnQgKiBhcyBOUyBmcm9tIFwiLi9OU1wiO1xuaW1wb3J0ICogYXMgUGVyc2lzdGVkRG9jdW1lbnQgZnJvbSBcIi4vUGVyc2lzdGVkRG9jdW1lbnRcIjtcbmltcG9ydCAqIGFzIFBvaW50ZXIgZnJvbSBcIi4vUG9pbnRlclwiO1xuaW1wb3J0ICogYXMgUHJvdGVjdGVkRG9jdW1lbnQgZnJvbSBcIi4vUHJvdGVjdGVkRG9jdW1lbnRcIjtcbmltcG9ydCAqIGFzIFJlc291cmNlIGZyb20gXCIuL1Jlc291cmNlXCI7XG5pbXBvcnQgU0VMRUNUUmVzdWx0cyBmcm9tIFwiLi9TUEFSUUwvU0VMRUNUUmVzdWx0c1wiO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vVXRpbHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBDbGFzcyBleHRlbmRzIFBlcnNpc3RlZERvY3VtZW50LkNsYXNzIHtcblx0YWNjZXNzQ29udHJvbExpc3Q/OlBvaW50ZXIuQ2xhc3M7XG5cblx0Z2V0QUNMKCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgQXV0aC5QZXJzaXN0ZWRBQ0wuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG59XG5cbmV4cG9ydCBjbGFzcyBGYWN0b3J5IHtcblxuXHRzdGF0aWMgaGFzQ2xhc3NQcm9wZXJ0aWVzKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIFV0aWxzLmlzT2JqZWN0KCBvYmplY3QgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJnZXRBQ0xcIiApXG5cdFx0XHQ7XG5cdH1cblxuXHRzdGF0aWMgaXMoIG9iamVjdDpPYmplY3QgKTpib29sZWFuIHtcblx0XHRyZXR1cm4gRmFjdG9yeS5oYXNDbGFzc1Byb3BlcnRpZXMoIG9iamVjdCApXG5cdFx0XHQmJiBQZXJzaXN0ZWREb2N1bWVudC5GYWN0b3J5LmlzKCBvYmplY3QgKVxuXHRcdFx0O1xuXHR9XG5cblx0c3RhdGljIGRlY29yYXRlPFQgZXh0ZW5kcyBQZXJzaXN0ZWREb2N1bWVudC5DbGFzcz4oIGRvY3VtZW50OlQgKTpUICYgQ2xhc3Mge1xuXHRcdGlmKCBGYWN0b3J5Lmhhc0NsYXNzUHJvcGVydGllcyggZG9jdW1lbnQgKSApIHJldHVybiA8YW55PiBkb2N1bWVudDtcblxuXHRcdGxldCByZGZTb3VyY2U6VCAmIENsYXNzID0gPGFueT4gZG9jdW1lbnQ7XG5cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyggcmRmU291cmNlLCB7XG5cdFx0XHRcImdldEFDTFwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IGdldEFDTCxcblx0XHRcdH0sXG5cdFx0fSApO1xuXG5cdFx0cmV0dXJuIHJkZlNvdXJjZTtcblx0fVxuXG59XG5cbmZ1bmN0aW9uIGdldEFDTCggcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIEF1dGguUGVyc2lzdGVkQUNMLkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+IHtcblx0bGV0IHByb3RlY3RlZERvY3VtZW50OkNsYXNzID0gPENsYXNzPiB0aGlzO1xuXG5cdGxldCBhY2xQcm9taXNlOlByb21pc2U8UG9pbnRlci5DbGFzcz47XG5cblx0aWYgKCBwcm90ZWN0ZWREb2N1bWVudC5pc1Jlc29sdmVkKCkgKSB7XG5cdFx0YWNsUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSggcHJvdGVjdGVkRG9jdW1lbnQuYWNjZXNzQ29udHJvbExpc3QgKTtcblx0fSBlbHNlIHtcblx0XHRhY2xQcm9taXNlID0gcHJvdGVjdGVkRG9jdW1lbnQuZXhlY3V0ZVNFTEVDVFF1ZXJ5KCBgU0VMRUNUID9hY2wgV0hFUkUge1xuXHRcdFx0PCR7IHByb3RlY3RlZERvY3VtZW50LmlkIH0+IDwkeyBOUy5DUy5QcmVkaWNhdGUuYWNjZXNzQ29udHJvbExpc3QgfT4gP2FjbC5cblx0XHR9YCApLnRoZW4oICggWyByZXN1bHRzLCByZXNwb25zZSBdOlsgU0VMRUNUUmVzdWx0cywgSFRUUC5SZXNwb25zZS5DbGFzcyBdICkgPT4ge1xuXHRcdFx0cmV0dXJuIHJlc3VsdHMuYmluZGluZ3NbIDAgXVsgXCJhY2xcIiBdIGFzIFBvaW50ZXIuQ2xhc3M7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIGFjbFByb21pc2UudGhlbiggKCBhY2w6UG9pbnRlci5DbGFzcyApID0+IHtcblx0XHRyZXR1cm4gcHJvdGVjdGVkRG9jdW1lbnQuX2RvY3VtZW50cy5nZXQoIGFjbC5pZCwgcmVxdWVzdE9wdGlvbnMgKTtcblx0fSApLnRoZW4oICggWyBhY2wsIHJlc3BvbnNlIF06WyBBdXRoLlBlcnNpc3RlZEFDTC5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdICkgPT4ge1xuXHRcdGlmKCAhIFJlc291cmNlLlV0aWwuaGFzVHlwZSggYWNsLCBBdXRoLkFDTC5SREZfQ0xBU1MgKSApIHRocm93IG5ldyBIVFRQLkVycm9ycy5CYWRSZXNwb25zZUVycm9yKCBgVGhlIHJlc3BvbnNlIGRvZXMgbm90IGNvbnRhaW5zIGEgJHsgQXV0aC5BQ0wuUkRGX0NMQVNTIH0gb2JqZWN0LmAsIHJlc3BvbnNlICk7XG5cdFx0cmV0dXJuIFsgYWNsLCByZXNwb25zZSBdO1xuXHR9ICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0IElsbGVnYWxBcmd1bWVudEVycm9yIGZyb20gXCIuL0Vycm9ycy9JbGxlZ2FsQXJndW1lbnRFcnJvclwiO1xuaW1wb3J0ICogYXMgT2JqZWN0U2NoZW1hIGZyb20gXCIuL09iamVjdFNjaGVtYVwiO1xuaW1wb3J0ICogYXMgWFNEIGZyb20gXCIuL05TL1hTRFwiO1xuaW1wb3J0ICogYXMgVVJJIGZyb20gXCIuL1JERi9VUklcIjtcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuL1V0aWxzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xhc3Mge1xuXHRvcmRlckJ5PzpPcmRlckJ5UHJvcGVydHlbXTtcblx0bGltaXQ/Om51bWJlcjtcblx0b2Zmc2V0PzpudW1iZXI7XG59XG5cbmNvbnN0IGFsbG93ZWRUeXBlczpzdHJpbmdbXSA9IFsgXCJudW1lcmljXCIsIFwic3RyaW5nXCIsIFwiYm9vbGVhblwiLCBcImRhdGVUaW1lXCIgXTtcblxuZXhwb3J0IGludGVyZmFjZSBPcmRlckJ5UHJvcGVydHkge1xuXHRcIkBpZFwiOnN0cmluZztcblx0XCJAdHlwZVwiPzpcIm51bWVyaWNcIiB8IFwic3RyaW5nXCIgfCBcImJvb2xlYW5cIiB8IFwiZGF0ZVRpbWVcIjtcblx0XCJAbGFuZ3VhZ2VcIj86c3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBGYWN0b3J5IHtcblx0c3RhdGljIGlzKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIFV0aWxzLmhhc1Byb3BlcnR5RGVmaW5lZCggb2JqZWN0LCBcIm9yZGVyQnlcIiApXG5cdFx0XHR8fCBVdGlscy5oYXNQcm9wZXJ0eURlZmluZWQoIG9iamVjdCwgXCJsaW1pdFwiIClcblx0XHRcdHx8IFV0aWxzLmhhc1Byb3BlcnR5RGVmaW5lZCggb2JqZWN0LCBcIm9mZnNldFwiICk7XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIFV0aWwge1xuXG5cdHN0YXRpYyBzdHJpbmdpZnlSZXRyaWV2YWxQcmVmZXJlbmNlcyggcmV0cmlldmFsUHJlZmVyZW5jZXM6Q2xhc3MsIGRpZ2VzdGVkU2NoZW1hPzpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEgKTpzdHJpbmcge1xuXHRcdGxldCBzdHJpbmdQcmVmZXJlbmNlczpzdHJpbmcgPSBcIlwiO1xuXG5cdFx0aWYoIFwibGltaXRcIiBpbiByZXRyaWV2YWxQcmVmZXJlbmNlcyApIHtcblx0XHRcdHN0cmluZ1ByZWZlcmVuY2VzICs9IGBsaW1pdD0keyByZXRyaWV2YWxQcmVmZXJlbmNlcy5saW1pdCB9YDtcblx0XHR9XG5cblx0XHRpZiggXCJvZmZzZXRcIiBpbiByZXRyaWV2YWxQcmVmZXJlbmNlcyApIHtcblx0XHRcdHN0cmluZ1ByZWZlcmVuY2VzICs9IGAkeyBzdHJpbmdQcmVmZXJlbmNlcyA/IFwiJlwiIDogXCJcIiB9b2Zmc2V0PSR7IHJldHJpZXZhbFByZWZlcmVuY2VzLm9mZnNldCB9YDtcblx0XHR9XG5cblx0XHRpZiggXCJvcmRlckJ5XCIgaW4gcmV0cmlldmFsUHJlZmVyZW5jZXMgJiYgcmV0cmlldmFsUHJlZmVyZW5jZXMub3JkZXJCeS5sZW5ndGggPiAwICkge1xuXHRcdFx0c3RyaW5nUHJlZmVyZW5jZXMgKz0gYCR7IHN0cmluZ1ByZWZlcmVuY2VzID8gXCImXCIgOiBcIlwiIH1vcmRlckJ5PWA7XG5cdFx0XHRsZXQgc3RyaW5nT3JkZXJzOnN0cmluZ1tdID0gW107XG5cblx0XHRcdGZvciggbGV0IG9yZGVyQnkgb2YgcmV0cmlldmFsUHJlZmVyZW5jZXMub3JkZXJCeSApIHtcblx0XHRcdFx0bGV0IHN0cmluZ09yZGVyOnN0cmluZyA9IFwiXCI7XG5cblx0XHRcdFx0aWYoIFwiQGlkXCIgaW4gb3JkZXJCeSApIHtcblx0XHRcdFx0XHRsZXQgaWQ6c3RyaW5nID0gb3JkZXJCeVsgXCJAaWRcIiBdO1xuXHRcdFx0XHRcdGxldCBkZXNjZW5kaW5nOmJvb2xlYW4gPSBmYWxzZTtcblx0XHRcdFx0XHRpZiggaWQuc3RhcnRzV2l0aCggXCItXCIgKSApIHtcblx0XHRcdFx0XHRcdGRlc2NlbmRpbmcgPSB0cnVlO1xuXHRcdFx0XHRcdFx0aWQgPSBpZC5zdWJzdHIoIDEgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiggISAhIGRpZ2VzdGVkU2NoZW1hICYmIFVSSS5VdGlsLmlzUmVsYXRpdmUoIGlkICkgKSBpZCA9IE9iamVjdFNjaGVtYS5VdGlsLnJlc29sdmVVUkkoIGlkLCBkaWdlc3RlZFNjaGVtYSApO1xuXG5cdFx0XHRcdFx0c3RyaW5nT3JkZXIgKz0gYCR7IGRlc2NlbmRpbmcgPyBcIi1cIiA6IFwiXCIgfTwkeyBlbmNvZGVVUkkoIGlkICkucmVwbGFjZSggXCIjXCIsIFwiJTIzXCIgKSB9PmA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiggXCJAdHlwZVwiIGluIG9yZGVyQnkgKSB7XG5cdFx0XHRcdFx0aWYoICEgc3RyaW5nT3JkZXIgKSB0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiVGhlIEBpZCBwcm9wZXJ0eSBpcyBtaXNzaW5nIGluIE9yZGVyQnkgcHJvcGVydHkuXCIgKTtcblxuXHRcdFx0XHRcdGxldCB0eXBlOnN0cmluZyA9IG9yZGVyQnlbIFwiQHR5cGVcIiBdO1xuXHRcdFx0XHRcdGlmKCBhbGxvd2VkVHlwZXMuaW5kZXhPZiggdHlwZSApID09PSAtIDEgKSB0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiVGhlIEB0eXBlIHZhbHVlIHNwZWNpZmllZCBpcyBub3QgdmFsaWQuXCIgKTtcblxuXHRcdFx0XHRcdGlmKCB0eXBlICE9PSBcIm51bWVyaWNcIiApIHR5cGUgPSBgPCR7IGVuY29kZVVSSSggWFNELkRhdGFUeXBlWyB0eXBlIF0gKS5yZXBsYWNlKCBcIiNcIiwgXCIlMjNcIiApIH0+YDtcblx0XHRcdFx0XHRzdHJpbmdPcmRlciArPSBgOyR7IHR5cGUgfWA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiggXCJAbGFuZ3VhZ2VcIiBpbiBvcmRlckJ5ICkge1xuXHRcdFx0XHRcdGlmKCAhIHN0cmluZ09yZGVyICkgdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEVycm9yKCBcIlRoZSBAaWQgcHJvcGVydHkgaXMgbWlzc2luZyBpbiBPcmRlckJ5IHByb3BlcnR5LlwiICk7XG5cdFx0XHRcdFx0c3RyaW5nT3JkZXIgKz0gYDskeyBvcmRlckJ5WyBcIkBsYW5ndWFnZVwiIF0gfWA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdHJpbmdPcmRlcnMucHVzaCggc3RyaW5nT3JkZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0c3RyaW5nUHJlZmVyZW5jZXMgKz0gc3RyaW5nT3JkZXJzLmpvaW4oIFwiLFwiICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHN0cmluZ1ByZWZlcmVuY2VzID8gXCI/XCIgKyBzdHJpbmdQcmVmZXJlbmNlcyA6IHN0cmluZ1ByZWZlcmVuY2VzO1xuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xhc3M7XG4iLCJpbXBvcnQgKiBhcyBFcnJvcnMgZnJvbSBcIi4vRXJyb3JzXCI7XG5pbXBvcnQgKiBhcyBIVFRQIGZyb20gXCIuL0hUVFBcIjtcbmltcG9ydCBDb250ZXh0IGZyb20gXCIuL0NvbnRleHRcIjtcbmltcG9ydCAqIGFzIFJERiBmcm9tIFwiLi9SREZcIjtcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuL1V0aWxzXCI7XG5cbmltcG9ydCAqIGFzIEFjY2Vzc1BvaW50IGZyb20gXCIuL0FjY2Vzc1BvaW50XCI7XG5pbXBvcnQgKiBhcyBBcHBSb2xlIGZyb20gXCIuL0FwcC9Sb2xlXCI7XG5pbXBvcnQgKiBhcyBBdXRoIGZyb20gXCIuL0F1dGhcIjtcbmltcG9ydCAqIGFzIERvY3VtZW50IGZyb20gXCIuL0RvY3VtZW50XCI7XG5pbXBvcnQgKiBhcyBGcmVlUmVzb3VyY2VzIGZyb20gXCIuL0ZyZWVSZXNvdXJjZXNcIjtcbmltcG9ydCAqIGFzIEpTT05MRCBmcm9tIFwiLi9KU09OTERcIjtcbmltcG9ydCAqIGFzIFBlcnNpc3RlZEFjY2Vzc1BvaW50IGZyb20gXCIuL1BlcnNpc3RlZEFjY2Vzc1BvaW50XCI7XG5pbXBvcnQgKiBhcyBQZXJzaXN0ZWRBcHBSb2xlIGZyb20gXCIuL0FwcC9QZXJzaXN0ZWRSb2xlXCI7XG5pbXBvcnQgKiBhcyBQZXJzaXN0ZWRCbGFua05vZGUgZnJvbSBcIi4vUGVyc2lzdGVkQmxhbmtOb2RlXCI7XG5pbXBvcnQgKiBhcyBQZXJzaXN0ZWREb2N1bWVudCBmcm9tIFwiLi9QZXJzaXN0ZWREb2N1bWVudFwiO1xuaW1wb3J0ICogYXMgUGVyc2lzdGVkRnJhZ21lbnQgZnJvbSBcIi4vUGVyc2lzdGVkRnJhZ21lbnRcIjtcbmltcG9ydCAqIGFzIFBlcnNpc3RlZE5hbWVkRnJhZ21lbnQgZnJvbSBcIi4vUGVyc2lzdGVkTmFtZWRGcmFnbWVudFwiO1xuaW1wb3J0ICogYXMgUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQgZnJvbSBcIi4vUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnRcIjtcbmltcG9ydCAqIGFzIFByb3RlY3RlZERvY3VtZW50IGZyb20gXCIuL1Byb3RlY3RlZERvY3VtZW50XCI7XG5pbXBvcnQgKiBhcyBQb2ludGVyIGZyb20gXCIuL1BvaW50ZXJcIjtcbmltcG9ydCAqIGFzIE5TIGZyb20gXCIuL05TXCI7XG5pbXBvcnQgKiBhcyBPYmplY3RTY2hlbWEgZnJvbSBcIi4vT2JqZWN0U2NoZW1hXCI7XG5pbXBvcnQgKiBhcyBMRFAgZnJvbSBcIi4vTERQXCI7XG5pbXBvcnQgKiBhcyBTUEFSUUwgZnJvbSBcIi4vU1BBUlFMXCI7XG5pbXBvcnQgKiBhcyBSZXNvdXJjZSBmcm9tIFwiLi9SZXNvdXJjZVwiO1xuaW1wb3J0ICogYXMgUmV0cmlldmFsUHJlZmVyZW5jZXMgZnJvbSBcIi4vUmV0cmlldmFsUHJlZmVyZW5jZXNcIjtcblxuY2xhc3MgRG9jdW1lbnRzIGltcGxlbWVudHMgUG9pbnRlci5MaWJyYXJ5LCBQb2ludGVyLlZhbGlkYXRvciwgT2JqZWN0U2NoZW1hLlJlc29sdmVyIHtcblx0cHJpdmF0ZSBzdGF0aWMgX2RvY3VtZW50U2NoZW1hOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSA9IE9iamVjdFNjaGVtYS5EaWdlc3Rlci5kaWdlc3RTY2hlbWEoIERvY3VtZW50LlNDSEVNQSApO1xuXG5cdHByaXZhdGUgX2pzb25sZENvbnZlcnRlcjpKU09OTEQuQ29udmVydGVyLkNsYXNzO1xuXHRnZXQganNvbmxkQ29udmVydGVyKCk6SlNPTkxELkNvbnZlcnRlci5DbGFzcyB7IHJldHVybiB0aGlzLl9qc29ubGRDb252ZXJ0ZXI7IH1cblxuXHRwcml2YXRlIF9kb2N1bWVudERlY29yYXRvcnM6TWFwPHN0cmluZywge2RlY29yYXRvcjpGdW5jdGlvbiwgcGFyYW1ldGVycz86YW55W119Pjtcblx0Z2V0IGRvY3VtZW50RGVjb3JhdG9ycygpOk1hcDxzdHJpbmcsIHtkZWNvcmF0b3I6RnVuY3Rpb24sIHBhcmFtZXRlcnM/OmFueVtdfT4geyByZXR1cm4gdGhpcy5fZG9jdW1lbnREZWNvcmF0b3JzOyB9XG5cblx0cHJpdmF0ZSBjb250ZXh0OkNvbnRleHQ7XG5cdHByaXZhdGUgcG9pbnRlcnM6TWFwPHN0cmluZywgUG9pbnRlci5DbGFzcz47XG5cblx0Ly8gVHJhY2tzIHRoZSBkb2N1bWVudHMgdGhhdCBhcmUgYmVpbmcgcmVzb2x2ZWQgdG8gYXZvaWQgdHJpZ2dlcmluZyByZXBlYXRlZCByZXF1ZXN0c1xuXHRwcml2YXRlIGRvY3VtZW50c0JlaW5nUmVzb2x2ZWQ6TWFwPHN0cmluZywgUHJvbWlzZTxbIFBlcnNpc3RlZERvY3VtZW50LkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+PjtcblxuXHRjb25zdHJ1Y3RvciggY29udGV4dDpDb250ZXh0ID0gbnVsbCApIHtcblx0XHR0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0dGhpcy5wb2ludGVycyA9IG5ldyBNYXA8c3RyaW5nLCBQb2ludGVyLkNsYXNzPigpO1xuXHRcdHRoaXMuZG9jdW1lbnRzQmVpbmdSZXNvbHZlZCA9IG5ldyBNYXA8c3RyaW5nLCBQcm9taXNlPFsgUGVyc2lzdGVkRG9jdW1lbnQuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4+KCk7XG5cblx0XHRpZiggISAhIHRoaXMuY29udGV4dCAmJiAhICEgdGhpcy5jb250ZXh0LnBhcmVudENvbnRleHQgKSB7XG5cdFx0XHRsZXQgY29udGV4dEpTT05MRENvbnZlcnRlcjpKU09OTEQuQ29udmVydGVyLkNsYXNzID0gdGhpcy5jb250ZXh0LnBhcmVudENvbnRleHQuZG9jdW1lbnRzLmpzb25sZENvbnZlcnRlcjtcblx0XHRcdHRoaXMuX2pzb25sZENvbnZlcnRlciA9IG5ldyBKU09OTEQuQ29udmVydGVyLkNsYXNzKCBjb250ZXh0SlNPTkxEQ29udmVydGVyLmxpdGVyYWxTZXJpYWxpemVycyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9qc29ubGRDb252ZXJ0ZXIgPSBuZXcgSlNPTkxELkNvbnZlcnRlci5DbGFzcygpO1xuXHRcdH1cblxuXHRcdGxldCBkZWNvcmF0b3JzOk1hcDxzdHJpbmcsIHtkZWNvcmF0b3I6RnVuY3Rpb24sIHBhcmFtZXRlcnM/OmFueVtdfT4gPSBuZXcgTWFwKCk7XG5cdFx0aWYoICEgISB0aGlzLmNvbnRleHQgJiYgISAhIHRoaXMuY29udGV4dC5wYXJlbnRDb250ZXh0ICkge1xuXHRcdFx0bGV0IHBhcmVudERlY29yYXRvcnM6TWFwPHN0cmluZywge2RlY29yYXRvcjpGdW5jdGlvbiwgcGFyYW1ldGVycz86YW55W119PiA9IHRoaXMuY29udGV4dC5wYXJlbnRDb250ZXh0LmRvY3VtZW50cy5kb2N1bWVudERlY29yYXRvcnM7XG5cdFx0XHRpZiggcGFyZW50RGVjb3JhdG9ycyApIGRlY29yYXRvcnMgPSB0aGlzLl9kb2N1bWVudERlY29yYXRvcnMgPSBVdGlscy5NLmV4dGVuZCggZGVjb3JhdG9ycywgcGFyZW50RGVjb3JhdG9ycyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZWNvcmF0b3JzLnNldCggUHJvdGVjdGVkRG9jdW1lbnQuUkRGX0NMQVNTLCB7IGRlY29yYXRvcjogUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQuRmFjdG9yeS5kZWNvcmF0ZSB9ICk7XG5cdFx0XHRkZWNvcmF0b3JzLnNldCggQXV0aC5BQ0wuUkRGX0NMQVNTLCB7IGRlY29yYXRvcjogQXV0aC5QZXJzaXN0ZWRBQ0wuRmFjdG9yeS5kZWNvcmF0ZSB9ICk7XG5cdFx0XHRkZWNvcmF0b3JzLnNldCggQXV0aC5BZ2VudC5SREZfQ0xBU1MsIHsgZGVjb3JhdG9yOiBBdXRoLlBlcnNpc3RlZEFnZW50LkZhY3RvcnkuZGVjb3JhdGUgfSApO1xuXHRcdH1cblxuXHRcdGRlY29yYXRvcnMuc2V0KCBBcHBSb2xlLlJERl9DTEFTUyAsIHsgZGVjb3JhdG9yOiBQZXJzaXN0ZWRBcHBSb2xlLkZhY3RvcnkuZGVjb3JhdGUsIHBhcmFtZXRlcnM6WyAoIHRoaXMuY29udGV4dCAmJiB0aGlzLmNvbnRleHQuYXV0aCApID8gdGhpcy5jb250ZXh0LmF1dGgucm9sZXMgOiBudWxsIF0gfSApO1xuXHRcdHRoaXMuX2RvY3VtZW50RGVjb3JhdG9ycyA9IGRlY29yYXRvcnM7XG5cdH1cblxuXHRpblNjb3BlKCBwb2ludGVyOlBvaW50ZXIuQ2xhc3MgKTpib29sZWFuO1xuXHRpblNjb3BlKCBpZDpzdHJpbmcgKTpib29sZWFuO1xuXHRpblNjb3BlKCBpZE9yUG9pbnRlcjphbnkgKTpib29sZWFuIHtcblx0XHRsZXQgaWQ6c3RyaW5nID0gUG9pbnRlci5GYWN0b3J5LmlzKCBpZE9yUG9pbnRlciApID8gaWRPclBvaW50ZXIuaWQgOiBpZE9yUG9pbnRlcjtcblxuXHRcdGlmKCBSREYuVVJJLlV0aWwuaXNCTm9kZUlEKCBpZCApICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0aWYoICEgISB0aGlzLmNvbnRleHQgKSB7XG5cdFx0XHRpZiggUkRGLlVSSS5VdGlsLmlzUHJlZml4ZWQoIGlkICkgKSBpZCA9IE9iamVjdFNjaGVtYS5EaWdlc3Rlci5yZXNvbHZlUHJlZml4ZWRVUkkoIGlkLCB0aGlzLmNvbnRleHQuZ2V0T2JqZWN0U2NoZW1hKCkgKTtcblxuXHRcdFx0bGV0IGJhc2VVUkk6c3RyaW5nID0gdGhpcy5jb250ZXh0LmdldEJhc2VVUkkoKTtcblx0XHRcdGlmKCBSREYuVVJJLlV0aWwuaXNSZWxhdGl2ZSggaWQgKSApIHJldHVybiB0cnVlO1xuXHRcdFx0aWYoIFJERi5VUkkuVXRpbC5pc0Jhc2VPZiggYmFzZVVSSSwgaWQgKSApIHJldHVybiB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiggUkRGLlVSSS5VdGlsLmlzQWJzb2x1dGUoIGlkICkgKSByZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiggISAhIHRoaXMuY29udGV4dCAmJiAhICEgdGhpcy5jb250ZXh0LnBhcmVudENvbnRleHQgKSByZXR1cm4gdGhpcy5jb250ZXh0LnBhcmVudENvbnRleHQuZG9jdW1lbnRzLmluU2NvcGUoIGlkICk7XG5cblx0XHRyZXR1cm4gUkRGLlVSSS5VdGlsLmlzUmVsYXRpdmUoIGlkICk7XG5cdH1cblxuXHRoYXNQb2ludGVyKCBpZDpzdHJpbmcgKTpib29sZWFuIHtcblx0XHRpZCA9IHRoaXMuZ2V0UG9pbnRlcklEKCBpZCApO1xuXG5cdFx0aWYoIHRoaXMucG9pbnRlcnMuaGFzKCBpZCApICkgcmV0dXJuIHRydWU7XG5cblx0XHRpZiggISAhIHRoaXMuY29udGV4dCAmJiAhICEgdGhpcy5jb250ZXh0LnBhcmVudENvbnRleHQgKSByZXR1cm4gdGhpcy5jb250ZXh0LnBhcmVudENvbnRleHQuZG9jdW1lbnRzLmhhc1BvaW50ZXIoIGlkICk7XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRnZXRQb2ludGVyKCBpZDpzdHJpbmcgKTpQb2ludGVyLkNsYXNzIHtcblx0XHRsZXQgbG9jYWxJRDpzdHJpbmcgPSB0aGlzLmdldFBvaW50ZXJJRCggaWQgKTtcblxuXHRcdGlmKCBsb2NhbElEID09PSBudWxsICkge1xuXHRcdFx0aWYoICEgISB0aGlzLmNvbnRleHQgJiYgISAhIHRoaXMuY29udGV4dC5wYXJlbnRDb250ZXh0ICkgcmV0dXJuIHRoaXMuY29udGV4dC5wYXJlbnRDb250ZXh0LmRvY3VtZW50cy5nZXRQb2ludGVyKCBpZCApO1xuXHRcdFx0dGhyb3cgbmV3IEVycm9ycy5JbGxlZ2FsQXJndW1lbnRFcnJvciggXCJUaGUgcG9pbnRlciBpZCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgbW9kdWxlLlwiICk7XG5cdFx0fVxuXG5cdFx0bGV0IHBvaW50ZXI6UG9pbnRlci5DbGFzcztcblx0XHRpZiggISB0aGlzLnBvaW50ZXJzLmhhcyggbG9jYWxJRCApICkge1xuXHRcdFx0cG9pbnRlciA9IHRoaXMuY3JlYXRlUG9pbnRlciggbG9jYWxJRCApO1xuXHRcdFx0dGhpcy5wb2ludGVycy5zZXQoIGxvY2FsSUQsIHBvaW50ZXIgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wb2ludGVycy5nZXQoIGxvY2FsSUQgKTtcblx0fVxuXG5cdHJlbW92ZVBvaW50ZXIoIGlkOlBvaW50ZXIuQ2xhc3MgKTpib29sZWFuO1xuXHRyZW1vdmVQb2ludGVyKCBpZDpzdHJpbmcgKTpib29sZWFuO1xuXHRyZW1vdmVQb2ludGVyKCBpZE9yUG9pbnRlcjpzdHJpbmcgfCBQb2ludGVyLkNsYXNzICk6Ym9vbGVhbiB7XG5cdFx0bGV0IGlkOnN0cmluZyA9IFV0aWxzLmlzU3RyaW5nKCBpZE9yUG9pbnRlciApID8gPHN0cmluZz4gaWRPclBvaW50ZXIgOiAoPFBvaW50ZXIuQ2xhc3M+IGlkT3JQb2ludGVyKS5pZDtcblx0XHRsZXQgbG9jYWxJRDpzdHJpbmcgPSB0aGlzLmdldFBvaW50ZXJJRCggaWQgKTtcblxuXHRcdGlmKCBsb2NhbElEID09PSBudWxsICkge1xuXHRcdFx0aWYoICEgISB0aGlzLmNvbnRleHQgJiYgISAhIHRoaXMuY29udGV4dC5wYXJlbnRDb250ZXh0ICkgcmV0dXJuIHRoaXMuY29udGV4dC5wYXJlbnRDb250ZXh0LmRvY3VtZW50cy5yZW1vdmVQb2ludGVyKCBpZCApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnBvaW50ZXJzLmRlbGV0ZSggbG9jYWxJRCApO1xuXHR9XG5cblx0Z2V0PFQ+KCB1cmk6c3RyaW5nLCByZXF1ZXN0T3B0aW9uczpIVFRQLlJlcXVlc3QuT3B0aW9ucyA9IHt9ICk6UHJvbWlzZTxbIFQgJiBQZXJzaXN0ZWREb2N1bWVudC5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdPiB7XG5cdFx0bGV0IHBvaW50ZXJJRDpzdHJpbmcgPSB0aGlzLmdldFBvaW50ZXJJRCggdXJpICk7XG5cblx0XHR1cmkgPSB0aGlzLmdldFJlcXVlc3RVUkkoIHVyaSApO1xuXHRcdHRoaXMuc2V0RGVmYXVsdFJlcXVlc3RPcHRpb25zKCByZXF1ZXN0T3B0aW9ucywgTlMuTERQLkNsYXNzLlJERlNvdXJjZSApO1xuXG5cdFx0aWYoIHRoaXMuaGFzUG9pbnRlciggdXJpICkgKSB7XG5cdFx0XHRsZXQgcG9pbnRlcjpQb2ludGVyLkNsYXNzID0gdGhpcy5nZXRQb2ludGVyKCB1cmkgKTtcblx0XHRcdGlmKCBwb2ludGVyLmlzUmVzb2x2ZWQoKSApIHtcblx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZTxbIFQgJiBQZXJzaXN0ZWREb2N1bWVudC5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdPiggWyA8YW55PiBwb2ludGVyLCBudWxsIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiggdGhpcy5kb2N1bWVudHNCZWluZ1Jlc29sdmVkLmhhcyggcG9pbnRlcklEICkgKSByZXR1cm4gdGhpcy5kb2N1bWVudHNCZWluZ1Jlc29sdmVkLmdldCggcG9pbnRlcklEICk7XG5cblx0XHRsZXQgcHJvbWlzZTpQcm9taXNlPFsgVCAmIFBlcnNpc3RlZERvY3VtZW50LkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+ID0gSFRUUC5SZXF1ZXN0LlNlcnZpY2UuZ2V0KCB1cmksIHJlcXVlc3RPcHRpb25zLCBuZXcgUkRGLkRvY3VtZW50LlBhcnNlcigpICkudGhlbiggKCBbIHJkZkRvY3VtZW50cywgcmVzcG9uc2UgXTpbIFJERi5Eb2N1bWVudC5DbGFzc1tdLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0gKSA9PiB7XG5cdFx0XHRsZXQgZVRhZzpzdHJpbmcgPSBIVFRQLlJlc3BvbnNlLlV0aWwuZ2V0RVRhZyggcmVzcG9uc2UgKTtcblx0XHRcdGlmKCBlVGFnID09PSBudWxsICkgdGhyb3cgbmV3IEhUVFAuRXJyb3JzLkJhZFJlc3BvbnNlRXJyb3IoIFwiVGhlIHJlc3BvbnNlIGRvZXNuJ3QgY29udGFpbiBhbiBFVGFnXCIsIHJlc3BvbnNlICk7XG5cblx0XHRcdGxldCBsb2NhdGlvbkhlYWRlcjpIVFRQLkhlYWRlci5DbGFzcyA9IHJlc3BvbnNlLmdldEhlYWRlciggXCJDb250ZW50LUxvY2F0aW9uXCIgKTtcblx0XHRcdGlmKCAhICEgbG9jYXRpb25IZWFkZXIgKSB7XG5cdFx0XHRcdGlmKCBsb2NhdGlvbkhlYWRlci52YWx1ZXMubGVuZ3RoICE9PSAxICkgdGhyb3cgbmV3IEhUVFAuRXJyb3JzLkJhZFJlc3BvbnNlRXJyb3IoIFwiVGhlIHJlc3BvbnNlIGNvbnRhaW5zIG1vcmUgdGhhbiBvbmUgQ29udGVudC1Mb2NhdGlvbiBoZWFkZXIuXCIsIHJlc3BvbnNlICk7XG5cblx0XHRcdFx0dXJpID0gbG9jYXRpb25IZWFkZXIudG9TdHJpbmcoKTtcblx0XHRcdFx0aWYoICEgdXJpICkgdGhyb3cgbmV3IEhUVFAuRXJyb3JzLkJhZFJlc3BvbnNlRXJyb3IoIGBUaGUgcmVzcG9uc2UgZG9lc24ndCBjb250YWluIGEgdmFsaWQgJ0NvbnRlbnQtTG9jYXRpb24nIGhlYWRlci5gLCByZXNwb25zZSApO1xuXHRcdFx0fVxuXG5cdFx0XHRsZXQgcmRmRG9jdW1lbnQ6UkRGLkRvY3VtZW50LkNsYXNzID0gdGhpcy5nZXRSREZEb2N1bWVudCggdXJpLCByZGZEb2N1bWVudHMsIHJlc3BvbnNlICk7XG5cdFx0XHRpZiggcmRmRG9jdW1lbnQgPT09IG51bGwgKSB0aHJvdyBuZXcgSFRUUC5FcnJvcnMuQmFkUmVzcG9uc2VFcnJvciggXCJObyBkb2N1bWVudCB3YXMgcmV0dXJuZWQuXCIsIHJlc3BvbnNlICk7XG5cblx0XHRcdGxldCBkb2N1bWVudDpQZXJzaXN0ZWREb2N1bWVudC5DbGFzcyA9IHRoaXMuX2dldFBlcnNpc3RlZERvY3VtZW50KCByZGZEb2N1bWVudCwgcmVzcG9uc2UgKTtcblx0XHRcdGRvY3VtZW50Ll9ldGFnID0gZVRhZztcblxuXHRcdFx0dGhpcy5kb2N1bWVudHNCZWluZ1Jlc29sdmVkLmRlbGV0ZSggcG9pbnRlcklEICk7XG5cdFx0XHRyZXR1cm4gWyA8YW55PiBkb2N1bWVudCwgcmVzcG9uc2UgXTtcblx0XHR9ICk7XG5cblx0XHR0aGlzLmRvY3VtZW50c0JlaW5nUmVzb2x2ZWQuc2V0KCBwb2ludGVySUQsIHByb21pc2UgKTtcblx0XHRyZXR1cm4gcHJvbWlzZTtcblx0fVxuXG5cdGV4aXN0cyggZG9jdW1lbnRVUkk6c3RyaW5nLCByZXF1ZXN0T3B0aW9uczpIVFRQLlJlcXVlc3QuT3B0aW9ucyA9IHt9ICk6UHJvbWlzZTxbIGJvb2xlYW4sIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4ge1xuXHRcdGRvY3VtZW50VVJJID0gdGhpcy5nZXRSZXF1ZXN0VVJJKCBkb2N1bWVudFVSSSApO1xuXHRcdHRoaXMuc2V0RGVmYXVsdFJlcXVlc3RPcHRpb25zKCByZXF1ZXN0T3B0aW9ucywgTlMuTERQLkNsYXNzLlJERlNvdXJjZSApO1xuXG5cdFx0cmV0dXJuIEhUVFAuUmVxdWVzdC5TZXJ2aWNlLmhlYWQoIGRvY3VtZW50VVJJLCByZXF1ZXN0T3B0aW9ucyApLnRoZW4oICggcmVzcG9uc2U6SFRUUC5SZXNwb25zZS5DbGFzcyApID0+IFsgdHJ1ZSwgcmVzcG9uc2UgXSwgKCBlcnJvcjpIVFRQLkVycm9ycy5FcnJvciApID0+IHtcblx0XHRcdGlmKCBlcnJvci5yZXNwb25zZS5zdGF0dXMgPT09IDQwNCApXG5cdFx0XHRcdHJldHVybiBbIGZhbHNlLCBlcnJvci5yZXNwb25zZSBdO1xuXG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3Q8YW55PiggZXJyb3IgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRjcmVhdGVDaGlsZDxUIGV4dGVuZHMgRG9jdW1lbnQuQ2xhc3M+KCBwYXJlbnRVUkk6c3RyaW5nLCBjaGlsZERvY3VtZW50OlQsIHNsdWc/OnN0cmluZywgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIFQgJiBQZXJzaXN0ZWRQcm90ZWN0ZWREb2N1bWVudC5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdPjtcblx0Y3JlYXRlQ2hpbGQ8VCBleHRlbmRzIERvY3VtZW50LkNsYXNzPiggcGFyZW50VVJJOnN0cmluZywgY2hpbGREb2N1bWVudDpULCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgVCAmIFBlcnNpc3RlZFByb3RlY3RlZERvY3VtZW50LkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+O1xuXHRjcmVhdGVDaGlsZDxUIGV4dGVuZHMgT2JqZWN0PiggcGFyZW50VVJJOnN0cmluZywgY2hpbGRPYmplY3Q6VCwgc2x1Zz86c3RyaW5nLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgVCAmIFBlcnNpc3RlZFByb3RlY3RlZERvY3VtZW50LkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+O1xuXHRjcmVhdGVDaGlsZDxUIGV4dGVuZHMgT2JqZWN0PiggcGFyZW50VVJJOnN0cmluZywgY2hpbGRPYmplY3Q6VCwgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIFQgJiBQZXJzaXN0ZWRQcm90ZWN0ZWREb2N1bWVudC5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdPjtcblx0Y3JlYXRlQ2hpbGQ8VCBleHRlbmRzIE9iamVjdD4oIHBhcmVudFVSSTpzdHJpbmcsIGNoaWxkT2JqZWN0OlQsIHNsdWdPclJlcXVlc3RPcHRpb25zPzphbnksIHJlcXVlc3RPcHRpb25zOkhUVFAuUmVxdWVzdC5PcHRpb25zID0ge30gKTpQcm9taXNlPFsgVCAmIFBlcnNpc3RlZFByb3RlY3RlZERvY3VtZW50LkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+IHtcblx0XHRsZXQgc2x1ZzpzdHJpbmcgPSBVdGlscy5pc1N0cmluZyggc2x1Z09yUmVxdWVzdE9wdGlvbnMgKSA/IHNsdWdPclJlcXVlc3RPcHRpb25zIDogbnVsbDtcblx0XHRyZXF1ZXN0T3B0aW9ucyA9ICEgVXRpbHMuaXNTdHJpbmcoIHNsdWdPclJlcXVlc3RPcHRpb25zICkgJiYgISAhIHNsdWdPclJlcXVlc3RPcHRpb25zID8gc2x1Z09yUmVxdWVzdE9wdGlvbnMgOiByZXF1ZXN0T3B0aW9ucztcblxuXHRcdGlmKCBQZXJzaXN0ZWREb2N1bWVudC5GYWN0b3J5LmlzKCBjaGlsZE9iamVjdCApICkgcmV0dXJuIFByb21pc2UucmVqZWN0PGFueT4oIG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiVGhlIGNoaWxkIHByb3ZpZGVkIGhhcyBiZWVuIGFscmVhZHkgcGVyc2lzdGVkLlwiICkgKTtcblx0XHRsZXQgY2hpbGREb2N1bWVudDpUICYgRG9jdW1lbnQuQ2xhc3MgPSBEb2N1bWVudC5GYWN0b3J5LmlzKCBjaGlsZE9iamVjdCApID8gPFQgJiBEb2N1bWVudC5DbGFzcz4gY2hpbGRPYmplY3QgOiBEb2N1bWVudC5GYWN0b3J5LmNyZWF0ZUZyb208VD4oIGNoaWxkT2JqZWN0ICk7XG5cblx0XHR0aGlzLnNldERlZmF1bHRSZXF1ZXN0T3B0aW9ucyggcmVxdWVzdE9wdGlvbnMsIE5TLkxEUC5DbGFzcy5Db250YWluZXIgKTtcblx0XHRyZXR1cm4gdGhpcy5wZXJzaXN0RG9jdW1lbnQ8VCAmIERvY3VtZW50LkNsYXNzLCBQZXJzaXN0ZWRQcm90ZWN0ZWREb2N1bWVudC5DbGFzcz4oIHBhcmVudFVSSSwgc2x1ZywgY2hpbGREb2N1bWVudCwgcmVxdWVzdE9wdGlvbnMgKTtcblx0fVxuXG5cdGNyZWF0ZUNoaWxkQW5kUmV0cmlldmU8VCBleHRlbmRzIE9iamVjdD4oIHBhcmVudFVSSTpzdHJpbmcsIGNoaWxkT2JqZWN0OlQsIHNsdWc/OnN0cmluZywgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIFQgJiBQZXJzaXN0ZWRQcm90ZWN0ZWREb2N1bWVudC5DbGFzcywgWyBIVFRQLlJlc3BvbnNlLkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0gXT47XG5cdGNyZWF0ZUNoaWxkQW5kUmV0cmlldmU8VCBleHRlbmRzIE9iamVjdD4oIHBhcmVudFVSSTpzdHJpbmcsIGNoaWxkT2JqZWN0OlQsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBUICYgUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQuQ2xhc3MsIFsgSFRUUC5SZXNwb25zZS5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdIF0+O1xuXHRjcmVhdGVDaGlsZEFuZFJldHJpZXZlPFQgZXh0ZW5kcyBPYmplY3Q+KCBwYXJlbnRVUkk6c3RyaW5nLCBjaGlsZE9iamVjdDpULCBzbHVnT3JSZXF1ZXN0T3B0aW9ucz86YW55LCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgVCAmIFBlcnNpc3RlZFByb3RlY3RlZERvY3VtZW50LkNsYXNzLCBbIEhUVFAuUmVzcG9uc2UuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXSBdPiB7XG5cdFx0bGV0IGNyZWF0ZVJlc3BvbnNlOkhUVFAuUmVzcG9uc2UuQ2xhc3M7XG5cdFx0cmV0dXJuIHRoaXMuY3JlYXRlQ2hpbGQoIHBhcmVudFVSSSwgY2hpbGRPYmplY3QsIHNsdWdPclJlcXVlc3RPcHRpb25zLCByZXF1ZXN0T3B0aW9ucyApLnRoZW4oICggWyBkb2N1bWVudCwgcmVzcG9uc2UgXTpbIFQgJiBQZXJzaXN0ZWRQcm90ZWN0ZWREb2N1bWVudC5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdICkgPT4ge1xuXHRcdFx0Y3JlYXRlUmVzcG9uc2UgPSByZXNwb25zZTtcblx0XHRcdHJldHVybiB0aGlzLmdldDxUPiggZG9jdW1lbnQuaWQgKTtcblx0XHR9ICkudGhlbiggKCBbIHBlcnNpc3RlZERvY3VtZW50LCByZXNwb25zZSBdOlsgVCAmIFBlcnNpc3RlZERvY3VtZW50LkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0gKSA9PiB7XG5cdFx0XHRyZXR1cm4gWyBwZXJzaXN0ZWREb2N1bWVudCwgWyBjcmVhdGVSZXNwb25zZSwgcmVzcG9uc2UgXSBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdGxpc3RDaGlsZHJlbiggcGFyZW50VVJJOnN0cmluZywgcmVxdWVzdE9wdGlvbnM6SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgPSB7fSApOlByb21pc2U8WyBQZXJzaXN0ZWREb2N1bWVudC5DbGFzc1tdLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+IHtcblx0XHRwYXJlbnRVUkkgPSB0aGlzLmdldFJlcXVlc3RVUkkoIHBhcmVudFVSSSApO1xuXHRcdHRoaXMuc2V0RGVmYXVsdFJlcXVlc3RPcHRpb25zKCByZXF1ZXN0T3B0aW9ucywgTlMuTERQLkNsYXNzLkNvbnRhaW5lciApO1xuXG5cdFx0bGV0IGNvbnRhaW5lclJldHJpZXZhbFByZWZlcmVuY2VzOkhUVFAuUmVxdWVzdC5Db250YWluZXJSZXRyaWV2YWxQcmVmZXJlbmNlcyA9IHtcblx0XHRcdGluY2x1ZGU6IFtcblx0XHRcdFx0TlMuTERQLkNsYXNzLlByZWZlckNvbnRhaW5tZW50LFxuXHRcdFx0XSxcblx0XHRcdG9taXQ6IFtcblx0XHRcdFx0TlMuTERQLkNsYXNzLlByZWZlck1lbWJlcnNoaXAsXG5cdFx0XHRcdE5TLkxEUC5DbGFzcy5QcmVmZXJNaW5pbWFsQ29udGFpbmVyLFxuXHRcdFx0XHROUy5DLkNsYXNzLlByZWZlckNvbnRhaW5tZW50UmVzb3VyY2VzLFxuXHRcdFx0XHROUy5DLkNsYXNzLlByZWZlck1lbWJlcnNoaXBSZXNvdXJjZXMsXG5cdFx0XHRdLFxuXHRcdH07XG5cdFx0SFRUUC5SZXF1ZXN0LlV0aWwuc2V0Q29udGFpbmVyUmV0cmlldmFsUHJlZmVyZW5jZXMoIGNvbnRhaW5lclJldHJpZXZhbFByZWZlcmVuY2VzLCByZXF1ZXN0T3B0aW9ucyApO1xuXG5cdFx0cmV0dXJuIEhUVFAuUmVxdWVzdC5TZXJ2aWNlLmdldCggcGFyZW50VVJJLCByZXF1ZXN0T3B0aW9ucywgbmV3IFJERi5Eb2N1bWVudC5QYXJzZXIoKSApXG5cdFx0XHQudGhlbiggKCBbIHJkZkRvY3VtZW50cywgcmVzcG9uc2UgXTpbIFJERi5Eb2N1bWVudC5DbGFzc1tdLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0gKSA9PiB7XG5cdFx0XHRcdGxldCByZGZEb2N1bWVudDpSREYuRG9jdW1lbnQuQ2xhc3MgPSB0aGlzLmdldFJERkRvY3VtZW50KCBwYXJlbnRVUkksIHJkZkRvY3VtZW50cywgcmVzcG9uc2UgKTtcblx0XHRcdFx0aWYoIHJkZkRvY3VtZW50ID09PSBudWxsICkgcmV0dXJuIFsgW10sIHJlc3BvbnNlIF07XG5cblx0XHRcdFx0bGV0IGRvY3VtZW50UmVzb3VyY2U6UkRGLk5vZGUuQ2xhc3MgPSB0aGlzLmdldERvY3VtZW50UmVzb3VyY2UoIHJkZkRvY3VtZW50LCByZXNwb25zZSApO1xuXHRcdFx0XHRsZXQgY2hpbGRQb2ludGVyczpQb2ludGVyLkNsYXNzW10gPSBSREYuTm9kZS5VdGlsLmdldFByb3BlcnR5UG9pbnRlcnMoIGRvY3VtZW50UmVzb3VyY2UsIE5TLkxEUC5QcmVkaWNhdGUuY29udGFpbnMsIHRoaXMgKTtcblx0XHRcdFx0bGV0IHBlcnNpc3RlZENoaWxkUG9pbnRlcnM6UGVyc2lzdGVkRG9jdW1lbnQuQ2xhc3NbXSA9IGNoaWxkUG9pbnRlcnMubWFwKCBwb2ludGVyID0+IFBlcnNpc3RlZERvY3VtZW50LkZhY3RvcnkuZGVjb3JhdGUoIHBvaW50ZXIsIHRoaXMgKSApO1xuXG5cdFx0XHRcdHJldHVybiBbIHBlcnNpc3RlZENoaWxkUG9pbnRlcnMsIHJlc3BvbnNlIF07XG5cdFx0XHR9ICk7XG5cdH1cblxuXHRnZXRDaGlsZHJlbjxUPiggcGFyZW50VVJJOnN0cmluZywgcmV0cmlldmFsUHJlZmVyZW5jZXM/OlJldHJpZXZhbFByZWZlcmVuY2VzLkNsYXNzLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgKFQgJiBQZXJzaXN0ZWREb2N1bWVudC5DbGFzcylbXSwgSFRUUC5SZXNwb25zZS5DbGFzcyBdPjtcblx0Z2V0Q2hpbGRyZW48VD4oIHBhcmVudFVSSTpzdHJpbmcsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyAoVCAmIFBlcnNpc3RlZERvY3VtZW50LkNsYXNzKVtdLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+O1xuXHRnZXRDaGlsZHJlbjxUPiggcGFyZW50VVJJOnN0cmluZywgcmV0UHJlZlJlcU9wdD86YW55LCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgKFQgJiBQZXJzaXN0ZWREb2N1bWVudC5DbGFzcylbXSwgSFRUUC5SZXNwb25zZS5DbGFzcyBdPiB7XG5cdFx0bGV0IHJldHJpZXZhbFByZWZlcmVuY2VzOlJldHJpZXZhbFByZWZlcmVuY2VzLkNsYXNzID0gUmV0cmlldmFsUHJlZmVyZW5jZXMuRmFjdG9yeS5pcyggcmV0UHJlZlJlcU9wdCApID8gcmV0UHJlZlJlcU9wdCA6IG51bGw7XG5cdFx0cmVxdWVzdE9wdGlvbnMgPSBIVFRQLlJlcXVlc3QuVXRpbC5pc09wdGlvbnMoIHJldFByZWZSZXFPcHQgKSA/IHJldFByZWZSZXFPcHQgOiAoIEhUVFAuUmVxdWVzdC5VdGlsLmlzT3B0aW9ucyggcmVxdWVzdE9wdGlvbnMgKSA/IHJlcXVlc3RPcHRpb25zIDoge30gKTtcblxuXHRcdHBhcmVudFVSSSA9IHRoaXMuZ2V0UmVxdWVzdFVSSSggcGFyZW50VVJJICk7XG5cdFx0dGhpcy5zZXREZWZhdWx0UmVxdWVzdE9wdGlvbnMoIHJlcXVlc3RPcHRpb25zLCBOUy5MRFAuQ2xhc3MuQ29udGFpbmVyICk7XG5cblx0XHRsZXQgY29udGFpbmVyVVJJOnN0cmluZyA9IHBhcmVudFVSSTtcblx0XHRpZiggISAhIHJldHJpZXZhbFByZWZlcmVuY2VzICkgcGFyZW50VVJJICs9IFJldHJpZXZhbFByZWZlcmVuY2VzLlV0aWwuc3RyaW5naWZ5UmV0cmlldmFsUHJlZmVyZW5jZXMoIHJldHJpZXZhbFByZWZlcmVuY2VzLCB0aGlzLmdldEdlbmVyYWxTY2hlbWEoKSApO1xuXG5cdFx0bGV0IGNvbnRhaW5lclJldHJpZXZhbFByZWZlcmVuY2VzOkhUVFAuUmVxdWVzdC5Db250YWluZXJSZXRyaWV2YWxQcmVmZXJlbmNlcyA9IHtcblx0XHRcdGluY2x1ZGU6IFtcblx0XHRcdFx0TlMuTERQLkNsYXNzLlByZWZlckNvbnRhaW5tZW50LFxuXHRcdFx0XHROUy5DLkNsYXNzLlByZWZlckNvbnRhaW5tZW50UmVzb3VyY2VzLFxuXHRcdFx0XSxcblx0XHRcdG9taXQ6IFtcblx0XHRcdFx0TlMuTERQLkNsYXNzLlByZWZlck1lbWJlcnNoaXAsXG5cdFx0XHRcdE5TLkxEUC5DbGFzcy5QcmVmZXJNaW5pbWFsQ29udGFpbmVyLFxuXHRcdFx0XHROUy5DLkNsYXNzLlByZWZlck1lbWJlcnNoaXBSZXNvdXJjZXMsXG5cdFx0XHRdLFxuXHRcdH07XG5cdFx0SFRUUC5SZXF1ZXN0LlV0aWwuc2V0Q29udGFpbmVyUmV0cmlldmFsUHJlZmVyZW5jZXMoIGNvbnRhaW5lclJldHJpZXZhbFByZWZlcmVuY2VzLCByZXF1ZXN0T3B0aW9ucyApO1xuXG5cdFx0cmV0dXJuIEhUVFAuUmVxdWVzdC5TZXJ2aWNlLmdldCggcGFyZW50VVJJLCByZXF1ZXN0T3B0aW9ucywgbmV3IEpTT05MRC5QYXJzZXIuQ2xhc3MoKSApLnRoZW4oICggWyBleHBhbmRlZFJlc3VsdCwgcmVzcG9uc2UgXTpbIGFueSwgSFRUUC5SZXNwb25zZS5DbGFzcyBdICkgPT4ge1xuXHRcdFx0bGV0IGZyZWVOb2RlczpSREYuTm9kZS5DbGFzc1tdID0gUkRGLk5vZGUuVXRpbC5nZXRGcmVlTm9kZXMoIGV4cGFuZGVkUmVzdWx0ICk7XG5cdFx0XHRsZXQgcmRmRG9jdW1lbnRzOlJERi5Eb2N1bWVudC5DbGFzc1tdID0gUkRGLkRvY3VtZW50LlV0aWwuZ2V0RG9jdW1lbnRzKCBleHBhbmRlZFJlc3VsdCApLmZpbHRlciggZG9jdW1lbnQgPT4gZG9jdW1lbnRbIFwiQGlkXCIgXSAhPT0gY29udGFpbmVyVVJJICk7XG5cblx0XHRcdGxldCByZXNvdXJjZXM6UGVyc2lzdGVkRG9jdW1lbnQuQ2xhc3NbXSA9IHRoaXMuZ2V0UGVyc2lzdGVkTWV0YWRhdGFSZXNvdXJjZXMoIGZyZWVOb2RlcywgcmRmRG9jdW1lbnRzLCByZXNwb25zZSApO1xuXHRcdFx0cmV0dXJuIFsgcmVzb3VyY2VzLCByZXNwb25zZSBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdGNyZWF0ZUFjY2Vzc1BvaW50PFQgZXh0ZW5kcyBBY2Nlc3NQb2ludC5DbGFzcz4oIGRvY3VtZW50VVJJOnN0cmluZywgYWNjZXNzUG9pbnQ6VCwgc2x1Zz86c3RyaW5nLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgVCAmIFBlcnNpc3RlZEFjY2Vzc1BvaW50LkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+O1xuXHRjcmVhdGVBY2Nlc3NQb2ludDxUIGV4dGVuZHMgQWNjZXNzUG9pbnQuQ2xhc3M+KCBkb2N1bWVudFVSSTpzdHJpbmcsIGFjY2Vzc1BvaW50OlQsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBUICYgUGVyc2lzdGVkQWNjZXNzUG9pbnQuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cdGNyZWF0ZUFjY2Vzc1BvaW50PFQgZXh0ZW5kcyBBY2Nlc3NQb2ludC5DbGFzcz4oIGRvY3VtZW50VVJJOnN0cmluZywgYWNjZXNzUG9pbnQ6VCwgc2x1Z09yUmVxdWVzdE9wdGlvbnM6YW55LCByZXF1ZXN0T3B0aW9uczpIVFRQLlJlcXVlc3QuT3B0aW9ucyA9IHt9ICk6UHJvbWlzZTxbIFQgJiBQZXJzaXN0ZWRBY2Nlc3NQb2ludC5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdPiB7XG5cdFx0bGV0IHNsdWc6c3RyaW5nID0gVXRpbHMuaXNTdHJpbmcoIHNsdWdPclJlcXVlc3RPcHRpb25zICkgPyBzbHVnT3JSZXF1ZXN0T3B0aW9ucyA6IG51bGw7XG5cdFx0cmVxdWVzdE9wdGlvbnMgPSAhIFV0aWxzLmlzU3RyaW5nKCBzbHVnT3JSZXF1ZXN0T3B0aW9ucyApICYmICEgISBzbHVnT3JSZXF1ZXN0T3B0aW9ucyA/IHNsdWdPclJlcXVlc3RPcHRpb25zIDogcmVxdWVzdE9wdGlvbnM7XG5cblx0XHRpZiggUGVyc2lzdGVkRG9jdW1lbnQuRmFjdG9yeS5pcyggYWNjZXNzUG9pbnQgKSApIHJldHVybiBQcm9taXNlLnJlamVjdDxhbnk+KCBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIlRoZSBhY2Nlc3NQb2ludCBwcm92aWRlZCBoYXMgYmVlbiBhbHJlYWR5IHBlcnNpc3RlZC5cIiApICk7XG5cdFx0bGV0IGFjY2Vzc1BvaW50RG9jdW1lbnQ6VCAmIEFjY2Vzc1BvaW50LkRvY3VtZW50Q2xhc3MgPSBBY2Nlc3NQb2ludC5GYWN0b3J5LmlzKCBhY2Nlc3NQb2ludCApID8gPGFueT4gYWNjZXNzUG9pbnRcblx0XHRcdDogQWNjZXNzUG9pbnQuRmFjdG9yeS5jcmVhdGVGcm9tPFQ+KCBhY2Nlc3NQb2ludCwgdGhpcy5nZXRQb2ludGVyKCBkb2N1bWVudFVSSSApLCBhY2Nlc3NQb2ludC5oYXNNZW1iZXJSZWxhdGlvbiwgYWNjZXNzUG9pbnQuaXNNZW1iZXJPZlJlbGF0aW9uICk7XG5cdFx0aWYoIGFjY2Vzc1BvaW50RG9jdW1lbnQubWVtYmVyc2hpcFJlc291cmNlLmlkICE9PSBkb2N1bWVudFVSSSApIHJldHVybiBQcm9taXNlLnJlamVjdDxhbnk+KCBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIlRoZSBkb2N1bWVudFVSSSBtdXN0IGJlIHRoZSBzYW1lIGFzIHRoZSBhY2Nlc3NQb2ludCdzIG1lbWJlcnNoaXBSZXNvdXJjZVwiICkgKTtcblxuXG5cdFx0dGhpcy5zZXREZWZhdWx0UmVxdWVzdE9wdGlvbnMoIHJlcXVlc3RPcHRpb25zLCBOUy5MRFAuQ2xhc3MuUkRGU291cmNlICk7XG5cdFx0cmV0dXJuIHRoaXMucGVyc2lzdERvY3VtZW50PFQgJiBBY2Nlc3NQb2ludC5Eb2N1bWVudENsYXNzLCBQZXJzaXN0ZWRBY2Nlc3NQb2ludC5DbGFzcz4oIGRvY3VtZW50VVJJLCBzbHVnLCBhY2Nlc3NQb2ludERvY3VtZW50LCByZXF1ZXN0T3B0aW9ucyApO1xuXHR9XG5cblx0dXBsb2FkKCBwYXJlbnRVUkk6c3RyaW5nLCBkYXRhOkJ1ZmZlciwgc2x1Zz86c3RyaW5nLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgUG9pbnRlci5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdPjtcblx0dXBsb2FkKCBwYXJlbnRVUkk6c3RyaW5nLCBkYXRhOkJ1ZmZlciwgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIFBvaW50ZXIuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cdHVwbG9hZCggcGFyZW50VVJJOnN0cmluZywgZGF0YTpCbG9iLCBzbHVnPzpzdHJpbmcsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBQb2ludGVyLkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+O1xuXHR1cGxvYWQoIHBhcmVudFVSSTpzdHJpbmcsIGRhdGE6QmxvYiwgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIFBvaW50ZXIuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cdHVwbG9hZCggcGFyZW50VVJJOnN0cmluZywgZGF0YTpCbG9iIHwgQnVmZmVyLCBzbHVnT3JSZXF1ZXN0T3B0aW9ucz86YW55LCByZXF1ZXN0T3B0aW9uczpIVFRQLlJlcXVlc3QuT3B0aW9ucyA9IHt9ICk6UHJvbWlzZTxbIFBvaW50ZXIuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4ge1xuXHRcdGxldCBzbHVnOnN0cmluZyA9IFV0aWxzLmlzU3RyaW5nKCBzbHVnT3JSZXF1ZXN0T3B0aW9ucyApID8gc2x1Z09yUmVxdWVzdE9wdGlvbnMgOiBudWxsO1xuXHRcdHJlcXVlc3RPcHRpb25zID0gISBVdGlscy5pc1N0cmluZyggc2x1Z09yUmVxdWVzdE9wdGlvbnMgKSAmJiAhICEgc2x1Z09yUmVxdWVzdE9wdGlvbnMgPyBzbHVnT3JSZXF1ZXN0T3B0aW9ucyA6IHJlcXVlc3RPcHRpb25zO1xuXG5cdFx0aWYoIHR5cGVvZiBCbG9iICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0aWYoICEgKCBkYXRhIGluc3RhbmNlb2YgQmxvYiApICkgcmV0dXJuIFByb21pc2UucmVqZWN0PGFueT4oIG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiVGhlIGRhdGEgaXMgbm90IGEgdmFsaWQgQmxvYiBvYmplY3QuXCIgKSApO1xuXHRcdFx0SFRUUC5SZXF1ZXN0LlV0aWwuc2V0Q29udGVudFR5cGVIZWFkZXIoICg8QmxvYj4gZGF0YSkudHlwZSwgcmVxdWVzdE9wdGlvbnMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiggISAoIGRhdGEgaW5zdGFuY2VvZiBCdWZmZXIgKSApIHJldHVybiBQcm9taXNlLnJlamVjdDxhbnk+KCBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIlRoZSBkYXRhIGlzIG5vdCBhIHZhbGlkIEJ1ZmZlciBvYmplY3QuXCIgKSApO1xuXHRcdFx0Y29uc3QgZmlsZVR5cGU6KCBidWZmZXI6QnVmZmVyICkgPT4geyBleHQ6c3RyaW5nLCBtaW1lOnN0cmluZyB9ID0gcmVxdWlyZSggXCJmaWxlLXR5cGVcIiApO1xuXG5cdFx0XHRsZXQgYnVmZmVyVHlwZTp7IGV4dDpzdHJpbmcsIG1pbWU6c3RyaW5nIH0gPSBmaWxlVHlwZSggPEJ1ZmZlcj4gZGF0YSApO1xuXHRcdFx0SFRUUC5SZXF1ZXN0LlV0aWwuc2V0Q29udGVudFR5cGVIZWFkZXIoIGJ1ZmZlclR5cGUgPyBidWZmZXJUeXBlLm1pbWUgOiBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiLCByZXF1ZXN0T3B0aW9ucyApO1xuXHRcdH1cblxuXHRcdHBhcmVudFVSSSA9IHRoaXMuZ2V0UmVxdWVzdFVSSSggcGFyZW50VVJJICk7XG5cdFx0dGhpcy5zZXREZWZhdWx0UmVxdWVzdE9wdGlvbnMoIHJlcXVlc3RPcHRpb25zLCBOUy5MRFAuQ2xhc3MuQ29udGFpbmVyICk7XG5cblx0XHRpZiggISAhIHNsdWcgKSBIVFRQLlJlcXVlc3QuVXRpbC5zZXRTbHVnKCBzbHVnLCByZXF1ZXN0T3B0aW9ucyApO1xuXG5cdFx0cmV0dXJuIEhUVFAuUmVxdWVzdC5TZXJ2aWNlLnBvc3QoIHBhcmVudFVSSSwgPGFueT4gZGF0YSwgcmVxdWVzdE9wdGlvbnMgKS50aGVuKCAoIHJlc3BvbnNlOkhUVFAuUmVzcG9uc2UuQ2xhc3MgKSA9PiB7XG5cdFx0XHRsZXQgbG9jYXRpb25IZWFkZXI6SFRUUC5IZWFkZXIuQ2xhc3MgPSByZXNwb25zZS5nZXRIZWFkZXIoIFwiTG9jYXRpb25cIiApO1xuXHRcdFx0aWYoIGxvY2F0aW9uSGVhZGVyID09PSBudWxsIHx8IGxvY2F0aW9uSGVhZGVyLnZhbHVlcy5sZW5ndGggPCAxICkgdGhyb3cgbmV3IEhUVFAuRXJyb3JzLkJhZFJlc3BvbnNlRXJyb3IoIFwiVGhlIHJlc3BvbnNlIGlzIG1pc3NpbmcgYSBMb2NhdGlvbiBoZWFkZXIuXCIsIHJlc3BvbnNlICk7XG5cdFx0XHRpZiggbG9jYXRpb25IZWFkZXIudmFsdWVzLmxlbmd0aCAhPT0gMSApIHRocm93IG5ldyBIVFRQLkVycm9ycy5CYWRSZXNwb25zZUVycm9yKCBcIlRoZSByZXNwb25zZSBjb250YWlucyBtb3JlIHRoYW4gb25lIExvY2F0aW9uIGhlYWRlci5cIiwgcmVzcG9uc2UgKTtcblxuXHRcdFx0bGV0IGxvY2F0aW9uVVJJOnN0cmluZyA9IGxvY2F0aW9uSGVhZGVyLnZhbHVlc1sgMCBdLnRvU3RyaW5nKCk7XG5cblx0XHRcdGxldCBwb2ludGVyOlBvaW50ZXIuQ2xhc3MgPSB0aGlzLmdldFBvaW50ZXIoIGxvY2F0aW9uVVJJICk7XG5cblx0XHRcdHJldHVybiBbXG5cdFx0XHRcdHBvaW50ZXIsXG5cdFx0XHRcdHJlc3BvbnNlLFxuXHRcdFx0XTtcblx0XHR9ICk7XG5cdH1cblxuXHRsaXN0TWVtYmVycyggdXJpOnN0cmluZywgaW5jbHVkZU5vblJlYWRhYmxlPzpib29sZWFuLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgUGVyc2lzdGVkRG9jdW1lbnQuQ2xhc3NbXSwgSFRUUC5SZXNwb25zZS5DbGFzcyBdPjtcblx0bGlzdE1lbWJlcnMoIHVyaTpzdHJpbmcsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBQZXJzaXN0ZWREb2N1bWVudC5DbGFzc1tdLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+O1xuXHRsaXN0TWVtYmVycyggdXJpOnN0cmluZywgbm9uUmVhZFJlcU9wdD86YW55LCByZXFPcHQ/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIFBlcnNpc3RlZERvY3VtZW50LkNsYXNzW10sIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4ge1xuXHRcdGxldCBpbmNsdWRlTm9uUmVhZGFibGU6Ym9vbGVhbiA9IFV0aWxzLmlzQm9vbGVhbiggbm9uUmVhZFJlcU9wdCApID8gbm9uUmVhZFJlcU9wdCA6IHRydWU7XG5cdFx0bGV0IHJlcXVlc3RPcHRpb25zOkhUVFAuUmVxdWVzdC5PcHRpb25zID0gSFRUUC5SZXF1ZXN0LlV0aWwuaXNPcHRpb25zKCBub25SZWFkUmVxT3B0ICkgPyBub25SZWFkUmVxT3B0IDogKCBIVFRQLlJlcXVlc3QuVXRpbC5pc09wdGlvbnMoIHJlcU9wdCApID8gcmVxT3B0IDoge30gKTtcblxuXHRcdHVyaSA9IHRoaXMuZ2V0UmVxdWVzdFVSSSggdXJpICk7XG5cdFx0dGhpcy5zZXREZWZhdWx0UmVxdWVzdE9wdGlvbnMoIHJlcXVlc3RPcHRpb25zLCBOUy5MRFAuQ2xhc3MuQ29udGFpbmVyICk7XG5cblx0XHRsZXQgY29udGFpbmVyUmV0cmlldmFsUHJlZmVyZW5jZXM6SFRUUC5SZXF1ZXN0LkNvbnRhaW5lclJldHJpZXZhbFByZWZlcmVuY2VzID0ge1xuXHRcdFx0aW5jbHVkZTogW1xuXHRcdFx0XHROUy5MRFAuQ2xhc3MuUHJlZmVyTWluaW1hbENvbnRhaW5lcixcblx0XHRcdFx0TlMuTERQLkNsYXNzLlByZWZlck1lbWJlcnNoaXAsXG5cdFx0XHRdLFxuXHRcdFx0b21pdDogW1xuXHRcdFx0XHROUy5MRFAuQ2xhc3MuUHJlZmVyQ29udGFpbm1lbnQsXG5cdFx0XHRcdE5TLkMuQ2xhc3MuUHJlZmVyQ29udGFpbm1lbnRSZXNvdXJjZXMsXG5cdFx0XHRcdE5TLkMuQ2xhc3MuUHJlZmVyTWVtYmVyc2hpcFJlc291cmNlcyxcblx0XHRcdF0sXG5cdFx0fTtcblxuXHRcdGlmKCBpbmNsdWRlTm9uUmVhZGFibGUgKSB7XG5cdFx0XHRjb250YWluZXJSZXRyaWV2YWxQcmVmZXJlbmNlcy5pbmNsdWRlLnB1c2goIE5TLkMuQ2xhc3MuTm9uUmVhZGFibGVNZW1iZXJzaGlwUmVzb3VyY2VUcmlwbGVzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRhaW5lclJldHJpZXZhbFByZWZlcmVuY2VzLm9taXQucHVzaCggTlMuQy5DbGFzcy5Ob25SZWFkYWJsZU1lbWJlcnNoaXBSZXNvdXJjZVRyaXBsZXMgKTtcblx0XHR9XG5cdFx0SFRUUC5SZXF1ZXN0LlV0aWwuc2V0Q29udGFpbmVyUmV0cmlldmFsUHJlZmVyZW5jZXMoIGNvbnRhaW5lclJldHJpZXZhbFByZWZlcmVuY2VzLCByZXF1ZXN0T3B0aW9ucyApO1xuXG5cdFx0cmV0dXJuIEhUVFAuUmVxdWVzdC5TZXJ2aWNlLmdldCggdXJpLCByZXF1ZXN0T3B0aW9ucywgbmV3IFJERi5Eb2N1bWVudC5QYXJzZXIoKSApLnRoZW4oICggWyByZGZEb2N1bWVudHMsIHJlc3BvbnNlIF06WyBSREYuRG9jdW1lbnQuQ2xhc3NbXSwgSFRUUC5SZXNwb25zZS5DbGFzcyBdICkgPT4ge1xuXHRcdFx0bGV0IHJkZkRvY3VtZW50OlJERi5Eb2N1bWVudC5DbGFzcyA9IHRoaXMuZ2V0UkRGRG9jdW1lbnQoIHVyaSwgcmRmRG9jdW1lbnRzLCByZXNwb25zZSApO1xuXHRcdFx0aWYoIHJkZkRvY3VtZW50ID09PSBudWxsICkgdGhyb3cgbmV3IEhUVFAuRXJyb3JzLkJhZFJlc3BvbnNlRXJyb3IoIFwiTm8gZG9jdW1lbnQgd2FzIHJldHVybmVkLlwiLCByZXNwb25zZSApO1xuXG5cdFx0XHRsZXQgZG9jdW1lbnRSZXNvdXJjZTpSREYuTm9kZS5DbGFzcyA9IHRoaXMuZ2V0RG9jdW1lbnRSZXNvdXJjZSggcmRmRG9jdW1lbnQsIHJlc3BvbnNlICk7XG5cdFx0XHRsZXQgbWVtYmVyc2hpcFJlc291cmNlOlJERi5Ob2RlLkNsYXNzID0gdGhpcy5nZXRNZW1iZXJzaGlwUmVzb3VyY2UoIGRvY3VtZW50UmVzb3VyY2UsIHJkZkRvY3VtZW50cywgcmVzcG9uc2UgKTtcblx0XHRcdGlmKCBtZW1iZXJzaGlwUmVzb3VyY2UgPT09IG51bGwgKSByZXR1cm4gWyBbXSwgcmVzcG9uc2UgXTtcblxuXHRcdFx0bGV0IGhhc01lbWJlclJlbGF0aW9uOnN0cmluZyA9IFJERi5Ob2RlLlV0aWwuZ2V0UHJvcGVydHlVUkkoIGRvY3VtZW50UmVzb3VyY2UsIE5TLkxEUC5QcmVkaWNhdGUuaGFzTWVtYmVyUmVsYXRpb24gKTtcblxuXHRcdFx0bGV0IG1lbWJlclBvaW50ZXJzOlBvaW50ZXIuQ2xhc3NbXSA9IFJERi5Ob2RlLlV0aWwuZ2V0UHJvcGVydHlQb2ludGVycyggbWVtYmVyc2hpcFJlc291cmNlLCBoYXNNZW1iZXJSZWxhdGlvbiwgdGhpcyApO1xuXHRcdFx0bGV0IHBlcnNpc3RlZE1lbWJlclBvaW50ZXJzOlBlcnNpc3RlZERvY3VtZW50LkNsYXNzW10gPSBtZW1iZXJQb2ludGVycy5tYXAoIHBvaW50ZXIgPT4gUGVyc2lzdGVkRG9jdW1lbnQuRmFjdG9yeS5kZWNvcmF0ZSggcG9pbnRlciwgdGhpcyApICk7XG5cblx0XHRcdHJldHVybiBbIHBlcnNpc3RlZE1lbWJlclBvaW50ZXJzLCByZXNwb25zZSBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdGdldE1lbWJlcnM8VD4oIHVyaTpzdHJpbmcsIGluY2x1ZGVOb25SZWFkYWJsZT86Ym9vbGVhbiwgcmV0cmlldmFsUHJlZmVyZW5jZXM/OlJldHJpZXZhbFByZWZlcmVuY2VzLkNsYXNzLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgKFQgJiBQZXJzaXN0ZWREb2N1bWVudC5DbGFzcylbXSwgSFRUUC5SZXNwb25zZS5DbGFzcyBdPjtcblx0Z2V0TWVtYmVyczxUPiggdXJpOnN0cmluZywgaW5jbHVkZU5vblJlYWRhYmxlPzpib29sZWFuLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgKFQgJiBQZXJzaXN0ZWREb2N1bWVudC5DbGFzcylbXSwgSFRUUC5SZXNwb25zZS5DbGFzcyBdPjtcblx0Z2V0TWVtYmVyczxUPiggdXJpOnN0cmluZywgcmV0cmlldmFsUHJlZmVyZW5jZXM/OlJldHJpZXZhbFByZWZlcmVuY2VzLkNsYXNzLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgKFQgJiBQZXJzaXN0ZWREb2N1bWVudC5DbGFzcylbXSwgSFRUUC5SZXNwb25zZS5DbGFzcyBdPjtcblx0Z2V0TWVtYmVyczxUPiggdXJpOnN0cmluZywgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIChUICYgUGVyc2lzdGVkRG9jdW1lbnQuQ2xhc3MpW10sIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cdGdldE1lbWJlcnM8VD4oIHVyaTpzdHJpbmcsIG5vblJlYWRSZXRQcmVmUmVxT3B0PzphbnksIHJldFByZWZSZXFPcHQ/OmFueSwgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIChUICYgUGVyc2lzdGVkRG9jdW1lbnQuQ2xhc3MpW10sIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4ge1xuXHRcdGxldCBpbmNsdWRlTm9uUmVhZGFibGU6Ym9vbGVhbiA9IFV0aWxzLmlzQm9vbGVhbiggbm9uUmVhZFJldFByZWZSZXFPcHQgKSA/IG5vblJlYWRSZXRQcmVmUmVxT3B0IDogdHJ1ZTtcblx0XHRsZXQgcmV0cmlldmFsUHJlZmVyZW5jZXM6UmV0cmlldmFsUHJlZmVyZW5jZXMuQ2xhc3MgPSBSZXRyaWV2YWxQcmVmZXJlbmNlcy5GYWN0b3J5LmlzKCBub25SZWFkUmV0UHJlZlJlcU9wdCApID8gbm9uUmVhZFJldFByZWZSZXFPcHQgOiAoIFJldHJpZXZhbFByZWZlcmVuY2VzLkZhY3RvcnkuaXMoIHJldFByZWZSZXFPcHQgKSA/IHJldFByZWZSZXFPcHQgOiBudWxsICk7XG5cdFx0cmVxdWVzdE9wdGlvbnMgPSBIVFRQLlJlcXVlc3QuVXRpbC5pc09wdGlvbnMoIG5vblJlYWRSZXRQcmVmUmVxT3B0ICkgPyBub25SZWFkUmV0UHJlZlJlcU9wdCA6ICggSFRUUC5SZXF1ZXN0LlV0aWwuaXNPcHRpb25zKCByZXRQcmVmUmVxT3B0ICkgPyByZXRQcmVmUmVxT3B0IDogKCBIVFRQLlJlcXVlc3QuVXRpbC5pc09wdGlvbnMoIHJlcXVlc3RPcHRpb25zICkgPyByZXF1ZXN0T3B0aW9ucyA6IHt9ICkgKTtcblxuXHRcdHVyaSA9IHRoaXMuZ2V0UmVxdWVzdFVSSSggdXJpICk7XG5cdFx0dGhpcy5zZXREZWZhdWx0UmVxdWVzdE9wdGlvbnMoIHJlcXVlc3RPcHRpb25zLCBOUy5MRFAuQ2xhc3MuQ29udGFpbmVyICk7XG5cblx0XHRsZXQgY29udGFpbmVyVVJJOnN0cmluZyA9IHVyaTtcblx0XHRpZiggISAhIHJldHJpZXZhbFByZWZlcmVuY2VzICkgdXJpICs9IFJldHJpZXZhbFByZWZlcmVuY2VzLlV0aWwuc3RyaW5naWZ5UmV0cmlldmFsUHJlZmVyZW5jZXMoIHJldHJpZXZhbFByZWZlcmVuY2VzLCB0aGlzLmdldEdlbmVyYWxTY2hlbWEoKSApO1xuXG5cdFx0bGV0IGNvbnRhaW5lclJldHJpZXZhbFByZWZlcmVuY2VzOkhUVFAuUmVxdWVzdC5Db250YWluZXJSZXRyaWV2YWxQcmVmZXJlbmNlcyA9IHtcblx0XHRcdGluY2x1ZGU6IFtcblx0XHRcdFx0TlMuTERQLkNsYXNzLlByZWZlck1pbmltYWxDb250YWluZXIsXG5cdFx0XHRcdE5TLkxEUC5DbGFzcy5QcmVmZXJNZW1iZXJzaGlwLFxuXHRcdFx0XHROUy5DLkNsYXNzLlByZWZlck1lbWJlcnNoaXBSZXNvdXJjZXMsXG5cdFx0XHRdLFxuXHRcdFx0b21pdDogW1xuXHRcdFx0XHROUy5MRFAuQ2xhc3MuUHJlZmVyQ29udGFpbm1lbnQsXG5cdFx0XHRcdE5TLkMuQ2xhc3MuUHJlZmVyQ29udGFpbm1lbnRSZXNvdXJjZXMsXG5cdFx0XHRdLFxuXHRcdH07XG5cblx0XHRpZiggaW5jbHVkZU5vblJlYWRhYmxlICkge1xuXHRcdFx0Y29udGFpbmVyUmV0cmlldmFsUHJlZmVyZW5jZXMuaW5jbHVkZS5wdXNoKCBOUy5DLkNsYXNzLk5vblJlYWRhYmxlTWVtYmVyc2hpcFJlc291cmNlVHJpcGxlcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250YWluZXJSZXRyaWV2YWxQcmVmZXJlbmNlcy5vbWl0LnB1c2goIE5TLkMuQ2xhc3MuTm9uUmVhZGFibGVNZW1iZXJzaGlwUmVzb3VyY2VUcmlwbGVzICk7XG5cdFx0fVxuXHRcdEhUVFAuUmVxdWVzdC5VdGlsLnNldENvbnRhaW5lclJldHJpZXZhbFByZWZlcmVuY2VzKCBjb250YWluZXJSZXRyaWV2YWxQcmVmZXJlbmNlcywgcmVxdWVzdE9wdGlvbnMgKTtcblxuXHRcdHJldHVybiBIVFRQLlJlcXVlc3QuU2VydmljZS5nZXQoIHVyaSwgcmVxdWVzdE9wdGlvbnMsIG5ldyBKU09OTEQuUGFyc2VyLkNsYXNzKCkgKS50aGVuKCAoIFsgZXhwYW5kZWRSZXN1bHQsIHJlc3BvbnNlIF06WyBhbnksIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXSApID0+IHtcblx0XHRcdGxldCBmcmVlTm9kZXM6UkRGLk5vZGUuQ2xhc3NbXSA9IFJERi5Ob2RlLlV0aWwuZ2V0RnJlZU5vZGVzKCBleHBhbmRlZFJlc3VsdCApO1xuXHRcdFx0bGV0IHJkZkRvY3VtZW50czpSREYuRG9jdW1lbnQuQ2xhc3NbXSA9IFJERi5Eb2N1bWVudC5VdGlsLmdldERvY3VtZW50cyggZXhwYW5kZWRSZXN1bHQgKTtcblxuXHRcdFx0bGV0IHJkZkRvY3VtZW50OlJERi5Eb2N1bWVudC5DbGFzcyA9IHRoaXMuZ2V0UkRGRG9jdW1lbnQoIGNvbnRhaW5lclVSSSwgcmRmRG9jdW1lbnRzLCByZXNwb25zZSApO1xuXHRcdFx0aWYoIHJkZkRvY3VtZW50ID09PSBudWxsICkgdGhyb3cgbmV3IEhUVFAuRXJyb3JzLkJhZFJlc3BvbnNlRXJyb3IoIFwiTm8gZG9jdW1lbnQgd2FzIHJldHVybmVkLlwiLCByZXNwb25zZSApO1xuXG5cdFx0XHRsZXQgY29udGFpbmVyUmVzb3VyY2U6UkRGLk5vZGUuQ2xhc3MgPSB0aGlzLmdldERvY3VtZW50UmVzb3VyY2UoIHJkZkRvY3VtZW50LCByZXNwb25zZSApO1xuXHRcdFx0bGV0IG1lbWJlcnNoaXBSZXNvdXJjZTpSREYuTm9kZS5DbGFzcyA9IHRoaXMuZ2V0TWVtYmVyc2hpcFJlc291cmNlKCBjb250YWluZXJSZXNvdXJjZSwgcmRmRG9jdW1lbnRzLCByZXNwb25zZSApO1xuXHRcdFx0aWYoIG1lbWJlcnNoaXBSZXNvdXJjZSA9PT0gbnVsbCApIHJldHVybiBbIFtdLCByZXNwb25zZSBdO1xuXG5cdFx0XHRyZGZEb2N1bWVudHMgPSAoPGFueVtdPiByZGZEb2N1bWVudHMpLmZpbHRlciggKCB0YXJnZXRSREZEb2N1bWVudDpSREYuTm9kZS5DbGFzcyApID0+IHtcblx0XHRcdFx0cmV0dXJuICEgUkRGLk5vZGUuVXRpbC5hcmVFcXVhbCggdGFyZ2V0UkRGRG9jdW1lbnQsIGNvbnRhaW5lclJlc291cmNlIClcblx0XHRcdFx0XHQmJiAhIFJERi5Ob2RlLlV0aWwuYXJlRXF1YWwoIHRhcmdldFJERkRvY3VtZW50LCBtZW1iZXJzaGlwUmVzb3VyY2UgKVxuXHRcdFx0XHRcdDtcblx0XHRcdH0gKTtcblxuXHRcdFx0bGV0IHJlc291cmNlczpQZXJzaXN0ZWREb2N1bWVudC5DbGFzc1tdID0gdGhpcy5nZXRQZXJzaXN0ZWRNZXRhZGF0YVJlc291cmNlcyggZnJlZU5vZGVzLCByZGZEb2N1bWVudHMsIHJlc3BvbnNlICk7XG5cdFx0XHRyZXR1cm4gWyA8YW55PiByZXNvdXJjZXMsIHJlc3BvbnNlIF07XG5cdFx0fSApO1xuXHR9XG5cblx0YWRkTWVtYmVyKCBkb2N1bWVudFVSSTpzdHJpbmcsIG1lbWJlcjpQb2ludGVyLkNsYXNzLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+O1xuXHRhZGRNZW1iZXIoIGRvY3VtZW50VVJJOnN0cmluZywgbWVtYmVyVVJJOnN0cmluZywgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxIVFRQLlJlc3BvbnNlLkNsYXNzPjtcblx0YWRkTWVtYmVyKCBkb2N1bWVudFVSSTpzdHJpbmcsIG1lbWJlck9SVXJpOlBvaW50ZXIuQ2xhc3MgfCBzdHJpbmcsIHJlcXVlc3RPcHRpb25zOkhUVFAuUmVxdWVzdC5PcHRpb25zID0ge30gKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+IHtcblx0XHRyZXR1cm4gdGhpcy5hZGRNZW1iZXJzKCBkb2N1bWVudFVSSSwgWyBtZW1iZXJPUlVyaSBdLCByZXF1ZXN0T3B0aW9ucyApO1xuXHR9XG5cblx0YWRkTWVtYmVycyggZG9jdW1lbnRVUkk6c3RyaW5nLCBtZW1iZXJzOihQb2ludGVyLkNsYXNzIHwgc3RyaW5nKVtdLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+O1xuXHRhZGRNZW1iZXJzKCBkb2N1bWVudFVSSTpzdHJpbmcsIG1lbWJlcnM6KFBvaW50ZXIuQ2xhc3MgfCBzdHJpbmcpW10sIHJlcXVlc3RPcHRpb25zOkhUVFAuUmVxdWVzdC5PcHRpb25zID0ge30gKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+IHtcblx0XHRsZXQgcG9pbnRlcnM6UG9pbnRlci5DbGFzc1tdID0gW107XG5cdFx0Zm9yKCBsZXQgbWVtYmVyICBvZiBtZW1iZXJzICkge1xuXHRcdFx0bWVtYmVyID0gVXRpbHMuaXNTdHJpbmcoIG1lbWJlciApID8gdGhpcy5nZXRQb2ludGVyKCA8c3RyaW5nPiBtZW1iZXIgKSA6IG1lbWJlcjtcblx0XHRcdGlmKCAhIFBvaW50ZXIuRmFjdG9yeS5pcyggbWVtYmVyICkgKSByZXR1cm4gUHJvbWlzZS5yZWplY3Q8YW55PiggbmV3IEVycm9ycy5JbGxlZ2FsQXJndW1lbnRFcnJvciggXCJObyBDYXJib24uUG9pbnRlciBvciBVUkkgcHJvdmlkZWQuXCIgKSApO1xuXG5cdFx0XHRwb2ludGVycy5wdXNoKCA8UG9pbnRlci5DbGFzcz4gbWVtYmVyICk7XG5cdFx0fVxuXG5cdFx0ZG9jdW1lbnRVUkkgPSB0aGlzLmdldFJlcXVlc3RVUkkoIGRvY3VtZW50VVJJICk7XG5cdFx0dGhpcy5zZXREZWZhdWx0UmVxdWVzdE9wdGlvbnMoIHJlcXVlc3RPcHRpb25zLCBOUy5MRFAuQ2xhc3MuQ29udGFpbmVyICk7XG5cdFx0SFRUUC5SZXF1ZXN0LlV0aWwuc2V0Q29udGVudFR5cGVIZWFkZXIoIFwiYXBwbGljYXRpb24vbGQranNvblwiLCByZXF1ZXN0T3B0aW9ucyApO1xuXG5cdFx0bGV0IGRvY3VtZW50OkRvY3VtZW50LkNsYXNzID0gTERQLkFkZE1lbWJlckFjdGlvbi5GYWN0b3J5LmNyZWF0ZURvY3VtZW50KCBwb2ludGVycyApO1xuXG5cdFx0bGV0IGJvZHk6c3RyaW5nID0gZG9jdW1lbnQudG9KU09OKCB0aGlzLCB0aGlzLmpzb25sZENvbnZlcnRlciApO1xuXG5cdFx0cmV0dXJuIEhUVFAuUmVxdWVzdC5TZXJ2aWNlLnB1dCggZG9jdW1lbnRVUkksIGJvZHksIHJlcXVlc3RPcHRpb25zICk7XG5cdH1cblxuXHRyZW1vdmVNZW1iZXIoIGRvY3VtZW50VVJJOnN0cmluZywgbWVtYmVyOlBvaW50ZXIuQ2xhc3MsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8SFRUUC5SZXNwb25zZS5DbGFzcz47XG5cdHJlbW92ZU1lbWJlciggZG9jdW1lbnRVUkk6c3RyaW5nLCBtZW1iZXJVUkk6c3RyaW5nLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+O1xuXHRyZW1vdmVNZW1iZXIoIGRvY3VtZW50VVJJOnN0cmluZywgbWVtYmVyT1JVcmk6UG9pbnRlci5DbGFzcyB8IHN0cmluZywgcmVxdWVzdE9wdGlvbnM6SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgPSB7fSApOlByb21pc2U8SFRUUC5SZXNwb25zZS5DbGFzcz4ge1xuXHRcdHJldHVybiB0aGlzLnJlbW92ZU1lbWJlcnMoIGRvY3VtZW50VVJJLCBbIG1lbWJlck9SVXJpIF0sIHJlcXVlc3RPcHRpb25zICk7XG5cdH1cblxuXHRyZW1vdmVNZW1iZXJzKCBkb2N1bWVudFVSSTpzdHJpbmcsIG1lbWJlcnM6KFBvaW50ZXIuQ2xhc3MgfCBzdHJpbmcpW10sIHJlcXVlc3RPcHRpb25zOkhUVFAuUmVxdWVzdC5PcHRpb25zID0ge30gKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+IHtcblx0XHRsZXQgcG9pbnRlcnM6UG9pbnRlci5DbGFzc1tdID0gW107XG5cdFx0Zm9yKCBsZXQgbWVtYmVyIG9mIG1lbWJlcnMgKSB7XG5cdFx0XHRtZW1iZXIgPSBVdGlscy5pc1N0cmluZyggbWVtYmVyICkgPyB0aGlzLmdldFBvaW50ZXIoIDxzdHJpbmc+IG1lbWJlciApIDogbWVtYmVyO1xuXHRcdFx0aWYoICEgUG9pbnRlci5GYWN0b3J5LmlzKCBtZW1iZXIgKSApIHJldHVybiBQcm9taXNlLnJlamVjdDxhbnk+KCBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIk5vIENhcmJvbi5Qb2ludGVyIG9yIFVSSSBwcm92aWRlZC5cIiApICk7XG5cblx0XHRcdHBvaW50ZXJzLnB1c2goIDxQb2ludGVyLkNsYXNzPiBtZW1iZXIgKTtcblx0XHR9XG5cblx0XHRkb2N1bWVudFVSSSA9IHRoaXMuZ2V0UmVxdWVzdFVSSSggZG9jdW1lbnRVUkkgKTtcblx0XHR0aGlzLnNldERlZmF1bHRSZXF1ZXN0T3B0aW9ucyggcmVxdWVzdE9wdGlvbnMsIE5TLkxEUC5DbGFzcy5Db250YWluZXIgKTtcblx0XHRIVFRQLlJlcXVlc3QuVXRpbC5zZXRDb250ZW50VHlwZUhlYWRlciggXCJhcHBsaWNhdGlvbi9sZCtqc29uXCIsIHJlcXVlc3RPcHRpb25zICk7XG5cblx0XHRsZXQgZG9jdW1lbnQ6RG9jdW1lbnQuQ2xhc3MgPSBMRFAuUmVtb3ZlTWVtYmVyQWN0aW9uLkZhY3RvcnkuY3JlYXRlRG9jdW1lbnQoIHBvaW50ZXJzICk7XG5cdFx0bGV0IGNvbnRhaW5lclJldHJpZXZhbFByZWZlcmVuY2VzOkhUVFAuUmVxdWVzdC5Db250YWluZXJSZXRyaWV2YWxQcmVmZXJlbmNlcyA9IHtcblx0XHRcdGluY2x1ZGU6IFsgTlMuQy5DbGFzcy5QcmVmZXJTZWxlY3RlZE1lbWJlcnNoaXBUcmlwbGVzIF0sXG5cdFx0XHRvbWl0OiBbIE5TLkMuQ2xhc3MuUHJlZmVyTWVtYmVyc2hpcFRyaXBsZXMgXSxcblx0XHR9O1xuXHRcdEhUVFAuUmVxdWVzdC5VdGlsLnNldENvbnRhaW5lclJldHJpZXZhbFByZWZlcmVuY2VzKCBjb250YWluZXJSZXRyaWV2YWxQcmVmZXJlbmNlcywgcmVxdWVzdE9wdGlvbnMsIGZhbHNlICk7XG5cblx0XHRsZXQgYm9keTpzdHJpbmcgPSBkb2N1bWVudC50b0pTT04oIHRoaXMsIHRoaXMuanNvbmxkQ29udmVydGVyICk7XG5cblx0XHRyZXR1cm4gSFRUUC5SZXF1ZXN0LlNlcnZpY2UuZGVsZXRlKCBkb2N1bWVudFVSSSwgYm9keSwgcmVxdWVzdE9wdGlvbnMgKTtcblx0fVxuXG5cdHJlbW92ZUFsbE1lbWJlcnMoIGRvY3VtZW50VVJJOnN0cmluZywgcmVxdWVzdE9wdGlvbnM6SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgPSB7fSApOlByb21pc2U8SFRUUC5SZXNwb25zZS5DbGFzcz4ge1xuXHRcdGRvY3VtZW50VVJJID0gdGhpcy5nZXRSZXF1ZXN0VVJJKCBkb2N1bWVudFVSSSApO1xuXHRcdHRoaXMuc2V0RGVmYXVsdFJlcXVlc3RPcHRpb25zKCByZXF1ZXN0T3B0aW9ucywgTlMuTERQLkNsYXNzLkNvbnRhaW5lciApO1xuXG5cdFx0bGV0IGNvbnRhaW5lclJldHJpZXZhbFByZWZlcmVuY2VzOkhUVFAuUmVxdWVzdC5Db250YWluZXJSZXRyaWV2YWxQcmVmZXJlbmNlcyA9IHtcblx0XHRcdGluY2x1ZGU6IFtcblx0XHRcdFx0TlMuQy5DbGFzcy5QcmVmZXJNZW1iZXJzaGlwVHJpcGxlcyxcblx0XHRcdF0sXG5cdFx0XHRvbWl0OiBbXG5cdFx0XHRcdE5TLkMuQ2xhc3MuUHJlZmVyTWVtYmVyc2hpcFJlc291cmNlcyxcblx0XHRcdFx0TlMuQy5DbGFzcy5QcmVmZXJDb250YWlubWVudFRyaXBsZXMsXG5cdFx0XHRcdE5TLkMuQ2xhc3MuUHJlZmVyQ29udGFpbm1lbnRSZXNvdXJjZXMsXG5cdFx0XHRcdE5TLkMuQ2xhc3MuUHJlZmVyQ29udGFpbmVyLFxuXHRcdFx0XSxcblx0XHR9O1xuXHRcdEhUVFAuUmVxdWVzdC5VdGlsLnNldENvbnRhaW5lclJldHJpZXZhbFByZWZlcmVuY2VzKCBjb250YWluZXJSZXRyaWV2YWxQcmVmZXJlbmNlcywgcmVxdWVzdE9wdGlvbnMsIGZhbHNlICk7XG5cblx0XHRyZXR1cm4gSFRUUC5SZXF1ZXN0LlNlcnZpY2UuZGVsZXRlKCBkb2N1bWVudFVSSSwgcmVxdWVzdE9wdGlvbnMgKTtcblx0fVxuXG5cdHNhdmU8VCBleHRlbmRzIFBlcnNpc3RlZERvY3VtZW50LkNsYXNzPiggcGVyc2lzdGVkRG9jdW1lbnQ6VCwgcmVxdWVzdE9wdGlvbnM6SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgPSB7fSApOlByb21pc2U8WyBULCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+IHtcblx0XHQvLyBUT0RPOiBDaGVjayBpZiB0aGUgZG9jdW1lbnQgaXNEaXJ0eVxuXHRcdC8qXG5cdFx0aWYoICEgcGVyc2lzdGVkRG9jdW1lbnQuaXNEaXJ0eSgpICkgcmV0dXJuIG5ldyBQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+KCAoIHJlc29sdmU6KCByZXN1bHQ6SFRUUC5SZXNwb25zZS5DbGFzcyApID0+IHZvaWQgKSA9PiB7XG5cdFx0XHRyZXNvbHZlKCBudWxsICk7XG5cdFx0fSk7XG5cdFx0Ki9cblx0XHRsZXQgdXJpOnN0cmluZyA9IHRoaXMuZ2V0UmVxdWVzdFVSSSggcGVyc2lzdGVkRG9jdW1lbnQuaWQgKTtcblx0XHR0aGlzLnNldERlZmF1bHRSZXF1ZXN0T3B0aW9ucyggcmVxdWVzdE9wdGlvbnMsIE5TLkxEUC5DbGFzcy5SREZTb3VyY2UgKTtcblx0XHRIVFRQLlJlcXVlc3QuVXRpbC5zZXRDb250ZW50VHlwZUhlYWRlciggXCJhcHBsaWNhdGlvbi9sZCtqc29uXCIsIHJlcXVlc3RPcHRpb25zICk7XG5cdFx0SFRUUC5SZXF1ZXN0LlV0aWwuc2V0SWZNYXRjaEhlYWRlciggcGVyc2lzdGVkRG9jdW1lbnQuX2V0YWcsIHJlcXVlc3RPcHRpb25zICk7XG5cblx0XHRwZXJzaXN0ZWREb2N1bWVudC5fbm9ybWFsaXplKCk7XG5cdFx0bGV0IGJvZHk6c3RyaW5nID0gcGVyc2lzdGVkRG9jdW1lbnQudG9KU09OKCB0aGlzLCB0aGlzLmpzb25sZENvbnZlcnRlciApO1xuXG5cdFx0cmV0dXJuIEhUVFAuUmVxdWVzdC5TZXJ2aWNlLnB1dCggdXJpLCBib2R5LCByZXF1ZXN0T3B0aW9ucyApLnRoZW4oICggcmVzcG9uc2U6SFRUUC5SZXNwb25zZS5DbGFzcyApID0+IHtcblx0XHRcdHJldHVybiBbIHBlcnNpc3RlZERvY3VtZW50LCByZXNwb25zZSBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJlZnJlc2g8VCBleHRlbmRzIFBlcnNpc3RlZERvY3VtZW50LkNsYXNzPiggcGVyc2lzdGVkRG9jdW1lbnQ6VCwgcmVxdWVzdE9wdGlvbnM6SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgPSB7fSApOlByb21pc2U8WyBULCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+IHtcblx0XHRsZXQgdXJpOnN0cmluZyA9IHRoaXMuZ2V0UmVxdWVzdFVSSSggcGVyc2lzdGVkRG9jdW1lbnQuaWQgKTtcblx0XHR0aGlzLnNldERlZmF1bHRSZXF1ZXN0T3B0aW9ucyggcmVxdWVzdE9wdGlvbnMsIE5TLkxEUC5DbGFzcy5SREZTb3VyY2UgKTtcblxuXHRcdHJldHVybiBIVFRQLlJlcXVlc3QuU2VydmljZS5oZWFkKCB1cmksIHJlcXVlc3RPcHRpb25zICkudGhlbiggKCBoZWFkZXJSZXNwb25zZTpIVFRQLlJlc3BvbnNlLkNsYXNzICkgPT4ge1xuXHRcdFx0bGV0IGVUYWc6c3RyaW5nID0gSFRUUC5SZXNwb25zZS5VdGlsLmdldEVUYWcoIGhlYWRlclJlc3BvbnNlICk7XG5cdFx0XHRpZiggZVRhZyA9PT0gcGVyc2lzdGVkRG9jdW1lbnQuX2V0YWcgKSByZXR1cm4gPGFueT4gWyBwZXJzaXN0ZWREb2N1bWVudCwgbnVsbCBdO1xuXG5cdFx0XHRyZXR1cm4gSFRUUC5SZXF1ZXN0LlNlcnZpY2UuZ2V0KCB1cmksIHJlcXVlc3RPcHRpb25zLCBuZXcgUkRGLkRvY3VtZW50LlBhcnNlcigpICk7XG5cblx0XHR9ICkudGhlbiggKCBbIHJkZkRvY3VtZW50cywgcmVzcG9uc2UgXTpbIFJERi5Eb2N1bWVudC5DbGFzc1tdLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0gKSA9PiB7XG5cdFx0XHRpZiggcmVzcG9uc2UgPT09IG51bGwgKSByZXR1cm4gPGFueT4gWyByZGZEb2N1bWVudHMsIHJlc3BvbnNlIF07XG5cblx0XHRcdGxldCBlVGFnOnN0cmluZyA9IEhUVFAuUmVzcG9uc2UuVXRpbC5nZXRFVGFnKCByZXNwb25zZSApO1xuXHRcdFx0aWYoIGVUYWcgPT09IG51bGwgKSB0aHJvdyBuZXcgSFRUUC5FcnJvcnMuQmFkUmVzcG9uc2VFcnJvciggXCJUaGUgcmVzcG9uc2UgZG9lc24ndCBjb250YWluIGFuIEVUYWdcIiwgcmVzcG9uc2UgKTtcblxuXHRcdFx0bGV0IHJkZkRvY3VtZW50OlJERi5Eb2N1bWVudC5DbGFzcyA9IHRoaXMuZ2V0UkRGRG9jdW1lbnQoIHVyaSwgcmRmRG9jdW1lbnRzLCByZXNwb25zZSApO1xuXHRcdFx0aWYoIHJkZkRvY3VtZW50ID09PSBudWxsICkgdGhyb3cgbmV3IEhUVFAuRXJyb3JzLkJhZFJlc3BvbnNlRXJyb3IoIFwiTm8gZG9jdW1lbnQgd2FzIHJldHVybmVkLlwiLCByZXNwb25zZSApO1xuXG5cdFx0XHRsZXQgdXBkYXRlZFBlcnNpc3RlZERvY3VtZW50OlBlcnNpc3RlZERvY3VtZW50LkNsYXNzID0gdGhpcy5fZ2V0UGVyc2lzdGVkRG9jdW1lbnQoIHJkZkRvY3VtZW50LCByZXNwb25zZSApO1xuXHRcdFx0dXBkYXRlZFBlcnNpc3RlZERvY3VtZW50Ll9ldGFnID0gZVRhZztcblxuXHRcdFx0cmV0dXJuIFsgdXBkYXRlZFBlcnNpc3RlZERvY3VtZW50LCByZXNwb25zZSBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdHNhdmVBbmRSZWZyZXNoPFQgZXh0ZW5kcyBQZXJzaXN0ZWREb2N1bWVudC5DbGFzcz4oIHBlcnNpc3RlZERvY3VtZW50OlQsIHJlcXVlc3RPcHRpb25zOkhUVFAuUmVxdWVzdC5PcHRpb25zID0ge30gKTpQcm9taXNlPFsgVCwgWyBIVFRQLlJlc3BvbnNlLkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzXSBdPiB7XG5cdFx0Ly8gVE9ETzogQ2hlY2sgaG93IHRvIG1hbmFnZSB0aGUgcmVxdWVzdE9wdGlvbnMgZm9yIHRoZSBtdWx0aXBsZSBjYWxsc1xuXG5cdFx0bGV0IHNhdmVSZXNwb25zZTpIVFRQLlJlc3BvbnNlLkNsYXNzO1xuXHRcdHJldHVybiB0aGlzLnNhdmU8VD4oIHBlcnNpc3RlZERvY3VtZW50ICkudGhlbiggKCBbIGRvY3VtZW50LCByZXNwb25zZSBdOlsgVCwgSFRUUC5SZXNwb25zZS5DbGFzcyBdICkgPT4ge1xuXHRcdFx0c2F2ZVJlc3BvbnNlID0gcmVzcG9uc2U7XG5cdFx0XHRyZXR1cm4gdGhpcy5yZWZyZXNoPFQ+KCBwZXJzaXN0ZWREb2N1bWVudCApO1xuXHRcdH0gKS50aGVuKCAoIFsgZG9jdW1lbnQsIHJlc3BvbnNlIF06WyBULCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0gKSA9PiB7XG5cdFx0XHRyZXR1cm4gWyBwZXJzaXN0ZWREb2N1bWVudCwgWyBzYXZlUmVzcG9uc2UsIHJlc3BvbnNlIF0gXTtcblx0XHR9ICk7XG5cdH1cblxuXG5cdGRlbGV0ZSggZG9jdW1lbnRVUkk6c3RyaW5nLCByZXF1ZXN0T3B0aW9uczpIVFRQLlJlcXVlc3QuT3B0aW9ucyA9IHt9ICk6UHJvbWlzZTxIVFRQLlJlc3BvbnNlLkNsYXNzPiB7XG5cdFx0ZG9jdW1lbnRVUkkgPSB0aGlzLmdldFJlcXVlc3RVUkkoIGRvY3VtZW50VVJJICk7XG5cdFx0dGhpcy5zZXREZWZhdWx0UmVxdWVzdE9wdGlvbnMoIHJlcXVlc3RPcHRpb25zLCBOUy5MRFAuQ2xhc3MuUkRGU291cmNlICk7XG5cblx0XHRyZXR1cm4gSFRUUC5SZXF1ZXN0LlNlcnZpY2UuZGVsZXRlKCBkb2N1bWVudFVSSSwgcmVxdWVzdE9wdGlvbnMgKS50aGVuKCAoIHJlc3BvbnNlOkhUVFAuUmVzcG9uc2UuQ2xhc3MgKSA9PiB7XG5cdFx0XHRsZXQgcG9pbnRlcklEOnN0cmluZyA9IHRoaXMuZ2V0UG9pbnRlcklEKCBkb2N1bWVudFVSSSApO1xuXHRcdFx0dGhpcy5wb2ludGVycy5kZWxldGUoIHBvaW50ZXJJRCApO1xuXG5cdFx0XHRyZXR1cm4gcmVzcG9uc2U7XG5cdFx0fSApO1xuXHR9XG5cblx0Z2V0RG93bmxvYWRVUkwoIGRvY3VtZW50VVJJOnN0cmluZywgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxzdHJpbmc+IHtcblx0XHRpZiggISB0aGlzLmNvbnRleHQuYXV0aCApIFByb21pc2UucmVqZWN0PGFueT4oIG5ldyBFcnJvcnMuSWxsZWdhbFN0YXRlRXJyb3IoIFwiVGhpcyBpbnN0YW5jZSBkb2Vzbid0IHN1cHBvcnQgQXV0aGVudGljYXRlZCByZXF1ZXN0LlwiICkgKTtcblx0XHRyZXR1cm4gdGhpcy5jb250ZXh0LmF1dGguZ2V0QXV0aGVudGljYXRlZFVSTCggZG9jdW1lbnRVUkksIHJlcXVlc3RPcHRpb25zICk7XG5cdH1cblxuXHRnZXRHZW5lcmFsU2NoZW1hKCk6T2JqZWN0U2NoZW1hLkRpZ2VzdGVkT2JqZWN0U2NoZW1hIHtcblx0XHRpZiggISB0aGlzLmNvbnRleHQgKSByZXR1cm4gbmV3IE9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSgpO1xuXG5cdFx0bGV0IHNjaGVtYTpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEgPSBPYmplY3RTY2hlbWEuRGlnZXN0ZXIuY29tYmluZURpZ2VzdGVkT2JqZWN0U2NoZW1hcyggWyB0aGlzLmNvbnRleHQuZ2V0T2JqZWN0U2NoZW1hKCkgXSApO1xuXHRcdGlmKCB0aGlzLmNvbnRleHQuaGFzU2V0dGluZyggXCJ2b2NhYnVsYXJ5XCIgKSApIHNjaGVtYS52b2NhYiA9IHRoaXMuY29udGV4dC5yZXNvbHZlKCB0aGlzLmNvbnRleHQuZ2V0U2V0dGluZyggXCJ2b2NhYnVsYXJ5XCIgKSApO1xuXHRcdHJldHVybiBzY2hlbWE7XG5cdH1cblxuXHRnZXRTY2hlbWFGb3IoIG9iamVjdDpPYmplY3QgKTpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEge1xuXHRcdGxldCBzY2hlbWE6T2JqZWN0U2NoZW1hLkRpZ2VzdGVkT2JqZWN0U2NoZW1hID0gKCBcIkBpZFwiIGluIG9iamVjdCApID9cblx0XHRcdHRoaXMuZ2V0RGlnZXN0ZWRPYmplY3RTY2hlbWFGb3JFeHBhbmRlZE9iamVjdCggb2JqZWN0ICkgOlxuXHRcdFx0dGhpcy5nZXREaWdlc3RlZE9iamVjdFNjaGVtYUZvckRvY3VtZW50KCA8YW55PiBvYmplY3QgKTtcblxuXHRcdHJldHVybiBzY2hlbWE7XG5cdH1cblxuXHRleGVjdXRlUmF3QVNLUXVlcnkoIGRvY3VtZW50VVJJOnN0cmluZywgYXNrUXVlcnk6c3RyaW5nLCByZXF1ZXN0T3B0aW9uczpIVFRQLlJlcXVlc3QuT3B0aW9ucyA9IHt9ICk6UHJvbWlzZTxbIFNQQVJRTC5SYXdSZXN1bHRzLkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+IHtcblx0XHRkb2N1bWVudFVSSSA9IHRoaXMuZ2V0UmVxdWVzdFVSSSggZG9jdW1lbnRVUkkgKTtcblxuXHRcdGlmKCB0aGlzLmNvbnRleHQgJiYgdGhpcy5jb250ZXh0LmF1dGggJiYgdGhpcy5jb250ZXh0LmF1dGguaXNBdXRoZW50aWNhdGVkKCkgKSB0aGlzLmNvbnRleHQuYXV0aC5hZGRBdXRoZW50aWNhdGlvbiggcmVxdWVzdE9wdGlvbnMgKTtcblxuXHRcdHJldHVybiBTUEFSUUwuU2VydmljZS5leGVjdXRlUmF3QVNLUXVlcnkoIGRvY3VtZW50VVJJLCBhc2tRdWVyeSwgcmVxdWVzdE9wdGlvbnMgKTtcblx0fVxuXG5cdGV4ZWN1dGVBU0tRdWVyeSggZG9jdW1lbnRVUkk6c3RyaW5nLCBhc2tRdWVyeTpzdHJpbmcsIHJlcXVlc3RPcHRpb25zOkhUVFAuUmVxdWVzdC5PcHRpb25zID0ge30gKTpQcm9taXNlPFsgYm9vbGVhbiwgSFRUUC5SZXNwb25zZS5DbGFzcyBdPiB7XG5cdFx0ZG9jdW1lbnRVUkkgPSB0aGlzLmdldFJlcXVlc3RVUkkoIGRvY3VtZW50VVJJICk7XG5cblx0XHRpZiggdGhpcy5jb250ZXh0ICYmIHRoaXMuY29udGV4dC5hdXRoICYmIHRoaXMuY29udGV4dC5hdXRoLmlzQXV0aGVudGljYXRlZCgpICkgdGhpcy5jb250ZXh0LmF1dGguYWRkQXV0aGVudGljYXRpb24oIHJlcXVlc3RPcHRpb25zICk7XG5cblx0XHRyZXR1cm4gU1BBUlFMLlNlcnZpY2UuZXhlY3V0ZUFTS1F1ZXJ5KCBkb2N1bWVudFVSSSwgYXNrUXVlcnksIHJlcXVlc3RPcHRpb25zICk7XG5cdH1cblxuXHRleGVjdXRlUmF3U0VMRUNUUXVlcnkoIGRvY3VtZW50VVJJOnN0cmluZywgc2VsZWN0UXVlcnk6c3RyaW5nLCByZXF1ZXN0T3B0aW9uczpIVFRQLlJlcXVlc3QuT3B0aW9ucyA9IHt9ICk6UHJvbWlzZTxbIFNQQVJRTC5SYXdSZXN1bHRzLkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+IHtcblx0XHRkb2N1bWVudFVSSSA9IHRoaXMuZ2V0UmVxdWVzdFVSSSggZG9jdW1lbnRVUkkgKTtcblxuXHRcdGlmKCB0aGlzLmNvbnRleHQgJiYgdGhpcy5jb250ZXh0LmF1dGggJiYgdGhpcy5jb250ZXh0LmF1dGguaXNBdXRoZW50aWNhdGVkKCkgKSB0aGlzLmNvbnRleHQuYXV0aC5hZGRBdXRoZW50aWNhdGlvbiggcmVxdWVzdE9wdGlvbnMgKTtcblxuXHRcdHJldHVybiBTUEFSUUwuU2VydmljZS5leGVjdXRlUmF3U0VMRUNUUXVlcnkoIGRvY3VtZW50VVJJLCBzZWxlY3RRdWVyeSwgcmVxdWVzdE9wdGlvbnMgKTtcblx0fVxuXG5cdGV4ZWN1dGVTRUxFQ1RRdWVyeSggZG9jdW1lbnRVUkk6c3RyaW5nLCBzZWxlY3RRdWVyeTpzdHJpbmcsIHJlcXVlc3RPcHRpb25zOkhUVFAuUmVxdWVzdC5PcHRpb25zID0ge30gKTpQcm9taXNlPFsgU1BBUlFMLlNFTEVDVFJlc3VsdHMuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4ge1xuXHRcdGRvY3VtZW50VVJJID0gdGhpcy5nZXRSZXF1ZXN0VVJJKCBkb2N1bWVudFVSSSApO1xuXG5cdFx0aWYoIHRoaXMuY29udGV4dCAmJiB0aGlzLmNvbnRleHQuYXV0aCAmJiB0aGlzLmNvbnRleHQuYXV0aC5pc0F1dGhlbnRpY2F0ZWQoKSApIHRoaXMuY29udGV4dC5hdXRoLmFkZEF1dGhlbnRpY2F0aW9uKCByZXF1ZXN0T3B0aW9ucyApO1xuXG5cdFx0cmV0dXJuIFNQQVJRTC5TZXJ2aWNlLmV4ZWN1dGVTRUxFQ1RRdWVyeSggZG9jdW1lbnRVUkksIHNlbGVjdFF1ZXJ5LCB0aGlzLCByZXF1ZXN0T3B0aW9ucyApO1xuXHR9XG5cblx0ZXhlY3V0ZVJhd0NPTlNUUlVDVFF1ZXJ5KCBkb2N1bWVudFVSSTpzdHJpbmcsIGNvbnN0cnVjdFF1ZXJ5OnN0cmluZywgcmVxdWVzdE9wdGlvbnM6SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgPSB7fSApOlByb21pc2U8WyBzdHJpbmcsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4ge1xuXHRcdGRvY3VtZW50VVJJID0gdGhpcy5nZXRSZXF1ZXN0VVJJKCBkb2N1bWVudFVSSSApO1xuXG5cdFx0aWYoIHRoaXMuY29udGV4dCAmJiB0aGlzLmNvbnRleHQuYXV0aCAmJiB0aGlzLmNvbnRleHQuYXV0aC5pc0F1dGhlbnRpY2F0ZWQoKSApIHRoaXMuY29udGV4dC5hdXRoLmFkZEF1dGhlbnRpY2F0aW9uKCByZXF1ZXN0T3B0aW9ucyApO1xuXG5cdFx0cmV0dXJuIFNQQVJRTC5TZXJ2aWNlLmV4ZWN1dGVSYXdDT05TVFJVQ1RRdWVyeSggZG9jdW1lbnRVUkksIGNvbnN0cnVjdFF1ZXJ5LCByZXF1ZXN0T3B0aW9ucyApO1xuXHR9XG5cblx0ZXhlY3V0ZVJhd0RFU0NSSUJFUXVlcnkoIGRvY3VtZW50VVJJOnN0cmluZywgZGVzY3JpYmVRdWVyeTpzdHJpbmcsIHJlcXVlc3RPcHRpb25zOkhUVFAuUmVxdWVzdC5PcHRpb25zID0ge30gKTpQcm9taXNlPFsgc3RyaW5nLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+IHtcblx0XHRkb2N1bWVudFVSSSA9IHRoaXMuZ2V0UmVxdWVzdFVSSSggZG9jdW1lbnRVUkkgKTtcblxuXHRcdGlmKCB0aGlzLmNvbnRleHQgJiYgdGhpcy5jb250ZXh0LmF1dGggJiYgdGhpcy5jb250ZXh0LmF1dGguaXNBdXRoZW50aWNhdGVkKCkgKSB0aGlzLmNvbnRleHQuYXV0aC5hZGRBdXRoZW50aWNhdGlvbiggcmVxdWVzdE9wdGlvbnMgKTtcblxuXHRcdHJldHVybiBTUEFSUUwuU2VydmljZS5leGVjdXRlUmF3REVTQ1JJQkVRdWVyeSggZG9jdW1lbnRVUkksIGRlc2NyaWJlUXVlcnksIHJlcXVlc3RPcHRpb25zICk7XG5cdH1cblxuXHRleGVjdXRlVVBEQVRFKCBkb2N1bWVudFVSSTpzdHJpbmcsIHVwZGF0ZTpzdHJpbmcsIHJlcXVlc3RPcHRpb25zOkhUVFAuUmVxdWVzdC5PcHRpb25zID0ge30gKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+IHtcblx0XHRpZiggISBSREYuVVJJLlV0aWwuaXNBYnNvbHV0ZSggZG9jdW1lbnRVUkkgKSApIHtcblx0XHRcdGlmKCAhIHRoaXMuY29udGV4dCApIHRocm93IG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiVGhpcyBEb2N1bWVudHMgaW5zdGFuY2UgZG9lc24ndCBzdXBwb3J0IHJlbGF0aXZlIFVSSXMuXCIgKTtcblx0XHRcdGRvY3VtZW50VVJJID0gdGhpcy5jb250ZXh0LnJlc29sdmUoIGRvY3VtZW50VVJJICk7XG5cdFx0fVxuXG5cdFx0aWYoIHRoaXMuY29udGV4dCAmJiB0aGlzLmNvbnRleHQuYXV0aCAmJiB0aGlzLmNvbnRleHQuYXV0aC5pc0F1dGhlbnRpY2F0ZWQoKSApIHRoaXMuY29udGV4dC5hdXRoLmFkZEF1dGhlbnRpY2F0aW9uKCByZXF1ZXN0T3B0aW9ucyApO1xuXG5cdFx0cmV0dXJuIFNQQVJRTC5TZXJ2aWNlLmV4ZWN1dGVVUERBVEUoIGRvY3VtZW50VVJJLCB1cGRhdGUsIHJlcXVlc3RPcHRpb25zICk7XG5cdH1cblxuXHRfZ2V0UGVyc2lzdGVkRG9jdW1lbnQoIHJkZkRvY3VtZW50OlJERi5Eb2N1bWVudC5DbGFzcywgcmVzcG9uc2U6SFRUUC5SZXNwb25zZS5DbGFzcyApOlBlcnNpc3RlZERvY3VtZW50LkNsYXNzIHtcblx0XHRsZXQgZG9jdW1lbnRSZXNvdXJjZTpSREYuTm9kZS5DbGFzcyA9IHRoaXMuZ2V0RG9jdW1lbnRSZXNvdXJjZSggcmRmRG9jdW1lbnQsIHJlc3BvbnNlICk7XG5cdFx0bGV0IGZyYWdtZW50UmVzb3VyY2VzOlJERi5Ob2RlLkNsYXNzW10gPSBSREYuRG9jdW1lbnQuVXRpbC5nZXRCTm9kZVJlc291cmNlcyggcmRmRG9jdW1lbnQgKTtcblx0XHRmcmFnbWVudFJlc291cmNlcyA9IGZyYWdtZW50UmVzb3VyY2VzLmNvbmNhdCggUkRGLkRvY3VtZW50LlV0aWwuZ2V0RnJhZ21lbnRSZXNvdXJjZXMoIHJkZkRvY3VtZW50ICkgKTtcblxuXHRcdGxldCB1cmk6c3RyaW5nID0gZG9jdW1lbnRSZXNvdXJjZVsgXCJAaWRcIiBdO1xuXHRcdGxldCBkb2N1bWVudFBvaW50ZXI6UG9pbnRlci5DbGFzcyA9IHRoaXMuZ2V0UG9pbnRlciggdXJpICk7XG5cblx0XHRpZiggZG9jdW1lbnRQb2ludGVyLmlzUmVzb2x2ZWQoKSApIHtcblx0XHRcdHRoaXMudXBkYXRlUGVyc2lzdGVkRG9jdW1lbnQoIDxQZXJzaXN0ZWREb2N1bWVudC5DbGFzcz4gZG9jdW1lbnRQb2ludGVyLCBkb2N1bWVudFJlc291cmNlLCBmcmFnbWVudFJlc291cmNlcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmNyZWF0ZVBlcnNpc3RlZERvY3VtZW50KCBkb2N1bWVudFBvaW50ZXIsIGRvY3VtZW50UmVzb3VyY2UsIGZyYWdtZW50UmVzb3VyY2VzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIDxQZXJzaXN0ZWREb2N1bWVudC5DbGFzcz4gZG9jdW1lbnRQb2ludGVyO1xuXHR9XG5cblx0X2dldEZyZWVSZXNvdXJjZXMoIG5vZGVzOlJERi5Ob2RlLkNsYXNzW10gKTpGcmVlUmVzb3VyY2VzLkNsYXNzIHtcblx0XHRsZXQgZnJlZVJlc291cmNlc0RvY3VtZW50OkZyZWVSZXNvdXJjZXMuQ2xhc3MgPSBGcmVlUmVzb3VyY2VzLkZhY3RvcnkuY3JlYXRlKCB0aGlzICk7XG5cblx0XHRsZXQgcmVzb3VyY2VzOlJlc291cmNlLkNsYXNzW10gPSBub2Rlcy5tYXAoIG5vZGUgPT4gZnJlZVJlc291cmNlc0RvY3VtZW50LmNyZWF0ZVJlc291cmNlKCBub2RlWyBcIkBpZFwiIF0gKSApO1xuXHRcdHRoaXMuY29tcGFjdCggbm9kZXMsIHJlc291cmNlcywgZnJlZVJlc291cmNlc0RvY3VtZW50ICk7XG5cblx0XHRyZXR1cm4gZnJlZVJlc291cmNlc0RvY3VtZW50O1xuXHR9XG5cblx0cHJpdmF0ZSBwZXJzaXN0RG9jdW1lbnQ8VCBleHRlbmRzIERvY3VtZW50LkNsYXNzLCBXIGV4dGVuZHMgUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQuQ2xhc3M+KCBwYXJlbnRVUkk6c3RyaW5nLCBzbHVnOnN0cmluZywgZG9jdW1lbnQ6VCwgcmVxdWVzdE9wdGlvbnM6SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgVCAmIFcsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4ge1xuXHRcdHBhcmVudFVSSSA9IHRoaXMuZ2V0UmVxdWVzdFVSSSggcGFyZW50VVJJICk7XG5cdFx0SFRUUC5SZXF1ZXN0LlV0aWwuc2V0Q29udGVudFR5cGVIZWFkZXIoIFwiYXBwbGljYXRpb24vbGQranNvblwiLCByZXF1ZXN0T3B0aW9ucyApO1xuXG5cdFx0aWYoIGRvY3VtZW50LmlkICkge1xuXHRcdFx0bGV0IGNoaWxkVVJJOnN0cmluZyA9IGRvY3VtZW50LmlkO1xuXHRcdFx0aWYoICEgISB0aGlzLmNvbnRleHQgKSBjaGlsZFVSSSA9IHRoaXMuY29udGV4dC5yZXNvbHZlKCBjaGlsZFVSSSApO1xuXHRcdFx0aWYoICEgUkRGLlVSSS5VdGlsLmlzQmFzZU9mKCBwYXJlbnRVUkksIGNoaWxkVVJJICkgKSB7XG5cdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdDxhbnk+KCBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIlRoZSBkb2N1bWVudCdzIFVSSSBpcyBub3QgcmVsYXRpdmUgdG8gdGhlIHBhcmVudFVSSSBzcGVjaWZpZWRcIiApICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYoIGRvY3VtZW50WyBcIl9fQ2FyYm9uU0RLX0luUHJvZ3Jlc3NPZlBlcnNpc3RpbmdcIiBdICkgcmV0dXJuIFByb21pc2UucmVqZWN0PGFueT4oIG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiVGhlIGRvY3VtZW50IGlzIGFscmVhZHkgYmVpbmcgcGVyc2lzdGVkLlwiICkgKTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGRvY3VtZW50LCBcIl9fQ2FyYm9uU0RLX0luUHJvZ3Jlc3NPZlBlcnNpc3RpbmdcIiwge2NvbmZpZ3VyYWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgdmFsdWU6IHRydWV9ICk7XG5cblx0XHRsZXQgYm9keTpzdHJpbmcgPSBkb2N1bWVudC50b0pTT04oIHRoaXMsIHRoaXMuanNvbmxkQ29udmVydGVyICk7XG5cblx0XHRpZiggISAhIHNsdWcgKSBIVFRQLlJlcXVlc3QuVXRpbC5zZXRTbHVnKCBzbHVnLCByZXF1ZXN0T3B0aW9ucyApO1xuXG5cdFx0cmV0dXJuIEhUVFAuUmVxdWVzdC5TZXJ2aWNlLnBvc3QoIHBhcmVudFVSSSwgYm9keSwgcmVxdWVzdE9wdGlvbnMgKS50aGVuKCAoIHJlc3BvbnNlOkhUVFAuUmVzcG9uc2UuQ2xhc3MgKSA9PiB7XG5cdFx0XHRkZWxldGUgZG9jdW1lbnRbIFwiX19DYXJib25TREtfSW5Qcm9ncmVzc09mUGVyc2lzdGluZ1wiIF07XG5cblx0XHRcdGxldCBsb2NhdGlvbkhlYWRlcjpIVFRQLkhlYWRlci5DbGFzcyA9IHJlc3BvbnNlLmdldEhlYWRlciggXCJMb2NhdGlvblwiICk7XG5cdFx0XHRpZiggbG9jYXRpb25IZWFkZXIgPT09IG51bGwgfHwgbG9jYXRpb25IZWFkZXIudmFsdWVzLmxlbmd0aCA8IDEgKSB0aHJvdyBuZXcgSFRUUC5FcnJvcnMuQmFkUmVzcG9uc2VFcnJvciggXCJUaGUgcmVzcG9uc2UgaXMgbWlzc2luZyBhIExvY2F0aW9uIGhlYWRlci5cIiwgcmVzcG9uc2UgKTtcblx0XHRcdGlmKCBsb2NhdGlvbkhlYWRlci52YWx1ZXMubGVuZ3RoICE9PSAxICkgdGhyb3cgbmV3IEhUVFAuRXJyb3JzLkJhZFJlc3BvbnNlRXJyb3IoIFwiVGhlIHJlc3BvbnNlIGNvbnRhaW5zIG1vcmUgdGhhbiBvbmUgTG9jYXRpb24gaGVhZGVyLlwiLCByZXNwb25zZSApO1xuXG5cdFx0XHRsZXQgbG9jYWxJRDpzdHJpbmcgPSB0aGlzLmdldFBvaW50ZXJJRCggbG9jYXRpb25IZWFkZXIudmFsdWVzWyAwIF0udG9TdHJpbmcoKSApO1xuXHRcdFx0bGV0IHBlcnNpc3RlZERvY3VtZW50OlQgJiBQZXJzaXN0ZWREb2N1bWVudC5DbGFzcyA9IFBlcnNpc3RlZERvY3VtZW50LkZhY3RvcnkuZGVjb3JhdGU8VD4oIHRoaXMuY3JlYXRlUG9pbnRlckZyb20oIGRvY3VtZW50LCBsb2NhbElEICksIHRoaXMgKTtcblx0XHRcdGxldCBwZXJzaXN0ZWRQcm90ZWN0ZWREb2N1bWVudDpUICYgVyA9IDxUICYgVz4gUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQuRmFjdG9yeS5kZWNvcmF0ZTxUICYgUGVyc2lzdGVkRG9jdW1lbnQuQ2xhc3M+KCBwZXJzaXN0ZWREb2N1bWVudCApO1xuXHRcdFx0dGhpcy5wb2ludGVycy5zZXQoIGxvY2FsSUQsIHBlcnNpc3RlZFByb3RlY3RlZERvY3VtZW50ICk7XG5cblx0XHRcdHJldHVybiBbXG5cdFx0XHRcdHBlcnNpc3RlZFByb3RlY3RlZERvY3VtZW50LFxuXHRcdFx0XHRyZXNwb25zZSxcblx0XHRcdF07XG5cdFx0fSApO1xuXHR9XG5cblx0cHJpdmF0ZSBnZXRSREZEb2N1bWVudCggcmVxdWVzdFVSTDpzdHJpbmcsIHJkZkRvY3VtZW50czpSREYuRG9jdW1lbnQuQ2xhc3NbXSwgcmVzcG9uc2U6SFRUUC5SZXNwb25zZS5DbGFzcyApOlJERi5Eb2N1bWVudC5DbGFzcyB7XG5cdFx0cmRmRG9jdW1lbnRzID0gcmRmRG9jdW1lbnRzLmZpbHRlciggKCByZGZEb2N1bWVudDpSREYuRG9jdW1lbnQuQ2xhc3MgKSA9PiByZGZEb2N1bWVudFsgXCJAaWRcIiBdID09PSByZXF1ZXN0VVJMICk7XG5cblx0XHRpZiggcmRmRG9jdW1lbnRzLmxlbmd0aCA+IDEgKSB0aHJvdyBuZXcgSFRUUC5FcnJvcnMuQmFkUmVzcG9uc2VFcnJvciggXCJTZXZlcmFsIGRvY3VtZW50cyBzaGFyZSB0aGUgc2FtZSBpZC5cIiwgcmVzcG9uc2UgKTtcblxuXHRcdHJldHVybiByZGZEb2N1bWVudHMubGVuZ3RoID4gMCA/IHJkZkRvY3VtZW50c1sgMCBdIDogbnVsbDtcblx0fVxuXG5cdHByaXZhdGUgZ2V0RG9jdW1lbnRSZXNvdXJjZSggcmRmRG9jdW1lbnQ6UkRGLkRvY3VtZW50LkNsYXNzLCByZXNwb25zZTpIVFRQLlJlc3BvbnNlLkNsYXNzICk6UkRGLk5vZGUuQ2xhc3Mge1xuXHRcdGxldCBkb2N1bWVudFJlc291cmNlczpSREYuTm9kZS5DbGFzc1tdID0gUkRGLkRvY3VtZW50LlV0aWwuZ2V0RG9jdW1lbnRSZXNvdXJjZXMoIHJkZkRvY3VtZW50ICk7XG5cdFx0aWYoIGRvY3VtZW50UmVzb3VyY2VzLmxlbmd0aCA9PT0gMCApIHRocm93IG5ldyBIVFRQLkVycm9ycy5CYWRSZXNwb25zZUVycm9yKCBgVGhlIFJERkRvY3VtZW50OiAkeyByZGZEb2N1bWVudFsgXCJAaWRcIiBdIH0sIGRvZXNuJ3QgY29udGFpbiBhIGRvY3VtZW50IHJlc291cmNlLmAsIHJlc3BvbnNlICk7XG5cdFx0aWYoIGRvY3VtZW50UmVzb3VyY2VzLmxlbmd0aCA+IDEgKSB0aHJvdyBuZXcgSFRUUC5FcnJvcnMuQmFkUmVzcG9uc2VFcnJvciggYFRoZSBSREZEb2N1bWVudDogJHsgcmRmRG9jdW1lbnRbIFwiQGlkXCIgXSB9LCBjb250YWlucyBtb3JlIHRoYW4gb25lIGRvY3VtZW50IHJlc291cmNlLmAsIHJlc3BvbnNlICk7XG5cblx0XHRyZXR1cm4gZG9jdW1lbnRSZXNvdXJjZXNbIDAgXTtcblx0fVxuXG5cdHByaXZhdGUgZ2V0UG9pbnRlcklEKCB1cmk6c3RyaW5nICk6c3RyaW5nIHtcblx0XHRpZiggUkRGLlVSSS5VdGlsLmlzQk5vZGVJRCggdXJpICkgKSB0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIkJOb2RlcyBjYW5ub3QgYmUgZmV0Y2hlZCBkaXJlY3RseS5cIiApO1xuXHRcdC8vIFRPRE86IE1ha2UgbmFtZWQgZnJhZ21lbnRzIGluZGVwZW5kZW50bHkgcmVzb2x2YWJsZVxuXHRcdC8qXG5cdFx0XHRpZiggUkRGLlVSSS5VdGlsLmhhc0ZyYWdtZW50KCB1cmkgKSApIHRocm93IG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiRnJhZ21lbnQgVVJJJ3MgY2Fubm90IGJlIGZldGNoZWQgZGlyZWN0bHkuXCIgKTtcblx0XHQqL1xuXG5cdFx0aWYoICEgISB0aGlzLmNvbnRleHQgKSB7XG5cdFx0XHRpZiggUkRGLlVSSS5VdGlsLmlzUHJlZml4ZWQoIHVyaSApICkgdXJpID0gT2JqZWN0U2NoZW1hLkRpZ2VzdGVyLnJlc29sdmVQcmVmaXhlZFVSSSggdXJpLCB0aGlzLmdldEdlbmVyYWxTY2hlbWEoKSApO1xuXG5cdFx0XHRpZiggISBSREYuVVJJLlV0aWwuaXNSZWxhdGl2ZSggdXJpICkgKSB7XG5cdFx0XHRcdGxldCBiYXNlVVJJOnN0cmluZyA9IHRoaXMuY29udGV4dC5nZXRCYXNlVVJJKCk7XG5cdFx0XHRcdGlmKCAhIFJERi5VUkkuVXRpbC5pc0Jhc2VPZiggYmFzZVVSSSwgdXJpICkgKSByZXR1cm4gbnVsbDtcblxuXHRcdFx0XHRyZXR1cm4gdXJpLnN1YnN0cmluZyggYmFzZVVSSS5sZW5ndGggKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB1cmlbIDAgXSA9PT0gXCIvXCIgPyB1cmkuc3Vic3RyKCAxICkgOiB1cmk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmKCBSREYuVVJJLlV0aWwuaXNSZWxhdGl2ZSggdXJpICkgKSB0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIlRoaXMgRG9jdW1lbnRzIGluc3RhbmNlIGRvZXNuJ3Qgc3VwcG9ydCByZWxhdGl2ZSBVUklzLlwiICk7XG5cdFx0XHRpZiggUkRGLlVSSS5VdGlsLmlzUHJlZml4ZWQoIHVyaSApICkgdGhyb3cgbmV3IEVycm9ycy5JbGxlZ2FsQXJndW1lbnRFcnJvciggXCJUaGlzIERvY3VtZW50cyBpbnN0YW5jZSBkb2Vzbid0IHN1cHBvcnQgcHJlZml4ZWQgVVJJcy5cIiApO1xuXHRcdFx0cmV0dXJuIHVyaTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGNyZWF0ZVBvaW50ZXIoIGxvY2FsSUQ6c3RyaW5nICk6UG9pbnRlci5DbGFzcyB7XG5cdFx0cmV0dXJuIHRoaXMuY3JlYXRlUG9pbnRlckZyb20oIHt9LCBsb2NhbElEICk7XG5cdH1cblxuXHRwcml2YXRlIGNyZWF0ZVBvaW50ZXJGcm9tPFQgZXh0ZW5kcyBPYmplY3Q+KCBvYmplY3Q6VCwgbG9jYWxJRDpzdHJpbmcgKTpUICYgUG9pbnRlci5DbGFzcyB7XG5cdFx0bGV0IGlkOnN0cmluZyA9ICEgISB0aGlzLmNvbnRleHQgPyB0aGlzLmNvbnRleHQucmVzb2x2ZSggbG9jYWxJRCApIDogbG9jYWxJRDtcblx0XHRsZXQgcG9pbnRlcjpUICYgUG9pbnRlci5DbGFzcyA9IFBvaW50ZXIuRmFjdG9yeS5jcmVhdGVGcm9tPFQ+KCBvYmplY3QsIGlkICk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBwb2ludGVyLCBcInJlc29sdmVcIiwge1xuXHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogKCk6UHJvbWlzZTxbIFBlcnNpc3RlZERvY3VtZW50LkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+ID0+IHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBpZCApO1xuXHRcdFx0fSxcblx0XHR9ICk7XG5cblx0XHRyZXR1cm4gcG9pbnRlcjtcblx0fVxuXG5cdHByaXZhdGUgY29tcGFjdCggZXhwYW5kZWRPYmplY3RzOk9iamVjdFtdLCB0YXJnZXRPYmplY3RzOk9iamVjdFtdLCBwb2ludGVyTGlicmFyeTpQb2ludGVyLkxpYnJhcnkgKTpPYmplY3RbXTtcblx0cHJpdmF0ZSBjb21wYWN0KCBleHBhbmRlZE9iamVjdDpPYmplY3QsIHRhcmdldE9iamVjdDpPYmplY3QsIHBvaW50ZXJMaWJyYXJ5OlBvaW50ZXIuTGlicmFyeSApOk9iamVjdDtcblx0cHJpdmF0ZSBjb21wYWN0KCBleHBhbmRlZE9iamVjdE9yT2JqZWN0czphbnksIHRhcmdldE9iamVjdE9yT2JqZWN0czphbnksIHBvaW50ZXJMaWJyYXJ5OlBvaW50ZXIuTGlicmFyeSApOmFueSB7XG5cdFx0aWYoICEgVXRpbHMuaXNBcnJheSggZXhwYW5kZWRPYmplY3RPck9iamVjdHMgKSApIHJldHVybiB0aGlzLmNvbXBhY3RTaW5nbGUoIGV4cGFuZGVkT2JqZWN0T3JPYmplY3RzLCB0YXJnZXRPYmplY3RPck9iamVjdHMsIHBvaW50ZXJMaWJyYXJ5ICk7XG5cblx0XHRsZXQgZXhwYW5kZWRPYmplY3RzOk9iamVjdFtdID0gZXhwYW5kZWRPYmplY3RPck9iamVjdHM7XG5cdFx0bGV0IHRhcmdldE9iamVjdHM6T2JqZWN0W10gPSAhICEgdGFyZ2V0T2JqZWN0T3JPYmplY3RzID8gdGFyZ2V0T2JqZWN0T3JPYmplY3RzIDogW107XG5cdFx0Zm9yKCBsZXQgaTpudW1iZXIgPSAwLCBsZW5ndGg6bnVtYmVyID0gZXhwYW5kZWRPYmplY3RzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArKyApIHtcblx0XHRcdGxldCBleHBhbmRlZE9iamVjdDpPYmplY3QgPSBleHBhbmRlZE9iamVjdHNbIGkgXTtcblx0XHRcdGxldCB0YXJnZXRPYmplY3Q6T2JqZWN0ID0gdGFyZ2V0T2JqZWN0c1sgaSBdID0gISAhIHRhcmdldE9iamVjdHNbIGkgXSA/IHRhcmdldE9iamVjdHNbIGkgXSA6IHt9O1xuXG5cdFx0XHR0aGlzLmNvbXBhY3RTaW5nbGUoIGV4cGFuZGVkT2JqZWN0LCB0YXJnZXRPYmplY3QsIHBvaW50ZXJMaWJyYXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldE9iamVjdHM7XG5cdH1cblxuXHRwcml2YXRlIGNvbXBhY3RTaW5nbGUoIGV4cGFuZGVkT2JqZWN0Ok9iamVjdCwgdGFyZ2V0T2JqZWN0Ok9iamVjdCwgcG9pbnRlckxpYnJhcnk6UG9pbnRlci5MaWJyYXJ5ICk6T2JqZWN0IHtcblx0XHRsZXQgZGlnZXN0ZWRTY2hlbWE6T2JqZWN0U2NoZW1hLkRpZ2VzdGVkT2JqZWN0U2NoZW1hID0gdGhpcy5nZXREaWdlc3RlZE9iamVjdFNjaGVtYUZvckV4cGFuZGVkT2JqZWN0KCBleHBhbmRlZE9iamVjdCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuanNvbmxkQ29udmVydGVyLmNvbXBhY3QoIGV4cGFuZGVkT2JqZWN0LCB0YXJnZXRPYmplY3QsIGRpZ2VzdGVkU2NoZW1hLCBwb2ludGVyTGlicmFyeSApO1xuXHR9XG5cblx0cHJpdmF0ZSBnZXREaWdlc3RlZE9iamVjdFNjaGVtYUZvckV4cGFuZGVkT2JqZWN0KCBleHBhbmRlZE9iamVjdDpPYmplY3QgKTpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEge1xuXHRcdGxldCB0eXBlczpzdHJpbmdbXSA9IFJERi5Ob2RlLlV0aWwuZ2V0VHlwZXMoIDxhbnk+IGV4cGFuZGVkT2JqZWN0ICk7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXREaWdlc3RlZE9iamVjdFNjaGVtYSggdHlwZXMsIGV4cGFuZGVkT2JqZWN0WyBcIkBpZFwiIF0gKTtcblx0fVxuXG5cdHByaXZhdGUgZ2V0RGlnZXN0ZWRPYmplY3RTY2hlbWFGb3JEb2N1bWVudCggZG9jdW1lbnQ6RG9jdW1lbnQuQ2xhc3MgKTpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEge1xuXHRcdGxldCB0eXBlczpzdHJpbmdbXSA9IFJlc291cmNlLlV0aWwuZ2V0VHlwZXMoIGRvY3VtZW50ICk7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXREaWdlc3RlZE9iamVjdFNjaGVtYSggdHlwZXMsIGRvY3VtZW50LmlkICk7XG5cdH1cblxuXHRwcml2YXRlIGdldERpZ2VzdGVkT2JqZWN0U2NoZW1hKCBvYmplY3RUeXBlczpzdHJpbmdbXSwgb2JqZWN0SUQ6c3RyaW5nICk6T2JqZWN0U2NoZW1hLkRpZ2VzdGVkT2JqZWN0U2NoZW1hIHtcblx0XHRpZiggISB0aGlzLmNvbnRleHQgKSByZXR1cm4gbmV3IE9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSgpO1xuXG5cdFx0bGV0IG9iamVjdFNjaGVtYXM6T2JqZWN0U2NoZW1hLkRpZ2VzdGVkT2JqZWN0U2NoZW1hW10gPSBbIHRoaXMuY29udGV4dC5nZXRPYmplY3RTY2hlbWEoKSBdO1xuXHRcdGlmKCBVdGlscy5pc0RlZmluZWQoIG9iamVjdElEICkgJiYgISBSREYuVVJJLlV0aWwuaGFzRnJhZ21lbnQoIG9iamVjdElEICkgJiYgISBSREYuVVJJLlV0aWwuaXNCTm9kZUlEKCBvYmplY3RJRCApICkgb2JqZWN0U2NoZW1hcy5wdXNoKCBEb2N1bWVudHMuX2RvY3VtZW50U2NoZW1hICk7XG5cblx0XHRmb3IoIGxldCB0eXBlIG9mIG9iamVjdFR5cGVzICkge1xuXHRcdFx0aWYoIHRoaXMuY29udGV4dC5oYXNPYmplY3RTY2hlbWEoIHR5cGUgKSApIG9iamVjdFNjaGVtYXMucHVzaCggdGhpcy5jb250ZXh0LmdldE9iamVjdFNjaGVtYSggdHlwZSApICk7XG5cdFx0fVxuXG5cdFx0bGV0IGRpZ2VzdGVkU2NoZW1hOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSA9IE9iamVjdFNjaGVtYS5EaWdlc3Rlci5jb21iaW5lRGlnZXN0ZWRPYmplY3RTY2hlbWFzKCBvYmplY3RTY2hlbWFzICk7XG5cdFx0aWYoIHRoaXMuY29udGV4dC5oYXNTZXR0aW5nKCBcInZvY2FidWxhcnlcIiApICkgZGlnZXN0ZWRTY2hlbWEudm9jYWIgPSB0aGlzLmNvbnRleHQucmVzb2x2ZSggdGhpcy5jb250ZXh0LmdldFNldHRpbmcoIFwidm9jYWJ1bGFyeVwiICkgKTtcblxuXHRcdHJldHVybiBkaWdlc3RlZFNjaGVtYTtcblx0fVxuXG5cdHByaXZhdGUgdXBkYXRlT2JqZWN0KCB0YXJnZXQ6T2JqZWN0LCBzb3VyY2U6T2JqZWN0ICk6YW55IHtcblx0XHRsZXQga2V5czpzdHJpbmdbXSA9IFV0aWxzLkEuam9pbldpdGhvdXREdXBsaWNhdGVzKCBPYmplY3Qua2V5cyggc291cmNlICksIE9iamVjdC5rZXlzKCB0YXJnZXQgKSApO1xuXG5cdFx0Zm9yKCBsZXQga2V5IG9mIGtleXMgKSB7XG5cdFx0XHRpZiggVXRpbHMuaGFzUHJvcGVydHkoIHNvdXJjZSwga2V5ICkgKSB7XG5cdFx0XHRcdHRhcmdldFsga2V5IF0gPSBzb3VyY2VbIGtleSBdO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIHRhcmdldFsga2V5IF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldDtcblx0fVxuXG5cdHByaXZhdGUgZ2V0QXNzb2NpYXRlZEZyYWdtZW50KCBibGFua05vZGVzOlBlcnNpc3RlZEZyYWdtZW50LkNsYXNzW10sIG5hbWVkRnJhZ21lbnRzOk1hcDxzdHJpbmcsIFBlcnNpc3RlZE5hbWVkRnJhZ21lbnQuQ2xhc3M+LCBzZWFyY2hlZEZyYWdtZW50OlJERi5Ob2RlLkNsYXNzICk6UGVyc2lzdGVkRnJhZ21lbnQuQ2xhc3Mge1xuXHRcdGlmKCAhIFJERi5VUkkuVXRpbC5pc0JOb2RlSUQoIHNlYXJjaGVkRnJhZ21lbnRbIFwiQGlkXCIgXSApICkgcmV0dXJuIG5hbWVkRnJhZ21lbnRzLmdldCggc2VhcmNoZWRGcmFnbWVudFsgXCJAaWRcIiBdICk7XG5cblx0XHRsZXQgYk5vZGVJZGVudGlmaWVyOnN0cmluZyA9IFJERi5Ob2RlLlV0aWwuZ2V0UHJvcGVydHkoIHNlYXJjaGVkRnJhZ21lbnQsIE5TLkMuUHJlZGljYXRlLmJOb2RlSWRlbnRpZmllciwgbnVsbCApO1xuXG5cdFx0Zm9yKCBsZXQgZnJhZ21lbnQgb2YgYmxhbmtOb2RlcyApIHtcblx0XHRcdGlmKCAhIFJERi5VUkkuVXRpbC5pc0JOb2RlSUQoIGZyYWdtZW50LmlkICkgKSBjb250aW51ZTtcblx0XHRcdGxldCBwZXJzaXN0ZWRCbGFua05vZGU6UGVyc2lzdGVkQmxhbmtOb2RlLkNsYXNzID0gPGFueT4gZnJhZ21lbnQ7XG5cdFx0XHRpZiggISAhIHBlcnNpc3RlZEJsYW5rTm9kZS5iTm9kZUlkZW50aWZpZXIgJiYgcGVyc2lzdGVkQmxhbmtOb2RlLmJOb2RlSWRlbnRpZmllciA9PT0gYk5vZGVJZGVudGlmaWVyICkgcmV0dXJuIGZyYWdtZW50O1xuXHRcdH1cblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHByaXZhdGUgZ2V0UmVxdWVzdFVSSSggdXJpOnN0cmluZyApOnN0cmluZyB7XG5cdFx0aWYoIFJERi5VUkkuVXRpbC5pc1JlbGF0aXZlKCB1cmkgKSApIHtcblx0XHRcdGlmKCAhIHRoaXMuY29udGV4dCApIHRocm93IG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiVGhpcyBEb2N1bWVudHMgaW5zdGFuY2UgZG9lc24ndCBzdXBwb3J0IHJlbGF0aXZlIFVSSXMuXCIgKTtcblx0XHRcdHVyaSA9IHRoaXMuY29udGV4dC5yZXNvbHZlKCB1cmkgKTtcblx0XHR9IGVsc2UgaWYoIFJERi5VUkkuVXRpbC5pc1ByZWZpeGVkKCB1cmkgKSApIHtcblx0XHRcdGlmKCAhIHRoaXMuY29udGV4dCApIHRocm93IG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiVGhpcyBEb2N1bWVudHMgaW5zdGFuY2UgZG9lc24ndCBzdXBwb3J0IHByZWZpeGVkIFVSSXMuXCIgKTtcblx0XHRcdHVyaSA9IE9iamVjdFNjaGVtYS5EaWdlc3Rlci5yZXNvbHZlUHJlZml4ZWRVUkkoIHVyaSwgdGhpcy5jb250ZXh0LmdldE9iamVjdFNjaGVtYSgpICk7XG5cblx0XHRcdGlmKCBSREYuVVJJLlV0aWwuaXNQcmVmaXhlZCggdXJpICkgKSB0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBgVGhlIHByZWZpeGVkIFVSSSBcIiR7IHVyaSB9XCIgY291bGQgbm90IGJlIHJlc29sdmVkLmAgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHVyaTtcblx0fVxuXG5cdHByaXZhdGUgc2V0RGVmYXVsdFJlcXVlc3RPcHRpb25zKCByZXF1ZXN0T3B0aW9uczpIVFRQLlJlcXVlc3QuT3B0aW9ucywgaW50ZXJhY3Rpb25Nb2RlbDpzdHJpbmcgKTp2b2lkIHtcblx0XHRpZiggdGhpcy5jb250ZXh0ICYmIHRoaXMuY29udGV4dC5hdXRoICYmIHRoaXMuY29udGV4dC5hdXRoLmlzQXV0aGVudGljYXRlZCgpICkgdGhpcy5jb250ZXh0LmF1dGguYWRkQXV0aGVudGljYXRpb24oIHJlcXVlc3RPcHRpb25zICk7XG5cblx0XHRIVFRQLlJlcXVlc3QuVXRpbC5zZXRBY2NlcHRIZWFkZXIoIFwiYXBwbGljYXRpb24vbGQranNvblwiLCByZXF1ZXN0T3B0aW9ucyApO1xuXHRcdEhUVFAuUmVxdWVzdC5VdGlsLnNldFByZWZlcnJlZEludGVyYWN0aW9uTW9kZWwoIGludGVyYWN0aW9uTW9kZWwsIHJlcXVlc3RPcHRpb25zICk7XG5cdH1cblxuXHRwcml2YXRlIGdldE1lbWJlcnNoaXBSZXNvdXJjZSggZG9jdW1lbnRSZXNvdXJjZTpSREYuTm9kZS5DbGFzcywgcmRmRG9jdW1lbnRzOlJERi5Eb2N1bWVudC5DbGFzc1tdLCByZXNwb25zZTpIVFRQLlJlc3BvbnNlLkNsYXNzICk6UkRGLk5vZGUuQ2xhc3Mge1xuXHRcdGxldCBtZW1iZXJzaGlwUmVzb3VyY2U6UkRGLk5vZGUuQ2xhc3M7XG5cblx0XHRsZXQgbWVtYmVyc2hpcFJlc291cmNlVVJJOnN0cmluZyA9IFJERi5Ob2RlLlV0aWwuZ2V0UHJvcGVydHlVUkkoIGRvY3VtZW50UmVzb3VyY2UsIE5TLkxEUC5QcmVkaWNhdGUubWVtYmVyc2hpcFJlc291cmNlICk7XG5cdFx0aWYoIGRvY3VtZW50UmVzb3VyY2VbIFwiQGlkXCIgXSA9PT0gbWVtYmVyc2hpcFJlc291cmNlVVJJICkge1xuXHRcdFx0bWVtYmVyc2hpcFJlc291cmNlID0gZG9jdW1lbnRSZXNvdXJjZTtcblx0XHR9IGVsc2UgaWYoIG1lbWJlcnNoaXBSZXNvdXJjZVVSSSA9PT0gbnVsbCApIHtcblx0XHRcdGlmKCBkb2N1bWVudFJlc291cmNlWyBcIkB0eXBlXCIgXS5pbmRleE9mKCBOUy5MRFAuQ2xhc3MuQmFzaWNDb250YWluZXIgKSAhPT0gLSAxICkge1xuXHRcdFx0XHRtZW1iZXJzaGlwUmVzb3VyY2UgPSBkb2N1bWVudFJlc291cmNlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhyb3cgbmV3IEhUVFAuRXJyb3JzLkJhZFJlc3BvbnNlRXJyb3IoIFwiVGhlIGRvY3VtZW50IGlzIG5vdCBhbiBsZHA6QmFzaWNDb250YWluZXIgYW5kIGl0IGRvZXNuJ3QgY29udGFpbiBhbiBsZHA6bWVtYmVyc2hpcFJlc291cmNlIHRyaXBsZS5cIiwgcmVzcG9uc2UgKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0bGV0IG1lbWJlcnNoaXBSZXNvdXJjZURvY3VtZW50OlJERi5Eb2N1bWVudC5DbGFzcyA9IHRoaXMuZ2V0UkRGRG9jdW1lbnQoIG1lbWJlcnNoaXBSZXNvdXJjZVVSSSwgcmRmRG9jdW1lbnRzLCByZXNwb25zZSApO1xuXHRcdFx0aWYoIG1lbWJlcnNoaXBSZXNvdXJjZURvY3VtZW50ID09PSBudWxsICkgcmV0dXJuIG51bGw7XG5cdFx0XHRtZW1iZXJzaGlwUmVzb3VyY2UgPSB0aGlzLmdldERvY3VtZW50UmVzb3VyY2UoIG1lbWJlcnNoaXBSZXNvdXJjZURvY3VtZW50LCByZXNwb25zZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBtZW1iZXJzaGlwUmVzb3VyY2U7XG5cdH1cblxuXHRwcml2YXRlIGNyZWF0ZVBlcnNpc3RlZERvY3VtZW50KCBkb2N1bWVudFBvaW50ZXI6UG9pbnRlci5DbGFzcywgZG9jdW1lbnRSZXNvdXJjZTpSREYuTm9kZS5DbGFzcywgZnJhZ21lbnRSZXNvdXJjZXM6UkRGLk5vZGUuQ2xhc3NbXSApOlBlcnNpc3RlZERvY3VtZW50LkNsYXNzIHtcblx0XHRsZXQgcGVyc2lzdGVkRG9jdW1lbnQ6UGVyc2lzdGVkRG9jdW1lbnQuQ2xhc3MgPSBQZXJzaXN0ZWREb2N1bWVudC5GYWN0b3J5LmRlY29yYXRlKCBkb2N1bWVudFBvaW50ZXIsIHRoaXMgKTtcblxuXHRcdGxldCBmcmFnbWVudHM6UGVyc2lzdGVkRnJhZ21lbnQuQ2xhc3NbXSA9IFtdO1xuXHRcdGZvciggbGV0IGZyYWdtZW50UmVzb3VyY2Ugb2YgZnJhZ21lbnRSZXNvdXJjZXMgKSB7XG5cdFx0XHRmcmFnbWVudHMucHVzaCggcGVyc2lzdGVkRG9jdW1lbnQuY3JlYXRlRnJhZ21lbnQoIGZyYWdtZW50UmVzb3VyY2VbIFwiQGlkXCIgXSApICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5jb21wYWN0KCBkb2N1bWVudFJlc291cmNlLCBwZXJzaXN0ZWREb2N1bWVudCwgcGVyc2lzdGVkRG9jdW1lbnQgKTtcblx0XHR0aGlzLmNvbXBhY3QoIGZyYWdtZW50UmVzb3VyY2VzLCBmcmFnbWVudHMsIHBlcnNpc3RlZERvY3VtZW50ICk7XG5cblx0XHQvLyBUT0RPOiBNb3ZlIHRoaXMgdG8gYSBtb3JlIGFwcHJvcHJpYXRlIHBsYWNlLiBTZWUgYWxzbyB1cGRhdGVQZXJzaXN0ZWREb2N1bWVudCgpIG1ldGhvZFxuXHRcdHBlcnNpc3RlZERvY3VtZW50Ll9zeW5jU25hcHNob3QoKTtcblx0XHRmcmFnbWVudHMuZm9yRWFjaCggKCBmcmFnbWVudDpQZXJzaXN0ZWRGcmFnbWVudC5DbGFzcyApID0+IGZyYWdtZW50Ll9zeW5jU25hcHNob3QoKSApO1xuXHRcdHBlcnNpc3RlZERvY3VtZW50Ll9zeW5jU2F2ZWRGcmFnbWVudHMoKTtcblx0XHRwZXJzaXN0ZWREb2N1bWVudC5fcmVzb2x2ZWQgPSB0cnVlO1xuXG5cdFx0dGhpcy5kZWNvcmF0ZVBlcnNpc3RlZERvY3VtZW50KCBwZXJzaXN0ZWREb2N1bWVudCApO1xuXHRcdHJldHVybiBwZXJzaXN0ZWREb2N1bWVudDtcblx0fVxuXG5cdHByaXZhdGUgdXBkYXRlUGVyc2lzdGVkRG9jdW1lbnQoIHBlcnNpc3RlZERvY3VtZW50OlBlcnNpc3RlZERvY3VtZW50LkNsYXNzLCBkb2N1bWVudFJlc291cmNlOlJERi5Ob2RlLkNsYXNzLCBmcmFnbWVudFJlc291cmNlczpSREYuTm9kZS5DbGFzc1tdICk6UGVyc2lzdGVkRG9jdW1lbnQuQ2xhc3Mge1xuXHRcdGxldCBuYW1lZEZyYWdtZW50c01hcDpNYXA8c3RyaW5nLCBQZXJzaXN0ZWROYW1lZEZyYWdtZW50LkNsYXNzPiA9IG5ldyBNYXAoKTtcblx0XHRsZXQgYmxhbmtOb2Rlc0FycmF5OlBlcnNpc3RlZEJsYW5rTm9kZS5DbGFzc1tdID0gPFBlcnNpc3RlZEJsYW5rTm9kZS5DbGFzc1tdPiBwZXJzaXN0ZWREb2N1bWVudC5nZXRGcmFnbWVudHMoKS5maWx0ZXIoIGZyYWdtZW50ID0+IHtcblx0XHRcdHBlcnNpc3RlZERvY3VtZW50Ll9yZW1vdmVGcmFnbWVudCggZnJhZ21lbnQuaWQgKTtcblx0XHRcdGlmKCBSREYuVVJJLlV0aWwuaXNCTm9kZUlEKCBmcmFnbWVudC5pZCApICkgcmV0dXJuIHRydWU7XG5cblx0XHRcdG5hbWVkRnJhZ21lbnRzTWFwLnNldCggZnJhZ21lbnQuaWQsIDxQZXJzaXN0ZWROYW1lZEZyYWdtZW50LkNsYXNzPiBmcmFnbWVudCApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gKTtcblxuXHRcdGxldCBuZXdGcmFnbWVudHM6WyBQZXJzaXN0ZWRGcmFnbWVudC5DbGFzcywgUkRGLk5vZGUuQ2xhc3MgXVtdID0gW107XG5cdFx0Zm9yKCBsZXQgZnJhZ21lbnRSZXNvdXJjZSBvZiBmcmFnbWVudFJlc291cmNlcyApIHtcblx0XHRcdGxldCBmcmFnbWVudDpQZXJzaXN0ZWRGcmFnbWVudC5DbGFzcyA9IHRoaXMuZ2V0QXNzb2NpYXRlZEZyYWdtZW50KCBibGFua05vZGVzQXJyYXksIG5hbWVkRnJhZ21lbnRzTWFwLCBmcmFnbWVudFJlc291cmNlICk7XG5cblx0XHRcdGZyYWdtZW50ID0gcGVyc2lzdGVkRG9jdW1lbnQuY3JlYXRlRnJhZ21lbnQoIGZyYWdtZW50IHx8IHt9LCBmcmFnbWVudFJlc291cmNlWyBcIkBpZFwiIF0gKTtcblx0XHRcdG5ld0ZyYWdtZW50cy5wdXNoKCBbIGZyYWdtZW50LCBmcmFnbWVudFJlc291cmNlIF0gKTtcblx0XHR9XG5cblx0XHRmb3IoIGxldCBbIGZyYWdtZW50LCByZXNvdXJjZSBdIG9mIG5ld0ZyYWdtZW50cyApIHtcblx0XHRcdHRoaXMudXBkYXRlT2JqZWN0KCBmcmFnbWVudCwgdGhpcy5jb21wYWN0KCByZXNvdXJjZSwge30sIHBlcnNpc3RlZERvY3VtZW50ICkgKTtcblx0XHRcdGZyYWdtZW50Ll9zeW5jU25hcHNob3QoKTtcblx0XHR9XG5cdFx0cGVyc2lzdGVkRG9jdW1lbnQuX3N5bmNTYXZlZEZyYWdtZW50cygpO1xuXG5cdFx0dGhpcy51cGRhdGVPYmplY3QoIHBlcnNpc3RlZERvY3VtZW50LCB0aGlzLmNvbXBhY3QoIGRvY3VtZW50UmVzb3VyY2UsIHt9LCBwZXJzaXN0ZWREb2N1bWVudCApICk7XG5cdFx0cGVyc2lzdGVkRG9jdW1lbnQuX3N5bmNTbmFwc2hvdCgpO1xuXG5cdFx0dGhpcy5kZWNvcmF0ZVBlcnNpc3RlZERvY3VtZW50KCBwZXJzaXN0ZWREb2N1bWVudCApO1xuXHRcdHJldHVybiBwZXJzaXN0ZWREb2N1bWVudDtcblx0fVxuXG5cdHByaXZhdGUgZ2V0UGVyc2lzdGVkTWV0YWRhdGFSZXNvdXJjZXMoIGZyZWVOb2RlczpSREYuTm9kZS5DbGFzc1tdLCByZGZEb2N1bWVudHM6UkRGLkRvY3VtZW50LkNsYXNzW10sIHJlc3BvbnNlOkhUVFAuUmVzcG9uc2UuQ2xhc3MgKTpQZXJzaXN0ZWREb2N1bWVudC5DbGFzc1tdIHtcblx0XHRsZXQgZnJlZVJlc291cmNlczpGcmVlUmVzb3VyY2VzLkNsYXNzID0gdGhpcy5fZ2V0RnJlZVJlc291cmNlcyggZnJlZU5vZGVzICk7XG5cblx0XHRsZXQgZGVzY3JpcHRpb25SZXNvdXJjZXM6TERQLlJlc3BvbnNlTWV0YWRhdGEuQ2xhc3NbXSA9IDxhbnk+IGZyZWVSZXNvdXJjZXMuZ2V0UmVzb3VyY2VzKCkuZmlsdGVyKCBMRFAuUmVzcG9uc2VNZXRhZGF0YS5GYWN0b3J5Lmhhc1JERkNsYXNzICk7XG5cdFx0aWYoIGRlc2NyaXB0aW9uUmVzb3VyY2VzLmxlbmd0aCA9PT0gMCApIHJldHVybiBbXTtcblx0XHRpZiggZGVzY3JpcHRpb25SZXNvdXJjZXMubGVuZ3RoID4gMSApIHRocm93IG5ldyBIVFRQLkVycm9ycy5CYWRSZXNwb25zZUVycm9yKCBgVGhlIHJlc3BvbnNlIGNvbnRhaW5lZCBtdWx0aXBsZSAkeyBMRFAuUmVzcG9uc2VNZXRhZGF0YS5SREZfQ0xBU1MgfSBvYmplY3RzLmAsIHJlc3BvbnNlICk7XG5cblx0XHRyZGZEb2N1bWVudHMuZm9yRWFjaCggcmRmRG9jdW1lbnQgPT4gdGhpcy5fZ2V0UGVyc2lzdGVkRG9jdW1lbnQoIHJkZkRvY3VtZW50LCByZXNwb25zZSApICk7XG5cblx0XHRsZXQgcmVzcG9uc2VNZXRhZGF0YTpMRFAuUmVzcG9uc2VNZXRhZGF0YS5DbGFzcyA9IGRlc2NyaXB0aW9uUmVzb3VyY2VzWyAwIF07XG5cdFx0cmV0dXJuIHJlc3BvbnNlTWV0YWRhdGEucmVzb3VyY2VzTWV0YWRhdGEubWFwKCAoIHJlc291cmNlTWV0YWRhdGE6TERQLlJlc291cmNlTWV0YWRhdGEuQ2xhc3MgKSA9PiB7XG5cdFx0XHRsZXQgcmVzb3VyY2U6UGVyc2lzdGVkRG9jdW1lbnQuQ2xhc3MgPSA8UGVyc2lzdGVkRG9jdW1lbnQuQ2xhc3M+IHJlc291cmNlTWV0YWRhdGEucmVzb3VyY2U7XG5cdFx0XHRyZXNvdXJjZS5fZXRhZyA9IHJlc291cmNlTWV0YWRhdGEuZVRhZztcblxuXHRcdFx0cmV0dXJuIHJlc291cmNlO1xuXHRcdH0gKTtcblx0fVxuXG5cdHByaXZhdGUgZGVjb3JhdGVQZXJzaXN0ZWREb2N1bWVudCggcGVyc2lzdGVkRG9jdW1lbnQ6UGVyc2lzdGVkRG9jdW1lbnQuQ2xhc3MgKTp2b2lkIHtcblx0XHRsZXQgZW50cmllczpJdGVyYXRvcjxbIHN0cmluZywge2RlY29yYXRvcjpGdW5jdGlvbiwgcGFyYW1ldGVycz86YW55W119IF0+ID0gdGhpcy5fZG9jdW1lbnREZWNvcmF0b3JzLmVudHJpZXMoKTtcblx0XHRmb3IoIGxldCBbIHR5cGUsIG9wdGlvbnMgXSBvZiBVdGlscy5BLmZyb20oIGVudHJpZXMgKSApIHtcblx0XHRcdGlmKCBwZXJzaXN0ZWREb2N1bWVudC5oYXNUeXBlKCB0eXBlICkgKSB7XG5cdFx0XHRcdG9wdGlvbnMuZGVjb3JhdG9yLmFwcGx5KCBudWxsLCBbIHBlcnNpc3RlZERvY3VtZW50IF0uY29uY2F0KCBvcHRpb25zLnBhcmFtZXRlcnMgKSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IERvY3VtZW50cztcbiIsImltcG9ydCAqIGFzIERvY3VtZW50IGZyb20gXCIuLy4uL0RvY3VtZW50XCI7XG5pbXBvcnQgKiBhcyBGcmFnbWVudCBmcm9tIFwiLi8uLi9GcmFnbWVudFwiO1xuaW1wb3J0ICogYXMgTlMgZnJvbSBcIi4vLi4vTlNcIjtcbmltcG9ydCAqIGFzIE9iamVjdFNjaGVtYSBmcm9tIFwiLi8uLi9PYmplY3RTY2hlbWFcIjtcbmltcG9ydCAqIGFzIFBvaW50ZXIgZnJvbSBcIi4vLi4vUG9pbnRlclwiO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vLi4vVXRpbHNcIjtcblxuZXhwb3J0IGNvbnN0IFJERl9DTEFTUzpzdHJpbmcgPSBOUy5DLkNsYXNzLkFkZE1lbWJlckFjdGlvbjtcblxuZXhwb3J0IGNvbnN0IFNDSEVNQTpPYmplY3RTY2hlbWEuQ2xhc3MgPSB7XG5cdFwidGFyZ2V0TWVtYmVyc1wiOiB7XG5cdFx0XCJAaWRcIjogTlMuQy5QcmVkaWNhdGUudGFyZ2V0TWVtYmVyLFxuXHRcdFwiQHR5cGVcIjogXCJAaWRcIixcblx0XHRcIkBjb250YWluZXJcIjogXCJAc2V0XCIsXG5cdH0sXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIENsYXNzIGV4dGVuZHMgRnJhZ21lbnQuQ2xhc3Mge1xuXHR0YXJnZXRNZW1iZXJzOlBvaW50ZXIuQ2xhc3NbXTtcbn1cblxuZXhwb3J0IGNsYXNzIEZhY3Rvcnkge1xuXHRzdGF0aWMgaGFzQ2xhc3NQcm9wZXJ0aWVzKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIFV0aWxzLmhhc1Byb3BlcnR5RGVmaW5lZCggb2JqZWN0LCBcInRhcmdldE1lbWJlcnNcIiApO1xuXHR9XG5cblx0c3RhdGljIGNyZWF0ZURvY3VtZW50KCB0YXJnZXRNZW1iZXJzOlBvaW50ZXIuQ2xhc3NbXSApOkRvY3VtZW50LkNsYXNzIHtcblx0XHRsZXQgZG9jdW1lbnQ6RG9jdW1lbnQuQ2xhc3MgPSBEb2N1bWVudC5GYWN0b3J5LmNyZWF0ZSgpO1xuXG5cdFx0bGV0IGZyYWdtZW50OkNsYXNzID0gZG9jdW1lbnQuY3JlYXRlRnJhZ21lbnQoIHt0YXJnZXRNZW1iZXJzOiB0YXJnZXRNZW1iZXJzfSApO1xuXHRcdGZyYWdtZW50LnR5cGVzLnB1c2goIFJERl9DTEFTUyApO1xuXG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0ICogYXMgRG9jdW1lbnQgZnJvbSBcIi4vLi4vRG9jdW1lbnRcIjtcbmltcG9ydCAqIGFzIEVycm9ycyBmcm9tIFwiLi8uLi9FcnJvcnNcIjtcbmltcG9ydCAqIGFzIE5TIGZyb20gXCIuLy4uL05TXCI7XG5pbXBvcnQgKiBhcyBQb2ludGVyIGZyb20gXCIuLy4uL1BvaW50ZXJcIjtcbmltcG9ydCAqIGFzIFJlc291cmNlIGZyb20gXCIuLy4uL1Jlc291cmNlXCI7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi8uLi9VdGlsc1wiO1xuXG5leHBvcnQgY29uc3QgUkRGX0NMQVNTOnN0cmluZyA9IE5TLkxEUC5DbGFzcy5EaXJlY3RDb250YWluZXI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xhc3MgZXh0ZW5kcyBEb2N1bWVudC5DbGFzcyB7XG5cdG1lbWJlcnNoaXBSZXNvdXJjZTpQb2ludGVyLkNsYXNzO1xufVxuXG5leHBvcnQgY2xhc3MgRmFjdG9yeSB7XG5cdHN0YXRpYyBoYXNDbGFzc1Byb3BlcnRpZXMoIHJlc291cmNlOk9iamVjdCApOmJvb2xlYW4ge1xuXHRcdHJldHVybiAoXG5cdFx0XHRVdGlscy5oYXNQcm9wZXJ0eURlZmluZWQoIHJlc291cmNlLCBcIm1lbWJlcnNoaXBSZXNvdXJjZVwiIClcblx0XHQpO1xuXHR9XG5cblx0c3RhdGljIGlzKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIChcblx0XHRcdEZhY3RvcnkuaGFzQ2xhc3NQcm9wZXJ0aWVzKCBvYmplY3QgKVxuXHRcdFx0JiYgRG9jdW1lbnQuRmFjdG9yeS5pcyggb2JqZWN0IClcblx0XHRcdCYmICg8RG9jdW1lbnQuQ2xhc3M+IG9iamVjdCkuaGFzVHlwZSggUkRGX0NMQVNTIClcblx0XHQpO1xuXHR9XG5cblx0c3RhdGljIGNyZWF0ZSggbWVtYmVyc2hpcFJlc291cmNlOlBvaW50ZXIuQ2xhc3MsIGhhc01lbWJlclJlbGF0aW9uOnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MsIGlzTWVtYmVyT2ZSZWxhdGlvbj86c3RyaW5nIHwgUG9pbnRlci5DbGFzcyApOkNsYXNzIHtcblx0XHRyZXR1cm4gRmFjdG9yeS5jcmVhdGVGcm9tKCB7fSwgbWVtYmVyc2hpcFJlc291cmNlLCBoYXNNZW1iZXJSZWxhdGlvbiwgaXNNZW1iZXJPZlJlbGF0aW9uICk7XG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlRnJvbTxUIGV4dGVuZHMgT2JqZWN0Piggb2JqZWN0OlQsIG1lbWJlcnNoaXBSZXNvdXJjZTpQb2ludGVyLkNsYXNzLCBoYXNNZW1iZXJSZWxhdGlvbjpzdHJpbmcgfCBQb2ludGVyLkNsYXNzLCBpc01lbWJlck9mUmVsYXRpb24/OnN0cmluZyB8IFBvaW50ZXIuQ2xhc3MgKTpUICYgQ2xhc3Mge1xuXHRcdGlmKCBGYWN0b3J5LmlzKCBvYmplY3QgKSApIHRocm93IG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiVGhlIGJhc2Ugb2JqZWN0IGlzIGFscmVhZHkgYSBEaXJlY3RDb250YWluZXIuXCIgKTtcblx0XHRpZiggISBtZW1iZXJzaGlwUmVzb3VyY2UgKSB0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIlRoZSBwcm9wZXJ0eSBtZW1iZXJzaGlwUmVzb3VyY2UgY2Fubm90IGJlIG51bGwuXCIgKTtcblx0XHRpZiggISBoYXNNZW1iZXJSZWxhdGlvbiApIHRocm93IG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiVGhlIHByb3BlcnR5IGhhc01lbWJlclJlbGF0aW9uIGNhbm5vdCBiZSBlbXB0eS5cIiApO1xuXHRcdGlmKCAhIGlzTWVtYmVyT2ZSZWxhdGlvbiAmJiBVdGlscy5pc0RlZmluZWQoIGlzTWVtYmVyT2ZSZWxhdGlvbiApICkgdGhyb3cgbmV3IEVycm9ycy5JbGxlZ2FsQXJndW1lbnRFcnJvciggXCJUaGUgcHJvcGVydHkgaXNNZW1iZXJPZlJlbGF0aW9uIGNhbm5vdCBiZSBlbXB0eS5cIiApO1xuXG5cdFx0bGV0IGNvbnRhaW5lcjpUICYgQ2xhc3MgPSA8YW55PiBvYmplY3Q7XG5cdFx0aWYoICEgRG9jdW1lbnQuRmFjdG9yeS5pcyggb2JqZWN0ICkgKSBjb250YWluZXIgPSA8YW55PiBEb2N1bWVudC5GYWN0b3J5LmNyZWF0ZUZyb20oIG9iamVjdCApO1xuXG5cdFx0Y29udGFpbmVyLnR5cGVzLnB1c2goIE5TLkxEUC5DbGFzcy5Db250YWluZXIgKTtcblx0XHRjb250YWluZXIudHlwZXMucHVzaCggTlMuTERQLkNsYXNzLkRpcmVjdENvbnRhaW5lciApO1xuXG5cdFx0Y29udGFpbmVyLm1lbWJlcnNoaXBSZXNvdXJjZSA9IG1lbWJlcnNoaXBSZXNvdXJjZTtcblxuXHRcdC8vIFRPRE86IEhhbmRsZSBwcm9wZXJ0aWVzIGNvcnJlY3RseSBhbmQgdmFsaWRhdGUgdGhlbVxuXHRcdGNvbnRhaW5lci5oYXNNZW1iZXJSZWxhdGlvbiA9IDxQb2ludGVyLkNsYXNzPiBoYXNNZW1iZXJSZWxhdGlvbjtcblx0XHRjb250YWluZXIuaXNNZW1iZXJPZlJlbGF0aW9uID0gPFBvaW50ZXIuQ2xhc3M+IGlzTWVtYmVyT2ZSZWxhdGlvbjtcblxuXHRcdHJldHVybiBjb250YWluZXI7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xhc3M7XG4iLCJpbXBvcnQgKiBhcyBOUyBmcm9tIFwiLi8uLi9OU1wiO1xuaW1wb3J0IE9iamVjdFNjaGVtYSBmcm9tIFwiLi8uLi9PYmplY3RTY2hlbWFcIjtcbmltcG9ydCBSZXNvdXJjZSBmcm9tIFwiLi8uLi9SZXNvdXJjZVwiO1xuXG5leHBvcnQgY29uc3QgUkRGX0NMQVNTOnN0cmluZyA9IE5TLkMuQ2xhc3MuRXJyb3I7XG5cbmV4cG9ydCBjb25zdCBTQ0hFTUE6T2JqZWN0U2NoZW1hID0ge1xuXHRcImNhcmJvbkNvZGVcIjoge1xuXHRcdFwiQGlkXCI6IE5TLkMuUHJlZGljYXRlLmNhcmJvbkNvZGUsXG5cdFx0XCJAdHlwZVwiOiBOUy5YU0QuRGF0YVR5cGUuc3RyaW5nLFxuXHR9LFxuXHRcIm1lc3NhZ2VcIjoge1xuXHRcdFwiQGlkXCI6IE5TLkMuUHJlZGljYXRlLm1lc3NhZ2UsXG5cdFx0XCJAdHlwZVwiOiBOUy5YU0QuRGF0YVR5cGUuc3RyaW5nLFxuXHR9LFxufTtcblxuZXhwb3J0IGludGVyZmFjZSBDbGFzcyBleHRlbmRzIFJlc291cmNlIHtcblx0Y2FyYm9uQ29kZTpzdHJpbmc7XG5cdG1lc3NhZ2U6c3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCAqIGFzIERpcmVjdENvbnRhaW5lciBmcm9tIFwiLi9EaXJlY3RDb250YWluZXJcIjtcbmltcG9ydCAqIGFzIE5TIGZyb20gXCIuLy4uL05TXCI7XG5pbXBvcnQgKiBhcyBQb2ludGVyIGZyb20gXCIuLy4uL1BvaW50ZXJcIjtcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuLy4uL1V0aWxzXCI7XG5cbmV4cG9ydCBjb25zdCBSREZfQ0xBU1M6c3RyaW5nID0gTlMuTERQLkNsYXNzLkluZGlyZWN0Q29udGFpbmVyO1xuXG5leHBvcnQgaW50ZXJmYWNlIENsYXNzIGV4dGVuZHMgRGlyZWN0Q29udGFpbmVyLkNsYXNzIHtcblx0aW5zZXJ0ZWRDb250ZW50UmVsYXRpb246UG9pbnRlci5DbGFzcztcbn1cblxuZXhwb3J0IGNsYXNzIEZhY3Rvcnkge1xuXHRzdGF0aWMgaGFzQ2xhc3NQcm9wZXJ0aWVzKCByZXNvdXJjZTpPYmplY3QgKTpib29sZWFuIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0VXRpbHMuaGFzUHJvcGVydHlEZWZpbmVkKCByZXNvdXJjZSwgXCJpbnNlcnRlZENvbnRlbnRSZWxhdGlvblwiIClcblx0XHQpO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0ICogYXMgRG9jdW1lbnQgZnJvbSBcIi4vLi4vRG9jdW1lbnRcIjtcbmltcG9ydCAqIGFzIEZyYWdtZW50IGZyb20gXCIuLy4uL0ZyYWdtZW50XCI7XG5pbXBvcnQgKiBhcyBOUyBmcm9tIFwiLi8uLi9OU1wiO1xuaW1wb3J0ICogYXMgT2JqZWN0U2NoZW1hIGZyb20gXCIuLy4uL09iamVjdFNjaGVtYVwiO1xuaW1wb3J0ICogYXMgUG9pbnRlciBmcm9tIFwiLi8uLi9Qb2ludGVyXCI7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi8uLi9VdGlsc1wiO1xuXG5leHBvcnQgY29uc3QgUkRGX0NMQVNTOnN0cmluZyA9IE5TLkMuQ2xhc3MuUmVtb3ZlTWVtYmVyQWN0aW9uO1xuXG5leHBvcnQgY29uc3QgU0NIRU1BOk9iamVjdFNjaGVtYS5DbGFzcyA9IHtcblx0XCJ0YXJnZXRNZW1iZXJzXCI6IHtcblx0XHRcIkBpZFwiOiBOUy5DLlByZWRpY2F0ZS50YXJnZXRNZW1iZXIsXG5cdFx0XCJAdHlwZVwiOiBcIkBpZFwiLFxuXHRcdFwiQGNvbnRhaW5lclwiOiBcIkBzZXRcIixcblx0fSxcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xhc3MgZXh0ZW5kcyBGcmFnbWVudC5DbGFzcyB7XG5cdHRhcmdldE1lbWJlcnM6UG9pbnRlci5DbGFzc1tdO1xufVxuXG5leHBvcnQgY2xhc3MgRmFjdG9yeSB7XG5cdHN0YXRpYyBoYXNDbGFzc1Byb3BlcnRpZXMoIG9iamVjdDpPYmplY3QgKTpib29sZWFuIHtcblx0XHRyZXR1cm4gVXRpbHMuaGFzUHJvcGVydHlEZWZpbmVkKCBvYmplY3QsIFwidGFyZ2V0TWVtYmVyc1wiICk7XG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlRG9jdW1lbnQoIHRhcmdldE1lbWJlcnM6UG9pbnRlci5DbGFzc1tdICk6RG9jdW1lbnQuQ2xhc3Mge1xuXHRcdGxldCBkb2N1bWVudDpEb2N1bWVudC5DbGFzcyA9IERvY3VtZW50LkZhY3RvcnkuY3JlYXRlKCk7XG5cblx0XHRsZXQgZnJhZ21lbnQ6Q2xhc3MgPSBkb2N1bWVudC5jcmVhdGVGcmFnbWVudCgge3RhcmdldE1lbWJlcnM6IHRhcmdldE1lbWJlcnN9ICk7XG5cdFx0ZnJhZ21lbnQudHlwZXMucHVzaCggUkRGX0NMQVNTICk7XG5cblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xhc3M7XG4iLCJpbXBvcnQgKiBhcyBOUyBmcm9tIFwiLi8uLi9OU1wiO1xuaW1wb3J0ICogYXMgT2JqZWN0U2NoZW1hIGZyb20gXCIuLy4uL09iamVjdFNjaGVtYVwiO1xuaW1wb3J0ICogYXMgUmVzb3VyY2VNZXRhZGF0YSBmcm9tIFwiLi9SZXNvdXJjZU1ldGFkYXRhXCI7XG5pbXBvcnQgUmVzb3VyY2UgZnJvbSBcIi4vLi4vUmVzb3VyY2VcIjtcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuLi9VdGlsc1wiO1xuaW1wb3J0ICogYXMgVm9sYXRpbGVSZXNvdXJjZSBmcm9tIFwiLi9Wb2xhdGlsZVJlc291cmNlXCI7XG5cbmV4cG9ydCBjb25zdCBSREZfQ0xBU1M6c3RyaW5nID0gTlMuQy5DbGFzcy5SZXNwb25zZU1ldGFkYXRhO1xuXG5leHBvcnQgY29uc3QgU0NIRU1BOk9iamVjdFNjaGVtYS5DbGFzcyA9IHtcblx0XCJyZXNvdXJjZXNNZXRhZGF0YVwiOiB7XG5cdFx0XCJAaWRcIjogTlMuQy5QcmVkaWNhdGUucmVzb3VyY2VNZXRhZGF0YSxcblx0XHRcIkB0eXBlXCI6IFwiQGlkXCIsXG5cdFx0XCJAY29udGFpbmVyXCI6IFwiQHNldFwiLFxuXHR9LFxufTtcblxuZXhwb3J0IGludGVyZmFjZSBDbGFzcyBleHRlbmRzIFZvbGF0aWxlUmVzb3VyY2UuQ2xhc3Mge1xuXHRyZXNvdXJjZXNNZXRhZGF0YTpSZXNvdXJjZU1ldGFkYXRhLkNsYXNzW107XG59XG5cbmV4cG9ydCBjbGFzcyBGYWN0b3J5IHtcblxuXHRzdGF0aWMgaGFzQ2xhc3NQcm9wZXJ0aWVzKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIFV0aWxzLmhhc1Byb3BlcnR5RGVmaW5lZCggb2JqZWN0LCBcInJlc291cmNlc01ldGFkYXRhXCIgKTtcblx0fVxuXG5cdHN0YXRpYyBpcyggb2JqZWN0Ok9iamVjdCApOmJvb2xlYW4ge1xuXHRcdHJldHVybiBWb2xhdGlsZVJlc291cmNlLkZhY3RvcnkuaXMoIG9iamVjdCApXG5cdFx0XHQmJiBGYWN0b3J5Lmhhc0NsYXNzUHJvcGVydGllcyggb2JqZWN0IClcblx0XHRcdCYmIEZhY3RvcnkuaGFzUkRGQ2xhc3MoIG9iamVjdCApO1xuXHR9XG5cblx0c3RhdGljIGhhc1JERkNsYXNzKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0aWYoICEgb2JqZWN0ICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0bGV0IHR5cGVzOnN0cmluZ1tdID0gKCBcIkB0eXBlXCIgaW4gb2JqZWN0ICkgPyBvYmplY3RbIFwiQHR5cGVcIiBdIDogKCBcInR5cGVzXCIgaW4gb2JqZWN0ICkgPyAoPFJlc291cmNlPiBvYmplY3QpLnR5cGVzIDogW107XG5cdFx0cmV0dXJuIHR5cGVzLmluZGV4T2YoIFJERl9DTEFTUyApICE9PSAtIDE7XG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCAqIGFzIE5TIGZyb20gXCIuLy4uL05TXCI7XG5pbXBvcnQgKiBhcyBSZXNvdXJjZSBmcm9tIFwiLi8uLi9SZXNvdXJjZVwiO1xuXG5leHBvcnQgY29uc3QgUkRGX0NMQVNTOnN0cmluZyA9IE5TLkMuQ2xhc3MuVm9sYXRpbGVSZXNvdXJjZTtcblxuZXhwb3J0IGludGVyZmFjZSBDbGFzcyBleHRlbmRzIFJlc291cmNlLkNsYXNzIHtcblxufVxuXG5leHBvcnQgY2xhc3MgRmFjdG9yeSB7XG5cblx0c3RhdGljIGlzKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIFJlc291cmNlLkZhY3RvcnkuaXMoIG9iamVjdCApXG5cdFx0XHQmJiBGYWN0b3J5Lmhhc1JERkNsYXNzKCBvYmplY3QgKTtcblx0fVxuXG5cdHN0YXRpYyBoYXNSREZDbGFzcyggb2JqZWN0Ok9iamVjdCApOmJvb2xlYW4ge1xuXHRcdGlmKCAhIG9iamVjdCApIHJldHVybiBmYWxzZTtcblxuXHRcdGxldCB0eXBlczpzdHJpbmdbXSA9ICggXCJAdHlwZVwiIGluIG9iamVjdCApID8gb2JqZWN0WyBcIkB0eXBlXCIgXSA6ICggXCJ0eXBlc1wiIGluIG9iamVjdCApID8gKDxSZXNvdXJjZS5DbGFzcz4gb2JqZWN0KS50eXBlcyA6IFtdO1xuXHRcdHJldHVybiB0eXBlcy5pbmRleE9mKCBSREZfQ0xBU1MgKSAhPT0gLSAxO1xuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xhc3M7XG4iLCJpbXBvcnQgKiBhcyBOUyBmcm9tIFwiLi8uLi9OU1wiO1xuaW1wb3J0ICogYXMgT2JqZWN0U2NoZW1hIGZyb20gXCIuLy4uL09iamVjdFNjaGVtYVwiO1xuaW1wb3J0ICogYXMgUG9pbnRlciBmcm9tIFwiLi8uLi9Qb2ludGVyXCI7XG5pbXBvcnQgUmVzb3VyY2UgZnJvbSBcIi4vLi4vUmVzb3VyY2VcIjtcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuLy4uL1V0aWxzXCI7XG5pbXBvcnQgKiBhcyBWb2xhdGlsZVJlc291cmNlIGZyb20gXCIuL1ZvbGF0aWxlUmVzb3VyY2VcIjtcblxuZXhwb3J0IGNvbnN0IFJERl9DTEFTUzpzdHJpbmcgPSBOUy5DLkNsYXNzLlJlc291cmNlTWV0YWRhdGE7XG5cbmV4cG9ydCBjb25zdCBTQ0hFTUE6T2JqZWN0U2NoZW1hLkNsYXNzID0ge1xuXHRcImVUYWdcIjoge1xuXHRcdFwiQGlkXCI6IE5TLkMuUHJlZGljYXRlLmVUYWcsXG5cdFx0XCJAdHlwZVwiOiBOUy5YU0QuRGF0YVR5cGUuc3RyaW5nLFxuXHR9LFxuXHRcInJlc291cmNlXCI6IHtcblx0XHRcIkBpZFwiOiBOUy5DLlByZWRpY2F0ZS5yZXNvdXJjZSxcblx0XHRcIkB0eXBlXCI6IFwiQGlkXCIsXG5cdH0sXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIENsYXNzIGV4dGVuZHMgVm9sYXRpbGVSZXNvdXJjZS5DbGFzcyB7XG5cdGVUYWc6c3RyaW5nO1xuXHRyZXNvdXJjZTpQb2ludGVyLkNsYXNzO1xufVxuXG5leHBvcnQgY2xhc3MgRmFjdG9yeSB7XG5cblx0c3RhdGljIGhhc0NsYXNzUHJvcGVydGllcyggb2JqZWN0Ok9iamVjdCApOmJvb2xlYW4ge1xuXHRcdHJldHVybiBVdGlscy5oYXNQcm9wZXJ0eURlZmluZWQoIG9iamVjdCwgXCJlVGFnXCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzUHJvcGVydHlEZWZpbmVkKCBvYmplY3QsIFwicmVzb3VyY2VcIiApO1xuXHR9XG5cblx0c3RhdGljIGlzKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIFZvbGF0aWxlUmVzb3VyY2UuRmFjdG9yeS5pcyggb2JqZWN0IClcblx0XHRcdCYmIEZhY3RvcnkuaGFzQ2xhc3NQcm9wZXJ0aWVzKCBvYmplY3QgKVxuXHRcdFx0JiYgRmFjdG9yeS5oYXNSREZDbGFzcyggb2JqZWN0ICk7XG5cdH1cblxuXHRzdGF0aWMgaGFzUkRGQ2xhc3MoIG9iamVjdDpPYmplY3QgKTpib29sZWFuIHtcblx0XHRpZiggISBvYmplY3QgKSByZXR1cm4gZmFsc2U7XG5cblx0XHRsZXQgdHlwZXM6c3RyaW5nW10gPSAoIFwiQHR5cGVcIiBpbiBvYmplY3QgKSA/IG9iamVjdFsgXCJAdHlwZVwiIF0gOiAoIFwidHlwZXNcIiBpbiBvYmplY3QgKSA/ICg8UmVzb3VyY2U+IG9iamVjdCkudHlwZXMgOiBbXTtcblx0XHRyZXR1cm4gdHlwZXMuaW5kZXhPZiggUkRGX0NMQVNTICkgIT09IC0gMTtcblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0ICogYXMgQWRkTWVtYmVyQWN0aW9uIGZyb20gXCIuL0xEUC9BZGRNZW1iZXJBY3Rpb25cIjtcbmltcG9ydCAqIGFzIERpcmVjdENvbnRhaW5lciBmcm9tIFwiLi9MRFAvRGlyZWN0Q29udGFpbmVyXCI7XG5pbXBvcnQgKiBhcyBFcnJvciBmcm9tIFwiLi9MRFAvRXJyb3JcIjtcbmltcG9ydCAqIGFzIEVycm9yUmVzcG9uc2UgZnJvbSBcIi4vTERQL0Vycm9yUmVzcG9uc2VcIjtcbmltcG9ydCAqIGFzIEluZGlyZWN0Q29udGFpbmVyIGZyb20gXCIuL0xEUC9JbmRpcmVjdENvbnRhaW5lclwiO1xuaW1wb3J0ICogYXMgUmVtb3ZlTWVtYmVyQWN0aW9uIGZyb20gXCIuL0xEUC9SZW1vdmVNZW1iZXJBY3Rpb25cIjtcbmltcG9ydCAqIGFzIFJlc3BvbnNlTWV0YWRhdGEgZnJvbSBcIi4vTERQL1Jlc3BvbnNlTWV0YWRhdGFcIjtcbmltcG9ydCAqIGFzIFJlc291cmNlTWV0YWRhdGEgZnJvbSBcIi4vTERQL1Jlc291cmNlTWV0YWRhdGFcIjtcblxuZXhwb3J0IHtcblx0QWRkTWVtYmVyQWN0aW9uLFxuXHREaXJlY3RDb250YWluZXIsXG5cdEVycm9yLFxuXHRFcnJvclJlc3BvbnNlLFxuXHRJbmRpcmVjdENvbnRhaW5lcixcblx0UmVtb3ZlTWVtYmVyQWN0aW9uLFxuXHRSZXNwb25zZU1ldGFkYXRhLFxuXHRSZXNvdXJjZU1ldGFkYXRhLFxufTtcbiIsImltcG9ydCAqIGFzIERvY3VtZW50IGZyb20gXCIuL0RvY3VtZW50XCI7XG5pbXBvcnQgKiBhcyBOUyBmcm9tIFwiLi9OU1wiO1xuaW1wb3J0ICogYXMgT2JqZWN0U2NoZW1hIGZyb20gXCIuL09iamVjdFNjaGVtYVwiO1xuXG5leHBvcnQgY29uc3QgUkRGX0NMQVNTOnN0cmluZyA9IE5TLkNTLkNsYXNzLlByb3RlY3RlZERvY3VtZW50O1xuXG5leHBvcnQgY29uc3QgU0NIRU1BOk9iamVjdFNjaGVtYS5DbGFzcyA9IHtcblx0XCJhY2Nlc3NDb250cm9sTGlzdFwiOiB7XG5cdFx0XCJAaWRcIjogTlMuQ1MuUHJlZGljYXRlLmFjY2Vzc0NvbnRyb2xMaXN0LFxuXHRcdFwiQHR5cGVcIjogXCJAaWRcIixcblx0fSxcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xhc3MgZXh0ZW5kcyBEb2N1bWVudC5DbGFzcyB7XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xhc3M7XG4iLCJpbXBvcnQgKiBhcyBEb2N1bWVudCBmcm9tIFwiLi9Eb2N1bWVudFwiO1xuaW1wb3J0ICogYXMgRnJhZ21lbnQgZnJvbSBcIi4vRnJhZ21lbnRcIjtcbmltcG9ydCAqIGFzIE5TIGZyb20gXCIuL05TXCI7XG5pbXBvcnQgKiBhcyBPYmplY3RTY2hlbWEgZnJvbSBcIi4vT2JqZWN0U2NoZW1hXCI7XG5pbXBvcnQgKiBhcyBSREYgZnJvbSBcIi4vUkRGXCI7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi9VdGlsc1wiO1xuXG5leHBvcnQgY29uc3QgU0NIRU1BOk9iamVjdFNjaGVtYS5DbGFzcyA9IHtcblx0XCJiTm9kZUlkZW50aWZpZXJcIjoge1xuXHRcdFwiQGlkXCI6IE5TLkMuUHJlZGljYXRlLmJOb2RlSWRlbnRpZmllcixcblx0XHRcIkB0eXBlXCI6IE5TLlhTRC5EYXRhVHlwZS5zdHJpbmcsXG5cdH0sXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIENsYXNzIGV4dGVuZHMgRnJhZ21lbnQuQ2xhc3Mge1xuXHRiTm9kZUlkZW50aWZpZXI6c3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgRmFjdG9yeSB7XG5cblx0c3RhdGljIGNyZWF0ZUZyb208VCBleHRlbmRzIE9iamVjdD4oIG9iamVjdDpULCBkb2N1bWVudDpEb2N1bWVudC5DbGFzcyApOlQgJiBDbGFzcztcblx0c3RhdGljIGNyZWF0ZUZyb208VCBleHRlbmRzIE9iamVjdD4oIG9iamVjdDpULCBpZDpzdHJpbmcsIGRvY3VtZW50OkRvY3VtZW50LkNsYXNzICk6VCAmIENsYXNzO1xuXHRzdGF0aWMgY3JlYXRlRnJvbTxUIGV4dGVuZHMgT2JqZWN0Piggb2JqZWN0OlQsIGlkT3JEb2N1bWVudDphbnksIGRvY3VtZW50PzpEb2N1bWVudC5DbGFzcyApOlQgJiBDbGFzcyB7XG5cdFx0bGV0IGlkOnN0cmluZyA9ICEgISBpZE9yRG9jdW1lbnQgJiYgVXRpbHMuaXNTdHJpbmcoIGlkT3JEb2N1bWVudCApID8gaWRPckRvY3VtZW50IDogUkRGLlVSSS5VdGlsLmdlbmVyYXRlQk5vZGVJRCgpO1xuXHRcdGRvY3VtZW50ID0gZG9jdW1lbnQgfHwgaWRPckRvY3VtZW50O1xuXG5cdFx0bGV0IGZyYWdtZW50OlQgJiBGcmFnbWVudC5DbGFzcyA9IEZyYWdtZW50LkZhY3RvcnkuY3JlYXRlRnJvbTxUPiggb2JqZWN0LCBpZCwgZG9jdW1lbnQgKTtcblxuXHRcdHJldHVybiBGYWN0b3J5LmRlY29yYXRlPFQ+KCBmcmFnbWVudCwgKDxhbnk+IGZyYWdtZW50KS5iTm9kZUlkZW50aWZpZXIgKTtcblx0fVxuXG5cdHN0YXRpYyBkZWNvcmF0ZTxUIGV4dGVuZHMgT2JqZWN0Piggb2JqZWN0OlQsIGJOb2RlSWRlbnRpZmllcjpzdHJpbmcgPSBVdGlscy5VVUlELmdlbmVyYXRlKCkgKTpUICYgQ2xhc3Mge1xuXHRcdGxldCBiTm9kZTpUICYgQ2xhc3MgPSA8YW55PiBvYmplY3Q7XG5cblx0XHRiTm9kZS5iTm9kZUlkZW50aWZpZXIgPSBiTm9kZUlkZW50aWZpZXI7XG5cdFx0cmV0dXJuIGJOb2RlO1xuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xhc3M7XG4iLCJpbXBvcnQgKiBhcyBFcnJvcnMgZnJvbSBcIi4vLi4vRXJyb3JzXCI7XG5pbXBvcnQgKiBhcyBPYmplY3RTY2hlbWEgZnJvbSBcIi4vLi4vT2JqZWN0U2NoZW1hXCI7XG5pbXBvcnQgKiBhcyBOUyBmcm9tIFwiLi8uLi9OU1wiO1xuaW1wb3J0ICogYXMgUG9pbnRlciBmcm9tIFwiLi8uLi9Qb2ludGVyXCI7XG5pbXBvcnQgKiBhcyBSREYgZnJvbSBcIi4vLi4vUkRGXCI7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi8uLi9VdGlsc1wiO1xuXG4vLyBUT0RPOiBVc2UgTGl0ZXJhbC5QYXJzZXJzIHRvIHBhcnNlIGxpdGVyYWxzXG5leHBvcnQgY2xhc3MgQ2xhc3Mge1xuXHRwcml2YXRlIF9saXRlcmFsU2VyaWFsaXplcnM6TWFwPHN0cmluZywgUkRGLkxpdGVyYWwuU2VyaWFsaXplcj47XG5cblx0Z2V0IGxpdGVyYWxTZXJpYWxpemVycygpOk1hcDxzdHJpbmcsIFJERi5MaXRlcmFsLlNlcmlhbGl6ZXI+IHsgcmV0dXJuIHRoaXMuX2xpdGVyYWxTZXJpYWxpemVyczsgfTtcblxuXHRwcml2YXRlIHN0YXRpYyBnZXREZWZhdWx0U2VyaWFsaXplcnMoKTpNYXA8c3RyaW5nLCBSREYuTGl0ZXJhbC5TZXJpYWxpemVyPiB7XG5cdFx0bGV0IGxpdGVyYWxTZXJpYWxpemVyczpNYXA8c3RyaW5nLCBSREYuTGl0ZXJhbC5TZXJpYWxpemVyPiA9IG5ldyBNYXA8c3RyaW5nLCBSREYuTGl0ZXJhbC5TZXJpYWxpemVyPigpO1xuXG5cdFx0bGl0ZXJhbFNlcmlhbGl6ZXJzLnNldCggTlMuWFNELkRhdGFUeXBlLmRhdGUsIFJERi5MaXRlcmFsLlNlcmlhbGl6ZXJzLlhTRC5kYXRlU2VyaWFsaXplciApO1xuXHRcdGxpdGVyYWxTZXJpYWxpemVycy5zZXQoIE5TLlhTRC5EYXRhVHlwZS5kYXRlVGltZSwgUkRGLkxpdGVyYWwuU2VyaWFsaXplcnMuWFNELmRhdGVUaW1lU2VyaWFsaXplciApO1xuXHRcdGxpdGVyYWxTZXJpYWxpemVycy5zZXQoIE5TLlhTRC5EYXRhVHlwZS50aW1lLCBSREYuTGl0ZXJhbC5TZXJpYWxpemVycy5YU0QudGltZVNlcmlhbGl6ZXIgKTtcblx0XHRsaXRlcmFsU2VyaWFsaXplcnMuc2V0KCBOUy5YU0QuRGF0YVR5cGUuaW50ZWdlciwgUkRGLkxpdGVyYWwuU2VyaWFsaXplcnMuWFNELmludGVnZXJTZXJpYWxpemVyICk7XG5cdFx0bGl0ZXJhbFNlcmlhbGl6ZXJzLnNldCggTlMuWFNELkRhdGFUeXBlLmludCwgUkRGLkxpdGVyYWwuU2VyaWFsaXplcnMuWFNELmludGVnZXJTZXJpYWxpemVyICk7XG5cdFx0bGl0ZXJhbFNlcmlhbGl6ZXJzLnNldCggTlMuWFNELkRhdGFUeXBlLnVuc2lnbmVkSW50LCBSREYuTGl0ZXJhbC5TZXJpYWxpemVycy5YU0QudW5zaWduZWRJbnRlZ2VyU2VyaWFsaXplciApO1xuXHRcdGxpdGVyYWxTZXJpYWxpemVycy5zZXQoIE5TLlhTRC5EYXRhVHlwZS5sb25nLCBSREYuTGl0ZXJhbC5TZXJpYWxpemVycy5YU0QuaW50ZWdlclNlcmlhbGl6ZXIgKTtcblx0XHRsaXRlcmFsU2VyaWFsaXplcnMuc2V0KCBOUy5YU0QuRGF0YVR5cGUudW5zaWduZWRMb25nLCBSREYuTGl0ZXJhbC5TZXJpYWxpemVycy5YU0QudW5zaWduZWRJbnRlZ2VyU2VyaWFsaXplciApO1xuXHRcdGxpdGVyYWxTZXJpYWxpemVycy5zZXQoIE5TLlhTRC5EYXRhVHlwZS5mbG9hdCwgUkRGLkxpdGVyYWwuU2VyaWFsaXplcnMuWFNELmZsb2F0U2VyaWFsaXplciApO1xuXHRcdGxpdGVyYWxTZXJpYWxpemVycy5zZXQoIE5TLlhTRC5EYXRhVHlwZS5kb3VibGUsIFJERi5MaXRlcmFsLlNlcmlhbGl6ZXJzLlhTRC5mbG9hdFNlcmlhbGl6ZXIgKTtcblx0XHRsaXRlcmFsU2VyaWFsaXplcnMuc2V0KCBOUy5YU0QuRGF0YVR5cGUuYm9vbGVhbiwgUkRGLkxpdGVyYWwuU2VyaWFsaXplcnMuWFNELmJvb2xlYW5TZXJpYWxpemVyICk7XG5cdFx0bGl0ZXJhbFNlcmlhbGl6ZXJzLnNldCggTlMuWFNELkRhdGFUeXBlLnN0cmluZywgUkRGLkxpdGVyYWwuU2VyaWFsaXplcnMuWFNELnN0cmluZ1NlcmlhbGl6ZXIgKTtcblxuXHRcdHJldHVybiBsaXRlcmFsU2VyaWFsaXplcnM7XG5cdH1cblxuXHRjb25zdHJ1Y3RvciggbGl0ZXJhbFNlcmlhbGl6ZXJzPzpNYXA8c3RyaW5nLCBSREYuTGl0ZXJhbC5TZXJpYWxpemVyPiApIHtcblx0XHR0aGlzLl9saXRlcmFsU2VyaWFsaXplcnMgPSAhICEgbGl0ZXJhbFNlcmlhbGl6ZXJzID8gbGl0ZXJhbFNlcmlhbGl6ZXJzIDogQ2xhc3MuZ2V0RGVmYXVsdFNlcmlhbGl6ZXJzKCk7XG5cdH1cblxuXG5cdGNvbXBhY3QoIGV4cGFuZGVkT2JqZWN0czpPYmplY3RbXSwgdGFyZ2V0T2JqZWN0czpPYmplY3RbXSwgZGlnZXN0ZWRTY2hlbWE6T2JqZWN0U2NoZW1hLkRpZ2VzdGVkT2JqZWN0U2NoZW1hLCBwb2ludGVyTGlicmFyeTpQb2ludGVyLkxpYnJhcnkgKTpPYmplY3RbXTtcblx0Y29tcGFjdCggZXhwYW5kZWRPYmplY3Q6T2JqZWN0LCB0YXJnZXRPYmplY3Q6T2JqZWN0LCBkaWdlc3RlZFNjaGVtYTpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEsIHBvaW50ZXJMaWJyYXJ5OlBvaW50ZXIuTGlicmFyeSApOk9iamVjdDtcblx0Y29tcGFjdCggZXhwYW5kZWRPYmplY3RzOk9iamVjdFtdLCBkaWdlc3RlZFNjaGVtYTpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEsIHBvaW50ZXJMaWJyYXJ5OlBvaW50ZXIuTGlicmFyeSApOk9iamVjdFtdO1xuXHRjb21wYWN0KCBleHBhbmRlZE9iamVjdDpPYmplY3QsIGRpZ2VzdGVkU2NoZW1hOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSwgcG9pbnRlckxpYnJhcnk6UG9pbnRlci5MaWJyYXJ5ICk6T2JqZWN0O1xuXHRjb21wYWN0KCBleHBhbmRlZE9iamVjdE9yT2JqZWN0czphbnksIHRhcmdldE9iamVjdE9yT2JqZWN0c09yRGlnZXN0ZWRDb250ZXh0OmFueSwgZGlnZXN0ZWRTY2hlbWFPclBvaW50ZXJMaWJyYXJ5OmFueSwgcG9pbnRlckxpYnJhcnk6UG9pbnRlci5MaWJyYXJ5ID0gbnVsbCApOmFueSB7XG5cdFx0bGV0IHRhcmdldE9iamVjdE9yT2JqZWN0czphbnkgPSAhIHBvaW50ZXJMaWJyYXJ5ID8gbnVsbCA6IHRhcmdldE9iamVjdE9yT2JqZWN0c09yRGlnZXN0ZWRDb250ZXh0O1xuXHRcdGxldCBkaWdlc3RlZFNjaGVtYTphbnkgPSAhIHBvaW50ZXJMaWJyYXJ5ID8gdGFyZ2V0T2JqZWN0T3JPYmplY3RzT3JEaWdlc3RlZENvbnRleHQgOiBkaWdlc3RlZFNjaGVtYU9yUG9pbnRlckxpYnJhcnk7XG5cdFx0cG9pbnRlckxpYnJhcnkgPSAhIHBvaW50ZXJMaWJyYXJ5ID8gZGlnZXN0ZWRTY2hlbWFPclBvaW50ZXJMaWJyYXJ5IDogcG9pbnRlckxpYnJhcnk7XG5cblx0XHRpZiggISBVdGlscy5pc0FycmF5KCBleHBhbmRlZE9iamVjdE9yT2JqZWN0cyApICkgcmV0dXJuIHRoaXMuY29tcGFjdFNpbmdsZSggZXhwYW5kZWRPYmplY3RPck9iamVjdHMsIHRhcmdldE9iamVjdE9yT2JqZWN0cywgZGlnZXN0ZWRTY2hlbWEsIHBvaW50ZXJMaWJyYXJ5ICk7XG5cblx0XHRsZXQgZXhwYW5kZWRPYmplY3RzOk9iamVjdFtdID0gZXhwYW5kZWRPYmplY3RPck9iamVjdHM7XG5cdFx0bGV0IHRhcmdldE9iamVjdHM6T2JqZWN0W10gPSAhICEgdGFyZ2V0T2JqZWN0T3JPYmplY3RzID8gdGFyZ2V0T2JqZWN0T3JPYmplY3RzIDogW107XG5cdFx0Zm9yKCBsZXQgaTpudW1iZXIgPSAwLCBsZW5ndGg6bnVtYmVyID0gZXhwYW5kZWRPYmplY3RzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArKyApIHtcblx0XHRcdGxldCBleHBhbmRlZE9iamVjdDpPYmplY3QgPSBleHBhbmRlZE9iamVjdHNbIGkgXTtcblx0XHRcdGxldCB0YXJnZXRPYmplY3Q6T2JqZWN0ID0gdGFyZ2V0T2JqZWN0c1sgaSBdID0gISAhIHRhcmdldE9iamVjdHNbIGkgXSA/IHRhcmdldE9iamVjdHNbIGkgXSA6IHt9O1xuXG5cdFx0XHR0aGlzLmNvbXBhY3RTaW5nbGUoIGV4cGFuZGVkT2JqZWN0LCB0YXJnZXRPYmplY3QsIGRpZ2VzdGVkU2NoZW1hLCBwb2ludGVyTGlicmFyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXRPYmplY3RzO1xuXHR9XG5cblx0ZXhwYW5kKCBjb21wYWN0ZWRPYmplY3RzOk9iamVjdFtdLCBnZW5lcmFsU2NoZW1hOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSwgZGlnZXN0ZWRTY2hlbWE6T2JqZWN0U2NoZW1hLkRpZ2VzdGVkT2JqZWN0U2NoZW1hICk6UkRGLk5vZGUuQ2xhc3NbXTtcblx0ZXhwYW5kKCBjb21wYWN0ZWRPYmplY3Q6T2JqZWN0LCBnZW5lcmFsU2NoZW1hOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSwgZGlnZXN0ZWRTY2hlbWE6T2JqZWN0U2NoZW1hLkRpZ2VzdGVkT2JqZWN0U2NoZW1hICk6UkRGLk5vZGUuQ2xhc3M7XG5cdGV4cGFuZCggY29tcGFjdGVkT2JqZWN0T3JPYmplY3RzOk9iamVjdFtdLCBnZW5lcmFsU2NoZW1hOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSwgZGlnZXN0ZWRTY2hlbWE6T2JqZWN0U2NoZW1hLkRpZ2VzdGVkT2JqZWN0U2NoZW1hICk6YW55IHtcblx0XHRpZiggISBVdGlscy5pc0FycmF5KCBjb21wYWN0ZWRPYmplY3RPck9iamVjdHMgKSApIHJldHVybiB0aGlzLmV4cGFuZFNpbmdsZSggY29tcGFjdGVkT2JqZWN0T3JPYmplY3RzLCBnZW5lcmFsU2NoZW1hLCBkaWdlc3RlZFNjaGVtYSApO1xuXHR9XG5cblx0cHJpdmF0ZSBleHBhbmRTaW5nbGUoIGNvbXBhY3RlZE9iamVjdDpPYmplY3QsIGdlbmVyYWxTY2hlbWE6T2JqZWN0U2NoZW1hLkRpZ2VzdGVkT2JqZWN0U2NoZW1hLCBkaWdlc3RlZFNjaGVtYTpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEgKTpSREYuTm9kZS5DbGFzcyB7XG5cdFx0bGV0IGV4cGFuZGVkT2JqZWN0OmFueSA9IHt9O1xuXG5cdFx0ZXhwYW5kZWRPYmplY3RbIFwiQGlkXCIgXSA9ICEgISBjb21wYWN0ZWRPYmplY3RbIFwiaWRcIiBdID8gY29tcGFjdGVkT2JqZWN0WyBcImlkXCIgXSA6IFwiXCI7XG5cdFx0aWYoICEgISBjb21wYWN0ZWRPYmplY3RbIFwidHlwZXNcIiBdICkgZXhwYW5kZWRPYmplY3RbIFwiQHR5cGVcIiBdID0gY29tcGFjdGVkT2JqZWN0WyBcInR5cGVzXCIgXS5tYXAoICggdHlwZTpzdHJpbmcgKSA9PiBPYmplY3RTY2hlbWEuVXRpbC5yZXNvbHZlVVJJKCB0eXBlLCBnZW5lcmFsU2NoZW1hICkgKTtcblxuXHRcdFV0aWxzLmZvckVhY2hPd25Qcm9wZXJ0eSggY29tcGFjdGVkT2JqZWN0LCAoIHByb3BlcnR5TmFtZTpzdHJpbmcsIHZhbHVlOmFueSApOnZvaWQgPT4ge1xuXHRcdFx0aWYoIHByb3BlcnR5TmFtZSA9PT0gXCJpZFwiICkgcmV0dXJuO1xuXHRcdFx0aWYoIHByb3BlcnR5TmFtZSA9PT0gXCJ0eXBlc1wiICkgcmV0dXJuO1xuXG5cdFx0XHRsZXQgZXhwYW5kZWRWYWx1ZTphbnk7XG5cdFx0XHRsZXQgZXhwYW5kZWRQcm9wZXJ0eU5hbWU6c3RyaW5nID0gbnVsbDtcblx0XHRcdGlmKCBkaWdlc3RlZFNjaGVtYS5wcm9wZXJ0aWVzLmhhcyggcHJvcGVydHlOYW1lICkgKSB7XG5cdFx0XHRcdGxldCBkZWZpbml0aW9uOk9iamVjdFNjaGVtYS5EaWdlc3RlZFByb3BlcnR5RGVmaW5pdGlvbiA9IFV0aWxzLk8uY2xvbmUoIGRpZ2VzdGVkU2NoZW1hLnByb3BlcnRpZXMuZ2V0KCBwcm9wZXJ0eU5hbWUgKSwgeyBvYmplY3RzOiB0cnVlIH0gKTtcblx0XHRcdFx0aWYoIGRlZmluaXRpb24udXJpICE9PSBudWxsICkge1xuXHRcdFx0XHRcdGV4cGFuZGVkUHJvcGVydHlOYW1lID0gZGVmaW5pdGlvbi51cmkudG9TdHJpbmcoKTtcblx0XHRcdFx0fSBlbHNlIGlmKCBkaWdlc3RlZFNjaGVtYS52b2NhYiAhPT0gbnVsbCApIHtcblx0XHRcdFx0XHRleHBhbmRlZFByb3BlcnR5TmFtZSA9IGRpZ2VzdGVkU2NoZW1hLnZvY2FiICsgcHJvcGVydHlOYW1lO1xuXHRcdFx0XHRcdGRlZmluaXRpb24udXJpID0gbmV3IFJERi5VUkkuQ2xhc3MoIGV4cGFuZGVkUHJvcGVydHlOYW1lICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9ycy5JbnZhbGlkSlNPTkxEU3ludGF4RXJyb3IoIGBUaGUgY29udGV4dCBkb2Vzbid0IGhhdmUgYSBkZWZhdWx0IHZvY2FidWxhcnkgYW5kIHRoZSBvYmplY3Qgc2NoZW1hIGRvZXMgbm90IGRlZmluZSBhIHByb3BlciBAaWQgZm9yIHRoZSBwcm9wZXJ0eSAnJHsgcHJvcGVydHlOYW1lIH0nYCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZXhwYW5kZWRWYWx1ZSA9IHRoaXMuZXhwYW5kUHJvcGVydHkoIHZhbHVlLCBkZWZpbml0aW9uLCBnZW5lcmFsU2NoZW1hLCBkaWdlc3RlZFNjaGVtYSApO1xuXG5cdFx0XHR9IGVsc2UgaWYoIFJERi5VUkkuVXRpbC5pc0Fic29sdXRlKCBwcm9wZXJ0eU5hbWUgKSB8fCBkaWdlc3RlZFNjaGVtYS52b2NhYiAhPT0gbnVsbCApIHtcblx0XHRcdFx0ZXhwYW5kZWRWYWx1ZSA9IHRoaXMuZXhwYW5kUHJvcGVydHlWYWx1ZSggdmFsdWUsIGdlbmVyYWxTY2hlbWEsIGRpZ2VzdGVkU2NoZW1hICk7XG5cdFx0XHRcdGV4cGFuZGVkUHJvcGVydHlOYW1lID0gT2JqZWN0U2NoZW1hLlV0aWwucmVzb2x2ZVVSSSggcHJvcGVydHlOYW1lLCBnZW5lcmFsU2NoZW1hICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKCAhIGV4cGFuZGVkVmFsdWUgfHwgISBleHBhbmRlZFByb3BlcnR5TmFtZSApIHJldHVybjtcblx0XHRcdGV4cGFuZGVkT2JqZWN0WyBleHBhbmRlZFByb3BlcnR5TmFtZSBdID0gZXhwYW5kZWRWYWx1ZTtcblx0XHR9ICk7XG5cblx0XHRyZXR1cm4gZXhwYW5kZWRPYmplY3Q7XG5cdH1cblxuXHRwcml2YXRlIGV4cGFuZFByb3BlcnR5KCBwcm9wZXJ0eVZhbHVlOmFueSwgcHJvcGVydHlEZWZpbml0aW9uOk9iamVjdFNjaGVtYS5EaWdlc3RlZFByb3BlcnR5RGVmaW5pdGlvbiwgZ2VuZXJhbFNjaGVtYTpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEsIGRpZ2VzdGVkU2NoZW1hOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSApOmFueSB7XG5cdFx0c3dpdGNoKCBwcm9wZXJ0eURlZmluaXRpb24uY29udGFpbmVyVHlwZSApIHtcblx0XHRcdGNhc2UgbnVsbDpcblx0XHRcdFx0Ly8gUHJvcGVydHkgaXMgbm90IGEgbGlzdFxuXHRcdFx0XHRpZiggcHJvcGVydHlEZWZpbml0aW9uLmxpdGVyYWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuZXhwYW5kUHJvcGVydHlMaXRlcmFsKCBwcm9wZXJ0eVZhbHVlLCBwcm9wZXJ0eURlZmluaXRpb24ubGl0ZXJhbFR5cGUudG9TdHJpbmcoKSApO1xuXHRcdFx0XHR9IGVsc2UgaWYoIHByb3BlcnR5RGVmaW5pdGlvbi5saXRlcmFsID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5leHBhbmRQcm9wZXJ0eVBvaW50ZXIoIHByb3BlcnR5VmFsdWUsIGdlbmVyYWxTY2hlbWEsIGRpZ2VzdGVkU2NoZW1hICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuZXhwYW5kUHJvcGVydHlWYWx1ZSggcHJvcGVydHlWYWx1ZSwgZ2VuZXJhbFNjaGVtYSwgZGlnZXN0ZWRTY2hlbWEgKTtcblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBPYmplY3RTY2hlbWEuQ29udGFpbmVyVHlwZS5MSVNUOlxuXHRcdFx0XHRpZiggcHJvcGVydHlEZWZpbml0aW9uLmxpdGVyYWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuZXhwYW5kUHJvcGVydHlMaXRlcmFsTGlzdCggcHJvcGVydHlWYWx1ZSwgcHJvcGVydHlEZWZpbml0aW9uLmxpdGVyYWxUeXBlLnRvU3RyaW5nKCkgKTtcblx0XHRcdFx0fSBlbHNlIGlmKCBwcm9wZXJ0eURlZmluaXRpb24ubGl0ZXJhbCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuZXhwYW5kUHJvcGVydHlQb2ludGVyTGlzdCggcHJvcGVydHlWYWx1ZSwgZ2VuZXJhbFNjaGVtYSwgZGlnZXN0ZWRTY2hlbWEgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5leHBhbmRQcm9wZXJ0eUxpc3QoIHByb3BlcnR5VmFsdWUsIGdlbmVyYWxTY2hlbWEsIGRpZ2VzdGVkU2NoZW1hICk7XG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgT2JqZWN0U2NoZW1hLkNvbnRhaW5lclR5cGUuU0VUOlxuXHRcdFx0XHRpZiggcHJvcGVydHlEZWZpbml0aW9uLmxpdGVyYWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuZXhwYW5kUHJvcGVydHlMaXRlcmFscyggcHJvcGVydHlWYWx1ZSwgcHJvcGVydHlEZWZpbml0aW9uLmxpdGVyYWxUeXBlLnRvU3RyaW5nKCkgKTtcblx0XHRcdFx0fSBlbHNlIGlmKCBwcm9wZXJ0eURlZmluaXRpb24ubGl0ZXJhbCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuZXhwYW5kUHJvcGVydHlQb2ludGVycyggcHJvcGVydHlWYWx1ZSwgZ2VuZXJhbFNjaGVtYSwgZGlnZXN0ZWRTY2hlbWEgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5leHBhbmRQcm9wZXJ0eVZhbHVlcyggcHJvcGVydHlWYWx1ZSwgZ2VuZXJhbFNjaGVtYSwgZGlnZXN0ZWRTY2hlbWEgKTtcblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBPYmplY3RTY2hlbWEuQ29udGFpbmVyVHlwZS5MQU5HVUFHRTpcblx0XHRcdFx0cmV0dXJuIHRoaXMuZXhwYW5kUHJvcGVydHlMYW5ndWFnZU1hcCggcHJvcGVydHlWYWx1ZSApO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9ycy5JbGxlZ2FsQXJndW1lbnRFcnJvciggXCJUaGUgY29udGFpbmVyVHlwZSBzcGVjaWZpZWQgaXMgbm90IHN1cHBvcnRlZC5cIiApO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgZXhwYW5kUHJvcGVydHlWYWx1ZSggcHJvcGVydHlWYWx1ZTphbnksIGdlbmVyYWxTY2hlbWE6T2JqZWN0U2NoZW1hLkRpZ2VzdGVkT2JqZWN0U2NoZW1hLCBkaWdlc3RlZFNjaGVtYTpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEgKTphbnkge1xuXHRcdGlmKCBVdGlscy5pc0FycmF5KCBwcm9wZXJ0eVZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5leHBhbmRQcm9wZXJ0eVZhbHVlcyggcHJvcGVydHlWYWx1ZSwgZ2VuZXJhbFNjaGVtYSwgZGlnZXN0ZWRTY2hlbWEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bGV0IGV4cGFuZGVkVmFsdWU6UkRGLk5vZGUuQ2xhc3MgPSB0aGlzLmV4cGFuZFZhbHVlKCBwcm9wZXJ0eVZhbHVlLCBnZW5lcmFsU2NoZW1hLCBkaWdlc3RlZFNjaGVtYSApO1xuXG5cdFx0XHRpZiggISBleHBhbmRlZFZhbHVlICkgcmV0dXJuIG51bGw7XG5cblx0XHRcdHJldHVybiBbIGV4cGFuZGVkVmFsdWUgXTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGV4cGFuZFByb3BlcnR5UG9pbnRlciggcHJvcGVydHlWYWx1ZTphbnksIGdlbmVyYWxTY2hlbWE6T2JqZWN0U2NoZW1hLkRpZ2VzdGVkT2JqZWN0U2NoZW1hLCBkaWdlc3RlZFNjaGVtYTpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEgKTphbnkge1xuXHRcdGxldCBleHBhbmRlZFBvaW50ZXI6UkRGLk5vZGUuQ2xhc3MgPSB0aGlzLmV4cGFuZFBvaW50ZXIoIHByb3BlcnR5VmFsdWUsIGdlbmVyYWxTY2hlbWEsIGRpZ2VzdGVkU2NoZW1hICk7XG5cblx0XHRpZiggISBleHBhbmRlZFBvaW50ZXIgKSByZXR1cm4gbnVsbDtcblxuXHRcdHJldHVybiBbIGV4cGFuZGVkUG9pbnRlciBdO1xuXHR9XG5cblx0cHJpdmF0ZSBleHBhbmRQcm9wZXJ0eUxpdGVyYWwoIHByb3BlcnR5VmFsdWU6YW55LCBsaXRlcmFsVHlwZTpzdHJpbmcgKTphbnkge1xuXHRcdC8vIFRPRE86IExhbmd1YWdlXG5cdFx0bGV0IHNlcmlhbGl6ZWRWYWx1ZTpzdHJpbmcgPSB0aGlzLnNlcmlhbGl6ZUxpdGVyYWwoIHByb3BlcnR5VmFsdWUsIGxpdGVyYWxUeXBlICk7XG5cblx0XHRpZiggc2VyaWFsaXplZFZhbHVlID09PSBudWxsICkgcmV0dXJuIG51bGw7XG5cblx0XHRyZXR1cm4gW1xuXHRcdFx0eyBcIkB2YWx1ZVwiOiBzZXJpYWxpemVkVmFsdWUsIFwiQHR5cGVcIjogbGl0ZXJhbFR5cGUgfSxcblx0XHRdO1xuXHR9XG5cblx0cHJpdmF0ZSBleHBhbmRQcm9wZXJ0eUxpc3QoIHByb3BlcnR5VmFsdWVzOmFueSwgZ2VuZXJhbFNjaGVtYTpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEsIGRpZ2VzdGVkU2NoZW1hOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSApOmFueSB7XG5cdFx0cHJvcGVydHlWYWx1ZXMgPSBVdGlscy5pc0FycmF5KCBwcm9wZXJ0eVZhbHVlcyApID8gcHJvcGVydHlWYWx1ZXMgOiBbIHByb3BlcnR5VmFsdWVzIF07XG5cblx0XHRsZXQgZXhwYW5kZWRBcnJheTphbnkgPSB0aGlzLmV4cGFuZEFycmF5KCBwcm9wZXJ0eVZhbHVlcywgZ2VuZXJhbFNjaGVtYSwgZGlnZXN0ZWRTY2hlbWEgKTtcblxuXHRcdGlmKCAhIGV4cGFuZGVkQXJyYXkgKSByZXR1cm4gbnVsbDtcblxuXHRcdHJldHVybiBbXG5cdFx0XHR7IFwiQGxpc3RcIjogZXhwYW5kZWRBcnJheSB9LFxuXHRcdF07XG5cdH1cblxuXHRwcml2YXRlIGV4cGFuZFByb3BlcnR5UG9pbnRlckxpc3QoIHByb3BlcnR5VmFsdWVzOmFueSwgZ2VuZXJhbFNjaGVtYTpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEsIGRpZ2VzdGVkU2NoZW1hOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSApOmFueSB7XG5cdFx0bGV0IGxpc3RWYWx1ZXM6QXJyYXk8YW55PiA9IHRoaXMuZXhwYW5kUHJvcGVydHlQb2ludGVycyggcHJvcGVydHlWYWx1ZXMsIGdlbmVyYWxTY2hlbWEsIGRpZ2VzdGVkU2NoZW1hICk7XG5cblx0XHRyZXR1cm4gW1xuXHRcdFx0eyBcIkBsaXN0XCI6IGxpc3RWYWx1ZXMgfSxcblx0XHRdO1xuXHR9XG5cblx0cHJpdmF0ZSBleHBhbmRQcm9wZXJ0eUxpdGVyYWxMaXN0KCBwcm9wZXJ0eVZhbHVlczphbnksIGxpdGVyYWxUeXBlOnN0cmluZyApOmFueSB7XG5cdFx0bGV0IGxpc3RWYWx1ZXM6QXJyYXk8YW55PiA9IHRoaXMuZXhwYW5kUHJvcGVydHlMaXRlcmFscyggcHJvcGVydHlWYWx1ZXMsIGxpdGVyYWxUeXBlICk7XG5cblx0XHRyZXR1cm4gW1xuXHRcdFx0eyBcIkBsaXN0XCI6IGxpc3RWYWx1ZXMgfSxcblx0XHRdO1xuXHR9XG5cblx0cHJpdmF0ZSBleHBhbmRQcm9wZXJ0eVZhbHVlcyggcHJvcGVydHlWYWx1ZXM6YW55LCBnZW5lcmFsU2NoZW1hOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSwgZGlnZXN0ZWRTY2hlbWE6T2JqZWN0U2NoZW1hLkRpZ2VzdGVkT2JqZWN0U2NoZW1hICk6YW55IHtcblx0XHRwcm9wZXJ0eVZhbHVlcyA9IFV0aWxzLmlzQXJyYXkoIHByb3BlcnR5VmFsdWVzICkgPyBwcm9wZXJ0eVZhbHVlcyA6IFsgcHJvcGVydHlWYWx1ZXMgXTtcblxuXHRcdGxldCBleHBhbmRlZEFycmF5OmFueSA9IHRoaXMuZXhwYW5kQXJyYXkoIHByb3BlcnR5VmFsdWVzLCBnZW5lcmFsU2NoZW1hLCBkaWdlc3RlZFNjaGVtYSApO1xuXG5cdFx0aWYoICEgZXhwYW5kZWRBcnJheSApIHJldHVybiBudWxsO1xuXG5cdFx0cmV0dXJuIGV4cGFuZGVkQXJyYXk7XG5cdH1cblxuXHRwcml2YXRlIGV4cGFuZFByb3BlcnR5UG9pbnRlcnMoIHByb3BlcnR5VmFsdWVzOmFueSwgZ2VuZXJhbFNjaGVtYTpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEsIGRpZ2VzdGVkU2NoZW1hOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSApOmFueSB7XG5cdFx0cHJvcGVydHlWYWx1ZXMgPSBVdGlscy5pc0FycmF5KCBwcm9wZXJ0eVZhbHVlcyApID8gcHJvcGVydHlWYWx1ZXMgOiBbIHByb3BlcnR5VmFsdWVzIF07XG5cblx0XHRsZXQgZXhwYW5kZWRQb2ludGVyczpBcnJheTxhbnk+ID0gW107XG5cdFx0Zm9yKCBsZXQgcHJvcGVydHlWYWx1ZSBvZiBwcm9wZXJ0eVZhbHVlcyApIHtcblx0XHRcdGxldCBleHBhbmRlZFBvaW50ZXI6UkRGLk5vZGUuQ2xhc3MgPSB0aGlzLmV4cGFuZFBvaW50ZXIoIHByb3BlcnR5VmFsdWUsIGdlbmVyYWxTY2hlbWEsIGRpZ2VzdGVkU2NoZW1hICk7XG5cdFx0XHRpZiggISBleHBhbmRlZFBvaW50ZXIgKSBjb250aW51ZTtcblxuXHRcdFx0ZXhwYW5kZWRQb2ludGVycy5wdXNoKCBleHBhbmRlZFBvaW50ZXIgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXhwYW5kZWRQb2ludGVycztcblx0fVxuXG5cdHByaXZhdGUgZXhwYW5kUHJvcGVydHlMaXRlcmFscyggcHJvcGVydHlWYWx1ZXM6YW55LCBsaXRlcmFsVHlwZTpzdHJpbmcgKTphbnkge1xuXHRcdHByb3BlcnR5VmFsdWVzID0gVXRpbHMuaXNBcnJheSggcHJvcGVydHlWYWx1ZXMgKSA/IHByb3BlcnR5VmFsdWVzIDogWyBwcm9wZXJ0eVZhbHVlcyBdO1xuXG5cdFx0bGV0IGxpc3RWYWx1ZXM6QXJyYXk8YW55PiA9IFtdO1xuXHRcdGZvciggbGV0IHByb3BlcnR5VmFsdWUgb2YgcHJvcGVydHlWYWx1ZXMgKSB7XG5cdFx0XHRsZXQgc2VyaWFsaXplZFZhbHVlOnN0cmluZyA9IHRoaXMuc2VyaWFsaXplTGl0ZXJhbCggcHJvcGVydHlWYWx1ZSwgbGl0ZXJhbFR5cGUgKTtcblx0XHRcdGlmKCAhIHNlcmlhbGl6ZWRWYWx1ZSApIGNvbnRpbnVlO1xuXG5cdFx0XHRsaXN0VmFsdWVzLnB1c2goIHsgXCJAdmFsdWVcIjogc2VyaWFsaXplZFZhbHVlLCBcIkB0eXBlXCI6IGxpdGVyYWxUeXBlIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGlzdFZhbHVlcztcblx0fVxuXG5cdHByaXZhdGUgZXhwYW5kUHJvcGVydHlMYW5ndWFnZU1hcCggcHJvcGVydHlWYWx1ZTphbnkgKTphbnkge1xuXHRcdGlmKCAhIFV0aWxzLmlzT2JqZWN0KCBwcm9wZXJ0eVZhbHVlICkgKSB7XG5cdFx0XHQvLyBUT0RPOiBXYXJuIG9mIGRhdGEgbG9zc1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0bGV0IG1hcFZhbHVlczpBcnJheTxhbnk+ID0gW107XG5cdFx0VXRpbHMuZm9yRWFjaE93blByb3BlcnR5KCBwcm9wZXJ0eVZhbHVlLCAoIGxhbmd1YWdlVGFnOnN0cmluZywgdmFsdWU6YW55ICk6dm9pZCA9PiB7XG5cdFx0XHQvLyBUT0RPOiBWYWxpZGF0ZSBsYW5ndWFnZSB0YWdzXG5cblx0XHRcdGxldCBzZXJpYWxpemVkVmFsdWU6c3RyaW5nID0gdGhpcy5saXRlcmFsU2VyaWFsaXplcnMuZ2V0KCBOUy5YU0QuRGF0YVR5cGUuc3RyaW5nICkuc2VyaWFsaXplKCB2YWx1ZSApO1xuXHRcdFx0bWFwVmFsdWVzLnB1c2goIHsgXCJAdmFsdWVcIjogc2VyaWFsaXplZFZhbHVlLCBcIkB0eXBlXCI6IE5TLlhTRC5EYXRhVHlwZS5zdHJpbmcsIFwiQGxhbmd1YWdlXCI6IGxhbmd1YWdlVGFnIH0gKTtcblx0XHR9ICk7XG5cblx0XHRyZXR1cm4gbWFwVmFsdWVzO1xuXHR9XG5cblx0cHJpdmF0ZSBzZXJpYWxpemVMaXRlcmFsKCBwcm9wZXJ0eVZhbHVlOmFueSwgbGl0ZXJhbFR5cGU6c3RyaW5nICk6c3RyaW5nIHtcblx0XHRpZiggUG9pbnRlci5GYWN0b3J5LmlzKCBwcm9wZXJ0eVZhbHVlICkgKSB7XG5cdFx0XHQvLyBUT0RPOiBXYXJuIG9mIGRhdGEgbG9zc1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0aWYoICEgdGhpcy5saXRlcmFsU2VyaWFsaXplcnMuaGFzKCBsaXRlcmFsVHlwZSApICkge1xuXHRcdFx0Ly8gVE9ETzogV2FybiBvZiBkYXRhIGxvc3Ncblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5saXRlcmFsU2VyaWFsaXplcnMuZ2V0KCBsaXRlcmFsVHlwZSApLnNlcmlhbGl6ZSggcHJvcGVydHlWYWx1ZSApO1xuXHRcdH0gY2F0Y2goIGVycm9yICkge1xuXHRcdFx0Ly8gVE9ETzogV2FybiBvZiBkYXRhIGxvc3Ncblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgZXhwYW5kUG9pbnRlciggcHJvcGVydHlWYWx1ZTphbnksIGdlbmVyYWxTY2hlbWE6T2JqZWN0U2NoZW1hLkRpZ2VzdGVkT2JqZWN0U2NoZW1hLCBkaWdlc3RlZFNjaGVtYTpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEgKTpSREYuTm9kZS5DbGFzcyB7XG5cdFx0bGV0IG5vdFBvaW50ZXI6Ym9vbGVhbiA9IHRydWU7XG5cdFx0bGV0IGlkOnN0cmluZztcblx0XHRpZiggUG9pbnRlci5GYWN0b3J5LmlzKCBwcm9wZXJ0eVZhbHVlICkgKSB7XG5cdFx0XHRub3RQb2ludGVyID0gZmFsc2U7XG5cdFx0XHRwcm9wZXJ0eVZhbHVlID0gcHJvcGVydHlWYWx1ZS5pZDtcblx0XHR9IGVsc2UgaWYoICEgVXRpbHMuaXNTdHJpbmcoIHByb3BlcnR5VmFsdWUgKSApIHtcblx0XHRcdHByb3BlcnR5VmFsdWUgPSBudWxsO1xuXHRcdH1cblxuXHRcdGlkID0gcHJvcGVydHlWYWx1ZTtcblx0XHRpZiggISBpZCApIHtcblx0XHRcdC8vIFRPRE86IFdhcm4gb2YgZGF0YSBsb3NzXG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHRpZCA9IE9iamVjdFNjaGVtYS5EaWdlc3Rlci5yZXNvbHZlUHJlZml4ZWRVUkkoIGlkLCBnZW5lcmFsU2NoZW1hICk7XG5cblx0XHRpZiggZ2VuZXJhbFNjaGVtYS5wcm9wZXJ0aWVzLmhhcyggaWQgKSApIHtcblx0XHRcdGxldCBkZWZpbml0aW9uOk9iamVjdFNjaGVtYS5EaWdlc3RlZFByb3BlcnR5RGVmaW5pdGlvbiA9IGdlbmVyYWxTY2hlbWEucHJvcGVydGllcy5nZXQoIGlkICk7XG5cdFx0XHRpZiggZGVmaW5pdGlvbi51cmkgKSBpZCA9IGRlZmluaXRpb24udXJpLnN0cmluZ1ZhbHVlO1xuXHRcdH1cblxuXHRcdGlmKCBub3RQb2ludGVyICYmICEgISBkaWdlc3RlZFNjaGVtYS52b2NhYiApIGlkID0gT2JqZWN0U2NoZW1hLlV0aWwucmVzb2x2ZVVSSSggaWQsIGdlbmVyYWxTY2hlbWEgKTtcblxuXHRcdHJldHVybiB7IFwiQGlkXCI6IGlkIH07XG5cdH1cblxuXHRwcml2YXRlIGV4cGFuZEFycmF5KCBwcm9wZXJ0eVZhbHVlOmFueSwgZ2VuZXJhbFNjaGVtYTpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEsIGRpZ2VzdGVkU2NoZW1hOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSApOmFueSB7XG5cdFx0bGV0IGxpc3RWYWx1ZXM6QXJyYXk8YW55PiA9IFtdO1xuXHRcdGZvciggbGV0IGxpc3RWYWx1ZSBvZiBwcm9wZXJ0eVZhbHVlICkge1xuXHRcdFx0bGV0IGV4cGFuZGVkVmFsdWU6YW55ID0gdGhpcy5leHBhbmRWYWx1ZSggbGlzdFZhbHVlLCBnZW5lcmFsU2NoZW1hLCBkaWdlc3RlZFNjaGVtYSApO1xuXHRcdFx0aWYoICEgZXhwYW5kZWRWYWx1ZSApIGNvbnRpbnVlO1xuXG5cdFx0XHRsaXN0VmFsdWVzLnB1c2goIGV4cGFuZGVkVmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiggISBsaXN0VmFsdWVzLmxlbmd0aCApIHJldHVybiBudWxsO1xuXG5cdFx0cmV0dXJuIGxpc3RWYWx1ZXM7XG5cdH1cblxuXHRwcml2YXRlIGV4cGFuZFZhbHVlKCBwcm9wZXJ0eVZhbHVlOmFueSwgZ2VuZXJhbFNjaGVtYTpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEsIGRpZ2VzdGVkU2NoZW1hOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSApOmFueSB7XG5cdFx0aWYoIFV0aWxzLmlzQXJyYXkoIHByb3BlcnR5VmFsdWUgKSApIHtcblx0XHRcdC8vIFRPRE86IExpc3RzIG9mIGxpc3RzIGFyZSBub3QgY3VycmVudGx5IHN1cHBvcnRlZCBieSB0aGUgc3BlY1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSBlbHNlIGlmKCBQb2ludGVyLkZhY3RvcnkuaXMoIHByb3BlcnR5VmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmV4cGFuZFBvaW50ZXIoIHByb3BlcnR5VmFsdWUsIGdlbmVyYWxTY2hlbWEsIGRpZ2VzdGVkU2NoZW1hICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB0aGlzLmV4cGFuZExpdGVyYWwoIHByb3BlcnR5VmFsdWUgKTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGV4cGFuZExpdGVyYWwoIGxpdGVyYWxWYWx1ZTphbnkgKTphbnkge1xuXHRcdGxldCBzZXJpYWxpemVkVmFsdWU6c3RyaW5nO1xuXHRcdGxldCBsaXRlcmFsVHlwZTpzdHJpbmc7XG5cdFx0c3dpdGNoKCB0cnVlICkge1xuXHRcdFx0Y2FzZSBVdGlscy5pc0Z1bmN0aW9uKCBsaXRlcmFsVmFsdWUgKTpcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHRjYXNlIFV0aWxzLmlzRGF0ZSggbGl0ZXJhbFZhbHVlICk6XG5cdFx0XHRcdGxpdGVyYWxUeXBlID0gTlMuWFNELkRhdGFUeXBlLmRhdGVUaW1lO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgVXRpbHMuaXNOdW1iZXIoIGxpdGVyYWxWYWx1ZSApOlxuXHRcdFx0XHRsaXRlcmFsVHlwZSA9IE5TLlhTRC5EYXRhVHlwZS5mbG9hdDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFV0aWxzLmlzQm9vbGVhbiggbGl0ZXJhbFZhbHVlICk6XG5cdFx0XHRcdGxpdGVyYWxUeXBlID0gTlMuWFNELkRhdGFUeXBlLmJvb2xlYW47XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBVdGlscy5pc1N0cmluZyggbGl0ZXJhbFZhbHVlICk6XG5cdFx0XHRcdGxpdGVyYWxUeXBlID0gTlMuWFNELkRhdGFUeXBlLnN0cmluZztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHQvLyBUT0RPOiBXYXJuIG9mIGRhdGEgbG9zc1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHRzZXJpYWxpemVkVmFsdWUgPSB0aGlzLmxpdGVyYWxTZXJpYWxpemVycy5nZXQoIGxpdGVyYWxUeXBlICkuc2VyaWFsaXplKCBsaXRlcmFsVmFsdWUgKTtcblxuXHRcdHJldHVybiB7IFwiQHZhbHVlXCI6IHNlcmlhbGl6ZWRWYWx1ZSwgXCJAdHlwZVwiOiBsaXRlcmFsVHlwZSB9O1xuXHR9XG5cblx0cHJpdmF0ZSBjb21wYWN0U2luZ2xlKCBleHBhbmRlZE9iamVjdDphbnksIHRhcmdldE9iamVjdDphbnksIGRpZ2VzdGVkU2NoZW1hOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSwgcG9pbnRlckxpYnJhcnk6UG9pbnRlci5MaWJyYXJ5ICk6dm9pZCB7XG5cdFx0bGV0IHByb3BlcnR5VVJJTmFtZU1hcDpNYXA8c3RyaW5nLCBzdHJpbmc+ID0gdGhpcy5nZXRQcm9wZXJ0eVVSSU5hbWVNYXAoIGRpZ2VzdGVkU2NoZW1hICk7XG5cblx0XHRpZiggISBleHBhbmRlZE9iamVjdFsgXCJAaWRcIiBdICkgdGhyb3cgbmV3IEVycm9ycy5JbGxlZ2FsQXJndW1lbnRFcnJvciggXCJUaGUgZXhwYW5kZWRPYmplY3QgZG9lc24ndCBoYXZlIGFuIEBpZCBkZWZpbmVkLlwiICk7XG5cdFx0dGFyZ2V0T2JqZWN0WyBcImlkXCIgXSA9IGV4cGFuZGVkT2JqZWN0WyBcIkBpZFwiIF07XG5cblx0XHR0YXJnZXRPYmplY3RbIFwidHlwZXNcIiBdID0gISAhIGV4cGFuZGVkT2JqZWN0WyBcIkB0eXBlXCIgXSA/IGV4cGFuZGVkT2JqZWN0WyBcIkB0eXBlXCIgXSA6IFtdO1xuXG5cdFx0VXRpbHMuZm9yRWFjaE93blByb3BlcnR5KCBleHBhbmRlZE9iamVjdCwgKCBwcm9wZXJ0eVVSSTpzdHJpbmcsIHZhbHVlOmFueSApOnZvaWQgPT4ge1xuXHRcdFx0aWYoIHByb3BlcnR5VVJJID09PSBcIkBpZFwiICkgcmV0dXJuO1xuXHRcdFx0aWYoIHByb3BlcnR5VVJJID09PSBcIkB0eXBlXCIgKSByZXR1cm47XG5cblx0XHRcdGxldCBwcm9wZXJ0eU5hbWU6c3RyaW5nID0gcHJvcGVydHlVUkk7XG5cdFx0XHRsZXQgcHJvcGVydHlWYWx1ZXM6QXJyYXk8YW55PiA9IGV4cGFuZGVkT2JqZWN0WyBwcm9wZXJ0eVVSSSBdO1xuXG5cdFx0XHRsZXQgZGVmaW5pdGlvbjpPYmplY3RTY2hlbWEuRGlnZXN0ZWRQcm9wZXJ0eURlZmluaXRpb247XG5cdFx0XHRpZiggcHJvcGVydHlVUklOYW1lTWFwLmhhcyggcHJvcGVydHlVUkkgKSApIHtcblx0XHRcdFx0cHJvcGVydHlOYW1lID0gcHJvcGVydHlVUklOYW1lTWFwLmdldCggcHJvcGVydHlVUkkgKTtcblx0XHRcdFx0ZGVmaW5pdGlvbiA9IGRpZ2VzdGVkU2NoZW1hLnByb3BlcnRpZXMuZ2V0KCBwcm9wZXJ0eU5hbWUgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmKCBkaWdlc3RlZFNjaGVtYS52b2NhYiAhPT0gbnVsbCApIHByb3BlcnR5TmFtZSA9IFJERi5VUkkuVXRpbC5nZXRSZWxhdGl2ZVVSSSggcHJvcGVydHlVUkksIGRpZ2VzdGVkU2NoZW1hLnZvY2FiICk7XG5cdFx0XHRcdGRlZmluaXRpb24gPSBuZXcgT2JqZWN0U2NoZW1hLkRpZ2VzdGVkUHJvcGVydHlEZWZpbml0aW9uKCk7XG5cdFx0XHRcdGRlZmluaXRpb24uY29udGFpbmVyVHlwZSA9IHRoaXMuZ2V0UHJvcGVydHlDb250YWluZXJUeXBlKCBwcm9wZXJ0eVZhbHVlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHR0YXJnZXRPYmplY3RbIHByb3BlcnR5TmFtZSBdID0gdGhpcy5nZXRQcm9wZXJ0eVZhbHVlKCBleHBhbmRlZE9iamVjdCwgcHJvcGVydHlVUkksIGRlZmluaXRpb24sIHBvaW50ZXJMaWJyYXJ5ICk7XG5cdFx0fSApO1xuXG5cdFx0cmV0dXJuIHRhcmdldE9iamVjdDtcblx0fVxuXG5cdHByaXZhdGUgZ2V0UHJvcGVydHlDb250YWluZXJUeXBlKCBwcm9wZXJ0eVZhbHVlczphbnkgKTpPYmplY3RTY2hlbWEuQ29udGFpbmVyVHlwZSB7XG5cdFx0aWYoIHByb3BlcnR5VmFsdWVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGlmKCBSREYuTGlzdC5GYWN0b3J5LmlzKCBwcm9wZXJ0eVZhbHVlc1sgMCBdICkgKSByZXR1cm4gT2JqZWN0U2NoZW1hLkNvbnRhaW5lclR5cGUuTElTVDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIE9iamVjdFNjaGVtYS5Db250YWluZXJUeXBlLlNFVDtcblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHByaXZhdGUgZ2V0UHJvcGVydHlWYWx1ZSggZXhwYW5kZWRPYmplY3Q6YW55LCBwcm9wZXJ0eVVSSTpzdHJpbmcsIHByb3BlcnR5RGVmaW5pdGlvbjpPYmplY3RTY2hlbWEuRGlnZXN0ZWRQcm9wZXJ0eURlZmluaXRpb24sIHBvaW50ZXJMaWJyYXJ5OlBvaW50ZXIuTGlicmFyeSApOmFueSB7XG5cdFx0c3dpdGNoKCBwcm9wZXJ0eURlZmluaXRpb24uY29udGFpbmVyVHlwZSApIHtcblx0XHRcdGNhc2UgbnVsbDpcblx0XHRcdFx0Ly8gUHJvcGVydHkgaXMgbm90IGEgbGlzdFxuXHRcdFx0XHRpZiggcHJvcGVydHlEZWZpbml0aW9uLmxpdGVyYWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFJERi5Ob2RlLlV0aWwuZ2V0UHJvcGVydHlMaXRlcmFsKCBleHBhbmRlZE9iamVjdCwgcHJvcGVydHlVUkksIHByb3BlcnR5RGVmaW5pdGlvbi5saXRlcmFsVHlwZS50b1N0cmluZygpICk7XG5cdFx0XHRcdH0gZWxzZSBpZiggcHJvcGVydHlEZWZpbml0aW9uLmxpdGVyYWwgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdHJldHVybiBSREYuTm9kZS5VdGlsLmdldFByb3BlcnR5UG9pbnRlciggZXhwYW5kZWRPYmplY3QsIHByb3BlcnR5VVJJLCBwb2ludGVyTGlicmFyeSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiBSREYuTm9kZS5VdGlsLmdldFByb3BlcnR5KCBleHBhbmRlZE9iamVjdCwgcHJvcGVydHlVUkksIHBvaW50ZXJMaWJyYXJ5ICk7XG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgT2JqZWN0U2NoZW1hLkNvbnRhaW5lclR5cGUuTElTVDpcblx0XHRcdFx0aWYoIHByb3BlcnR5RGVmaW5pdGlvbi5saXRlcmFsICkge1xuXHRcdFx0XHRcdHJldHVybiBSREYuTm9kZS5VdGlsLmdldFByb3BlcnR5TGl0ZXJhbExpc3QoIGV4cGFuZGVkT2JqZWN0LCBwcm9wZXJ0eVVSSSwgcHJvcGVydHlEZWZpbml0aW9uLmxpdGVyYWxUeXBlLnRvU3RyaW5nKCkgKTtcblx0XHRcdFx0fSBlbHNlIGlmKCBwcm9wZXJ0eURlZmluaXRpb24ubGl0ZXJhbCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFJERi5Ob2RlLlV0aWwuZ2V0UHJvcGVydHlQb2ludGVyTGlzdCggZXhwYW5kZWRPYmplY3QsIHByb3BlcnR5VVJJLCBwb2ludGVyTGlicmFyeSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiBSREYuTm9kZS5VdGlsLmdldFByb3BlcnR5TGlzdCggZXhwYW5kZWRPYmplY3QsIHByb3BlcnR5VVJJLCBwb2ludGVyTGlicmFyeSApO1xuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIE9iamVjdFNjaGVtYS5Db250YWluZXJUeXBlLlNFVDpcblx0XHRcdFx0aWYoIHByb3BlcnR5RGVmaW5pdGlvbi5saXRlcmFsICkge1xuXHRcdFx0XHRcdHJldHVybiBSREYuTm9kZS5VdGlsLmdldFByb3BlcnR5TGl0ZXJhbHMoIGV4cGFuZGVkT2JqZWN0LCBwcm9wZXJ0eVVSSSwgcHJvcGVydHlEZWZpbml0aW9uLmxpdGVyYWxUeXBlLnRvU3RyaW5nKCkgKTtcblx0XHRcdFx0fSBlbHNlIGlmKCBwcm9wZXJ0eURlZmluaXRpb24ubGl0ZXJhbCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFJERi5Ob2RlLlV0aWwuZ2V0UHJvcGVydHlQb2ludGVycyggZXhwYW5kZWRPYmplY3QsIHByb3BlcnR5VVJJLCBwb2ludGVyTGlicmFyeSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiBSREYuTm9kZS5VdGlsLmdldFByb3BlcnRpZXMoIGV4cGFuZGVkT2JqZWN0LCBwcm9wZXJ0eVVSSSwgcG9pbnRlckxpYnJhcnkgKTtcblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBPYmplY3RTY2hlbWEuQ29udGFpbmVyVHlwZS5MQU5HVUFHRTpcblx0XHRcdFx0cmV0dXJuIFJERi5Ob2RlLlV0aWwuZ2V0UHJvcGVydHlMYW5ndWFnZU1hcCggZXhwYW5kZWRPYmplY3QsIHByb3BlcnR5VVJJICk7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIlRoZSBjb250YWluZXJUeXBlIHNwZWNpZmllZCBpcyBub3Qgc3VwcG9ydGVkLlwiICk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBnZXRQcm9wZXJ0eVVSSU5hbWVNYXAoIGRpZ2VzdGVkU2NoZW1hOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSApOk1hcDxzdHJpbmcsIHN0cmluZz4ge1xuXHRcdGxldCBtYXA6TWFwPHN0cmluZywgc3RyaW5nPiA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCk7XG5cdFx0ZGlnZXN0ZWRTY2hlbWEucHJvcGVydGllcy5mb3JFYWNoKCAoIGRlZmluaXRpb246T2JqZWN0U2NoZW1hLkRpZ2VzdGVkUHJvcGVydHlEZWZpbml0aW9uLCBwcm9wZXJ0eU5hbWU6c3RyaW5nICk6dm9pZCA9PiB7XG5cdFx0XHRsZXQgdXJpOnN0cmluZztcblx0XHRcdGlmKCBkZWZpbml0aW9uLnVyaSAhPT0gbnVsbCApIHtcblx0XHRcdFx0dXJpID0gZGVmaW5pdGlvbi51cmkudG9TdHJpbmcoKTtcblx0XHRcdH0gZWxzZSBpZiggZGlnZXN0ZWRTY2hlbWEudm9jYWIgIT09IG51bGwgKSB7XG5cdFx0XHRcdHVyaSA9IGRpZ2VzdGVkU2NoZW1hLnZvY2FiICsgcHJvcGVydHlOYW1lO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9ycy5JbnZhbGlkSlNPTkxEU3ludGF4RXJyb3IoIGBUaGUgY29udGV4dCBkb2Vzbid0IGhhdmUgYSBkZWZhdWx0IHZvY2FidWxhcnkgYW5kIHRoZSBvYmplY3Qgc2NoZW1hIGRvZXMgbm90IGRlZmluZSBhIHByb3BlciBAaWQgZm9yIHRoZSBwcm9wZXJ0eSAnJHsgcHJvcGVydHlOYW1lIH0nYCApO1xuXHRcdFx0fVxuXG5cdFx0XHRtYXAuc2V0KCB1cmksIHByb3BlcnR5TmFtZSApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gbWFwO1xuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xhc3M7XG4iLCJpbXBvcnQgKiBhcyBEb2N1bWVudCBmcm9tIFwiLi9Eb2N1bWVudFwiO1xuaW1wb3J0ICogYXMgRXJyb3JzIGZyb20gXCIuL0Vycm9yc1wiO1xuaW1wb3J0ICogYXMgUG9pbnRlciBmcm9tIFwiLi9Qb2ludGVyXCI7XG5pbXBvcnQgKiBhcyBSREYgZnJvbSBcIi4vUkRGXCI7XG5pbXBvcnQgKiBhcyBSZXNvdXJjZSBmcm9tIFwiLi9SZXNvdXJjZVwiO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vVXRpbHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBDbGFzcyBleHRlbmRzIFJlc291cmNlLkNsYXNzIHtcblx0ZG9jdW1lbnQ6RG9jdW1lbnQuQ2xhc3M7XG59XG5cbmV4cG9ydCBjbGFzcyBGYWN0b3J5IHtcblx0c3RhdGljIGhhc0NsYXNzUHJvcGVydGllcyggcmVzb3VyY2U6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIChcblx0XHRcdFV0aWxzLmhhc1Byb3BlcnR5RGVmaW5lZCggcmVzb3VyY2UsIFwiZG9jdW1lbnRcIiApXG5cdFx0KTtcblx0fVxuXG5cdHN0YXRpYyBjcmVhdGUoIGlkOnN0cmluZywgZG9jdW1lbnQ6RG9jdW1lbnQuQ2xhc3MgKTpDbGFzcztcblx0c3RhdGljIGNyZWF0ZSggZG9jdW1lbnQ6RG9jdW1lbnQuQ2xhc3MgKTpDbGFzcztcblx0c3RhdGljIGNyZWF0ZSggaWRPckRvY3VtZW50OmFueSwgZG9jdW1lbnQ/OkRvY3VtZW50LkNsYXNzICk6Q2xhc3Mge1xuXHRcdHJldHVybiB0aGlzLmNyZWF0ZUZyb20oIHt9LCBpZE9yRG9jdW1lbnQsIGRvY3VtZW50ICk7XG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlRnJvbTxUIGV4dGVuZHMgT2JqZWN0Piggb2JqZWN0OlQsIGlkOnN0cmluZywgZG9jdW1lbnQ6RG9jdW1lbnQuQ2xhc3MgKTpUICYgQ2xhc3M7XG5cdHN0YXRpYyBjcmVhdGVGcm9tPFQgZXh0ZW5kcyBPYmplY3Q+KCBvYmplY3Q6VCwgZG9jdW1lbnQ6RG9jdW1lbnQuQ2xhc3MgKTpUICYgQ2xhc3M7XG5cdHN0YXRpYyBjcmVhdGVGcm9tPFQgZXh0ZW5kcyBPYmplY3Q+KCBvYmplY3Q6VCwgaWRPckRvY3VtZW50OmFueSwgZG9jdW1lbnQ6RG9jdW1lbnQuQ2xhc3MgPSBudWxsICk6VCAmIENsYXNzIHtcblx0XHRsZXQgaWQ6c3RyaW5nID0gISAhIGlkT3JEb2N1bWVudCAmJiBVdGlscy5pc1N0cmluZyggaWRPckRvY3VtZW50ICkgPyBpZE9yRG9jdW1lbnQgOiBcIlwiO1xuXHRcdGRvY3VtZW50ID0gZG9jdW1lbnQgfHwgaWRPckRvY3VtZW50O1xuXG5cdFx0bGV0IHJlc291cmNlOlJlc291cmNlLkNsYXNzID0gUmVzb3VyY2UuRmFjdG9yeS5jcmVhdGVGcm9tKCBvYmplY3QsIGlkICk7XG5cblx0XHRpZiggRmFjdG9yeS5oYXNDbGFzc1Byb3BlcnRpZXMoIHJlc291cmNlICkgKSByZXR1cm4gPGFueT4gcmVzb3VyY2U7XG5cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyggcmVzb3VyY2UsIHtcblx0XHRcdFwiZG9jdW1lbnRcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogZmFsc2UsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBkb2N1bWVudCxcblx0XHRcdH0sXG5cdFx0fSApO1xuXG5cdFx0cmV0dXJuIDxhbnk+IHJlc291cmNlO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0ICogYXMgRG9jdW1lbnQgZnJvbSBcIi4vRG9jdW1lbnRcIjtcbmltcG9ydCAqIGFzIEZyYWdtZW50IGZyb20gXCIuL0ZyYWdtZW50XCI7XG5pbXBvcnQgKiBhcyBSREYgZnJvbSBcIi4vUkRGXCI7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi9VdGlsc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIENsYXNzIGV4dGVuZHMgRnJhZ21lbnQuQ2xhc3Mge1xuXHRzbHVnOnN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIEZhY3Rvcnkge1xuXHRzdGF0aWMgaGFzQ2xhc3NQcm9wZXJ0aWVzKCByZXNvdXJjZTpGcmFnbWVudC5DbGFzcyApOmJvb2xlYW4ge1xuXHRcdHJldHVybiAoXG5cdFx0XHRVdGlscy5oYXNQcm9wZXJ0eURlZmluZWQoIHJlc291cmNlLCBcInNsdWdcIiApXG5cdFx0KTtcblx0fVxuXG5cdHN0YXRpYyBjcmVhdGUoIHNsdWc6c3RyaW5nLCBkb2N1bWVudDpEb2N1bWVudC5DbGFzcyApOkNsYXNzIHtcblx0XHRyZXR1cm4gdGhpcy5jcmVhdGVGcm9tKCB7fSwgc2x1ZywgZG9jdW1lbnQgKTtcblx0fVxuXG5cdHN0YXRpYyBjcmVhdGVGcm9tPFQgZXh0ZW5kcyBPYmplY3Q+KCBvYmplY3Q6VCwgc2x1ZzpzdHJpbmcsIGRvY3VtZW50OkRvY3VtZW50LkNsYXNzICk6VCAmIENsYXNzIHtcblx0XHRsZXQgdXJpOnN0cmluZyA9IGRvY3VtZW50LmlkICsgXCIjXCIgKyBzbHVnO1xuXG5cdFx0bGV0IGZyYWdtZW50OkZyYWdtZW50LkNsYXNzID0gRnJhZ21lbnQuRmFjdG9yeS5jcmVhdGVGcm9tKCBvYmplY3QsIHVyaSwgZG9jdW1lbnQgKTtcblxuXHRcdGlmKCB0aGlzLmhhc0NsYXNzUHJvcGVydGllcyggZnJhZ21lbnQgKSApIHJldHVybiA8YW55PiBmcmFnbWVudDtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBmcmFnbWVudCwge1xuXHRcdFx0XCJzbHVnXCI6IHtcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0Z2V0OiBmdW5jdGlvbigpOnN0cmluZyB7XG5cdFx0XHRcdFx0cmV0dXJuIFJERi5VUkkuVXRpbC5nZXRGcmFnbWVudCggZnJhZ21lbnQuaWQgKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWU6c3RyaW5nICk6dm9pZCB7XG5cdFx0XHRcdFx0dGhpcy5pZCA9IHRoaXMuZG9jdW1lbnQuaWQgKyBcIiNcIiArIHZhbHVlO1xuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHR9ICk7XG5cblx0XHRyZXR1cm4gPGFueT5mcmFnbWVudDtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCAqIGFzIFBvaW50ZXIgZnJvbSBcIi4vUG9pbnRlclwiO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vVXRpbHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBDbGFzcyBleHRlbmRzIFBvaW50ZXIuQ2xhc3Mge1xuXHR0eXBlczpzdHJpbmdbXTtcblxuXHRhZGRUeXBlKCB0eXBlOnN0cmluZyApOnZvaWQ7XG5cdGhhc1R5cGUoIHR5cGU6c3RyaW5nICk6Ym9vbGVhbjtcblx0cmVtb3ZlVHlwZSggdHlwZTpzdHJpbmcgKTp2b2lkO1xufVxuXG5mdW5jdGlvbiBhZGRUeXBlKCB0eXBlOnN0cmluZyApOnZvaWQge1xuXHR0aGlzLnR5cGVzLnB1c2goIHR5cGUgKTtcbn1cbmZ1bmN0aW9uIGhhc1R5cGUoIHR5cGU6c3RyaW5nICk6Ym9vbGVhbiB7XG5cdHJldHVybiB0aGlzLnR5cGVzLmluZGV4T2YoIHR5cGUgKSAhPT0gLSAxO1xufVxuZnVuY3Rpb24gcmVtb3ZlVHlwZSggdHlwZTpzdHJpbmcgKTp2b2lkIHtcblx0bGV0IGluZGV4Om51bWJlciA9IHRoaXMudHlwZXMuaW5kZXhPZiggdHlwZSApO1xuXHRpZiggaW5kZXggIT09IC0gMSApIHRoaXMudHlwZXMuc3BsaWNlKCBpbmRleCwgMSApO1xufVxuXG5leHBvcnQgY2xhc3MgRmFjdG9yeSB7XG5cdHN0YXRpYyBoYXNDbGFzc1Byb3BlcnRpZXMoIG9iamVjdDpPYmplY3QgKTpib29sZWFuIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0VXRpbHMuaGFzUHJvcGVydHlEZWZpbmVkKCBvYmplY3QsIFwidHlwZXNcIiApXG5cblx0XHRcdCYmIFV0aWxzLmhhc0Z1bmN0aW9uKCBvYmplY3QsIFwiYWRkVHlwZVwiIClcblx0XHRcdCYmIFV0aWxzLmhhc0Z1bmN0aW9uKCBvYmplY3QsIFwiaGFzVHlwZVwiIClcblx0XHRcdCYmIFV0aWxzLmhhc0Z1bmN0aW9uKCBvYmplY3QsIFwicmVtb3ZlVHlwZVwiIClcblx0XHQpO1xuXHR9XG5cblx0c3RhdGljIGlzKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIFBvaW50ZXIuRmFjdG9yeS5pcyggb2JqZWN0IClcblx0XHRcdCYmIEZhY3RvcnkuaGFzQ2xhc3NQcm9wZXJ0aWVzKCBvYmplY3QgKTtcblx0fVxuXG5cdHN0YXRpYyBjcmVhdGUoIGlkOnN0cmluZyA9IG51bGwsIHR5cGVzOnN0cmluZ1tdID0gbnVsbCApOkNsYXNzIHtcblx0XHRyZXR1cm4gRmFjdG9yeS5jcmVhdGVGcm9tKCB7fSwgaWQsIHR5cGVzICk7XG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlRnJvbTxUIGV4dGVuZHMgT2JqZWN0Piggb2JqZWN0OlQsIGlkOnN0cmluZyA9IG51bGwsIHR5cGVzOnN0cmluZ1tdID0gbnVsbCApOlQgJiBDbGFzcyB7XG5cdFx0aWQgPSAhICEgaWQgPyBpZCA6ICggKDxhbnk+IG9iamVjdCkuaWQgfHwgXCJcIiApO1xuXHRcdHR5cGVzID0gISAhIHR5cGVzID8gdHlwZXMgOiAoICg8YW55PiBvYmplY3QpLnR5cGVzIHx8IFtdICk7XG5cblx0XHRsZXQgcmVzb3VyY2U6Q2xhc3MgPSBGYWN0b3J5LmRlY29yYXRlKCBvYmplY3QgKTtcblx0XHRyZXNvdXJjZS5pZCA9IGlkO1xuXHRcdHJlc291cmNlLnR5cGVzID0gdHlwZXM7XG5cblx0XHRyZXR1cm4gPGFueT4gcmVzb3VyY2U7XG5cdH1cblxuXHRzdGF0aWMgZGVjb3JhdGU8VCBleHRlbmRzIE9iamVjdD4oIG9iamVjdDpUICk6VCAmIENsYXNzIHtcblx0XHRQb2ludGVyLkZhY3RvcnkuZGVjb3JhdGU8VD4oIG9iamVjdCApO1xuXG5cdFx0aWYoIEZhY3RvcnkuaGFzQ2xhc3NQcm9wZXJ0aWVzKCBvYmplY3QgKSApIHJldHVybiA8YW55PiBvYmplY3Q7XG5cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyggb2JqZWN0LCB7XG5cdFx0XHRcInR5cGVzXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBbXSxcblx0XHRcdH0sXG5cblx0XHRcdFwiYWRkVHlwZVwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogYWRkVHlwZSxcblx0XHRcdH0sXG5cdFx0XHRcImhhc1R5cGVcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IGhhc1R5cGUsXG5cdFx0XHR9LFxuXHRcdFx0XCJyZW1vdmVUeXBlXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiByZW1vdmVUeXBlLFxuXHRcdFx0fSxcblx0XHR9ICk7XG5cblx0XHRyZXR1cm4gPGFueT4gb2JqZWN0O1xuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBVdGlsIHtcblxuXHRzdGF0aWMgaGFzVHlwZSggcmVzb3VyY2U6T2JqZWN0LCB0eXBlOnN0cmluZyApOmJvb2xlYW4ge1xuXHRcdHJldHVybiBVdGlsLmdldFR5cGVzKCByZXNvdXJjZSApLmluZGV4T2YoIHR5cGUgKSAhPT0gLSAxO1xuXHR9XG5cblx0c3RhdGljIGdldFR5cGVzKCByZXNvdXJjZTpPYmplY3QgKTpzdHJpbmdbXSB7XG5cdFx0cmV0dXJuICggPENsYXNzPiByZXNvdXJjZSkudHlwZXMgfHwgW107XG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCAqIGFzIEJsYW5rTm9kZSBmcm9tIFwiLi9CbGFua05vZGVcIjtcbmltcG9ydCAqIGFzIEVycm9ycyBmcm9tIFwiLi9FcnJvcnNcIjtcbmltcG9ydCAqIGFzIEZyYWdtZW50IGZyb20gXCIuL0ZyYWdtZW50XCI7XG5pbXBvcnQgSlNPTkxEQ29udmVydGVyIGZyb20gXCIuL0pTT05MRC9Db252ZXJ0ZXJcIjtcbmltcG9ydCAqIGFzIE5hbWVkRnJhZ21lbnQgZnJvbSBcIi4vTmFtZWRGcmFnbWVudFwiO1xuaW1wb3J0ICogYXMgTlMgZnJvbSBcIi4vTlNcIjtcbmltcG9ydCAqIGFzIE9iamVjdFNjaGVtYSBmcm9tIFwiLi9PYmplY3RTY2hlbWFcIjtcbmltcG9ydCAqIGFzIFBvaW50ZXIgZnJvbSBcIi4vUG9pbnRlclwiO1xuaW1wb3J0ICogYXMgUkRGIGZyb20gXCIuL1JERlwiO1xuaW1wb3J0ICogYXMgUmVzb3VyY2UgZnJvbSBcIi4vUmVzb3VyY2VcIjtcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuL1V0aWxzXCI7XG5cbmV4cG9ydCBjb25zdCBSREZfQ0xBU1M6c3RyaW5nID0gTlMuQy5DbGFzcy5Eb2N1bWVudDtcblxuZXhwb3J0IGNvbnN0IFNDSEVNQTpPYmplY3RTY2hlbWEuQ2xhc3MgPSB7XG5cdFwiY29udGFpbnNcIjoge1xuXHRcdFwiQGlkXCI6IE5TLkxEUC5QcmVkaWNhdGUuY29udGFpbnMsXG5cdFx0XCJAY29udGFpbmVyXCI6IFwiQHNldFwiLFxuXHRcdFwiQHR5cGVcIjogXCJAaWRcIixcblx0fSxcblx0XCJtZW1iZXJzXCI6IHtcblx0XHRcIkBpZFwiOiBOUy5MRFAuUHJlZGljYXRlLm1lbWJlcixcblx0XHRcIkBjb250YWluZXJcIjogXCJAc2V0XCIsXG5cdFx0XCJAdHlwZVwiOiBcIkBpZFwiLFxuXHR9LFxuXHRcIm1lbWJlcnNoaXBSZXNvdXJjZVwiOiB7XG5cdFx0XCJAaWRcIjogTlMuTERQLlByZWRpY2F0ZS5tZW1iZXJzaGlwUmVzb3VyY2UsXG5cdFx0XCJAdHlwZVwiOiBcIkBpZFwiLFxuXHR9LFxuXHRcImlzTWVtYmVyT2ZSZWxhdGlvblwiOiB7XG5cdFx0XCJAaWRcIjogTlMuTERQLlByZWRpY2F0ZS5pc01lbWJlck9mUmVsYXRpb24sXG5cdFx0XCJAdHlwZVwiOiBcIkBpZFwiLFxuXHR9LFxuXHRcImhhc01lbWJlclJlbGF0aW9uXCI6IHtcblx0XHRcIkBpZFwiOiBOUy5MRFAuUHJlZGljYXRlLmhhc01lbWJlclJlbGF0aW9uLFxuXHRcdFwiQHR5cGVcIjogXCJAaWRcIixcblx0fSxcblx0XCJpbnNlcnRlZENvbnRlbnRSZWxhdGlvblwiOiB7XG5cdFx0XCJAaWRcIjogTlMuTERQLlByZWRpY2F0ZS5pbnNlcnRlZENvbnRlbnRSZWxhdGlvbixcblx0XHRcIkB0eXBlXCI6IFwiQGlkXCIsXG5cdH0sXG5cdFwiY3JlYXRlZFwiOiB7XG5cdFx0XCJAaWRcIjogTlMuQy5QcmVkaWNhdGUuY3JlYXRlZCxcblx0XHRcIkB0eXBlXCI6IE5TLlhTRC5EYXRhVHlwZS5kYXRlVGltZSxcblx0fSxcblx0XCJtb2RpZmllZFwiOiB7XG5cdFx0XCJAaWRcIjogTlMuQy5QcmVkaWNhdGUubW9kaWZpZWQsXG5cdFx0XCJAdHlwZVwiOiBOUy5YU0QuRGF0YVR5cGUuZGF0ZVRpbWUsXG5cdH0sXG5cdFwiZGVmYXVsdEludGVyYWN0aW9uTW9kZWxcIjoge1xuXHRcdFwiQGlkXCI6IE5TLkMuUHJlZGljYXRlLmRlZmF1bHRJbnRlcmFjdGlvbk1vZGVsLFxuXHRcdFwiQHR5cGVcIjogXCJAaWRcIixcblx0fSxcblx0XCJhY2Nlc3NQb2ludHNcIjoge1xuXHRcdFwiQGlkXCI6IE5TLkMuUHJlZGljYXRlLmFjY2Vzc1BvaW50LFxuXHRcdFwiQHR5cGVcIjogXCJAaWRcIixcblx0XHRcIkBjb250YWluZXJcIjogXCJAc2V0XCIsXG5cdH0sXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIENsYXNzIGV4dGVuZHMgUmVzb3VyY2UuQ2xhc3MsIFBvaW50ZXIuTGlicmFyeSwgUG9pbnRlci5WYWxpZGF0b3Ige1xuXHRkZWZhdWx0SW50ZXJhY3Rpb25Nb2RlbD86UG9pbnRlci5DbGFzcztcblx0aXNNZW1iZXJPZlJlbGF0aW9uPzpQb2ludGVyLkNsYXNzO1xuXHRoYXNNZW1iZXJSZWxhdGlvbj86UG9pbnRlci5DbGFzcztcblxuXHRfZnJhZ21lbnRzSW5kZXg6TWFwPHN0cmluZywgRnJhZ21lbnQuQ2xhc3M+O1xuXG5cdF9ub3JtYWxpemUoKTp2b2lkO1xuXG5cdF9yZW1vdmVGcmFnbWVudCggZnJhZ21lbnQ6RnJhZ21lbnQuQ2xhc3MgKTp2b2lkO1xuXHRfcmVtb3ZlRnJhZ21lbnQoIHNsdWc6c3RyaW5nICk6dm9pZDtcblxuXHRoYXNGcmFnbWVudCggc2x1ZzpzdHJpbmcgKTpib29sZWFuO1xuXHRnZXRGcmFnbWVudDxUPiggc2x1ZzpzdHJpbmcgKTpUICYgRnJhZ21lbnQuQ2xhc3M7XG5cdGdldE5hbWVkRnJhZ21lbnQ8VD4oIHNsdWc6c3RyaW5nICk6VCAmIE5hbWVkRnJhZ21lbnQuQ2xhc3M7XG5cdGdldEZyYWdtZW50cygpOkZyYWdtZW50LkNsYXNzW107XG5cblx0Y3JlYXRlRnJhZ21lbnQ8VCBleHRlbmRzIE9iamVjdD4oIG9iamVjdDpULCBzbHVnOnN0cmluZyApOlQgJiBGcmFnbWVudC5DbGFzcztcblx0Y3JlYXRlRnJhZ21lbnQ8VCBleHRlbmRzIE9iamVjdD4oIG9iamVjdDpUICk6VCAmIEZyYWdtZW50LkNsYXNzO1xuXHRjcmVhdGVGcmFnbWVudCggc2x1ZzpzdHJpbmcgKTpGcmFnbWVudC5DbGFzcztcblx0Y3JlYXRlRnJhZ21lbnQoKTpGcmFnbWVudC5DbGFzcztcblxuXHRjcmVhdGVOYW1lZEZyYWdtZW50PFQgZXh0ZW5kcyBPYmplY3Q+KCBvYmplY3Q6VCwgc2x1ZzpzdHJpbmcgKTpUICYgTmFtZWRGcmFnbWVudC5DbGFzcztcblx0Y3JlYXRlTmFtZWRGcmFnbWVudCggc2x1ZzpzdHJpbmcgKTpOYW1lZEZyYWdtZW50LkNsYXNzO1xuXG5cdHJlbW92ZU5hbWVkRnJhZ21lbnQoIGZyYWdtZW50Ok5hbWVkRnJhZ21lbnQuQ2xhc3MgKTp2b2lkO1xuXHRyZW1vdmVOYW1lZEZyYWdtZW50KCBzbHVnOnN0cmluZyApOnZvaWQ7XG5cblx0dG9KU09OKCBvYmplY3RTY2hlbWFSZXNvbHZlcjpPYmplY3RTY2hlbWEuUmVzb2x2ZXIsIGpzb25sZENvbnZlcnRlcjpKU09OTERDb252ZXJ0ZXIgKTpzdHJpbmc7XG5cdHRvSlNPTiggb2JqZWN0U2NoZW1hUmVzb2x2ZXI6T2JqZWN0U2NoZW1hLlJlc29sdmVyICk6c3RyaW5nO1xuXHR0b0pTT04oKTpzdHJpbmc7XG59XG5cbmZ1bmN0aW9uIGhhc1BvaW50ZXIoIGlkOnN0cmluZyApOmJvb2xlYW4ge1xuXHRsZXQgZG9jdW1lbnQ6Q2xhc3MgPSA8Q2xhc3M+IHRoaXM7XG5cblx0aWYoIGlkID09PSBkb2N1bWVudC5pZCApIHJldHVybiB0cnVlO1xuXG5cdGlmKCAhIGRvY3VtZW50LmluU2NvcGUoIGlkICkgKSByZXR1cm4gZmFsc2U7XG5cblx0cmV0dXJuIGRvY3VtZW50Lmhhc0ZyYWdtZW50KCBpZCApO1xufVxuXG5mdW5jdGlvbiBnZXRQb2ludGVyKCBpZDpzdHJpbmcgKTpQb2ludGVyLkNsYXNzIHtcblx0bGV0IGRvY3VtZW50OkNsYXNzID0gPENsYXNzPiB0aGlzO1xuXG5cdGlmKCAhIGRvY3VtZW50LmluU2NvcGUoIGlkICkgKSByZXR1cm4gbnVsbDtcblxuXHRpZiggaWQgPT09IGRvY3VtZW50LmlkICkgcmV0dXJuIGRvY3VtZW50O1xuXG5cdGxldCBmcmFnbWVudDpGcmFnbWVudC5DbGFzcyA9IGRvY3VtZW50LmdldEZyYWdtZW50KCBpZCApO1xuXHRmcmFnbWVudCA9ICEgZnJhZ21lbnQgPyBkb2N1bWVudC5jcmVhdGVGcmFnbWVudCggaWQgKSA6IGZyYWdtZW50O1xuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuZnVuY3Rpb24gaW5TY29wZSggcG9pbnRlcjpQb2ludGVyLkNsYXNzICk6Ym9vbGVhbjtcbmZ1bmN0aW9uIGluU2NvcGUoIGlkOnN0cmluZyApOmJvb2xlYW47XG5mdW5jdGlvbiBpblNjb3BlKCBpZE9yUG9pbnRlcjphbnkgKTpib29sZWFuIHtcblx0bGV0IGRvY3VtZW50OkNsYXNzID0gPENsYXNzPiB0aGlzO1xuXG5cdGxldCBpZDpzdHJpbmcgPSBQb2ludGVyLkZhY3RvcnkuaXMoIGlkT3JQb2ludGVyICkgPyBpZE9yUG9pbnRlci5pZCA6IGlkT3JQb2ludGVyO1xuXG5cdGlmKCBpZCA9PT0gZG9jdW1lbnQuaWQgKSByZXR1cm4gdHJ1ZTtcblxuXHRpZiggUkRGLlVSSS5VdGlsLmlzQk5vZGVJRCggaWQgKSApIHJldHVybiB0cnVlO1xuXG5cdGlmKCBSREYuVVJJLlV0aWwuaXNGcmFnbWVudE9mKCBpZCwgZG9jdW1lbnQuaWQgKSApIHJldHVybiB0cnVlO1xuXG5cdHJldHVybiBSREYuVVJJLlV0aWwuaXNGcmFnbWVudE9mKCBpZCwgXCJcIiApO1xufVxuXG5mdW5jdGlvbiBoYXNGcmFnbWVudCggaWQ6c3RyaW5nICk6Ym9vbGVhbiB7XG5cdGxldCBkb2N1bWVudDpDbGFzcyA9IDxDbGFzcz4gdGhpcztcblxuXHRpZiggUkRGLlVSSS5VdGlsLmlzQWJzb2x1dGUoIGlkICkgKSB7XG5cdFx0aWYoICEgUkRGLlVSSS5VdGlsLmlzRnJhZ21lbnRPZiggaWQsIGRvY3VtZW50LmlkICkgKSByZXR1cm4gZmFsc2U7XG5cdFx0aWQgPSBSREYuVVJJLlV0aWwuaGFzRnJhZ21lbnQoIGlkICkgPyBSREYuVVJJLlV0aWwuZ2V0RnJhZ21lbnQoIGlkICkgOiBpZDtcblx0fSBlbHNlIGlmKCBVdGlscy5TLnN0YXJ0c1dpdGgoIGlkLCBcIiNcIiApICkgaWQgPSBpZC5zdWJzdHJpbmcoIDEgKTtcblxuXHRyZXR1cm4gZG9jdW1lbnQuX2ZyYWdtZW50c0luZGV4LmhhcyggaWQgKTtcbn1cbmZ1bmN0aW9uIGdldEZyYWdtZW50KCBpZDpzdHJpbmcgKTpGcmFnbWVudC5DbGFzcyB7XG5cdGxldCBkb2N1bWVudDpDbGFzcyA9IDxDbGFzcz4gdGhpcztcblxuXHRpZiggISBSREYuVVJJLlV0aWwuaXNCTm9kZUlEKCBpZCApICkgcmV0dXJuIGRvY3VtZW50LmdldE5hbWVkRnJhZ21lbnQoIGlkICk7XG5cblx0cmV0dXJuIGRvY3VtZW50Ll9mcmFnbWVudHNJbmRleC5nZXQoIGlkICkgfHwgbnVsbDtcbn1cbmZ1bmN0aW9uIGdldE5hbWVkRnJhZ21lbnQoIGlkOnN0cmluZyApOk5hbWVkRnJhZ21lbnQuQ2xhc3Mge1xuXHRsZXQgZG9jdW1lbnQ6Q2xhc3MgPSA8Q2xhc3M+IHRoaXM7XG5cblx0aWYoIFJERi5VUkkuVXRpbC5pc0JOb2RlSUQoIGlkICkgKSB0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIk5hbWVkIGZyYWdtZW50cyBjYW4ndCBoYXZlIGEgaWQgdGhhdCBzdGFydHMgd2l0aCAnXzonLlwiICk7XG5cdGlmKCBSREYuVVJJLlV0aWwuaXNBYnNvbHV0ZSggaWQgKSApIHtcblx0XHRpZiggISBSREYuVVJJLlV0aWwuaXNGcmFnbWVudE9mKCBpZCwgZG9jdW1lbnQuaWQgKSApIHRocm93IG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiVGhlIGlkIGlzIG91dCBvZiBzY29wZS5cIiApO1xuXHRcdGlkID0gUkRGLlVSSS5VdGlsLmhhc0ZyYWdtZW50KCBpZCApID8gUkRGLlVSSS5VdGlsLmdldEZyYWdtZW50KCBpZCApIDogaWQ7XG5cdH0gZWxzZSBpZiggVXRpbHMuUy5zdGFydHNXaXRoKCBpZCwgXCIjXCIgKSApIGlkID0gaWQuc3Vic3RyaW5nKCAxICk7XG5cblx0cmV0dXJuIDxOYW1lZEZyYWdtZW50LkNsYXNzPiBkb2N1bWVudC5fZnJhZ21lbnRzSW5kZXguZ2V0KCBpZCApIHx8IG51bGw7XG59XG5mdW5jdGlvbiBnZXRGcmFnbWVudHMoKTpGcmFnbWVudC5DbGFzc1tdIHtcblx0bGV0IGRvY3VtZW50OkNsYXNzID0gPENsYXNzPiB0aGlzO1xuXHRyZXR1cm4gVXRpbHMuQS5mcm9tKCBkb2N1bWVudC5fZnJhZ21lbnRzSW5kZXgudmFsdWVzKCkgKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRnJhZ21lbnQ8VCBleHRlbmRzIE9iamVjdD4oIG9iamVjdDpULCBzbHVnOnN0cmluZyApOlQgJiBGcmFnbWVudC5DbGFzcztcbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50PFQgZXh0ZW5kcyBPYmplY3Q+KCBvYmplY3Q6VCApOlQgJiBGcmFnbWVudC5DbGFzcztcbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50KCBzbHVnOnN0cmluZyApOkZyYWdtZW50LkNsYXNzO1xuZnVuY3Rpb24gY3JlYXRlRnJhZ21lbnQoKTpGcmFnbWVudC5DbGFzcztcbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50PFQgZXh0ZW5kcyBPYmplY3Q+KCBzbHVnT3JPYmplY3Q/OmFueSwgc2x1Zz86c3RyaW5nICk6VCAmIEZyYWdtZW50LkNsYXNzIHtcblx0bGV0IGRvY3VtZW50OkNsYXNzID0gPENsYXNzPiB0aGlzO1xuXHRzbHVnID0gVXRpbHMuaXNTdHJpbmcoIHNsdWdPck9iamVjdCApID8gc2x1Z09yT2JqZWN0IDogc2x1Zztcblx0bGV0IG9iamVjdDpUID0gISBVdGlscy5pc1N0cmluZyggc2x1Z09yT2JqZWN0ICkgJiYgISAhIHNsdWdPck9iamVjdCA/IHNsdWdPck9iamVjdCA6IDxUPiB7fTtcblxuXHRpZiggc2x1ZyApIHtcblx0XHRpZiggISBSREYuVVJJLlV0aWwuaXNCTm9kZUlEKCBzbHVnICkgKSByZXR1cm4gZG9jdW1lbnQuY3JlYXRlTmFtZWRGcmFnbWVudDxUPiggb2JqZWN0LCBzbHVnICk7XG5cdFx0aWYoIHRoaXMuX2ZyYWdtZW50c0luZGV4Lmhhcyggc2x1ZyApICkgdGhyb3cgbmV3IEVycm9ycy5JREFscmVhZHlJblVzZUVycm9yKCBcIlRoZSBzbHVnIHByb3ZpZGVkIGlzIGFscmVhZHkgYmVpbmcgdXNlZCBieSBhIGZyYWdtZW50LlwiICk7XG5cdH1cblxuXHRsZXQgZnJhZ21lbnQ6IFQgJiBCbGFua05vZGUuQ2xhc3MgPSBCbGFua05vZGUuRmFjdG9yeS5jcmVhdGVGcm9tPFQ+KCBvYmplY3QsIHNsdWcsIGRvY3VtZW50ICk7XG5cdGRvY3VtZW50Ll9mcmFnbWVudHNJbmRleC5zZXQoIGZyYWdtZW50LmlkLCBmcmFnbWVudCApO1xuXG5cdGNvbnZlcnROZXN0ZWRPYmplY3RzKCBkb2N1bWVudCwgZnJhZ21lbnQgKTtcblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVOYW1lZEZyYWdtZW50PFQgZXh0ZW5kcyBPYmplY3Q+KCBvYmplY3Q6VCwgc2x1ZzpzdHJpbmcgKTpOYW1lZEZyYWdtZW50LkNsYXNzICYgVDtcbmZ1bmN0aW9uIGNyZWF0ZU5hbWVkRnJhZ21lbnQoIHNsdWc6c3RyaW5nICk6TmFtZWRGcmFnbWVudC5DbGFzcztcbmZ1bmN0aW9uIGNyZWF0ZU5hbWVkRnJhZ21lbnQ8VCBleHRlbmRzIE9iamVjdD4oIHNsdWdPck9iamVjdDphbnksIHNsdWc/OnN0cmluZyApOlQgJiBOYW1lZEZyYWdtZW50LkNsYXNzIHtcblx0bGV0IGRvY3VtZW50OkNsYXNzID0gPENsYXNzPiB0aGlzO1xuXHRzbHVnID0gVXRpbHMuaXNTdHJpbmcoIHNsdWdPck9iamVjdCApID8gc2x1Z09yT2JqZWN0IDogc2x1Zztcblx0bGV0IG9iamVjdDpUID0gISBVdGlscy5pc1N0cmluZyggc2x1Z09yT2JqZWN0ICkgJiYgISAhIHNsdWdPck9iamVjdCA/IHNsdWdPck9iamVjdCA6IDxUPiB7fTtcblxuXHRpZiggUkRGLlVSSS5VdGlsLmlzQk5vZGVJRCggc2x1ZyApICkgdGhyb3cgbmV3IEVycm9ycy5JbGxlZ2FsQXJndW1lbnRFcnJvciggXCJOYW1lZCBmcmFnbWVudHMgY2FuJ3QgaGF2ZSBhIHNsdWcgdGhhdCBzdGFydHMgd2l0aCAnXzonLlwiICk7XG5cblx0aWYoIFJERi5VUkkuVXRpbC5pc0Fic29sdXRlKCBzbHVnICkgKSB7XG5cdFx0aWYoICEgUkRGLlVSSS5VdGlsLmlzRnJhZ21lbnRPZiggc2x1ZywgZG9jdW1lbnQuaWQgKSApIHRocm93IG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiVGhlIHNsdWcgaXMgb3V0IG9mIHNjb3BlLlwiICk7XG5cdFx0c2x1ZyA9IFJERi5VUkkuVXRpbC5oYXNGcmFnbWVudCggc2x1ZyApID8gUkRGLlVSSS5VdGlsLmdldEZyYWdtZW50KCBzbHVnICkgOiBzbHVnO1xuXHR9IGVsc2UgaWYoIFV0aWxzLlMuc3RhcnRzV2l0aCggc2x1ZywgXCIjXCIgKSApIHNsdWcgPSBzbHVnLnN1YnN0cmluZyggMSApO1xuXG5cdGlmKCBkb2N1bWVudC5fZnJhZ21lbnRzSW5kZXguaGFzKCBzbHVnICkgKSB0aHJvdyBuZXcgRXJyb3JzLklEQWxyZWFkeUluVXNlRXJyb3IoIFwiVGhlIHNsdWcgcHJvdmlkZWQgaXMgYWxyZWFkeSBiZWluZyB1c2VkIGJ5IGEgZnJhZ21lbnQuXCIgKTtcblxuXHRsZXQgZnJhZ21lbnQ6VCAmIE5hbWVkRnJhZ21lbnQuQ2xhc3MgPSBOYW1lZEZyYWdtZW50LkZhY3RvcnkuY3JlYXRlRnJvbTxUPiggb2JqZWN0LCBzbHVnLCBkb2N1bWVudCApO1xuXHRkb2N1bWVudC5fZnJhZ21lbnRzSW5kZXguc2V0KCBzbHVnLCBmcmFnbWVudCApO1xuXG5cdGNvbnZlcnROZXN0ZWRPYmplY3RzKCBkb2N1bWVudCwgZnJhZ21lbnQgKTtcblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5mdW5jdGlvbiByZW1vdmVGcmFnbWVudCggZnJhZ21lbnQ6RnJhZ21lbnQuQ2xhc3MgKTp2b2lkO1xuZnVuY3Rpb24gcmVtb3ZlRnJhZ21lbnQoIHNsdWc6c3RyaW5nICk6dm9pZDtcbmZ1bmN0aW9uIHJlbW92ZUZyYWdtZW50KCBmcmFnbWVudE9yU2x1ZzphbnkgKTp2b2lkIHtcblx0bGV0IGRvY3VtZW50OkNsYXNzID0gPENsYXNzPiB0aGlzO1xuXG5cdGxldCBpZDpzdHJpbmcgPSBVdGlscy5pc1N0cmluZyggZnJhZ21lbnRPclNsdWcgKSA/IGZyYWdtZW50T3JTbHVnIDogPEZyYWdtZW50LkNsYXNzPiBmcmFnbWVudE9yU2x1Zy5pZDtcblxuXHRpZiggUkRGLlVSSS5VdGlsLmlzQWJzb2x1dGUoIGlkICkgKSB7XG5cdFx0aWYoICEgUkRGLlVSSS5VdGlsLmlzRnJhZ21lbnRPZiggaWQsIGRvY3VtZW50LmlkICkgKSByZXR1cm47XG5cdFx0aWQgPSBSREYuVVJJLlV0aWwuaGFzRnJhZ21lbnQoIGlkICkgPyBSREYuVVJJLlV0aWwuZ2V0RnJhZ21lbnQoIGlkICkgOiBpZDtcblx0fSBlbHNlIGlmKCBVdGlscy5TLnN0YXJ0c1dpdGgoIGlkLCBcIiNcIiApICkgaWQgPSBpZC5zdWJzdHJpbmcoIDEgKTtcblxuXHRkb2N1bWVudC5fZnJhZ21lbnRzSW5kZXguZGVsZXRlKCBpZCApO1xufVxuXG5mdW5jdGlvbiByZW1vdmVOYW1lZEZyYWdtZW50KCBmcmFnbWVudDpOYW1lZEZyYWdtZW50LkNsYXNzICk6dm9pZDtcbmZ1bmN0aW9uIHJlbW92ZU5hbWVkRnJhZ21lbnQoIHNsdWc6c3RyaW5nICk6dm9pZDtcbmZ1bmN0aW9uIHJlbW92ZU5hbWVkRnJhZ21lbnQoIGZyYWdtZW50T3JTbHVnOmFueSApOnZvaWQge1xuXHRsZXQgZG9jdW1lbnQ6Q2xhc3MgPSA8Q2xhc3M+IHRoaXM7XG5cblx0bGV0IGlkOnN0cmluZyA9IFV0aWxzLmlzU3RyaW5nKCBmcmFnbWVudE9yU2x1ZyApID8gZnJhZ21lbnRPclNsdWcgOiA8RnJhZ21lbnQuQ2xhc3M+IGZyYWdtZW50T3JTbHVnLmlkO1xuXG5cdGlmKCBSREYuVVJJLlV0aWwuaXNCTm9kZUlEKCBpZCApICkgdGhyb3cgbmV3IEVycm9ycy5JbGxlZ2FsQXJndW1lbnRFcnJvciggXCJZb3UgY2FuIG9ubHkgcmVtb3ZlIE5hbWVkRnJhZ21lbnRzLlwiICk7XG5cblx0ZG9jdW1lbnQuX3JlbW92ZUZyYWdtZW50KCBpZCApO1xufVxuXG5mdW5jdGlvbiB0b0pTT04oIG9iamVjdFNjaGVtYVJlc29sdmVyOk9iamVjdFNjaGVtYS5SZXNvbHZlciwganNvbmxkQ29udmVydGVyOkpTT05MRENvbnZlcnRlciApOnN0cmluZztcbmZ1bmN0aW9uIHRvSlNPTiggb2JqZWN0U2NoZW1hUmVzb2x2ZXI6T2JqZWN0U2NoZW1hLlJlc29sdmVyICk6c3RyaW5nO1xuZnVuY3Rpb24gdG9KU09OKCk6c3RyaW5nO1xuZnVuY3Rpb24gdG9KU09OKCBvYmplY3RTY2hlbWFSZXNvbHZlcjpPYmplY3RTY2hlbWEuUmVzb2x2ZXIgPSBudWxsLCBqc29ubGRDb252ZXJ0ZXI6SlNPTkxEQ29udmVydGVyID0gbnVsbCApOnN0cmluZyB7XG5cdGxldCBnZW5lcmFsU2NoZW1hOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSA9IG9iamVjdFNjaGVtYVJlc29sdmVyID8gb2JqZWN0U2NoZW1hUmVzb2x2ZXIuZ2V0R2VuZXJhbFNjaGVtYSgpIDogbmV3IE9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSgpO1xuXHRqc29ubGRDb252ZXJ0ZXIgPSAhICEganNvbmxkQ29udmVydGVyID8ganNvbmxkQ29udmVydGVyIDogbmV3IEpTT05MRENvbnZlcnRlcigpO1xuXG5cdGxldCByZXNvdXJjZXM6eyB0b0pTT046KCkgPT4gc3RyaW5nIH1bXSA9IFtdO1xuXHRyZXNvdXJjZXMucHVzaCggdGhpcyApO1xuXHRyZXNvdXJjZXMgPSByZXNvdXJjZXMuY29uY2F0KCB0aGlzLmdldEZyYWdtZW50cygpICk7XG5cblx0bGV0IGV4cGFuZGVkUmVzb3VyY2VzOlJERi5Ob2RlLkNsYXNzW10gPSBbXTtcblx0Zm9yKCBsZXQgcmVzb3VyY2Ugb2YgcmVzb3VyY2VzICkge1xuXHRcdGxldCByZXNvdXJjZVNjaGVtYTpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEgPSBvYmplY3RTY2hlbWFSZXNvbHZlciA/IG9iamVjdFNjaGVtYVJlc29sdmVyLmdldFNjaGVtYUZvciggcmVzb3VyY2UgKSA6IG5ldyBPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEoKTtcblxuXHRcdGV4cGFuZGVkUmVzb3VyY2VzLnB1c2goIGpzb25sZENvbnZlcnRlci5leHBhbmQoIHJlc291cmNlLCBnZW5lcmFsU2NoZW1hLCByZXNvdXJjZVNjaGVtYSApICk7XG5cdH1cblxuXHRsZXQgZ3JhcGg6UkRGLkRvY3VtZW50LkNsYXNzID0ge1xuXHRcdFwiQGlkXCI6IHRoaXMuaWQsXG5cdFx0XCJAZ3JhcGhcIjogZXhwYW5kZWRSZXNvdXJjZXMsXG5cdH07XG5cblx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KCBncmFwaCApO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemUoKTp2b2lkIHtcblx0bGV0IGN1cnJlbnRGcmFnbWVudHM6RnJhZ21lbnQuQ2xhc3NbXSA9ICg8Q2xhc3M+IHRoaXMpLmdldEZyYWdtZW50cygpLmZpbHRlciggZnJhZ21lbnQgPT4gUkRGLlVSSS5VdGlsLmlzQk5vZGVJRCggZnJhZ21lbnQuaWQgKSApO1xuXHRsZXQgdXNlZEZyYWdtZW50c0lEczpTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcblxuXHRjb252ZXJ0TmVzdGVkT2JqZWN0cyggdGhpcywgdGhpcywgdXNlZEZyYWdtZW50c0lEcyApO1xuXG5cdGN1cnJlbnRGcmFnbWVudHMuZm9yRWFjaCggZnJhZ21lbnQgPT4ge1xuXHRcdGlmKCAhIHVzZWRGcmFnbWVudHNJRHMuaGFzKCBmcmFnbWVudC5pZCApICkge1xuXHRcdFx0KDxDbGFzcz4gdGhpcykuX2ZyYWdtZW50c0luZGV4LmRlbGV0ZSggZnJhZ21lbnQuaWQgKTtcblx0XHR9XG5cdH0gKTtcbn1cblxuZXhwb3J0IGNsYXNzIEZhY3Rvcnkge1xuXHRzdGF0aWMgaGFzQ2xhc3NQcm9wZXJ0aWVzKCBkb2N1bWVudFJlc291cmNlOk9iamVjdCApOmJvb2xlYW4ge1xuXHRcdHJldHVybiAoXG5cdFx0XHRVdGlscy5pc09iamVjdCggZG9jdW1lbnRSZXNvdXJjZSApICYmXG5cblx0XHRcdFV0aWxzLmhhc1Byb3BlcnR5RGVmaW5lZCggZG9jdW1lbnRSZXNvdXJjZSwgXCJfZnJhZ21lbnRzSW5kZXhcIiApICYmXG5cblx0XHRcdFV0aWxzLmhhc0Z1bmN0aW9uKCBkb2N1bWVudFJlc291cmNlLCBcIl9ub3JtYWxpemVcIiApICYmXG5cdFx0XHRVdGlscy5oYXNGdW5jdGlvbiggZG9jdW1lbnRSZXNvdXJjZSwgXCJfcmVtb3ZlRnJhZ21lbnRcIiApICYmXG5cblx0XHRcdFV0aWxzLmhhc0Z1bmN0aW9uKCBkb2N1bWVudFJlc291cmNlLCBcImhhc0ZyYWdtZW50XCIgKSAmJlxuXHRcdFx0VXRpbHMuaGFzRnVuY3Rpb24oIGRvY3VtZW50UmVzb3VyY2UsIFwiZ2V0RnJhZ21lbnRcIiApICYmXG5cdFx0XHRVdGlscy5oYXNGdW5jdGlvbiggZG9jdW1lbnRSZXNvdXJjZSwgXCJnZXROYW1lZEZyYWdtZW50XCIgKSAmJlxuXHRcdFx0VXRpbHMuaGFzRnVuY3Rpb24oIGRvY3VtZW50UmVzb3VyY2UsIFwiZ2V0RnJhZ21lbnRzXCIgKSAmJlxuXHRcdFx0VXRpbHMuaGFzRnVuY3Rpb24oIGRvY3VtZW50UmVzb3VyY2UsIFwiY3JlYXRlRnJhZ21lbnRcIiApICYmXG5cdFx0XHRVdGlscy5oYXNGdW5jdGlvbiggZG9jdW1lbnRSZXNvdXJjZSwgXCJjcmVhdGVOYW1lZEZyYWdtZW50XCIgKSAmJlxuXHRcdFx0VXRpbHMuaGFzRnVuY3Rpb24oIGRvY3VtZW50UmVzb3VyY2UsIFwicmVtb3ZlTmFtZWRGcmFnbWVudFwiICkgJiZcblx0XHRcdFV0aWxzLmhhc0Z1bmN0aW9uKCBkb2N1bWVudFJlc291cmNlLCBcInRvSlNPTlwiIClcblx0XHQpO1xuXHR9XG5cblx0c3RhdGljIGlzKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIChcblx0XHRcdFJlc291cmNlLkZhY3RvcnkuaXMoIG9iamVjdCApICYmXG5cdFx0XHRGYWN0b3J5Lmhhc0NsYXNzUHJvcGVydGllcyggb2JqZWN0IClcblx0XHQpO1xuXHR9XG5cblx0c3RhdGljIGNyZWF0ZSgpOkNsYXNzIHtcblx0XHRyZXR1cm4gRmFjdG9yeS5jcmVhdGVGcm9tKCB7fSApO1xuXHR9XG5cblx0c3RhdGljIGNyZWF0ZUZyb208VCBleHRlbmRzIE9iamVjdD4oIG9iamVjdDpUICk6VCAmIENsYXNzIHtcblx0XHRpZiggRmFjdG9yeS5pcyggb2JqZWN0ICkgKSB0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIlRoZSBvYmplY3QgcHJvdmlkZWQgaXMgYWxyZWFkeSBhIERvY3VtZW50XCIgKTtcblxuXHRcdGxldCByZXNvdXJjZTpSZXNvdXJjZS5DbGFzcyA9IDxhbnk+IG9iamVjdDtcblx0XHRpZiggISBSZXNvdXJjZS5GYWN0b3J5LmlzKCBvYmplY3QgKSApIHJlc291cmNlID0gUmVzb3VyY2UuRmFjdG9yeS5jcmVhdGVGcm9tKCBvYmplY3QgKTtcblxuXHRcdGxldCBkb2N1bWVudDpUICYgQ2xhc3MgPSBGYWN0b3J5LmRlY29yYXRlPFQ+KCA8YW55PiByZXNvdXJjZSApO1xuXHRcdGNvbnZlcnROZXN0ZWRPYmplY3RzKCBkb2N1bWVudCwgZG9jdW1lbnQgKTtcblxuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdHN0YXRpYyBkZWNvcmF0ZTxUIGV4dGVuZHMgT2JqZWN0Piggb2JqZWN0OlQgKTpUICYgQ2xhc3Mge1xuXHRcdFJlc291cmNlLkZhY3RvcnkuZGVjb3JhdGUoIG9iamVjdCApO1xuXG5cdFx0aWYoIEZhY3RvcnkuaGFzQ2xhc3NQcm9wZXJ0aWVzKCBvYmplY3QgKSApIHJldHVybiA8YW55PiBvYmplY3Q7XG5cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyggb2JqZWN0LCB7XG5cdFx0XHRcIl9mcmFnbWVudHNJbmRleFwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IG5ldyBNYXA8c3RyaW5nLCBGcmFnbWVudC5DbGFzcz4oKSxcblx0XHRcdH0sXG5cdFx0XHRcIl9ub3JtYWxpemVcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogZmFsc2UsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBub3JtYWxpemUsXG5cdFx0XHR9LFxuXHRcdFx0XCJfcmVtb3ZlRnJhZ21lbnRcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IHJlbW92ZUZyYWdtZW50LFxuXHRcdFx0fSxcblx0XHRcdFwiaGFzUG9pbnRlclwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogaGFzUG9pbnRlcixcblx0XHRcdH0sXG5cdFx0XHRcImdldFBvaW50ZXJcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IGdldFBvaW50ZXIsXG5cdFx0XHR9LFxuXHRcdFx0XCJpblNjb3BlXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBpblNjb3BlLFxuXHRcdFx0fSxcblxuXHRcdFx0XCJoYXNGcmFnbWVudFwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogaGFzRnJhZ21lbnQsXG5cdFx0XHR9LFxuXHRcdFx0XCJnZXRGcmFnbWVudFwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogZ2V0RnJhZ21lbnQsXG5cdFx0XHR9LFxuXHRcdFx0XCJnZXROYW1lZEZyYWdtZW50XCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBnZXROYW1lZEZyYWdtZW50LFxuXHRcdFx0fSxcblx0XHRcdFwiZ2V0RnJhZ21lbnRzXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBnZXRGcmFnbWVudHMsXG5cdFx0XHR9LFxuXHRcdFx0XCJjcmVhdGVGcmFnbWVudFwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogY3JlYXRlRnJhZ21lbnQsXG5cdFx0XHR9LFxuXHRcdFx0XCJjcmVhdGVOYW1lZEZyYWdtZW50XCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBjcmVhdGVOYW1lZEZyYWdtZW50LFxuXHRcdFx0fSxcblx0XHRcdFwicmVtb3ZlTmFtZWRGcmFnbWVudFwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogcmVtb3ZlTmFtZWRGcmFnbWVudCxcblx0XHRcdH0sXG5cdFx0XHRcInRvSlNPTlwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogdG9KU09OLFxuXHRcdFx0fSxcblx0XHR9ICk7XG5cblx0XHRyZXR1cm4gPGFueT4gb2JqZWN0O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnROZXN0ZWRPYmplY3RzKCBwYXJlbnQ6Q2xhc3MsIGFjdHVhbDphbnksIGZyYWdtZW50c1RyYWNrZXI/OlNldDxzdHJpbmc+ICk6dm9pZCB7XG5cdGxldCBuZXh0OmFueTtcblx0bGV0IGlkT3JTbHVnOnN0cmluZztcblx0bGV0IGZyYWdtZW50OkZyYWdtZW50LkNsYXNzO1xuXG5cdGxldCBrZXlzOnN0cmluZ1tdID0gT2JqZWN0LmtleXMoIGFjdHVhbCApO1xuXHRmb3IoIGxldCBrZXkgb2Yga2V5cyApIHtcblx0XHRuZXh0ID0gYWN0dWFsWyBrZXkgXTtcblxuXHRcdGlmKCBVdGlscy5pc0FycmF5KCBuZXh0ICkgKSB7XG5cdFx0XHRjb252ZXJ0TmVzdGVkT2JqZWN0cyggcGFyZW50LCBuZXh0LCBmcmFnbWVudHNUcmFja2VyICk7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRpZiggISBVdGlscy5pc1BsYWluT2JqZWN0KCBuZXh0ICkgKSBjb250aW51ZTtcblx0XHRpZiggUG9pbnRlci5GYWN0b3J5LmlzKCBuZXh0ICkgKSB7XG5cdFx0XHRpZiggcGFyZW50Lmhhc0ZyYWdtZW50KCBuZXh0LmlkICkgKSB7XG5cdFx0XHRcdGlmKCBmcmFnbWVudHNUcmFja2VyICkgZnJhZ21lbnRzVHJhY2tlci5hZGQoIG5leHQuaWQgKTtcblx0XHRcdFx0Y29udmVydE5lc3RlZE9iamVjdHMoIHBhcmVudCwgbmV4dCwgZnJhZ21lbnRzVHJhY2tlciApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0aWRPclNsdWcgPSAoIFwiaWRcIiBpbiBuZXh0ICkgPyBuZXh0LmlkIDogKCAoIFwic2x1Z1wiIGluIG5leHQgKSA/IFwiI1wiICsgbmV4dC5zbHVnIDogXCJcIiApO1xuXHRcdGlmKCAhICEgaWRPclNsdWcgJiYgISBwYXJlbnQuaW5TY29wZSggaWRPclNsdWcgKSApIGNvbnRpbnVlO1xuXG5cdFx0bGV0IHBhcmVudEZyYWdtZW50OkZyYWdtZW50LkNsYXNzID0gcGFyZW50LmdldEZyYWdtZW50KCBpZE9yU2x1ZyApO1xuXG5cdFx0aWYoICEgcGFyZW50RnJhZ21lbnQgKSB7XG5cdFx0XHRmcmFnbWVudCA9IHBhcmVudC5jcmVhdGVGcmFnbWVudCggPE9iamVjdD4gbmV4dCwgaWRPclNsdWcgKTtcblx0XHRcdGNvbnZlcnROZXN0ZWRPYmplY3RzKCBwYXJlbnQsIGZyYWdtZW50LCBmcmFnbWVudHNUcmFja2VyICk7XG5cblx0XHR9IGVsc2UgaWYoIHBhcmVudEZyYWdtZW50ICE9PSBuZXh0ICkge1xuXHRcdFx0T2JqZWN0LmFzc2lnbiggcGFyZW50RnJhZ21lbnQsIG5leHQgKTtcblx0XHRcdGZyYWdtZW50ID0gYWN0dWFsWyBrZXkgXSA9IHBhcmVudEZyYWdtZW50O1xuXHRcdFx0Y29udmVydE5lc3RlZE9iamVjdHMoIHBhcmVudCwgZnJhZ21lbnQsIGZyYWdtZW50c1RyYWNrZXIgKTtcblx0XHR9XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0ICogYXMgUmVzb3VyY2UgZnJvbSBcIi4vUmVzb3VyY2VcIjtcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuL1V0aWxzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xhc3Mge1xuXHRfc25hcHNob3Q6T2JqZWN0O1xuXHRfc3luY1NuYXBzaG90OigpID0+IHZvaWQ7XG5cblx0aXNEaXJ0eSgpOmJvb2xlYW47XG5cdHJldmVydCgpOnZvaWQ7XG59XG5cbmZ1bmN0aW9uIHN5bmNTbmFwc2hvdCgpOnZvaWQge1xuXHRsZXQgcmVzb3VyY2U6Q2xhc3MgJiBSZXNvdXJjZS5DbGFzcyA9IHRoaXM7XG5cdHJlc291cmNlLl9zbmFwc2hvdCA9IFV0aWxzLk8uY2xvbmUoIHJlc291cmNlLCB7YXJyYXlzOiB0cnVlfSApO1xuXG5cdGlmKCBcImlkXCIgaW4gcmVzb3VyY2UgKSAocmVzb3VyY2UuX3NuYXBzaG90IGFzIFJlc291cmNlLkNsYXNzKS5pZCA9IHJlc291cmNlLmlkO1xuXHRpZiggXCJ0eXBlc1wiIGluIHJlc291cmNlICkgKHJlc291cmNlLl9zbmFwc2hvdCBhcyBSZXNvdXJjZS5DbGFzcykudHlwZXMgPSBVdGlscy5PLmNsb25lKCByZXNvdXJjZS50eXBlcyApO1xufVxuXG5mdW5jdGlvbiBpc0RpcnR5KCk6Ym9vbGVhbiB7XG5cdGxldCByZXNvdXJjZTpDbGFzcyAmIFJlc291cmNlLkNsYXNzID0gdGhpcztcblxuXHRpZiggISBVdGlscy5PLmFyZUVxdWFsKCByZXNvdXJjZSwgcmVzb3VyY2UuX3NuYXBzaG90LCB7YXJyYXlzOiB0cnVlfSwge2lkOiB0cnVlLCB0eXBlczogdHJ1ZX0gKSApIHJldHVybiB0cnVlO1xuXG5cdGxldCByZXNwb25zZTpib29sZWFuID0gZmFsc2U7XG5cdGlmKCBcImlkXCIgaW4gcmVzb3VyY2UgKSByZXNwb25zZSA9IHJlc3BvbnNlIHx8IChyZXNvdXJjZS5fc25hcHNob3QgYXMgUmVzb3VyY2UuQ2xhc3MpLmlkICE9PSByZXNvdXJjZS5pZDtcblx0aWYoIFwidHlwZXNcIiBpbiByZXNvdXJjZSApIHJlc3BvbnNlID0gcmVzcG9uc2UgfHwgISBVdGlscy5PLmFyZUVxdWFsKCAocmVzb3VyY2UuX3NuYXBzaG90IGFzIFJlc291cmNlLkNsYXNzKS50eXBlcywgcmVzb3VyY2UudHlwZXMgKTtcblxuXHRyZXR1cm4gcmVzcG9uc2U7XG59XG5cbmZ1bmN0aW9uIHJldmVydCgpOnZvaWQge1xuXHRsZXQgcmVzb3VyY2U6Q2xhc3MgJiBSZXNvdXJjZS5DbGFzcyA9IHRoaXM7XG5cblx0Zm9yKCBsZXQga2V5IG9mIE9iamVjdC5rZXlzKCByZXNvdXJjZSApICkge1xuXHRcdGlmKCAhICgga2V5IGluIHJlc291cmNlLl9zbmFwc2hvdCApICkgZGVsZXRlIHJlc291cmNlWyBrZXkgXTtcblx0fVxuXG5cdFV0aWxzLk8uZXh0ZW5kKCByZXNvdXJjZSwgcmVzb3VyY2UuX3NuYXBzaG90LCB7YXJyYXlzOiB0cnVlfSApO1xufVxuXG5leHBvcnQgY2xhc3MgRmFjdG9yeSB7XG5cdHN0YXRpYyBoYXNDbGFzc1Byb3BlcnRpZXMoIG9iamVjdDpPYmplY3QgKTpib29sZWFuIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0VXRpbHMuaGFzUHJvcGVydHlEZWZpbmVkKCBvYmplY3QsIFwiX3NuYXBzaG90XCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJfc3luY1NuYXBzaG90XCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJpc0RpcnR5XCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJyZXZlcnRcIiApXG5cdFx0KTtcblx0fVxuXG5cdHN0YXRpYyBkZWNvcmF0ZTxUIGV4dGVuZHMgT2JqZWN0Piggb2JqZWN0OlQsIHNuYXBzaG90Ok9iamVjdCA9IHt9ICk6VCAmIENsYXNzIHtcblx0XHRpZiggRmFjdG9yeS5oYXNDbGFzc1Byb3BlcnRpZXMoIG9iamVjdCApICkgcmV0dXJuIDxhbnk+IG9iamVjdDtcblxuXHRcdGxldCBwZXJzaXN0ZWRSZXNvdXJjZTpDbGFzcyA9IDxhbnk+IG9iamVjdDtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBwZXJzaXN0ZWRSZXNvdXJjZSwge1xuXHRcdFx0XCJfc25hcHNob3RcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IHNuYXBzaG90LFxuXHRcdFx0fSxcblx0XHRcdFwiX3N5bmNTbmFwc2hvdFwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IHN5bmNTbmFwc2hvdCxcblx0XHRcdH0sXG5cblx0XHRcdFwiaXNEaXJ0eVwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IGlzRGlydHksXG5cdFx0XHR9LFxuXHRcdFx0XCJyZXZlcnRcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogZmFsc2UsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiByZXZlcnQsXG5cdFx0XHR9LFxuXHRcdH0gKTtcblxuXHRcdHJldHVybiA8YW55PiBwZXJzaXN0ZWRSZXNvdXJjZTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCAqIGFzIEZyYWdtZW50IGZyb20gXCIuL0ZyYWdtZW50XCI7XG5pbXBvcnQgKiBhcyBPYmplY3RTY2hlbWEgZnJvbSBcIi4vT2JqZWN0U2NoZW1hXCI7XG5pbXBvcnQgKiBhcyBQZXJzaXN0ZWREb2N1bWVudCBmcm9tIFwiLi9QZXJzaXN0ZWREb2N1bWVudFwiO1xuaW1wb3J0ICogYXMgUGVyc2lzdGVkUmVzb3VyY2UgZnJvbSBcIi4vUGVyc2lzdGVkUmVzb3VyY2VcIjtcbmltcG9ydCAqIGFzIFJERiBmcm9tIFwiLi9SREZcIjtcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuL1V0aWxzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xhc3MgZXh0ZW5kcyBQZXJzaXN0ZWRSZXNvdXJjZS5DbGFzcywgRnJhZ21lbnQuQ2xhc3Mge1xuXHRkb2N1bWVudDogUGVyc2lzdGVkRG9jdW1lbnQuQ2xhc3M7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVVUkkoIHVyaTpzdHJpbmcgKTpzdHJpbmcge1xuXHRpZiggUkRGLlVSSS5VdGlsLmlzQWJzb2x1dGUoIHVyaSApICkgcmV0dXJuIHVyaTtcblxuXHRsZXQgc2NoZW1hOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSA9ICg8Q2xhc3M+IHRoaXMpLmRvY3VtZW50Ll9kb2N1bWVudHMuZ2V0R2VuZXJhbFNjaGVtYSgpO1xuXHRyZXR1cm4gT2JqZWN0U2NoZW1hLlV0aWwucmVzb2x2ZVVSSSggdXJpLCBzY2hlbWEgKTtcbn1cbmZ1bmN0aW9uIGV4dGVuZEFkZFR5cGUoIHN1cGVyRnVuY3Rpb246KCB0eXBlOnN0cmluZyApID0+IHZvaWQgKTooIHR5cGU6c3RyaW5nICkgPT4gdm9pZCB7XG5cdHJldHVybiBmdW5jdGlvbiggdHlwZTpzdHJpbmcgKTp2b2lkIHtcblx0XHR0eXBlID0gcmVzb2x2ZVVSSS5jYWxsKCB0aGlzLCB0eXBlICk7XG5cdFx0c3VwZXJGdW5jdGlvbi5jYWxsKCB0aGlzLCB0eXBlICk7XG5cdH07XG59XG5mdW5jdGlvbiBleHRlbmRIYXNUeXBlKCBzdXBlckZ1bmN0aW9uOiggdHlwZTpzdHJpbmcgKSA9PiBib29sZWFuICk6KCB0eXBlOnN0cmluZyApID0+IGJvb2xlYW4ge1xuXHRyZXR1cm4gZnVuY3Rpb24oIHR5cGU6c3RyaW5nICk6Ym9vbGVhbiB7XG5cdFx0dHlwZSA9IHJlc29sdmVVUkkuY2FsbCggdGhpcywgdHlwZSApO1xuXHRcdHJldHVybiBzdXBlckZ1bmN0aW9uLmNhbGwoIHRoaXMsIHR5cGUgKTtcblx0fTtcbn1cbmZ1bmN0aW9uIGV4dGVuZFJlbW92ZVR5cGUoIHN1cGVyRnVuY3Rpb246KCB0eXBlOnN0cmluZyApID0+IHZvaWQgKTooIHR5cGU6c3RyaW5nICkgPT4gdm9pZCB7XG5cdHJldHVybiBmdW5jdGlvbiggdHlwZTpzdHJpbmcgKTp2b2lkIHtcblx0XHR0eXBlID0gcmVzb2x2ZVVSSS5jYWxsKCB0aGlzLCB0eXBlICk7XG5cdFx0c3VwZXJGdW5jdGlvbi5jYWxsKCB0aGlzLCB0eXBlICk7XG5cdH07XG59XG5cbmV4cG9ydCBjbGFzcyBGYWN0b3J5IHtcblx0c3RhdGljIGRlY29yYXRlPFQgZXh0ZW5kcyBGcmFnbWVudC5DbGFzcz4oIGZyYWdtZW50OlQsIHNuYXBzaG90Ok9iamVjdCA9IHt9ICk6VCAmIENsYXNzIHtcblx0XHRQZXJzaXN0ZWRSZXNvdXJjZS5GYWN0b3J5LmRlY29yYXRlKCBmcmFnbWVudCwgc25hcHNob3QgKTtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBmcmFnbWVudCwge1xuXHRcdFx0XCJhZGRUeXBlXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogZXh0ZW5kQWRkVHlwZSggZnJhZ21lbnQuYWRkVHlwZSApLFxuXHRcdFx0fSxcblx0XHRcdFwiaGFzVHlwZVwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IGV4dGVuZEhhc1R5cGUoIGZyYWdtZW50Lmhhc1R5cGUgKSxcblx0XHRcdH0sXG5cdFx0XHRcInJlbW92ZVR5cGVcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogZmFsc2UsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBleHRlbmRSZW1vdmVUeXBlKCBmcmFnbWVudC5yZW1vdmVUeXBlICksXG5cdFx0XHR9LFxuXHRcdH0gKTtcblxuXHRcdHJldHVybiA8YW55PiBmcmFnbWVudDtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCAqIGFzIE5hbWVkRnJhZ21lbnQgZnJvbSBcIi4vTmFtZWRGcmFnbWVudFwiO1xuaW1wb3J0ICogYXMgUGVyc2lzdGVkRG9jdW1lbnQgZnJvbSBcIi4vUGVyc2lzdGVkRG9jdW1lbnRcIjtcbmltcG9ydCAqIGFzIFBlcnNpc3RlZEZyYWdtZW50IGZyb20gXCIuL1BlcnNpc3RlZEZyYWdtZW50XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xhc3MgZXh0ZW5kcyBQZXJzaXN0ZWRGcmFnbWVudC5DbGFzcywgTmFtZWRGcmFnbWVudC5DbGFzcyB7XG5cdGRvY3VtZW50OiBQZXJzaXN0ZWREb2N1bWVudC5DbGFzcztcbn1cblxuZXhwb3J0IGNsYXNzIEZhY3Rvcnkge1xuXHRzdGF0aWMgZGVjb3JhdGU8VCBleHRlbmRzIE5hbWVkRnJhZ21lbnQuQ2xhc3M+KCBmcmFnbWVudDpULCBzbmFwc2hvdDpPYmplY3QgPSB7fSApOlQgJiBDbGFzcyB7XG5cdFx0UGVyc2lzdGVkRnJhZ21lbnQuRmFjdG9yeS5kZWNvcmF0ZSggZnJhZ21lbnQsIHNuYXBzaG90ICk7XG5cblx0XHRyZXR1cm4gPGFueT4gZnJhZ21lbnQ7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xhc3M7XG4iLCJpbXBvcnQgKiBhcyBFcnJvcnMgZnJvbSBcIi4vRXJyb3JzXCI7XG5pbXBvcnQgKiBhcyBIVFRQIGZyb20gXCIuL0hUVFBcIjtcbmltcG9ydCAqIGFzIFBlcnNpc3RlZERvY3VtZW50IGZyb20gXCIuL1BlcnNpc3RlZERvY3VtZW50XCI7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi9VdGlsc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIENsYXNzIHtcblx0X2lkOnN0cmluZztcblx0X3Jlc29sdmVkOmJvb2xlYW47XG5cblx0aWQ6c3RyaW5nO1xuXHRpc1Jlc29sdmVkKCk6Ym9vbGVhbjtcblx0cmVzb2x2ZTxUPigpOlByb21pc2U8WyBUICYgUGVyc2lzdGVkRG9jdW1lbnQuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGlicmFyeSB7XG5cdGhhc1BvaW50ZXIoIGlkOnN0cmluZyApOmJvb2xlYW47XG5cdGdldFBvaW50ZXIoIGlkOnN0cmluZyApOkNsYXNzO1xufVxuXG5leHBvcnQgY2xhc3MgRmFjdG9yeSB7XG5cdHN0YXRpYyBoYXNDbGFzc1Byb3BlcnRpZXMoIG9iamVjdDpPYmplY3QgKTpib29sZWFuIHtcblx0XHRyZXR1cm4gISAhIChcblx0XHRcdFV0aWxzLmhhc1Byb3BlcnR5RGVmaW5lZCggb2JqZWN0LCBcIl9pZFwiICkgJiZcblx0XHRcdFV0aWxzLmhhc1Byb3BlcnR5RGVmaW5lZCggb2JqZWN0LCBcIl9yZXNvbHZlZFwiICkgJiZcblxuXHRcdFx0VXRpbHMuaGFzUHJvcGVydHlEZWZpbmVkKCBvYmplY3QsIFwiaWRcIiApICYmXG5cdFx0XHRVdGlscy5oYXNGdW5jdGlvbiggb2JqZWN0LCBcImlzUmVzb2x2ZWRcIiApICYmXG5cdFx0XHRVdGlscy5oYXNQcm9wZXJ0eURlZmluZWQoIG9iamVjdCwgXCJyZXNvbHZlXCIgKVxuXHRcdCk7XG5cdH1cblxuXHRzdGF0aWMgaXMoIHZhbHVlOmFueSApOmJvb2xlYW4ge1xuXHRcdHJldHVybiAhICEgKFxuXHRcdFx0VXRpbHMuaXNPYmplY3QoIHZhbHVlICkgJiZcblx0XHRcdEZhY3RvcnkuaGFzQ2xhc3NQcm9wZXJ0aWVzKCB2YWx1ZSApXG5cdFx0KTtcblx0fVxuXG5cdHN0YXRpYyBjcmVhdGUoIGlkPzpzdHJpbmcgKTpDbGFzcyB7XG5cdFx0cmV0dXJuIEZhY3RvcnkuY3JlYXRlRnJvbSgge30sIGlkICk7XG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlRnJvbTxUIGV4dGVuZHMgT2JqZWN0Piggb2JqZWN0OlQsIGlkPzpzdHJpbmcgKTpUICYgQ2xhc3Mge1xuXHRcdGlkID0gISAhIGlkID8gaWQgOiBcIlwiO1xuXG5cdFx0bGV0IHBvaW50ZXI6VCAmIENsYXNzID0gRmFjdG9yeS5kZWNvcmF0ZTxUPiggb2JqZWN0ICk7XG5cdFx0cG9pbnRlci5pZCA9IGlkO1xuXG5cdFx0cmV0dXJuIHBvaW50ZXI7XG5cdH1cblxuXHRzdGF0aWMgZGVjb3JhdGU8VCBleHRlbmRzIE9iamVjdD4oIG9iamVjdDpUICk6VCAmIENsYXNzIHtcblx0XHRpZiggRmFjdG9yeS5oYXNDbGFzc1Byb3BlcnRpZXMoIG9iamVjdCApICkgcmV0dXJuIDxhbnk+IG9iamVjdDtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBvYmplY3QsIHtcblx0XHRcdFwiX2lkXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBcIlwiLFxuXHRcdFx0fSxcblx0XHRcdFwiX3Jlc29sdmVkXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBmYWxzZSxcblx0XHRcdH0sXG5cdFx0XHRcImlkXCI6IHtcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0Z2V0OiBmdW5jdGlvbigpOnN0cmluZyB7XG5cdFx0XHRcdFx0aWYoICEgdGhpcy5faWQgKSByZXR1cm4gXCJcIjtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5faWQ7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlOnN0cmluZyApOnZvaWQge1xuXHRcdFx0XHRcdHRoaXMuX2lkID0gdmFsdWU7XG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdFx0XCJpc1Jlc29sdmVkXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogZnVuY3Rpb24oKTpib29sZWFuIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5fcmVzb2x2ZWQ7XG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdFx0XCJyZXNvbHZlXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogZnVuY3Rpb24oKTpQcm9taXNlPFsgQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4ge1xuXHRcdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdDxhbnk+KCBuZXcgRXJyb3JzLk5vdEltcGxlbWVudGVkRXJyb3IoIFwiQSBzaW1wbGUgcG9pbnRlciBjYW5ub3QgYmUgcmVzb2x2ZWQgYnkgaXQgc2VsZi5cIiApICk7XG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdH0gKTtcblxuXHRcdHJldHVybiA8YW55PiBvYmplY3Q7XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIFV0aWwge1xuXHRzdGF0aWMgYXJlRXF1YWwoIHBvaW50ZXIxOkNsYXNzLCBwb2ludGVyMjpDbGFzcyApOmJvb2xlYW4ge1xuXHRcdHJldHVybiBwb2ludGVyMS5pZCA9PT0gcG9pbnRlcjIuaWQ7XG5cdH1cblxuXHRzdGF0aWMgZ2V0SURzKCBwb2ludGVyczpDbGFzc1tdICk6c3RyaW5nW10ge1xuXHRcdGxldCBpZHM6c3RyaW5nW10gPSBbXTtcblx0XHRmb3IoIGxldCBwb2ludGVyIG9mIHBvaW50ZXJzICkge1xuXHRcdFx0aWRzLnB1c2goIHBvaW50ZXIuaWQgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGlkcztcblx0fVxuXG5cdHN0YXRpYyByZXNvbHZlQWxsPFQ+KCBwb2ludGVyczpDbGFzc1tdICk6UHJvbWlzZTxbIChUICYgUGVyc2lzdGVkRG9jdW1lbnQuQ2xhc3MpW10sIEhUVFAuUmVzcG9uc2UuQ2xhc3NbXSBdPiB7XG5cdFx0bGV0IHByb21pc2VzOlByb21pc2U8WyBUICYgUGVyc2lzdGVkRG9jdW1lbnQuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT5bXSA9IHBvaW50ZXJzLm1hcCggKCBwb2ludGVyOkNsYXNzICkgPT4gcG9pbnRlci5yZXNvbHZlPFQ+KCkgKTtcblx0XHRyZXR1cm4gUHJvbWlzZS5hbGw8WyBUICYgUGVyc2lzdGVkRG9jdW1lbnQuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4oIHByb21pc2VzICkudGhlbiggKCByZXN1bHRzOlsgVCAmIFBlcnNpc3RlZERvY3VtZW50LkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF1bXSApID0+IHtcblx0XHRcdGxldCByZXNvbHZlZFBvaW50ZXJzOihUICYgUGVyc2lzdGVkRG9jdW1lbnQuQ2xhc3MpW10gPSByZXN1bHRzLm1hcCggKCByZXN1bHQ6WyBUICYgUGVyc2lzdGVkRG9jdW1lbnQuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXSApID0+IHJlc3VsdFsgMCBdICk7XG5cdFx0XHRsZXQgcmVzcG9uc2VzOkhUVFAuUmVzcG9uc2UuQ2xhc3NbXSA9IHJlc3VsdHMubWFwKCAoIHJlc3VsdDpbIFQgJiBQZXJzaXN0ZWREb2N1bWVudC5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdICkgPT4gcmVzdWx0WyAxIF0gKTtcblxuXHRcdFx0cmV0dXJuIFsgcmVzb2x2ZWRQb2ludGVycywgcmVzcG9uc2VzIF07XG5cdFx0fSApO1xuXHR9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmFsaWRhdG9yIHtcblx0aW5TY29wZSggaWQ6c3RyaW5nICk6Ym9vbGVhbjtcblx0aW5TY29wZSggcG9pbnRlcjpDbGFzcyApOmJvb2xlYW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0ICogYXMgQWNjZXNzUG9pbnQgZnJvbSBcIi4vQWNjZXNzUG9pbnRcIjtcbmltcG9ydCAqIGFzIERvY3VtZW50IGZyb20gXCIuL0RvY3VtZW50XCI7XG5pbXBvcnQgRG9jdW1lbnRzIGZyb20gXCIuL0RvY3VtZW50c1wiO1xuaW1wb3J0ICogYXMgRnJhZ21lbnQgZnJvbSBcIi4vRnJhZ21lbnRcIjtcbmltcG9ydCAqIGFzIEhUVFAgZnJvbSBcIi4vSFRUUFwiO1xuaW1wb3J0ICogYXMgTmFtZWRGcmFnbWVudCBmcm9tIFwiLi9OYW1lZEZyYWdtZW50XCI7XG5pbXBvcnQgKiBhcyBPYmplY3RTY2hlbWEgZnJvbSBcIi4vT2JqZWN0U2NoZW1hXCI7XG5pbXBvcnQgKiBhcyBQZXJzaXN0ZWRBY2Nlc3NQb2ludCBmcm9tIFwiLi9QZXJzaXN0ZWRBY2Nlc3NQb2ludFwiO1xuaW1wb3J0ICogYXMgUGVyc2lzdGVkUmVzb3VyY2UgZnJvbSBcIi4vUGVyc2lzdGVkUmVzb3VyY2VcIjtcbmltcG9ydCAqIGFzIFBlcnNpc3RlZEZyYWdtZW50IGZyb20gXCIuL1BlcnNpc3RlZEZyYWdtZW50XCI7XG5pbXBvcnQgKiBhcyBQZXJzaXN0ZWROYW1lZEZyYWdtZW50IGZyb20gXCIuL1BlcnNpc3RlZE5hbWVkRnJhZ21lbnRcIjtcbmltcG9ydCAqIGFzIFBlcnNpc3RlZFByb3RlY3RlZERvY3VtZW50IGZyb20gXCIuL1BlcnNpc3RlZFByb3RlY3RlZERvY3VtZW50XCI7XG5pbXBvcnQgKiBhcyBQb2ludGVyIGZyb20gXCIuL1BvaW50ZXJcIjtcbmltcG9ydCAqIGFzIFJldHJpZXZhbFByZWZlcmVuY2VzIGZyb20gXCIuL1JldHJpZXZhbFByZWZlcmVuY2VzXCI7XG5pbXBvcnQgKiBhcyBSREYgZnJvbSBcIi4vUkRGXCI7XG5pbXBvcnQgKiBhcyBTUEFSUUwgZnJvbSBcIi4vU1BBUlFMXCI7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi9VdGlsc1wiO1xuaW1wb3J0ICogYXMgVVJJIGZyb20gXCIuL1JERi9VUklcIjtcblxuZXhwb3J0IGludGVyZmFjZSBDbGFzcyBleHRlbmRzIFBlcnNpc3RlZFJlc291cmNlLkNsYXNzLCBEb2N1bWVudC5DbGFzcyB7XG5cdGNyZWF0ZWQ/OkRhdGU7XG5cdG1vZGlmaWVkPzpEYXRlO1xuXHRkZWZhdWx0SW50ZXJhY3Rpb25Nb2RlbD86UG9pbnRlci5DbGFzcztcblx0YWNjZXNzUG9pbnRzPzpQb2ludGVyLkNsYXNzW107XG5cdGhhc01lbWJlclJlbGF0aW9uPzpQb2ludGVyLkNsYXNzO1xuXHRpc01lbWJlck9mUmVsYXRpb24/OlBvaW50ZXIuQ2xhc3M7XG5cdGNvbnRhaW5zPzpQb2ludGVyLkNsYXNzW107XG5cblx0X2RvY3VtZW50czpEb2N1bWVudHM7XG5cdF9ldGFnOnN0cmluZztcblx0X2ZyYWdtZW50c0luZGV4Ok1hcDxzdHJpbmcsIFBlcnNpc3RlZEZyYWdtZW50LkNsYXNzPjtcblx0X3NhdmVkRnJhZ21lbnRzOlBlcnNpc3RlZEZyYWdtZW50LkNsYXNzW107XG5cdF9zeW5jU2F2ZWRGcmFnbWVudHMoKTp2b2lkO1xuXG5cdGdldEZyYWdtZW50PFQ+KCBzbHVnOnN0cmluZyApOlQgJiBQZXJzaXN0ZWRGcmFnbWVudC5DbGFzcztcblx0Z2V0TmFtZWRGcmFnbWVudDxUPiggc2x1ZzpzdHJpbmcgKTpUICYgUGVyc2lzdGVkTmFtZWRGcmFnbWVudC5DbGFzcztcblx0Z2V0RnJhZ21lbnRzKCk6UGVyc2lzdGVkRnJhZ21lbnQuQ2xhc3NbXTtcblxuXHRjcmVhdGVGcmFnbWVudCgpOlBlcnNpc3RlZEZyYWdtZW50LkNsYXNzO1xuXHRjcmVhdGVGcmFnbWVudCggc2x1ZzpzdHJpbmcgKTpQZXJzaXN0ZWRGcmFnbWVudC5DbGFzcztcblx0Y3JlYXRlRnJhZ21lbnQ8VCBleHRlbmRzIE9iamVjdD4oIG9iamVjdDpUICk6UGVyc2lzdGVkRnJhZ21lbnQuQ2xhc3MgJiBUO1xuXHRjcmVhdGVGcmFnbWVudDxUIGV4dGVuZHMgT2JqZWN0Piggb2JqZWN0OlQsIHNsdWc6c3RyaW5nICk6UGVyc2lzdGVkRnJhZ21lbnQuQ2xhc3MgJiBUO1xuXG5cdGNyZWF0ZU5hbWVkRnJhZ21lbnQoIHNsdWc6c3RyaW5nICk6UGVyc2lzdGVkTmFtZWRGcmFnbWVudC5DbGFzcztcblx0Y3JlYXRlTmFtZWRGcmFnbWVudDxUIGV4dGVuZHMgT2JqZWN0Piggb2JqZWN0OlQsIHNsdWc6c3RyaW5nICk6UGVyc2lzdGVkTmFtZWRGcmFnbWVudC5DbGFzcyAmIFQ7XG5cblx0cmVmcmVzaDxUIGV4dGVuZHMgQ2xhc3M+KCk6UHJvbWlzZTxbIFQsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cdHNhdmU8VCBleHRlbmRzIENsYXNzPigpOlByb21pc2U8WyBULCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+O1xuXHRzYXZlQW5kUmVmcmVzaDxUIGV4dGVuZHMgQ2xhc3M+KCk6UHJvbWlzZTxbIFQsIFsgSFRUUC5SZXNwb25zZS5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdIF0+O1xuXHRkZWxldGUoKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+O1xuXG5cdGdldERvd25sb2FkVVJMKCk6UHJvbWlzZTxzdHJpbmc+O1xuXG5cdGFkZE1lbWJlciggbWVtYmVyOlBvaW50ZXIuQ2xhc3MgKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+O1xuXHRhZGRNZW1iZXIoIG1lbWJlclVSSTpzdHJpbmcgKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+O1xuXG5cdGFkZE1lbWJlcnMoIG1lbWJlcnM6KFBvaW50ZXIuQ2xhc3MgfCBzdHJpbmcpW10gKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+O1xuXG5cdGNyZWF0ZUNoaWxkPFQgZXh0ZW5kcyBPYmplY3Q+KCBvYmplY3Q6VCwgc2x1ZzpzdHJpbmcsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBUICYgUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cdGNyZWF0ZUNoaWxkPFQgZXh0ZW5kcyBPYmplY3Q+KCBvYmplY3Q6VCwgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIFQgJiBQZXJzaXN0ZWRQcm90ZWN0ZWREb2N1bWVudC5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdPjtcblx0Y3JlYXRlQ2hpbGQoIHNsdWc6c3RyaW5nLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cdGNyZWF0ZUNoaWxkKCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cblx0Y3JlYXRlQ2hpbGRBbmRSZXRyaWV2ZTxUIGV4dGVuZHMgT2JqZWN0Piggb2JqZWN0OlQsIHNsdWc6c3RyaW5nLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgICk6UHJvbWlzZTxbIFQgJiBQZXJzaXN0ZWRQcm90ZWN0ZWREb2N1bWVudC5DbGFzcywgWyBIVFRQLlJlc3BvbnNlLkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0gXT47XG5cdGNyZWF0ZUNoaWxkQW5kUmV0cmlldmU8VCBleHRlbmRzIE9iamVjdD4oIG9iamVjdDpULCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgICk6UHJvbWlzZTxbIFQgJiBQZXJzaXN0ZWRQcm90ZWN0ZWREb2N1bWVudC5DbGFzcywgWyBIVFRQLlJlc3BvbnNlLkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0gXT47XG5cdGNyZWF0ZUNoaWxkQW5kUmV0cmlldmUoIHNsdWc6c3RyaW5nLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgICk6UHJvbWlzZTxbIFBlcnNpc3RlZFByb3RlY3RlZERvY3VtZW50LkNsYXNzLCBbIEhUVFAuUmVzcG9uc2UuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXSBdPjtcblx0Y3JlYXRlQ2hpbGRBbmRSZXRyaWV2ZSggcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIFBlcnNpc3RlZFByb3RlY3RlZERvY3VtZW50LkNsYXNzLCBbIEhUVFAuUmVzcG9uc2UuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXSBdPjtcblxuXHRjcmVhdGVBY2Nlc3NQb2ludDxUIGV4dGVuZHMgQWNjZXNzUG9pbnQuQ2xhc3M+KCBhY2Nlc3NQb2ludDpULCBzbHVnPzpzdHJpbmcsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBUICYgUGVyc2lzdGVkQWNjZXNzUG9pbnQuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cdGNyZWF0ZUFjY2Vzc1BvaW50PFQgZXh0ZW5kcyBBY2Nlc3NQb2ludC5DbGFzcz4oIGFjY2Vzc1BvaW50OlQsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBUICYgUGVyc2lzdGVkQWNjZXNzUG9pbnQuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cblx0bGlzdENoaWxkcmVuKCk6UHJvbWlzZTxbIENsYXNzW10sIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cblx0Z2V0Q2hpbGRyZW48VD4oIHJldHJpZXZhbFByZWZlcmVuY2VzPzpSZXRyaWV2YWxQcmVmZXJlbmNlcy5DbGFzcyApOlByb21pc2U8WyAoVCAmIENsYXNzKVtdLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+O1xuXG5cdGxpc3RNZW1iZXJzKCBpbmNsdWRlTm9uUmVhZGFibGU/OmJvb2xlYW4gKTpQcm9taXNlPFsgQ2xhc3NbXSwgSFRUUC5SZXNwb25zZS5DbGFzcyBdPjtcblxuXHRnZXRNZW1iZXJzPFQ+KCBpbmNsdWRlTm9uUmVhZGFibGU/OmJvb2xlYW4sIHJldHJpZXZhbFByZWZlcmVuY2VzPzpSZXRyaWV2YWxQcmVmZXJlbmNlcy5DbGFzcyApOlByb21pc2U8WyAoVCAmIENsYXNzKVtdLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+O1xuXHRnZXRNZW1iZXJzPFQ+KCByZXRyaWV2YWxQcmVmZXJlbmNlcz86UmV0cmlldmFsUHJlZmVyZW5jZXMuQ2xhc3MgKTpQcm9taXNlPFsgKFQgJiBDbGFzcylbXSwgSFRUUC5SZXNwb25zZS5DbGFzcyBdPjtcblxuXHRyZW1vdmVNZW1iZXIoIG1lbWJlcjpQb2ludGVyLkNsYXNzICk6UHJvbWlzZTxIVFRQLlJlc3BvbnNlLkNsYXNzPjtcblx0cmVtb3ZlTWVtYmVyKCBtZW1iZXJVUkk6c3RyaW5nICk6UHJvbWlzZTxIVFRQLlJlc3BvbnNlLkNsYXNzPjtcblxuXHRyZW1vdmVNZW1iZXJzKCBtZW1iZXJzOihQb2ludGVyLkNsYXNzIHwgc3RyaW5nKVtdICk6UHJvbWlzZTxIVFRQLlJlc3BvbnNlLkNsYXNzPjtcblx0cmVtb3ZlQWxsTWVtYmVycygpOlByb21pc2U8SFRUUC5SZXNwb25zZS5DbGFzcz47XG5cblx0dXBsb2FkKCBibG9iOkJsb2IsIHNsdWc6c3RyaW5nICk6UHJvbWlzZTxbIFBvaW50ZXIuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cdHVwbG9hZCggYmxvYjpCbG9iICk6UHJvbWlzZTxbIFBvaW50ZXIuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cdHVwbG9hZCggYmxvYjpCdWZmZXIsIHNsdWc6c3RyaW5nICk6UHJvbWlzZTxbIFBvaW50ZXIuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cdHVwbG9hZCggYmxvYjpCdWZmZXIgKTpQcm9taXNlPFsgUG9pbnRlci5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdPjtcblxuXHRleGVjdXRlUmF3QVNLUXVlcnkoIGFza1F1ZXJ5OnN0cmluZywgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIFNQQVJRTC5SYXdSZXN1bHRzLkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+O1xuXHRleGVjdXRlQVNLUXVlcnkoIGFza1F1ZXJ5OnN0cmluZywgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIGJvb2xlYW4sIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cdGV4ZWN1dGVSYXdTRUxFQ1RRdWVyeSggc2VsZWN0UXVlcnk6c3RyaW5nLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgU1BBUlFMLlJhd1Jlc3VsdHMuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cdGV4ZWN1dGVTRUxFQ1RRdWVyeSggc2VsZWN0UXVlcnk6c3RyaW5nLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgU1BBUlFMLlNFTEVDVFJlc3VsdHMuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cdGV4ZWN1dGVSYXdDT05TVFJVQ1RRdWVyeSggY29uc3RydWN0UXVlcnk6c3RyaW5nLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgc3RyaW5nLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+O1xuXHRleGVjdXRlUmF3REVTQ1JJQkVRdWVyeSggZGVzY3JpYmVRdWVyeTpzdHJpbmcsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBzdHJpbmcsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5cdGV4ZWN1dGVVUERBVEUoIHVwZGF0ZVF1ZXJ5OnN0cmluZywgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxIVFRQLlJlc3BvbnNlLkNsYXNzPjtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kSXNEaXJ0eSggc3VwZXJGdW5jdGlvbjooKSA9PiBib29sZWFuICk6KCkgPT4gYm9vbGVhbiB7XG5cdHJldHVybiBmdW5jdGlvbigpOmJvb2xlYW4ge1xuXHRcdGxldCBpc0RpcnR5OmJvb2xlYW4gPSBzdXBlckZ1bmN0aW9uLmNhbGwoIHRoaXMgKTtcblx0XHRpZiggaXNEaXJ0eSApIHJldHVybiB0cnVlO1xuXG5cdFx0bGV0IGRvY3VtZW50OkNsYXNzID0gdGhpcztcblxuXHRcdGZvciggbGV0IGZyYWdtZW50IG9mIGRvY3VtZW50LmdldEZyYWdtZW50cygpICkge1xuXHRcdFx0aWYoIGZyYWdtZW50LmlzRGlydHkoKSApIHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIENoZWNrIGlmIGFuIGFscmVhZHkgc2F2ZWQgZnJhZ21lbnQgd2FzIHJlbW92ZWRcblx0XHRmb3IoIGxldCBmcmFnbWVudCBvZiBkb2N1bWVudC5fc2F2ZWRGcmFnbWVudHMgKSB7XG5cdFx0XHRpZiggISBkb2N1bWVudC5oYXNGcmFnbWVudCggZnJhZ21lbnQuaWQgKSApIHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kUmV2ZXJ0KCBzdXBlckZ1bmN0aW9uOigpID0+IHZvaWQgKTooKSA9PiB2b2lkIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCk6dm9pZCB7XG5cdFx0bGV0IHBlcnNpc3RlZERvY3VtZW50OkNsYXNzID0gdGhpcztcblx0XHRwZXJzaXN0ZWREb2N1bWVudC5fZnJhZ21lbnRzSW5kZXguY2xlYXIoKTtcblx0XHRmb3IoIGxldCBmcmFnbWVudCBvZiBwZXJzaXN0ZWREb2N1bWVudC5fc2F2ZWRGcmFnbWVudHMgKSB7XG5cdFx0XHRsZXQgc2x1ZzpzdHJpbmcgPSBcInNsdWdcIiBpbiBmcmFnbWVudCA/IChmcmFnbWVudCBhcyBQZXJzaXN0ZWROYW1lZEZyYWdtZW50LkNsYXNzKS5zbHVnIDogZnJhZ21lbnQuaWQ7XG5cblx0XHRcdGZyYWdtZW50LnJldmVydCgpO1xuXHRcdFx0cGVyc2lzdGVkRG9jdW1lbnQuX2ZyYWdtZW50c0luZGV4LnNldCggc2x1ZywgZnJhZ21lbnQgKTtcblx0XHR9XG5cdFx0c3VwZXJGdW5jdGlvbi5jYWxsKCBwZXJzaXN0ZWREb2N1bWVudCApO1xuXHR9O1xufVxuXG5mdW5jdGlvbiBzeW5jU2F2ZWRGcmFnbWVudHMoKTp2b2lkIHtcblx0bGV0IGRvY3VtZW50OkNsYXNzID0gdGhpcztcblx0ZG9jdW1lbnQuX3NhdmVkRnJhZ21lbnRzID0gVXRpbHMuQS5mcm9tKCBkb2N1bWVudC5fZnJhZ21lbnRzSW5kZXgudmFsdWVzKCkgKTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVVSSSggdXJpOnN0cmluZyApOnN0cmluZyB7XG5cdGlmKCBVUkkuVXRpbC5pc0Fic29sdXRlKCB1cmkgKSApIHJldHVybiB1cmk7XG5cblx0bGV0IHNjaGVtYTpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEgPSB0aGlzLl9kb2N1bWVudHMuZ2V0R2VuZXJhbFNjaGVtYSgpO1xuXHRyZXR1cm4gT2JqZWN0U2NoZW1hLlV0aWwucmVzb2x2ZVVSSSggdXJpLCBzY2hlbWEgKTtcbn1cbmZ1bmN0aW9uIGV4dGVuZEFkZFR5cGUoIHN1cGVyRnVuY3Rpb246KCB0eXBlOnN0cmluZyApID0+IHZvaWQgKTooIHR5cGU6c3RyaW5nICkgPT4gdm9pZCB7XG5cdHJldHVybiBmdW5jdGlvbiggdHlwZTpzdHJpbmcgKTp2b2lkIHtcblx0XHR0eXBlID0gcmVzb2x2ZVVSSS5jYWxsKCB0aGlzLCB0eXBlICk7XG5cdFx0c3VwZXJGdW5jdGlvbi5jYWxsKCB0aGlzLCB0eXBlICk7XG5cdH07XG59XG5mdW5jdGlvbiBleHRlbmRIYXNUeXBlKCBzdXBlckZ1bmN0aW9uOiggdHlwZTpzdHJpbmcgKSA9PiBib29sZWFuICk6KCB0eXBlOnN0cmluZyApID0+IGJvb2xlYW4ge1xuXHRyZXR1cm4gZnVuY3Rpb24oIHR5cGU6c3RyaW5nICk6Ym9vbGVhbiB7XG5cdFx0dHlwZSA9IHJlc29sdmVVUkkuY2FsbCggdGhpcywgdHlwZSApO1xuXHRcdHJldHVybiBzdXBlckZ1bmN0aW9uLmNhbGwoIHRoaXMsIHR5cGUgKTtcblx0fTtcbn1cbmZ1bmN0aW9uIGV4dGVuZFJlbW92ZVR5cGUoIHN1cGVyRnVuY3Rpb246KCB0eXBlOnN0cmluZyApID0+IHZvaWQgKTooIHR5cGU6c3RyaW5nICkgPT4gdm9pZCB7XG5cdHJldHVybiBmdW5jdGlvbiggdHlwZTpzdHJpbmcgKTp2b2lkIHtcblx0XHR0eXBlID0gcmVzb2x2ZVVSSS5jYWxsKCB0aGlzLCB0eXBlICk7XG5cdFx0c3VwZXJGdW5jdGlvbi5jYWxsKCB0aGlzLCB0eXBlICk7XG5cdH07XG59XG5cbmZ1bmN0aW9uIGV4dGVuZENyZWF0ZUZyYWdtZW50KCBzdXBlckZ1bmN0aW9uOigpID0+IEZyYWdtZW50LkNsYXNzICk6KCkgPT4gUGVyc2lzdGVkRnJhZ21lbnQuQ2xhc3M7XG5mdW5jdGlvbiBleHRlbmRDcmVhdGVGcmFnbWVudCggc3VwZXJGdW5jdGlvbjooIHNsdWc6c3RyaW5nICkgPT4gRnJhZ21lbnQuQ2xhc3MgKTooIHNsdWc6c3RyaW5nICkgPT4gUGVyc2lzdGVkRnJhZ21lbnQuQ2xhc3M7XG5mdW5jdGlvbiBleHRlbmRDcmVhdGVGcmFnbWVudCggc3VwZXJGdW5jdGlvbjooIG9iamVjdDpPYmplY3QsIHNsdWc6c3RyaW5nICkgPT4gRnJhZ21lbnQuQ2xhc3MgKTooIHNsdWc6c3RyaW5nLCBvYmplY3Q6T2JqZWN0ICkgPT4gUGVyc2lzdGVkRnJhZ21lbnQuQ2xhc3M7XG5mdW5jdGlvbiBleHRlbmRDcmVhdGVGcmFnbWVudCggc3VwZXJGdW5jdGlvbjooIG9iamVjdDpPYmplY3QgKSA9PiBGcmFnbWVudC5DbGFzcyApOiggb2JqZWN0Ok9iamVjdCApID0+IFBlcnNpc3RlZEZyYWdtZW50LkNsYXNzO1xuZnVuY3Rpb24gZXh0ZW5kQ3JlYXRlRnJhZ21lbnQoIHN1cGVyRnVuY3Rpb246KCBzbHVnT3JPYmplY3Q/OmFueSwgc2x1Zz86c3RyaW5nICkgPT4gRnJhZ21lbnQuQ2xhc3MgKTphbnkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIHNsdWdPck9iamVjdD86YW55LCBzbHVnPzpzdHJpbmcgKTphbnkge1xuXHRcdGxldCBmcmFnbWVudDpGcmFnbWVudC5DbGFzcyA9IHN1cGVyRnVuY3Rpb24uY2FsbCggdGhpcywgc2x1Z09yT2JqZWN0LCBzbHVnICk7XG5cdFx0bGV0IGlkOnN0cmluZyA9IGZyYWdtZW50LmlkO1xuXG5cdFx0aWYoIFJERi5VUkkuVXRpbC5pc0JOb2RlSUQoIGlkICkgKSB7XG5cdFx0XHRQZXJzaXN0ZWRGcmFnbWVudC5GYWN0b3J5LmRlY29yYXRlKCBmcmFnbWVudCApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRQZXJzaXN0ZWROYW1lZEZyYWdtZW50LkZhY3RvcnkuZGVjb3JhdGUoIDxOYW1lZEZyYWdtZW50LkNsYXNzPiBmcmFnbWVudCApO1xuXHRcdH1cblx0XHRyZXR1cm4gZnJhZ21lbnQ7XG5cdH07XG59XG5mdW5jdGlvbiBleHRlbmRDcmVhdGVOYW1lZEZyYWdtZW50KCBzdXBlckZ1bmN0aW9uOiggc2x1ZzpzdHJpbmcgKSA9PiBOYW1lZEZyYWdtZW50LkNsYXNzICk6KCBzbHVnOnN0cmluZyApID0+IFBlcnNpc3RlZE5hbWVkRnJhZ21lbnQuQ2xhc3M7XG5mdW5jdGlvbiBleHRlbmRDcmVhdGVOYW1lZEZyYWdtZW50KCBzdXBlckZ1bmN0aW9uOiggb2JqZWN0Ok9iamVjdCwgc2x1ZzpzdHJpbmcgKSA9PiBOYW1lZEZyYWdtZW50LkNsYXNzICk6KCBzbHVnOnN0cmluZywgb2JqZWN0Ok9iamVjdCApID0+IFBlcnNpc3RlZE5hbWVkRnJhZ21lbnQuQ2xhc3M7XG5mdW5jdGlvbiBleHRlbmRDcmVhdGVOYW1lZEZyYWdtZW50KCBzdXBlckZ1bmN0aW9uOiggc2x1Z09yT2JqZWN0OmFueSwgc2x1Zz86c3RyaW5nICkgPT4gTmFtZWRGcmFnbWVudC5DbGFzcyApOmFueSB7XG5cdHJldHVybiBmdW5jdGlvbiggc2x1Z09yT2JqZWN0OmFueSwgc2x1Zz86c3RyaW5nICk6UGVyc2lzdGVkTmFtZWRGcmFnbWVudC5DbGFzcyB7XG5cdFx0bGV0IGZyYWdtZW50Ok5hbWVkRnJhZ21lbnQuQ2xhc3MgPSBzdXBlckZ1bmN0aW9uLmNhbGwoIHRoaXMsIHNsdWdPck9iamVjdCwgc2x1ZyApO1xuXHRcdHJldHVybiBQZXJzaXN0ZWRGcmFnbWVudC5GYWN0b3J5LmRlY29yYXRlKCBmcmFnbWVudCApO1xuXHR9O1xufVxuXG5mdW5jdGlvbiByZWZyZXNoPFQgZXh0ZW5kcyBDbGFzcz4oKTpQcm9taXNlPFsgVCwgSFRUUC5SZXNwb25zZS5DbGFzcyBdPiB7XG5cdHJldHVybiB0aGlzLl9kb2N1bWVudHMucmVmcmVzaCggdGhpcyApO1xufVxuZnVuY3Rpb24gc2F2ZTxUIGV4dGVuZHMgQ2xhc3M+KCk6UHJvbWlzZTxbIFQsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4ge1xuXHRyZXR1cm4gdGhpcy5fZG9jdW1lbnRzLnNhdmUoIHRoaXMgKTtcbn1cbmZ1bmN0aW9uIHNhdmVBbmRSZWZyZXNoPFQgZXh0ZW5kcyBDbGFzcz4oKTpQcm9taXNlPFsgVCwgWyBIVFRQLlJlc3BvbnNlLkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzXSBdPiB7XG5cdHJldHVybiAoPENsYXNzPiB0aGlzKS5fZG9jdW1lbnRzLnNhdmVBbmRSZWZyZXNoPFQ+KCB0aGlzICk7XG59XG5cbmZ1bmN0aW9uIF9kZWxldGUoKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+IHtcblx0cmV0dXJuIHRoaXMuX2RvY3VtZW50cy5kZWxldGUoIHRoaXMuaWQgKTtcbn1cblxuZnVuY3Rpb24gZ2V0RG93bmxvYWRVUkwoKTpQcm9taXNlPHN0cmluZz4ge1xuXHRyZXR1cm4gKDxDbGFzcz4gdGhpcykuX2RvY3VtZW50cy5nZXREb3dubG9hZFVSTCggKDxDbGFzcz4gdGhpcykuaWQgKTtcbn1cblxuZnVuY3Rpb24gYWRkTWVtYmVyKCBtZW1iZXI6UG9pbnRlci5DbGFzcyApOlByb21pc2U8SFRUUC5SZXNwb25zZS5DbGFzcz47XG5mdW5jdGlvbiBhZGRNZW1iZXIoIG1lbWJlclVSSTpzdHJpbmcgKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+O1xuZnVuY3Rpb24gYWRkTWVtYmVyKCBtZW1iZXJPclVyaTphbnkgKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+IHtcblx0cmV0dXJuIHRoaXMuX2RvY3VtZW50cy5hZGRNZW1iZXIoIHRoaXMuaWQsIG1lbWJlck9yVXJpICk7XG59XG5cbmZ1bmN0aW9uIGFkZE1lbWJlcnMoIG1lbWJlcnM6KFBvaW50ZXIuQ2xhc3MgfCBzdHJpbmcpW10gKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+IHtcblx0cmV0dXJuIHRoaXMuX2RvY3VtZW50cy5hZGRNZW1iZXJzKCB0aGlzLmlkLCBtZW1iZXJzICk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNoaWxkPFQgZXh0ZW5kcyBPYmplY3Q+KCBvYmplY3Q6VCwgc2x1ZzpzdHJpbmcsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBUICYgUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5mdW5jdGlvbiBjcmVhdGVDaGlsZDxUIGV4dGVuZHMgT2JqZWN0Piggb2JqZWN0OlQsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBUICYgUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5mdW5jdGlvbiBjcmVhdGVDaGlsZCggc2x1ZzpzdHJpbmcsIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBQZXJzaXN0ZWRQcm90ZWN0ZWREb2N1bWVudC5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdPjtcbmZ1bmN0aW9uIGNyZWF0ZUNoaWxkKCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5mdW5jdGlvbiBjcmVhdGVDaGlsZDxUIGV4dGVuZHMgT2JqZWN0Piggb2JqZWN0T3JTbHVnT3JSZXF1ZXN0T3B0aW9ucz86YW55LCBzbHVnT3JSZXF1ZXN0T3B0aW9ucz86YW55LCByZXF1ZXN0T3B0aW9uczpIVFRQLlJlcXVlc3QuT3B0aW9ucyA9IHt9ICk6UHJvbWlzZTxbIFQgJiBQZXJzaXN0ZWRQcm90ZWN0ZWREb2N1bWVudC5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdPiB7XG5cdHJlcXVlc3RPcHRpb25zID0gSFRUUC5SZXF1ZXN0LlV0aWwuaXNPcHRpb25zKCBvYmplY3RPclNsdWdPclJlcXVlc3RPcHRpb25zICkgPyBvYmplY3RPclNsdWdPclJlcXVlc3RPcHRpb25zIDogSFRUUC5SZXF1ZXN0LlV0aWwuaXNPcHRpb25zKCBzbHVnT3JSZXF1ZXN0T3B0aW9ucyApID8gc2x1Z09yUmVxdWVzdE9wdGlvbnMgOiByZXF1ZXN0T3B0aW9ucztcblx0bGV0IG9iamVjdDpUID0gVXRpbHMuaXNTdHJpbmcoIG9iamVjdE9yU2x1Z09yUmVxdWVzdE9wdGlvbnMgKSB8fCAgSFRUUC5SZXF1ZXN0LlV0aWwuaXNPcHRpb25zKCBvYmplY3RPclNsdWdPclJlcXVlc3RPcHRpb25zICkgfHwgISBvYmplY3RPclNsdWdPclJlcXVlc3RPcHRpb25zID8gPFQ+IHt9IDogb2JqZWN0T3JTbHVnT3JSZXF1ZXN0T3B0aW9ucztcblx0bGV0IHNsdWc6c3RyaW5nID0gVXRpbHMuaXNTdHJpbmcoIG9iamVjdE9yU2x1Z09yUmVxdWVzdE9wdGlvbnMgKSA/IG9iamVjdE9yU2x1Z09yUmVxdWVzdE9wdGlvbnMgOiBVdGlscy5pc1N0cmluZyggc2x1Z09yUmVxdWVzdE9wdGlvbnMgKSA/IHNsdWdPclJlcXVlc3RPcHRpb25zIDogbnVsbDtcblxuXHRyZXR1cm4gKDxDbGFzcz4gdGhpcykuX2RvY3VtZW50cy5jcmVhdGVDaGlsZCggdGhpcy5pZCwgb2JqZWN0LCBzbHVnLCByZXF1ZXN0T3B0aW9ucyApO1xufVxuZnVuY3Rpb24gY3JlYXRlQ2hpbGRBbmRSZXRyaWV2ZTxUIGV4dGVuZHMgT2JqZWN0Piggb2JqZWN0OlQsIHNsdWc6c3RyaW5nLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgVCAmIFBlcnNpc3RlZFByb3RlY3RlZERvY3VtZW50LkNsYXNzLCBbIEhUVFAuUmVzcG9uc2UuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXSBdPjtcbmZ1bmN0aW9uIGNyZWF0ZUNoaWxkQW5kUmV0cmlldmU8VCBleHRlbmRzIE9iamVjdD4oIG9iamVjdDpULCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgVCAmIFBlcnNpc3RlZFByb3RlY3RlZERvY3VtZW50LkNsYXNzLCBbIEhUVFAuUmVzcG9uc2UuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXSBdPjtcbmZ1bmN0aW9uIGNyZWF0ZUNoaWxkQW5kUmV0cmlldmUoIHNsdWc6c3RyaW5nLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQuQ2xhc3MsIFsgSFRUUC5SZXNwb25zZS5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdIF0+O1xuZnVuY3Rpb24gY3JlYXRlQ2hpbGRBbmRSZXRyaWV2ZSggcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIFBlcnNpc3RlZFByb3RlY3RlZERvY3VtZW50LkNsYXNzLCBbIEhUVFAuUmVzcG9uc2UuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXSBdPjtcbmZ1bmN0aW9uIGNyZWF0ZUNoaWxkQW5kUmV0cmlldmU8VCBleHRlbmRzIE9iamVjdD4oIG9iamVjdE9yU2x1Z09yUmVxdWVzdE9wdGlvbnM/OmFueSwgc2x1Z09yUmVxdWVzdE9wdGlvbnM/OmFueSwgcmVxdWVzdE9wdGlvbnM6SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgPSB7fSApOlByb21pc2U8WyBUICYgUGVyc2lzdGVkUHJvdGVjdGVkRG9jdW1lbnQuQ2xhc3MsIFsgSFRUUC5SZXNwb25zZS5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdIF0+IHtcblx0cmVxdWVzdE9wdGlvbnMgPSBIVFRQLlJlcXVlc3QuVXRpbC5pc09wdGlvbnMoIG9iamVjdE9yU2x1Z09yUmVxdWVzdE9wdGlvbnMgKSA/IG9iamVjdE9yU2x1Z09yUmVxdWVzdE9wdGlvbnMgOiBIVFRQLlJlcXVlc3QuVXRpbC5pc09wdGlvbnMoIHNsdWdPclJlcXVlc3RPcHRpb25zICkgPyBzbHVnT3JSZXF1ZXN0T3B0aW9ucyA6IHJlcXVlc3RPcHRpb25zO1xuXHRsZXQgb2JqZWN0OlQgPSBVdGlscy5pc1N0cmluZyggb2JqZWN0T3JTbHVnT3JSZXF1ZXN0T3B0aW9ucyApIHx8ICBIVFRQLlJlcXVlc3QuVXRpbC5pc09wdGlvbnMoIG9iamVjdE9yU2x1Z09yUmVxdWVzdE9wdGlvbnMgKSB8fCAhIG9iamVjdE9yU2x1Z09yUmVxdWVzdE9wdGlvbnMgPyA8VD4ge30gOiBvYmplY3RPclNsdWdPclJlcXVlc3RPcHRpb25zO1xuXHRsZXQgc2x1ZzpzdHJpbmcgPSBVdGlscy5pc1N0cmluZyggb2JqZWN0T3JTbHVnT3JSZXF1ZXN0T3B0aW9ucyApID8gb2JqZWN0T3JTbHVnT3JSZXF1ZXN0T3B0aW9ucyA6IFV0aWxzLmlzU3RyaW5nKCBzbHVnT3JSZXF1ZXN0T3B0aW9ucyApID8gc2x1Z09yUmVxdWVzdE9wdGlvbnMgOiBudWxsO1xuXG5cdHJldHVybiAoPENsYXNzPiB0aGlzKS5fZG9jdW1lbnRzLmNyZWF0ZUNoaWxkQW5kUmV0cmlldmU8VD4oIHRoaXMuaWQsIG9iamVjdCwgc2x1ZywgcmVxdWVzdE9wdGlvbnMgKTtcbn1cblxuXG5mdW5jdGlvbiBjcmVhdGVBY2Nlc3NQb2ludCggYWNjZXNzUG9pbnQ6QWNjZXNzUG9pbnQuQ2xhc3MsIHNsdWc/OnN0cmluZywgcmVxdWVzdE9wdGlvbnM/OkhUVFAuUmVxdWVzdC5PcHRpb25zICk6UHJvbWlzZTxbIFBlcnNpc3RlZEFjY2Vzc1BvaW50LkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+O1xuZnVuY3Rpb24gY3JlYXRlQWNjZXNzUG9pbnQoIGFjY2Vzc1BvaW50OkFjY2Vzc1BvaW50LkNsYXNzLCByZXF1ZXN0T3B0aW9ucz86SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgKTpQcm9taXNlPFsgUGVyc2lzdGVkQWNjZXNzUG9pbnQuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5mdW5jdGlvbiBjcmVhdGVBY2Nlc3NQb2ludCggYWNjZXNzUG9pbnQ6QWNjZXNzUG9pbnQuQ2xhc3MsIHNsdWdPclJlcXVlc3RPcHRpb25zPzphbnksIHJlcXVlc3RPcHRpb25zPzpIVFRQLlJlcXVlc3QuT3B0aW9ucyApOlByb21pc2U8WyBQZXJzaXN0ZWRBY2Nlc3NQb2ludC5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdPiB7XG5cdHJldHVybiB0aGlzLl9kb2N1bWVudHMuY3JlYXRlQWNjZXNzUG9pbnQoIHRoaXMuaWQsIGFjY2Vzc1BvaW50LCBzbHVnT3JSZXF1ZXN0T3B0aW9ucywgcmVxdWVzdE9wdGlvbnMgKTtcbn1cblxuZnVuY3Rpb24gbGlzdENoaWxkcmVuKCk6UHJvbWlzZTxbIENsYXNzW10sIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4ge1xuXHRyZXR1cm4gdGhpcy5fZG9jdW1lbnRzLmxpc3RDaGlsZHJlbiggdGhpcy5pZCApO1xufVxuXG5mdW5jdGlvbiBnZXRDaGlsZHJlbjxUPiggcmV0cmlldmFsUHJlZmVyZW5jZXM/OlJldHJpZXZhbFByZWZlcmVuY2VzLkNsYXNzICk6UHJvbWlzZTxbIFQgJiBDbGFzc1tdLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+IHtcblx0cmV0dXJuIHRoaXMuX2RvY3VtZW50cy5nZXRDaGlsZHJlbiggdGhpcy5pZCwgcmV0cmlldmFsUHJlZmVyZW5jZXMgKTtcbn1cblxuZnVuY3Rpb24gbGlzdE1lbWJlcnMoIGluY2x1ZGVOb25SZWFkYWJsZTpib29sZWFuID0gdHJ1ZSApOlByb21pc2U8WyBDbGFzc1tdLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+IHtcblx0cmV0dXJuIHRoaXMuX2RvY3VtZW50cy5saXN0TWVtYmVycyggdGhpcy5pZCwgaW5jbHVkZU5vblJlYWRhYmxlICk7XG59XG5cbmZ1bmN0aW9uIGdldE1lbWJlcnM8VD4oIGluY2x1ZGVOb25SZWFkYWJsZTpib29sZWFuLCByZXRyaWV2YWxQcmVmZXJlbmNlcz86UmV0cmlldmFsUHJlZmVyZW5jZXMuQ2xhc3MgKTpQcm9taXNlPFsgVCAmIENsYXNzW10sIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5mdW5jdGlvbiBnZXRNZW1iZXJzPFQ+KCByZXRyaWV2YWxQcmVmZXJlbmNlcz86UmV0cmlldmFsUHJlZmVyZW5jZXMuQ2xhc3MgKTpQcm9taXNlPFsgVCAmIENsYXNzW10sIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5mdW5jdGlvbiBnZXRNZW1iZXJzPFQ+KCBub25SZWFkUmV0UHJlZjpib29sZWFuID0gdHJ1ZSwgcmV0cmlldmFsUHJlZmVyZW5jZXM/OlJldHJpZXZhbFByZWZlcmVuY2VzLkNsYXNzICk6UHJvbWlzZTxbIFQgJiBDbGFzc1tdLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+IHtcblx0cmV0dXJuIHRoaXMuX2RvY3VtZW50cy5nZXRNZW1iZXJzKCB0aGlzLmlkLCBub25SZWFkUmV0UHJlZiwgcmV0cmlldmFsUHJlZmVyZW5jZXMgKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlTWVtYmVyKCBtZW1iZXI6UG9pbnRlci5DbGFzcyApOlByb21pc2U8SFRUUC5SZXNwb25zZS5DbGFzcz47XG5mdW5jdGlvbiByZW1vdmVNZW1iZXIoIG1lbWJlclVSSTpzdHJpbmcgKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+O1xuZnVuY3Rpb24gcmVtb3ZlTWVtYmVyKCBtZW1iZXJPclVyaTphbnkgKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+IHtcblx0cmV0dXJuIHRoaXMuX2RvY3VtZW50cy5yZW1vdmVNZW1iZXIoIHRoaXMuaWQsIG1lbWJlck9yVXJpICk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZU1lbWJlcnMoIG1lbWJlcnM6KFBvaW50ZXIuQ2xhc3MgfCBzdHJpbmcpW10gKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+IHtcblx0cmV0dXJuIHRoaXMuX2RvY3VtZW50cy5yZW1vdmVNZW1iZXJzKCB0aGlzLmlkLCBtZW1iZXJzICk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUFsbE1lbWJlcnMoKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+IHtcblx0cmV0dXJuIHRoaXMuX2RvY3VtZW50cy5yZW1vdmVBbGxNZW1iZXJzKCB0aGlzLmlkICk7XG59XG5cbmZ1bmN0aW9uIHVwbG9hZCggZGF0YTpCdWZmZXIsIHNsdWc6c3RyaW5nICk6UHJvbWlzZTxbIFBvaW50ZXIuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5mdW5jdGlvbiB1cGxvYWQoIGRhdGE6QnVmZmVyICk6UHJvbWlzZTxbIFBvaW50ZXIuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5mdW5jdGlvbiB1cGxvYWQoIGRhdGE6QmxvYiwgc2x1ZzpzdHJpbmcgKTpQcm9taXNlPFsgUG9pbnRlci5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdPjtcbmZ1bmN0aW9uIHVwbG9hZCggZGF0YTpCbG9iICk6UHJvbWlzZTxbIFBvaW50ZXIuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT47XG5mdW5jdGlvbiB1cGxvYWQoIGRhdGE6QmxvYiB8IEJ1ZmZlciwgc2x1Zz86c3RyaW5nICk6UHJvbWlzZTxbIFBvaW50ZXIuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4ge1xuXHRyZXR1cm4gdGhpcy5fZG9jdW1lbnRzLnVwbG9hZCggdGhpcy5pZCwgZGF0YSwgc2x1ZyApO1xufVxuXG5mdW5jdGlvbiBleGVjdXRlUmF3QVNLUXVlcnkoIGFza1F1ZXJ5OnN0cmluZywgcmVxdWVzdE9wdGlvbnM6SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgPSB7fSApOlByb21pc2U8WyBTUEFSUUwuUmF3UmVzdWx0cy5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdPiB7XG5cdHJldHVybiB0aGlzLl9kb2N1bWVudHMuZXhlY3V0ZVJhd0FTS1F1ZXJ5KCB0aGlzLmlkLCBhc2tRdWVyeSwgcmVxdWVzdE9wdGlvbnMgKTtcbn1cblxuZnVuY3Rpb24gZXhlY3V0ZUFTS1F1ZXJ5KCBhc2tRdWVyeTpzdHJpbmcsIHJlcXVlc3RPcHRpb25zOkhUVFAuUmVxdWVzdC5PcHRpb25zID0ge30gKTpQcm9taXNlPFsgYm9vbGVhbiwgSFRUUC5SZXNwb25zZS5DbGFzcyBdPiB7XG5cdHJldHVybiB0aGlzLl9kb2N1bWVudHMuZXhlY3V0ZUFTS1F1ZXJ5KCB0aGlzLmlkLCBhc2tRdWVyeSwgcmVxdWVzdE9wdGlvbnMgKTtcbn1cblxuZnVuY3Rpb24gZXhlY3V0ZVJhd1NFTEVDVFF1ZXJ5KCBzZWxlY3RRdWVyeTpzdHJpbmcsIHJlcXVlc3RPcHRpb25zOkhUVFAuUmVxdWVzdC5PcHRpb25zID0ge30gKTpQcm9taXNlPFsgU1BBUlFMLlJhd1Jlc3VsdHMuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4ge1xuXHRyZXR1cm4gdGhpcy5fZG9jdW1lbnRzLmV4ZWN1dGVSYXdTRUxFQ1RRdWVyeSggdGhpcy5pZCwgc2VsZWN0UXVlcnksIHJlcXVlc3RPcHRpb25zICk7XG59XG5cbmZ1bmN0aW9uIGV4ZWN1dGVTRUxFQ1RRdWVyeSggc2VsZWN0UXVlcnk6c3RyaW5nLCByZXF1ZXN0T3B0aW9uczpIVFRQLlJlcXVlc3QuT3B0aW9ucyA9IHt9ICk6UHJvbWlzZTxbIFNQQVJRTC5TRUxFQ1RSZXN1bHRzLkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+IHtcblx0cmV0dXJuIHRoaXMuX2RvY3VtZW50cy5leGVjdXRlU0VMRUNUUXVlcnkoIHRoaXMuaWQsIHNlbGVjdFF1ZXJ5LCByZXF1ZXN0T3B0aW9ucyApO1xufVxuXG5mdW5jdGlvbiBleGVjdXRlUmF3Q09OU1RSVUNUUXVlcnkoIGNvbnN0cnVjdFF1ZXJ5OnN0cmluZywgcmVxdWVzdE9wdGlvbnM6SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgPSB7fSApOlByb21pc2U8WyBzdHJpbmcsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4ge1xuXHRyZXR1cm4gdGhpcy5fZG9jdW1lbnRzLmV4ZWN1dGVSYXdDT05TVFJVQ1RRdWVyeSggdGhpcy5pZCwgY29uc3RydWN0UXVlcnksIHJlcXVlc3RPcHRpb25zICk7XG59XG5cbmZ1bmN0aW9uIGV4ZWN1dGVSYXdERVNDUklCRVF1ZXJ5KCBkZXNjcmliZVF1ZXJ5OnN0cmluZywgcmVxdWVzdE9wdGlvbnM6SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgPSB7fSApOlByb21pc2U8WyBzdHJpbmcsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4ge1xuXHRyZXR1cm4gdGhpcy5fZG9jdW1lbnRzLmV4ZWN1dGVSYXdERVNDUklCRVF1ZXJ5KCB0aGlzLmlkLCBkZXNjcmliZVF1ZXJ5LCByZXF1ZXN0T3B0aW9ucyApO1xufVxuXG5mdW5jdGlvbiBleGVjdXRlVVBEQVRFKCB1cGRhdGVRdWVyeTpzdHJpbmcsIHJlcXVlc3RPcHRpb25zOkhUVFAuUmVxdWVzdC5PcHRpb25zID0ge30gKTpQcm9taXNlPFsgc3RyaW5nLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+IHtcblx0cmV0dXJuIHRoaXMuX2RvY3VtZW50cy5leGVjdXRlVVBEQVRFKCB0aGlzLmlkLCB1cGRhdGVRdWVyeSwgcmVxdWVzdE9wdGlvbnMgKTtcbn1cblxuZXhwb3J0IGNsYXNzIEZhY3Rvcnkge1xuXHRzdGF0aWMgaGFzQ2xhc3NQcm9wZXJ0aWVzKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIFV0aWxzLmhhc1Byb3BlcnR5RGVmaW5lZCggb2JqZWN0LCBcIl9kb2N1bWVudHNcIiApXG5cdFx0XHQmJiBVdGlscy5oYXNQcm9wZXJ0eURlZmluZWQoIG9iamVjdCwgXCJfZXRhZ1wiIClcblxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJyZWZyZXNoXCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJzYXZlXCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJzYXZlQW5kUmVmcmVzaFwiIClcblx0XHRcdCYmIFV0aWxzLmhhc0Z1bmN0aW9uKCBvYmplY3QsIFwiZGVsZXRlXCIgKVxuXG5cdFx0XHQmJiBVdGlscy5oYXNGdW5jdGlvbiggb2JqZWN0LCBcImdldERvd25sb2FkVVJMXCIgKVxuXG5cdFx0XHQmJiBVdGlscy5oYXNGdW5jdGlvbiggb2JqZWN0LCBcImFkZE1lbWJlclwiIClcblx0XHRcdCYmIFV0aWxzLmhhc0Z1bmN0aW9uKCBvYmplY3QsIFwiYWRkTWVtYmVyc1wiIClcblx0XHRcdCYmIFV0aWxzLmhhc0Z1bmN0aW9uKCBvYmplY3QsIFwiY3JlYXRlQWNjZXNzUG9pbnRcIiApXG5cdFx0XHQmJiBVdGlscy5oYXNGdW5jdGlvbiggb2JqZWN0LCBcImNyZWF0ZUNoaWxkXCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJjcmVhdGVDaGlsZEFuZFJldHJpZXZlXCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJnZXRDaGlsZHJlblwiIClcblx0XHRcdCYmIFV0aWxzLmhhc0Z1bmN0aW9uKCBvYmplY3QsIFwiZ2V0TWVtYmVyc1wiIClcblx0XHRcdCYmIFV0aWxzLmhhc0Z1bmN0aW9uKCBvYmplY3QsIFwibGlzdENoaWxkcmVuXCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJsaXN0TWVtYmVyc1wiIClcblx0XHRcdCYmIFV0aWxzLmhhc0Z1bmN0aW9uKCBvYmplY3QsIFwicmVtb3ZlTWVtYmVyXCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJyZW1vdmVNZW1iZXJzXCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJyZW1vdmVBbGxNZW1iZXJzXCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJ1cGxvYWRcIiApXG5cblx0XHRcdCYmIFV0aWxzLmhhc0Z1bmN0aW9uKCBvYmplY3QsIFwiZXhlY3V0ZVJhd0FTS1F1ZXJ5XCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJleGVjdXRlQVNLUXVlcnlcIiApXG5cdFx0XHQmJiBVdGlscy5oYXNGdW5jdGlvbiggb2JqZWN0LCBcImV4ZWN1dGVSYXdTRUxFQ1RRdWVyeVwiIClcblx0XHRcdCYmIFV0aWxzLmhhc0Z1bmN0aW9uKCBvYmplY3QsIFwiZXhlY3V0ZVNFTEVDVFF1ZXJ5XCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJleGVjdXRlUmF3REVTQ1JJQkVRdWVyeVwiIClcblx0XHRcdCYmIFV0aWxzLmhhc0Z1bmN0aW9uKCBvYmplY3QsIFwiZXhlY3V0ZVJhd0NPTlNUUlVDVFF1ZXJ5XCIgKVxuXHRcdFx0JiYgVXRpbHMuaGFzRnVuY3Rpb24oIG9iamVjdCwgXCJleGVjdXRlVVBEQVRFXCIgKVxuXHRcdFx0O1xuXHR9XG5cblx0c3RhdGljIGlzKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIEZhY3RvcnkuaGFzQ2xhc3NQcm9wZXJ0aWVzKCBvYmplY3QgKVxuXHRcdFx0JiYgRG9jdW1lbnQuRmFjdG9yeS5pcyggb2JqZWN0ICk7XG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlKCB1cmk6c3RyaW5nLCBkb2N1bWVudHM6RG9jdW1lbnRzLCBzbmFwc2hvdDpPYmplY3QgPSB7fSApOkNsYXNzIHtcblx0XHRsZXQgZG9jdW1lbnQ6RG9jdW1lbnQuQ2xhc3MgPSBEb2N1bWVudC5GYWN0b3J5LmNyZWF0ZSgpO1xuXHRcdGRvY3VtZW50LmlkID0gdXJpO1xuXG5cdFx0cmV0dXJuIEZhY3RvcnkuZGVjb3JhdGUoIGRvY3VtZW50LCBkb2N1bWVudHMsIHNuYXBzaG90ICk7XG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlRnJvbTxUIGV4dGVuZHMgT2JqZWN0Piggb2JqZWN0OlQsIHVyaTpzdHJpbmcsIGRvY3VtZW50czpEb2N1bWVudHMsIHNuYXBzaG90Ok9iamVjdCA9IHt9ICk6Q2xhc3Mge1xuXHRcdGxldCBkb2N1bWVudDpEb2N1bWVudC5DbGFzcyA9IERvY3VtZW50LkZhY3RvcnkuY3JlYXRlRnJvbSggb2JqZWN0ICk7XG5cdFx0ZG9jdW1lbnQuaWQgPSB1cmk7XG5cblx0XHRyZXR1cm4gRmFjdG9yeS5kZWNvcmF0ZSggZG9jdW1lbnQsIGRvY3VtZW50cywgc25hcHNob3QgKTtcblx0fVxuXG5cdHN0YXRpYyBkZWNvcmF0ZTxUIGV4dGVuZHMgT2JqZWN0PiggZG9jdW1lbnQ6VCwgZG9jdW1lbnRzOkRvY3VtZW50cywgc25hcHNob3Q6T2JqZWN0ID0ge30gKTpUICYgQ2xhc3Mge1xuXHRcdERvY3VtZW50LkZhY3RvcnkuZGVjb3JhdGUoIGRvY3VtZW50ICk7XG5cdFx0UGVyc2lzdGVkUmVzb3VyY2UuRmFjdG9yeS5kZWNvcmF0ZSggZG9jdW1lbnQsIHNuYXBzaG90ICk7XG5cblx0XHRpZiggRmFjdG9yeS5oYXNDbGFzc1Byb3BlcnRpZXMoIGRvY3VtZW50ICkgKSByZXR1cm4gPGFueT4gZG9jdW1lbnQ7XG5cblx0XHRsZXQgcGVyc2lzdGVkRG9jdW1lbnQ6Q2xhc3MgPSA8YW55PiBkb2N1bWVudDtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBwZXJzaXN0ZWREb2N1bWVudCwge1xuXHRcdFx0XCJfZG9jdW1lbnRzXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogZG9jdW1lbnRzLFxuXHRcdFx0fSxcblx0XHRcdFwiX2V0YWdcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IG51bGwsXG5cdFx0XHR9LFxuXHRcdFx0XCJfc2F2ZWRGcmFnbWVudHNcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IFtdLFxuXHRcdFx0fSxcblx0XHRcdFwiX3N5bmNTYXZlZEZyYWdtZW50c1wiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IHN5bmNTYXZlZEZyYWdtZW50cyxcblx0XHRcdH0sXG5cblx0XHRcdFwiYWRkVHlwZVwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IGV4dGVuZEFkZFR5cGUoIHBlcnNpc3RlZERvY3VtZW50LmFkZFR5cGUgKSxcblx0XHRcdH0sXG5cdFx0XHRcImhhc1R5cGVcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogZmFsc2UsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBleHRlbmRIYXNUeXBlKCBwZXJzaXN0ZWREb2N1bWVudC5oYXNUeXBlICksXG5cdFx0XHR9LFxuXHRcdFx0XCJyZW1vdmVUeXBlXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogZXh0ZW5kUmVtb3ZlVHlwZSggcGVyc2lzdGVkRG9jdW1lbnQucmVtb3ZlVHlwZSApLFxuXHRcdFx0fSxcblxuXHRcdFx0XCJoYXNQb2ludGVyXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogKGZ1bmN0aW9uKCk6KCBpZDpzdHJpbmcgKSA9PiBib29sZWFuIHtcblx0XHRcdFx0XHRsZXQgc3VwZXJGdW5jdGlvbjooIGlkOnN0cmluZyApID0+IGJvb2xlYW4gPSBwZXJzaXN0ZWREb2N1bWVudC5oYXNQb2ludGVyO1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbiggaWQ6c3RyaW5nICk6Ym9vbGVhbiB7XG5cdFx0XHRcdFx0XHRpZiggUkRGLlVSSS5VdGlsLmlzUHJlZml4ZWQoIGlkICkgKSB7XG5cdFx0XHRcdFx0XHRcdGlkID0gT2JqZWN0U2NoZW1hLkRpZ2VzdGVyLnJlc29sdmVQcmVmaXhlZFVSSSggaWQsICg8Q2xhc3M+IHRoaXMpLl9kb2N1bWVudHMuZ2V0R2VuZXJhbFNjaGVtYSgpICk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmKCBzdXBlckZ1bmN0aW9uLmNhbGwoIHRoaXMsIGlkICkgKSByZXR1cm4gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuICEgVVJJLlV0aWwuaXNCTm9kZUlEKCBpZCApICYmICg8Q2xhc3M+IHRoaXMpLl9kb2N1bWVudHMuaGFzUG9pbnRlciggaWQgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9KSgpLFxuXHRcdFx0fSxcblx0XHRcdFwiZ2V0UG9pbnRlclwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IChmdW5jdGlvbigpOiggaWQ6c3RyaW5nICkgPT4gUG9pbnRlci5DbGFzcyB7XG5cdFx0XHRcdFx0bGV0IHN1cGVyRnVuY3Rpb246KCBpZDpzdHJpbmcgKSA9PiBQb2ludGVyLkNsYXNzID0gcGVyc2lzdGVkRG9jdW1lbnQuZ2V0UG9pbnRlcjtcblx0XHRcdFx0XHRsZXQgaW5TY29wZUZ1bmN0aW9uOiggaWQ6c3RyaW5nICkgPT4gYm9vbGVhbiA9IHBlcnNpc3RlZERvY3VtZW50LmluU2NvcGU7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBpZDpzdHJpbmcgKTpQb2ludGVyLkNsYXNzIHtcblx0XHRcdFx0XHRcdGlmKCBSREYuVVJJLlV0aWwuaXNQcmVmaXhlZCggaWQgKSApIHtcblx0XHRcdFx0XHRcdFx0aWQgPSBPYmplY3RTY2hlbWEuRGlnZXN0ZXIucmVzb2x2ZVByZWZpeGVkVVJJKCBpZCwgKDxDbGFzcz4gdGhpcykuX2RvY3VtZW50cy5nZXRHZW5lcmFsU2NoZW1hKCkgKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYoIGluU2NvcGVGdW5jdGlvbi5jYWxsKCB0aGlzLCBpZCApICkgcmV0dXJuIHN1cGVyRnVuY3Rpb24uY2FsbCggdGhpcywgaWQgKTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuICg8Q2xhc3M+IHRoaXMpLl9kb2N1bWVudHMuZ2V0UG9pbnRlciggaWQgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9KSgpLFxuXHRcdFx0fSxcblx0XHRcdFwiaW5TY29wZVwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IChmdW5jdGlvbigpOiggaWRPclBvaW50ZXI6YW55ICkgPT4gYm9vbGVhbiB7XG5cdFx0XHRcdFx0bGV0IHN1cGVyRnVuY3Rpb246KCBpZE9yUG9pbnRlcjphbnkgKSA9PiBib29sZWFuID0gcGVyc2lzdGVkRG9jdW1lbnQuaW5TY29wZTtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGlkT3JQb2ludGVyOmFueSApOmJvb2xlYW4ge1xuXHRcdFx0XHRcdFx0bGV0IHVyaTpzdHJpbmcgPSBQb2ludGVyLkZhY3RvcnkuaXMoIGlkT3JQb2ludGVyICkgPyBpZE9yUG9pbnRlci5pZCA6IGlkT3JQb2ludGVyO1xuXHRcdFx0XHRcdFx0aWYoIFJERi5VUkkuVXRpbC5pc1ByZWZpeGVkKCB1cmkgKSApIHtcblx0XHRcdFx0XHRcdFx0dXJpID0gT2JqZWN0U2NoZW1hLkRpZ2VzdGVyLnJlc29sdmVQcmVmaXhlZFVSSSggdXJpLCAoPENsYXNzPiB0aGlzKS5fZG9jdW1lbnRzLmdldEdlbmVyYWxTY2hlbWEoKSApO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiggc3VwZXJGdW5jdGlvbi5jYWxsKCB0aGlzLCB1cmkgKSApIHJldHVybiB0cnVlO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gKDxDbGFzcz4gdGhpcykuX2RvY3VtZW50cy5pblNjb3BlKCB1cmkgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9KSgpLFxuXHRcdFx0fSxcblx0XHRcdFwicmVmcmVzaFwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IHJlZnJlc2gsXG5cdFx0XHR9LFxuXHRcdFx0XCJzYXZlXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogc2F2ZSxcblx0XHRcdH0sXG5cdFx0XHRcInNhdmVBbmRSZWZyZXNoXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogc2F2ZUFuZFJlZnJlc2gsXG5cdFx0XHR9LFxuXHRcdFx0XCJkZWxldGVcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogZmFsc2UsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBfZGVsZXRlLFxuXHRcdFx0fSxcblxuXHRcdFx0XCJnZXREb3dubG9hZFVSTFwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IGdldERvd25sb2FkVVJMLFxuXHRcdFx0fSxcblxuXHRcdFx0XCJhZGRNZW1iZXJcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogZmFsc2UsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBhZGRNZW1iZXIsXG5cdFx0XHR9LFxuXHRcdFx0XCJhZGRNZW1iZXJzXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogYWRkTWVtYmVycyxcblx0XHRcdH0sXG5cdFx0XHRcImNyZWF0ZUNoaWxkXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogY3JlYXRlQ2hpbGQsXG5cdFx0XHR9LFxuXHRcdFx0XCJjcmVhdGVDaGlsZEFuZFJldHJpZXZlXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogY3JlYXRlQ2hpbGRBbmRSZXRyaWV2ZSxcblx0XHRcdH0sXG5cdFx0XHRcImNyZWF0ZUFjY2Vzc1BvaW50XCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogY3JlYXRlQWNjZXNzUG9pbnQsXG5cdFx0XHR9LFxuXHRcdFx0XCJsaXN0Q2hpbGRyZW5cIjoge1xuXHRcdFx0XHR3cml0YWJsZTogZmFsc2UsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBsaXN0Q2hpbGRyZW4sXG5cdFx0XHR9LFxuXHRcdFx0XCJnZXRDaGlsZHJlblwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IGdldENoaWxkcmVuLFxuXHRcdFx0fSxcblx0XHRcdFwibGlzdE1lbWJlcnNcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogZmFsc2UsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBsaXN0TWVtYmVycyxcblx0XHRcdH0sXG5cdFx0XHRcImdldE1lbWJlcnNcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogZmFsc2UsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBnZXRNZW1iZXJzLFxuXHRcdFx0fSxcblx0XHRcdFwicmVtb3ZlTWVtYmVyXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogcmVtb3ZlTWVtYmVyLFxuXHRcdFx0fSxcblx0XHRcdFwicmVtb3ZlTWVtYmVyc1wiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IHJlbW92ZU1lbWJlcnMsXG5cdFx0XHR9LFxuXHRcdFx0XCJyZW1vdmVBbGxNZW1iZXJzXCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogcmVtb3ZlQWxsTWVtYmVycyxcblx0XHRcdH0sXG5cdFx0XHRcInVwbG9hZFwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IHVwbG9hZCxcblx0XHRcdH0sXG5cblx0XHRcdFwiZXhlY3V0ZVJhd0FTS1F1ZXJ5XCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogZXhlY3V0ZVJhd0FTS1F1ZXJ5LFxuXHRcdFx0fSxcblx0XHRcdFwiZXhlY3V0ZUFTS1F1ZXJ5XCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogZXhlY3V0ZUFTS1F1ZXJ5LFxuXHRcdFx0fSxcblx0XHRcdFwiZXhlY3V0ZVJhd1NFTEVDVFF1ZXJ5XCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogZXhlY3V0ZVJhd1NFTEVDVFF1ZXJ5LFxuXHRcdFx0fSxcblx0XHRcdFwiZXhlY3V0ZVNFTEVDVFF1ZXJ5XCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogZXhlY3V0ZVNFTEVDVFF1ZXJ5LFxuXHRcdFx0fSxcblx0XHRcdFwiZXhlY3V0ZVJhd0NPTlNUUlVDVFF1ZXJ5XCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogZXhlY3V0ZVJhd0NPTlNUUlVDVFF1ZXJ5LFxuXHRcdFx0fSxcblx0XHRcdFwiZXhlY3V0ZVJhd0RFU0NSSUJFUXVlcnlcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogZmFsc2UsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBleGVjdXRlUmF3REVTQ1JJQkVRdWVyeSxcblx0XHRcdH0sXG5cdFx0XHRcImV4ZWN1dGVVUERBVEVcIjoge1xuXHRcdFx0XHR3cml0YWJsZTogZmFsc2UsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBleGVjdXRlVVBEQVRFLFxuXHRcdFx0fSxcblxuXHRcdFx0XCJjcmVhdGVGcmFnbWVudFwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IGV4dGVuZENyZWF0ZUZyYWdtZW50KCBwZXJzaXN0ZWREb2N1bWVudC5jcmVhdGVGcmFnbWVudCApLFxuXHRcdFx0fSxcblx0XHRcdFwiY3JlYXRlTmFtZWRGcmFnbWVudFwiOiB7XG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IGV4dGVuZENyZWF0ZU5hbWVkRnJhZ21lbnQoIHBlcnNpc3RlZERvY3VtZW50LmNyZWF0ZU5hbWVkRnJhZ21lbnQgKSxcblx0XHRcdH0sXG5cblx0XHRcdC8vIE92ZXJ3cml0ZSBQZXJzaXN0ZWRSZXNvdXJjZS5pc0RpcnR5IHRvIHRha2UgaW50byBhY2NvdW50IGZyYWdtZW50cyBzdGF0ZVxuXHRcdFx0XCJpc0RpcnR5XCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogZXh0ZW5kSXNEaXJ0eSggcGVyc2lzdGVkRG9jdW1lbnQuaXNEaXJ0eSApLFxuXHRcdFx0fSxcblx0XHRcdFwicmV2ZXJ0XCI6IHtcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogZXh0ZW5kUmV2ZXJ0KCBwZXJzaXN0ZWREb2N1bWVudC5yZXZlcnQgKSxcblx0XHRcdH0sXG5cdFx0fSApO1xuXG5cdFx0cmV0dXJuIDxhbnk+IHBlcnNpc3RlZERvY3VtZW50O1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0ICogYXMgTlMgZnJvbSBcIi4vTlNcIjtcbmltcG9ydCAqIGFzIE9iamVjdFNjaGVtYSBmcm9tIFwiLi9PYmplY3RTY2hlbWFcIjtcbmltcG9ydCAqIGFzIFBlcnNpc3RlZERvY3VtZW50IGZyb20gXCIuL1BlcnNpc3RlZERvY3VtZW50XCI7XG5pbXBvcnQgKiBhcyBSZXNvdXJjZSBmcm9tIFwiLi9SZXNvdXJjZVwiO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vVXRpbHNcIjtcblxuZXhwb3J0IGNvbnN0IFJERl9DTEFTUzpzdHJpbmcgPSBOUy5DLkNsYXNzLlJERlJlcHJlc2VudGF0aW9uO1xuXG5leHBvcnQgY29uc3QgU0NIRU1BOk9iamVjdFNjaGVtYS5DbGFzcyA9IHtcblx0XCJtZWRpYVR5cGVcIjoge1xuXHRcdFwiQGlkXCI6IE5TLkMuUHJlZGljYXRlLm1lZGlhVHlwZSxcblx0XHRcIkB0eXBlXCI6IE5TLlhTRC5EYXRhVHlwZS5zdHJpbmcsXG5cdH0sXG5cdFwic2l6ZVwiOiB7XG5cdFx0XCJAaWRcIjogTlMuQy5QcmVkaWNhdGUuc2l6ZSxcblx0XHRcIkB0eXBlXCI6IE5TLlhTRC5EYXRhVHlwZS5sb25nLFxuXHR9LFxufTtcblxuZXhwb3J0IGludGVyZmFjZSBDbGFzcyBleHRlbmRzIFBlcnNpc3RlZERvY3VtZW50LkNsYXNzIHtcblx0bWVkaWFUeXBlOnN0cmluZztcblx0c2l6ZTpudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBGYWN0b3J5IHtcblx0c3RhdGljIGhhc0NsYXNzUHJvcGVydGllcyggb2JqZWN0Ok9iamVjdCApOmJvb2xlYW4ge1xuXHRcdHJldHVybiBVdGlscy5oYXNQcm9wZXJ0eURlZmluZWQoIG9iamVjdCwgXCJtZWRpYVR5cGVcIiApXG5cdFx0XHQmJiBVdGlscy5oYXNQcm9wZXJ0eURlZmluZWQoIG9iamVjdCwgXCJzaXplXCIgKTtcblx0fVxuXG5cdHN0YXRpYyBpcyggb2JqZWN0Ok9iamVjdCApOmJvb2xlYW4ge1xuXHRcdHJldHVybiBGYWN0b3J5Lmhhc0NsYXNzUHJvcGVydGllcyggb2JqZWN0IClcblx0XHRcdCYmIFBlcnNpc3RlZERvY3VtZW50LkZhY3RvcnkuaXMoIG9iamVjdCApXG5cdFx0XHQmJiAoPFBlcnNpc3RlZERvY3VtZW50LkNsYXNzPiBvYmplY3QpLmhhc1R5cGUoIFJERl9DTEFTUyApXG5cdFx0XHQ7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xhc3M7XG4iLCJpbXBvcnQgKiBhcyBBcHBSb2xlIGZyb20gXCIuL0FwcC9Sb2xlXCI7XG5pbXBvcnQgKiBhcyBBUElEZXNjcmlwdGlvbiBmcm9tIFwiLi9BUElEZXNjcmlwdGlvblwiO1xuaW1wb3J0ICogYXMgQXV0aCBmcm9tIFwiLi9BdXRoXCI7XG5pbXBvcnQgKiBhcyBCbGFua05vZGUgZnJvbSBcIi4vQmxhbmtOb2RlXCI7XG5pbXBvcnQgQ29udGV4dCBmcm9tIFwiLi9Db250ZXh0XCI7XG5pbXBvcnQgKiBhcyBEb2N1bWVudCBmcm9tIFwiLi9Eb2N1bWVudFwiO1xuaW1wb3J0IERvY3VtZW50cyBmcm9tIFwiLi9Eb2N1bWVudHNcIjtcbmltcG9ydCAqIGFzIEVycm9yIGZyb20gXCIuL0xEUC9FcnJvclwiO1xuaW1wb3J0ICogYXMgRXJyb3JSZXNwb25zZSBmcm9tIFwiLi9MRFAvRXJyb3JSZXNwb25zZVwiO1xuaW1wb3J0ICogYXMgRXJyb3JzIGZyb20gXCIuL0Vycm9yc1wiO1xuaW1wb3J0ICogYXMgTERQIGZyb20gXCIuL0xEUFwiO1xuaW1wb3J0ICogYXMgTlMgZnJvbSBcIi4vTlNcIjtcbmltcG9ydCAqIGFzIE9iamVjdFNjaGVtYSBmcm9tIFwiLi9PYmplY3RTY2hlbWFcIjtcbmltcG9ydCAqIGFzIFByb3RlY3RlZERvY3VtZW50IGZyb20gXCIuL1Byb3RlY3RlZERvY3VtZW50XCI7XG5pbXBvcnQgKiBhcyBSREYgZnJvbSBcIi4vUkRGXCI7XG5pbXBvcnQgKiBhcyBSREZSZXByZXNlbnRhdGlvbiBmcm9tIFwiLi9SREZSZXByZXNlbnRhdGlvblwiO1xuXG5leHBvcnQgY2xhc3MgQ2xhc3MgaW1wbGVtZW50cyBDb250ZXh0IHtcblx0YXV0aDpBdXRoLkNsYXNzO1xuXHRkb2N1bWVudHM6RG9jdW1lbnRzO1xuXG5cdGdldCBwYXJlbnRDb250ZXh0KCk6Q29udGV4dCB7IHJldHVybiBudWxsOyB9XG5cblx0cHJvdGVjdGVkIHNldHRpbmdzOk1hcDxzdHJpbmcsIGFueT47XG5cblx0cHJvdGVjdGVkIGdlbmVyYWxPYmplY3RTY2hlbWE6T2JqZWN0U2NoZW1hLkRpZ2VzdGVkT2JqZWN0U2NoZW1hO1xuXHRwcm90ZWN0ZWQgdHlwZU9iamVjdFNjaGVtYU1hcDpNYXA8c3RyaW5nLCBPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWE+O1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMuc2V0dGluZ3MgPSBuZXcgTWFwPHN0cmluZywgYW55PigpO1xuXG5cdFx0dGhpcy5nZW5lcmFsT2JqZWN0U2NoZW1hID0gbmV3IE9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSgpO1xuXHRcdHRoaXMudHlwZU9iamVjdFNjaGVtYU1hcCA9IG5ldyBNYXA8c3RyaW5nLCBPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWE+KCk7XG5cblx0XHR0aGlzLmF1dGggPSBudWxsO1xuXHRcdHRoaXMuZG9jdW1lbnRzID0gbmV3IERvY3VtZW50cyggdGhpcyApO1xuXG5cdFx0dGhpcy5yZWdpc3RlckRlZmF1bHRPYmplY3RTY2hlbWFzKCk7XG5cdH1cblxuXHRnZXRCYXNlVVJJKCk6c3RyaW5nIHtcblx0XHRyZXR1cm4gdGhpcy5yZXNvbHZlKCBcIlwiICk7XG5cdH1cblxuXHRyZXNvbHZlKCByZWxhdGl2ZVVSSTpzdHJpbmcgKTpzdHJpbmcge1xuXHRcdHJldHVybiByZWxhdGl2ZVVSSTtcblx0fVxuXG5cdGhhc1NldHRpbmcoIG5hbWU6c3RyaW5nICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuICggdGhpcy5zZXR0aW5ncy5oYXMoIG5hbWUgKSApXG5cdFx0XHR8fCAoICEgISB0aGlzLnBhcmVudENvbnRleHQgJiYgdGhpcy5wYXJlbnRDb250ZXh0Lmhhc1NldHRpbmcoIG5hbWUgKSApO1xuXHR9XG5cblx0Z2V0U2V0dGluZyggbmFtZTpzdHJpbmcgKTphbnkge1xuXHRcdGlmKCB0aGlzLnNldHRpbmdzLmhhcyggbmFtZSApICkgcmV0dXJuIHRoaXMuc2V0dGluZ3MuZ2V0KCBuYW1lICk7XG5cdFx0aWYoIHRoaXMucGFyZW50Q29udGV4dCAmJiB0aGlzLnBhcmVudENvbnRleHQuaGFzU2V0dGluZyggbmFtZSApICkgcmV0dXJuIHRoaXMucGFyZW50Q29udGV4dC5nZXRTZXR0aW5nKCBuYW1lICk7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRzZXRTZXR0aW5nKCBuYW1lOnN0cmluZywgdmFsdWU6YW55ICk6dm9pZCB7XG5cdFx0dGhpcy5zZXR0aW5ncy5zZXQoIG5hbWUsIHZhbHVlICk7XG5cdH1cblxuXHRkZWxldGVTZXR0aW5nKCBuYW1lOnN0cmluZyApOnZvaWQge1xuXHRcdHRoaXMuc2V0dGluZ3MuZGVsZXRlKCBuYW1lICk7XG5cdH1cblxuXHRoYXNPYmplY3RTY2hlbWEoIHR5cGU6c3RyaW5nICk6Ym9vbGVhbiB7XG5cdFx0dHlwZSA9IHRoaXMucmVzb2x2ZVR5cGVVUkkoIHR5cGUgKTtcblx0XHRpZiggdGhpcy50eXBlT2JqZWN0U2NoZW1hTWFwLmhhcyggdHlwZSApICkgcmV0dXJuIHRydWU7XG5cdFx0aWYoICEgISB0aGlzLnBhcmVudENvbnRleHQgJiYgdGhpcy5wYXJlbnRDb250ZXh0Lmhhc09iamVjdFNjaGVtYSggdHlwZSApICkgcmV0dXJuIHRydWU7XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRnZXRPYmplY3RTY2hlbWEoIHR5cGU6c3RyaW5nID0gbnVsbCApOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSB7XG5cdFx0aWYoICEgISB0eXBlICkge1xuXHRcdFx0Ly8gVHlwZSBzcGVjaWZpYyBzY2hlbWFcblx0XHRcdHR5cGUgPSB0aGlzLnJlc29sdmVUeXBlVVJJKCB0eXBlICk7XG5cdFx0XHRpZiggdGhpcy50eXBlT2JqZWN0U2NoZW1hTWFwLmhhcyggdHlwZSApICkgcmV0dXJuIHRoaXMudHlwZU9iamVjdFNjaGVtYU1hcC5nZXQoIHR5cGUgKTtcblx0XHRcdGlmKCAhICEgdGhpcy5wYXJlbnRDb250ZXh0ICYmIHRoaXMucGFyZW50Q29udGV4dC5oYXNPYmplY3RTY2hlbWEoIHR5cGUgKSApIHJldHVybiB0aGlzLnBhcmVudENvbnRleHQuZ2V0T2JqZWN0U2NoZW1hKCB0eXBlICk7XG5cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBHZW5lcmFsIHNjaGVtYVxuXHRcdFx0aWYoICEgISB0aGlzLmdlbmVyYWxPYmplY3RTY2hlbWEgKSByZXR1cm4gdGhpcy5nZW5lcmFsT2JqZWN0U2NoZW1hO1xuXHRcdFx0aWYoICEgISB0aGlzLnBhcmVudENvbnRleHQgKSByZXR1cm4gdGhpcy5wYXJlbnRDb250ZXh0LmdldE9iamVjdFNjaGVtYSgpO1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxTdGF0ZUVycm9yKCk7XG5cdFx0fVxuXHR9XG5cblx0ZXh0ZW5kT2JqZWN0U2NoZW1hKCB0eXBlOnN0cmluZywgb2JqZWN0U2NoZW1hOk9iamVjdFNjaGVtYS5DbGFzcyApOnZvaWQ7XG5cdGV4dGVuZE9iamVjdFNjaGVtYSggb2JqZWN0U2NoZW1hOk9iamVjdFNjaGVtYS5DbGFzcyApOnZvaWQ7XG5cdGV4dGVuZE9iamVjdFNjaGVtYSggdHlwZU9yT2JqZWN0U2NoZW1hOmFueSwgb2JqZWN0U2NoZW1hOk9iamVjdFNjaGVtYS5DbGFzcyA9IG51bGwgKTp2b2lkIHtcblx0XHRsZXQgdHlwZTpzdHJpbmcgPSBvYmplY3RTY2hlbWEgPyB0eXBlT3JPYmplY3RTY2hlbWEgOiBudWxsO1xuXHRcdG9iamVjdFNjaGVtYSA9ICEgISBvYmplY3RTY2hlbWEgPyBvYmplY3RTY2hlbWEgOiB0eXBlT3JPYmplY3RTY2hlbWE7XG5cdFx0bGV0IGRpZ2VzdGVkU2NoZW1hOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSA9IE9iamVjdFNjaGVtYS5EaWdlc3Rlci5kaWdlc3RTY2hlbWEoIG9iamVjdFNjaGVtYSApO1xuXG5cdFx0aWYoICEgdHlwZSApIHtcblx0XHRcdHRoaXMuZXh0ZW5kR2VuZXJhbE9iamVjdFNjaGVtYSggZGlnZXN0ZWRTY2hlbWEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5leHRlbmRUeXBlT2JqZWN0U2NoZW1hKCBkaWdlc3RlZFNjaGVtYSwgdHlwZSApO1xuXHRcdH1cblx0fVxuXG5cdGNsZWFyT2JqZWN0U2NoZW1hKCB0eXBlOnN0cmluZyA9IG51bGwgKTp2b2lkIHtcblx0XHRpZiggISB0eXBlICkge1xuXHRcdFx0dGhpcy5nZW5lcmFsT2JqZWN0U2NoZW1hID0gISAhIHRoaXMucGFyZW50Q29udGV4dCA/IG51bGwgOiBuZXcgT2JqZWN0U2NoZW1hLkRpZ2VzdGVkT2JqZWN0U2NoZW1hKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHR5cGUgPSB0aGlzLnJlc29sdmVUeXBlVVJJKCB0eXBlICk7XG5cdFx0XHR0aGlzLnR5cGVPYmplY3RTY2hlbWFNYXAuZGVsZXRlKCB0eXBlICk7XG5cdFx0fVxuXHR9XG5cblx0cHJvdGVjdGVkIGV4dGVuZEdlbmVyYWxPYmplY3RTY2hlbWEoIGRpZ2VzdGVkU2NoZW1hOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSApOnZvaWQge1xuXHRcdGxldCBkaWdlc3RlZFNjaGVtYVRvRXh0ZW5kOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYTtcblx0XHRpZiggISAhIHRoaXMuZ2VuZXJhbE9iamVjdFNjaGVtYSApIHtcblx0XHRcdGRpZ2VzdGVkU2NoZW1hVG9FeHRlbmQgPSB0aGlzLmdlbmVyYWxPYmplY3RTY2hlbWE7XG5cdFx0fSBlbHNlIGlmKCAhICEgdGhpcy5wYXJlbnRDb250ZXh0ICkge1xuXHRcdFx0ZGlnZXN0ZWRTY2hlbWFUb0V4dGVuZCA9IHRoaXMucGFyZW50Q29udGV4dC5nZXRPYmplY3RTY2hlbWEoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGlnZXN0ZWRTY2hlbWFUb0V4dGVuZCA9IG5ldyBPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEoKTtcblx0XHR9XG5cblx0XHR0aGlzLmdlbmVyYWxPYmplY3RTY2hlbWEgPSBPYmplY3RTY2hlbWEuRGlnZXN0ZXIuY29tYmluZURpZ2VzdGVkT2JqZWN0U2NoZW1hcyggW1xuXHRcdFx0bmV3IE9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSgpLFxuXHRcdFx0ZGlnZXN0ZWRTY2hlbWFUb0V4dGVuZCxcblx0XHRcdGRpZ2VzdGVkU2NoZW1hLFxuXHRcdF0gKTtcblx0fVxuXG5cdHByb3RlY3RlZCBleHRlbmRUeXBlT2JqZWN0U2NoZW1hKCBkaWdlc3RlZFNjaGVtYTpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEsIHR5cGU6c3RyaW5nICk6dm9pZCB7XG5cdFx0dHlwZSA9IHRoaXMucmVzb2x2ZVR5cGVVUkkoIHR5cGUgKTtcblx0XHRsZXQgZGlnZXN0ZWRTY2hlbWFUb0V4dGVuZDpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWE7XG5cblx0XHRpZiggdGhpcy50eXBlT2JqZWN0U2NoZW1hTWFwLmhhcyggdHlwZSApICkge1xuXHRcdFx0ZGlnZXN0ZWRTY2hlbWFUb0V4dGVuZCA9IHRoaXMudHlwZU9iamVjdFNjaGVtYU1hcC5nZXQoIHR5cGUgKTtcblx0XHR9IGVsc2UgaWYoICEgISB0aGlzLnBhcmVudENvbnRleHQgJiYgdGhpcy5wYXJlbnRDb250ZXh0Lmhhc09iamVjdFNjaGVtYSggdHlwZSApICkge1xuXHRcdFx0ZGlnZXN0ZWRTY2hlbWFUb0V4dGVuZCA9IHRoaXMucGFyZW50Q29udGV4dC5nZXRPYmplY3RTY2hlbWEoIHR5cGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGlnZXN0ZWRTY2hlbWFUb0V4dGVuZCA9IG5ldyBPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEoKTtcblx0XHR9XG5cblx0XHRsZXQgZXh0ZW5kZWREaWdlc3RlZFNjaGVtYTpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEgPSBPYmplY3RTY2hlbWEuRGlnZXN0ZXIuY29tYmluZURpZ2VzdGVkT2JqZWN0U2NoZW1hcyggW1xuXHRcdFx0ZGlnZXN0ZWRTY2hlbWFUb0V4dGVuZCxcblx0XHRcdGRpZ2VzdGVkU2NoZW1hLFxuXHRcdF0gKTtcblxuXHRcdHRoaXMudHlwZU9iamVjdFNjaGVtYU1hcC5zZXQoIHR5cGUsIGV4dGVuZGVkRGlnZXN0ZWRTY2hlbWEgKTtcblx0fVxuXG5cdHByaXZhdGUgcmVnaXN0ZXJEZWZhdWx0T2JqZWN0U2NoZW1hcygpOnZvaWQge1xuXHRcdHRoaXMuZXh0ZW5kT2JqZWN0U2NoZW1hKCBCbGFua05vZGUuU0NIRU1BICk7XG5cblx0XHR0aGlzLmV4dGVuZE9iamVjdFNjaGVtYSggUHJvdGVjdGVkRG9jdW1lbnQuUkRGX0NMQVNTLCBQcm90ZWN0ZWREb2N1bWVudC5TQ0hFTUEgKTtcblxuXHRcdHRoaXMuZXh0ZW5kT2JqZWN0U2NoZW1hKCBSREZSZXByZXNlbnRhdGlvbi5SREZfQ0xBU1MsIFJERlJlcHJlc2VudGF0aW9uLlNDSEVNQSApO1xuXHRcdHRoaXMuZXh0ZW5kT2JqZWN0U2NoZW1hKCBBUElEZXNjcmlwdGlvbi5SREZfQ0xBU1MsIEFQSURlc2NyaXB0aW9uLlNDSEVNQSApO1xuXHRcdHRoaXMuZXh0ZW5kT2JqZWN0U2NoZW1hKCBFcnJvci5SREZfQ0xBU1MsIEVycm9yLlNDSEVNQSApO1xuXHRcdHRoaXMuZXh0ZW5kT2JqZWN0U2NoZW1hKCBFcnJvclJlc3BvbnNlLlJERl9DTEFTUywgRXJyb3JSZXNwb25zZS5TQ0hFTUEgKTtcblxuXHRcdC8vIFRPRE8gRml4IGVycm9yIG9mIGN5Y2xlIHJlZmVyZW5jZSBiZWNhdXNlIHRoZSBBcHAgbW9kdWxlIGRlcGVuZGVuY3kgb2YgQWJzdHJhY3RDbGFzcyB3aGljaCBoYXMgYSBkZXBlbmRlbmN5IHdpdGggU0RLQ29udGV4dC4gRm9yIG5vdyBhZGQgbWFudWFsIGRhdGFcblx0XHQvKiB0aGlzLmV4dGVuZE9iamVjdFNjaGVtYSggQXBwLlJERl9DTEFTUywgQXBwLlNDSEVNQSApOyAqL1xuXHRcdHRoaXMuZXh0ZW5kT2JqZWN0U2NoZW1hKCBOUy5DUy5DbGFzcy5BcHBsaWNhdGlvbiwge1xuXHRcdFx0XCJuYW1lXCI6IHtcblx0XHRcdFx0XCJAaWRcIjogTlMuQ1MuUHJlZGljYXRlLm5hbWFlLFxuXHRcdFx0XHRcIkB0eXBlXCI6IE5TLlhTRC5EYXRhVHlwZS5zdHJpbmcsXG5cdFx0XHR9LFxuXHRcdFx0XCJkZXNjcmlwdGlvblwiOiB7XG5cdFx0XHRcdFwiQGlkXCI6IE5TLkNTLlByZWRpY2F0ZS5kZXNjcmlwdGlvbixcblx0XHRcdFx0XCJAdHlwZVwiOiBOUy5YU0QuRGF0YVR5cGUuc3RyaW5nLFxuXHRcdFx0fSxcblx0XHRcdFwicm9vdENvbnRhaW5lclwiOiB7XG5cdFx0XHRcdFwiQGlkXCI6IE5TLkNTLlByZWRpY2F0ZS5yb290Q29udGFpbmVyLFxuXHRcdFx0XHRcIkB0eXBlXCI6IFwiQGlkXCIsXG5cdFx0XHR9LFxuXHRcdFx0XCJhbGxvd3NPcmlnaW5zXCI6IHtcblx0XHRcdFx0XCJAaWRcIjogTlMuQ1MuUHJlZGljYXRlLmFsbG93c09yaWdpbixcblx0XHRcdFx0XCJAY29udGFpbmVyXCI6IFwiQHNldFwiLFxuXHRcdFx0fSxcblx0XHR9ICk7XG5cdFx0dGhpcy5leHRlbmRPYmplY3RTY2hlbWEoIEFwcFJvbGUuUkRGX0NMQVNTLCBBdXRoLlJvbGUuU0NIRU1BICk7XG5cdFx0dGhpcy5leHRlbmRPYmplY3RTY2hlbWEoIEFwcFJvbGUuUkRGX0NMQVNTLCBBcHBSb2xlLlNDSEVNQSApO1xuXG5cdFx0dGhpcy5leHRlbmRPYmplY3RTY2hlbWEoIExEUC5SZXNwb25zZU1ldGFkYXRhLlJERl9DTEFTUywgTERQLlJlc3BvbnNlTWV0YWRhdGEuU0NIRU1BICk7XG5cdFx0dGhpcy5leHRlbmRPYmplY3RTY2hlbWEoIExEUC5SZXNvdXJjZU1ldGFkYXRhLlJERl9DTEFTUywgTERQLlJlc291cmNlTWV0YWRhdGEuU0NIRU1BICk7XG5cdFx0dGhpcy5leHRlbmRPYmplY3RTY2hlbWEoIExEUC5BZGRNZW1iZXJBY3Rpb24uUkRGX0NMQVNTLCBMRFAuQWRkTWVtYmVyQWN0aW9uLlNDSEVNQSApO1xuXHRcdHRoaXMuZXh0ZW5kT2JqZWN0U2NoZW1hKCBMRFAuUmVtb3ZlTWVtYmVyQWN0aW9uLlJERl9DTEFTUywgTERQLlJlbW92ZU1lbWJlckFjdGlvbi5TQ0hFTUEgKTtcblxuXHRcdHRoaXMuZXh0ZW5kT2JqZWN0U2NoZW1hKCBBdXRoLkFDRS5SREZfQ0xBU1MsIEF1dGguQUNFLlNDSEVNQSApO1xuXHRcdHRoaXMuZXh0ZW5kT2JqZWN0U2NoZW1hKCBBdXRoLkFDTC5SREZfQ0xBU1MsIEF1dGguQUNMLlNDSEVNQSApO1xuXHRcdHRoaXMuZXh0ZW5kT2JqZWN0U2NoZW1hKCBBdXRoLkFnZW50LlJERl9DTEFTUywgQXV0aC5BZ2VudC5TQ0hFTUEgKTtcblx0XHR0aGlzLmV4dGVuZE9iamVjdFNjaGVtYSggQXV0aC5UaWNrZXQuUkRGX0NMQVNTLCBBdXRoLlRpY2tldC5TQ0hFTUEgKTtcblx0XHR0aGlzLmV4dGVuZE9iamVjdFNjaGVtYSggQXV0aC5Ub2tlbi5SREZfQ0xBU1MsIEF1dGguVG9rZW4uU0NIRU1BICk7XG5cdH1cblxuXHRwcml2YXRlIHJlc29sdmVUeXBlVVJJKCB1cmk6c3RyaW5nICk6c3RyaW5nIHtcblx0XHRpZiggUkRGLlVSSS5VdGlsLmlzQWJzb2x1dGUoIHVyaSApICkgcmV0dXJuIHVyaTtcblxuXHRcdGxldCBzY2hlbWE6T2JqZWN0U2NoZW1hLkRpZ2VzdGVkT2JqZWN0U2NoZW1hID0gdGhpcy5nZXRPYmplY3RTY2hlbWEoKTtcblx0XHRsZXQgdm9jYWI6c3RyaW5nO1xuXHRcdGlmKCB0aGlzLmhhc1NldHRpbmcoIFwidm9jYWJ1bGFyeVwiICkgKSB2b2NhYiA9IHRoaXMucmVzb2x2ZSggdGhpcy5nZXRTZXR0aW5nKCBcInZvY2FidWxhcnlcIiApICk7XG5cblxuXHRcdGlmKCBSREYuVVJJLlV0aWwuaXNQcmVmaXhlZCggdXJpICkgKSB7XG5cdFx0XHR1cmkgPSBPYmplY3RTY2hlbWEuRGlnZXN0ZXIucmVzb2x2ZVByZWZpeGVkVVJJKCB1cmksIHNjaGVtYSApO1xuXHRcdH0gZWxzZSBpZiggdm9jYWIgKSB7XG5cdFx0XHR1cmkgPSB2b2NhYiArIHVyaTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdXJpO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBpbnN0YW5jZTpDbGFzcyA9IG5ldyBDbGFzcygpO1xuXG5leHBvcnQgZGVmYXVsdCBpbnN0YW5jZTtcbiIsImltcG9ydCBEb2N1bWVudHMgZnJvbSBcIi4vLi4vRG9jdW1lbnRzXCI7XG5pbXBvcnQgRXJyb3IgZnJvbSBcIi4vRXJyb3JcIjtcbmltcG9ydCAqIGFzIEZyZWVSZXNvdXJjZXMgZnJvbSBcIi4vLi4vRnJlZVJlc291cmNlc1wiO1xuaW1wb3J0IEhUVFBQYXJzZXIgZnJvbSBcIi4vLi4vSFRUUC9QYXJzZXJcIjtcbmltcG9ydCBKU09OTERQYXJzZXIgZnJvbSBcIi4vLi4vSlNPTkxEL1BhcnNlclwiO1xuaW1wb3J0ICogYXMgTlMgZnJvbSBcIi4vLi4vTlNcIjtcbmltcG9ydCBPYmplY3RTY2hlbWEgZnJvbSBcIi4vLi4vT2JqZWN0U2NoZW1hXCI7XG5pbXBvcnQgKiBhcyBSREYgZnJvbSBcIi4vLi4vUkRGXCI7XG5pbXBvcnQgUmVzb3VyY2UgZnJvbSBcIi4vLi4vUmVzb3VyY2VcIjtcbmltcG9ydCBTREtDb250ZXh0IGZyb20gXCIuLy4uL1NES0NvbnRleHRcIjtcbmltcG9ydCBJbGxlZ2FsQXJndW1lbnRFcnJvciBmcm9tIFwiLi4vRXJyb3JzL0lsbGVnYWxBcmd1bWVudEVycm9yXCI7XG5cbmV4cG9ydCBjb25zdCBSREZfQ0xBU1M6c3RyaW5nID0gTlMuQy5DbGFzcy5FcnJvclJlc3BvbnNlO1xuXG5leHBvcnQgY29uc3QgU0NIRU1BOk9iamVjdFNjaGVtYSA9IHtcblx0XCJlcnJvcnNcIjoge1xuXHRcdFwiQGlkXCI6IE5TLkMuUHJlZGljYXRlLmVycm9yLFxuXHRcdFwiQHR5cGVcIjogXCJAaWRcIixcblx0XHRcIkBjb250YWluZXJcIjogXCJAc2V0XCIsXG5cdH0sXG5cdFwicmVxdWVzdElEXCI6IHtcblx0XHRcIkBpZFwiOiBOUy5DLlByZWRpY2F0ZS5yZXF1ZXN0SUQsXG5cdFx0XCJAdHlwZVwiOiBOUy5YU0QuRGF0YVR5cGUuc3RyaW5nLFxuXHR9LFxuXHRcInN0YXR1c0NvZGVcIjoge1xuXHRcdFwiQGlkXCI6IE5TLkMuUHJlZGljYXRlLmh0dHBTdGF0dXNDb2RlLFxuXHRcdFwiQHR5cGVcIjogTlMuWFNELkRhdGFUeXBlLmludCxcblx0fSxcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xhc3MgZXh0ZW5kcyBSZXNvdXJjZSB7XG5cdGVycm9yczpFcnJvcltdO1xuXHRyZXF1ZXN0SUQ6c3RyaW5nO1xuXHRzdGF0dXNDb2RlOm51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIFV0aWwge1xuXHRzdGF0aWMgZ2V0TWVzc2FnZSggZXJyb3JSZXNwb25zZTpDbGFzcyApOnN0cmluZyB7XG5cdFx0bGV0IG1lc3NhZ2VzOnN0cmluZ1tdID0gW107XG5cdFx0Zm9yKCBsZXQgZXJyb3Igb2YgZXJyb3JSZXNwb25zZS5lcnJvcnMgKSB7XG5cdFx0XHRtZXNzYWdlcy5wdXNoKCBlcnJvci5tZXNzYWdlICk7XG5cdFx0fVxuXHRcdHJldHVybiBtZXNzYWdlcy5qb2luKCBcIiwgXCIgKTtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgUGFyc2VyIGltcGxlbWVudHMgSFRUUFBhcnNlcjxDbGFzcz4ge1xuXHRwYXJzZSggaW5wdXQ6c3RyaW5nLCBlcnJvclJlc3BvbnNlOkNsYXNzID0gPGFueT57fSApOlByb21pc2U8Q2xhc3M+IHtcblx0XHRsZXQgZG9jdW1lbnRzOkRvY3VtZW50cyA9IFNES0NvbnRleHQuZG9jdW1lbnRzO1xuXHRcdGxldCBwYXJzZXI6SlNPTkxEUGFyc2VyID0gbmV3IEpTT05MRFBhcnNlcigpO1xuXG5cdFx0cmV0dXJuIHBhcnNlci5wYXJzZSggaW5wdXQgKS50aGVuKCAoIGZyZWVOb2RlczpSREYuTm9kZS5DbGFzc1tdICkgPT4ge1xuXHRcdFx0bGV0IGZyZWVSZXNvdXJjZXM6RnJlZVJlc291cmNlcy5DbGFzcyA9IEZyZWVSZXNvdXJjZXMuRmFjdG9yeS5jcmVhdGUoIGRvY3VtZW50cyApO1xuXG5cdFx0XHRmb3IoIGxldCBub2RlIG9mIGZyZWVOb2RlcyApIHtcblx0XHRcdFx0bGV0IHJlc291cmNlOlJlc291cmNlO1xuXHRcdFx0XHRsZXQgZXJyb3JSZXNwb25zZUZvdW5kOmJvb2xlYW4gPSBmYWxzZTtcblx0XHRcdFx0aWYoIFJERi5Ob2RlLlV0aWwuaGFzVHlwZSggbm9kZSwgUkRGX0NMQVNTICkgKSB7XG5cdFx0XHRcdFx0aWYoIGVycm9yUmVzcG9uc2VGb3VuZCApIHRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFcnJvciggXCJUaGUgaW5wdXQgc3RyaW5nIGNvbnRhaW5zIG1vcmUgdGhhbiBvbmNlIGM6RXJyb3JSZXNwb25zZS5cIiApO1xuXG5cdFx0XHRcdFx0cmVzb3VyY2UgPSBmcmVlUmVzb3VyY2VzLmNyZWF0ZVJlc291cmNlRnJvbSggZXJyb3JSZXNwb25zZSApO1xuXG5cdFx0XHRcdFx0ZXJyb3JSZXNwb25zZUZvdW5kID0gdHJ1ZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXNvdXJjZSA9IGZyZWVSZXNvdXJjZXMuZ2V0UG9pbnRlciggbm9kZVsgXCJAaWRcIiBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkb2N1bWVudHMuanNvbmxkQ29udmVydGVyLmNvbXBhY3QoIG5vZGUsIHJlc291cmNlLCBkb2N1bWVudHMuZ2V0U2NoZW1hRm9yKCBub2RlICksIGZyZWVSZXNvdXJjZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoICEgZXJyb3JSZXNwb25zZSApIHRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFcnJvciggXCJUaGUgaW5wdXQgc3RyaW5nIGRvZXMgbm90IGNvbnRhaW5zIGEgYzpFcnJvclJlc3BvbnNlLlwiICk7XG5cblx0XHRcdHJldHVybiBlcnJvclJlc3BvbnNlO1xuXHRcdH0gKTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCAqIGFzIEVycm9ycyBmcm9tIFwiLi9FcnJvcnNcIjtcbmltcG9ydCAqIGFzIEhlYWRlciBmcm9tIFwiLi9IZWFkZXJcIjtcbmltcG9ydCBNZXRob2QgZnJvbSBcIi4vTWV0aG9kXCI7XG5pbXBvcnQgUGFyc2VyIGZyb20gXCIuL1BhcnNlclwiO1xuaW1wb3J0IFJlc3BvbnNlIGZyb20gXCIuL1Jlc3BvbnNlXCI7XG5pbXBvcnQgKiBhcyBFcnJvclJlc3BvbnNlIGZyb20gXCIuLy4uL0xEUC9FcnJvclJlc3BvbnNlXCI7XG5pbXBvcnQgSFRUUEVycm9yIGZyb20gXCIuL0Vycm9ycy9IVFRQRXJyb3JcIjtcblxuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vLi4vVXRpbHNcIjtcblxuaW1wb3J0IHtSZXF1ZXN0T3B0aW9ucywgQ2xpZW50UmVxdWVzdCwgSW5jb21pbmdNZXNzYWdlfSBmcm9tIFwiaHR0cFwiO1xuaW1wb3J0IHtVcmx9IGZyb20gXCJ1cmxcIjtcblxuZXhwb3J0IGludGVyZmFjZSBPcHRpb25zIHtcblx0aGVhZGVycz86TWFwPHN0cmluZywgSGVhZGVyLkNsYXNzPjtcblx0c2VuZENyZWRlbnRpYWxzT25DT1JTPzpib29sZWFuO1xuXHR0aW1lb3V0PzpudW1iZXI7XG5cdHJlcXVlc3Q/OlhNTEh0dHBSZXF1ZXN0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbnRhaW5lclJldHJpZXZhbFByZWZlcmVuY2VzIHtcblx0aW5jbHVkZT86c3RyaW5nW107XG5cdG9taXQ/OnN0cmluZ1tdO1xufVxuXG5pbnRlcmZhY2UgUmVqZWN0IHtcblx0KCBlcnJvcjpFcnJvcnMuRXJyb3IgKTp2b2lkO1xufVxuaW50ZXJmYWNlIFJlc29sdmUge1xuXHQoIHJlc3BvbnNlOlJlc3BvbnNlICk6dm9pZDtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaEhlYWRlcnMoIGhlYWRlcnM6TWFwPHN0cmluZywgSGVhZGVyLkNsYXNzPiwgc2V0SGVhZGVyOiggbmFtZTpzdHJpbmcsIHZhbHVlOnN0cmluZyApID0+IGFueSApOnZvaWQge1xuXHRsZXQgbmFtZXNJdGVyYXRvcjpJdGVyYXRvcjxzdHJpbmc+ID0gaGVhZGVycy5rZXlzKCk7XG5cdGxldCBuZXh0Okl0ZXJhdG9yUmVzdWx0PHN0cmluZz4gPSBuYW1lc0l0ZXJhdG9yLm5leHQoKTtcblx0d2hpbGUoICEgbmV4dC5kb25lICkge1xuXHRcdGxldCBuYW1lOnN0cmluZyA9IG5leHQudmFsdWU7XG5cdFx0bGV0IHZhbHVlOkhlYWRlci5DbGFzcyA9IGhlYWRlcnMuZ2V0KCBuYW1lICk7XG5cdFx0c2V0SGVhZGVyKCBuYW1lLCB2YWx1ZS50b1N0cmluZygpICk7XG5cdFx0bmV4dCA9IG5hbWVzSXRlcmF0b3IubmV4dCgpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIG9uUmVzb2x2ZSggcmVzb2x2ZTpSZXNvbHZlLCByZWplY3Q6UmVqZWN0LCByZXNwb25zZTpSZXNwb25zZSApOnZvaWQge1xuXHRpZiggcmVzcG9uc2Uuc3RhdHVzID49IDIwMCAmJiByZXNwb25zZS5zdGF0dXMgPD0gMjk5ICkge1xuXHRcdHJlc29sdmUoIHJlc3BvbnNlICk7XG5cblx0fSBlbHNlIGlmKCByZXNwb25zZS5zdGF0dXMgPj0gNDAwICYmIHJlc3BvbnNlLnN0YXR1cyA8IDYwMCAmJiBFcnJvcnMuc3RhdHVzQ29kZU1hcC5oYXMoIHJlc3BvbnNlLnN0YXR1cyApICkge1xuXHRcdGxldCBlcnJvckNsYXNzOnR5cGVvZiBIVFRQRXJyb3IgPSBFcnJvcnMuc3RhdHVzQ29kZU1hcC5nZXQoIHJlc3BvbnNlLnN0YXR1cyApO1xuXHRcdGxldCBlcnJvcjpIVFRQRXJyb3IgPSBuZXcgZXJyb3JDbGFzcyggXCJcIiwgcmVzcG9uc2UgKTtcblxuXHRcdGlmKCAhIHJlc3BvbnNlLmRhdGEgKSB7XG5cdFx0XHRyZWplY3QoIGVycm9yICk7XG5cdFx0fVxuXG5cdFx0bGV0IHBhcnNlcjpFcnJvclJlc3BvbnNlLlBhcnNlciA9IG5ldyBFcnJvclJlc3BvbnNlLlBhcnNlcigpO1xuXHRcdHBhcnNlci5wYXJzZSggcmVzcG9uc2UuZGF0YSwgZXJyb3IgKS50aGVuKCAoIGVycm9yUmVzcG9uc2U6RXJyb3JSZXNwb25zZS5DbGFzcyApID0+IHtcblx0XHRcdGVycm9yLm1lc3NhZ2UgPSBFcnJvclJlc3BvbnNlLlV0aWwuZ2V0TWVzc2FnZSggZXJyb3JSZXNwb25zZSApO1xuXHRcdFx0cmVqZWN0KCBlcnJvciApO1xuXG5cdFx0fSApLmNhdGNoKCAoKSA9PiB7XG5cdFx0XHRlcnJvci5tZXNzYWdlID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdHJlamVjdCggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZWplY3QoIG5ldyBFcnJvcnMuVW5rbm93bkVycm9yKCByZXNwb25zZS5kYXRhLCByZXNwb25zZSApICk7XG5cblx0fVxufVxuXG5mdW5jdGlvbiBzZW5kV2l0aEJyb3dzZXIoIG1ldGhvZDpzdHJpbmcsIHVybDpzdHJpbmcsIGJvZHk6c3RyaW5nIHwgQmxvYiwgb3B0aW9uczpPcHRpb25zICk6UHJvbWlzZTxSZXNwb25zZT4ge1xuXHRyZXR1cm4gbmV3IFByb21pc2U8UmVzcG9uc2U+KCAoIHJlc29sdmU6UmVzb2x2ZSwgcmVqZWN0OlJlamVjdCApOnZvaWQgPT4ge1xuXHRcdGxldCByZXF1ZXN0OlhNTEh0dHBSZXF1ZXN0ID0gb3B0aW9ucy5yZXF1ZXN0ID8gb3B0aW9ucy5yZXF1ZXN0IDogbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cdFx0cmVxdWVzdC5vcGVuKCBtZXRob2QsIHVybCwgdHJ1ZSApO1xuXG5cdFx0aWYoIG9wdGlvbnMuaGVhZGVycyApIGZvckVhY2hIZWFkZXJzKCBvcHRpb25zLmhlYWRlcnMsICggbmFtZTpzdHJpbmcsIHZhbHVlOnN0cmluZyApID0+IHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlciggbmFtZSwgdmFsdWUgKSApO1xuXHRcdHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gb3B0aW9ucy5zZW5kQ3JlZGVudGlhbHNPbkNPUlM7XG5cdFx0aWYoIG9wdGlvbnMudGltZW91dCApIHJlcXVlc3QudGltZW91dCA9IG9wdGlvbnMudGltZW91dDtcblxuXHRcdHJlcXVlc3Qub25sb2FkID0gcmVxdWVzdC5vbmVycm9yID0gKCkgPT4ge1xuXHRcdFx0bGV0IHJlc3BvbnNlOlJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKCByZXF1ZXN0ICk7XG5cdFx0XHRvblJlc29sdmUoIHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UgKTtcblx0XHR9O1xuXG5cdFx0aWYoIGJvZHkgKSB7XG5cdFx0XHRyZXF1ZXN0LnNlbmQoIGJvZHkgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVxdWVzdC5zZW5kKCk7XG5cdFx0fVxuXHR9ICk7XG59XG5cbmZ1bmN0aW9uIHNlbmRXaXRoTm9kZSggbWV0aG9kOnN0cmluZywgdXJsOnN0cmluZywgYm9keTpzdHJpbmcgfCBCdWZmZXIsIG9wdGlvbnM6T3B0aW9ucyApOlByb21pc2U8UmVzcG9uc2U+IHtcblx0cmV0dXJuIG5ldyBQcm9taXNlPFJlc3BvbnNlPiggKCByZXNvbHZlOlJlc29sdmUsIHJlamVjdDpSZWplY3QgKTp2b2lkID0+IHtcblx0XHRsZXQgVVJMOmFueSA9IHJlcXVpcmUoIFwidXJsXCIgKTtcblxuXHRcdGZ1bmN0aW9uIHJldHVyblJlc3BvbnNlKCByZXF1ZXN0OkNsaWVudFJlcXVlc3QsIHJlczpJbmNvbWluZ01lc3NhZ2UgKTp2b2lkIHtcblx0XHRcdGxldCByYXdEYXRhOkJ1ZmZlcltdID0gW107XG5cblx0XHRcdHJlcy5vbiggXCJkYXRhXCIsICggY2h1bmsgKSA9PiB7XG5cdFx0XHRcdHJhd0RhdGEucHVzaCggY2h1bmsgKTtcblxuXHRcdFx0fSApLm9uKCBcImVuZFwiLCAoKSA9PiB7XG5cdFx0XHRcdGxldCBkYXRhOnN0cmluZyA9IEJ1ZmZlci5jb25jYXQoIHJhd0RhdGEgKS50b1N0cmluZyggXCJ1dGY4XCIgKTtcblx0XHRcdFx0bGV0IHJlc3BvbnNlOlJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKCByZXF1ZXN0LCBkYXRhLCByZXMgKTtcblxuXHRcdFx0XHRvblJlc29sdmUoIHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRsZXQgbnVtYmVyT2ZSZWRpcmVjdHM6bnVtYmVyID0gMDtcblx0XHRmdW5jdGlvbiBzZW5kUmVxdWVzdCggX3VybDpzdHJpbmcgKTp2b2lkIHtcblx0XHRcdGxldCBwYXJzZWRVUkw6VXJsID0gVVJMLnBhcnNlKCBfdXJsICk7XG5cdFx0XHRsZXQgSFRUUDphbnkgPSBwYXJzZWRVUkwucHJvdG9jb2wgPT09IFwiaHR0cDpcIiA/IHJlcXVpcmUoIFwiaHR0cFwiICkgOiByZXF1aXJlKCBcImh0dHBzXCIgKTtcblxuXHRcdFx0bGV0IHJlcXVlc3RPcHRpb25zOlJlcXVlc3RPcHRpb25zICYgeyB3aXRoQ3JlZGVudGlhbHM6Ym9vbGVhbiB9ID0ge1xuXHRcdFx0XHRwcm90b2NvbDogcGFyc2VkVVJMLnByb3RvY29sLFxuXHRcdFx0XHRob3N0OiBwYXJzZWRVUkwuaG9zdCxcblx0XHRcdFx0aG9zdG5hbWU6IHBhcnNlZFVSTC5ob3N0bmFtZSxcblx0XHRcdFx0cG9ydDogcGFyc2VGbG9hdCggcGFyc2VkVVJMLnBvcnQgKSxcblx0XHRcdFx0cGF0aDogcGFyc2VkVVJMLnBhdGgsXG5cdFx0XHRcdG1ldGhvZDogbWV0aG9kLFxuXHRcdFx0XHRoZWFkZXJzOiB7fSxcblx0XHRcdFx0d2l0aENyZWRlbnRpYWxzOiBvcHRpb25zLnNlbmRDcmVkZW50aWFsc09uQ09SUyxcblx0XHRcdH07XG5cdFx0XHRpZiggb3B0aW9ucy5oZWFkZXJzICkgZm9yRWFjaEhlYWRlcnMoIG9wdGlvbnMuaGVhZGVycywgKCBuYW1lOnN0cmluZywgdmFsdWU6c3RyaW5nICkgPT4gcmVxdWVzdE9wdGlvbnMuaGVhZGVyc1sgbmFtZSBdID0gdmFsdWUgKTtcblxuXHRcdFx0bGV0IHJlcXVlc3Q6Q2xpZW50UmVxdWVzdCA9IEhUVFAucmVxdWVzdCggcmVxdWVzdE9wdGlvbnMgKTtcblx0XHRcdGlmKCBvcHRpb25zLnRpbWVvdXQgKSByZXF1ZXN0LnNldFRpbWVvdXQoIG9wdGlvbnMudGltZW91dCApO1xuXHRcdFx0cmVxdWVzdC5vbiggXCJyZXNwb25zZVwiLCAoIHJlczpJbmNvbWluZ01lc3NhZ2UgKSA9PiB7XG5cdFx0XHRcdGlmKCByZXMuc3RhdHVzQ29kZSA+PSAzMDAgJiYgcmVzLnN0YXR1c0NvZGUgPD0gMzk5ICYmIFwibG9jYXRpb25cIiBpbiByZXMuaGVhZGVycyApIHtcblx0XHRcdFx0XHRpZiggKytudW1iZXJPZlJlZGlyZWN0cyA8IDEwICkgcmV0dXJuIHNlbmRSZXF1ZXN0KCBVUkwucmVzb2x2ZSggX3VybCwgcmVzLmhlYWRlcnMubG9jYXRpb24gKSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuUmVzcG9uc2UoIHJlcXVlc3QsIHJlcyApO1xuXHRcdFx0fSApO1xuXG5cdFx0XHRyZXF1ZXN0Lm9uKCBcImVycm9yXCIsICggZXJyb3IgKSA9PiB7XG5cdFx0XHRcdGxldCByZXNwb25zZTpSZXNwb25zZSA9IG5ldyBSZXNwb25zZSggcmVxdWVzdCwgZXJyb3IubWVzc2FnZSApO1xuXHRcdFx0XHRvblJlc29sdmUoIHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UgKTtcblx0XHRcdH0gKTtcblx0XHRcdHJlcXVlc3QuZW5kKCBib2R5ICk7XG5cdFx0fVxuXHRcdHNlbmRSZXF1ZXN0KCB1cmwgKTtcblxuXHR9ICk7XG59XG5cbmZ1bmN0aW9uIGlzQm9keSggZGF0YTpzdHJpbmcgKTpib29sZWFuO1xuZnVuY3Rpb24gaXNCb2R5KCBkYXRhOkJsb2IgKTpib29sZWFuO1xuZnVuY3Rpb24gaXNCb2R5KCBkYXRhOkJ1ZmZlciApOmJvb2xlYW47XG5mdW5jdGlvbiBpc0JvZHkoIGRhdGE6c3RyaW5nIHwgQmxvYiB8IEJ1ZmZlciApOmJvb2xlYW4ge1xuXHRyZXR1cm4gVXRpbHMuaXNTdHJpbmcoIGRhdGEgKVxuXHRcdHx8IHR5cGVvZiBCbG9iICE9PSBcInVuZGVmaW5lZFwiICYmIGRhdGEgaW5zdGFuY2VvZiBCbG9iXG5cdFx0fHwgdHlwZW9mIEJ1ZmZlciAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkYXRhIGluc3RhbmNlb2YgQnVmZmVyO1xufVxuXG5leHBvcnQgY2xhc3MgU2VydmljZSB7XG5cblx0cHJpdmF0ZSBzdGF0aWMgZGVmYXVsdE9wdGlvbnM6T3B0aW9ucyA9IHtcblx0XHRzZW5kQ3JlZGVudGlhbHNPbkNPUlM6IHRydWUsXG5cdH07XG5cblx0c3RhdGljIHNlbmQoIG1ldGhvZDooTWV0aG9kIHwgc3RyaW5nKSwgdXJsOnN0cmluZywgYm9keTpCbG9iLCBvcHRpb25zPzpPcHRpb25zICk6UHJvbWlzZTxSZXNwb25zZT47XG5cdHN0YXRpYyBzZW5kPFQ+KCBtZXRob2Q6KE1ldGhvZCB8IHN0cmluZyksIHVybDpzdHJpbmcsIGJvZHk6QmxvYiwgb3B0aW9ucz86T3B0aW9ucywgcGFyc2VyPzpQYXJzZXI8VD4gKTpQcm9taXNlPFsgVCwgUmVzcG9uc2UgXT47XG5cdHN0YXRpYyBzZW5kKCBtZXRob2Q6KE1ldGhvZCB8IHN0cmluZyksIHVybDpzdHJpbmcsIGJvZHk6QnVmZmVyLCBvcHRpb25zPzpPcHRpb25zICk6UHJvbWlzZTxSZXNwb25zZT47XG5cdHN0YXRpYyBzZW5kPFQ+KCBtZXRob2Q6KE1ldGhvZCB8IHN0cmluZyksIHVybDpzdHJpbmcsIGJvZHk6QnVmZmVyLCBvcHRpb25zPzpPcHRpb25zLCBwYXJzZXI/OlBhcnNlcjxUPiApOlByb21pc2U8WyBULCBSZXNwb25zZSBdPjtcblxuXHRzdGF0aWMgc2VuZCggbWV0aG9kOihNZXRob2QgfCBzdHJpbmcpLCB1cmw6c3RyaW5nLCBvcHRpb25zPzpPcHRpb25zICk6UHJvbWlzZTxSZXNwb25zZT47XG5cdHN0YXRpYyBzZW5kKCBtZXRob2Q6KE1ldGhvZCB8IHN0cmluZyksIHVybDpzdHJpbmcsIGJvZHk6c3RyaW5nLCBvcHRpb25zPzpPcHRpb25zICk6UHJvbWlzZTxSZXNwb25zZT47XG5cdHN0YXRpYyBzZW5kKCBtZXRob2Q6KE1ldGhvZCB8IHN0cmluZyksIHVybDpzdHJpbmcsIGJvZHk6c3RyaW5nLCBvcHRpb25zPzpPcHRpb25zICk6UHJvbWlzZTxSZXNwb25zZT47XG5cdHN0YXRpYyBzZW5kPFQ+KCBtZXRob2Q6KE1ldGhvZCB8IHN0cmluZyksIHVybDpzdHJpbmcsIG9wdGlvbnM/Ok9wdGlvbnMsIHBhcnNlcj86UGFyc2VyPFQ+ICk6UHJvbWlzZTxbIFQsIFJlc3BvbnNlIF0+O1xuXHRzdGF0aWMgc2VuZDxUPiggbWV0aG9kOihNZXRob2QgfCBzdHJpbmcpLCB1cmw6c3RyaW5nLCBib2R5OnN0cmluZywgb3B0aW9ucz86T3B0aW9ucywgcGFyc2VyPzpQYXJzZXI8VD4gKTpQcm9taXNlPFsgVCwgUmVzcG9uc2UgXT47XG5cdHN0YXRpYyBzZW5kPFQ+KCBtZXRob2Q6YW55LCB1cmw6c3RyaW5nLCBib2R5T3JPcHRpb25zOmFueSA9IFNlcnZpY2UuZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnNPclBhcnNlcjphbnkgPSBTZXJ2aWNlLmRlZmF1bHRPcHRpb25zLCBwYXJzZXI6UGFyc2VyPFQ+ID0gbnVsbCApOmFueSB7XG5cdFx0bGV0IGJvZHk6c3RyaW5nIHwgQmxvYiB8IEJ1ZmZlciA9IG51bGw7XG5cdFx0bGV0IG9wdGlvbnM6T3B0aW9ucyA9IFV0aWxzLmhhc1Byb3BlcnR5KCBvcHRpb25zT3JQYXJzZXIsIFwicGFyc2VcIiApID8gYm9keU9yT3B0aW9ucyA6IG9wdGlvbnNPclBhcnNlcjtcblx0XHRwYXJzZXIgPSBVdGlscy5oYXNQcm9wZXJ0eSggb3B0aW9uc09yUGFyc2VyLCBcInBhcnNlXCIgKSA/IG9wdGlvbnNPclBhcnNlciA6IHBhcnNlcjtcblxuXHRcdGlmKCBpc0JvZHkoIGJvZHlPck9wdGlvbnMgKSApIHtcblx0XHRcdGJvZHkgPSBib2R5T3JPcHRpb25zO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvcHRpb25zID0gYm9keU9yT3B0aW9ucyA/IGJvZHlPck9wdGlvbnMgOiBvcHRpb25zO1xuXHRcdH1cblxuXHRcdG9wdGlvbnMgPSBVdGlscy5leHRlbmQoIHt9LCBTZXJ2aWNlLmRlZmF1bHRPcHRpb25zLCBvcHRpb25zICk7XG5cblx0XHRpZiggVXRpbHMuaXNOdW1iZXIoIG1ldGhvZCApICkgbWV0aG9kID0gTWV0aG9kWyBtZXRob2QgXTtcblxuXHRcdGxldCByZXF1ZXN0UHJvbWlzZTpQcm9taXNlPFJlc3BvbnNlPjtcblx0XHRpZiggdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmVxdWVzdFByb21pc2UgPSBzZW5kV2l0aEJyb3dzZXIoIG1ldGhvZCwgdXJsLCA8c3RyaW5nIHwgQmxvYj4gYm9keSwgb3B0aW9ucyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXF1ZXN0UHJvbWlzZSA9IHNlbmRXaXRoTm9kZSggbWV0aG9kLCB1cmwsIDxzdHJpbmcgfCBCdWZmZXI+IGJvZHksIG9wdGlvbnMgKTtcblx0XHR9XG5cblx0XHRpZiggcGFyc2VyID09PSBudWxsICkgcmV0dXJuIHJlcXVlc3RQcm9taXNlO1xuXG5cdFx0cmV0dXJuIHJlcXVlc3RQcm9taXNlLnRoZW4oICggcmVzcG9uc2U6UmVzcG9uc2UgKSA9PiB7XG5cdFx0XHRyZXR1cm4gcGFyc2VyLnBhcnNlKCByZXNwb25zZS5kYXRhICkudGhlbiggKCBwYXJzZWRCb2R5OlQgKSA9PiB7XG5cdFx0XHRcdHJldHVybiBbIHBhcnNlZEJvZHksIHJlc3BvbnNlIF07XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0c3RhdGljIG9wdGlvbnMoIHVybDpzdHJpbmcsIG9wdGlvbnM6T3B0aW9ucyA9IFNlcnZpY2UuZGVmYXVsdE9wdGlvbnMgKTpQcm9taXNlPFJlc3BvbnNlPiB7XG5cdFx0cmV0dXJuIFNlcnZpY2Uuc2VuZCggTWV0aG9kLk9QVElPTlMsIHVybCwgb3B0aW9ucyApO1xuXHR9XG5cblx0c3RhdGljIGhlYWQoIHVybDpzdHJpbmcsIG9wdGlvbnM6T3B0aW9ucyA9IFNlcnZpY2UuZGVmYXVsdE9wdGlvbnMgKTpQcm9taXNlPFJlc3BvbnNlPiB7XG5cdFx0cmV0dXJuIFNlcnZpY2Uuc2VuZCggTWV0aG9kLkhFQUQsIHVybCwgb3B0aW9ucyApO1xuXHR9XG5cblx0c3RhdGljIGdldCggdXJsOnN0cmluZywgb3B0aW9ucz86T3B0aW9ucyApOlByb21pc2U8UmVzcG9uc2U+O1xuXHRzdGF0aWMgZ2V0PFQ+KCB1cmw6c3RyaW5nLCBvcHRpb25zPzpPcHRpb25zLCBwYXJzZXI/OlBhcnNlcjxUPiApOlByb21pc2U8WyBULCBSZXNwb25zZSBdPjtcblx0c3RhdGljIGdldDxUPiggdXJsOnN0cmluZywgb3B0aW9uczpPcHRpb25zID0gU2VydmljZS5kZWZhdWx0T3B0aW9ucywgcGFyc2VyOlBhcnNlcjxUPiA9IG51bGwgKTphbnkge1xuXHRcdHJldHVybiBTZXJ2aWNlLnNlbmQoIE1ldGhvZC5HRVQsIHVybCwgbnVsbCwgb3B0aW9ucywgcGFyc2VyICk7XG5cdH1cblxuXHRzdGF0aWMgcG9zdCggdXJsOnN0cmluZywgYm9keTpCdWZmZXIsIG9wdGlvbnM/Ok9wdGlvbnMgKTpQcm9taXNlPFJlc3BvbnNlPjtcblx0c3RhdGljIHBvc3Q8VD4oIHVybDpzdHJpbmcsIGJvZHk6QnVmZmVyLCBvcHRpb25zPzpPcHRpb25zLCBwYXJzZXI/OlBhcnNlcjxUPiApOlByb21pc2U8WyBULCBSZXNwb25zZSBdID47XG5cdHN0YXRpYyBwb3N0KCB1cmw6c3RyaW5nLCBib2R5OkJsb2IsIG9wdGlvbnM/Ok9wdGlvbnMgKTpQcm9taXNlPFJlc3BvbnNlPjtcblx0c3RhdGljIHBvc3Q8VD4oIHVybDpzdHJpbmcsIGJvZHk6QmxvYiwgb3B0aW9ucz86T3B0aW9ucywgcGFyc2VyPzpQYXJzZXI8VD4gKTpQcm9taXNlPFsgVCwgUmVzcG9uc2UgXSA+O1xuXHRzdGF0aWMgcG9zdCggdXJsOnN0cmluZywgYm9keTpzdHJpbmcsIG9wdGlvbnM/Ok9wdGlvbnMgKTpQcm9taXNlPFJlc3BvbnNlPjtcblx0c3RhdGljIHBvc3Q8VD4oIHVybDpzdHJpbmcsIGJvZHk6c3RyaW5nLCBvcHRpb25zPzpPcHRpb25zLCBwYXJzZXI/OlBhcnNlcjxUPiApOlByb21pc2U8WyBULCBSZXNwb25zZSBdID47XG5cdHN0YXRpYyBwb3N0PFQ+KCB1cmw6c3RyaW5nLCBib2R5T3JPcHRpb25zOmFueSA9IFNlcnZpY2UuZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnM6T3B0aW9ucyA9IFNlcnZpY2UuZGVmYXVsdE9wdGlvbnMsIHBhcnNlcjpQYXJzZXI8VD4gPSBudWxsICk6YW55IHtcblx0XHRyZXR1cm4gU2VydmljZS5zZW5kKCBNZXRob2QuUE9TVCwgdXJsLCBib2R5T3JPcHRpb25zLCBvcHRpb25zLCBwYXJzZXIgKTtcblx0fVxuXG5cdHN0YXRpYyBwdXQoIHVybDpzdHJpbmcsIGJvZHk6c3RyaW5nLCBvcHRpb25zPzpPcHRpb25zICk6UHJvbWlzZTxSZXNwb25zZT47XG5cdHN0YXRpYyBwdXQ8VD4oIHVybDpzdHJpbmcsIGJvZHk6c3RyaW5nLCBvcHRpb25zPzpPcHRpb25zLCBwYXJzZXI/OlBhcnNlcjxUPiApOlByb21pc2U8WyBULCBSZXNwb25zZSBdPjtcblx0c3RhdGljIHB1dDxUPiggdXJsOnN0cmluZywgYm9keU9yT3B0aW9uczphbnkgPSBTZXJ2aWNlLmRlZmF1bHRPcHRpb25zLCBvcHRpb25zOk9wdGlvbnMgPSBTZXJ2aWNlLmRlZmF1bHRPcHRpb25zLCBwYXJzZXI6UGFyc2VyPFQ+ID0gbnVsbCApOmFueSB7XG5cdFx0cmV0dXJuIFNlcnZpY2Uuc2VuZCggTWV0aG9kLlBVVCwgdXJsLCBib2R5T3JPcHRpb25zLCBvcHRpb25zLCBwYXJzZXIgKTtcblx0fVxuXG5cdHN0YXRpYyBwYXRjaCggdXJsOnN0cmluZywgYm9keTpzdHJpbmcsIG9wdGlvbnM/Ok9wdGlvbnMgKTpQcm9taXNlPFJlc3BvbnNlPjtcblx0c3RhdGljIHBhdGNoPFQ+KCB1cmw6c3RyaW5nLCBib2R5OnN0cmluZywgb3B0aW9ucz86T3B0aW9ucywgcGFyc2VyPzpQYXJzZXI8VD4gKTpQcm9taXNlPFsgVCwgUmVzcG9uc2UgXT47XG5cdHN0YXRpYyBwYXRjaDxUPiggdXJsOnN0cmluZywgYm9keU9yT3B0aW9uczphbnkgPSBTZXJ2aWNlLmRlZmF1bHRPcHRpb25zLCBvcHRpb25zOk9wdGlvbnMgPSBTZXJ2aWNlLmRlZmF1bHRPcHRpb25zLCBwYXJzZXI6UGFyc2VyPFQ+ID0gbnVsbCApOmFueSB7XG5cdFx0cmV0dXJuIFNlcnZpY2Uuc2VuZCggTWV0aG9kLlBBVENILCB1cmwsIGJvZHlPck9wdGlvbnMsIG9wdGlvbnMsIHBhcnNlciApO1xuXHR9XG5cblx0c3RhdGljIGRlbGV0ZSggdXJsOnN0cmluZywgb3B0aW9ucz86T3B0aW9ucyApOlByb21pc2U8UmVzcG9uc2U+O1xuXHRzdGF0aWMgZGVsZXRlKCB1cmw6c3RyaW5nLCBib2R5OnN0cmluZywgb3B0aW9ucz86T3B0aW9ucyApOlByb21pc2U8UmVzcG9uc2U+O1xuXHRzdGF0aWMgZGVsZXRlPFQ+KCB1cmw6c3RyaW5nLCBvcHRpb25zPzpPcHRpb25zLCBwYXJzZXI/OlBhcnNlcjxUPiApOlByb21pc2U8WyBULCBSZXNwb25zZSBdPjtcblx0c3RhdGljIGRlbGV0ZTxUPiggdXJsOnN0cmluZywgYm9keTpzdHJpbmcsIG9wdGlvbnM/Ok9wdGlvbnMsIHBhcnNlcj86UGFyc2VyPFQ+ICk6UHJvbWlzZTxbIFQsIFJlc3BvbnNlIF0+O1xuXHRzdGF0aWMgZGVsZXRlPFQ+KCB1cmw6c3RyaW5nLCBib2R5T3JPcHRpb25zOmFueSA9IFNlcnZpY2UuZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnNPclBhcnNlcjphbnkgPSBTZXJ2aWNlLmRlZmF1bHRPcHRpb25zLCBwYXJzZXI6UGFyc2VyPFQ+ID0gbnVsbCApOmFueSB7XG5cdFx0cmV0dXJuIFNlcnZpY2Uuc2VuZCggTWV0aG9kLkRFTEVURSwgdXJsLCBib2R5T3JPcHRpb25zLCBvcHRpb25zT3JQYXJzZXIsIHBhcnNlciApO1xuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBVdGlsIHtcblxuXHRzdGF0aWMgZ2V0SGVhZGVyKCBoZWFkZXJOYW1lOnN0cmluZywgcmVxdWVzdE9wdGlvbnM6T3B0aW9ucywgaW5pdGlhbGl6ZTpib29sZWFuID0gZmFsc2UgKTpIZWFkZXIuQ2xhc3Mge1xuXHRcdGhlYWRlck5hbWUgPSBoZWFkZXJOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiggaW5pdGlhbGl6ZSApIHtcblx0XHRcdGxldCBoZWFkZXJzOk1hcDxzdHJpbmcsIEhlYWRlci5DbGFzcz4gPSByZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID8gcmVxdWVzdE9wdGlvbnMuaGVhZGVycyA6IHJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBuZXcgTWFwPHN0cmluZywgSGVhZGVyLkNsYXNzPigpO1xuXHRcdFx0aWYoICEgaGVhZGVycy5oYXMoIGhlYWRlck5hbWUgKSApXG5cdFx0XHRcdGhlYWRlcnMuc2V0KCBoZWFkZXJOYW1lLCBuZXcgSGVhZGVyLkNsYXNzKCkgKTtcblx0XHR9XG5cblx0XHRpZiggISByZXF1ZXN0T3B0aW9ucy5oZWFkZXJzICkgcmV0dXJuIHVuZGVmaW5lZDtcblx0XHRyZXR1cm4gcmVxdWVzdE9wdGlvbnMuaGVhZGVycy5nZXQoIGhlYWRlck5hbWUgKTtcblx0fVxuXG5cdHN0YXRpYyBzZXRBY2NlcHRIZWFkZXIoIGFjY2VwdDpzdHJpbmcsIHJlcXVlc3RPcHRpb25zOk9wdGlvbnMgKTpPcHRpb25zIHtcblx0XHRsZXQgaGVhZGVyczpNYXA8c3RyaW5nLCBIZWFkZXIuQ2xhc3M+ID0gcmVxdWVzdE9wdGlvbnMuaGVhZGVycyA/IHJlcXVlc3RPcHRpb25zLmhlYWRlcnMgOiByZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gbmV3IE1hcDxzdHJpbmcsIEhlYWRlci5DbGFzcz4oKTtcblx0XHRoZWFkZXJzLnNldCggXCJhY2NlcHRcIiwgbmV3IEhlYWRlci5DbGFzcyggYWNjZXB0ICkgKTtcblx0XHRyZXR1cm4gcmVxdWVzdE9wdGlvbnM7XG5cdH1cblxuXHRzdGF0aWMgc2V0Q29udGVudFR5cGVIZWFkZXIoIGNvbnRlbnRUeXBlOnN0cmluZywgcmVxdWVzdE9wdGlvbnM6T3B0aW9ucyApOk9wdGlvbnMge1xuXHRcdGxldCBoZWFkZXJzOk1hcDxzdHJpbmcsIEhlYWRlci5DbGFzcz4gPSByZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID8gcmVxdWVzdE9wdGlvbnMuaGVhZGVycyA6IHJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBuZXcgTWFwPHN0cmluZywgSGVhZGVyLkNsYXNzPigpO1xuXHRcdGhlYWRlcnMuc2V0KCBcImNvbnRlbnQtdHlwZVwiLCBuZXcgSGVhZGVyLkNsYXNzKCBjb250ZW50VHlwZSApICk7XG5cdFx0cmV0dXJuIHJlcXVlc3RPcHRpb25zO1xuXHR9XG5cblx0c3RhdGljIHNldElmTWF0Y2hIZWFkZXIoIGV0YWc6c3RyaW5nLCByZXF1ZXN0T3B0aW9uczpPcHRpb25zICk6T3B0aW9ucyB7XG5cdFx0bGV0IGhlYWRlcnM6TWFwPHN0cmluZywgSGVhZGVyLkNsYXNzPiA9IHJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPyByZXF1ZXN0T3B0aW9ucy5oZWFkZXJzIDogcmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IG5ldyBNYXA8c3RyaW5nLCBIZWFkZXIuQ2xhc3M+KCk7XG5cdFx0aGVhZGVycy5zZXQoIFwiaWYtbWF0Y2hcIiwgbmV3IEhlYWRlci5DbGFzcyggZXRhZyApICk7XG5cdFx0cmV0dXJuIHJlcXVlc3RPcHRpb25zO1xuXHR9XG5cblx0c3RhdGljIHNldFByZWZlcnJlZEludGVyYWN0aW9uTW9kZWwoIGludGVyYWN0aW9uTW9kZWxVUkk6c3RyaW5nLCByZXF1ZXN0T3B0aW9uczpPcHRpb25zICk6T3B0aW9ucyB7XG5cdFx0bGV0IHByZWZlcjpIZWFkZXIuQ2xhc3MgPSBVdGlsLmdldEhlYWRlciggXCJwcmVmZXJcIiwgcmVxdWVzdE9wdGlvbnMsIHRydWUgKTtcblx0XHRwcmVmZXIudmFsdWVzLnB1c2goIG5ldyBIZWFkZXIuVmFsdWUoIGludGVyYWN0aW9uTW9kZWxVUkkgKyBcIjsgcmVsPWludGVyYWN0aW9uLW1vZGVsXCIgKSApO1xuXG5cdFx0cmV0dXJuIHJlcXVlc3RPcHRpb25zO1xuXHR9XG5cblx0c3RhdGljIHNldENvbnRhaW5lclJldHJpZXZhbFByZWZlcmVuY2VzKCBwcmVmZXJlbmNlczpDb250YWluZXJSZXRyaWV2YWxQcmVmZXJlbmNlcywgcmVxdWVzdE9wdGlvbnM6T3B0aW9ucywgcmV0dXJuUmVwcmVzZW50YXRpb246Ym9vbGVhbiA9IHRydWUgKTpPcHRpb25zIHtcblx0XHRsZXQgcHJlZmVyOkhlYWRlci5DbGFzcyA9IFV0aWwuZ2V0SGVhZGVyKCBcInByZWZlclwiLCByZXF1ZXN0T3B0aW9ucywgdHJ1ZSApO1xuXHRcdGxldCByZXByZXNlbnRhdGlvbjpzdHJpbmcgPSByZXR1cm5SZXByZXNlbnRhdGlvbiA/IFwicmV0dXJuPXJlcHJlc2VudGF0aW9uOyBcIiA6IFwiXCI7XG5cblx0XHRsZXQga2V5czpzdHJpbmdbXSA9IFsgXCJpbmNsdWRlXCIsIFwib21pdFwiIF07XG5cdFx0Zm9yKCBsZXQga2V5IG9mIGtleXMgKSB7XG5cdFx0XHRpZigga2V5IGluIHByZWZlcmVuY2VzICYmIHByZWZlcmVuY2VzWyBrZXkgXS5sZW5ndGggPiAwICkge1xuXHRcdFx0XHRwcmVmZXIudmFsdWVzLnB1c2goIG5ldyBIZWFkZXIuVmFsdWUoIGAkeyByZXByZXNlbnRhdGlvbiB9JHsga2V5IH09XCIkeyBwcmVmZXJlbmNlc1sga2V5IF0uam9pbiggXCIgXCIgKSB9XCJgICkgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVxdWVzdE9wdGlvbnM7XG5cdH1cblxuXHRzdGF0aWMgc2V0U2x1Zyggc2x1ZzpzdHJpbmcsIHJlcXVlc3RPcHRpb25zOk9wdGlvbnMgKTpPcHRpb25zIHtcblx0XHRsZXQgc2x1Z0hlYWRlcjpIZWFkZXIuQ2xhc3MgPSBVdGlsLmdldEhlYWRlciggXCJzbHVnXCIsIHJlcXVlc3RPcHRpb25zLCB0cnVlICk7XG5cdFx0c2x1Z0hlYWRlci52YWx1ZXMucHVzaCggbmV3IEhlYWRlci5WYWx1ZSggc2x1ZyApICk7XG5cblx0XHRyZXR1cm4gcmVxdWVzdE9wdGlvbnM7XG5cdH1cblxuXHRzdGF0aWMgaXNPcHRpb25zKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIFV0aWxzLmhhc1Byb3BlcnR5RGVmaW5lZCggb2JqZWN0LCBcImhlYWRlcnNcIiApXG5cdFx0XHR8fCBVdGlscy5oYXNQcm9wZXJ0eURlZmluZWQoIG9iamVjdCwgXCJzZW5kQ3JlZGVudGlhbHNPbkNPUlNcIiApXG5cdFx0XHR8fCBVdGlscy5oYXNQcm9wZXJ0eURlZmluZWQoIG9iamVjdCwgXCJ0aW1lb3V0XCIgKVxuXHRcdFx0fHwgVXRpbHMuaGFzUHJvcGVydHlEZWZpbmVkKCBvYmplY3QsIFwicmVxdWVzdFwiICk7XG5cdH1cblxufVxuIiwiaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vLi4vVXRpbHNcIjtcblxuZXhwb3J0IGNsYXNzIENsYXNzIHtcblx0dmFsdWVzOlZhbHVlW10gPSBbXTtcblxuXHRjb25zdHJ1Y3RvcigpO1xuXHRjb25zdHJ1Y3RvciggdmFsdWVzOlZhbHVlW10gKTtcblx0Y29uc3RydWN0b3IoIHZhbHVlOnN0cmluZyApO1xuXHRjb25zdHJ1Y3RvciggdmFsdWVPclZhbHVlcz86KHN0cmluZyB8IFZhbHVlW10pICkge1xuXHRcdGlmKCAhIHZhbHVlT3JWYWx1ZXMgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fSBlbHNlIGlmKCBBcnJheS5pc0FycmF5KCB2YWx1ZU9yVmFsdWVzICkgKSB7XG5cdFx0XHR0aGlzLnZhbHVlcyA9IDxWYWx1ZVtdPiB2YWx1ZU9yVmFsdWVzO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnNldFZhbHVlcyggPHN0cmluZz4gdmFsdWVPclZhbHVlcyApO1xuXHRcdH1cblx0fVxuXG5cdHRvU3RyaW5nKCk6c3RyaW5nIHtcblx0XHRyZXR1cm4gdGhpcy52YWx1ZXMuam9pbiggXCIsIFwiICk7XG5cdH1cblxuXHRwcml2YXRlIHNldFZhbHVlcyggdmFsdWVzU3RyaW5nOnN0cmluZyApOnZvaWQge1xuXHRcdHRoaXMudmFsdWVzID0gW107XG5cblx0XHRsZXQgdmFsdWVTdHJpbmdzOnN0cmluZ1tdID0gdmFsdWVzU3RyaW5nLnNwbGl0KCBcIixcIiApO1xuXHRcdGZvciggbGV0IGk6bnVtYmVyID0gMCwgbGVuZ3RoOm51bWJlciA9IHZhbHVlU3RyaW5ncy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKysgKSB7XG5cdFx0XHRsZXQgdmFsdWVTdHJpbmc6c3RyaW5nID0gdmFsdWVTdHJpbmdzWyBpIF0udHJpbSgpO1xuXHRcdFx0dGhpcy52YWx1ZXMucHVzaCggbmV3IFZhbHVlKCB2YWx1ZVN0cmluZyApICk7XG5cdFx0fVxuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBWYWx1ZSB7XG5cdHByaXZhdGUgdmFsdWU6c3RyaW5nO1xuXG5cdGNvbnN0cnVjdG9yKCB2YWx1ZTpzdHJpbmcgKSB7XG5cdFx0dGhpcy52YWx1ZSA9IHZhbHVlO1xuXHR9XG5cblx0dG9TdHJpbmcoKTpzdHJpbmcge1xuXHRcdHJldHVybiB0aGlzLnZhbHVlO1xuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBVdGlsIHtcblx0c3RhdGljIHBhcnNlSGVhZGVycyggaGVhZGVyc1N0cmluZzpzdHJpbmcgKTpNYXA8c3RyaW5nLCBDbGFzcz4ge1xuXHRcdGxldCBoZWFkZXJzOk1hcDxzdHJpbmcsIENsYXNzPiA9IG5ldyBNYXA8c3RyaW5nLCBDbGFzcz4oKTtcblxuXHRcdGxldCBoZWFkZXJTdHJpbmdzOnN0cmluZ1tdID0gaGVhZGVyc1N0cmluZy5zcGxpdCggL1xccj9cXG4vICk7XG5cdFx0Zm9yKCBsZXQgaTpudW1iZXIgPSAwLCBsZW5ndGg6bnVtYmVyID0gaGVhZGVyU3RyaW5ncy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKysgKSB7XG5cdFx0XHRsZXQgaGVhZGVyU3RyaW5nOnN0cmluZyA9IGhlYWRlclN0cmluZ3NbIGkgXTtcblx0XHRcdGlmKCAhIGhlYWRlclN0cmluZy50cmltKCkgKSBjb250aW51ZTtcblxuXHRcdFx0bGV0IHBhcnRzOnN0cmluZ1tdID0gaGVhZGVyU3RyaW5nLnNwbGl0KCBcIjpcIiApO1xuXHRcdFx0aWYoIHBhcnRzLmxlbmd0aCA8IDIgKSB0aHJvdyBuZXcgRXJyb3IoIFwiUGFyc2VFcnJvcjogVGhlIGhlYWRlciBjb3VsZG4ndCBiZSBwYXJzZWQuXCIgKTtcblx0XHRcdGlmKCBwYXJ0cy5sZW5ndGggPiAyICkgcGFydHNbIDEgXSA9IHBhcnRzLnNsaWNlKCAxICkuam9pbiggXCI6XCIgKTtcblxuXHRcdFx0bGV0IG5hbWU6c3RyaW5nID0gcGFydHNbIDAgXS50cmltKCkudG9Mb3dlckNhc2UoKTtcblx0XHRcdGxldCBoZWFkZXI6Q2xhc3MgPSBuZXcgQ2xhc3MoIHBhcnRzWyAxIF0udHJpbSgpICk7XG5cdFx0XHRpZiggaGVhZGVycy5oYXMoIG5hbWUgKSApIHtcblx0XHRcdFx0bGV0IGV4aXN0aW5nSGVhZGVyOkNsYXNzID0gaGVhZGVycy5nZXQoIG5hbWUgKTtcblx0XHRcdFx0ZXhpc3RpbmdIZWFkZXIudmFsdWVzLmNvbmNhdCggaGVhZGVyLnZhbHVlcyApO1xuXHRcdFx0fSBlbHNlIGhlYWRlcnMuc2V0KCBuYW1lLCBoZWFkZXIgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGVhZGVycztcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCAqIGFzIEhlYWRlciBmcm9tIFwiLi9IZWFkZXJcIjtcbmltcG9ydCB7Q2xpZW50UmVxdWVzdCwgSW5jb21pbmdNZXNzYWdlfSBmcm9tIFwiaHR0cFwiO1xuaW1wb3J0IHtpc1N0cmluZywgaXNPYmplY3R9IGZyb20gXCIuLi9VdGlsc1wiO1xuXG5leHBvcnQgY2xhc3MgQ2xhc3Mge1xuXHRzdGF0dXM6bnVtYmVyO1xuXHRkYXRhOnN0cmluZztcblx0aGVhZGVyczpNYXA8c3RyaW5nLCBIZWFkZXIuQ2xhc3M+O1xuXHRyZXF1ZXN0OlhNTEh0dHBSZXF1ZXN0IHwgQ2xpZW50UmVxdWVzdDtcblxuXHRjb25zdHJ1Y3RvciggcmVxdWVzdDpYTUxIdHRwUmVxdWVzdCApO1xuXHRjb25zdHJ1Y3RvciggcmVxdWVzdDpDbGllbnRSZXF1ZXN0LCBkYXRhOnN0cmluZywgcmVzcG9uc2U/OkluY29taW5nTWVzc2FnZSApO1xuXHRjb25zdHJ1Y3RvciggcmVxdWVzdDpYTUxIdHRwUmVxdWVzdCB8IENsaWVudFJlcXVlc3QsIGRhdGE/OnN0cmluZywgcmVzcG9uc2U6SW5jb21pbmdNZXNzYWdlID0gPGFueT57fSApIHtcblx0XHRpZiggdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSBcInVuZGVmaW5lZFwiICYmIHJlcXVlc3QgaW5zdGFuY2VvZiBYTUxIdHRwUmVxdWVzdCApIHtcblx0XHRcdGxldCByZXM6WE1MSHR0cFJlcXVlc3QgPSByZXF1ZXN0O1xuXHRcdFx0dGhpcy5zdGF0dXMgPSByZXMuc3RhdHVzO1xuXHRcdFx0dGhpcy5kYXRhID0gcmVzLnJlc3BvbnNlVGV4dDtcblx0XHRcdHRoaXMuc2V0SGVhZGVycyggcmVzLmdldEFsbFJlc3BvbnNlSGVhZGVycygpICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzQ29kZTtcblx0XHRcdHRoaXMuZGF0YSA9IGRhdGEgfHwgXCJcIjtcblx0XHRcdHRoaXMuc2V0SGVhZGVycyggPE9iamVjdD4gcmVzcG9uc2UuaGVhZGVycyApO1xuXHRcdH1cblxuXHRcdHRoaXMucmVxdWVzdCA9IHJlcXVlc3Q7XG5cdH1cblxuXHRwdWJsaWMgZ2V0SGVhZGVyKCBuYW1lOnN0cmluZyApOkhlYWRlci5DbGFzcyB7XG5cdFx0bmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gdGhpcy5oZWFkZXJzLmdldCggbmFtZSApIHx8IG51bGw7XG5cdH1cblxuXHRwcml2YXRlIHNldEhlYWRlcnMoIGhlYWRlcnNTdHJpbmc6c3RyaW5nICk6dm9pZDtcblx0cHJpdmF0ZSBzZXRIZWFkZXJzKCBoZWFkZXJPYmplY3Q6T2JqZWN0ICk6dm9pZDtcblx0cHJpdmF0ZSBzZXRIZWFkZXJzKCBoZWFkZXJzOmFueSApOnZvaWQge1xuXHRcdGlmKCBpc1N0cmluZyggaGVhZGVycyApICkge1xuXHRcdFx0dGhpcy5oZWFkZXJzID0gSGVhZGVyLlV0aWwucGFyc2VIZWFkZXJzKCBoZWFkZXJzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuaGVhZGVycyA9IG5ldyBNYXA8c3RyaW5nLCBIZWFkZXIuQ2xhc3M+KCk7XG5cdFx0XHRpZiggaXNPYmplY3QoIGhlYWRlcnMgKSApIHtcblx0XHRcdFx0Zm9yKCBsZXQgbmFtZSBvZiBPYmplY3Qua2V5cyggaGVhZGVycyApICkge1xuXHRcdFx0XHRcdHRoaXMuaGVhZGVycy5zZXQoIG5hbWUsIG5ldyBIZWFkZXIuQ2xhc3MoIGhlYWRlcnNbIG5hbWUgXSApICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIFV0aWwge1xuXHRzdGF0aWMgZ2V0RVRhZyggcmVzcG9uc2U6Q2xhc3MgKTpzdHJpbmcge1xuXHRcdGlmKCAhIHJlc3BvbnNlIHx8ICEgcmVzcG9uc2UuaGVhZGVycyApIHJldHVybiBudWxsO1xuXG5cdFx0bGV0IGV0YWdIZWFkZXI6SGVhZGVyLkNsYXNzID0gcmVzcG9uc2UuZ2V0SGVhZGVyKCBcIkVUYWdcIiApO1xuXG5cdFx0aWYoICEgZXRhZ0hlYWRlciApIHJldHVybiBudWxsO1xuXHRcdGlmKCAhIGV0YWdIZWFkZXIudmFsdWVzLmxlbmd0aCApIHJldHVybiBudWxsO1xuXHRcdGlmKCBldGFnSGVhZGVyLnZhbHVlcy5sZW5ndGggPiAxICkgY29uc29sZS53YXJuKCBcIlRoZSByZXNwb25zZSBjb250YWlucyBtb3JlIHRoYW4gb25lIEVUYWcuIFJlc3BvbnNlOiAlb1wiLCByZXNwb25zZSApO1xuXG5cdFx0cmV0dXJuIGV0YWdIZWFkZXIudmFsdWVzWyAwIF0udG9TdHJpbmcoKTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImVudW0gU3RhdHVzQ29kZSB7XG5cdENPTlRJTlVFID0gMTAwLFxuXHRTV0lUQ0hJTkdfUFJPVE9DT0xTID0gMTAxLFxuXHRPSyA9IDIwMCxcblx0Q1JFQVRFRCA9IDIwMSxcblx0QUNDRVBURUQgPSAyMDIsXG5cdE5PTl9BVVRIT1JJVEFUSVZFX0lORk9STUFUSU9OID0gMjAzLFxuXHROT19DT05URU5UID0gMjA0LFxuXHRSRVNFVF9DT05URU5UID0gMjA1LFxuXHRQQVJUSUFMX0NPTlRFTlQgPSAyMDYsXG5cdE1VTFRJUExFX0NIT0lDRVMgPSAzMDAsXG5cdE1PVkVEX1BFUk1BTkVOVExZID0gMzAxLFxuXHRGT1VORCA9IDMwMixcblx0U0VFX09USEVSID0gMzAzLFxuXHROT1RfTU9ESUZJRUQgPSAzMDQsXG5cdFVTRV9QUk9YWSA9IDMwNSxcblx0VEVNUE9SQVJZX1JFRElSRUNUID0gMzA3LFxuXHRCQURfUkVRVUVTVCA9IDQwMCxcblx0VU5BVVRIT1JJWkVEID0gNDAxLFxuXHRQQVlNRU5UX1JFUVVJUkVEID0gNDAyLFxuXHRGT1JCSURERU4gPSA0MDMsXG5cdE5PVF9GT1VORCA9IDQwNCxcblx0TUVUSE9EX05PVF9BTExPV0VEID0gNDA1LFxuXHROT1RfQUNDRVBUQUJMRSA9IDQwNixcblx0UFJPWFlfQVVUSEVOVElDQVRJT05fUkVRVUlSRUQgPSA0MDcsXG5cdFJFUVVFU1RfVElNRV9PVVQgPSA0MDgsXG5cdENPTkZMSUNUID0gNDA5LFxuXHRHT05FID0gNDEwLFxuXHRMRU5HVEhfUkVRVUlSRUQgPSA0MTEsXG5cdFBSRUNPTkRJVElPTl9GQUlMRUQgPSA0MTIsXG5cdFJFUVVFU1RfRU5USVRZX1RPT19MQVJHRSA9IDQxMyxcblx0UkVRVUVTVF9VUklfVE9PX0xBUkdFID0gNDE0LFxuXHRVTlNVUFBPUlRFRF9NRURJQV9UWVBFID0gNDE1LFxuXHRSRVFVRVNURURfUkFOR0VfTk9UX1NBVElTRklBQkxFID0gNDE2LFxuXHRFWFBFQ1RBVElPTl9GQUlMRUQgPSA0MTcsXG5cdElOVEVSTkFMX1NFUlZFUl9FUlJPUiA9IDUwMCxcblx0Tk9UX0lNUExFTUVOVEVEID0gNTAxLFxuXHRCQURfR0FURVdBWSA9IDUwMixcblx0U0VSVklDRV9VTkFWQUlMQUJMRSA9IDUwMyxcblx0R0FURVdBWV9USU1FX09VVCA9IDUwNCxcblx0SFRUUF9WRVJTSU9OX05PVF9TVVBQT1JURUQgPSA1MDVcbn1cblxuZXhwb3J0IGRlZmF1bHQgU3RhdHVzQ29kZTtcbiIsImltcG9ydCBQYXJzZXIgZnJvbSBcIi4vUGFyc2VyXCI7XG5cbmV4cG9ydCBjbGFzcyBDbGFzcyBpbXBsZW1lbnRzIFBhcnNlcjxzdHJpbmc+IHtcblx0cGFyc2UoIGJvZHk6c3RyaW5nICk6UHJvbWlzZTxzdHJpbmc+IHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPiggKCByZXNvbHZlOiggcmVzdWx0OnN0cmluZyApID0+IHZvaWQsIHJlamVjdDooIGVycm9yOkVycm9yICkgPT4gdm9pZCApID0+IHtcblx0XHRcdHJlc29sdmUoIGJvZHkgKTtcblx0XHR9ICk7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xhc3M7XG4iLCJpbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi9VdGlsc1wiO1xuXG5pbXBvcnQgKiBhcyBFcnJvcnMgZnJvbSBcIi4vSFRUUC9FcnJvcnNcIjtcbmltcG9ydCAqIGFzIEhlYWRlciBmcm9tIFwiLi9IVFRQL0hlYWRlclwiO1xuaW1wb3J0ICogYXMgSlNPTlBhcnNlciBmcm9tIFwiLi9IVFRQL0pTT05QYXJzZXJcIjtcbmltcG9ydCBNZXRob2QgZnJvbSBcIi4vSFRUUC9NZXRob2RcIjtcbmltcG9ydCAqIGFzIFBhcnNlciBmcm9tIFwiLi9IVFRQL1BhcnNlclwiO1xuaW1wb3J0ICogYXMgUmVxdWVzdCBmcm9tIFwiLi9IVFRQL1JlcXVlc3RcIjtcbmltcG9ydCAqIGFzIFJlc3BvbnNlIGZyb20gXCIuL0hUVFAvUmVzcG9uc2VcIjtcbmltcG9ydCBTdGF0dXNDb2RlIGZyb20gXCIuL0hUVFAvU3RhdHVzQ29kZVwiO1xuaW1wb3J0ICogYXMgU3RyaW5nUGFyc2VyIGZyb20gXCIuL0hUVFAvU3RyaW5nUGFyc2VyXCI7XG5cbmV4cG9ydCB7XG5cdEVycm9ycyxcblx0SGVhZGVyLFxuXHRKU09OUGFyc2VyLFxuXHRNZXRob2QsXG5cdFBhcnNlcixcblx0UmVxdWVzdCxcblx0UmVzcG9uc2UsXG5cdFN0YXR1c0NvZGUsXG5cdFN0cmluZ1BhcnNlclxufTtcbiIsImV4cG9ydCBsZXQgbmFtZXNwYWNlOnN0cmluZyA9IFwiaHR0cHM6Ly9jYXJib25sZHAuY29tL25zL3YxL3BsYXRmb3JtI1wiO1xuXG5leHBvcnQgY2xhc3MgQ2xhc3Mge1xuXHRzdGF0aWMgZ2V0IEFjY2Vzc1BvaW50KCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiQWNjZXNzUG9pbnRcIjsgfVxuXG5cdHN0YXRpYyBnZXQgQWRkTWVtYmVyQWN0aW9uKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiQWRkTWVtYmVyQWN0aW9uXCI7IH1cblxuXHRzdGF0aWMgZ2V0IEFQSSgpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcIkFQSVwiOyB9XG5cblx0c3RhdGljIGdldCBEb2N1bWVudCgpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcIkRvY3VtZW50XCI7IH1cblxuXHRzdGF0aWMgZ2V0IE5vblJlYWRhYmxlTWVtYmVyc2hpcFJlc291cmNlVHJpcGxlcygpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcIk5vblJlYWRhYmxlTWVtYmVyc2hpcFJlc291cmNlVHJpcGxlc1wiOyB9XG5cblx0c3RhdGljIGdldCBQcmVmZXJDb250YWluZXIoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJQcmVmZXJDb250YWluZXJcIjsgfVxuXG5cdHN0YXRpYyBnZXQgUHJlZmVyQ29udGFpbm1lbnRSZXNvdXJjZXMoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJQcmVmZXJDb250YWlubWVudFJlc291cmNlc1wiOyB9XG5cblx0c3RhdGljIGdldCBQcmVmZXJDb250YWlubWVudFRyaXBsZXMoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJQcmVmZXJDb250YWlubWVudFRyaXBsZXNcIjsgfVxuXG5cdHN0YXRpYyBnZXQgUHJlZmVyTWVtYmVyc2hpcFJlc291cmNlcygpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcIlByZWZlck1lbWJlcnNoaXBSZXNvdXJjZXNcIjsgfVxuXG5cdHN0YXRpYyBnZXQgUHJlZmVyTWVtYmVyc2hpcFRyaXBsZXMoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJQcmVmZXJNZW1iZXJzaGlwVHJpcGxlc1wiOyB9XG5cblx0c3RhdGljIGdldCBQcmVmZXJTZWxlY3RlZE1lbWJlcnNoaXBUcmlwbGVzKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiUHJlZmVyU2VsZWN0ZWRNZW1iZXJzaGlwVHJpcGxlc1wiOyB9XG5cblx0c3RhdGljIGdldCBWb2xhdGlsZVJlc291cmNlKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiVm9sYXRpbGVSZXNvdXJjZVwiOyB9XG5cblx0c3RhdGljIGdldCBSREZSZXByZXNlbnRhdGlvbigpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcIlJERlJlcHJlc2VudGF0aW9uXCI7IH1cblxuXHRzdGF0aWMgZ2V0IFJlbW92ZU1lbWJlckFjdGlvbigpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcIlJlbW92ZU1lbWJlckFjdGlvblwiOyB9XG5cblx0c3RhdGljIGdldCBFcnJvclJlc3BvbnNlKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiRXJyb3JSZXNwb25zZVwiOyB9XG5cblx0c3RhdGljIGdldCBFcnJvcigpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcIkVycm9yXCI7IH1cblxuXHRzdGF0aWMgZ2V0IFJlc3BvbnNlTWV0YWRhdGEoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJSZXNwb25zZU1ldGFkYXRhXCI7IH1cblxuXHRzdGF0aWMgZ2V0IFJlc291cmNlTWV0YWRhdGEoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJSZXNvdXJjZU1ldGFkYXRhXCI7IH1cbn1cblxuZXhwb3J0IGNsYXNzIFByZWRpY2F0ZSB7XG5cdHN0YXRpYyBnZXQgYWNjZXNzUG9pbnQoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJhY2Nlc3NQb2ludFwiOyB9XG5cblx0c3RhdGljIGdldCBhcHBSb2xlTWFwKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiYXBwUm9sZU1hcFwiOyB9XG5cblx0c3RhdGljIGdldCBiTm9kZUlkZW50aWZpZXIoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJiTm9kZUlkZW50aWZpZXJcIjsgfVxuXG5cdHN0YXRpYyBnZXQgYnVpbGREYXRlKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiYnVpbGREYXRlXCI7IH1cblxuXHRzdGF0aWMgZ2V0IGNhcmJvbkNvZGUoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJjYXJib25Db2RlXCI7IH1cblxuXHRzdGF0aWMgZ2V0IGNyZWF0ZWQoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJjcmVhdGVkXCI7IH1cblxuXHRzdGF0aWMgZ2V0IGRlZmF1bHRJbnRlcmFjdGlvbk1vZGVsKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiZGVmYXVsdEludGVyYWN0aW9uTW9kZWxcIjsgfVxuXG5cdHN0YXRpYyBnZXQgZW50cnkoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJlbnRyeVwiOyB9XG5cblx0c3RhdGljIGdldCBlcnJvcigpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcImVycm9yXCI7IH1cblxuXHRzdGF0aWMgZ2V0IGVUYWcoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJlVGFnXCI7IH1cblxuXHRzdGF0aWMgZ2V0IGh0dHBTdGF0dXNDb2RlKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiaHR0cFN0YXR1c0NvZGVcIjsgfVxuXG5cdHN0YXRpYyBnZXQga2V5KCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwia2V5XCI7IH1cblxuXHRzdGF0aWMgZ2V0IG1lZGlhVHlwZSgpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcIm1lZGlhVHlwZVwiOyB9XG5cblx0c3RhdGljIGdldCBtZXNzYWdlKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwibWVzc2FnZVwiOyB9XG5cblx0c3RhdGljIGdldCBtb2RpZmllZCgpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcIm1vZGlmaWVkXCI7IH1cblxuXHRzdGF0aWMgZ2V0IHJlcXVlc3RJRCgpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcInJlcXVlc3RJRFwiOyB9XG5cblx0c3RhdGljIGdldCByZXNvdXJjZU1ldGFkYXRhKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwicmVzb3VyY2VNZXRhZGF0YVwiOyB9XG5cblx0c3RhdGljIGdldCByZXNvdXJjZSgpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcInJlc291cmNlXCI7IH1cblxuXHRzdGF0aWMgZ2V0IHNpemUoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJzaXplXCI7IH1cblxuXHRzdGF0aWMgZ2V0IHRhcmdldE1lbWJlcigpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcInRhcmdldE1lbWJlclwiOyB9XG5cblx0c3RhdGljIGdldCB2ZXJzaW9uKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwidmVyc2lvblwiOyB9XG59XG4iLCJjb25zdCBuYW1lc3BhY2U6c3RyaW5nID0gXCJodHRwczovL2NhcmJvbmxkcC5jb20vbnMvdjEvcGF0Y2gjXCI7XG5cbmNsYXNzIFByZWRpY2F0ZSB7XG5cdHN0YXRpYyBBRERfQUNUSU9OOnN0cmluZyA9IG5hbWVzcGFjZSArIFwiYWRkQWN0aW9uXCI7XG5cdHN0YXRpYyBTRVRfQUNUSU9OOnN0cmluZyA9IG5hbWVzcGFjZSArIFwic2V0QWN0aW9uXCI7XG5cdHN0YXRpYyBERUxFVEVfQUNUSU9OOnN0cmluZyA9IG5hbWVzcGFjZSArIFwiZGVsZXRlQWN0aW9uXCI7XG59XG5cbmV4cG9ydCB7XG5cdG5hbWVzcGFjZSxcblx0UHJlZGljYXRlXG59O1xuIiwiY29uc3QgbmFtZXNwYWNlOnN0cmluZyA9IFwiaHR0cHM6Ly9jYXJib25sZHAuY29tL25zL3YxL3NlY3VyaXR5I1wiO1xuXG5jbGFzcyBDbGFzcyB7XG5cdHN0YXRpYyBnZXQgQWNjZXNzQ29udHJvbEVudHJ5KCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiQWNjZXNzQ29udHJvbEVudHJ5XCI7IH1cblxuXHRzdGF0aWMgZ2V0IEFjY2Vzc0NvbnRyb2xMaXN0KCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiQWNjZXNzQ29udHJvbExpc3RcIjsgfVxuXG5cdHN0YXRpYyBnZXQgQWRkTWVtYmVyKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiQWRkTWVtYmVyXCI7IH1cblxuXHRzdGF0aWMgZ2V0IEFnZW50KCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiQWdlbnRcIjsgfVxuXG5cdHN0YXRpYyBnZXQgQWxsT3JpZ2lucygpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcIkFsbE9yaWdpbnNcIjsgfVxuXG5cdHN0YXRpYyBnZXQgQXBwbGljYXRpb24oKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJBcHBsaWNhdGlvblwiOyB9XG5cblx0c3RhdGljIGdldCBBcHBSb2xlKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiQXBwUm9sZVwiOyB9XG5cblx0c3RhdGljIGdldCBDcmVhdGVBY2Nlc3NQb2ludCgpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcIkNyZWF0ZUFjY2Vzc1BvaW50XCI7IH1cblxuXHRzdGF0aWMgZ2V0IENyZWF0ZUNoaWxkKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiQ3JlYXRlQ2hpbGRcIjsgfVxuXG5cdHN0YXRpYyBnZXQgRGVsZXRlKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiRGVsZXRlXCI7IH1cblxuXHRzdGF0aWMgZ2V0IERvd25sb2FkKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiRG93bmxvYWRcIjsgfVxuXG5cdHN0YXRpYyBnZXQgRXh0ZW5kKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiRXh0ZW5kXCI7IH1cblxuXHRzdGF0aWMgZ2V0IE1hbmFnZVNlY3VyaXR5KCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiTWFuYWdlU2VjdXJpdHlcIjsgfVxuXG5cdHN0YXRpYyBnZXQgUGxhdGZvcm1Sb2xlKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiUGxhdGZvcm1Sb2xlXCI7IH1cblxuXHRzdGF0aWMgZ2V0IFByb3RlY3RlZERvY3VtZW50KCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiUHJvdGVjdGVkRG9jdW1lbnRcIjsgfVxuXG5cdHN0YXRpYyBnZXQgUmVhZCgpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcIlJlYWRcIjsgfVxuXG5cdHN0YXRpYyBnZXQgUmVtb3ZlTWVtYmVyKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiUmVtb3ZlTWVtYmVyXCI7IH1cblxuXHRzdGF0aWMgZ2V0IFRpY2tldCgpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcIlRpY2tldFwiOyB9XG5cblx0c3RhdGljIGdldCBUb2tlbigpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcIlRva2VuXCI7IH1cblxuXHRzdGF0aWMgZ2V0IFVwZGF0ZSgpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcIlVwZGF0ZVwiOyB9XG5cblx0c3RhdGljIGdldCBVcGxvYWQoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJVcGxvYWRcIjsgfVxufVxuXG5jbGFzcyBQcmVkaWNhdGUge1xuXHRzdGF0aWMgZ2V0IGFjY2Vzc0NvbnRyb2xFbnRyeSgpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcImFjY2Vzc0NvbnRyb2xFbnRyeVwiOyB9XG5cblx0c3RhdGljIGdldCBhY2Nlc3NDb250cm9sTGlzdCgpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcImFjY2Vzc0NvbnRyb2xMaXN0XCI7IH1cblxuXHRzdGF0aWMgZ2V0IGFjY2Vzc1RvKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiYWNjZXNzVG9cIjsgfVxuXG5cdHN0YXRpYyBnZXQgYWdlbnQoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJhZ2VudFwiOyB9XG5cblx0c3RhdGljIGdldCBhbGxvd3NPcmlnaW4oKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJhbGxvd3NPcmlnaW5cIjsgfVxuXG5cdHN0YXRpYyBnZXQgY2hpbGRSb2xlKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiY2hpbGRSb2xlXCI7IH1cblxuXHRzdGF0aWMgZ2V0IGNyZWRlbnRpYWxzT2YoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJjcmVkZW50aWFsc09mXCI7IH1cblxuXHRzdGF0aWMgZ2V0IGRlc2NyaXB0aW9uKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiZGVzY3JpcHRpb25cIjsgfVxuXG5cdHN0YXRpYyBnZXQgZW5hYmxlZCgpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcImVuYWJsZWRcIjsgfVxuXG5cdHN0YXRpYyBnZXQgZXhwaXJhdGlvblRpbWUoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJleHBpcmF0aW9uVGltZVwiOyB9XG5cblx0c3RhdGljIGdldCBmb3JJUkkoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJmb3JJUklcIjsgfVxuXG5cdHN0YXRpYyBnZXQgZ3JhbnRpbmcoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJncmFudGluZ1wiOyB9XG5cblx0c3RhdGljIGdldCBpbmhlcml0YWJsZUVudHJ5KCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiaW5oZXJpdGFibGVFbnRyeVwiOyB9XG5cblx0c3RhdGljIGdldCBuYW1hZSgpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcIm5hbWVcIjsgfVxuXG5cdHN0YXRpYyBnZXQgcGFyZW50Um9sZSgpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcInBhcmVudFJvbGVcIjsgfVxuXG5cdHN0YXRpYyBnZXQgcGFzc3dvcmQoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJwYXNzd29yZFwiOyB9XG5cblx0c3RhdGljIGdldCBwZXJtaXNzaW9uKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwicGVybWlzc2lvblwiOyB9XG5cblx0c3RhdGljIGdldCBwbGF0Zm9ybVJvbGUoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJwbGF0Zm9ybVJvbGVcIjsgfVxuXG5cdHN0YXRpYyBnZXQgcm9vdENvbnRhaW5lcigpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcInJvb3RDb250YWluZXJcIjsgfVxuXG5cdHN0YXRpYyBnZXQgc3ViamVjdCgpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcInN1YmplY3RcIjsgfVxuXG5cdHN0YXRpYyBnZXQgc3ViamVjdENsYXNzKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwic3ViamVjdENsYXNzXCI7IH1cblxuXHRzdGF0aWMgZ2V0IHRpY2tldEtleSgpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcInRpY2tldEtleVwiOyB9XG5cblx0c3RhdGljIGdldCB0b2tlbktleSgpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcInRva2VuS2V5XCI7IH1cbn1cblxuZXhwb3J0IHtcblx0bmFtZXNwYWNlLFxuXHRDbGFzcyxcblx0UHJlZGljYXRlXG59O1xuIiwiY29uc3QgbmFtZXNwYWNlOnN0cmluZyA9IFwiaHR0cDovL3d3dy53My5vcmcvbnMvbGRwI1wiO1xuXG5jbGFzcyBDbGFzcyB7XG5cdHN0YXRpYyBnZXQgUmVzb3VyY2UoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJSZXNvdXJjZVwiOyB9XG5cblx0c3RhdGljIGdldCBSREZTb3VyY2UoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJSREZTb3VyY2VcIjsgfVxuXG5cdHN0YXRpYyBnZXQgQ29udGFpbmVyKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiQ29udGFpbmVyXCI7IH1cblxuXHRzdGF0aWMgZ2V0IEJhc2ljQ29udGFpbmVyKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiQmFzaWNDb250YWluZXJcIjsgfVxuXG5cdHN0YXRpYyBnZXQgRGlyZWN0Q29udGFpbmVyKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiRGlyZWN0Q29udGFpbmVyXCI7IH1cblxuXHRzdGF0aWMgZ2V0IEluZGlyZWN0Q29udGFpbmVyKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiSW5kaXJlY3RDb250YWluZXJcIjsgfVxuXG5cdHN0YXRpYyBnZXQgTm9uUkRGU291cmNlKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiTm9uUkRGU291cmNlXCI7IH1cblxuXHRzdGF0aWMgZ2V0IE1lbWJlclN1YmplY3QoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJNZW1iZXJTdWJqZWN0XCI7IH1cblxuXHRzdGF0aWMgZ2V0IFByZWZlckNvbnRhaW5tZW50KCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiUHJlZmVyQ29udGFpbm1lbnRcIjsgfVxuXG5cdHN0YXRpYyBnZXQgUHJlZmVyTWVtYmVyc2hpcCgpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcIlByZWZlck1lbWJlcnNoaXBcIjsgfVxuXG5cdHN0YXRpYyBnZXQgUHJlZmVyRW1wdHlDb250YWluZXIoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJQcmVmZXJFbXB0eUNvbnRhaW5lclwiOyB9XG5cblx0c3RhdGljIGdldCBQcmVmZXJNaW5pbWFsQ29udGFpbmVyKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiUHJlZmVyTWluaW1hbENvbnRhaW5lclwiOyB9XG5cblx0c3RhdGljIGdldCBQYWdlKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiUGFnZVwiOyB9XG5cblx0c3RhdGljIGdldCBQYWdlU29ydENyaXRlcmlvbigpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcIlBhZ2VTb3J0Q3JpdGVyaW9uXCI7IH1cblxuXHRzdGF0aWMgZ2V0IEFzY2VuZGluZygpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcIkFzY2VuZGluZ1wiOyB9XG5cblx0c3RhdGljIGdldCBEZXNjZW5kaW5nKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiRGVzY2VuZGluZ1wiOyB9XG59XG5cbmNsYXNzIFByZWRpY2F0ZSB7XG5cdHN0YXRpYyBnZXQgY29udGFpbnMoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJjb250YWluc1wiOyB9XG5cblx0c3RhdGljIGdldCBtZW1iZXIoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJtZW1iZXJcIjsgfVxuXG5cdHN0YXRpYyBnZXQgaGFzTWVtYmVyUmVsYXRpb24oKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJoYXNNZW1iZXJSZWxhdGlvblwiOyB9XG5cblx0c3RhdGljIGdldCBpc01lbWJlck9mUmVsYXRpb24oKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJpc01lbWJlck9mUmVsYXRpb25cIjsgfVxuXG5cdHN0YXRpYyBnZXQgbWVtYmVyc2hpcFJlc291cmNlKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwibWVtYmVyc2hpcFJlc291cmNlXCI7IH1cblxuXHRzdGF0aWMgZ2V0IGluc2VydGVkQ29udGVudFJlbGF0aW9uKCk6c3RyaW5nIHsgcmV0dXJuIG5hbWVzcGFjZSArIFwiaW5zZXJ0ZWRDb250ZW50UmVsYXRpb25cIjsgfVxuXG5cdHN0YXRpYyBnZXQgY29uc3RyYWluZWRCeSgpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcImNvbnN0cmFpbmVkQnlcIjsgfVxuXG5cdHN0YXRpYyBnZXQgcGFnZVNvcnRDcml0ZXJpYSgpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcInBhZ2VTb3J0Q3JpdGVyaWFcIjsgfVxuXG5cdHN0YXRpYyBnZXQgcGFnZVNvcnRPcmRlcigpOnN0cmluZyB7IHJldHVybiBuYW1lc3BhY2UgKyBcInBhZ2VTb3J0T3JkZXJcIjsgfVxuXG5cdHN0YXRpYyBnZXQgcGFnZVNvcnRDb2xsYXRpb24oKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJwYWdlU29ydENvbGxhdGlvblwiOyB9XG5cblx0c3RhdGljIGdldCBwYWdlU2VxdWVuY2UoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJwYWdlU2VxdWVuY2VcIjsgfVxuXG59XG5cbmV4cG9ydCB7XG5cdG5hbWVzcGFjZSxcblx0Q2xhc3MsXG5cdFByZWRpY2F0ZVxufTtcbiIsImNvbnN0IG5hbWVzcGFjZTpzdHJpbmcgPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyNcIjtcblxuY2xhc3MgUHJlZGljYXRlIHtcblx0c3RhdGljIHR5cGU6c3RyaW5nID0gbmFtZXNwYWNlICsgXCJ0eXBlXCI7XG59XG5cbmV4cG9ydCB7XG5cdG5hbWVzcGFjZSxcblx0UHJlZGljYXRlXG59O1xuIiwiZXhwb3J0IGNvbnN0IG5hbWVzcGFjZTpzdHJpbmcgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDEvdmNhcmQtcmRmLzMuMCNcIjtcblxuZXhwb3J0IGNsYXNzIFByZWRpY2F0ZSB7XG5cdHN0YXRpYyBnZXQgZW1haWwoKTpzdHJpbmcgeyByZXR1cm4gbmFtZXNwYWNlICsgXCJlbWFpbFwiOyB9XG59XG4iLCJpbXBvcnQgKiBhcyBDIGZyb20gXCIuL05TL0NcIjtcbmltcG9ydCAqIGFzIENQIGZyb20gXCIuL05TL0NQXCI7XG5pbXBvcnQgKiBhcyBDUyBmcm9tIFwiLi9OUy9DU1wiO1xuaW1wb3J0ICogYXMgTERQIGZyb20gXCIuL05TL0xEUFwiO1xuaW1wb3J0ICogYXMgUkRGIGZyb20gXCIuL05TL1JERlwiO1xuaW1wb3J0ICogYXMgWFNEIGZyb20gXCIuL05TL1hTRFwiO1xuaW1wb3J0ICogYXMgVkNBUkQgZnJvbSBcIi4vTlMvVkNBUkRcIjtcblxuZXhwb3J0IHtcblx0Qyxcblx0Q1AsXG5cdENTLFxuXHRMRFAsXG5cdFJERixcblx0WFNELFxuXHRWQ0FSRFxufTtcbiIsImltcG9ydCAqIGFzIEVycm9ycyBmcm9tIFwiLi9FcnJvcnNcIjtcbmltcG9ydCAqIGFzIE5TIGZyb20gXCIuL05TXCI7XG5pbXBvcnQgKiBhcyBQb2ludGVyIGZyb20gXCIuL1BvaW50ZXJcIjtcbmltcG9ydCAqIGFzIFJERiBmcm9tIFwiLi9SREZcIjtcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuL1V0aWxzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvcGVydHlEZWZpbml0aW9uIHtcblx0XCJAaWRcIj86c3RyaW5nO1xuXHRcIkB0eXBlXCI/OnN0cmluZztcblx0XCJAbGFuZ3VhZ2VcIj86c3RyaW5nO1xuXHRcIkBjb250YWluZXJcIj86c3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENsYXNzIHtcblx0XCJAYmFzZVwiPzpzdHJpbmc7XG5cdFwiQGluZGV4XCI/Ok9iamVjdDtcblx0XCJAbGFuZ3VhZ2VcIj86c3RyaW5nO1xuXHRcIkByZXZlcnNlXCI/Ok9iamVjdDtcblx0XCJAdm9jYWJcIj86c3RyaW5nO1xuXHRbIG5hbWU6c3RyaW5nIF06KHN0cmluZyB8IFByb3BlcnR5RGVmaW5pdGlvbik7XG59XG5cbmV4cG9ydCBlbnVtIENvbnRhaW5lclR5cGUge1xuXHRTRVQsXG5cdExJU1QsXG5cdExBTkdVQUdFXG59XG5cbmV4cG9ydCBlbnVtIFBvaW50ZXJUeXBlIHtcblx0SUQsXG5cdFZPQ0FCLFxufVxuXG5leHBvcnQgY2xhc3MgRGlnZXN0ZWRPYmplY3RTY2hlbWEge1xuXHRiYXNlOnN0cmluZztcblx0bGFuZ3VhZ2U6c3RyaW5nO1xuXHR2b2NhYjpzdHJpbmc7XG5cdHByZWZpeGVzOk1hcDxzdHJpbmcsIFJERi5VUkkuQ2xhc3M+O1xuXHRwcm9wZXJ0aWVzOk1hcDxzdHJpbmcsIERpZ2VzdGVkUHJvcGVydHlEZWZpbml0aW9uPjtcblx0cHJlZml4ZWRVUklzOk1hcDxzdHJpbmcsIFJERi5VUkkuQ2xhc3NbXT47XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5iYXNlID0gXCJcIjtcblx0XHR0aGlzLnZvY2FiID0gbnVsbDtcblx0XHR0aGlzLmxhbmd1YWdlID0gbnVsbDtcblx0XHR0aGlzLnByZWZpeGVzID0gbmV3IE1hcDxzdHJpbmcsIFJERi5VUkkuQ2xhc3M+KCk7XG5cdFx0dGhpcy5wcm9wZXJ0aWVzID0gbmV3IE1hcDxzdHJpbmcsIERpZ2VzdGVkUHJvcGVydHlEZWZpbml0aW9uPigpO1xuXHRcdHRoaXMucHJlZml4ZWRVUklzID0gbmV3IE1hcDxzdHJpbmcsIFJERi5VUkkuQ2xhc3NbXT4oKTtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgRGlnZXN0ZWRQcm9wZXJ0eURlZmluaXRpb24ge1xuXHR1cmk6UkRGLlVSSS5DbGFzcyA9IG51bGw7XG5cdGxpdGVyYWw6Ym9vbGVhbiA9IG51bGw7XG5cdGxpdGVyYWxUeXBlOlJERi5VUkkuQ2xhc3MgPSBudWxsO1xuXHRwb2ludGVyVHlwZTpQb2ludGVyVHlwZSA9IG51bGw7XG5cdGxhbmd1YWdlOnN0cmluZztcblx0Y29udGFpbmVyVHlwZTpDb250YWluZXJUeXBlID0gbnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXNvbHZlciB7XG5cdGdldEdlbmVyYWxTY2hlbWEoKTpEaWdlc3RlZE9iamVjdFNjaGVtYTtcblx0Z2V0U2NoZW1hRm9yKCBvYmplY3Q6T2JqZWN0ICk6RGlnZXN0ZWRPYmplY3RTY2hlbWE7XG59XG5cbmV4cG9ydCBjbGFzcyBEaWdlc3RlciB7XG5cdHN0YXRpYyBkaWdlc3RTY2hlbWEoIHNjaGVtYXM6Q2xhc3NbXSApOkRpZ2VzdGVkT2JqZWN0U2NoZW1hO1xuXHRzdGF0aWMgZGlnZXN0U2NoZW1hKCBzY2hlbWE6Q2xhc3MgKTpEaWdlc3RlZE9iamVjdFNjaGVtYTtcblx0c3RhdGljIGRpZ2VzdFNjaGVtYSggc2NoZW1hT3JTY2hlbWFzOmFueSApOkRpZ2VzdGVkT2JqZWN0U2NoZW1hIHtcblx0XHRpZiggISBVdGlscy5pc0FycmF5KCBzY2hlbWFPclNjaGVtYXMgKSApIHJldHVybiBEaWdlc3Rlci5kaWdlc3RTaW5nbGVTY2hlbWEoIHNjaGVtYU9yU2NoZW1hcyApO1xuXG5cdFx0bGV0IGRpZ2VzdGVkU2NoZW1hczpEaWdlc3RlZE9iamVjdFNjaGVtYVtdID0gW107XG5cdFx0Zm9yKCBsZXQgc2NoZW1hIG9mIDxDbGFzc1tdPiBzY2hlbWFPclNjaGVtYXMgKSB7XG5cdFx0XHRkaWdlc3RlZFNjaGVtYXMucHVzaCggRGlnZXN0ZXIuZGlnZXN0U2luZ2xlU2NoZW1hKCBzY2hlbWEgKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBEaWdlc3Rlci5jb21iaW5lRGlnZXN0ZWRPYmplY3RTY2hlbWFzKCBkaWdlc3RlZFNjaGVtYXMgKTtcblx0fVxuXG5cdHN0YXRpYyBjb21iaW5lRGlnZXN0ZWRPYmplY3RTY2hlbWFzKCBkaWdlc3RlZFNjaGVtYXM6RGlnZXN0ZWRPYmplY3RTY2hlbWFbXSApOkRpZ2VzdGVkT2JqZWN0U2NoZW1hIHtcblx0XHRpZiggZGlnZXN0ZWRTY2hlbWFzLmxlbmd0aCA9PT0gMCApIHRocm93IG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiQXQgbGVhc3Qgb25lIERpZ2VzdGVkT2JqZWN0U2NoZW1hIG5lZWRzIHRvIGJlIHNwZWNpZmllZC5cIiApO1xuXG5cdFx0bGV0IGNvbWJpbmVkU2NoZW1hOkRpZ2VzdGVkT2JqZWN0U2NoZW1hID0gbmV3IERpZ2VzdGVkT2JqZWN0U2NoZW1hKCk7XG5cdFx0Y29tYmluZWRTY2hlbWEudm9jYWIgPSBkaWdlc3RlZFNjaGVtYXNbIDAgXS52b2NhYjtcblx0XHRjb21iaW5lZFNjaGVtYS5iYXNlID0gZGlnZXN0ZWRTY2hlbWFzWyAwIF0uYmFzZTtcblx0XHRjb21iaW5lZFNjaGVtYS5sYW5ndWFnZSA9IGRpZ2VzdGVkU2NoZW1hc1sgMCBdLmxhbmd1YWdlO1xuXG5cdFx0Zm9yKCBsZXQgZGlnZXN0ZWRTY2hlbWEgb2YgZGlnZXN0ZWRTY2hlbWFzICkge1xuXHRcdFx0VXRpbHMuTS5leHRlbmQoIGNvbWJpbmVkU2NoZW1hLnByZWZpeGVzLCBkaWdlc3RlZFNjaGVtYS5wcmVmaXhlcyApO1xuXHRcdFx0VXRpbHMuTS5leHRlbmQoIGNvbWJpbmVkU2NoZW1hLnByZWZpeGVkVVJJcywgZGlnZXN0ZWRTY2hlbWEucHJlZml4ZWRVUklzICk7XG5cdFx0XHRVdGlscy5NLmV4dGVuZCggY29tYmluZWRTY2hlbWEucHJvcGVydGllcywgZGlnZXN0ZWRTY2hlbWEucHJvcGVydGllcyApO1xuXHRcdH1cblxuXHRcdERpZ2VzdGVyLnJlc29sdmVQcmVmaXhlZFVSSXMoIGNvbWJpbmVkU2NoZW1hICk7XG5cblx0XHRyZXR1cm4gY29tYmluZWRTY2hlbWE7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIHJlc29sdmVQcmVmaXhlZFVSSSggdXJpOnN0cmluZywgZGlnZXN0ZWRTY2hlbWE6RGlnZXN0ZWRPYmplY3RTY2hlbWEgKTpzdHJpbmcge1xuXHRcdGlmKCB1cmkgPT09IG51bGwgKSByZXR1cm4gbnVsbDtcblx0XHRpZiggISBSREYuVVJJLlV0aWwuaXNQcmVmaXhlZCggdXJpICkgKSByZXR1cm4gdXJpO1xuXG5cdFx0bGV0IFsgcHJlZml4LCBzbHVnIF06WyBzdHJpbmcsIHN0cmluZyBdID0gPFsgc3RyaW5nLCBzdHJpbmcgXT4gdXJpLnNwbGl0KCBcIjpcIiApO1xuXG5cdFx0aWYoIGRpZ2VzdGVkU2NoZW1hLnByZWZpeGVzLmhhcyggcHJlZml4ICkgKSB7XG5cdFx0XHR1cmkgPSBkaWdlc3RlZFNjaGVtYS5wcmVmaXhlcy5nZXQoIHByZWZpeCApICsgc2x1Zztcblx0XHR9XG5cblx0XHRyZXR1cm4gdXJpO1xuXHR9XG5cblx0cHJpdmF0ZSBzdGF0aWMgX3Jlc29sdmVQcmVmaXhlZFVSSSggdXJpOlJERi5VUkkuQ2xhc3MsIGRpZ2VzdGVkU2NoZW1hOkRpZ2VzdGVkT2JqZWN0U2NoZW1hICk6UkRGLlVSSS5DbGFzcyB7XG5cdFx0aWYoIHVyaS5zdHJpbmdWYWx1ZSA9PT0gbnVsbCB8fCAhIFJERi5VUkkuVXRpbC5pc1ByZWZpeGVkKCB1cmkuc3RyaW5nVmFsdWUgKSApIHJldHVybiB1cmk7XG5cblx0XHRsZXQgWyBwcmVmaXgsIHNsdWcgXTpbIHN0cmluZywgc3RyaW5nIF0gPSA8WyBzdHJpbmcsIHN0cmluZyBdPiB1cmkuc3RyaW5nVmFsdWUuc3BsaXQoIFwiOlwiICk7XG5cblx0XHRpZiggZGlnZXN0ZWRTY2hlbWEucHJlZml4ZXMuaGFzKCBwcmVmaXggKSApIHtcblx0XHRcdHVyaS5zdHJpbmdWYWx1ZSA9IGRpZ2VzdGVkU2NoZW1hLnByZWZpeGVzLmdldCggcHJlZml4ICkgKyBzbHVnO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiggISBkaWdlc3RlZFNjaGVtYS5wcmVmaXhlZFVSSXMuaGFzKCBwcmVmaXggKSApIGRpZ2VzdGVkU2NoZW1hLnByZWZpeGVkVVJJcy5zZXQoIHByZWZpeCwgW10gKTtcblx0XHRcdGRpZ2VzdGVkU2NoZW1hLnByZWZpeGVkVVJJcy5nZXQoIHByZWZpeCApLnB1c2goIHVyaSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB1cmk7XG5cdH1cblxuXHRwcml2YXRlIHN0YXRpYyBkaWdlc3RTaW5nbGVTY2hlbWEoIHNjaGVtYTpDbGFzcyApOkRpZ2VzdGVkT2JqZWN0U2NoZW1hIHtcblx0XHRsZXQgZGlnZXN0ZWRTY2hlbWE6RGlnZXN0ZWRPYmplY3RTY2hlbWEgPSBuZXcgRGlnZXN0ZWRPYmplY3RTY2hlbWEoKTtcblxuXHRcdGZvciggbGV0IHByb3BlcnR5TmFtZSBvZiBbIFwiQGJhc2VcIiwgXCJAdm9jYWJcIiBdICkge1xuXHRcdFx0aWYoICEgKCBwcm9wZXJ0eU5hbWUgaW4gc2NoZW1hICkgKSBjb250aW51ZTtcblx0XHRcdGxldCB2YWx1ZTpzdHJpbmcgPSA8c3RyaW5nPiBzY2hlbWFbIHByb3BlcnR5TmFtZSBdO1xuXG5cdFx0XHRpZiggISBVdGlscy5pc1N0cmluZyggdmFsdWUgKSApIHRocm93IG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIGBUaGUgdmFsdWUgb2YgJyR7IHByb3BlcnR5TmFtZSB9JyBtdXN0IGJlIGEgc3RyaW5nIG9yIG51bGwuYCApO1xuXHRcdFx0aWYoICggcHJvcGVydHlOYW1lID09PSBcIkB2b2NhYlwiIHx8ICEgISB2YWx1ZSApICYmICEgUkRGLlVSSS5VdGlsLmlzQWJzb2x1dGUoIHZhbHVlICkgJiYgISBSREYuVVJJLlV0aWwuaXNCTm9kZUlEKCB2YWx1ZSApICkgdGhyb3cgbmV3IEVycm9ycy5JbGxlZ2FsQXJndW1lbnRFcnJvciggYFRoZSB2YWx1ZSBvZiAnJHsgcHJvcGVydHlOYW1lIH0nIG11c3QgYmUgYW4gYWJzb2x1dGUgVVJJJHsgcHJvcGVydHlOYW1lID09PSBcIkBiYXNlXCIgPyBcIiBvciBhbiBlbXB0eSBzdHJpbmdcIiA6IFwiXCIgfS5gICk7XG5cblx0XHRcdGRpZ2VzdGVkU2NoZW1hWyBwcm9wZXJ0eU5hbWUuc3Vic3RyKCAxICkgXSA9IHZhbHVlO1xuXHRcdH1cblx0XHRkaWdlc3RlZFNjaGVtYS5iYXNlID0gZGlnZXN0ZWRTY2hlbWEuYmFzZSB8fCBcIlwiO1xuXG5cdFx0aWYoIFwiQGxhbmd1YWdlXCIgaW4gc2NoZW1hICkge1xuXHRcdFx0bGV0IHZhbHVlOnN0cmluZyA9IDxzdHJpbmc+IHNjaGVtYVsgXCJAbGFuZ3VhZ2VcIiBdO1xuXHRcdFx0aWYoIHZhbHVlICE9PSBudWxsICYmICEgVXRpbHMuaXNTdHJpbmcoIHZhbHVlICkgKSB0aHJvdyBuZXcgRXJyb3JzLkludmFsaWRKU09OTERTeW50YXhFcnJvciggYFRoZSB2YWx1ZSBvZiAnQGxhbmd1YWdlJyBtdXN0IGJlIGEgc3RyaW5nIG9yIG51bGwuYCApO1xuXHRcdFx0ZGlnZXN0ZWRTY2hlbWEubGFuZ3VhZ2UgPSB2YWx1ZTtcblx0XHR9XG5cblx0XHRmb3IoIGxldCBwcm9wZXJ0eU5hbWUgaW4gc2NoZW1hICkge1xuXHRcdFx0aWYoICEgc2NoZW1hLmhhc093blByb3BlcnR5KCBwcm9wZXJ0eU5hbWUgKSApIGNvbnRpbnVlO1xuXG5cdFx0XHRpZiggcHJvcGVydHlOYW1lID09PSBcIkByZXZlcnNlXCIgKSBjb250aW51ZTtcblx0XHRcdGlmKCBwcm9wZXJ0eU5hbWUgPT09IFwiQGluZGV4XCIgKSBjb250aW51ZTtcblx0XHRcdGlmKCBwcm9wZXJ0eU5hbWUgPT09IFwiQGJhc2VcIiApIGNvbnRpbnVlO1xuXHRcdFx0aWYoIHByb3BlcnR5TmFtZSA9PT0gXCJAdm9jYWJcIiApIGNvbnRpbnVlO1xuXHRcdFx0aWYoIHByb3BlcnR5TmFtZSA9PT0gXCJAbGFuZ3VhZ2VcIiApIGNvbnRpbnVlO1xuXG5cdFx0XHRsZXQgcHJvcGVydHlWYWx1ZTooIHN0cmluZyB8IFByb3BlcnR5RGVmaW5pdGlvbiApID0gc2NoZW1hWyBwcm9wZXJ0eU5hbWUgXTtcblxuXHRcdFx0aWYoIFV0aWxzLmlzU3RyaW5nKCBwcm9wZXJ0eVZhbHVlICkgKSB7XG5cdFx0XHRcdGlmKCBSREYuVVJJLlV0aWwuaXNQcmVmaXhlZCggcHJvcGVydHlOYW1lICkgKSB0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIkEgcHJlZml4ZWQgcHJvcGVydHkgY2Fubm90IGJlIGVxdWFsIHRvIGFub3RoZXIgVVJJLlwiICk7XG5cblx0XHRcdFx0bGV0IHVyaTpSREYuVVJJLkNsYXNzID0gbmV3IFJERi5VUkkuQ2xhc3MoIDxzdHJpbmc+IHByb3BlcnR5VmFsdWUgKTtcblx0XHRcdFx0aWYoIFJERi5VUkkuVXRpbC5pc1ByZWZpeGVkKCB1cmkuc3RyaW5nVmFsdWUgKSApIHVyaSA9IERpZ2VzdGVyLl9yZXNvbHZlUHJlZml4ZWRVUkkoIHVyaSwgZGlnZXN0ZWRTY2hlbWEgKTtcblxuXHRcdFx0XHRkaWdlc3RlZFNjaGVtYS5wcmVmaXhlcy5zZXQoIHByb3BlcnR5TmFtZSwgdXJpICk7XG5cdFx0XHR9IGVsc2UgaWYoICEgISBwcm9wZXJ0eVZhbHVlICYmIFV0aWxzLmlzT2JqZWN0KCBwcm9wZXJ0eVZhbHVlICkgKSB7XG5cdFx0XHRcdGxldCBzY2hlbWFEZWZpbml0aW9uOlByb3BlcnR5RGVmaW5pdGlvbiA9IDxQcm9wZXJ0eURlZmluaXRpb24+IHByb3BlcnR5VmFsdWU7XG5cdFx0XHRcdGxldCBkaWdlc3RlZERlZmluaXRpb246RGlnZXN0ZWRQcm9wZXJ0eURlZmluaXRpb24gPSBuZXcgRGlnZXN0ZWRQcm9wZXJ0eURlZmluaXRpb24oKTtcblxuXHRcdFx0XHRpZiggXCJAaWRcIiBpbiBzY2hlbWFEZWZpbml0aW9uICkge1xuXHRcdFx0XHRcdGlmKCBSREYuVVJJLlV0aWwuaXNQcmVmaXhlZCggcHJvcGVydHlOYW1lICkgKSB0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIkEgcHJlZml4ZWQgcHJvcGVydHkgY2Fubm90IGhhdmUgYXNzaWduZWQgYW5vdGhlciBVUkkuXCIgKTtcblxuXHRcdFx0XHRcdGlmKCAhIFV0aWxzLmlzU3RyaW5nKCBzY2hlbWFEZWZpbml0aW9uWyBcIkBpZFwiIF0gKSApIHRocm93IG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiQGlkIG5lZWRzIHRvIHBvaW50IHRvIGEgc3RyaW5nXCIgKTtcblx0XHRcdFx0XHRkaWdlc3RlZERlZmluaXRpb24udXJpID0gRGlnZXN0ZXIuX3Jlc29sdmVQcmVmaXhlZFVSSSggbmV3IFJERi5VUkkuQ2xhc3MoIHNjaGVtYURlZmluaXRpb25bIFwiQGlkXCIgXSApLCBkaWdlc3RlZFNjaGVtYSApO1xuXHRcdFx0XHR9IGVsc2UgaWYoIFJERi5VUkkuVXRpbC5pc1ByZWZpeGVkKCBwcm9wZXJ0eU5hbWUgKSApIHtcblx0XHRcdFx0XHRkaWdlc3RlZERlZmluaXRpb24udXJpID0gRGlnZXN0ZXIuX3Jlc29sdmVQcmVmaXhlZFVSSSggbmV3IFJERi5VUkkuQ2xhc3MoIHByb3BlcnR5TmFtZSApLCBkaWdlc3RlZFNjaGVtYSApO1xuXHRcdFx0XHR9IGVsc2UgaWYoIGRpZ2VzdGVkU2NoZW1hLnZvY2FiICE9PSBudWxsICkge1xuXHRcdFx0XHRcdGRpZ2VzdGVkRGVmaW5pdGlvbi51cmkgPSBuZXcgUkRGLlVSSS5DbGFzcyggZGlnZXN0ZWRTY2hlbWEudm9jYWIgKyA8c3RyaW5nPiBwcm9wZXJ0eU5hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKCBcIkB0eXBlXCIgaW4gc2NoZW1hRGVmaW5pdGlvbiApIHtcblx0XHRcdFx0XHRpZiggISBVdGlscy5pc1N0cmluZyggc2NoZW1hRGVmaW5pdGlvblsgXCJAdHlwZVwiIF0gKSApIHRocm93IG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiQHR5cGUgbmVlZHMgdG8gcG9pbnQgdG8gYSBzdHJpbmdcIiApO1xuXG5cdFx0XHRcdFx0aWYoIHNjaGVtYURlZmluaXRpb25bIFwiQHR5cGVcIiBdID09PSBcIkBpZFwiIHx8IHNjaGVtYURlZmluaXRpb25bIFwiQHR5cGVcIiBdID09PSBcIkB2b2NhYlwiICkge1xuXHRcdFx0XHRcdFx0ZGlnZXN0ZWREZWZpbml0aW9uLmxpdGVyYWwgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGRpZ2VzdGVkRGVmaW5pdGlvbi5wb2ludGVyVHlwZSA9ICggc2NoZW1hRGVmaW5pdGlvblsgXCJAdHlwZVwiIF0gPT09IFwiQGlkXCIgKSA/IFBvaW50ZXJUeXBlLklEIDogUG9pbnRlclR5cGUuVk9DQUI7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGRpZ2VzdGVkRGVmaW5pdGlvbi5saXRlcmFsID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0bGV0IHR5cGU6UkRGLlVSSS5DbGFzcyA9IERpZ2VzdGVyLl9yZXNvbHZlUHJlZml4ZWRVUkkoIG5ldyBSREYuVVJJLkNsYXNzKCBzY2hlbWFEZWZpbml0aW9uWyBcIkB0eXBlXCIgXSApLCBkaWdlc3RlZFNjaGVtYSApO1xuXHRcdFx0XHRcdFx0aWYoIFJERi5VUkkuVXRpbC5pc1JlbGF0aXZlKCB0eXBlLnN0cmluZ1ZhbHVlICkgJiYgdHlwZS5zdHJpbmdWYWx1ZSBpbiBOUy5YU0QuRGF0YVR5cGUgKSB0eXBlLnN0cmluZ1ZhbHVlID0gTlMuWFNELkRhdGFUeXBlWyB0eXBlLnN0cmluZ1ZhbHVlIF07XG5cblx0XHRcdFx0XHRcdGRpZ2VzdGVkRGVmaW5pdGlvbi5saXRlcmFsVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoIFwiQGxhbmd1YWdlXCIgaW4gc2NoZW1hRGVmaW5pdGlvbiApIHtcblx0XHRcdFx0XHRsZXQgbGFuZ3VhZ2U6c3RyaW5nID0gc2NoZW1hRGVmaW5pdGlvblsgXCJAbGFuZ3VhZ2VcIiBdO1xuXHRcdFx0XHRcdGlmKCBsYW5ndWFnZSAhPT0gbnVsbCAmJiAhIFV0aWxzLmlzU3RyaW5nKCBsYW5ndWFnZSApICkgdGhyb3cgbmV3IEVycm9ycy5JbGxlZ2FsQXJndW1lbnRFcnJvciggXCJAbGFuZ3VhZ2UgbmVlZHMgdG8gcG9pbnQgdG8gYSBzdHJpbmcgb3IgbnVsbC5cIiApO1xuXHRcdFx0XHRcdGRpZ2VzdGVkRGVmaW5pdGlvbi5sYW5ndWFnZSA9IGxhbmd1YWdlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoIFwiQGNvbnRhaW5lclwiIGluIHNjaGVtYURlZmluaXRpb24gKSB7XG5cdFx0XHRcdFx0c3dpdGNoKCBzY2hlbWFEZWZpbml0aW9uWyBcIkBjb250YWluZXJcIiBdICkge1xuXHRcdFx0XHRcdFx0Y2FzZSBcIkBzZXRcIjpcblx0XHRcdFx0XHRcdFx0ZGlnZXN0ZWREZWZpbml0aW9uLmNvbnRhaW5lclR5cGUgPSBDb250YWluZXJUeXBlLlNFVDtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIFwiQGxpc3RcIjpcblx0XHRcdFx0XHRcdFx0ZGlnZXN0ZWREZWZpbml0aW9uLmNvbnRhaW5lclR5cGUgPSBDb250YWluZXJUeXBlLkxJU1Q7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSBcIkBsYW5ndWFnZVwiOlxuXHRcdFx0XHRcdFx0XHRpZiggVXRpbHMuaXNTdHJpbmcoIGRpZ2VzdGVkRGVmaW5pdGlvbi5sYW5ndWFnZSApICkgdGhyb3cgbmV3IEVycm9ycy5JbGxlZ2FsQXJndW1lbnRFcnJvciggXCJAY29udGFpbmVyIGNhbm5vdCBiZSBzZXQgdG8gQGxhbmd1YWdlIHdoZW4gdGhlIHByb3BlcnR5IGRlZmluaXRpb24gYWxyZWFkeSBjb250YWlucyBhbiBAbGFuZ3VhZ2UgdGFnLlwiICk7XG5cdFx0XHRcdFx0XHRcdGRpZ2VzdGVkRGVmaW5pdGlvbi5jb250YWluZXJUeXBlID0gQ29udGFpbmVyVHlwZS5MQU5HVUFHRTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIkBjb250YWluZXIgbmVlZHMgdG8gYmUgZXF1YWwgdG8gJ0BsaXN0JywgJ0BzZXQnLCBvciAnQGxhbmd1YWdlJ1wiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGlnZXN0ZWRTY2hlbWEucHJvcGVydGllcy5zZXQoIHByb3BlcnR5TmFtZSwgZGlnZXN0ZWREZWZpbml0aW9uICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIk9iamVjdFNjaGVtYSBQcm9wZXJ0aWVzIGNhbiBvbmx5IGhhdmUgc3RyaW5nIHZhbHVlcyBvciBvYmplY3QgdmFsdWVzLlwiICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0RGlnZXN0ZXIucmVzb2x2ZVByZWZpeGVkVVJJcyggZGlnZXN0ZWRTY2hlbWEgKTtcblxuXHRcdHJldHVybiBkaWdlc3RlZFNjaGVtYTtcblx0fVxuXG5cdHByaXZhdGUgc3RhdGljIHJlc29sdmVQcmVmaXhlZFVSSXMoIGRpZ2VzdGVkU2NoZW1hOkRpZ2VzdGVkT2JqZWN0U2NoZW1hICk6RGlnZXN0ZWRPYmplY3RTY2hlbWEge1xuXHRcdGRpZ2VzdGVkU2NoZW1hLnByZWZpeGVzLmZvckVhY2goICggcHJlZml4VmFsdWU6UkRGLlVSSS5DbGFzcywgcHJlZml4TmFtZTpzdHJpbmcgKSA9PiB7XG5cdFx0XHRpZiggISBkaWdlc3RlZFNjaGVtYS5wcmVmaXhlZFVSSXMuaGFzKCBwcmVmaXhOYW1lICkgKSByZXR1cm47XG5cblx0XHRcdGxldCBwcmVmaXhlZFVSSXM6UkRGLlVSSS5DbGFzc1tdID0gZGlnZXN0ZWRTY2hlbWEucHJlZml4ZWRVUklzLmdldCggcHJlZml4TmFtZSApO1xuXHRcdFx0Zm9yKCBsZXQgcHJlZml4ZWRVUkkgb2YgcHJlZml4ZWRVUklzICkge1xuXHRcdFx0XHREaWdlc3Rlci5fcmVzb2x2ZVByZWZpeGVkVVJJKCBwcmVmaXhlZFVSSSwgZGlnZXN0ZWRTY2hlbWEgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGlnZXN0ZWRTY2hlbWEucHJlZml4ZWRVUklzLmRlbGV0ZSggcHJlZml4TmFtZSApO1xuXHRcdH0gKTtcblxuXHRcdHJldHVybiBkaWdlc3RlZFNjaGVtYTtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgVXRpbCB7XG5cdHN0YXRpYyByZXNvbHZlVVJJKCB1cmk6c3RyaW5nLCBzY2hlbWE6RGlnZXN0ZWRPYmplY3RTY2hlbWEgKTpzdHJpbmcge1xuXHRcdGlmKCBSREYuVVJJLlV0aWwuaXNBYnNvbHV0ZSggdXJpICkgKSByZXR1cm4gdXJpO1xuXG5cdFx0aWYoIFJERi5VUkkuVXRpbC5pc1ByZWZpeGVkKCB1cmkgKSApIHtcblx0XHRcdHVyaSA9IERpZ2VzdGVyLnJlc29sdmVQcmVmaXhlZFVSSSggdXJpLCBzY2hlbWEgKTtcblx0XHR9IGVsc2UgaWYoIHNjaGVtYS52b2NhYiAhPT0gbnVsbCApIHtcblx0XHRcdHVyaSA9IHNjaGVtYS52b2NhYiArIHVyaTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdXJpO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0IEVycm9yIGZyb20gXCIuLi9FcnJvcnMvSW52YWxpZEpTT05MRFN5bnRheEVycm9yXCI7XG5pbXBvcnQgKiBhcyBFcnJvcnMgZnJvbSBcIi4vLi4vRXJyb3JzXCI7XG5pbXBvcnQgKiBhcyBIVFRQIGZyb20gXCIuLy4uL0hUVFBcIjtcbmltcG9ydCAqIGFzIE9iamVjdFNjaGVtYSBmcm9tIFwiLi8uLi9PYmplY3RTY2hlbWFcIjtcbmltcG9ydCAqIGFzIFJERiBmcm9tIFwiLi8uLi9SREZcIjtcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuLy4uL1V0aWxzXCI7XG5cbmNvbnN0IE1BWF9DT05URVhUX1VSTFM6bnVtYmVyID0gMTA7XG5jb25zdCBMSU5LX0hFQURFUl9SRUw6c3RyaW5nID0gXCJodHRwOi8vd3d3LnczLm9yZy9ucy9qc29uLWxkI2NvbnRleHRcIjtcblxuZXhwb3J0IGNsYXNzIENsYXNzIHtcblx0c3RhdGljIGV4cGFuZCggaW5wdXQ6T2JqZWN0ICk6UHJvbWlzZTxBcnJheTxPYmplY3Q+PiB7XG5cdFx0Ly8gRmluZCBhbmQgcmVzb2x2ZSBjb250ZXh0IFVSTHNcblx0XHRyZXR1cm4gdGhpcy5yZXRyaWV2ZUNvbnRleHRzKCBpbnB1dCwgPHtbIGluZGV4OnN0cmluZyBdOmJvb2xlYW59PiBPYmplY3QuY3JlYXRlKCBudWxsICksIFwiXCIgKS50aGVuKCAoKSA9PiB7XG5cdFx0XHQvLyBFeHBhbmQgdGhlIGRvY3VtZW50XG5cdFx0XHRsZXQgZXhwYW5kZWQ6YW55ID0gQ2xhc3MucHJvY2VzcyggbmV3IE9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSgpLCBpbnB1dCApO1xuXG5cdFx0XHQvLyBPcHRpbWl6ZSBAZ3JhcGhcblx0XHRcdGlmKCBVdGlscy5pc09iamVjdCggZXhwYW5kZWQgKSAmJiBcIkBncmFwaFwiIGluIGV4cGFuZGVkICYmIE9iamVjdC5rZXlzKCBleHBhbmRlZCApLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdFx0ZXhwYW5kZWQgPSBleHBhbmRlZFsgXCJAZ3JhcGhcIiBdO1xuXHRcdFx0fSBlbHNlIGlmKCBleHBhbmRlZCA9PT0gbnVsbCApIHtcblx0XHRcdFx0ZXhwYW5kZWQgPSBbXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTm9ybWFsaXplIHRvIGFuIGFycmF5XG5cdFx0XHRpZiggISBVdGlscy5pc0FycmF5KCBleHBhbmRlZCApICkgZXhwYW5kZWQgPSBbIGV4cGFuZGVkIF07XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9ICk7XG5cdH1cblxuXHRwcml2YXRlIHN0YXRpYyBnZXRUYXJnZXRGcm9tTGlua0hlYWRlciggaGVhZGVyOkhUVFAuSGVhZGVyLkNsYXNzICk6c3RyaW5nIHtcblx0XHRsZXQgckxpbmtIZWFkZXI6UmVnRXhwID0gL1xccyo8KFtePl0qPyk+XFxzKig/OjtcXHMqKC4qKSk/Lztcblx0XHRmb3IoIGxldCB2YWx1ZSBvZiBoZWFkZXIudmFsdWVzICkge1xuXHRcdFx0bGV0IG1hdGNoOnN0cmluZ1tdID0gdmFsdWUudG9TdHJpbmcoKS5tYXRjaCggckxpbmtIZWFkZXIgKTtcblx0XHRcdGlmKCAhIG1hdGNoICkgY29udGludWU7XG5cblx0XHRcdGxldCB0YXJnZXQ6c3RyaW5nID0gbWF0Y2hbIDEgXTtcblx0XHRcdGxldCBwYXJhbXM6c3RyaW5nID0gbWF0Y2hbIDIgXTtcblx0XHRcdGxldCByUGFyYW1zOlJlZ0V4cCA9IC8oLio/KT0oPzooPzpcIihbXlwiXSo/KVwiKXwoW15cIl0qPykpXFxzKig/Oig/OjtcXHMqKXwkKS9nO1xuXG5cdFx0XHRsZXQgcmVzdWx0OntbIGtleTpzdHJpbmcgXTpzdHJpbmd9ID0ge307XG5cdFx0XHR3aGlsZSggdHJ1ZSApIHtcblx0XHRcdFx0bWF0Y2ggPSByUGFyYW1zLmV4ZWMoIHBhcmFtcyApO1xuXHRcdFx0XHRpZiggISBtYXRjaCApIGJyZWFrO1xuXG5cdFx0XHRcdHJlc3VsdFsgbWF0Y2hbIDEgXSBdID0gKCBtYXRjaFsgMiBdID09PSB1bmRlZmluZWQgKSA/IG1hdGNoWyAzIF0gOiBtYXRjaFsgMiBdO1xuXHRcdFx0fVxuXHRcdFx0aWYoIHJlc3VsdFsgXCJyZWxcIiBdID09PSBMSU5LX0hFQURFUl9SRUwgKSByZXR1cm4gdGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHByaXZhdGUgc3RhdGljIGZpbmRDb250ZXh0VVJMcyggaW5wdXQ6T2JqZWN0LCBjb250ZXh0czp7WyBpbmRleDpzdHJpbmcgXTpPYmplY3R9LCBiYXNlOnN0cmluZywgcmVwbGFjZTpib29sZWFuID0gZmFsc2UgKTpib29sZWFuIHtcblx0XHRsZXQgcHJldmlvdXNDb250ZXh0czpudW1iZXIgPSBPYmplY3Qua2V5cyggY29udGV4dHMgKS5sZW5ndGg7XG5cblx0XHRpZiggVXRpbHMuaXNBcnJheSggaW5wdXQgKSApIHtcblx0XHRcdGZvciggbGV0IGVsZW1lbnQgb2YgKDxBcnJheTxPYmplY3Q+PiBpbnB1dCkgKSB7XG5cdFx0XHRcdENsYXNzLmZpbmRDb250ZXh0VVJMcyggZWxlbWVudCwgY29udGV4dHMsIGJhc2UgKTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYoIFV0aWxzLmlzUGxhaW5PYmplY3QoIGlucHV0ICkgKSB7XG5cdFx0XHRmb3IoIGxldCBrZXkgaW4gaW5wdXQgKSB7XG5cdFx0XHRcdGlmKCBcIkBjb250ZXh0XCIgIT09IGtleSApIHtcblx0XHRcdFx0XHRDbGFzcy5maW5kQ29udGV4dFVSTHMoIGlucHV0WyBrZXkgXSwgY29udGV4dHMsIGJhc2UgKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGxldCB1cmxPckFycmF5T3JDb250ZXh0OnN0cmluZyB8IEFycmF5PHN0cmluZyB8IE9iamVjdD4gfCBPYmplY3QgPSBpbnB1dFsga2V5IF07XG5cdFx0XHRcdGlmKCBVdGlscy5pc0FycmF5KCB1cmxPckFycmF5T3JDb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0bGV0IGNvbnRleHRBcnJheTpBcnJheTxzdHJpbmcgfCBPYmplY3Q+ID0gPEFycmF5PHN0cmluZyB8IE9iamVjdD4+IHVybE9yQXJyYXlPckNvbnRleHQ7XG5cdFx0XHRcdFx0Zm9yKCBsZXQgaW5kZXg6bnVtYmVyID0gMCwgbGVuZ3RoOm51bWJlciA9IGNvbnRleHRBcnJheS5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyArKyBpbmRleCApIHtcblx0XHRcdFx0XHRcdGxldCB1cmxPckNvbnRleHQ6c3RyaW5nIHwgT2JqZWN0ID0gY29udGV4dEFycmF5WyBpbmRleCBdO1xuXHRcdFx0XHRcdFx0aWYoICEgVXRpbHMuaXNTdHJpbmcoIHVybE9yQ29udGV4dCApICkgY29udGludWU7XG5cblx0XHRcdFx0XHRcdGxldCB1cmw6c3RyaW5nID0gPHN0cmluZz4gdXJsT3JDb250ZXh0O1xuXHRcdFx0XHRcdFx0dXJsID0gUkRGLlVSSS5VdGlsLnJlc29sdmUoIGJhc2UsIHVybCApO1xuXHRcdFx0XHRcdFx0aWYoIHJlcGxhY2UgKSB7XG5cdFx0XHRcdFx0XHRcdGlmKCBVdGlscy5pc0FycmF5KCBjb250ZXh0c1sgdXJsIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRBcnJheS5wcm90b3R5cGUuc3BsaWNlLmFwcGx5KCBjb250ZXh0QXJyYXksIFsgaW5kZXgsIDEgXS5jb25jYXQoIDxhbnk+IGNvbnRleHRzWyB1cmwgXSApICk7XG5cdFx0XHRcdFx0XHRcdFx0aW5kZXggKz0gKDxBcnJheTxhbnk+PiBjb250ZXh0c1sgdXJsIF0pLmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRcdFx0bGVuZ3RoID0gY29udGV4dEFycmF5Lmxlbmd0aDtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb250ZXh0QXJyYXlbIGluZGV4IF0gPSBjb250ZXh0c1sgdXJsIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSBpZiggISAoIHVybCBpbiBjb250ZXh0cyApICkge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0c1sgdXJsIF0gPSB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmKCBVdGlscy5pc1N0cmluZyggdXJsT3JBcnJheU9yQ29udGV4dCApICkge1xuXHRcdFx0XHRcdGxldCB1cmw6c3RyaW5nID0gPHN0cmluZz4gdXJsT3JBcnJheU9yQ29udGV4dDtcblx0XHRcdFx0XHR1cmwgPSBSREYuVVJJLlV0aWwucmVzb2x2ZSggYmFzZSwgdXJsICk7XG5cdFx0XHRcdFx0aWYoIHJlcGxhY2UgKSB7XG5cdFx0XHRcdFx0XHRpbnB1dFsga2V5IF0gPSBjb250ZXh0c1sgdXJsIF07XG5cdFx0XHRcdFx0fSBlbHNlIGlmKCAhICggdXJsIGluIGNvbnRleHRzICkgKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0c1sgdXJsIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBwcmV2aW91c0NvbnRleHRzIDwgT2JqZWN0LmtleXMoIGNvbnRleHRzICkubGVuZ3RoO1xuXHR9XG5cblx0cHJpdmF0ZSBzdGF0aWMgcmV0cmlldmVDb250ZXh0cyggaW5wdXQ6T2JqZWN0LCBjb250ZXh0c1JlcXVlc3RlZDp7WyBpbmRleDpzdHJpbmcgXTpib29sZWFufSwgYmFzZTpzdHJpbmcgKTpQcm9taXNlPHZvaWQ+IHtcblx0XHRpZiggT2JqZWN0LmtleXMoIGNvbnRleHRzUmVxdWVzdGVkICkubGVuZ3RoID4gTUFYX0NPTlRFWFRfVVJMUyApIHJldHVybiBQcm9taXNlLnJlamVjdDx2b2lkPiggbmV3IEVycm9yKCBcIk1heGltdW0gbnVtYmVyIG9mIEBjb250ZXh0IFVSTHMgZXhjZWVkZWQuXCIgKSApO1xuXG5cdFx0bGV0IGNvbnRleHRUb1Jlc29sdmVkOntbIGluZGV4OnN0cmluZyBdOk9iamVjdH0gPSBPYmplY3QuY3JlYXRlKCBudWxsICk7XG5cdFx0aWYoICEgQ2xhc3MuZmluZENvbnRleHRVUkxzKCBpbnB1dCwgY29udGV4dFRvUmVzb2x2ZWQsIGJhc2UgKSApIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblxuXHRcdGZ1bmN0aW9uIHJlc29sdmVkKCB1cmw6c3RyaW5nLCBwcm9taXNlOlByb21pc2U8WyBhbnksIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4gKTpQcm9taXNlPHZvaWQ+IHtcblx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oICggWyBvYmplY3QsIHJlc3BvbnNlIF06WyBhbnksIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXSApID0+IHtcblx0XHRcdFx0bGV0IF9jb250ZXh0c1JlcXVlc3RlZDp7WyBpbmRleDpzdHJpbmcgXTpib29sZWFufSA9IFV0aWxzLk8uY2xvbmU8e1sgaW5kZXg6c3RyaW5nIF06Ym9vbGVhbn0+KCBjb250ZXh0c1JlcXVlc3RlZCApO1xuXHRcdFx0XHRfY29udGV4dHNSZXF1ZXN0ZWRbIHVybCBdID0gdHJ1ZTtcblxuXHRcdFx0XHRsZXQgY29udGV4dFdyYXBwZXI6T2JqZWN0ID0geyBcIkBjb250ZXh0XCI6IHt9IH07XG5cblx0XHRcdFx0bGV0IGhlYWRlcjpIVFRQLkhlYWRlci5DbGFzcyA9IHJlc3BvbnNlLmdldEhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdFx0XHRpZiggISBVdGlscy5TLmNvbnRhaW5zKCBoZWFkZXIudG9TdHJpbmcoKSwgXCJhcHBsaWNhdGlvbi9sZCtqc29uXCIgKSApIHtcblx0XHRcdFx0XHRoZWFkZXIgPSByZXNwb25zZS5nZXRIZWFkZXIoIFwiTGlua1wiICk7XG5cdFx0XHRcdFx0bGV0IGxpbms6c3RyaW5nO1xuXHRcdFx0XHRcdGlmKCAhICEgaGVhZGVyICkgbGluayA9IENsYXNzLmdldFRhcmdldEZyb21MaW5rSGVhZGVyKCBoZWFkZXIgKTtcblx0XHRcdFx0XHRpZiggISAhIGxpbmsgKSBjb250ZXh0V3JhcHBlclsgXCJAY29udGV4dFwiIF0gPSBsaW5rO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRleHRXcmFwcGVyWyBcIkBjb250ZXh0XCIgXSA9ICggXCJAY29udGV4dFwiIGluIG9iamVjdCApID8gb2JqZWN0WyBcIkBjb250ZXh0XCIgXSA6IHt9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRleHRUb1Jlc29sdmVkWyB1cmwgXSA9IGNvbnRleHRXcmFwcGVyWyBcIkBjb250ZXh0XCIgXTtcblxuXHRcdFx0XHRyZXR1cm4gQ2xhc3MucmV0cmlldmVDb250ZXh0cyggY29udGV4dFdyYXBwZXIsIF9jb250ZXh0c1JlcXVlc3RlZCwgdXJsICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0bGV0IHByb21pc2VzOlByb21pc2U8dm9pZD5bXSA9IFtdO1xuXHRcdGZvciggbGV0IHVybCBpbiBjb250ZXh0VG9SZXNvbHZlZCApIHtcblx0XHRcdGlmKCB1cmwgaW4gY29udGV4dHNSZXF1ZXN0ZWQgKSByZXR1cm4gUHJvbWlzZS5yZWplY3Q8dm9pZD4oIG5ldyBFcnJvciggXCJDeWNsaWNhbCBAY29udGV4dCBVUkxzIGRldGVjdGVkLlwiICkgKTtcblxuXHRcdFx0bGV0IHJlcXVlc3RPcHRpb25zOkhUVFAuUmVxdWVzdC5PcHRpb25zID0geyBzZW5kQ3JlZGVudGlhbHNPbkNPUlM6IGZhbHNlIH07XG5cdFx0XHRIVFRQLlJlcXVlc3QuVXRpbC5zZXRBY2NlcHRIZWFkZXIoIFwiYXBwbGljYXRpb24vbGQranNvbiwgYXBwbGljYXRpb24vanNvblwiLCByZXF1ZXN0T3B0aW9ucyApO1xuXG5cdFx0XHRsZXQgcHJvbWlzZTpQcm9taXNlPFsgYW55LCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+ID0gSFRUUC5SZXF1ZXN0LlNlcnZpY2UuZ2V0KCB1cmwsIHJlcXVlc3RPcHRpb25zLCBuZXcgSFRUUC5KU09OUGFyc2VyLkNsYXNzKCkgKTtcblx0XHRcdHByb21pc2VzLnB1c2goIHJlc29sdmVkKCB1cmwsIHByb21pc2UgKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBQcm9taXNlLmFsbDx2b2lkPiggcHJvbWlzZXMgKS50aGVuKCAoKSA9PiB7XG5cdFx0XHRDbGFzcy5maW5kQ29udGV4dFVSTHMoIGlucHV0LCBjb250ZXh0VG9SZXNvbHZlZCwgYmFzZSwgdHJ1ZSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHByaXZhdGUgc3RhdGljIGlzS2V5d29yZCggdmFsdWU6c3RyaW5nICk6Ym9vbGVhbiB7XG5cdFx0aWYoICEgVXRpbHMuaXNTdHJpbmcoIHZhbHVlICkgKSByZXR1cm4gZmFsc2U7XG5cblx0XHRzd2l0Y2goIHZhbHVlICkge1xuXHRcdFx0Y2FzZSBcIkBiYXNlXCI6XG5cdFx0XHRjYXNlIFwiQGNvbnRleHRcIjpcblx0XHRcdGNhc2UgXCJAY29udGFpbmVyXCI6XG5cdFx0XHRjYXNlIFwiQGRlZmF1bHRcIjpcblx0XHRcdGNhc2UgXCJAZW1iZWRcIjpcblx0XHRcdGNhc2UgXCJAZXhwbGljaXRcIjpcblx0XHRcdGNhc2UgXCJAZ3JhcGhcIjpcblx0XHRcdGNhc2UgXCJAaWRcIjpcblx0XHRcdGNhc2UgXCJAaW5kZXhcIjpcblx0XHRcdGNhc2UgXCJAbGFuZ3VhZ2VcIjpcblx0XHRcdGNhc2UgXCJAbGlzdFwiOlxuXHRcdFx0Y2FzZSBcIkBvbWl0RGVmYXVsdFwiOlxuXHRcdFx0Y2FzZSBcIkBwcmVzZXJ2ZVwiOlxuXHRcdFx0Y2FzZSBcIkByZXF1aXJlQWxsXCI6XG5cdFx0XHRjYXNlIFwiQHJldmVyc2VcIjpcblx0XHRcdGNhc2UgXCJAc2V0XCI6XG5cdFx0XHRjYXNlIFwiQHR5cGVcIjpcblx0XHRcdGNhc2UgXCJAdmFsdWVcIjpcblx0XHRcdGNhc2UgXCJAdm9jYWJcIjpcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIHN0YXRpYyBpc1ZhbGlkVHlwZSggdmFsdWU6YW55ICk6Ym9vbGVhbiB7XG5cdFx0aWYoIFV0aWxzLmlzU3RyaW5nKCB2YWx1ZSApICkgcmV0dXJuIHRydWU7XG5cblx0XHRpZiggISBVdGlscy5pc0FycmF5KCB2YWx1ZSApICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0Zm9yKCBsZXQgZWxlbWVudCBvZiAoPEFycmF5PGFueT4+IHZhbHVlICkgKSB7XG5cdFx0XHRpZiggISBVdGlscy5pc1N0cmluZyggZWxlbWVudCApICkgcmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0cHJpdmF0ZSBzdGF0aWMgZXhwYW5kVVJJKCBzY2hlbWE6T2JqZWN0U2NoZW1hLkRpZ2VzdGVkT2JqZWN0U2NoZW1hLCB1cmk6c3RyaW5nLCByZWxhdGl2ZVRvOnsgdm9jYWI/OmJvb2xlYW4sIGJhc2U/OmJvb2xlYW4gfSA9IHt9ICk6c3RyaW5nIHtcblx0XHRpZiggdXJpID09PSBudWxsIHx8IENsYXNzLmlzS2V5d29yZCggdXJpICkgfHwgUkRGLlVSSS5VdGlsLmlzQWJzb2x1dGUoIHVyaSApICkgcmV0dXJuIHVyaTtcblxuXHRcdGlmKCBzY2hlbWEucHJvcGVydGllcy5oYXMoIHVyaSApICkgcmV0dXJuIHNjaGVtYS5wcm9wZXJ0aWVzLmdldCggdXJpICkudXJpLnN0cmluZ1ZhbHVlO1xuXHRcdGlmKCBSREYuVVJJLlV0aWwuaXNQcmVmaXhlZCggdXJpICkgKSByZXR1cm4gT2JqZWN0U2NoZW1hLkRpZ2VzdGVyLnJlc29sdmVQcmVmaXhlZFVSSSggdXJpLCBzY2hlbWEgKTtcblx0XHRpZiggc2NoZW1hLnByZWZpeGVzLmhhcyggdXJpICkgKSByZXR1cm4gc2NoZW1hLnByZWZpeGVzLmdldCggdXJpICkuc3RyaW5nVmFsdWU7XG5cblx0XHRpZiggcmVsYXRpdmVUby52b2NhYiApIHtcblx0XHRcdGlmKCBzY2hlbWEudm9jYWIgPT09IG51bGwgKSByZXR1cm4gbnVsbDtcblx0XHRcdHJldHVybiBzY2hlbWEudm9jYWIgKyB1cmk7XG5cdFx0fVxuXHRcdGlmKCByZWxhdGl2ZVRvLmJhc2UgKSBSREYuVVJJLlV0aWwucmVzb2x2ZSggc2NoZW1hLmJhc2UsIHVyaSApO1xuXG5cdFx0cmV0dXJuIHVyaTtcblx0fVxuXG5cdHByaXZhdGUgc3RhdGljIGV4cGFuZExhbmd1YWdlTWFwKCBsYW5ndWFnZU1hcDphbnkgKTphbnkge1xuXHRcdGxldCBleHBhbmRlZExhbmd1YWdlOkFycmF5PE9iamVjdD4gPSBbXTtcblxuXHRcdGxldCBrZXlzOnN0cmluZ1tdID0gT2JqZWN0LmtleXMoIGxhbmd1YWdlTWFwICkuc29ydCgpO1xuXHRcdGZvciggbGV0IGtleSBvZiBrZXlzICkge1xuXHRcdFx0bGV0IHZhbHVlczpBcnJheTxhbnk+ID0gbGFuZ3VhZ2VNYXBbIGtleSBdO1xuXHRcdFx0aWYoICEgVXRpbHMuaXNBcnJheSggdmFsdWVzICkgKSB2YWx1ZXMgPSBbIHZhbHVlcyBdO1xuXG5cdFx0XHRmb3IoIGxldCBpdGVtIG9mIHZhbHVlcyApIHtcblx0XHRcdFx0aWYoIGl0ZW0gPT09IG51bGwgKSBjb250aW51ZTtcblx0XHRcdFx0aWYoICEgVXRpbHMuaXNTdHJpbmcoIGl0ZW0gKSApIHRocm93IG5ldyBFcnJvciggXCJMYW5ndWFnZSBtYXAgdmFsdWVzIG11c3QgYmUgc3RyaW5ncy5cIiApO1xuXG5cdFx0XHRcdGV4cGFuZGVkTGFuZ3VhZ2UucHVzaCgge1xuXHRcdFx0XHRcdFwiQHZhbHVlXCI6IGl0ZW0sXG5cdFx0XHRcdFx0XCJAbGFuZ3VhZ2VcIjoga2V5LnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGV4cGFuZGVkTGFuZ3VhZ2U7XG5cdH1cblxuXHRwcml2YXRlIHN0YXRpYyBnZXRDb250YWluZXIoIGNvbnRleHQ6T2JqZWN0U2NoZW1hLkRpZ2VzdGVkT2JqZWN0U2NoZW1hLCBwcm9wZXJ0eTpzdHJpbmcgKTpPYmplY3RTY2hlbWEuQ29udGFpbmVyVHlwZSB7XG5cdFx0aWYoIGNvbnRleHQucHJvcGVydGllcy5oYXMoIHByb3BlcnR5ICkgKSByZXR1cm4gY29udGV4dC5wcm9wZXJ0aWVzLmdldCggcHJvcGVydHkgKS5jb250YWluZXJUeXBlO1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHRwcml2YXRlIHN0YXRpYyBleHBhbmRWYWx1ZSggY29udGV4dDpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEsIHZhbHVlOmFueSwgcHJvcGVydHlOYW1lOnN0cmluZyApOmFueSB7XG5cdFx0aWYoIFV0aWxzLmlzTnVsbCggdmFsdWUgKSB8fCAhIFV0aWxzLmlzRGVmaW5lZCggdmFsdWUgKSApIHJldHVybiBudWxsO1xuXG5cdFx0aWYoIHByb3BlcnR5TmFtZSA9PT0gXCJAaWRcIiApIHtcblx0XHRcdHJldHVybiBDbGFzcy5leHBhbmRVUkkoIGNvbnRleHQsIHZhbHVlLCB7IGJhc2U6IHRydWUgfSApO1xuXHRcdH0gZWxzZSBpZiggcHJvcGVydHlOYW1lID09PSBcIkB0eXBlXCIgKSB7XG5cdFx0XHRyZXR1cm4gQ2xhc3MuZXhwYW5kVVJJKCBjb250ZXh0LCB2YWx1ZSwgeyB2b2NhYjogdHJ1ZSwgYmFzZTogdHJ1ZSB9ICk7XG5cdFx0fVxuXG5cdFx0bGV0IGRlZmluaXRpb246T2JqZWN0U2NoZW1hLkRpZ2VzdGVkUHJvcGVydHlEZWZpbml0aW9uID0gbmV3IE9iamVjdFNjaGVtYS5EaWdlc3RlZFByb3BlcnR5RGVmaW5pdGlvbigpO1xuXHRcdGlmKCBjb250ZXh0LnByb3BlcnRpZXMuaGFzKCBwcm9wZXJ0eU5hbWUgKSApIGRlZmluaXRpb24gPSBjb250ZXh0LnByb3BlcnRpZXMuZ2V0KCBwcm9wZXJ0eU5hbWUgKTtcblxuXHRcdGlmKCBkZWZpbml0aW9uLmxpdGVyYWwgPT09IGZhbHNlIHx8ICggcHJvcGVydHlOYW1lID09PSBcIkBncmFwaFwiICYmIFV0aWxzLmlzU3RyaW5nKCB2YWx1ZSApICkgKSB7XG5cdFx0XHRsZXQgb3B0aW9uczp7YmFzZTpib29sZWFuLCB2b2NhYj86Ym9vbGVhbn0gPSB7IGJhc2U6IHRydWUgfTtcblx0XHRcdGlmKCBkZWZpbml0aW9uLnBvaW50ZXJUeXBlID09PSBPYmplY3RTY2hlbWEuUG9pbnRlclR5cGUuVk9DQUIgKSBvcHRpb25zLnZvY2FiID0gdHJ1ZTtcblxuXHRcdFx0cmV0dXJuIHsgXCJAaWRcIjogQ2xhc3MuZXhwYW5kVVJJKCBjb250ZXh0LCB2YWx1ZSwgb3B0aW9ucyApIH07XG5cdFx0fVxuXG5cdFx0aWYoIENsYXNzLmlzS2V5d29yZCggcHJvcGVydHlOYW1lICkgKSByZXR1cm4gdmFsdWU7XG5cblx0XHRsZXQgZXhwYW5kZWRWYWx1ZTpPYmplY3QgPSB7fTtcblx0XHRpZiggISAhIGRlZmluaXRpb24ubGl0ZXJhbFR5cGUgKSB7XG5cdFx0XHRleHBhbmRlZFZhbHVlWyBcIkB0eXBlXCIgXSA9IGRlZmluaXRpb24ubGl0ZXJhbFR5cGUuc3RyaW5nVmFsdWU7XG5cdFx0fSBlbHNlIGlmKCBVdGlscy5pc1N0cmluZyggdmFsdWUgKSApIHtcblx0XHRcdGxldCBsYW5ndWFnZTpzdHJpbmcgPSBVdGlscy5pc0RlZmluZWQoIGRlZmluaXRpb24ubGFuZ3VhZ2UgKSA/IGRlZmluaXRpb24ubGFuZ3VhZ2UgOiBjb250ZXh0Lmxhbmd1YWdlO1xuXHRcdFx0aWYoIGxhbmd1YWdlICE9PSBudWxsICkgZXhwYW5kZWRWYWx1ZVsgXCJAbGFuZ3VhZ2VcIiBdID0gbGFuZ3VhZ2U7XG5cdFx0fVxuXG5cdFx0Ly8gTm9ybWFsaXplIHRvIHN0cmluZyB1bmtub3ducyB0eXBlc1xuXHRcdGlmKCBbIFwiYm9vbGVhblwiLCBcIm51bWJlclwiLCBcInN0cmluZ1wiIF0uaW5kZXhPZiggdHlwZW9mIHZhbHVlICkgPT09IC0gMSApIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcblx0XHRleHBhbmRlZFZhbHVlWyBcIkB2YWx1ZVwiIF0gPSB2YWx1ZTtcblxuXHRcdHJldHVybiBleHBhbmRlZFZhbHVlO1xuXHR9XG5cblx0cHJpdmF0ZSBzdGF0aWMgcHJvY2VzcyggY29udGV4dDpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEsIGVsZW1lbnQ6T2JqZWN0LCBhY3RpdmVQcm9wZXJ0eT86c3RyaW5nLCBpbnNpZGVMaXN0Pzpib29sZWFuICk6T2JqZWN0IHtcblx0XHRpZiggVXRpbHMuaXNOdWxsKCBlbGVtZW50ICkgfHwgISBVdGlscy5pc0RlZmluZWQoIGVsZW1lbnQgKSApIHJldHVybiBudWxsO1xuXG5cdFx0Ly8gRXhwYW5kIGFuIGVsZW1lbnQgYWNjb3JkaW5nIHRvIHRoZSBjb250ZXh0XG5cdFx0aWYoICEgVXRpbHMuaXNBcnJheSggZWxlbWVudCApICYmICEgVXRpbHMuaXNPYmplY3QoIGVsZW1lbnQgKSApIHtcblx0XHRcdGlmKCAhIGluc2lkZUxpc3QgJiYgKCBhY3RpdmVQcm9wZXJ0eSA9PT0gbnVsbCB8fCBhY3RpdmVQcm9wZXJ0eSA9PT0gXCJAZ3JhcGhcIiApICkgcmV0dXJuIG51bGw7XG5cdFx0XHRyZXR1cm4gQ2xhc3MuZXhwYW5kVmFsdWUoIGNvbnRleHQsIGVsZW1lbnQsIGFjdGl2ZVByb3BlcnR5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmVjdXJzaXZlbHkgZXhwYW5kIHRoZSBhcnJheVxuXHRcdGlmKCBVdGlscy5pc0FycmF5KCBlbGVtZW50ICkgKSB7XG5cdFx0XHRsZXQgY29udGFpbmVyOk9iamVjdFNjaGVtYS5Db250YWluZXJUeXBlID0gQ2xhc3MuZ2V0Q29udGFpbmVyKCBjb250ZXh0LCBhY3RpdmVQcm9wZXJ0eSApO1xuXHRcdFx0aW5zaWRlTGlzdCA9IGluc2lkZUxpc3QgfHwgY29udGFpbmVyID09PSBPYmplY3RTY2hlbWEuQ29udGFpbmVyVHlwZS5MSVNUO1xuXG5cdFx0XHRsZXQgZXhwYW5kZWRFbGVtZW50OkFycmF5PE9iamVjdD4gPSBbXTtcblx0XHRcdGZvciggbGV0IGl0ZW0gb2YgKDxBcnJheTxhbnk+PiBlbGVtZW50KSApIHtcblx0XHRcdFx0bGV0IGV4cGFuZGVkSXRlbTphbnkgPSBDbGFzcy5wcm9jZXNzKCBjb250ZXh0LCBpdGVtLCBhY3RpdmVQcm9wZXJ0eSApO1xuXHRcdFx0XHRpZiggZXhwYW5kZWRJdGVtID09PSBudWxsICkgY29udGludWU7XG5cblx0XHRcdFx0aWYoIGluc2lkZUxpc3QgJiYgKCBVdGlscy5pc0FycmF5KCBleHBhbmRlZEl0ZW0gKSB8fCBSREYuTGlzdC5GYWN0b3J5LmlzKCBleHBhbmRlZEl0ZW0gKSApICkgdGhyb3cgbmV3IEVycm9yKCBcIkxpc3RzIG9mIGxpc3RzIGFyZSBub3QgcGVybWl0dGVkLlwiICk7XG5cblx0XHRcdFx0aWYoICEgVXRpbHMuaXNBcnJheSggZXhwYW5kZWRJdGVtICkgKSBleHBhbmRlZEl0ZW0gPSBbIGV4cGFuZGVkSXRlbSBdO1xuXHRcdFx0XHRBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSggZXhwYW5kZWRFbGVtZW50LCBleHBhbmRlZEl0ZW0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBleHBhbmRlZEVsZW1lbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gRXhwYW5kIGN1cnJlbnQgY29udGV4dFxuXHRcdGlmKCBcIkBjb250ZXh0XCIgaW4gZWxlbWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBPYmplY3RTY2hlbWEuRGlnZXN0ZXIuY29tYmluZURpZ2VzdGVkT2JqZWN0U2NoZW1hcyggW1xuXHRcdFx0XHRPYmplY3RTY2hlbWEuRGlnZXN0ZXIuZGlnZXN0U2NoZW1hKCBlbGVtZW50WyBcIkBjb250ZXh0XCIgXSApLFxuXHRcdFx0XHRjb250ZXh0LFxuXHRcdFx0XSApO1xuXHRcdH1cblxuXHRcdC8vIFJlY3Vyc2l2ZWx5IGV4cGFuZCB0aGUgb2JqZWN0XG5cdFx0bGV0IGV4cGFuZGVkRWxlbWVudDpPYmplY3QgPSB7fTtcblx0XHRsZXQga2V5czpzdHJpbmdbXSA9IE9iamVjdC5rZXlzKCBlbGVtZW50ICk7XG5cdFx0Zm9yKCBsZXQga2V5IG9mIGtleXMgKSB7XG5cdFx0XHRpZigga2V5ID09PSBcIkBjb250ZXh0XCIgKSBjb250aW51ZTtcblxuXHRcdFx0bGV0IHVyaTpzdHJpbmcgPSBDbGFzcy5leHBhbmRVUkkoIGNvbnRleHQsIGtleSwgeyB2b2NhYjogdHJ1ZSB9ICk7XG5cdFx0XHRpZiggISB1cmkgfHwgISAoIFJERi5VUkkuVXRpbC5pc0Fic29sdXRlKCB1cmkgKSB8fCBSREYuVVJJLlV0aWwuaXNCTm9kZUlEKCB1cmkgKSB8fCBDbGFzcy5pc0tleXdvcmQoIHVyaSApICkgKSBjb250aW51ZTtcblxuXHRcdFx0bGV0IHZhbHVlOmFueSA9IGVsZW1lbnRbIGtleSBdO1xuXG5cdFx0XHQvLyBWYWxpZGF0ZSB2YWx1ZVxuXHRcdFx0aWYoIENsYXNzLmlzS2V5d29yZCggdXJpICkgKSB7XG5cdFx0XHRcdGlmKCB1cmkgPT09IFwiQGlkXCIgJiYgISBVdGlscy5pc1N0cmluZyggdmFsdWUgKSApIHRocm93IG5ldyBFcnJvciggYFwiQGlkXCIgdmFsdWUgbXVzdCBhIHN0cmluZy5gICk7XG5cdFx0XHRcdGlmKCB1cmkgPT09IFwiQHR5cGVcIiAmJiAhIENsYXNzLmlzVmFsaWRUeXBlKCB2YWx1ZSApICkgdGhyb3cgbmV3IEVycm9yKCBgXCJAdHlwZVwiIHZhbHVlIG11c3QgYSBzdHJpbmcsIGFuIGFycmF5IG9mIHN0cmluZ3MuYCApO1xuXHRcdFx0XHRpZiggdXJpID09PSBcIkBncmFwaFwiICYmICEgKCBVdGlscy5pc09iamVjdCggdmFsdWUgKSB8fCBVdGlscy5pc0FycmF5KCB2YWx1ZSApICkgKSB0aHJvdyBuZXcgRXJyb3IoIGBcIkBncmFwaFwiIHZhbHVlIG11c3Qgbm90IGJlIGFuIG9iamVjdCBvciBhbiBhcnJheS5gICk7XG5cdFx0XHRcdGlmKCB1cmkgPT09IFwiQHZhbHVlXCIgJiYgKCBVdGlscy5pc09iamVjdCggdmFsdWUgKSB8fCBVdGlscy5pc0FycmF5KCB2YWx1ZSApICkgKSB0aHJvdyBuZXcgRXJyb3IoIGBcIkB2YWx1ZVwiIHZhbHVlIG11c3Qgbm90IGJlIGFuIG9iamVjdCBvciBhbiBhcnJheS5gICk7XG5cdFx0XHRcdGlmKCB1cmkgPT09IFwiQGxhbmd1YWdlXCIgKSB7XG5cdFx0XHRcdFx0aWYoIHZhbHVlID09PSBudWxsICkgY29udGludWU7XG5cdFx0XHRcdFx0aWYoICEgVXRpbHMuaXNTdHJpbmcoIHZhbHVlICkgKSB0aHJvdyBuZXcgRXJyb3IoIGBcIkBsYW5ndWFnZVwiIHZhbHVlIG11c3QgYmUgYSBzdHJpbmcuYCApO1xuXHRcdFx0XHRcdHZhbHVlID0gKDxzdHJpbmc+IHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoIHVyaSA9PT0gXCJAaW5kZXhcIiAmJiAhIFV0aWxzLmlzU3RyaW5nKCB2YWx1ZSApICkgdGhyb3cgbmV3IEVycm9yKCBgXCJAaW5kZXhcIiB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nLmAgKTtcblx0XHRcdFx0aWYoIHVyaSA9PT0gXCJAcmV2ZXJzZVwiICYmICEgVXRpbHMuaXNPYmplY3QoIHZhbHVlICkgKSB0aHJvdyBuZXcgRXJyb3IoIGBcIkByZXZlcnNlXCIgdmFsdWUgbXVzdCBiZSBhbiBvYmplY3QuYCApO1xuXHRcdFx0XHQvLyBUT0RPOiBOb3Qgc3VwcG9ydGVkXG5cdFx0XHRcdGlmKCB1cmkgPT09IFwiQGluZGV4XCIgfHwgdXJpID09PSBcIkByZXZlcnNlXCIgKSB0aHJvdyBuZXcgRXJyb3JzLk5vdEltcGxlbWVudGVkRXJyb3IoIGBUaGUgU0RLIGRvZXMgbm90IHN1cHBvcnQgXCJAaW5kZXhcIiBhbmQgXCJAcmV2ZXJzZVwiIHRhZ3MuYCApO1xuXHRcdFx0fVxuXG5cdFx0XHRsZXQgZXhwYW5kZWRWYWx1ZTphbnk7XG5cdFx0XHRsZXQgY29udGFpbmVyOk9iamVjdFNjaGVtYS5Db250YWluZXJUeXBlID0gQ2xhc3MuZ2V0Q29udGFpbmVyKCBjb250ZXh0LCBrZXkgKTtcblx0XHRcdGlmKCBjb250YWluZXIgPT09IE9iamVjdFNjaGVtYS5Db250YWluZXJUeXBlLkxBTkdVQUdFICYmIFV0aWxzLmlzT2JqZWN0KCB2YWx1ZSApICkge1xuXHRcdFx0XHRleHBhbmRlZFZhbHVlID0gQ2xhc3MuZXhwYW5kTGFuZ3VhZ2VNYXAoIHZhbHVlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRsZXQgbmV4dEFjdGl2ZVByb3BlcnR5OnN0cmluZyA9IGtleTtcblxuXHRcdFx0XHRsZXQgaXNMaXN0OmJvb2xlYW4gPSB1cmkgPT09IFwiQGxpc3RcIjtcblx0XHRcdFx0aWYoIGlzTGlzdCB8fCB1cmkgPT09IFwiQHNldFwiKSB7XG5cdFx0XHRcdFx0bmV4dEFjdGl2ZVByb3BlcnR5ID0gYWN0aXZlUHJvcGVydHk7XG5cdFx0XHRcdFx0aWYoIGlzTGlzdCAmJiBhY3RpdmVQcm9wZXJ0eSA9PT0gXCJAZ3JhcGhcIiApIG5leHRBY3RpdmVQcm9wZXJ0eSA9IG51bGw7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRleHBhbmRlZFZhbHVlID0gQ2xhc3MucHJvY2VzcyggY29udGV4dCwgdmFsdWUsIG5leHRBY3RpdmVQcm9wZXJ0eSwgaXNMaXN0ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERyb3AgbnVsbCB2YWx1ZXMgaWYgaXMgbm90IGEgXCJAdmFsdWVcIiBwcm9wZXJ0eVxuXHRcdFx0aWYoIGV4cGFuZGVkVmFsdWUgPT09IG51bGwgJiYgdXJpICE9PSBcIkB2YWx1ZVwiICkgY29udGludWU7XG5cblx0XHRcdGlmKCB1cmkgIT09IFwiQGxpc3RcIiAmJiAhIFJERi5MaXN0LkZhY3RvcnkuaXMoIGV4cGFuZGVkVmFsdWUgKSAmJiBjb250YWluZXIgPT09IE9iamVjdFNjaGVtYS5Db250YWluZXJUeXBlLkxJU1QgKSB7XG5cdFx0XHRcdGlmKCAhIFV0aWxzLmlzQXJyYXkoIGV4cGFuZGVkVmFsdWUgKSApIGV4cGFuZGVkVmFsdWUgPSBbIGV4cGFuZGVkVmFsdWUgXTtcblx0XHRcdFx0ZXhwYW5kZWRWYWx1ZSA9IHsgXCJAbGlzdFwiOiBleHBhbmRlZFZhbHVlIH07XG5cdFx0XHR9XG5cblx0XHRcdGxldCB1c2VBcnJheTpib29sZWFuID0gWyBcIkB0eXBlXCIsIFwiQGlkXCIsIFwiQHZhbHVlXCIsIFwiQGxhbmd1YWdlXCIgXS5pbmRleE9mKCB1cmkgKSA9PT0gLSAxO1xuXHRcdFx0Q2xhc3MuYWRkVmFsdWUoIGV4cGFuZGVkRWxlbWVudCwgdXJpLCBleHBhbmRlZFZhbHVlLCB7IHByb3BlcnR5SXNBcnJheTogdXNlQXJyYXkgfSApO1xuXHRcdH1cblxuXHRcdGlmKCBcIkB2YWx1ZVwiIGluIGV4cGFuZGVkRWxlbWVudCApIHtcblx0XHRcdGlmKCBleHBhbmRlZEVsZW1lbnRbIFwiQHZhbHVlXCIgXSA9PT0gbnVsbCApIGV4cGFuZGVkRWxlbWVudCA9IG51bGw7XG5cdFx0fSBlbHNlIGlmKCBcIkB0eXBlXCIgaW4gZXhwYW5kZWRFbGVtZW50ICkge1xuXHRcdFx0aWYoICEgVXRpbHMuaXNBcnJheSggZXhwYW5kZWRFbGVtZW50WyBcIkB0eXBlXCIgXSApICkgZXhwYW5kZWRFbGVtZW50WyBcIkB0eXBlXCIgXSA9IFsgZXhwYW5kZWRFbGVtZW50WyBcIkB0eXBlXCIgXSBdO1xuXHRcdH0gZWxzZSBpZiggXCJAc2V0XCIgaW4gZXhwYW5kZWRFbGVtZW50ICkge1xuXHRcdFx0ZXhwYW5kZWRFbGVtZW50ID0gZXhwYW5kZWRFbGVtZW50WyBcIkBzZXRcIiBdO1xuXHRcdH1cblxuXHRcdHJldHVybiBleHBhbmRlZEVsZW1lbnQ7XG5cdH1cblxuXHRwcml2YXRlIHN0YXRpYyBhZGRWYWx1ZSggZWxlbWVudDpPYmplY3QsIHByb3BlcnR5TmFtZTpzdHJpbmcsIHZhbHVlOmFueSwgb3B0aW9uczp7IHByb3BlcnR5SXNBcnJheTpib29sZWFuIH0gKTp2b2lkIHtcblx0XHRpZiggVXRpbHMuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGxldCB2YWx1ZXM6QXJyYXk8YW55PiA9IHZhbHVlO1xuXHRcdFx0aWYoIHZhbHVlcy5sZW5ndGggPT09IDAgJiYgb3B0aW9ucy5wcm9wZXJ0eUlzQXJyYXkgJiYgISBVdGlscy5oYXNQcm9wZXJ0eSggZWxlbWVudCwgcHJvcGVydHlOYW1lICkgKSBlbGVtZW50WyBwcm9wZXJ0eU5hbWUgXSA9IFtdO1xuXHRcdFx0Zm9yKCBsZXQgaXRlbSBvZiB2YWx1ZXMgKSB7XG5cdFx0XHRcdENsYXNzLmFkZFZhbHVlKCBlbGVtZW50LCBwcm9wZXJ0eU5hbWUsIGl0ZW0sIG9wdGlvbnMgKTtcblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiggcHJvcGVydHlOYW1lIGluIGVsZW1lbnQgKSB7XG5cdFx0XHRpZiggISBDbGFzcy5oYXNWYWx1ZSggZWxlbWVudCwgcHJvcGVydHlOYW1lLCB2YWx1ZSApICkge1xuXHRcdFx0XHRsZXQgaXRlbXM6QXJyYXk8YW55PiA9IGVsZW1lbnRbIHByb3BlcnR5TmFtZSBdO1xuXHRcdFx0XHRpZiggISBVdGlscy5pc0FycmF5KCBpdGVtcyApICkgaXRlbXMgPSBlbGVtZW50WyBwcm9wZXJ0eU5hbWUgXSA9IFsgaXRlbXMgXTtcblx0XHRcdFx0aXRlbXMucHVzaCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbWVudFsgcHJvcGVydHlOYW1lIF0gPSBvcHRpb25zLnByb3BlcnR5SXNBcnJheSA/IFsgdmFsdWUgXSA6IHZhbHVlO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgc3RhdGljIGhhc1Byb3BlcnR5KCBlbGVtZW50Ok9iamVjdCwgcHJvcGVydHlOYW1lOnN0cmluZyApOmJvb2xlYW4ge1xuXHRcdGlmKCBwcm9wZXJ0eU5hbWUgaW4gZWxlbWVudCApIHtcblx0XHRcdGxldCBpdGVtOmFueSA9IGVsZW1lbnRbIHByb3BlcnR5TmFtZSBdO1xuXHRcdFx0cmV0dXJuICEgVXRpbHMuaXNBcnJheSggaXRlbSApIHx8ICg8QXJyYXk8YW55Pj4gaXRlbSkubGVuZ3RoID4gMDtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cHJpdmF0ZSBzdGF0aWMgY29tcGFyZVZhbHVlcyggdmFsdWUxOmFueSwgdmFsdWUyOmFueSApOmJvb2xlYW4ge1xuXHRcdGlmKCB2YWx1ZTEgPT09IHZhbHVlMiApIHJldHVybiB0cnVlO1xuXG5cdFx0aWYoIFV0aWxzLmlzT2JqZWN0KCB2YWx1ZTEgKSAmJiBVdGlscy5pc09iamVjdCggdmFsdWUyICkgKSB7XG5cblx0XHRcdGlmKCBcIkB2YWx1ZVwiIGluIHZhbHVlMVxuXHRcdFx0XHQmJiB2YWx1ZTFbIFwiQHZhbHVlXCIgXSA9PT0gdmFsdWUyWyBcIkB2YWx1ZVwiIF1cblx0XHRcdFx0JiYgdmFsdWUxWyBcIkB0eXBlXCIgXSA9PT0gdmFsdWUyWyBcIkB0eXBlXCIgXVxuXHRcdFx0XHQmJiB2YWx1ZTFbIFwiQGxhbmd1YWdlXCIgXSA9PT0gdmFsdWUyWyBcIkBsYW5ndWFnZVwiIF1cblx0XHRcdFx0JiYgdmFsdWUxWyBcIkBpbmRleFwiIF0gPT09IHZhbHVlMlsgXCJAaW5kZXhcIiBdIClcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHRcdGlmKCBcIkBpZFwiIGluIHZhbHVlMSApXG5cdFx0XHRcdHJldHVybiB2YWx1ZTFbIFwiQGlkXCIgXSA9PT0gdmFsdWUyWyBcIkBpZFwiIF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRwcml2YXRlIHN0YXRpYyBoYXNWYWx1ZSggZWxlbWVudDpPYmplY3QsIHByb3BlcnR5TmFtZTpzdHJpbmcsIHZhbHVlOmFueSApOmJvb2xlYW4ge1xuXHRcdGlmKCBDbGFzcy5oYXNQcm9wZXJ0eSggZWxlbWVudCwgcHJvcGVydHlOYW1lICkgKSB7XG5cdFx0XHRsZXQgaXRlbTphbnkgPSBlbGVtZW50WyBwcm9wZXJ0eU5hbWUgXTtcblx0XHRcdGxldCBpc0xpc3Q6Ym9vbGVhbiA9IFJERi5MaXN0LkZhY3RvcnkuaXMoIGl0ZW0gKTtcblxuXHRcdFx0aWYoIGlzTGlzdCB8fCBVdGlscy5pc0FycmF5KCBpdGVtICkgKSB7XG5cdFx0XHRcdGxldCBpdGVtczphbnlbXSA9IGlzTGlzdCA/IGl0ZW1bIFwiQGxpc3RcIiBdIDogaXRlbTtcblxuXHRcdFx0XHRmb3IoIGxldCBlbnRyeSBvZiBpdGVtcyApIHtcblx0XHRcdFx0XHRpZiggQ2xhc3MuY29tcGFyZVZhbHVlcyggZW50cnksIHZhbHVlICkgKSByZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmKCAhIFV0aWxzLmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiBDbGFzcy5jb21wYXJlVmFsdWVzKCBpdGVtLCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0ICogYXMgQ29udmVydGVyIGZyb20gXCIuL0pTT05MRC9Db252ZXJ0ZXJcIjtcbmltcG9ydCAqIGFzIFBhcnNlciBmcm9tIFwiLi9KU09OTEQvUGFyc2VyXCI7XG5pbXBvcnQgKiBhcyBQcm9jZXNzb3IgZnJvbSBcIi4vSlNPTkxEL1Byb2Nlc3NvclwiO1xuXG5leHBvcnQge1xuXHRDb252ZXJ0ZXIsXG5cdFBhcnNlcixcblx0UHJvY2Vzc29yLFxufVxuIiwiaW1wb3J0ICogYXMgRXJyb3JzIGZyb20gXCIuLy4uL0Vycm9yc1wiO1xuaW1wb3J0ICogYXMgT2JqZWN0U2NoZW1hIGZyb20gXCIuLy4uL09iamVjdFNjaGVtYVwiO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vLi4vVXRpbHNcIjtcblxuZXhwb3J0IGNsYXNzIENsYXNzIHtcblx0c3RyaW5nVmFsdWU6c3RyaW5nO1xuXG5cdGNvbnN0cnVjdG9yKCBzdHJpbmdWYWx1ZTpzdHJpbmcgKSB7XG5cdFx0dGhpcy5zdHJpbmdWYWx1ZSA9IHN0cmluZ1ZhbHVlO1xuXHR9XG5cblx0dG9TdHJpbmcoKTpzdHJpbmcge1xuXHRcdHJldHVybiB0aGlzLnN0cmluZ1ZhbHVlO1xuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBVdGlsIHtcblx0c3RhdGljIGhhc0ZyYWdtZW50KCB1cmk6c3RyaW5nICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIHVyaS5pbmRleE9mKCBcIiNcIiApICE9PSAtIDE7XG5cdH1cblxuXHRzdGF0aWMgaGFzUXVlcnkoIHVyaTpzdHJpbmcgKTpib29sZWFuIHtcblx0XHRyZXR1cm4gdXJpLmluZGV4T2YoIFwiP1wiICkgIT09IC0gMTtcblx0fVxuXG5cdHN0YXRpYyBoYXNQcm90b2NvbCggdXJpOnN0cmluZyApOmJvb2xlYW4ge1xuXHRcdHJldHVybiBVdGlscy5TLnN0YXJ0c1dpdGgoIHVyaSwgXCJodHRwczovL1wiICkgfHwgVXRpbHMuUy5zdGFydHNXaXRoKCB1cmksIFwiaHR0cDovL1wiICk7XG5cdH1cblxuXHRzdGF0aWMgaXNBYnNvbHV0ZSggdXJpOnN0cmluZyApOmJvb2xlYW4ge1xuXHRcdHJldHVybiBVdGlscy5TLnN0YXJ0c1dpdGgoIHVyaSwgXCJodHRwOi8vXCIgKVxuXHRcdFx0fHwgVXRpbHMuUy5zdGFydHNXaXRoKCB1cmksIFwiaHR0cHM6Ly9cIiApXG5cdFx0XHR8fCBVdGlscy5TLnN0YXJ0c1dpdGgoIHVyaSwgXCI6Ly9cIiApO1xuXHR9XG5cblx0c3RhdGljIGlzUmVsYXRpdmUoIHVyaTpzdHJpbmcgKTpib29sZWFuIHtcblx0XHRyZXR1cm4gISBVdGlsLmlzQWJzb2x1dGUoIHVyaSApO1xuXHR9XG5cblx0c3RhdGljIGlzQk5vZGVJRCggdXJpOnN0cmluZyApOmJvb2xlYW4ge1xuXHRcdHJldHVybiBVdGlscy5TLnN0YXJ0c1dpdGgoIHVyaSwgXCJfOlwiICk7XG5cdH1cblxuXHRzdGF0aWMgZ2VuZXJhdGVCTm9kZUlEKCk6c3RyaW5nIHtcblx0XHRyZXR1cm4gXCJfOlwiICsgVXRpbHMuVVVJRC5nZW5lcmF0ZSgpO1xuXHR9XG5cblx0c3RhdGljIGlzUHJlZml4ZWQoIHVyaTpzdHJpbmcgKTpib29sZWFuIHtcblx0XHRyZXR1cm4gISBVdGlsLmlzQWJzb2x1dGUoIHVyaSApICYmICEgVXRpbC5pc0JOb2RlSUQoIHVyaSApICYmIFV0aWxzLlMuY29udGFpbnMoIHVyaSwgXCI6XCIgKTtcblx0fVxuXG5cdHN0YXRpYyBpc0ZyYWdtZW50T2YoIGZyYWdtZW50VVJJOnN0cmluZywgdXJpOnN0cmluZyApOmJvb2xlYW4ge1xuXHRcdGlmKCAhIFV0aWwuaGFzRnJhZ21lbnQoIGZyYWdtZW50VVJJICkgKSByZXR1cm4gZmFsc2U7XG5cblx0XHRyZXR1cm4gVXRpbC5nZXREb2N1bWVudFVSSSggZnJhZ21lbnRVUkkgKSA9PT0gdXJpO1xuXHR9XG5cblx0c3RhdGljIGlzQmFzZU9mKCBiYXNlVVJJOnN0cmluZywgdXJpOnN0cmluZyApOmJvb2xlYW4ge1xuXHRcdGlmKCBiYXNlVVJJID09PSB1cmkgKSByZXR1cm4gdHJ1ZTtcblx0XHRpZiggYmFzZVVSSSA9PT0gXCJcIiApIHJldHVybiB0cnVlO1xuXG5cdFx0aWYoIHVyaS5zdGFydHNXaXRoKCBiYXNlVVJJICkgKSB7XG5cdFx0XHRpZiggVXRpbHMuUy5lbmRzV2l0aCggYmFzZVVSSSwgXCIvXCIgKSB8fCBVdGlscy5TLmVuZHNXaXRoKCBiYXNlVVJJLCBcIiNcIiApICkgcmV0dXJuIHRydWU7XG5cblx0XHRcdGxldCByZWxhdGl2ZVVSSTpzdHJpbmcgPSB1cmkuc3Vic3RyaW5nKCBiYXNlVVJJLmxlbmd0aCApO1xuXHRcdFx0aWYoIFV0aWxzLlMuc3RhcnRzV2l0aCggcmVsYXRpdmVVUkksIFwiL1wiICkgfHwgVXRpbHMuUy5zdGFydHNXaXRoKCByZWxhdGl2ZVVSSSwgXCIjXCIgKSApIHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHN0YXRpYyBnZXRSZWxhdGl2ZVVSSSggYWJzb2x1dGVVUkk6c3RyaW5nLCBiYXNlOnN0cmluZyApOnN0cmluZyB7XG5cdFx0aWYoICEgYWJzb2x1dGVVUkkuc3RhcnRzV2l0aCggYmFzZSApIClcblx0XHRcdHJldHVybiBhYnNvbHV0ZVVSSTtcblx0XHRyZXR1cm4gYWJzb2x1dGVVUkkuc3Vic3RyaW5nKCBiYXNlLmxlbmd0aCApO1xuXHR9XG5cblx0c3RhdGljIGdldERvY3VtZW50VVJJKCB1cmk6c3RyaW5nICk6c3RyaW5nIHtcblx0XHRsZXQgcGFydHM6c3RyaW5nW10gPSB1cmkuc3BsaXQoIFwiI1wiICk7XG5cdFx0aWYoIHBhcnRzLmxlbmd0aCA+IDIgKSB0aHJvdyBuZXcgRXJyb3IoIFwiSWxsZWdhbEFyZ3VtZW50OiBUaGUgVVJJIHByb3ZpZGVkIGhhcyBtb3JlIHRoYW4gb25lICMgc2lnbi5cIiApO1xuXG5cdFx0cmV0dXJuIHBhcnRzWyAwIF07XG5cdH1cblxuXHRzdGF0aWMgZ2V0RnJhZ21lbnQoIHVyaTpzdHJpbmcgKTpzdHJpbmcge1xuXHRcdGxldCBwYXJ0czpzdHJpbmdbXSA9IHVyaS5zcGxpdCggXCIjXCIgKTtcblx0XHRpZiggcGFydHMubGVuZ3RoIDwgMiApIHJldHVybiBudWxsO1xuXHRcdGlmKCBwYXJ0cy5sZW5ndGggPiAyICkgdGhyb3cgbmV3IEVycm9yKCBcIklsbGVnYWxBcmd1bWVudDogVGhlIFVSSSBwcm92aWRlZCBoYXMgbW9yZSB0aGFuIG9uZSAjIHNpZ24uXCIgKTtcblxuXHRcdHJldHVybiBwYXJ0c1sgMSBdO1xuXHR9XG5cblx0c3RhdGljIGdldFNsdWcoIHVyaTpzdHJpbmcgKTpzdHJpbmcge1xuXHRcdGxldCB1cmlQYXJ0czpzdHJpbmdbXSA9IHVyaS5zcGxpdCggXCIjXCIgKTtcblx0XHRpZiggdXJpUGFydHMubGVuZ3RoID09PSAyICkgcmV0dXJuIFV0aWwuZ2V0U2x1ZyggdXJpUGFydHNbIDEgXSApO1xuXHRcdGlmKCB1cmlQYXJ0cy5sZW5ndGggPiAyICkgdGhyb3cgbmV3IEVycm9ycy5JbGxlZ2FsQXJndW1lbnRFcnJvciggXCJJbnZhbGlkIFVSSTogVGhlIHVyaSBjb250YWlucyB0d28gJyMnIHN5bWJvbHMuXCIgKTtcblxuXHRcdHVyaSA9IHVyaVBhcnRzWyAwIF07XG5cblx0XHRpZiggdXJpID09PSBcIlwiICkgcmV0dXJuIHVyaTtcblx0XHRpZiggdXJpID09PSBcIi9cIiApIHJldHVybiB1cmk7XG5cblx0XHRsZXQgcGFydHM6c3RyaW5nW10gPSB1cmkuc3BsaXQoIFwiL1wiICk7XG5cdFx0aWYoIHBhcnRzWyBwYXJ0cy5sZW5ndGggLSAxIF0gPT09IFwiXCIgKSB7XG5cdFx0XHRyZXR1cm4gcGFydHNbIHBhcnRzLmxlbmd0aCAtIDIgXSArIFwiL1wiO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gcGFydHNbIHBhcnRzLmxlbmd0aCAtIDEgXTtcblx0XHR9XG5cdH1cblxuXHRzdGF0aWMgZ2V0UGFyYW1ldGVycyggdXJpOnN0cmluZyApOk1hcDxzdHJpbmcsIHN0cmluZyB8IHN0cmluZ1tdPiB7XG5cdFx0bGV0IHBhcmFtZXRlcnM6TWFwPHN0cmluZywgc3RyaW5nIHwgc3RyaW5nW10+ID0gbmV3IE1hcCgpO1xuXG5cdFx0aWYoICEgVXRpbC5oYXNRdWVyeSggdXJpICkgKSByZXR1cm4gcGFyYW1ldGVycztcblxuXHRcdHVyaS5yZXBsYWNlKCAvXi4qXFw/LywgXCJcIiApLnNwbGl0KCBcIiZcIiApLmZvckVhY2goICggcGFyYW06c3RyaW5nICkgPT4ge1xuXHRcdFx0bGV0IHBhcnRzOnN0cmluZ1tdID0gcGFyYW0ucmVwbGFjZSggL1xcKy9nLCBcIiBcIiApLnNwbGl0KCBcIj1cIiApO1xuXG5cdFx0XHRsZXQga2V5OnN0cmluZyA9IHBhcnRzLnNoaWZ0KCk7XG5cdFx0XHRsZXQgdmFsOnN0cmluZyA9IHBhcnRzLmxlbmd0aCA+IDAgPyBwYXJ0cy5qb2luKCBcIj1cIiApIDogbnVsbDtcblxuXHRcdFx0aWYoICEgcGFyYW1ldGVycy5oYXMoIGtleSApICkge1xuXHRcdFx0XHRwYXJhbWV0ZXJzLnNldCgga2V5LCB2YWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHBhcmFtZXRlcnMuc2V0KCBrZXksIFtdLmNvbmNhdCggcGFyYW1ldGVycy5nZXQoIGtleSApLCB2YWwgKSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdHJldHVybiBwYXJhbWV0ZXJzO1xuXHR9XG5cblx0c3RhdGljIHJlc29sdmUoIHBhcmVudFVSSTpzdHJpbmcsIGNoaWxkVVJJOnN0cmluZyApOnN0cmluZyB7XG5cdFx0aWYoIFV0aWwuaXNBYnNvbHV0ZSggY2hpbGRVUkkgKSB8fCBVdGlsLmlzQk5vZGVJRCggY2hpbGRVUkkgKSB8fCBVdGlsLmlzUHJlZml4ZWQoIGNoaWxkVVJJICkgKVxuXHRcdFx0cmV0dXJuIGNoaWxkVVJJO1xuXG5cdFx0bGV0IHByb3RvY29sOnN0cmluZyA9IHBhcmVudFVSSS5zdWJzdHIoIDAsIHBhcmVudFVSSS5pbmRleE9mKCBcIjovL1wiICkgKyAzICk7XG5cdFx0bGV0IHBhdGg6c3RyaW5nID0gcGFyZW50VVJJLnN1YnN0ciggcGFyZW50VVJJLmluZGV4T2YoIFwiOi8vXCIgKSArIDMsICBwYXJlbnRVUkkubGVuZ3RoIC0gMSApO1xuXHRcdGlmKCBwYXRoLmxhc3RJbmRleE9mKCBcIi9cIiApID09PSAtMSApIHBhdGggKz0gXCIvXCI7XG5cblx0XHRpZiggVXRpbHMuUy5zdGFydHNXaXRoKCBjaGlsZFVSSSwgXCI/XCIgKSB8fCBVdGlscy5TLnN0YXJ0c1dpdGgoIGNoaWxkVVJJLCBcIiNcIiApICkge1xuXHRcdFx0aWYoIFV0aWwuaGFzUXVlcnkoIHBhdGggKSApIHBhdGggPSBwYXRoLnN1YnN0ciggMCwgcGF0aC5pbmRleE9mKCBcIj9cIiApICk7XG5cdFx0XHRpZiggVXRpbC5oYXNGcmFnbWVudCggcGF0aCApICYmICggISBVdGlscy5TLnN0YXJ0c1dpdGgoIGNoaWxkVVJJLCBcIj9cIiApIHx8IFV0aWxzLlMuZW5kc1dpdGgoIHBhdGgsIFwiI1wiICkgKSApIHBhdGggPSBVdGlsLmdldERvY3VtZW50VVJJKCBwYXRoICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHBhdGggPSBwYXRoLnN1YnN0ciggMCwgcGF0aC5sYXN0SW5kZXhPZiggXCIvXCIgKSArIDEgKTtcblx0XHRcdGlmKCAhIFV0aWxzLlMuZW5kc1dpdGgoIHBhdGgsIFwiP1wiICkgJiYgISBVdGlscy5TLmVuZHNXaXRoKCBwYXRoLCBcIiNcIiApICAmJiAhIFV0aWxzLlMuZW5kc1dpdGgoIHBhdGgsIFwiL1wiICkgKSBwYXRoICs9IFwiL1wiO1xuXHRcdH1cblxuXHRcdGlmKCBVdGlscy5TLnN0YXJ0c1dpdGgoIGNoaWxkVVJJLCBcIi9cIiApICkge1xuXHRcdFx0Y2hpbGRVUkkgPSBjaGlsZFVSSS5zdWJzdHIoIDEsIGNoaWxkVVJJLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBwcm90b2NvbCArIHBhdGggKyBjaGlsZFVSSTtcblx0fVxuXG5cdHN0YXRpYyByZW1vdmVQcm90b2NvbCggdXJpOnN0cmluZyApOnN0cmluZyB7XG5cdFx0aWYoIFV0aWxzLlMuc3RhcnRzV2l0aCggdXJpLCBcImh0dHBzOi8vXCIgKSApIHJldHVybiB1cmkuc3Vic3RyKCA1LCB1cmkubGVuZ3RoICk7XG5cdFx0aWYoIFV0aWxzLlMuc3RhcnRzV2l0aCggdXJpLCBcImh0dHA6Ly9cIiApICkgcmV0dXJuIHVyaS5zdWJzdHIoIDQsIHVyaS5sZW5ndGggKTtcblx0XHRyZXR1cm4gdXJpO1xuXHR9XG5cblx0c3RhdGljIHByZWZpeCggdXJpOnN0cmluZywgcHJlZml4OnN0cmluZywgcHJlZml4VVJJOnN0cmluZyApOnN0cmluZztcblx0c3RhdGljIHByZWZpeCggdXJpOnN0cmluZywgb2JqZWN0U2NoZW1hOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSApOnN0cmluZztcblx0c3RhdGljIHByZWZpeCggdXJpOnN0cmluZywgcHJlZml4T3JPYmplY3RTY2hlbWE6YW55LCBwcmVmaXhVUkk6c3RyaW5nID0gbnVsbCApOnN0cmluZyB7XG5cdFx0bGV0IG9iamVjdFNjaGVtYTpPYmplY3RTY2hlbWEuRGlnZXN0ZWRPYmplY3RTY2hlbWEgPSAhIFV0aWxzLmlzU3RyaW5nKCBwcmVmaXhPck9iamVjdFNjaGVtYSApID8gcHJlZml4T3JPYmplY3RTY2hlbWEgOiBudWxsO1xuXHRcdGxldCBwcmVmaXg6c3RyaW5nID0gVXRpbHMuaXNTdHJpbmcoIHByZWZpeE9yT2JqZWN0U2NoZW1hICkgPyBwcmVmaXhPck9iamVjdFNjaGVtYSA6IG51bGw7XG5cblx0XHRpZiggb2JqZWN0U2NoZW1hICE9PSBudWxsICkgcmV0dXJuIHByZWZpeFdpdGhPYmplY3RTY2hlbWEoIHVyaSwgb2JqZWN0U2NoZW1hICk7XG5cblx0XHRpZiggVXRpbC5pc1ByZWZpeGVkKCB1cmkgKSB8fCAhIHVyaS5zdGFydHNXaXRoKCBwcmVmaXhVUkkgKSApXG5cdFx0XHRyZXR1cm4gdXJpO1xuXG5cdFx0cmV0dXJuIGAkeyBwcmVmaXggfTokeyB1cmkuc3Vic3RyaW5nKCBwcmVmaXhVUkkubGVuZ3RoICkgfWA7XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJlZml4V2l0aE9iamVjdFNjaGVtYSggdXJpOnN0cmluZywgb2JqZWN0U2NoZW1hOk9iamVjdFNjaGVtYS5EaWdlc3RlZE9iamVjdFNjaGVtYSApOnN0cmluZyB7XG5cdGxldCBwcmVmaXhFbnRyaWVzOkl0ZXJhYmxlSXRlcmF0b3I8WyBzdHJpbmcsIENsYXNzIF0+ID0gb2JqZWN0U2NoZW1hLnByZWZpeGVzLmVudHJpZXMoKTtcblx0d2hpbGUoIHRydWUgKSB7XG5cdFx0bGV0IHJlc3VsdDpJdGVyYXRvclJlc3VsdDxbIHN0cmluZywgQ2xhc3MgXT4gPSBwcmVmaXhFbnRyaWVzLm5leHQoKTtcblx0XHRpZiggcmVzdWx0LmRvbmUgKSByZXR1cm4gdXJpO1xuXG5cdFx0bGV0IFsgcHJlZml4LCBwcmVmaXhVUkkgXTpbIHN0cmluZywgQ2xhc3MgXSA9IHJlc3VsdC52YWx1ZTtcblx0XHRpZiggISBVdGlsLmlzQWJzb2x1dGUoIHByZWZpeFVSSS50b1N0cmluZygpICkgKSBjb250aW51ZTtcblx0XHRpZiggISB1cmkuc3RhcnRzV2l0aCggcHJlZml4VVJJLnRvU3RyaW5nKCkgKSApIGNvbnRpbnVlO1xuXG5cdFx0cmV0dXJuIFV0aWwucHJlZml4KCB1cmksIHByZWZpeCwgcHJlZml4VVJJLnRvU3RyaW5nKCkgKTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCAqIGFzIEhUVFAgZnJvbSBcIi4vLi4vSFRUUFwiO1xuaW1wb3J0ICogYXMgSlNPTkxEIGZyb20gXCIuLy4uL0pTT05MRFwiO1xuaW1wb3J0ICogYXMgUkRGTm9kZSBmcm9tIFwiLi9SREZOb2RlXCI7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi8uLi9VdGlsc1wiO1xuaW1wb3J0ICogYXMgVVJJIGZyb20gXCIuL1VSSVwiO1xuaW1wb3J0ICogYXMgVmFsdWUgZnJvbSBcIi4vVmFsdWVcIjtcbmltcG9ydCAqIGFzIEVycm9ycyBmcm9tIFwiLi8uLi9FcnJvcnNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBDbGFzcyB7XG5cdFwiQGlkXCI/OnN0cmluZztcblx0XCJAZ3JhcGhcIjpSREZOb2RlLkNsYXNzW107XG59XG5cbmV4cG9ydCBjbGFzcyBGYWN0b3J5IHtcblx0c3RhdGljIGlzKCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIFV0aWxzLmhhc1Byb3BlcnR5KCBvYmplY3QsIFwiQGdyYXBoXCIgKVxuXHRcdFx0JiYgVXRpbHMuaXNBcnJheSggb2JqZWN0WyBcIkBncmFwaFwiIF0gKTtcblx0fVxuXG5cdHN0YXRpYyBjcmVhdGUoIHJlc291cmNlczpSREZOb2RlLkNsYXNzW10sIHVyaT86c3RyaW5nICk6Q2xhc3Mge1xuXHRcdGxldCBkb2N1bWVudDphbnkgPSB1cmkgPyBSREZOb2RlLkZhY3RvcnkuY3JlYXRlKCB1cmkgKSA6IHt9O1xuXHRcdGRvY3VtZW50WyBcIkBncmFwaFwiIF0gPSByZXNvdXJjZXM7XG5cblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIFV0aWwge1xuXHRzdGF0aWMgZ2V0RG9jdW1lbnRzKCBvYmplY3RzOk9iamVjdFtdICk6Q2xhc3NbXTtcblx0c3RhdGljIGdldERvY3VtZW50cyggb2JqZWN0Ok9iamVjdCApOkNsYXNzW107XG5cdHN0YXRpYyBnZXREb2N1bWVudHMoIHZhbHVlOmFueSApOkNsYXNzW10ge1xuXHRcdGlmKCBVdGlscy5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0bGV0IGFycmF5OmFueVtdID0gPGFueT4gdmFsdWU7XG5cdFx0XHRyZXR1cm4gYXJyYXkuZmlsdGVyKCAoIGVsZW1lbnQ6YW55ICkgPT4gRmFjdG9yeS5pcyggZWxlbWVudCApICk7XG5cdFx0fSBlbHNlIGlmKCBVdGlscy5pc09iamVjdCggdmFsdWUgKSApIHtcblx0XHRcdGlmKCBGYWN0b3J5LmlzKCB2YWx1ZSApICkgcmV0dXJuIFsgdmFsdWUgXTtcblx0XHR9XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cblx0c3RhdGljIGdldFJlc291cmNlcyggb2JqZWN0czpPYmplY3RbXSApOlJERk5vZGUuQ2xhc3NbXTtcblx0c3RhdGljIGdldFJlc291cmNlcyggb2JqZWN0Ok9iamVjdCApOlJERk5vZGUuQ2xhc3NbXTtcblx0c3RhdGljIGdldFJlc291cmNlcyggdmFsdWU6YW55ICk6UkRGTm9kZS5DbGFzc1tdIHtcblx0XHRsZXQgZnJlZU5vZGVzOlJERk5vZGUuQ2xhc3NbXSA9IFJERk5vZGUuVXRpbC5nZXRGcmVlTm9kZXMoIHZhbHVlICk7XG5cdFx0bGV0IGRvY3VtZW50czpDbGFzc1tdID0gVXRpbC5nZXREb2N1bWVudHMoIHZhbHVlICk7XG5cblx0XHRsZXQgcmVzb3VyY2VzOlJERk5vZGUuQ2xhc3NbXSA9IFtdLmNvbmNhdCggZnJlZU5vZGVzICk7XG5cblx0XHRmb3IoIGxldCBkb2N1bWVudCBvZiBkb2N1bWVudHMgKSB7XG5cdFx0XHRyZXNvdXJjZXMgPSByZXNvdXJjZXMuY29uY2F0KCBkb2N1bWVudFsgXCJAZ3JhcGhcIiBdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc291cmNlcztcblx0fVxuXG5cdHN0YXRpYyBnZXREb2N1bWVudFJlc291cmNlcyggZG9jdW1lbnQ6UkRGTm9kZS5DbGFzc1tdICk6UkRGTm9kZS5DbGFzc1tdO1xuXHRzdGF0aWMgZ2V0RG9jdW1lbnRSZXNvdXJjZXMoIGRvY3VtZW50OkNsYXNzICk6UkRGTm9kZS5DbGFzc1tdO1xuXHRzdGF0aWMgZ2V0RG9jdW1lbnRSZXNvdXJjZXMoIGRvY3VtZW50OmFueSApOlJERk5vZGUuQ2xhc3NbXSB7XG5cdFx0bGV0IHJlc291cmNlczpSREZOb2RlLkNsYXNzW10gPSBVdGlsLmdldFJlc291cmNlcyggZG9jdW1lbnQgKTtcblx0XHRsZXQgZG9jdW1lbnRSZXNvdXJjZXM6UkRGTm9kZS5DbGFzc1tdID0gW107XG5cblx0XHRmb3IoIGxldCBpOm51bWJlciA9IDAsIGxlbmd0aDpudW1iZXIgPSByZXNvdXJjZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICsrICkge1xuXHRcdFx0bGV0IHJlc291cmNlOlJERk5vZGUuQ2xhc3MgPSByZXNvdXJjZXNbIGkgXTtcblx0XHRcdGxldCB1cmk6c3RyaW5nID0gcmVzb3VyY2VbIFwiQGlkXCIgXTtcblx0XHRcdGlmKCAhIHVyaSApIGNvbnRpbnVlO1xuXG5cdFx0XHRpZiggISBVUkkuVXRpbC5oYXNGcmFnbWVudCggdXJpICkgJiYgISBVUkkuVXRpbC5pc0JOb2RlSUQoIHVyaSApICkgZG9jdW1lbnRSZXNvdXJjZXMucHVzaCggcmVzb3VyY2UgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZG9jdW1lbnRSZXNvdXJjZXM7XG5cdH1cblxuXHRzdGF0aWMgZ2V0RnJhZ21lbnRSZXNvdXJjZXMoIGRvY3VtZW50OlJERk5vZGUuQ2xhc3NbXSwgZG9jdW1lbnRSZXNvdXJjZT86UkRGTm9kZS5DbGFzcyApOlJERk5vZGUuQ2xhc3NbXTtcblx0c3RhdGljIGdldEZyYWdtZW50UmVzb3VyY2VzKCBkb2N1bWVudDpDbGFzcywgZG9jdW1lbnRSZXNvdXJjZT86UkRGTm9kZS5DbGFzcyApOlJERk5vZGUuQ2xhc3NbXTtcblx0c3RhdGljIGdldEZyYWdtZW50UmVzb3VyY2VzKCBkb2N1bWVudDpSREZOb2RlLkNsYXNzW10sIGRvY3VtZW50UmVzb3VyY2VVUkk/OnN0cmluZyApOlJERk5vZGUuQ2xhc3NbXTtcblx0c3RhdGljIGdldEZyYWdtZW50UmVzb3VyY2VzKCBkb2N1bWVudDpDbGFzcywgZG9jdW1lbnRSZXNvdXJjZVVSST86c3RyaW5nICk6UkRGTm9kZS5DbGFzc1tdO1xuXHRzdGF0aWMgZ2V0RnJhZ21lbnRSZXNvdXJjZXMoIGRvY3VtZW50OmFueSwgZG9jdW1lbnRSZXNvdXJjZT86YW55ICk6UkRGTm9kZS5DbGFzc1tdIHtcblx0XHRsZXQgcmVzb3VyY2VzOlJERk5vZGUuQ2xhc3NbXSA9IFV0aWwuZ2V0UmVzb3VyY2VzKCBkb2N1bWVudCApO1xuXG5cdFx0bGV0IGRvY3VtZW50VVJJVG9NYXRjaDpzdHJpbmcgPSBudWxsO1xuXHRcdGlmKCBkb2N1bWVudFJlc291cmNlICkge1xuXHRcdFx0aWYoIFV0aWxzLmlzU3RyaW5nKCBkb2N1bWVudFJlc291cmNlICkgKSB7XG5cdFx0XHRcdGRvY3VtZW50VVJJVG9NYXRjaCA9IGRvY3VtZW50UmVzb3VyY2U7XG5cdFx0XHR9IGVsc2UgZG9jdW1lbnRVUklUb01hdGNoID0gZG9jdW1lbnRSZXNvdXJjZVsgXCJAaWRcIiBdO1xuXHRcdH1cblxuXHRcdGxldCBmcmFnbWVudFJlc291cmNlczpSREZOb2RlLkNsYXNzW10gPSBbXTtcblxuXHRcdGZvciggbGV0IGk6bnVtYmVyID0gMCwgbGVuZ3RoOm51bWJlciA9IHJlc291cmNlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKysgKSB7XG5cdFx0XHRsZXQgcmVzb3VyY2U6UkRGTm9kZS5DbGFzcyA9IHJlc291cmNlc1sgaSBdO1xuXHRcdFx0bGV0IHVyaTpzdHJpbmcgPSByZXNvdXJjZVsgXCJAaWRcIiBdO1xuXG5cdFx0XHRpZiggISB1cmkgKSBjb250aW51ZTtcblx0XHRcdGlmKCAhIFVSSS5VdGlsLmhhc0ZyYWdtZW50KCB1cmkgKSApIGNvbnRpbnVlO1xuXG5cdFx0XHRpZiggISBkb2N1bWVudFVSSVRvTWF0Y2ggKSB7XG5cdFx0XHRcdGZyYWdtZW50UmVzb3VyY2VzLnB1c2goIHJlc291cmNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRsZXQgZG9jdW1lbnRVUkk6c3RyaW5nID0gVVJJLlV0aWwuZ2V0RG9jdW1lbnRVUkkoIHVyaSApO1xuXHRcdFx0XHRpZiggZG9jdW1lbnRVUkkgPT09IGRvY3VtZW50VVJJVG9NYXRjaCApIGZyYWdtZW50UmVzb3VyY2VzLnB1c2goIHJlc291cmNlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZyYWdtZW50UmVzb3VyY2VzO1xuXHR9XG5cblx0c3RhdGljIGdldEJOb2RlUmVzb3VyY2VzKCBkb2N1bWVudDpDbGFzcyApOlJERk5vZGUuQ2xhc3NbXSB7XG5cdFx0bGV0IHJlc291cmNlczpSREZOb2RlLkNsYXNzW10gPSBVdGlsLmdldFJlc291cmNlcyggZG9jdW1lbnQgKTtcblxuXHRcdGxldCBibm9kZXM6UkRGTm9kZS5DbGFzc1tdID0gW107XG5cdFx0Zm9yKCBsZXQgaTpudW1iZXIgPSAwLCBsZW5ndGg6bnVtYmVyID0gcmVzb3VyY2VzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArKyApIHtcblx0XHRcdGxldCByZXNvdXJjZTpSREZOb2RlLkNsYXNzID0gcmVzb3VyY2VzWyBpIF07XG5cdFx0XHRpZiggISAoIFwiQGlkXCIgaW4gcmVzb3VyY2UgKSB8fCBVUkkuVXRpbC5pc0JOb2RlSUQoIHJlc291cmNlWyBcIkBpZFwiIF0gKSApIGJub2Rlcy5wdXNoKCByZXNvdXJjZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBibm9kZXM7XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIFBhcnNlciBpbXBsZW1lbnRzIEhUVFAuUGFyc2VyLkNsYXNzPENsYXNzW10+IHtcblx0cGFyc2UoIGlucHV0OnN0cmluZyApOlByb21pc2U8YW55PiB7XG5cdFx0bGV0IGpzb25MRFBhcnNlcjpKU09OTEQuUGFyc2VyLkNsYXNzID0gbmV3IEpTT05MRC5QYXJzZXIuQ2xhc3MoKTtcblx0XHRyZXR1cm4ganNvbkxEUGFyc2VyLnBhcnNlKCBpbnB1dCApLnRoZW4oICggZXhwYW5kZWRSZXN1bHQ6YW55ICkgPT4ge1xuXHRcdFx0cmV0dXJuIFV0aWwuZ2V0RG9jdW1lbnRzKCBleHBhbmRlZFJlc3VsdCApO1xuXHRcdH0gKTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCBWYWx1ZSBmcm9tIFwiLi9WYWx1ZVwiO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vLi4vVXRpbHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBDbGFzcyB7XG5cdFwiQGxpc3RcIjpBcnJheTxWYWx1ZT47XG59XG5cbmV4cG9ydCBjbGFzcyBGYWN0b3J5IHtcblx0c3RhdGljIGlzKCB2YWx1ZTphbnkgKTpib29sZWFuIHtcblx0XHRyZXR1cm4gVXRpbHMuaGFzUHJvcGVydHlEZWZpbmVkKCB2YWx1ZSwgXCJAbGlzdFwiICk7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xhc3M7XG4iLCJpbXBvcnQgQWJzdHJhY3RFcnJvciBmcm9tIFwiLi9BYnN0cmFjdEVycm9yXCI7XG5cbmNsYXNzIElEQWxyZWFkeUluVXNlRXJyb3IgZXh0ZW5kcyBBYnN0cmFjdEVycm9yIHtcblx0Z2V0IG5hbWUoKTpzdHJpbmcgeyByZXR1cm4gXCJJREFscmVhZHlJblVzZUVycm9yXCI7IH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSURBbHJlYWR5SW5Vc2VFcnJvcjtcbiIsImltcG9ydCBBYnN0cmFjdEVycm9yIGZyb20gXCIuL0Fic3RyYWN0RXJyb3JcIjtcblxuY2xhc3MgSWxsZWdhbEFjdGlvbkVycm9yIGV4dGVuZHMgQWJzdHJhY3RFcnJvciB7XG5cdGdldCBuYW1lKCk6c3RyaW5nIHsgcmV0dXJuIFwiSWxsZWdhbEFjdGlvbkVycm9yXCI7IH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSWxsZWdhbEFjdGlvbkVycm9yO1xuIiwiaW1wb3J0IEFic3RyYWN0RXJyb3IgZnJvbSBcIi4vQWJzdHJhY3RFcnJvclwiO1xuXG5jbGFzcyBJbGxlZ2FsQXJndW1lbnRFcnJvciBleHRlbmRzIEFic3RyYWN0RXJyb3Ige1xuXHRnZXQgbmFtZSgpOnN0cmluZyB7IHJldHVybiBcIklsbGVnYWxBcmd1bWVudEVycm9yXCI7IH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSWxsZWdhbEFyZ3VtZW50RXJyb3I7XG4iLCJpbXBvcnQgQWJzdHJhY3RFcnJvciBmcm9tIFwiLi9BYnN0cmFjdEVycm9yXCI7XG5cbmNsYXNzIElsbGVnYWxTdGF0ZUVycm9yIGV4dGVuZHMgQWJzdHJhY3RFcnJvciB7XG5cdGdldCBuYW1lKCk6c3RyaW5nIHsgcmV0dXJuIFwiSWxsZWdhbFN0YXRlRXJyb3JcIjsgfVxuXG5cdGNvbnN0cnVjdG9yKCBtZXNzYWdlOnN0cmluZyA9IFwiXCIgKSB7XG5cdFx0c3VwZXIoIG1lc3NhZ2UgKTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbGxlZ2FsU3RhdGVFcnJvcjtcbiIsImltcG9ydCBBYnN0cmFjdEVycm9yIGZyb20gXCIuL0Fic3RyYWN0RXJyb3JcIjtcblxuY2xhc3MgSW52YWxpZEpTT05MRFN5bnRheEVycm9yIGV4dGVuZHMgQWJzdHJhY3RFcnJvciB7XG5cdGdldCBuYW1lKCk6c3RyaW5nIHsgcmV0dXJuIFwiSW52YWxpZEpTT05MRFN5bnRheEVycm9yXCI7IH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW52YWxpZEpTT05MRFN5bnRheEVycm9yO1xuIiwiYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RFcnJvciBleHRlbmRzIEVycm9yIHtcblx0cHVibGljIG1lc3NhZ2U6c3RyaW5nO1xuXG5cdGdldCBuYW1lKCk6c3RyaW5nIHsgcmV0dXJuIFwiQWJzdHJhY3RFcnJvclwiOyB9XG5cblx0Y29uc3RydWN0b3IoIG1lc3NhZ2U6c3RyaW5nICkge1xuXHRcdHN1cGVyKCBtZXNzYWdlICk7XG5cdFx0aWYoIFwiY2FwdHVyZVN0YWNrVHJhY2VcIiBpbiBFcnJvciApIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKCB0aGlzLCB0aGlzLmNvbnN0cnVjdG9yICk7XG5cdFx0dGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcblx0fVxuXG5cdHRvU3RyaW5nKCk6c3RyaW5nIHtcblx0XHRyZXR1cm4gdGhpcy5uYW1lICsgXCI6IFwiICsgdGhpcy5tZXNzYWdlO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFic3RyYWN0RXJyb3I7XG4iLCJpbXBvcnQgQWJzdHJhY3RFcnJvciBmcm9tIFwiLi9BYnN0cmFjdEVycm9yXCI7XG5cbmNsYXNzIE5vdEltcGxlbWVudGVkRXJyb3IgZXh0ZW5kcyBBYnN0cmFjdEVycm9yIHtcblx0Z2V0IG5hbWUoKTpzdHJpbmcgeyByZXR1cm4gXCJOb3RJbXBsZW1lbnRlZEVycm9yXCI7IH1cblxuXHRjb25zdHJ1Y3RvciggbWVzc2FnZTpzdHJpbmcgPSBcIlwiICkge1xuXHRcdHN1cGVyKCBtZXNzYWdlICk7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTm90SW1wbGVtZW50ZWRFcnJvcjtcbiIsImltcG9ydCBJREFscmVhZHlJblVzZUVycm9yIGZyb20gXCIuL0Vycm9ycy9JREFscmVhZHlJblVzZUVycm9yXCI7XG5pbXBvcnQgSWxsZWdhbEFjdGlvbkVycm9yIGZyb20gXCIuL0Vycm9ycy9JbGxlZ2FsQWN0aW9uRXJyb3JcIjtcbmltcG9ydCBJbGxlZ2FsQXJndW1lbnRFcnJvciBmcm9tIFwiLi9FcnJvcnMvSWxsZWdhbEFyZ3VtZW50RXJyb3JcIjtcbmltcG9ydCBJbGxlZ2FsU3RhdGVFcnJvciBmcm9tIFwiLi9FcnJvcnMvSWxsZWdhbFN0YXRlRXJyb3JcIjtcbmltcG9ydCBJbnZhbGlkSlNPTkxEU3ludGF4RXJyb3IgZnJvbSBcIi4vRXJyb3JzL0ludmFsaWRKU09OTERTeW50YXhFcnJvclwiO1xuaW1wb3J0IE5vdEltcGxlbWVudGVkRXJyb3IgZnJvbSBcIi4vRXJyb3JzL05vdEltcGxlbWVudGVkRXJyb3JcIjtcblxuXG5leHBvcnQge1xuXHRJREFscmVhZHlJblVzZUVycm9yLFxuXHRJbGxlZ2FsQWN0aW9uRXJyb3IsXG5cdElsbGVnYWxBcmd1bWVudEVycm9yLFxuXHRJbGxlZ2FsU3RhdGVFcnJvcixcblx0SW52YWxpZEpTT05MRFN5bnRheEVycm9yLFxuXHROb3RJbXBsZW1lbnRlZEVycm9yXG59O1xuIiwiaW1wb3J0ICogYXMgRXJyb3JzIGZyb20gXCIuLy4uLy4uLy4uL0Vycm9yc1wiO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vLi4vLi4vLi4vVXRpbHNcIjtcblxuaW1wb3J0IFNlcmlhbGl6ZXIgZnJvbSBcIi4vLi4vU2VyaWFsaXplclwiO1xuXG5mdW5jdGlvbiBwYWQoIHZhbHVlOm51bWJlciApOnN0cmluZyB7XG5cdGxldCBwYWRkZWRWYWx1ZTpzdHJpbmcgPSBTdHJpbmcoIHZhbHVlICk7XG5cdGlmKCBwYWRkZWRWYWx1ZS5sZW5ndGggPT09IDEgKSBwYWRkZWRWYWx1ZSA9IFwiMFwiICsgcGFkZGVkVmFsdWU7XG5cdHJldHVybiBwYWRkZWRWYWx1ZTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGVTZXJpYWxpemVyIGltcGxlbWVudHMgU2VyaWFsaXplciB7XG5cdHNlcmlhbGl6ZSggdmFsdWU6YW55ICk6c3RyaW5nIHtcblx0XHRpZiggISBVdGlscy5pc0RhdGUoIHZhbHVlICkgKSB0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIlRoZSB2YWx1ZSBpcyBub3QgYSBEYXRlIG9iamVjdC5cIiApO1xuXG5cdFx0cmV0dXJuIHZhbHVlLmdldFVUQ0Z1bGxZZWFyKCkgKyBcIi1cIiArIHBhZCggKHZhbHVlLmdldFVUQ01vbnRoKCkgKyAxKSApICsgXCItXCIgKyBwYWQoIHZhbHVlLmdldFVUQ0RhdGUoKSApO1xuXHR9XG59XG5cbmV4cG9ydCBsZXQgZGF0ZVNlcmlhbGl6ZXI6RGF0ZVNlcmlhbGl6ZXIgPSBuZXcgRGF0ZVNlcmlhbGl6ZXIoKTtcblxuZXhwb3J0IGNsYXNzIERhdGVUaW1lU2VyaWFsaXplciBpbXBsZW1lbnRzIFNlcmlhbGl6ZXIge1xuXHRzZXJpYWxpemUoIHZhbHVlOmFueSApOnN0cmluZyB7XG5cdFx0aWYoICEgVXRpbHMuaXNEYXRlKCB2YWx1ZSApICkgdGhyb3cgbmV3IEVycm9ycy5JbGxlZ2FsQXJndW1lbnRFcnJvciggXCJUaGUgdmFsdWUgaXMgbm90IGEgRGF0ZSBvYmplY3QuXCIgKTtcblxuXHRcdHJldHVybiB2YWx1ZS50b0lTT1N0cmluZygpO1xuXHR9XG59XG5cbmV4cG9ydCBsZXQgZGF0ZVRpbWVTZXJpYWxpemVyOkRhdGVUaW1lU2VyaWFsaXplciA9IG5ldyBEYXRlVGltZVNlcmlhbGl6ZXIoKTtcblxuZXhwb3J0IGNsYXNzIFRpbWVTZXJpYWxpemVyIGltcGxlbWVudHMgU2VyaWFsaXplciB7XG5cdHNlcmlhbGl6ZSggdmFsdWU6YW55ICk6c3RyaW5nIHtcblx0XHRpZiggISBVdGlscy5pc0RhdGUoIHZhbHVlICkgKSB0aHJvdyBuZXcgRXJyb3JzLklsbGVnYWxBcmd1bWVudEVycm9yKCBcIlRoZSB2YWx1ZSBpcyBub3QgYSBEYXRlIG9iamVjdC5cIiApO1xuXG5cdFx0cmV0dXJuIHBhZCggdmFsdWUuZ2V0VVRDSG91cnMoKSApXG5cdFx0XHQrIFwiOlwiICsgcGFkKCB2YWx1ZS5nZXRVVENNaW51dGVzKCkgKVxuXHRcdFx0KyBcIjpcIiArIHBhZCggdmFsdWUuZ2V0VVRDU2Vjb25kcygpIClcblx0XHRcdCsgXCIuXCIgKyBTdHJpbmcoICggdmFsdWUuZ2V0VVRDTWlsbGlzZWNvbmRzKCkgLyAxMDAwICkudG9GaXhlZCggMyApICkuc2xpY2UoIDIsIDUgKVxuXHRcdFx0KyBcIlpcIlxuXHRcdFx0O1xuXHR9XG59XG5cbmV4cG9ydCBsZXQgdGltZVNlcmlhbGl6ZXI6VGltZVNlcmlhbGl6ZXIgPSBuZXcgVGltZVNlcmlhbGl6ZXIoKTtcblxuZXhwb3J0IGNsYXNzIEludGVnZXJTZXJpYWxpemVyIGltcGxlbWVudHMgU2VyaWFsaXplciB7XG5cdHNlcmlhbGl6ZSggdmFsdWU6YW55ICk6c3RyaW5nIHtcblx0XHRpZiggISBVdGlscy5pc051bWJlciggdmFsdWUgKSApIHRocm93IG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiVGhlIHZhbHVlIGlzIG5vdCBhIG51bWJlci5cIiApO1xuXG5cdFx0Ly8gTmVnYXRpdmUgdHJ1bmNhdGVcblx0XHRyZXR1cm4gKCB+IH4gdmFsdWUgKS50b1N0cmluZygpO1xuXHR9XG59XG5cbmV4cG9ydCBsZXQgaW50ZWdlclNlcmlhbGl6ZXI6SW50ZWdlclNlcmlhbGl6ZXIgPSBuZXcgSW50ZWdlclNlcmlhbGl6ZXIoKTtcblxuZXhwb3J0IGNsYXNzIFVuc2lnbmVkSW50ZWdlclNlcmlhbGl6ZXIgZXh0ZW5kcyBJbnRlZ2VyU2VyaWFsaXplciB7XG5cdHNlcmlhbGl6ZSggdmFsdWU6YW55ICk6c3RyaW5nIHtcblx0XHRsZXQgc3RyaW5nVmFsdWU6c3RyaW5nID0gc3VwZXIuc2VyaWFsaXplKCB2YWx1ZSApO1xuXG5cdFx0c3RyaW5nVmFsdWUgPSBVdGlscy5TLnN0YXJ0c1dpdGgoIHN0cmluZ1ZhbHVlLCBcIi1cIiApID8gc3RyaW5nVmFsdWUuc3Vic3RyaW5nKCAxICkgOiBzdHJpbmdWYWx1ZTtcblxuXHRcdHJldHVybiBzdHJpbmdWYWx1ZTtcblx0fVxufVxuXG5leHBvcnQgbGV0IHVuc2lnbmVkSW50ZWdlclNlcmlhbGl6ZXI6VW5zaWduZWRJbnRlZ2VyU2VyaWFsaXplciA9IG5ldyBVbnNpZ25lZEludGVnZXJTZXJpYWxpemVyKCk7XG5cbmV4cG9ydCBjbGFzcyBGbG9hdFNlcmlhbGl6ZXIgaW1wbGVtZW50cyBTZXJpYWxpemVyIHtcblx0c2VyaWFsaXplKCB2YWx1ZTphbnkgKTpzdHJpbmcge1xuXHRcdGlmKCAhIFV0aWxzLmlzTnVtYmVyKCB2YWx1ZSApICkgdGhyb3cgbmV3IEVycm9ycy5JbGxlZ2FsQXJndW1lbnRFcnJvciggXCJUaGUgdmFsdWUgaXMgbm90IGEgbnVtYmVyLlwiICk7XG5cdFx0aWYoIHZhbHVlID09PSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgKSByZXR1cm4gXCJJTkZcIjtcblx0XHRpZiggdmFsdWUgPT09IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSApIHJldHVybiBcIi1JTkZcIjtcblxuXHRcdHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuXHR9XG59XG5cbmV4cG9ydCBsZXQgZmxvYXRTZXJpYWxpemVyOkZsb2F0U2VyaWFsaXplciA9IG5ldyBGbG9hdFNlcmlhbGl6ZXIoKTtcblxuZXhwb3J0IGNsYXNzIEJvb2xlYW5TZXJpYWxpemVyIGltcGxlbWVudHMgU2VyaWFsaXplciB7XG5cdHNlcmlhbGl6ZSggdmFsdWU6YW55ICk6c3RyaW5nIHtcblx0XHRyZXR1cm4gKCAhICEgdmFsdWUgKS50b1N0cmluZygpO1xuXHR9XG59XG5cbmV4cG9ydCBsZXQgYm9vbGVhblNlcmlhbGl6ZXI6Qm9vbGVhblNlcmlhbGl6ZXIgPSBuZXcgQm9vbGVhblNlcmlhbGl6ZXIoKTtcblxuZXhwb3J0IGNsYXNzIFN0cmluZ1NlcmlhbGl6ZXIgaW1wbGVtZW50cyBTZXJpYWxpemVyIHtcblx0c2VyaWFsaXplKCB2YWx1ZTphbnkgKTpzdHJpbmcge1xuXHRcdHJldHVybiBTdHJpbmcoIHZhbHVlICk7XG5cdH1cbn1cblxuZXhwb3J0IGxldCBzdHJpbmdTZXJpYWxpemVyOlN0cmluZ1NlcmlhbGl6ZXIgPSBuZXcgU3RyaW5nU2VyaWFsaXplcigpO1xuIiwiaW1wb3J0ICogYXMgWFNEIGZyb20gXCIuL1NlcmlhbGl6ZXJzL1hTRFwiO1xuXG5leHBvcnQge1xuXHRYU0Rcbn07XG4iLCJpbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi8uLi9VdGlsc1wiO1xuaW1wb3J0ICogYXMgWFNEIGZyb20gXCIuLy4uL05TL1hTRFwiIDtcbmltcG9ydCAqIGFzIEVycm9ycyBmcm9tIFwiLi8uLi9FcnJvcnNcIjtcblxuaW1wb3J0IFNlcmlhbGl6ZXIgZnJvbSBcIi4vTGl0ZXJhbC9TZXJpYWxpemVyXCI7XG5pbXBvcnQgKiBhcyBTZXJpYWxpemVycyBmcm9tIFwiLi9MaXRlcmFsL1NlcmlhbGl6ZXJzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xhc3Mge1xuXHRcIkB0eXBlXCI/OnN0cmluZztcblx0XCJAdmFsdWVcIjpzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBGYWN0b3J5IHtcblx0c3RhdGljIGZyb20oIHZhbHVlOmFueSApOkNsYXNzIHtcblx0XHRpZiggVXRpbHMuaXNOdWxsKCB2YWx1ZSApIClcblx0XHRcdHRocm93IG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiTnVsbCBjYW5ub3QgYmUgY29udmVydGVkIGludG8gYSBMaXRlcmFsXCIgKTtcblx0XHRpZiggISBVdGlscy5pc0RlZmluZWQoIHZhbHVlICkgKVxuXHRcdFx0dGhyb3cgbmV3IEVycm9ycy5JbGxlZ2FsQXJndW1lbnRFcnJvciggXCJUaGUgdmFsdWUgaXMgdW5kZWZpbmVkXCIgKTtcblxuXHRcdGxldCB0eXBlOmFueTtcblxuXHRcdHN3aXRjaCggdHJ1ZSApIHtcblx0XHRcdGNhc2UgVXRpbHMuaXNEYXRlKCB2YWx1ZSApOlxuXHRcdFx0XHR0eXBlID0gWFNELkRhdGFUeXBlLmRhdGVUaW1lO1xuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlLnRvSVNPU3RyaW5nKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBVdGlscy5pc051bWJlciggdmFsdWUgKTpcblx0XHRcdFx0aWYoIFV0aWxzLmlzSW50ZWdlciggdmFsdWUgKSApIHtcblx0XHRcdFx0XHR0eXBlID0gWFNELkRhdGFUeXBlLmludGVnZXI7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dHlwZSA9IFhTRC5EYXRhVHlwZS5kb3VibGU7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFV0aWxzLmlzU3RyaW5nKCB2YWx1ZSApOlxuXHRcdFx0XHR0eXBlID0gWFNELkRhdGFUeXBlLnN0cmluZztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFV0aWxzLmlzQm9vbGVhbiggdmFsdWUgKTpcblx0XHRcdFx0dHlwZSA9IFhTRC5EYXRhVHlwZS5ib29sZWFuO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdC8vIFRyZWF0IGl0IGFzIGFuIHVua25vd24gb2JqZWN0XG5cdFx0XHRcdHR5cGUgPSBYU0QuRGF0YVR5cGUub2JqZWN0O1xuXHRcdFx0XHR2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KCB2YWx1ZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cblx0XHRsZXQgbGl0ZXJhbDpDbGFzcyA9IHtcIkB2YWx1ZVwiOiB2YWx1ZS50b1N0cmluZygpfTtcblx0XHRpZiggdHlwZSApIGxpdGVyYWxbIFwiQHR5cGVcIiBdID0gdHlwZTtcblxuXHRcdHJldHVybiBsaXRlcmFsO1xuXHR9XG5cblx0c3RhdGljIHBhcnNlKCBsaXRlcmFsVmFsdWU6c3RyaW5nLCBsaXRlcmFsRGF0YVR5cGU/OnN0cmluZyApOmFueTtcblx0c3RhdGljIHBhcnNlKCBsaXRlcmFsOkNsYXNzICk6YW55O1xuXHRzdGF0aWMgcGFyc2UoIGxpdGVyYWxWYWx1ZU9yTGl0ZXJhbDphbnksIGxpdGVyYWxEYXRhVHlwZTpzdHJpbmcgPSBudWxsICk6YW55IHtcblx0XHRsZXQgbGl0ZXJhbFZhbHVlOnN0cmluZztcblx0XHRpZiggVXRpbHMuaXNTdHJpbmcoIGxpdGVyYWxWYWx1ZU9yTGl0ZXJhbCApICkge1xuXHRcdFx0bGl0ZXJhbFZhbHVlID0gbGl0ZXJhbFZhbHVlT3JMaXRlcmFsO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRsZXQgbGl0ZXJhbDpDbGFzcyA9IGxpdGVyYWxWYWx1ZU9yTGl0ZXJhbDtcblx0XHRcdGlmKCAhIGxpdGVyYWwgKSByZXR1cm4gbnVsbDtcblx0XHRcdGlmKCAhIFV0aWxzLmhhc1Byb3BlcnR5KCBsaXRlcmFsLCBcIkB2YWx1ZVwiICkgKSByZXR1cm4gbnVsbDtcblxuXHRcdFx0bGl0ZXJhbERhdGFUeXBlID0gXCJAdHlwZVwiIGluIGxpdGVyYWwgPyBsaXRlcmFsWyBcIkB0eXBlXCIgXSA6IG51bGw7XG5cdFx0XHRsaXRlcmFsVmFsdWUgPSBsaXRlcmFsWyBcIkB2YWx1ZVwiIF07XG5cdFx0fVxuXG5cdFx0aWYoIGxpdGVyYWxEYXRhVHlwZSA9PT0gbnVsbCApIHJldHVybiBsaXRlcmFsVmFsdWU7XG5cdFx0Ly8gVGhlIERhdGFUeXBlIGlzbid0IHN1cHBvcnRlZFxuXHRcdGlmKCAhIFV0aWxzLmhhc1Byb3BlcnR5KCBYU0QuRGF0YVR5cGUsIGxpdGVyYWxEYXRhVHlwZSApICkgcmV0dXJuIGxpdGVyYWxWYWx1ZTtcblxuXHRcdGxldCB2YWx1ZTphbnk7XG5cdFx0bGV0IHBhcnRzOnN0cmluZ1tdO1xuXHRcdHN3aXRjaCggbGl0ZXJhbERhdGFUeXBlICkge1xuXHRcdFx0Ly8gRGF0ZXNcblx0XHRcdGNhc2UgWFNELkRhdGFUeXBlLmRhdGU6XG5cdFx0XHRjYXNlIFhTRC5EYXRhVHlwZS5kYXRlVGltZTpcblx0XHRcdFx0dmFsdWUgPSBuZXcgRGF0ZSggbGl0ZXJhbFZhbHVlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBYU0QuRGF0YVR5cGUudGltZTpcblx0XHRcdFx0cGFydHMgPSBsaXRlcmFsVmFsdWUubWF0Y2goIC8oXFxkKyk6KFxcZCspOihcXGQrKVxcLihcXGQrKVovICk7XG5cdFx0XHRcdHZhbHVlID0gbmV3IERhdGUoKTtcblx0XHRcdFx0dmFsdWUuc2V0VVRDSG91cnMoIHBhcnNlRmxvYXQoIHBhcnRzWyAxIF0gKSwgcGFyc2VGbG9hdCggcGFydHNbIDIgXSApLCBwYXJzZUZsb2F0KCBwYXJ0c1sgMyBdICksIHBhcnNlRmxvYXQoIHBhcnRzWyA0IF0gKSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgWFNELkRhdGFUeXBlLmR1cmF0aW9uOlxuXHRcdFx0XHQvLyBUT0RPOiBTdXBwb3J0IGR1cmF0aW9uIHZhbHVlcyAoY3JlYXRlIGEgY2xhc3Mgb3Igc29tZXRoaW5nLi4uKVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgWFNELkRhdGFUeXBlLmdEYXk6XG5cdFx0XHRjYXNlIFhTRC5EYXRhVHlwZS5nTW9udGg6XG5cdFx0XHRjYXNlIFhTRC5EYXRhVHlwZS5nTW9udGhEYXk6XG5cdFx0XHRjYXNlIFhTRC5EYXRhVHlwZS5nWWVhcjpcblx0XHRcdGNhc2UgWFNELkRhdGFUeXBlLmdZZWFyTW9udGg6XG5cdFx0XHRcdC8vIFRPRE86IERlY2lkZS4gU2hvdWxkIHdlIHJldHVybiBpdCBhcyBhIERhdGU/XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHQvLyBOdW1iZXJzXG5cdFx0XHRjYXNlIFhTRC5EYXRhVHlwZS5ieXRlIDpcblx0XHRcdGNhc2UgWFNELkRhdGFUeXBlLmRlY2ltYWwgOlxuXHRcdFx0Y2FzZSBYU0QuRGF0YVR5cGUuaW50IDpcblx0XHRcdGNhc2UgWFNELkRhdGFUeXBlLmludGVnZXIgOlxuXHRcdFx0Y2FzZSBYU0QuRGF0YVR5cGUubG9uZyA6XG5cdFx0XHRjYXNlIFhTRC5EYXRhVHlwZS5uZWdhdGl2ZUludGVnZXIgOlxuXHRcdFx0Y2FzZSBYU0QuRGF0YVR5cGUubm9uTmVnYXRpdmVJbnRlZ2VyIDpcblx0XHRcdGNhc2UgWFNELkRhdGFUeXBlLm5vblBvc2l0aXZlSW50ZWdlciA6XG5cdFx0XHRjYXNlIFhTRC5EYXRhVHlwZS5wb3NpdGl2ZUludGVnZXIgOlxuXHRcdFx0Y2FzZSBYU0QuRGF0YVR5cGUuc2hvcnQgOlxuXHRcdFx0Y2FzZSBYU0QuRGF0YVR5cGUudW5zaWduZWRMb25nIDpcblx0XHRcdGNhc2UgWFNELkRhdGFUeXBlLnVuc2lnbmVkSW50IDpcblx0XHRcdGNhc2UgWFNELkRhdGFUeXBlLnVuc2lnbmVkU2hvcnQgOlxuXHRcdFx0Y2FzZSBYU0QuRGF0YVR5cGUudW5zaWduZWRCeXRlIDpcblx0XHRcdGNhc2UgWFNELkRhdGFUeXBlLmRvdWJsZSA6XG5cdFx0XHRjYXNlIFhTRC5EYXRhVHlwZS5mbG9hdCA6XG5cdFx0XHRcdHZhbHVlID0gcGFyc2VGbG9hdCggbGl0ZXJhbFZhbHVlICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHQvLyBNaXNjXG5cdFx0XHRjYXNlIFhTRC5EYXRhVHlwZS5ib29sZWFuIDpcblx0XHRcdFx0dmFsdWUgPSBVdGlscy5wYXJzZUJvb2xlYW4oIGxpdGVyYWxWYWx1ZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgWFNELkRhdGFUeXBlLnN0cmluZzpcblx0XHRcdFx0dmFsdWUgPSBsaXRlcmFsVmFsdWU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBYU0QuRGF0YVR5cGUub2JqZWN0OlxuXHRcdFx0XHR2YWx1ZSA9IEpTT04ucGFyc2UoIGxpdGVyYWxWYWx1ZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXG5cdHN0YXRpYyBpcyggdmFsdWU6YW55ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIFV0aWxzLmhhc1Byb3BlcnR5KCB2YWx1ZSwgXCJAdmFsdWVcIiApXG5cdFx0XHQmJiBVdGlscy5pc1N0cmluZyggdmFsdWVbIFwiQHZhbHVlXCIgXSApO1xuXHR9XG5cblx0c3RhdGljIGhhc1R5cGUoIHZhbHVlOkNsYXNzLCB0eXBlOnN0cmluZyApOmJvb2xlYW4ge1xuXHRcdGlmKCAhIHZhbHVlWyBcIkB0eXBlXCIgXSAmJiB0eXBlID09PSA8YW55PiBYU0QuRGF0YVR5cGUuc3RyaW5nICkgcmV0dXJuIHRydWU7XG5cdFx0cmV0dXJuIHZhbHVlWyBcIkB0eXBlXCIgXSA9PT0gdHlwZTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcblxuZXhwb3J0IHtcblx0U2VyaWFsaXplcixcblx0U2VyaWFsaXplcnNcbn07XG4iLCJpbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi8uLi9VdGlsc1wiO1xuXG5leHBvcnQgY29uc3QgbmFtZXNwYWNlOnN0cmluZyA9IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEjXCI7XG5cbmV4cG9ydCBjbGFzcyBEYXRhVHlwZSB7XG5cdHN0YXRpYyBkYXRlOnN0cmluZyA9IG5hbWVzcGFjZSArIFwiZGF0ZVwiO1xuXHRzdGF0aWMgZGF0ZVRpbWU6c3RyaW5nID0gbmFtZXNwYWNlICsgXCJkYXRlVGltZVwiO1xuXHRzdGF0aWMgZHVyYXRpb246c3RyaW5nID0gbmFtZXNwYWNlICsgXCJkdXJhdGlvblwiO1xuXHRzdGF0aWMgZ0RheTpzdHJpbmcgPSBuYW1lc3BhY2UgKyBcImdEYXlcIjtcblx0c3RhdGljIGdNb250aDpzdHJpbmcgPSBuYW1lc3BhY2UgKyBcImdNb250aFwiO1xuXHRzdGF0aWMgZ01vbnRoRGF5OnN0cmluZyA9IG5hbWVzcGFjZSArIFwiZ01vbnRoRGF5XCI7XG5cdHN0YXRpYyBnWWVhcjpzdHJpbmcgPSBuYW1lc3BhY2UgKyBcImdZZWFyXCI7XG5cdHN0YXRpYyBnWWVhck1vbnRoOnN0cmluZyA9IG5hbWVzcGFjZSArIFwiZ1llYXJNb250aFwiO1xuXHRzdGF0aWMgdGltZTpzdHJpbmcgPSBuYW1lc3BhY2UgKyBcInRpbWVcIjtcblxuXHRzdGF0aWMgYnl0ZTpzdHJpbmcgPSBuYW1lc3BhY2UgKyBcImJ5dGVcIjtcblx0c3RhdGljIGRlY2ltYWw6c3RyaW5nID0gbmFtZXNwYWNlICsgXCJkZWNpbWFsXCI7XG5cdHN0YXRpYyBpbnQ6c3RyaW5nID0gbmFtZXNwYWNlICsgXCJpbnRcIjtcblx0c3RhdGljIGludGVnZXI6c3RyaW5nID0gbmFtZXNwYWNlICsgXCJpbnRlZ2VyXCI7XG5cdHN0YXRpYyBsb25nOnN0cmluZyA9IG5hbWVzcGFjZSArIFwibG9uZ1wiO1xuXHRzdGF0aWMgbmVnYXRpdmVJbnRlZ2VyOnN0cmluZyA9IG5hbWVzcGFjZSArIFwibmVnYXRpdmVJbnRlZ2VyXCI7XG5cdHN0YXRpYyBub25OZWdhdGl2ZUludGVnZXI6c3RyaW5nID0gbmFtZXNwYWNlICsgXCJub25OZWdhdGl2ZUludGVnZXJcIjtcblx0c3RhdGljIG5vblBvc2l0aXZlSW50ZWdlcjpzdHJpbmcgPSBuYW1lc3BhY2UgKyBcIm5vblBvc2l0aXZlSW50ZWdlclwiO1xuXHRzdGF0aWMgcG9zaXRpdmVJbnRlZ2VyOnN0cmluZyA9IG5hbWVzcGFjZSArIFwicG9zaXRpdmVJbnRlZ2VyXCI7XG5cdHN0YXRpYyBzaG9ydDpzdHJpbmcgPSBuYW1lc3BhY2UgKyBcInNob3J0XCI7XG5cdHN0YXRpYyB1bnNpZ25lZExvbmc6c3RyaW5nID0gbmFtZXNwYWNlICsgXCJ1bnNpZ25lZExvbmdcIjtcblx0c3RhdGljIHVuc2lnbmVkSW50OnN0cmluZyA9IG5hbWVzcGFjZSArIFwidW5zaWduZWRJbnRcIjtcblx0c3RhdGljIHVuc2lnbmVkU2hvcnQ6c3RyaW5nID0gbmFtZXNwYWNlICsgXCJ1bnNpZ25lZFNob3J0XCI7XG5cdHN0YXRpYyB1bnNpZ25lZEJ5dGU6c3RyaW5nID0gbmFtZXNwYWNlICsgXCJ1bnNpZ25lZEJ5dGVcIjtcblx0c3RhdGljIGRvdWJsZTpzdHJpbmcgPSBuYW1lc3BhY2UgKyBcImRvdWJsZVwiO1xuXHRzdGF0aWMgZmxvYXQ6c3RyaW5nID0gbmFtZXNwYWNlICsgXCJmbG9hdFwiO1xuXG5cdHN0YXRpYyBib29sZWFuOnN0cmluZyA9IG5hbWVzcGFjZSArIFwiYm9vbGVhblwiO1xuXHRzdGF0aWMgc3RyaW5nOnN0cmluZyA9IG5hbWVzcGFjZSArIFwic3RyaW5nXCI7XG5cdHN0YXRpYyBvYmplY3Q6c3RyaW5nID0gbmFtZXNwYWNlICsgXCJvYmplY3RcIjtcbn1cblxuVXRpbHMuZm9yRWFjaE93blByb3BlcnR5KCBEYXRhVHlwZSwgKCBrZXk6c3RyaW5nLCB2YWx1ZTphbnkgKTp2b2lkID0+IHtcblx0RGF0YVR5cGVbIHZhbHVlIF0gPSBrZXk7XG59ICk7XG4iLCJpbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi8uLi9VdGlsc1wiO1xuXG5pbXBvcnQgKiBhcyBEb2N1bWVudCBmcm9tIFwiLi9Eb2N1bWVudFwiO1xuaW1wb3J0ICogYXMgTGlzdCBmcm9tIFwiLi9MaXN0XCI7XG5pbXBvcnQgKiBhcyBMaXRlcmFsIGZyb20gXCIuL0xpdGVyYWxcIjtcbmltcG9ydCAqIGFzIFBvaW50ZXIgZnJvbSBcIi4vLi4vUG9pbnRlclwiO1xuaW1wb3J0ICogYXMgVmFsdWUgZnJvbSBcIi4vVmFsdWVcIjtcbmltcG9ydCAqIGFzIFhTRCBmcm9tIFwiLi8uLi9OUy9YU0RcIjtcblxuZXhwb3J0IGludGVyZmFjZSBDbGFzcyB7XG5cdFwiQGlkXCI6c3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgRmFjdG9yeSB7XG5cdHN0YXRpYyBpcyggdmFsdWU6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIFV0aWxzLmhhc1Byb3BlcnR5KCB2YWx1ZSwgXCJAaWRcIiApXG5cdFx0XHQmJiBVdGlscy5pc1N0cmluZyggdmFsdWVbIFwiQGlkXCIgXSApO1xuXHR9XG5cblx0c3RhdGljIGNyZWF0ZSggdXJpOnN0cmluZyApOkNsYXNzIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0XCJAaWRcIjogdXJpLFxuXHRcdH07XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIFV0aWwge1xuXHRzdGF0aWMgYXJlRXF1YWwoIG5vZGUxOkNsYXNzLCBub2RlMjpDbGFzcyApOmJvb2xlYW4ge1xuXHRcdHJldHVybiBub2RlMVsgXCJAaWRcIiBdID09PSBub2RlMlsgXCJAaWRcIiBdO1xuXHR9XG5cblx0c3RhdGljIGhhc1R5cGUoIG5vZGU6Q2xhc3MsIHR5cGU6c3RyaW5nICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIFV0aWwuZ2V0VHlwZXMoIG5vZGUgKS5pbmRleE9mKCB0eXBlICkgIT09IC0gMTtcblx0fVxuXG5cdHN0YXRpYyBnZXRUeXBlcyggbm9kZTpDbGFzcyApOnN0cmluZ1tdIHtcblx0XHRpZiggISAoIFwiQHR5cGVcIiBpbiBub2RlICkgKSByZXR1cm4gW107XG5cdFx0cmV0dXJuIG5vZGVbIFwiQHR5cGVcIiBdO1xuXHR9XG5cblx0c3RhdGljIGdldFByb3BlcnR5VVJJKCBub2RlOkNsYXNzLCBwcmVkaWNhdGU6c3RyaW5nICk6c3RyaW5nIHtcblx0XHRpZiggISAoIHByZWRpY2F0ZSBpbiBub2RlICkgKSByZXR1cm4gbnVsbDtcblx0XHRpZiggISBVdGlscy5pc0FycmF5KCBub2RlWyBwcmVkaWNhdGUgXSApICkgcmV0dXJuIG51bGw7XG5cdFx0bGV0IHVyaTpzdHJpbmcgPSBub2RlWyBwcmVkaWNhdGUgXS5maW5kKCAoIHZhbHVlOlZhbHVlLkNsYXNzICkgPT4gRmFjdG9yeS5pcyggdmFsdWUgKSApO1xuXG5cdFx0cmV0dXJuIHR5cGVvZiB1cmkgIT09IFwidW5kZWZpbmVkXCIgPyB1cmlbIFwiQGlkXCIgXSA6IG51bGw7XG5cdH1cblxuXHRzdGF0aWMgZ2V0RnJlZU5vZGVzPFQgZXh0ZW5kcyBPYmplY3Q+KCB2YWx1ZTpUICk6Q2xhc3NbXSB7XG5cdFx0aWYoICEgVXRpbHMuaXNBcnJheSggdmFsdWUgKSApIHJldHVybiBbXTtcblxuXHRcdGxldCBhcnJheTphbnlbXSA9IDxhbnk+IHZhbHVlO1xuXHRcdHJldHVybiBhcnJheVxuXHRcdFx0LmZpbHRlciggKCBlbGVtZW50ICkgPT4gISBEb2N1bWVudC5GYWN0b3J5LmlzKCBlbGVtZW50ICkgKVxuXHRcdFx0LmZpbHRlciggKCBlbGVtZW50ICkgPT4gRmFjdG9yeS5pcyggZWxlbWVudCApICk7XG5cdH1cblxuXHRzdGF0aWMgZ2V0UHJvcGVydHkoIGV4cGFuZGVkT2JqZWN0OmFueSwgcHJvcGVydHlVUkk6c3RyaW5nLCBwb2ludGVyTGlicmFyeTpQb2ludGVyLkxpYnJhcnkgKTphbnkge1xuXHRcdGxldCBwcm9wZXJ0eVZhbHVlczpBcnJheTxhbnk+ID0gZXhwYW5kZWRPYmplY3RbIHByb3BlcnR5VVJJIF07XG5cdFx0aWYoICEgcHJvcGVydHlWYWx1ZXMgKSByZXR1cm4gbnVsbDtcblx0XHRpZiggISBwcm9wZXJ0eVZhbHVlcy5sZW5ndGggKSByZXR1cm4gbnVsbDtcblxuXHRcdGxldCBwcm9wZXJ0eVZhbHVlOmFueSA9IHByb3BlcnR5VmFsdWVzWyAwIF07XG5cblx0XHRyZXR1cm4gVmFsdWUuVXRpbC5wYXJzZVZhbHVlKCBwcm9wZXJ0eVZhbHVlLCBwb2ludGVyTGlicmFyeSApO1xuXHR9XG5cblx0c3RhdGljIGdldFByb3BlcnR5UG9pbnRlciggZXhwYW5kZWRPYmplY3Q6YW55LCBwcm9wZXJ0eVVSSTpzdHJpbmcsIHBvaW50ZXJMaWJyYXJ5OlBvaW50ZXIuTGlicmFyeSApOmFueSB7XG5cdFx0bGV0IHByb3BlcnR5VmFsdWVzOkFycmF5PGFueT4gPSBleHBhbmRlZE9iamVjdFsgcHJvcGVydHlVUkkgXTtcblx0XHRpZiggISBwcm9wZXJ0eVZhbHVlcyApIHJldHVybiBudWxsO1xuXG5cdFx0Zm9yKCBsZXQgcHJvcGVydHlWYWx1ZSBvZiBwcm9wZXJ0eVZhbHVlcyApIHtcblx0XHRcdGlmKCAhIEZhY3RvcnkuaXMoIHByb3BlcnR5VmFsdWUgKSApIGNvbnRpbnVlO1xuXG5cdFx0XHRyZXR1cm4gcG9pbnRlckxpYnJhcnkuZ2V0UG9pbnRlciggcHJvcGVydHlWYWx1ZVsgXCJAaWRcIiBdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRzdGF0aWMgZ2V0UHJvcGVydHlMaXRlcmFsKCBleHBhbmRlZE9iamVjdDphbnksIHByb3BlcnR5VVJJOnN0cmluZywgbGl0ZXJhbFR5cGU6c3RyaW5nICk6YW55IHtcblx0XHRsZXQgcHJvcGVydHlWYWx1ZXM6QXJyYXk8YW55PiA9IGV4cGFuZGVkT2JqZWN0WyBwcm9wZXJ0eVVSSSBdO1xuXHRcdGlmKCAhIHByb3BlcnR5VmFsdWVzICkgcmV0dXJuIG51bGw7XG5cblx0XHRmb3IoIGxldCBwcm9wZXJ0eVZhbHVlIG9mIHByb3BlcnR5VmFsdWVzICkge1xuXHRcdFx0aWYoICEgTGl0ZXJhbC5GYWN0b3J5LmlzKCBwcm9wZXJ0eVZhbHVlICkgKSBjb250aW51ZTtcblx0XHRcdGlmKCAhIExpdGVyYWwuRmFjdG9yeS5oYXNUeXBlKCBwcm9wZXJ0eVZhbHVlLCBsaXRlcmFsVHlwZSApICkgY29udGludWU7XG5cblx0XHRcdHJldHVybiBMaXRlcmFsLkZhY3RvcnkucGFyc2UoIHByb3BlcnR5VmFsdWUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHN0YXRpYyBnZXRQcm9wZXJ0eUxpc3QoIGV4cGFuZGVkT2JqZWN0OmFueSwgcHJvcGVydHlVUkk6c3RyaW5nLCBwb2ludGVyTGlicmFyeTpQb2ludGVyLkxpYnJhcnkgKTphbnkge1xuXHRcdGxldCBwcm9wZXJ0eVZhbHVlczpBcnJheTxhbnk+ID0gZXhwYW5kZWRPYmplY3RbIHByb3BlcnR5VVJJIF07XG5cdFx0aWYoICEgcHJvcGVydHlWYWx1ZXMgKSByZXR1cm4gbnVsbDtcblxuXHRcdGxldCBwcm9wZXJ0eUxpc3Q6TGlzdC5DbGFzcyA9IFV0aWwuZ2V0TGlzdCggcHJvcGVydHlWYWx1ZXMgKTtcblx0XHRpZiggISBwcm9wZXJ0eUxpc3QgKSByZXR1cm4gbnVsbDtcblxuXHRcdGxldCBsaXN0VmFsdWVzOkFycmF5PGFueT4gPSBbXTtcblx0XHRmb3IoIGxldCBsaXN0VmFsdWUgb2YgcHJvcGVydHlMaXN0WyBcIkBsaXN0XCIgXSApIHtcblx0XHRcdGxpc3RWYWx1ZXMucHVzaCggVmFsdWUuVXRpbC5wYXJzZVZhbHVlKCBsaXN0VmFsdWUsIHBvaW50ZXJMaWJyYXJ5ICkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGlzdFZhbHVlcztcblx0fVxuXG5cdHN0YXRpYyBnZXRQcm9wZXJ0eVBvaW50ZXJMaXN0KCBleHBhbmRlZE9iamVjdDphbnksIHByb3BlcnR5VVJJOnN0cmluZywgcG9pbnRlckxpYnJhcnk6UG9pbnRlci5MaWJyYXJ5ICk6YW55IHtcblx0XHRsZXQgcHJvcGVydHlWYWx1ZXM6QXJyYXk8YW55PiA9IGV4cGFuZGVkT2JqZWN0WyBwcm9wZXJ0eVVSSSBdO1xuXHRcdGlmKCAhIHByb3BlcnR5VmFsdWVzICkgcmV0dXJuIG51bGw7XG5cblx0XHRsZXQgcHJvcGVydHlMaXN0Okxpc3QuQ2xhc3MgPSBVdGlsLmdldExpc3QoIHByb3BlcnR5VmFsdWVzICk7XG5cdFx0aWYoICEgcHJvcGVydHlMaXN0ICkgcmV0dXJuIG51bGw7XG5cblx0XHRsZXQgbGlzdFBvaW50ZXJzOkFycmF5PGFueT4gPSBbXTtcblx0XHRmb3IoIGxldCBsaXN0VmFsdWUgb2YgcHJvcGVydHlMaXN0WyBcIkBsaXN0XCIgXSApIHtcblx0XHRcdGlmKCAhIEZhY3RvcnkuaXMoIGxpc3RWYWx1ZSApICkgY29udGludWU7XG5cblx0XHRcdGxldCBwb2ludGVyOlBvaW50ZXIuQ2xhc3MgPSBwb2ludGVyTGlicmFyeS5nZXRQb2ludGVyKCBsaXN0VmFsdWVbIFwiQGlkXCIgXSApO1xuXHRcdFx0bGlzdFBvaW50ZXJzLnB1c2goIHBvaW50ZXIgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGlzdFBvaW50ZXJzO1xuXHR9XG5cblx0c3RhdGljIGdldFByb3BlcnR5TGl0ZXJhbExpc3QoIGV4cGFuZGVkT2JqZWN0OmFueSwgcHJvcGVydHlVUkk6c3RyaW5nLCBsaXRlcmFsVHlwZTpzdHJpbmcgKTphbnkge1xuXHRcdGxldCBwcm9wZXJ0eVZhbHVlczpBcnJheTxhbnk+ID0gZXhwYW5kZWRPYmplY3RbIHByb3BlcnR5VVJJIF07XG5cdFx0aWYoICEgcHJvcGVydHlWYWx1ZXMgKSByZXR1cm4gbnVsbDtcblxuXHRcdGxldCBwcm9wZXJ0eUxpc3Q6TGlzdC5DbGFzcyA9IFV0aWwuZ2V0TGlzdCggcHJvcGVydHlWYWx1ZXMgKTtcblx0XHRpZiggISBwcm9wZXJ0eUxpc3QgKSByZXR1cm4gbnVsbDtcblxuXHRcdGxldCBsaXN0TGl0ZXJhbHM6QXJyYXk8YW55PiA9IFtdO1xuXHRcdGZvciggbGV0IGxpc3RWYWx1ZSBvZiBwcm9wZXJ0eUxpc3RbIFwiQGxpc3RcIiBdICkge1xuXHRcdFx0aWYoICEgTGl0ZXJhbC5GYWN0b3J5LmlzKCBsaXN0VmFsdWUgKSApIGNvbnRpbnVlO1xuXHRcdFx0aWYoICEgTGl0ZXJhbC5GYWN0b3J5Lmhhc1R5cGUoIDxhbnk+IGxpc3RWYWx1ZSwgbGl0ZXJhbFR5cGUgKSApIGNvbnRpbnVlO1xuXG5cdFx0XHRsaXN0TGl0ZXJhbHMucHVzaCggTGl0ZXJhbC5GYWN0b3J5LnBhcnNlKCA8YW55PiBsaXN0VmFsdWUgKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsaXN0TGl0ZXJhbHM7XG5cdH1cblxuXHRzdGF0aWMgZ2V0UHJvcGVydGllcyggZXhwYW5kZWRPYmplY3Q6YW55LCBwcm9wZXJ0eVVSSTpzdHJpbmcsIHBvaW50ZXJMaWJyYXJ5OlBvaW50ZXIuTGlicmFyeSApOmFueSB7XG5cdFx0bGV0IHByb3BlcnR5VmFsdWVzOkFycmF5PGFueT4gPSBleHBhbmRlZE9iamVjdFsgcHJvcGVydHlVUkkgXTtcblx0XHRpZiggISBwcm9wZXJ0eVZhbHVlcyApIHJldHVybiBudWxsO1xuXHRcdGlmKCAhIHByb3BlcnR5VmFsdWVzLmxlbmd0aCApIHJldHVybiBudWxsO1xuXG5cdFx0bGV0IHByb3BlcnRpZXM6QXJyYXk8YW55PiA9IFtdO1xuXHRcdGZvciggbGV0IHByb3BlcnR5VmFsdWUgb2YgcHJvcGVydHlWYWx1ZXMgKSB7XG5cdFx0XHRsZXQgcGFyc2VkVmFsdWU6YW55ID0gVmFsdWUuVXRpbC5wYXJzZVZhbHVlKCBwcm9wZXJ0eVZhbHVlLCBwb2ludGVyTGlicmFyeSApO1xuXHRcdFx0aWYoIHBhcnNlZFZhbHVlICE9PSBudWxsICkgcHJvcGVydGllcy5wdXNoKCBwYXJzZWRWYWx1ZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBwcm9wZXJ0aWVzO1xuXHR9XG5cblx0c3RhdGljIGdldFByb3BlcnR5UG9pbnRlcnMoIGV4cGFuZGVkT2JqZWN0OmFueSwgcHJvcGVydHlVUkk6c3RyaW5nLCBwb2ludGVyTGlicmFyeTpQb2ludGVyLkxpYnJhcnkgKTphbnkge1xuXHRcdGxldCBwcm9wZXJ0eVZhbHVlczpBcnJheTxhbnk+ID0gZXhwYW5kZWRPYmplY3RbIHByb3BlcnR5VVJJIF07XG5cdFx0aWYoICEgcHJvcGVydHlWYWx1ZXMgKSByZXR1cm4gW107XG5cdFx0aWYoICEgcHJvcGVydHlWYWx1ZXMubGVuZ3RoICkgcmV0dXJuIFtdO1xuXG5cdFx0bGV0IHByb3BlcnR5UG9pbnRlcnM6QXJyYXk8YW55PiA9IFtdO1xuXHRcdGZvciggbGV0IHByb3BlcnR5VmFsdWUgb2YgcHJvcGVydHlWYWx1ZXMgKSB7XG5cdFx0XHRpZiggISBGYWN0b3J5LmlzKCBwcm9wZXJ0eVZhbHVlICkgKSBjb250aW51ZTtcblxuXHRcdFx0bGV0IHBvaW50ZXI6UG9pbnRlci5DbGFzcyA9IHBvaW50ZXJMaWJyYXJ5LmdldFBvaW50ZXIoIHByb3BlcnR5VmFsdWVbIFwiQGlkXCIgXSApO1xuXHRcdFx0aWYoIHBvaW50ZXIgIT09IG51bGwgKVxuXHRcdFx0XHRwcm9wZXJ0eVBvaW50ZXJzLnB1c2goIHBvaW50ZXIgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcHJvcGVydHlQb2ludGVycztcblx0fVxuXG5cdHN0YXRpYyBnZXRQcm9wZXJ0eVVSSXMoIGV4cGFuZGVkT2JqZWN0OmFueSwgcHJvcGVydHlVUkk6c3RyaW5nICk6c3RyaW5nW10ge1xuXHRcdGxldCBwcm9wZXJ0eVZhbHVlczpBcnJheTxhbnk+ID0gZXhwYW5kZWRPYmplY3RbIHByb3BlcnR5VVJJIF07XG5cdFx0aWYoICEgcHJvcGVydHlWYWx1ZXMgKSByZXR1cm4gbnVsbDtcblx0XHRpZiggISBwcm9wZXJ0eVZhbHVlcy5sZW5ndGggKSByZXR1cm4gbnVsbDtcblxuXHRcdGxldCBwcm9wZXJ0eVVSSXM6c3RyaW5nW10gPSBbXTtcblx0XHRmb3IoIGxldCBwcm9wZXJ0eVZhbHVlIG9mIHByb3BlcnR5VmFsdWVzICkge1xuXHRcdFx0aWYoICEgRmFjdG9yeS5pcyggcHJvcGVydHlWYWx1ZSApICkgY29udGludWU7XG5cblx0XHRcdHByb3BlcnR5VVJJcy5wdXNoKCBwcm9wZXJ0eVZhbHVlWyBcIkBpZFwiIF0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcHJvcGVydHlVUklzO1xuXHR9XG5cblx0c3RhdGljIGdldFByb3BlcnR5TGl0ZXJhbHMoIGV4cGFuZGVkT2JqZWN0OmFueSwgcHJvcGVydHlVUkk6c3RyaW5nLCBsaXRlcmFsVHlwZTpzdHJpbmcgKTphbnkge1xuXHRcdGxldCBwcm9wZXJ0eVZhbHVlczpBcnJheTxhbnk+ID0gZXhwYW5kZWRPYmplY3RbIHByb3BlcnR5VVJJIF07XG5cdFx0aWYoICEgcHJvcGVydHlWYWx1ZXMgKSByZXR1cm4gbnVsbDtcblxuXHRcdGxldCBwcm9wZXJ0eUxpdGVyYWxzOkFycmF5PGFueT4gPSBbXTtcblx0XHRmb3IoIGxldCBwcm9wZXJ0eVZhbHVlIG9mIHByb3BlcnR5VmFsdWVzICkge1xuXHRcdFx0aWYoICEgTGl0ZXJhbC5GYWN0b3J5LmlzKCBwcm9wZXJ0eVZhbHVlICkgKSBjb250aW51ZTtcblx0XHRcdGlmKCAhIExpdGVyYWwuRmFjdG9yeS5oYXNUeXBlKCBwcm9wZXJ0eVZhbHVlLCBsaXRlcmFsVHlwZSApICkgY29udGludWU7XG5cblx0XHRcdHByb3BlcnR5TGl0ZXJhbHMucHVzaCggTGl0ZXJhbC5GYWN0b3J5LnBhcnNlKCBwcm9wZXJ0eVZhbHVlICkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcHJvcGVydHlMaXRlcmFscztcblx0fVxuXG5cdHN0YXRpYyBnZXRQcm9wZXJ0eUxhbmd1YWdlTWFwKCBleHBhbmRlZE9iamVjdDphbnksIHByb3BlcnR5VVJJOnN0cmluZyApOmFueSB7XG5cdFx0bGV0IHByb3BlcnR5VmFsdWVzOkFycmF5PGFueT4gPSBleHBhbmRlZE9iamVjdFsgcHJvcGVydHlVUkkgXTtcblx0XHRpZiggISBwcm9wZXJ0eVZhbHVlcyApIHJldHVybiBudWxsO1xuXG5cdFx0bGV0IHByb3BlcnR5TGFuZ3VhZ2VNYXA6YW55ID0ge307XG5cdFx0Zm9yKCBsZXQgcHJvcGVydHlWYWx1ZSBvZiBwcm9wZXJ0eVZhbHVlcyApIHtcblx0XHRcdGlmKCAhIExpdGVyYWwuRmFjdG9yeS5pcyggcHJvcGVydHlWYWx1ZSApICkgY29udGludWU7XG5cdFx0XHRpZiggISBMaXRlcmFsLkZhY3RvcnkuaGFzVHlwZSggcHJvcGVydHlWYWx1ZSwgWFNELkRhdGFUeXBlLnN0cmluZyApICkgY29udGludWU7XG5cblx0XHRcdGxldCBsYW5ndWFnZVRhZzpzdHJpbmcgPSBwcm9wZXJ0eVZhbHVlWyBcIkBsYW5ndWFnZVwiIF07XG5cdFx0XHRpZiggISBsYW5ndWFnZVRhZyApIGNvbnRpbnVlO1xuXG5cdFx0XHRwcm9wZXJ0eUxhbmd1YWdlTWFwWyBsYW5ndWFnZVRhZyBdID0gTGl0ZXJhbC5GYWN0b3J5LnBhcnNlKCBwcm9wZXJ0eVZhbHVlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByb3BlcnR5TGFuZ3VhZ2VNYXA7XG5cdH1cblxuXHRzdGF0aWMgZ2V0TGlzdCggcHJvcGVydHlWYWx1ZXM6QXJyYXk8YW55PiApOkxpc3QuQ2xhc3Mge1xuXHRcdGZvciggbGV0IHByb3BlcnR5VmFsdWUgb2YgcHJvcGVydHlWYWx1ZXMgKSB7XG5cdFx0XHRpZiggISBMaXN0LkZhY3RvcnkuaXMoIHByb3BlcnR5VmFsdWUgKSApIGNvbnRpbnVlO1xuXG5cdFx0XHRyZXR1cm4gcHJvcGVydHlWYWx1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCAqIGFzIExpc3QgZnJvbSBcIi4vTGlzdFwiO1xuaW1wb3J0ICogYXMgTGl0ZXJhbCBmcm9tIFwiLi9MaXRlcmFsXCI7XG5pbXBvcnQgKiBhcyBOUyBmcm9tIFwiLi8uLi9OU1wiO1xuaW1wb3J0ICogYXMgUG9pbnRlciBmcm9tIFwiLi8uLi9Qb2ludGVyXCI7XG5pbXBvcnQgKiBhcyBSREZOb2RlIGZyb20gXCIuL1JERk5vZGVcIjtcblxuZXhwb3J0IGludGVyZmFjZSBDbGFzcyB7XG5cdFwiQGlkXCI/OnN0cmluZztcblx0XCJAdHlwZVwiPzpzdHJpbmc7XG5cdFwiQHZhbHVlXCI/OnN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFV0aWwge1xuXG5cdHN0YXRpYyBwYXJzZVZhbHVlKCBwcm9wZXJ0eVZhbHVlOkNsYXNzLCBwb2ludGVyTGlicmFyeTpQb2ludGVyLkxpYnJhcnkgKTphbnkge1xuXHRcdGlmKCBMaXRlcmFsLkZhY3RvcnkuaXMoIHByb3BlcnR5VmFsdWUgKSApIHtcblx0XHRcdHJldHVybiBMaXRlcmFsLkZhY3RvcnkucGFyc2UoIDxhbnk+IHByb3BlcnR5VmFsdWUgKTtcblx0XHR9IGVsc2UgaWYoIFJERk5vZGUuRmFjdG9yeS5pcyggcHJvcGVydHlWYWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHBvaW50ZXJMaWJyYXJ5LmdldFBvaW50ZXIoIHByb3BlcnR5VmFsdWVbIFwiQGlkXCIgXSApO1xuXHRcdH0gZWxzZSBpZiggTGlzdC5GYWN0b3J5LmlzKCBwcm9wZXJ0eVZhbHVlICkgKSB7XG5cdFx0XHRsZXQgcGFyc2VkVmFsdWU6QXJyYXk8YW55PiA9IFtdO1xuXHRcdFx0bGV0IGxpc3RWYWx1ZXM6QXJyYXk8YW55PiA9IHByb3BlcnR5VmFsdWVbIFwiQGxpc3RcIiBdO1xuXHRcdFx0Zm9yKCBsZXQgbGlzdFZhbHVlIG9mIGxpc3RWYWx1ZXMgKSB7XG5cdFx0XHRcdHBhcnNlZFZhbHVlLnB1c2goIFV0aWwucGFyc2VWYWx1ZSggbGlzdFZhbHVlLCBwb2ludGVyTGlicmFyeSApICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcGFyc2VkVmFsdWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRPRE86IFdoYXQgZWxzZSBjb3VsZCBpdCBiZT9cblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiIsImltcG9ydCAqIGFzIExpdGVyYWwgZnJvbSBcIi4vUkRGL0xpdGVyYWxcIjtcbmltcG9ydCAqIGFzIERvY3VtZW50IGZyb20gXCIuL1JERi9Eb2N1bWVudFwiO1xuaW1wb3J0ICogYXMgTGlzdCBmcm9tIFwiLi9SREYvTGlzdFwiO1xuaW1wb3J0ICogYXMgTm9kZSBmcm9tIFwiLi9SREYvUkRGTm9kZVwiO1xuaW1wb3J0ICogYXMgVVJJIGZyb20gXCIuL1JERi9VUklcIjtcbmltcG9ydCAqIGFzIFZhbHVlIGZyb20gXCIuL1JERi9WYWx1ZVwiO1xuXG5leHBvcnQge1xuXHRMaXRlcmFsLFxuXHREb2N1bWVudCxcblx0TGlzdCxcblx0Tm9kZSxcblx0VVJJLFxuXHRWYWx1ZVxufTtcbiIsImltcG9ydCBQYXJzZXIgZnJvbSBcIi4vUGFyc2VyXCI7XG5cbmV4cG9ydCBjbGFzcyBDbGFzcyBpbXBsZW1lbnRzIFBhcnNlcjxPYmplY3Q+IHtcblx0cGFyc2UoIGJvZHk6c3RyaW5nICk6UHJvbWlzZTxPYmplY3Q+IHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2U8T2JqZWN0PiggKCByZXNvbHZlOiggcmVzdWx0OnN0cmluZyApID0+IHZvaWQsIHJlamVjdDooIGVycm9yOkVycm9yICkgPT4gdm9pZCApID0+IHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHJlc29sdmUoIEpTT04ucGFyc2UoIGJvZHkgKSApO1xuXHRcdFx0fSBjYXRjaCggZXJyb3IgKSB7XG5cdFx0XHRcdC8vIFRPRE86IEhhbmRsZSBTeW50YXhFcnJvclxuXHRcdFx0XHRyZWplY3QoIGVycm9yICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0IFBhcnNlciBmcm9tIFwiLi8uLi9IVFRQL1BhcnNlclwiO1xuaW1wb3J0IEpTT05QYXJzZXIgZnJvbSBcIi4vLi4vSFRUUC9KU09OUGFyc2VyXCI7XG5cbmltcG9ydCBSYXdSZXN1bHRzIGZyb20gXCIuL1Jhd1Jlc3VsdHNcIjtcblxuZXhwb3J0IGNsYXNzIENsYXNzIGltcGxlbWVudHMgUGFyc2VyPFJhd1Jlc3VsdHM+IHtcblx0cGFyc2UoIGlucHV0OnN0cmluZyApOlByb21pc2U8YW55PiB7XG5cdFx0bGV0IGpzb25QYXJzZXI6SlNPTlBhcnNlciA9IG5ldyBKU09OUGFyc2VyKCk7XG5cdFx0cmV0dXJuIGpzb25QYXJzZXIucGFyc2UoIGlucHV0ICkudGhlbiggKCBwYXJzZWRPYmplY3Q6T2JqZWN0ICkgPT4ge1xuXHRcdFx0cmV0dXJuIDxhbnk+IHBhcnNlZE9iamVjdDtcblx0XHR9ICk7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xhc3M7XG4iLCJpbXBvcnQgKiBhcyBFcnJvcnMgZnJvbSBcIi4vLi4vRXJyb3JzXCI7XG5pbXBvcnQgKiBhcyBIVFRQIGZyb20gXCIuLy4uL0hUVFBcIjtcbmltcG9ydCAqIGFzIFBvaW50ZXIgZnJvbSBcIi4vLi4vUG9pbnRlclwiO1xuaW1wb3J0ICogYXMgUkRGIGZyb20gXCIuLy4uL1JERlwiO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vLi4vVXRpbHNcIjtcblxuaW1wb3J0ICogYXMgUmF3UmVzdWx0cyBmcm9tIFwiLi9SYXdSZXN1bHRzXCI7XG5pbXBvcnQgUmVzdWx0c1BhcnNlciBmcm9tIFwiLi9SYXdSZXN1bHRzUGFyc2VyXCI7XG5pbXBvcnQgKiBhcyBTRUxFQ1RSZXN1bHRzIGZyb20gXCIuL1NFTEVDVFJlc3VsdHNcIjtcblxuXG5leHBvcnQgY2xhc3MgQ2xhc3Mge1xuXHRwcml2YXRlIHN0YXRpYyBkZWZhdWx0T3B0aW9uczpIVFRQLlJlcXVlc3QuT3B0aW9ucyA9IHt9O1xuXHRwcml2YXRlIHN0YXRpYyByZXN1bHRzUGFyc2VyOlJlc3VsdHNQYXJzZXIgPSBuZXcgUmVzdWx0c1BhcnNlcigpO1xuXHRwcml2YXRlIHN0YXRpYyBzdHJpbmdQYXJzZXI6SFRUUC5TdHJpbmdQYXJzZXIuQ2xhc3MgPSBuZXcgSFRUUC5TdHJpbmdQYXJzZXIuQ2xhc3MoKTtcblxuXHRzdGF0aWMgZXhlY3V0ZVJhd0FTS1F1ZXJ5KCB1cmw6c3RyaW5nLCBhc2tRdWVyeTpzdHJpbmcsIG9wdGlvbnM6SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgPSB7fSApOlByb21pc2U8WyBSYXdSZXN1bHRzLkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+IHtcblx0XHRvcHRpb25zID0gVXRpbHMuZXh0ZW5kKCBvcHRpb25zLCBDbGFzcy5kZWZhdWx0T3B0aW9ucyApO1xuXG5cdFx0SFRUUC5SZXF1ZXN0LlV0aWwuc2V0QWNjZXB0SGVhZGVyKCBcImFwcGxpY2F0aW9uL3NwYXJxbC1yZXN1bHRzK2pzb25cIiwgb3B0aW9ucyApO1xuXHRcdEhUVFAuUmVxdWVzdC5VdGlsLnNldENvbnRlbnRUeXBlSGVhZGVyKCBcImFwcGxpY2F0aW9uL3NwYXJxbC1xdWVyeVwiLCBvcHRpb25zICk7XG5cblx0XHRyZXR1cm4gSFRUUC5SZXF1ZXN0LlNlcnZpY2UucG9zdCggdXJsLCBhc2tRdWVyeSwgb3B0aW9ucywgQ2xhc3MucmVzdWx0c1BhcnNlciApO1xuXHR9XG5cblx0c3RhdGljIGV4ZWN1dGVBU0tRdWVyeSggdXJsOnN0cmluZywgYXNrUXVlcnk6c3RyaW5nLCBvcHRpb25zOkhUVFAuUmVxdWVzdC5PcHRpb25zID0ge30gKTpQcm9taXNlPFsgYm9vbGVhbiwgSFRUUC5SZXNwb25zZS5DbGFzcyBdPiB7XG5cdFx0cmV0dXJuIENsYXNzLmV4ZWN1dGVSYXdBU0tRdWVyeSggdXJsLCBhc2tRdWVyeSwgb3B0aW9ucyApLnRoZW4oICggWyByYXdSZXN1bHRzLCByZXNwb25zZSBdOlsgUmF3UmVzdWx0cy5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdICkgPT4ge1xuXHRcdFx0cmV0dXJuIFsgcmF3UmVzdWx0cy5ib29sZWFuLCByZXNwb25zZSBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdHN0YXRpYyBleGVjdXRlUmF3U0VMRUNUUXVlcnkoIHVybDpzdHJpbmcsIHNlbGVjdFF1ZXJ5OnN0cmluZywgb3B0aW9uczpIVFRQLlJlcXVlc3QuT3B0aW9ucyA9IHt9ICk6UHJvbWlzZTxbIFJhd1Jlc3VsdHMuQ2xhc3MsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4ge1xuXHRcdG9wdGlvbnMgPSBVdGlscy5leHRlbmQoIG9wdGlvbnMsIENsYXNzLmRlZmF1bHRPcHRpb25zICk7XG5cblx0XHRIVFRQLlJlcXVlc3QuVXRpbC5zZXRBY2NlcHRIZWFkZXIoIFwiYXBwbGljYXRpb24vc3BhcnFsLXJlc3VsdHMranNvblwiLCBvcHRpb25zICk7XG5cdFx0SFRUUC5SZXF1ZXN0LlV0aWwuc2V0Q29udGVudFR5cGVIZWFkZXIoIFwiYXBwbGljYXRpb24vc3BhcnFsLXF1ZXJ5XCIsIG9wdGlvbnMgKTtcblxuXHRcdHJldHVybiBIVFRQLlJlcXVlc3QuU2VydmljZS5wb3N0KCB1cmwsIHNlbGVjdFF1ZXJ5LCBvcHRpb25zLCBDbGFzcy5yZXN1bHRzUGFyc2VyICk7XG5cdH1cblxuXHRzdGF0aWMgZXhlY3V0ZVNFTEVDVFF1ZXJ5KCB1cmw6c3RyaW5nLCBzZWxlY3RRdWVyeTpzdHJpbmcsIHBvaW50ZXJMaWJyYXJ5OlBvaW50ZXIuTGlicmFyeSwgb3B0aW9uczpIVFRQLlJlcXVlc3QuT3B0aW9ucyA9IHt9ICk6UHJvbWlzZTxbIGFueSwgSFRUUC5SZXNwb25zZS5DbGFzc10+IHtcblx0XHRyZXR1cm4gQ2xhc3MuZXhlY3V0ZVJhd1NFTEVDVFF1ZXJ5KCB1cmwsIHNlbGVjdFF1ZXJ5LCBvcHRpb25zICkudGhlbiggKCBbIHJhd1Jlc3VsdHMsIHJlc3BvbnNlIF06WyBSYXdSZXN1bHRzLkNsYXNzLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0gKSA9PiB7XG5cdFx0XHRsZXQgcmF3QmluZGluZ3M6UmF3UmVzdWx0cy5CaW5kaW5nT2JqZWN0W10gPSByYXdSZXN1bHRzLnJlc3VsdHMuYmluZGluZ3M7XG5cdFx0XHRsZXQgYmluZGluZ3M6U0VMRUNUUmVzdWx0cy5CaW5kaW5nT2JqZWN0W10gPSBbXTtcblxuXHRcdFx0Zm9yKCBsZXQgYmluZGluZ0NvbHVtbiBvZiByYXdCaW5kaW5ncyApIHtcblx0XHRcdFx0bGV0IGJpbmRpbmc6U0VMRUNUUmVzdWx0cy5CaW5kaW5nT2JqZWN0ID0ge307XG5cdFx0XHRcdGZvciggbGV0IGJpbmRpbmdSb3cgaW4gYmluZGluZ0NvbHVtbiApIHtcblx0XHRcdFx0XHRpZiggISBiaW5kaW5nQ29sdW1uLmhhc093blByb3BlcnR5KCBiaW5kaW5nUm93ICkgKSBjb250aW51ZTtcblxuXHRcdFx0XHRcdGxldCBiaW5kaW5nQ2VsbDpSYXdSZXN1bHRzLkJpbmRpbmdQcm9wZXJ0eSA9IGJpbmRpbmdDb2x1bW5bIGJpbmRpbmdSb3cgXTtcblx0XHRcdFx0XHRiaW5kaW5nWyBiaW5kaW5nUm93IF0gPSBDbGFzcy5wYXJzZVJhd0JpbmRpbmdQcm9wZXJ0eSggYmluZGluZ0NlbGwsIHBvaW50ZXJMaWJyYXJ5ICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YmluZGluZ3MucHVzaCggYmluZGluZyApO1xuXHRcdFx0fVxuXG5cdFx0XHRsZXQgcmVzdWx0czpTRUxFQ1RSZXN1bHRzLkNsYXNzID0ge1xuXHRcdFx0XHR2YXJzOiByYXdSZXN1bHRzLmhlYWQudmFycyxcblx0XHRcdFx0YmluZGluZ3M6IGJpbmRpbmdzLFxuXHRcdFx0fTtcblx0XHRcdHJldHVybiBbIHJlc3VsdHMsIHJlc3BvbnNlIF07XG5cdFx0fSApO1xuXHR9XG5cblx0c3RhdGljIGV4ZWN1dGVSYXdDT05TVFJVQ1RRdWVyeSggdXJsOnN0cmluZywgY29uc3RydWN0UXVlcnk6c3RyaW5nLCBvcHRpb25zOkhUVFAuUmVxdWVzdC5PcHRpb25zID0ge30gKTpQcm9taXNlPFsgc3RyaW5nLCBIVFRQLlJlc3BvbnNlLkNsYXNzIF0+IHtcblx0XHRvcHRpb25zID0gVXRpbHMuZXh0ZW5kKCBvcHRpb25zLCBDbGFzcy5kZWZhdWx0T3B0aW9ucyApO1xuXG5cdFx0aWYoIEhUVFAuUmVxdWVzdC5VdGlsLmdldEhlYWRlciggXCJBY2NlcHRcIiwgb3B0aW9ucyApID09PSB1bmRlZmluZWQgKSBIVFRQLlJlcXVlc3QuVXRpbC5zZXRBY2NlcHRIZWFkZXIoIFwiYXBwbGljYXRpb24vbGQranNvblwiLCBvcHRpb25zICk7XG5cdFx0SFRUUC5SZXF1ZXN0LlV0aWwuc2V0Q29udGVudFR5cGVIZWFkZXIoIFwiYXBwbGljYXRpb24vc3BhcnFsLXF1ZXJ5XCIsIG9wdGlvbnMgKTtcblxuXHRcdHJldHVybiBIVFRQLlJlcXVlc3QuU2VydmljZS5wb3N0KCB1cmwsIGNvbnN0cnVjdFF1ZXJ5LCBvcHRpb25zLCBDbGFzcy5zdHJpbmdQYXJzZXIgKTtcblx0fVxuXG5cdHN0YXRpYyBleGVjdXRlUmF3REVTQ1JJQkVRdWVyeSggdXJsOnN0cmluZywgZGVzY3JpYmVRdWVyeTpzdHJpbmcsIG9wdGlvbnM6SFRUUC5SZXF1ZXN0Lk9wdGlvbnMgPSB7fSApOlByb21pc2U8WyBzdHJpbmcsIEhUVFAuUmVzcG9uc2UuQ2xhc3MgXT4ge1xuXHRcdG9wdGlvbnMgPSBVdGlscy5leHRlbmQoIG9wdGlvbnMsIENsYXNzLmRlZmF1bHRPcHRpb25zICk7XG5cblx0XHRpZiggSFRUUC5SZXF1ZXN0LlV0aWwuZ2V0SGVhZGVyKCBcIkFjY2VwdFwiLCBvcHRpb25zICkgPT09IHVuZGVmaW5lZCApIEhUVFAuUmVxdWVzdC5VdGlsLnNldEFjY2VwdEhlYWRlciggXCJhcHBsaWNhdGlvbi9sZCtqc29uXCIsIG9wdGlvbnMgKTtcblx0XHRIVFRQLlJlcXVlc3QuVXRpbC5zZXRDb250ZW50VHlwZUhlYWRlciggXCJhcHBsaWNhdGlvbi9zcGFycWwtcXVlcnlcIiwgb3B0aW9ucyApO1xuXG5cdFx0cmV0dXJuIEhUVFAuUmVxdWVzdC5TZXJ2aWNlLnBvc3QoIHVybCwgZGVzY3JpYmVRdWVyeSwgb3B0aW9ucywgQ2xhc3Muc3RyaW5nUGFyc2VyICk7XG5cdH1cblxuXHRzdGF0aWMgZXhlY3V0ZVVQREFURSggdXJsOnN0cmluZywgdXBkYXRlUXVlcnk6c3RyaW5nLCBvcHRpb25zOkhUVFAuUmVxdWVzdC5PcHRpb25zID0ge30gKTpQcm9taXNlPEhUVFAuUmVzcG9uc2UuQ2xhc3M+IHtcblx0XHRvcHRpb25zID0gVXRpbHMuZXh0ZW5kKCBvcHRpb25zLCBDbGFzcy5kZWZhdWx0T3B0aW9ucyApO1xuXG5cdFx0aWYoIEhUVFAuUmVxdWVzdC5VdGlsLmdldEhlYWRlciggXCJBY2NlcHRcIiwgb3B0aW9ucyApID09PSB1bmRlZmluZWQgKSBIVFRQLlJlcXVlc3QuVXRpbC5zZXRBY2NlcHRIZWFkZXIoIFwiYXBwbGljYXRpb24vbGQranNvblwiLCBvcHRpb25zICk7XG5cdFx0SFRUUC5SZXF1ZXN0LlV0aWwuc2V0Q29udGVudFR5cGVIZWFkZXIoIFwiYXBwbGljYXRpb24vc3BhcnFsLXVwZGF0ZVwiLCBvcHRpb25zICk7XG5cblx0XHRyZXR1cm4gSFRUUC5SZXF1ZXN0LlNlcnZpY2UucG9zdCggdXJsLCB1cGRhdGVRdWVyeSwgb3B0aW9ucyApO1xuXHR9XG5cblx0cHJpdmF0ZSBzdGF0aWMgcGFyc2VSYXdCaW5kaW5nUHJvcGVydHkoIHJhd0JpbmRpbmdQcm9wZXJ0eTpSYXdSZXN1bHRzLkJpbmRpbmdQcm9wZXJ0eSwgcG9pbnRlckxpYnJhcnk6UG9pbnRlci5MaWJyYXJ5ICk6YW55IHtcblx0XHRzd2l0Y2goIHJhd0JpbmRpbmdQcm9wZXJ0eS50eXBlICkge1xuXHRcdFx0Y2FzZSBcInVyaVwiOlxuXHRcdFx0XHRyZXR1cm4gcG9pbnRlckxpYnJhcnkuZ2V0UG9pbnRlciggcmF3QmluZGluZ1Byb3BlcnR5LnZhbHVlICk7XG5cdFx0XHRjYXNlIFwiYm5vZGVcIjpcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9ycy5Ob3RJbXBsZW1lbnRlZEVycm9yKCBcIkJOb2RlcyBjYW5ub3QgYmUgcXVlcmllZCBkaXJlY3RseVwiICk7XG5cdFx0XHRjYXNlIFwibGl0ZXJhbFwiOlxuXHRcdFx0XHRpZiggXCJkYXRhdHlwZVwiIGluIHJhd0JpbmRpbmdQcm9wZXJ0eSApIHtcblx0XHRcdFx0XHRyZXR1cm4gUkRGLkxpdGVyYWwuRmFjdG9yeS5wYXJzZSggcmF3QmluZGluZ1Byb3BlcnR5LnZhbHVlLCByYXdCaW5kaW5nUHJvcGVydHkuZGF0YXR5cGUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXR1cm4gUkRGLkxpdGVyYWwuRmFjdG9yeS5wYXJzZSggcmF3QmluZGluZ1Byb3BlcnR5LnZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcnMuSWxsZWdhbEFyZ3VtZW50RXJyb3IoIFwiVGhlIGJpbmRpbmdQcm9wZXJ0eSBoYXMgYW4gdW5zdXBwb3J0ZWQgdHlwZVwiICk7XG5cdFx0fVxuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIiwiaW1wb3J0ICogYXMgUmF3UmVzdWx0cyBmcm9tIFwiLi9TUEFSUUwvUmF3UmVzdWx0c1wiO1xuaW1wb3J0ICogYXMgUmF3UmVzdWx0c1BhcnNlciBmcm9tIFwiLi9TUEFSUUwvUmF3UmVzdWx0c1BhcnNlclwiO1xuaW1wb3J0IFNlcnZpY2UgZnJvbSBcIi4vU1BBUlFML1NlcnZpY2VcIjtcbmltcG9ydCAqIGFzIFNFTEVDVFJlc3VsdHMgZnJvbSBcIi4vU1BBUlFML1NFTEVDVFJlc3VsdHNcIjtcblxuZXhwb3J0IHtcblx0UmF3UmVzdWx0cyxcblx0UmF3UmVzdWx0c1BhcnNlcixcblx0U2VydmljZSxcblx0U0VMRUNUUmVzdWx0cyxcbn07XG4iLCJmdW5jdGlvbiBoYXNGdW5jdGlvbiggb2JqZWN0Ok9iamVjdCwgZnVuY3Rpb25OYW1lOnN0cmluZyApOmJvb2xlYW4ge1xuXHRyZXR1cm4gdHlwZW9mIG9iamVjdFsgZnVuY3Rpb25OYW1lIF0gPT09IFwiZnVuY3Rpb25cIjtcbn1cblxuZnVuY3Rpb24gaGFzUHJvcGVydHkoIG9iamVjdDpPYmplY3QsIHByb3BlcnR5OnN0cmluZyApOmJvb2xlYW4ge1xuXHRpZiggISBvYmplY3QgKSByZXR1cm4gZmFsc2U7XG5cdHJldHVybiBpc0RlZmluZWQoIG9iamVjdFsgcHJvcGVydHkgXSApO1xufVxuXG5mdW5jdGlvbiBoYXNQcm9wZXJ0eURlZmluZWQoIG9iamVjdDpPYmplY3QsIHByb3BlcnR5OnN0cmluZyApOmJvb2xlYW4ge1xuXHRpZiggISBvYmplY3QgKSByZXR1cm4gZmFsc2U7XG5cdHJldHVybiAhICEgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciggb2JqZWN0LCBwcm9wZXJ0eSApO1xufVxuXG5mdW5jdGlvbiBpc0RlZmluZWQoIHZhbHVlOmFueSApOmJvb2xlYW4ge1xuXHRyZXR1cm4gdm9pZCAwICE9PSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gaXNOdWxsKCB2YWx1ZTphbnkgKTpib29sZWFuIHtcblx0cmV0dXJuIHZhbHVlID09PSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc0FycmF5KCBvYmplY3Q6YW55ICk6Ym9vbGVhbiB7XG5cdHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiBBcnJheTtcbn1cblxuZnVuY3Rpb24gaXNTdHJpbmcoIHZhbHVlOmFueSApOmJvb2xlYW4ge1xuXHRyZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiIHx8IHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nO1xufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oIHZhbHVlOmFueSApOmJvb2xlYW4ge1xuXHRyZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIjtcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXIoIHZhbHVlOmFueSApOmJvb2xlYW4ge1xuXHRyZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiIHx8IHZhbHVlIGluc3RhbmNlb2YgTnVtYmVyO1xufVxuXG5mdW5jdGlvbiBpc0ludGVnZXIoIHZhbHVlOmFueSApOmJvb2xlYW4ge1xuXHRpZiggISBpc051bWJlciggdmFsdWUgKSApcmV0dXJuIGZhbHNlO1xuXHRyZXR1cm4gdmFsdWUgJSAxID09PSAwO1xufVxuXG5mdW5jdGlvbiBpc0RvdWJsZSggdmFsdWU6YW55ICk6Ym9vbGVhbiB7XG5cdGlmKCAhIGlzTnVtYmVyKCB2YWx1ZSApICkgcmV0dXJuIGZhbHNlO1xuXHRyZXR1cm4gdmFsdWUgJSAxICE9PSAwO1xufVxuXG5mdW5jdGlvbiBpc0RhdGUoIGRhdGU6YW55ICk6Ym9vbGVhbiB7XG5cdHJldHVybiB0eXBlb2YgZGF0ZSA9PT0gXCJkYXRlXCIgfHwgZGF0ZSBpbnN0YW5jZW9mIERhdGU7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KCBvYmplY3Q6YW55ICk6Ym9vbGVhbiB7XG5cdHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSBcIm9iamVjdFwiICYmICggISAhIG9iamVjdCApO1xufVxuXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KCBvYmplY3Q6T2JqZWN0ICk6Ym9vbGVhbiB7XG5cdHJldHVybiBpc09iamVjdCggb2JqZWN0IClcblx0XHQmJiAhIGlzQXJyYXkoIG9iamVjdCApXG5cdFx0JiYgISBpc0RhdGUoIG9iamVjdCApXG5cdFx0JiYgISBpc01hcCggb2JqZWN0IClcblx0XHQmJiAhICggdHlwZW9mIEJsb2IgIT09IFwidW5kZWZpbmVkXCIgJiYgb2JqZWN0IGluc3RhbmNlb2YgQmxvYiApXG5cdFx0JiYgISAoIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCggb2JqZWN0ICkgPT09IFwiW29iamVjdCBTZXRdXCIgKTtcbn1cblxuZnVuY3Rpb24gaXNGdW5jdGlvbiggdmFsdWU6YW55ICk6Ym9vbGVhbiB7XG5cdHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbn1cblxuZnVuY3Rpb24gaXNNYXAoIHZhbHVlOmFueSApOmJvb2xlYW4ge1xuXHRyZXR1cm4gKFxuXHRcdGlzT2JqZWN0KCB2YWx1ZSApICYmXG5cblx0XHRoYXNGdW5jdGlvbiggdmFsdWUsIFwiZ2V0XCIgKSAmJlxuXHRcdGhhc0Z1bmN0aW9uKCB2YWx1ZSwgXCJoYXNcIiApICYmXG5cdFx0aGFzUHJvcGVydHkoIHZhbHVlLCBcInNpemVcIiApICYmXG5cdFx0aGFzRnVuY3Rpb24oIHZhbHVlLCBcImNsZWFyXCIgKSAmJlxuXHRcdGhhc0Z1bmN0aW9uKCB2YWx1ZSwgXCJkZWxldGVcIiApICYmXG5cdFx0aGFzRnVuY3Rpb24oIHZhbHVlLCBcImVudHJpZXNcIiApICYmXG5cdFx0aGFzRnVuY3Rpb24oIHZhbHVlLCBcImZvckVhY2hcIiApICYmXG5cdFx0aGFzRnVuY3Rpb24oIHZhbHVlLCBcImdldFwiICkgJiZcblx0XHRoYXNGdW5jdGlvbiggdmFsdWUsIFwiaGFzXCIgKSAmJlxuXHRcdGhhc0Z1bmN0aW9uKCB2YWx1ZSwgXCJrZXlzXCIgKSAmJlxuXHRcdGhhc0Z1bmN0aW9uKCB2YWx1ZSwgXCJzZXRcIiApICYmXG5cdFx0aGFzRnVuY3Rpb24oIHZhbHVlLCBcInZhbHVlc1wiIClcblx0KTtcbn1cblxuZnVuY3Rpb24gcGFyc2VCb29sZWFuKCB2YWx1ZTpzdHJpbmcgKTpib29sZWFuIHtcblx0aWYoICEgaXNTdHJpbmcoIHZhbHVlICkgKSByZXR1cm4gZmFsc2U7XG5cblx0LyogdHNsaW50OmRpc2FibGU6IG5vLXN3aXRjaC1jYXNlLWZhbGwtdGhyb3VnaCAqL1xuXHRzd2l0Y2goIHZhbHVlLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0Y2FzZSBcInRydWVcIjpcblx0XHRjYXNlIFwieWVzXCI6XG5cdFx0Y2FzZSBcInlcIjpcblx0XHRjYXNlIFwiMVwiOlxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0Y2FzZSBcImZhbHNlXCI6XG5cdFx0Y2FzZSBcIm5vXCI6XG5cdFx0Y2FzZSBcIm5cIjpcblx0XHRjYXNlIFwiMFwiOlxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0LyogdHNsaW50OmVuYWJsZTogbm8tc3dpdGNoLWNhc2UtZmFsbC10aHJvdWdoICovXG59XG5cbmZ1bmN0aW9uIGV4dGVuZCggdGFyZ2V0Ok9iamVjdCwgLi4ub2JqZWN0czpPYmplY3RbXSApOk9iamVjdCB7XG5cdGZvciggbGV0IHRvTWVyZ2Ugb2Ygb2JqZWN0cyApIHtcblx0XHRpZiggISB0b01lcmdlICkgY29udGludWU7XG5cblx0XHRmb3IoIGxldCBuYW1lIGluIHRvTWVyZ2UgKSB7XG5cdFx0XHRpZiggdG9NZXJnZS5oYXNPd25Qcm9wZXJ0eSggbmFtZSApICkge1xuXHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IHRvTWVyZ2VbIG5hbWUgXTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaE93blByb3BlcnR5KCBvYmplY3Q6T2JqZWN0LCBhY3Rpb246KCBuYW1lOnN0cmluZywgdmFsdWU6YW55ICkgPT4gKCBib29sZWFuIHwgdm9pZCApICk6dm9pZCB7XG5cdGlmKCAhICggaXNPYmplY3QoIG9iamVjdCApIHx8IGlzRnVuY3Rpb24oIG9iamVjdCApICkgKSB0aHJvdyBuZXcgRXJyb3IoIFwiSWxsZWdhbEFyZ3VtZW50XCIgKTtcblx0Zm9yKCBsZXQgbmFtZSBpbiBvYmplY3QgKSB7XG5cdFx0aWYoIG9iamVjdC5oYXNPd25Qcm9wZXJ0eSggbmFtZSApICkge1xuXHRcdFx0aWYoIGFjdGlvbiggbmFtZSwgb2JqZWN0WyBuYW1lIF0gKSA9PT0gZmFsc2UgKSBicmVhaztcblx0XHR9XG5cdH1cbn1cblxuY2xhc3MgTyB7XG5cblx0c3RhdGljIGV4dGVuZDxUIGV4dGVuZHMgT2JqZWN0LCBXIGV4dGVuZHMgT2JqZWN0PiggdGFyZ2V0OlQsIHNvdXJjZTpXLCBjb25maWc6eyBhcnJheXM/OmJvb2xlYW4sIG9iamVjdHM/OmJvb2xlYW4gfSA9IHthcnJheXM6IGZhbHNlLCBvYmplY3RzOiBmYWxzZX0sIGlnbm9yZTp7WyBrZXk6c3RyaW5nIF06Ym9vbGVhbn0gPSB7fSApOlQgJiBXIHtcblx0XHRpZiggISBpc0FycmF5KCBzb3VyY2UgKSAmJiAhIGlzUGxhaW5PYmplY3QoIHNvdXJjZSApIHx8ICEgaXNBcnJheSggdGFyZ2V0ICkgJiYgISBpc1BsYWluT2JqZWN0KCB0YXJnZXQgKSApIHJldHVybiBudWxsO1xuXG5cdFx0bGV0IGNsb25lOlQgJiBXID0gPGFueT4gdGFyZ2V0O1xuXHRcdCg8YW55PiBzb3VyY2UpLl9fQ2FyYm9uU0RLX2NpcmN1bGFyUmVmZXJlbmNlRmxhZyA9IGNsb25lO1xuXG5cdFx0Zm9yKCBsZXQga2V5IG9mIE9iamVjdC5rZXlzKCBzb3VyY2UgKSApIHtcblx0XHRcdGlmKCBpc0Z1bmN0aW9uKCBzb3VyY2VbIGtleSBdICkgfHwga2V5ID09PSBcIl9fQ2FyYm9uU0RLX2NpcmN1bGFyUmVmZXJlbmNlRmxhZ1wiICkgY29udGludWU7XG5cdFx0XHRpZigga2V5IGluIGlnbm9yZSApIGNvbnRpbnVlO1xuXG5cdFx0XHRsZXQgcHJvcGVydHk6YW55ID0gc291cmNlWyBrZXkgXTtcblx0XHRcdGlmKCBpc0FycmF5KCBwcm9wZXJ0eSApICYmIGNvbmZpZy5hcnJheXMgfHxcblx0XHRcdFx0aXNQbGFpbk9iamVjdCggcHJvcGVydHkgKSAmJiBjb25maWcub2JqZWN0cyApIHtcblxuXHRcdFx0XHRwcm9wZXJ0eSA9IHByb3BlcnR5Ll9fQ2FyYm9uU0RLX2NpcmN1bGFyUmVmZXJlbmNlRmxhZyB8fCBPLmNsb25lKCBwcm9wZXJ0eSwgY29uZmlnICk7XG5cdFx0XHR9XG5cblx0XHRcdGNsb25lWyBrZXkgXSA9IHByb3BlcnR5O1xuXHRcdH1cblxuXHRcdGRlbGV0ZSAoPGFueT4gc291cmNlKS5fX0NhcmJvblNES19jaXJjdWxhclJlZmVyZW5jZUZsYWc7XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9XG5cblx0c3RhdGljIGNsb25lPFQgZXh0ZW5kcyBPYmplY3Q+KCBvYmplY3Q6VCwgY29uZmlnOnsgYXJyYXlzPzpib29sZWFuLCBvYmplY3RzPzpib29sZWFuIH0gPSB7YXJyYXlzOiBmYWxzZSwgb2JqZWN0czogZmFsc2V9LCBpZ25vcmU6e1sga2V5OnN0cmluZyBdOmJvb2xlYW59ID0ge30gKTpUIHtcblx0XHRsZXQgaXNBbkFycmF5OmJvb2xlYW4gPSBpc0FycmF5KCBvYmplY3QgKTtcblx0XHRpZiggISBpc0FuQXJyYXkgJiYgISBpc1BsYWluT2JqZWN0KCBvYmplY3QgKSApIHJldHVybiBudWxsO1xuXG5cdFx0bGV0IGNsb25lOlQgPSA8VD4gKCBpc0FuQXJyYXkgPyBbXSA6IE9iamVjdC5jcmVhdGUoIE9iamVjdC5nZXRQcm90b3R5cGVPZiggb2JqZWN0ICkgKSApO1xuXHRcdHJldHVybiBPLmV4dGVuZDxULCBUPiggY2xvbmUsIG9iamVjdCwgY29uZmlnLCBpZ25vcmUgKTtcblx0fVxuXG5cdHN0YXRpYyBhcmVFcXVhbCggb2JqZWN0MTpPYmplY3QsIG9iamVjdDI6T2JqZWN0LCBjb25maWc6eyBhcnJheXM/OmJvb2xlYW4sIG9iamVjdHM/OmJvb2xlYW4gfSA9IHthcnJheXM6IGZhbHNlLCBvYmplY3RzOiBmYWxzZX0sIGlnbm9yZTp7WyBrZXk6c3RyaW5nIF06Ym9vbGVhbn0gPSB7fSApOmJvb2xlYW4ge1xuXHRcdHJldHVybiBpbnRlcm5hbEFyZUVxdWFsKCBvYmplY3QxLCBvYmplY3QyLCBjb25maWcsIFsgb2JqZWN0MSBdLCBbIG9iamVjdDIgXSwgaWdub3JlICk7XG5cdH1cblxuXHRzdGF0aWMgYXJlU2hhbGxvd2x5RXF1YWwoIG9iamVjdDE6T2JqZWN0LCBvYmplY3QyOk9iamVjdCApOmJvb2xlYW4ge1xuXHRcdGlmKCBvYmplY3QxID09PSBvYmplY3QyICkgcmV0dXJuIHRydWU7XG5cdFx0aWYoICEgaXNPYmplY3QoIG9iamVjdDEgKSB8fCAhIGlzT2JqZWN0KCBvYmplY3QyICkgKSByZXR1cm4gZmFsc2U7XG5cblx0XHRsZXQgcHJvcGVydGllczpzdHJpbmdbXSA9IFtdO1xuXHRcdGZvciggbGV0IHByb3BlcnR5TmFtZSBpbiBvYmplY3QxICkge1xuXHRcdFx0aWYoICEgb2JqZWN0MS5oYXNPd25Qcm9wZXJ0eSggcHJvcGVydHlOYW1lICkgKSBjb250aW51ZTtcblx0XHRcdGlmKCBpc0Z1bmN0aW9uKCBvYmplY3QxWyBwcm9wZXJ0eU5hbWUgXSApICkgY29udGludWU7XG5cdFx0XHRpZiggISAoIHByb3BlcnR5TmFtZSBpbiBvYmplY3QyICkgKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRpZiggb2JqZWN0MVsgcHJvcGVydHlOYW1lIF0gIT09IG9iamVjdDJbIHByb3BlcnR5TmFtZSBdICkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0cHJvcGVydGllcy5wdXNoKCBwcm9wZXJ0eU5hbWUgKTtcblx0XHR9XG5cblx0XHRmb3IoIGxldCBwcm9wZXJ0eU5hbWUgaW4gb2JqZWN0MiApIHtcblx0XHRcdGlmKCAhIG9iamVjdDIuaGFzT3duUHJvcGVydHkoIHByb3BlcnR5TmFtZSApICkgY29udGludWU7XG5cdFx0XHRpZiggaXNGdW5jdGlvbiggb2JqZWN0MlsgcHJvcGVydHlOYW1lIF0gKSApIGNvbnRpbnVlO1xuXHRcdFx0aWYoICEgKCBwcm9wZXJ0eU5hbWUgaW4gb2JqZWN0MSApICkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0aWYoIHByb3BlcnRpZXMuaW5kZXhPZiggcHJvcGVydHlOYW1lICkgPT09IC0gMSApIHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBpbnRlcm5hbEFyZUVxdWFsKCBvYmplY3QxOk9iamVjdCwgb2JqZWN0MjpPYmplY3QsIGNvbmZpZzp7IGFycmF5cz86Ym9vbGVhbiwgb2JqZWN0cz86Ym9vbGVhbiB9LCBzdGFjazE6YW55W10sIHN0YWNrMjphbnlbXSwgaWdub3JlOntbIGtleTpzdHJpbmcgXTpib29sZWFufSA9IHt9ICk6Ym9vbGVhbiB7XG5cdGlmKCBvYmplY3QxID09PSBvYmplY3QyICkgcmV0dXJuIHRydWU7XG5cdGlmKCAhIGlzT2JqZWN0KCBvYmplY3QxICkgfHwgISBpc09iamVjdCggb2JqZWN0MiApICkgcmV0dXJuIGZhbHNlO1xuXG5cdGlmKCBpc0RhdGUoIG9iamVjdDEgKSApIHJldHVybiAoPERhdGU+IG9iamVjdDEpLmdldFRpbWUoKSA9PT0gKDxEYXRlPiBvYmplY3QyKS5nZXRUaW1lKCk7XG5cblx0bGV0IGtleXM6c3RyaW5nW10gPSBBLmpvaW5XaXRob3V0RHVwbGljYXRlcyggT2JqZWN0LmtleXMoIG9iamVjdDEgKSwgT2JqZWN0LmtleXMoIG9iamVjdDIgKSApO1xuXHRmb3IoIGxldCBrZXkgb2Yga2V5cyApIHtcblx0XHRpZiggISAoIGtleSBpbiBvYmplY3QxICkgfHwgISAoIGtleSBpbiBvYmplY3QyICkgKSByZXR1cm4gZmFsc2U7XG5cdFx0aWYoIHR5cGVvZiBvYmplY3QxICE9PSB0eXBlb2Ygb2JqZWN0MiApIHJldHVybiBmYWxzZTtcblx0XHRpZigga2V5IGluIGlnbm9yZSApIGNvbnRpbnVlO1xuXG5cdFx0aWYoIGlzRnVuY3Rpb24oIG9iamVjdDFbIGtleSBdICkgKSBjb250aW51ZTtcblxuXHRcdGxldCBmaXJzdElzUGxhaW5PYmplY3Q6Ym9vbGVhbiA9IGlzUGxhaW5PYmplY3QoIG9iamVjdDFbIGtleSBdICk7XG5cdFx0aWYoIGlzQXJyYXkoIG9iamVjdDFbIGtleSBdICkgJiYgY29uZmlnLmFycmF5cyB8fFxuXHRcdFx0Zmlyc3RJc1BsYWluT2JqZWN0ICYmIGNvbmZpZy5vYmplY3RzIHx8XG5cdFx0XHRpc0RhdGUoIG9iamVjdDFbIGtleSBdICkgKSB7XG5cblx0XHRcdGlmKCBmaXJzdElzUGxhaW5PYmplY3QgKSB7XG5cdFx0XHRcdGxldCBsZW5ndGhTdGFjazpudW1iZXIgPSBzdGFjazEubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSggbGVuZ3RoU3RhY2sgLS0gKSB7XG5cdFx0XHRcdFx0aWYoIHN0YWNrMVsgbGVuZ3RoU3RhY2sgXSA9PT0gb2JqZWN0MVsga2V5IF0gKSByZXR1cm4gc3RhY2syWyBsZW5ndGhTdGFjayBdID09PSBvYmplY3QyWyBrZXkgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN0YWNrMS5wdXNoKCBvYmplY3QxWyBrZXkgXSApO1xuXHRcdFx0XHRzdGFjazIucHVzaCggb2JqZWN0Mlsga2V5IF0gKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoICEgaW50ZXJuYWxBcmVFcXVhbCggb2JqZWN0MVsga2V5IF0sIG9iamVjdDJbIGtleSBdLCBjb25maWcsIHN0YWNrMSwgc3RhY2syICkgKSByZXR1cm4gZmFsc2U7XG5cblx0XHRcdGlmKCBmaXJzdElzUGxhaW5PYmplY3QgKSB7XG5cdFx0XHRcdHN0YWNrMS5wb3AoKTtcblx0XHRcdFx0c3RhY2syLnBvcCgpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiggb2JqZWN0MVsga2V5IF0gIT09IG9iamVjdDJbIGtleSBdICkgcmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0cnVlO1xufVxuXG5jbGFzcyBTIHtcblx0c3RhdGljIHN0YXJ0c1dpdGgoIHN0cjpzdHJpbmcsIHN1YnN0cmluZzpzdHJpbmcgKTpib29sZWFuIHtcblx0XHRyZXR1cm4gc3RyLmxhc3RJbmRleE9mKCBzdWJzdHJpbmcsIDAgKSA9PT0gMDtcblx0fVxuXG5cdHN0YXRpYyBlbmRzV2l0aCggc3RyOnN0cmluZywgc3Vic3RyaW5nOnN0cmluZyApOmJvb2xlYW4ge1xuXHRcdHJldHVybiBzdHIuaW5kZXhPZiggc3Vic3RyaW5nLCBzdHIubGVuZ3RoIC0gc3Vic3RyaW5nLmxlbmd0aCApICE9PSAtIDE7XG5cdH1cblxuXHRzdGF0aWMgY29udGFpbnMoIHN0cjpzdHJpbmcsIHN1YnN0cmluZzpzdHJpbmcgKTpib29sZWFuIHtcblx0XHRyZXR1cm4gc3RyLmluZGV4T2YoIHN1YnN0cmluZyApICE9PSAtIDE7XG5cdH1cbn1cblxuY2xhc3MgQSB7XG5cdHN0YXRpYyBmcm9tPFQ+KCBpdGVyYXRvcjpJdGVyYXRvcjxUPiApOkFycmF5PFQ+IHtcblx0XHRsZXQgYXJyYXk6QXJyYXk8VD4gPSBbXTtcblx0XHRsZXQgbmV4dDpJdGVyYXRvclJlc3VsdDxUPiA9IGl0ZXJhdG9yLm5leHQoKTtcblx0XHR3aGlsZSggISBuZXh0LmRvbmUgKSB7XG5cdFx0XHRhcnJheS5wdXNoKCBuZXh0LnZhbHVlICk7XG5cdFx0XHRuZXh0ID0gaXRlcmF0b3IubmV4dCgpO1xuXHRcdH1cblx0XHRyZXR1cm4gYXJyYXk7XG5cdH1cblxuXHRzdGF0aWMgam9pbldpdGhvdXREdXBsaWNhdGVzPFQ+KCAuLi5hcnJheXM6QXJyYXk8QXJyYXk8VD4+ICk6QXJyYXk8VD4ge1xuXHRcdGxldCByZXN1bHQ6QXJyYXk8VD4gPSBhcnJheXNbIDAgXS5zbGljZSgpO1xuXG5cdFx0Zm9yKCBsZXQgaTpudW1iZXIgPSAxLCBsZW5ndGg6bnVtYmVyID0gYXJyYXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArKyApIHtcblx0XHRcdHJlc3VsdCA9IHJlc3VsdC5jb25jYXQoIGFycmF5c1sgaSBdLmZpbHRlciggZnVuY3Rpb24oIGl0ZW06VCApOmJvb2xlYW4ge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0LmluZGV4T2YoIGl0ZW0gKSA8IDA7XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0c3RhdGljIGluZGV4T2Y8VCwgVz4oIGFycmF5OkFycmF5PFQ+LCBzZWFyY2hlZEVsZW1lbnQ6VywgY29tcGFyYXRvcjooIGVsZW1lbnQ6VCwgc2VhcmNoZWRFbGVtZW50OlcgKSA9PiBib29sZWFuID0gKCBhOlQsIGI6VyApID0+IDxhbnk+IGEgPT09IDxhbnk+IGIgKTpudW1iZXIge1xuXHRcdGZvciggbGV0IGk6bnVtYmVyID0gMCwgbGVuZ3RoOm51bWJlciA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbmd0aDsgKysgaSApIHtcblx0XHRcdGlmKCBjb21wYXJhdG9yKCBhcnJheVsgaSBdLCBzZWFyY2hlZEVsZW1lbnQgKSApIHJldHVybiBpO1xuXHRcdH1cblx0XHRyZXR1cm4gLSAxO1xuXHR9XG59XG5cbmNsYXNzIE0ge1xuXHRzdGF0aWMgZnJvbTxWPiggb2JqZWN0Ok9iamVjdCApOk1hcDxzdHJpbmcsIFY+IHtcblx0XHRsZXQgbWFwOk1hcDxzdHJpbmcsIFY+ID0gbmV3IE1hcDxzdHJpbmcsIFY+KCk7XG5cdFx0Zm9yRWFjaE93blByb3BlcnR5KCBvYmplY3QsICggbmFtZTpzdHJpbmcsIHZhbHVlOmFueSApID0+IHtcblx0XHRcdG1hcC5zZXQoIG5hbWUsIHZhbHVlICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiBtYXA7XG5cdH1cblxuXHRzdGF0aWMgZXh0ZW5kPEssIFY+KCB0b0V4dGVuZDpNYXA8SywgVj4sIC4uLmV4dGVuZGVyczpNYXA8SywgVj5bXSApOk1hcDxLLCBWPiB7XG5cdFx0Zm9yKCBsZXQgaTpudW1iZXIgPSAwLCBsZW5ndGg6bnVtYmVyID0gZXh0ZW5kZXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArKyApIHtcblx0XHRcdGxldCBleHRlbmRlcjpNYXA8SywgVj4gPSBleHRlbmRlcnNbIGkgXTtcblx0XHRcdGxldCB2YWx1ZXM6SXRlcmF0b3I8QXJyYXk8KEt8Vik+PiA9IGV4dGVuZGVyLmVudHJpZXMoKTtcblxuXHRcdFx0bGV0IG5leHQ6SXRlcmF0b3JSZXN1bHQ8QXJyYXk8KEt8Vik+PiA9IHZhbHVlcy5uZXh0KCk7XG5cdFx0XHR3aGlsZSggISBuZXh0LmRvbmUgKSB7XG5cdFx0XHRcdGxldCBlbnRyeTpBcnJheTwoS3xWKT4gPSBuZXh0LnZhbHVlO1xuXHRcdFx0XHRsZXQga2V5OksgPSA8Sz4gZW50cnlbIDAgXTtcblx0XHRcdFx0bGV0IHZhbHVlOlYgPSA8Vj4gZW50cnlbIDEgXTtcblx0XHRcdFx0aWYoICEgdG9FeHRlbmQuaGFzKCBrZXkgKSApIHRvRXh0ZW5kLnNldCgga2V5LCB2YWx1ZSApO1xuXG5cdFx0XHRcdG5leHQgPSB2YWx1ZXMubmV4dCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdG9FeHRlbmQ7XG5cdH1cbn1cblxuY2xhc3MgVVVJRCB7XG5cdHByaXZhdGUgc3RhdGljIHJlZ0V4cDpSZWdFeHAgPSAvXlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLTVdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9JC9pO1xuXG5cdHB1YmxpYyBzdGF0aWMgaXMoIHV1aWQ6c3RyaW5nICk6Ym9vbGVhbiB7XG5cdFx0cmV0dXJuIFVVSUQucmVnRXhwLnRlc3QoIHV1aWQgKTtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgZ2VuZXJhdGUoKTpzdHJpbmcge1xuXHRcdHJldHVybiBcInh4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eFwiLnJlcGxhY2UoIC9beHldL2csIGZ1bmN0aW9uKCBjOnN0cmluZyApOnN0cmluZyB7XG5cdFx0XHRsZXQgcjpudW1iZXIgPSBNYXRoLnJhbmRvbSgpICogMTYgfCAwO1xuXHRcdFx0bGV0IHY6bnVtYmVyID0gYyA9PT0gXCJ4XCIgPyByIDogKHIgJiAweDMgfCAweDgpO1xuXHRcdFx0cmV0dXJuIHYudG9TdHJpbmcoIDE2ICk7XG5cdFx0fSApO1xuXHR9XG59XG5cbmV4cG9ydCB7XG5cdGhhc0Z1bmN0aW9uLFxuXHRoYXNQcm9wZXJ0eSxcblx0aGFzUHJvcGVydHlEZWZpbmVkLFxuXHRpc0RlZmluZWQsXG5cdGlzTnVsbCxcblx0aXNBcnJheSxcblx0aXNTdHJpbmcsXG5cdGlzQm9vbGVhbixcblx0aXNOdW1iZXIsXG5cdGlzSW50ZWdlcixcblx0aXNEb3VibGUsXG5cdGlzRGF0ZSxcblx0aXNPYmplY3QsXG5cdGlzUGxhaW5PYmplY3QsXG5cdGlzRnVuY3Rpb24sXG5cdGlzTWFwLFxuXHRwYXJzZUJvb2xlYW4sXG5cdGV4dGVuZCxcblx0Zm9yRWFjaE93blByb3BlcnR5LFxuXHRPLFxuXHRTLFxuXHRBLFxuXHRNLFxuXHRVVUlEXG59O1xuIiwiaW1wb3J0IEFic3RyYWN0Q29udGV4dCBmcm9tIFwiLi9BYnN0cmFjdENvbnRleHRcIjtcbmltcG9ydCAqIGFzIEFjY2Vzc1BvaW50IGZyb20gXCIuL0FjY2Vzc1BvaW50XCI7XG5pbXBvcnQgKiBhcyBBUElEZXNjcmlwdGlvbiBmcm9tIFwiLi9BUElEZXNjcmlwdGlvblwiO1xuaW1wb3J0ICogYXMgQXBwIGZyb20gXCIuL0FwcFwiO1xuaW1wb3J0ICogYXMgQXBwcyBmcm9tIFwiLi9BcHBzXCI7XG5pbXBvcnQgKiBhcyBBdXRoIGZyb20gXCIuL0F1dGhcIjtcbmltcG9ydCAqIGFzIERvY3VtZW50IGZyb20gXCIuL0RvY3VtZW50XCI7XG5pbXBvcnQgRG9jdW1lbnRzIGZyb20gXCIuL0RvY3VtZW50c1wiO1xuaW1wb3J0ICogYXMgRXJyb3JzIGZyb20gXCIuL0Vycm9yc1wiO1xuaW1wb3J0ICogYXMgRnJhZ21lbnQgZnJvbSBcIi4vRnJhZ21lbnRcIjtcbmltcG9ydCAqIGFzIEhUVFAgZnJvbSBcIi4vSFRUUFwiO1xuaW1wb3J0ICogYXMgSlNPTkxEIGZyb20gXCIuL0pTT05MRFwiO1xuaW1wb3J0ICogYXMgTERQIGZyb20gXCIuL0xEUFwiO1xuaW1wb3J0ICogYXMgTmFtZWRGcmFnbWVudCBmcm9tIFwiLi9OYW1lZEZyYWdtZW50XCI7XG5pbXBvcnQgKiBhcyBOUyBmcm9tIFwiLi9OU1wiO1xuaW1wb3J0ICogYXMgT2JqZWN0U2NoZW1hIGZyb20gXCIuL09iamVjdFNjaGVtYVwiO1xuaW1wb3J0ICogYXMgUGVyc2lzdGVkQXBwIGZyb20gXCIuL1BlcnNpc3RlZEFwcFwiO1xuaW1wb3J0ICogYXMgUGVyc2lzdGVkRG9jdW1lbnQgZnJvbSBcIi4vUGVyc2lzdGVkRG9jdW1lbnRcIjtcbmltcG9ydCAqIGFzIFBlcnNpc3RlZEZyYWdtZW50IGZyb20gXCIuL1BlcnNpc3RlZEZyYWdtZW50XCI7XG5pbXBvcnQgKiBhcyBQZXJzaXN0ZWROYW1lZEZyYWdtZW50IGZyb20gXCIuL1BlcnNpc3RlZE5hbWVkRnJhZ21lbnRcIjtcbmltcG9ydCAqIGFzIFBlcnNpc3RlZFJlc291cmNlIGZyb20gXCIuL1BlcnNpc3RlZFJlc291cmNlXCI7XG5pbXBvcnQgKiBhcyBQbGF0Zm9ybSBmcm9tIFwiLi9QbGF0Zm9ybVwiO1xuaW1wb3J0ICogYXMgUG9pbnRlciBmcm9tIFwiLi9Qb2ludGVyXCI7XG5pbXBvcnQgKiBhcyBSREYgZnJvbSBcIi4vUkRGXCI7XG5pbXBvcnQgKiBhcyBSZXNvdXJjZSBmcm9tIFwiLi9SZXNvdXJjZVwiO1xuaW1wb3J0ICogYXMgU0RLQ29udGV4dCBmcm9tIFwiLi9TREtDb250ZXh0XCI7XG5pbXBvcnQgKiBhcyBTZXR0aW5ncyBmcm9tIFwiLi9TZXR0aW5nc1wiO1xuaW1wb3J0ICogYXMgU1BBUlFMIGZyb20gXCIuL1NQQVJRTFwiO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vVXRpbHNcIjtcblxuY2xhc3MgQ2FyYm9uIGV4dGVuZHMgQWJzdHJhY3RDb250ZXh0IHtcblxuXHQvKiB0c2xpbnQ6ZGlzYWJsZTogdmFyaWFibGUtbmFtZSAqL1xuXHRzdGF0aWMgQWNjZXNzUG9pbnQ6dHlwZW9mIEFjY2Vzc1BvaW50ID0gQWNjZXNzUG9pbnQ7XG5cdHN0YXRpYyBBcHA6dHlwZW9mIEFwcCA9IEFwcDtcblx0c3RhdGljIEFwcHM6dHlwZW9mIEFwcHMgPSBBcHBzO1xuXHRzdGF0aWMgQXV0aDp0eXBlb2YgQXV0aCA9IEF1dGg7XG5cdHN0YXRpYyBEb2N1bWVudDp0eXBlb2YgRG9jdW1lbnQgPSBEb2N1bWVudDtcblx0c3RhdGljIERvY3VtZW50czp0eXBlb2YgRG9jdW1lbnRzID0gRG9jdW1lbnRzO1xuXHRzdGF0aWMgRXJyb3JzOnR5cGVvZiBFcnJvcnMgPSBFcnJvcnM7XG5cdHN0YXRpYyBGcmFnbWVudDp0eXBlb2YgRnJhZ21lbnQgPSBGcmFnbWVudDtcblx0c3RhdGljIEhUVFA6dHlwZW9mIEhUVFAgPSBIVFRQO1xuXHRzdGF0aWMgSlNPTkxEOnR5cGVvZiBKU09OTEQgPSBKU09OTEQ7XG5cdHN0YXRpYyBMRFA6dHlwZW9mIExEUCA9IExEUDtcblx0c3RhdGljIE5hbWVkRnJhZ21lbnQ6dHlwZW9mIE5hbWVkRnJhZ21lbnQgPSBOYW1lZEZyYWdtZW50O1xuXHRzdGF0aWMgTlM6dHlwZW9mIE5TID0gTlM7XG5cdHN0YXRpYyBPYmplY3RTY2hlbWE6dHlwZW9mIE9iamVjdFNjaGVtYSA9IE9iamVjdFNjaGVtYTtcblx0c3RhdGljIFBlcnNpc3RlZEFwcDp0eXBlb2YgUGVyc2lzdGVkQXBwID0gUGVyc2lzdGVkQXBwO1xuXHRzdGF0aWMgUGVyc2lzdGVkRG9jdW1lbnQ6dHlwZW9mIFBlcnNpc3RlZERvY3VtZW50ID0gUGVyc2lzdGVkRG9jdW1lbnQ7XG5cdHN0YXRpYyBQZXJzaXN0ZWRGcmFnbWVudDp0eXBlb2YgUGVyc2lzdGVkRnJhZ21lbnQgPSBQZXJzaXN0ZWRGcmFnbWVudDtcblx0c3RhdGljIFBlcnNpc3RlZE5hbWVkRnJhZ21lbnQ6dHlwZW9mIFBlcnNpc3RlZE5hbWVkRnJhZ21lbnQgPSBQZXJzaXN0ZWROYW1lZEZyYWdtZW50O1xuXHRzdGF0aWMgUGVyc2lzdGVkUmVzb3VyY2U6dHlwZW9mIFBlcnNpc3RlZFJlc291cmNlID0gUGVyc2lzdGVkUmVzb3VyY2U7XG5cdHN0YXRpYyBQbGF0Zm9ybTp0eXBlb2YgUGxhdGZvcm0gPSBQbGF0Zm9ybTtcblx0c3RhdGljIFBvaW50ZXI6dHlwZW9mIFBvaW50ZXIgPSBQb2ludGVyO1xuXHRzdGF0aWMgUkRGOnR5cGVvZiBSREYgPSBSREY7XG5cdHN0YXRpYyBSZXNvdXJjZTp0eXBlb2YgUmVzb3VyY2UgPSBSZXNvdXJjZTtcblx0c3RhdGljIFNES0NvbnRleHQ6dHlwZW9mIFNES0NvbnRleHQgPSBTREtDb250ZXh0O1xuXHRzdGF0aWMgU2V0dGluZ3M6dHlwZW9mIFNldHRpbmdzID0gU2V0dGluZ3M7XG5cdHN0YXRpYyBTUEFSUUw6dHlwZW9mIFNQQVJRTCA9IFNQQVJRTDtcblx0c3RhdGljIFV0aWxzOnR5cGVvZiBVdGlscyA9IFV0aWxzO1xuXHQvKiB0c2xpbnQ6ZW5hYmxlOiB2YXJpYWJsZS1uYW1lICovXG5cblx0c3RhdGljIGdldCB2ZXJzaW9uKCk6c3RyaW5nIHsgcmV0dXJuIFwiMC4zOC4wXCI7IH1cblxuXHRhcHBzOkFwcHMuQ2xhc3M7XG5cblx0Z2V0IHZlcnNpb24oKTpzdHJpbmcgeyByZXR1cm4gQ2FyYm9uLnZlcnNpb247IH1cblxuXHRjb25zdHJ1Y3Rvciggc2V0dGluZ3M/OlNldHRpbmdzLkNsYXNzICkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5hdXRoID0gbmV3IFBsYXRmb3JtLkF1dGguQ2xhc3MoIHRoaXMgKTtcblxuXHRcdHNldHRpbmdzID0gc2V0dGluZ3MgPyBVdGlscy5leHRlbmQoIHt9LCBTZXR0aW5ncy5kZWZhdWx0U2V0dGluZ3MsIHNldHRpbmdzICkgOiBTZXR0aW5ncy5kZWZhdWx0U2V0dGluZ3M7XG5cblx0XHRVdGlscy5NLmV4dGVuZCggdGhpcy5zZXR0aW5ncywgVXRpbHMuTS5mcm9tKCBzZXR0aW5ncyApICk7XG5cblx0XHR0aGlzLmFwcHMgPSBuZXcgQXBwcy5DbGFzcyggdGhpcyApO1xuXHR9XG5cblx0cmVzb2x2ZSggdXJpOnN0cmluZyApOnN0cmluZyB7XG5cdFx0aWYoIFJERi5VUkkuVXRpbC5pc0Fic29sdXRlKCB1cmkgKSApIHJldHVybiB1cmk7XG5cblx0XHRsZXQgZmluYWxVUkk6c3RyaW5nID0gdGhpcy5zZXR0aW5ncy5nZXQoIFwiaHR0cC5zc2xcIiApID8gXCJodHRwczovL1wiIDogXCJodHRwOi8vXCI7XG5cdFx0ZmluYWxVUkkgKz0gdGhpcy5zZXR0aW5ncy5nZXQoIFwiZG9tYWluXCIgKSArIFwiL1wiICsgdGhpcy5nZXRTZXR0aW5nKCBcInBsYXRmb3JtLmNvbnRhaW5lclwiICk7XG5cdFx0cmV0dXJuIFJERi5VUkkuVXRpbC5yZXNvbHZlKCBmaW5hbFVSSSwgdXJpICk7XG5cdH1cblxuXHRnZXRBUElEZXNjcmlwdGlvbigpOlByb21pc2U8QVBJRGVzY3JpcHRpb24uQ2xhc3M+IHtcblx0XHRyZXR1cm4gdGhpcy5kb2N1bWVudHMuZ2V0KCBcImFwaS9cIiApLnRoZW4oXG5cdFx0XHQoIFsgZGVzY3JpcHRpb24sIHJlc3BvbnNlIF06WyBEb2N1bWVudC5DbGFzcywgSFRUUC5SZXNwb25zZS5DbGFzcyBdICkgPT4ge1xuXHRcdFx0XHRyZXR1cm4gPGFueT4gZGVzY3JpcHRpb247XG5cdFx0XHR9XG5cdFx0KTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBDYXJib247XG4iLCJpbXBvcnQgQ2FyYm9uIGZyb20gXCJzcmMvQ2FyYm9uXCI7XG5cbndpbmRvdy5DYXJib24gPSBDYXJib247Il19