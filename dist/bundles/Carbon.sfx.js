!function(e){function r(e,r,t){e in l||(l[e]={name:e,declarative:!0,deps:r,declare:t,normalizedDeps:r})}function t(e){return p[e]||(p[e]={name:e,dependencies:[],exports:{},importers:[]})}function n(r){if(!r.module){var o=r.module=t(r.name),a=r.module.exports,u=r.declare.call(e,function(e,r){if(o.locked=!0,"object"==typeof e)for(var t in e)a[t]=e[t];else a[e]=r;for(var n=0,u=o.importers.length;u>n;n++){var i=o.importers[n];if(!i.locked)for(var l=0;l<i.dependencies.length;++l)i.dependencies[l]===o&&i.setters[l](a)}return o.locked=!1,r},r.name);o.setters=u.setters,o.execute=u.execute;for(var s=0,d=r.normalizedDeps.length;d>s;s++){var f,c=r.normalizedDeps[s],v=l[c],m=p[c];m?f=m.exports:v&&!v.declarative?f=v.esModule:v?(n(v),m=v.module,f=m.exports):f=i(c),m&&m.importers?(m.importers.push(o),o.dependencies.push(m)):o.dependencies.push(null),o.setters[s]&&o.setters[s](f)}}}function o(r){var t={};if(("object"==typeof r||"function"==typeof r)&&r!==e)if(d)for(var n in r)"default"!==n&&a(t,r,n);else{var o=r&&r.hasOwnProperty;for(var n in r)"default"===n||o&&!r.hasOwnProperty(n)||(t[n]=r[n])}return t["default"]=r,c(t,"__useDefault",{value:!0}),t}function a(e,r,t){try{var n;(n=Object.getOwnPropertyDescriptor(r,t))&&c(e,t,n)}catch(o){return e[t]=r[t],!1}}function u(r,t){var n=l[r];if(n&&!n.evaluated&&n.declarative){t.push(r);for(var o=0,a=n.normalizedDeps.length;a>o;o++){var d=n.normalizedDeps[o];-1==s.call(t,d)&&(l[d]?u(d,t):i(d))}n.evaluated||(n.evaluated=!0,n.module.execute.call(e))}}function i(e){if(m[e])return m[e];if("@node/"==e.substr(0,6))return v(e.substr(6));var r=l[e];if(!r)throw"Module "+e+" not present.";return n(l[e]),u(e,[]),l[e]=void 0,r.declarative&&c(r.module.exports,"__esModule",{value:!0}),m[e]=r.declarative?r.module.exports:r.esModule}var l={},s=Array.prototype.indexOf||function(e){for(var r=0,t=this.length;t>r;r++)if(this[r]===e)return r;return-1},d=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(f){d=!1}var c;!function(){try{Object.defineProperty({},"a",{})&&(c=Object.defineProperty)}catch(e){c=function(e,r,t){try{e[r]=t.value||t.get.call(e)}catch(n){}}}}();var p={},v="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&require.resolve&&"undefined"!=typeof process&&require,m={"@empty":{}};return function(e,t,n,a){return function(u){u(function(u){for(var l=0;l<t.length;l++)(function(e,r){r&&r.__esModule?m[e]=r:m[e]=o(r)})(t[l],arguments[l]);a({register:r});var s=i(e[0]);if(e.length>1)for(var l=1;l<e.length;l++)i(e[l]);return n?s["default"]:s})}}}("undefined"!=typeof self?self:global)

(["1"], [], false, function($__System) {
var require = this.require, exports = this.exports, module = this.module;
$__System.register("2", ["3", "4", "5", "6", "7", "8", "9", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var App,
      Context_1,
      Errors,
      NS,
      PersistedApp,
      Pointer,
      RDF,
      Utils;
  var Class;
  return {
    setters: [function(App_1) {
      App = App_1;
    }, function(Context_1_1) {
      Context_1 = Context_1_1;
    }, function(Errors_1) {
      Errors = Errors_1;
    }, function(NS_1) {
      NS = NS_1;
    }, function(PersistedApp_1) {
      PersistedApp = PersistedApp_1;
    }, function(Pointer_1) {
      Pointer = Pointer_1;
    }, function(RDF_1) {
      RDF = RDF_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      Class = (function() {
        function Class(context) {
          this.context = context;
        }
        Class.prototype.getContext = function(pointerOrURI) {
          var _this = this;
          var pointer = !Utils.isString(pointerOrURI) ? pointerOrURI : null;
          var uri = !!pointer ? pointer.id : pointerOrURI;
          if (!uri)
            return Promise.reject(new Errors.IllegalArgumentError("The application's URI must be defined."));
          return this.resolveURI(uri).then(function(appURI) {
            pointer = _this.context.documents.getPointer(appURI);
            return pointer.resolve();
          }).then(function(_a) {
            var app = _a[0],
                response = _a[1];
            if (!PersistedApp.Factory.is(app))
              throw new Errors.IllegalArgumentError("The resource fetched is not a cs:Application.");
            return new Context_1.default(_this.context, app);
          });
        };
        Class.prototype.getAllContexts = function() {
          var _this = this;
          return this.resolveURI("").then(function(appsContainerURI) {
            if (!_this.context.auth || !_this.context.auth.isAuthenticated())
              return _this.context.documents.getMembers(_this.getContainerURI(), false);
            var agentID = _this.context.auth.authenticatedAgent.id;
            return _this.context.documents.executeSELECTQuery(agentID, "\n\t\t\t\tSELECT ?app WHERE {\n\t\t\t\t\t<" + agentID + "> <" + NS.C.Predicate.appRoleMap + "> ?roleMap.\n\t\t\t\t\t?roleMap <" + NS.C.Predicate.entry + "> ?appEntry.\n\t\t\t\t\t?appEntry <" + NS.C.Predicate.key + "> ?app.\n\t\t\t\t}\n\t\t\t").then(function(_a) {
              var results = _a[0],
                  response = _a[1];
              var apps = results.bindings.map(function(binding) {
                return binding["app"];
              });
              return Pointer.Util.resolveAll(apps);
            });
          }).then(function(_a) {
            var apps = _a[0],
                response = _a[1];
            return apps.map(function(app) {
              return new Context_1.default(_this.context, app);
            });
          });
        };
        Class.prototype.create = function(appDocument, slug) {
          var _this = this;
          if (slug === void 0) {
            slug = null;
          }
          return this.resolveURI("").then(function(appsContainerURI) {
            if (!App.Factory.is(appDocument))
              throw new Errors.IllegalArgumentError("The Document is not a `Carbon.App.Class` object.");
            return _this.context.documents.createChild(appsContainerURI, appDocument, slug);
          });
        };
        Class.prototype.delete = function(appURI, requestOptions) {
          var _this = this;
          if (!appURI)
            return Promise.reject(new Errors.IllegalArgumentError("The application's URI must be defined."));
          return this.resolveURI(appURI).then(function(uri) {
            return _this.context.documents.delete(uri, requestOptions);
          });
        };
        Class.prototype.resolveURI = function(appURI) {
          var _this = this;
          return new Promise(function(resolve) {
            var containerURI = _this.context.resolve(_this.getContainerURI());
            var uri = RDF.URI.Util.resolve(containerURI, appURI);
            if (!RDF.URI.Util.isBaseOf(containerURI, uri))
              throw new Errors.IllegalArgumentError("The URI provided is not a valid app of the current context.");
            resolve(uri);
          });
        };
        Class.prototype.getContainerURI = function() {
          if (!this.context.hasSetting("platform.apps.container"))
            throw new Errors.IllegalStateError("The apps container URI hasn't been set.");
          return this.context.getSetting("platform.apps.container");
        };
        return Class;
      }());
      exports_1("Class", Class);
      exports_1("default", Class);
    }
  };
});

$__System.register("b", ["c"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var SDKContext;
  var AbstractContext;
  return {
    setters: [function(SDKContext_1) {
      SDKContext = SDKContext_1;
    }],
    execute: function() {
      AbstractContext = (function(_super) {
        __extends(AbstractContext, _super);
        function AbstractContext(parentContext) {
          if (parentContext === void 0) {
            parentContext = null;
          }
          _super.call(this);
          this._parentContext = !!parentContext ? parentContext : SDKContext.instance;
          this.generalObjectSchema = null;
          this.typeObjectSchemaMap = new Map();
        }
        Object.defineProperty(AbstractContext.prototype, "parentContext", {
          get: function() {
            return this._parentContext;
          },
          enumerable: true,
          configurable: true
        });
        ;
        return AbstractContext;
      }(SDKContext.Class));
      exports_1("default", AbstractContext);
    }
  };
});

$__System.register("d", ["e"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Agents;
  var Class;
  return {
    setters: [function(Agents_1) {
      Agents = Agents_1;
    }],
    execute: function() {
      Class = (function(_super) {
        __extends(Class, _super);
        function Class(appContext) {
          _super.call(this, appContext);
        }
        Class.prototype.get = function(agentURI, requestOptions) {
          return _super.prototype.get.call(this, agentURI, requestOptions);
        };
        return Class;
      }(Agents.Class));
      exports_1("Class", Class);
      exports_1("default", Class);
    }
  };
});

$__System.register("f", ["4", "10", "5", "11", "12"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Context_1,
      AppRole,
      Errors,
      PersistedAppRole,
      Roles_1;
  var Class;
  return {
    setters: [function(Context_1_1) {
      Context_1 = Context_1_1;
    }, function(AppRole_1) {
      AppRole = AppRole_1;
    }, function(Errors_1) {
      Errors = Errors_1;
    }, function(PersistedAppRole_1) {
      PersistedAppRole = PersistedAppRole_1;
    }, function(Roles_1_1) {
      Roles_1 = Roles_1_1;
    }],
    execute: function() {
      Class = (function(_super) {
        __extends(Class, _super);
        function Class(appContext) {
          if (!(appContext instanceof Context_1.default))
            throw new Errors.NotImplementedError("The context provided is not a AppContext.");
          _super.call(this, appContext);
        }
        Class.prototype.createChild = function(parentRole, role, slugOrRequestOptions, requestOptions) {
          if (!AppRole.Factory.is(role))
            return Promise.reject(new Errors.IllegalArgumentError("The role is not a valid `Carbon.App.Role.Class` object."));
          return _super.prototype.createChild.call(this, parentRole, role, slugOrRequestOptions, requestOptions);
        };
        Class.prototype.get = function(roleURI, requestOptions) {
          return _super.prototype.get.call(this, roleURI, requestOptions).then(function(_a) {
            var role = _a[0],
                response = _a[1];
            if (!PersistedAppRole.Factory.is(role))
              throw new Errors.IllegalArgumentError("The resource fetched is not a cs:AppRole");
            return [role, response];
          });
        };
        return Class;
      }(Roles_1.default));
      exports_1("Class", Class);
      exports_1("default", Class);
    }
  };
});

$__System.register("13", ["d", "f", "14"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Agents_1,
      Roles_1,
      Auth_1;
  var Class;
  return {
    setters: [function(Agents_1_1) {
      Agents_1 = Agents_1_1;
    }, function(Roles_1_1) {
      Roles_1 = Roles_1_1;
    }, function(Auth_1_1) {
      Auth_1 = Auth_1_1;
    }],
    execute: function() {
      Class = (function(_super) {
        __extends(Class, _super);
        function Class(appContext) {
          _super.call(this, appContext);
          this.roles = new Roles_1.default(appContext);
          this.agents = new Agents_1.default(appContext);
        }
        return Class;
      }(Auth_1.default));
      exports_1("Class", Class);
      exports_1("default", Class);
    }
  };
});

$__System.register("4", ["b", "13", "9"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AbstractContext_1,
      Auth_1,
      RDF;
  var Class;
  return {
    setters: [function(AbstractContext_1_1) {
      AbstractContext_1 = AbstractContext_1_1;
    }, function(Auth_1_1) {
      Auth_1 = Auth_1_1;
    }, function(RDF_1) {
      RDF = RDF_1;
    }],
    execute: function() {
      Class = (function(_super) {
        __extends(Class, _super);
        function Class(parentContext, app) {
          _super.call(this, parentContext);
          this.auth = new Auth_1.default(this);
          this._app = app;
          this.base = this.getBase(this.app);
          app.rootContainer = this.documents.getPointer(app.rootContainer.id);
        }
        Object.defineProperty(Class.prototype, "app", {
          get: function() {
            return this._app;
          },
          enumerable: true,
          configurable: true
        });
        ;
        Class.prototype.resolve = function(uri) {
          if (RDF.URI.Util.isAbsolute(uri))
            return uri;
          var finalURI = this.parentContext.resolve(this.base);
          return RDF.URI.Util.resolve(finalURI, uri);
        };
        Class.prototype.getBase = function(resource) {
          return resource.rootContainer.id;
        };
        return Class;
      }(AbstractContext_1.default));
      exports_1("Class", Class);
      exports_1("default", Class);
    }
  };
});

$__System.register("3", ["15", "6", "a", "16", "11", "10", "f", "4"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Document,
      NS,
      Utils,
      IllegalArgumentError_1,
      PersistedRole,
      Role,
      Roles,
      Context_1;
  var RDF_CLASS,
      SCHEMA,
      Factory;
  return {
    setters: [function(Document_1) {
      Document = Document_1;
    }, function(NS_1) {
      NS = NS_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }, function(IllegalArgumentError_1_1) {
      IllegalArgumentError_1 = IllegalArgumentError_1_1;
    }, function(PersistedRole_1) {
      PersistedRole = PersistedRole_1;
    }, function(Role_1) {
      Role = Role_1;
    }, function(Roles_1) {
      Roles = Roles_1;
    }, function(Context_1_1) {
      Context_1 = Context_1_1;
    }],
    execute: function() {
      exports_1("RDF_CLASS", RDF_CLASS = NS.CS.Class.Application);
      exports_1("SCHEMA", SCHEMA = {
        "name": {
          "@id": NS.CS.Predicate.namae,
          "@type": NS.XSD.DataType.string
        },
        "description": {
          "@id": NS.CS.Predicate.description,
          "@type": NS.XSD.DataType.string
        },
        "rootContainer": {
          "@id": NS.CS.Predicate.rootContainer,
          "@type": "@id"
        },
        "allowsOrigins": {
          "@id": NS.CS.Predicate.allowsOrigin,
          "@container": "@set"
        }
      });
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(resource) {
          return Utils.hasPropertyDefined(resource, "name");
        };
        Factory.is = function(object) {
          return Document.Factory.hasClassProperties(object) && Factory.hasClassProperties(object) && object.types.indexOf(NS.CS.Class.Application) !== -1;
        };
        Factory.create = function(name, description) {
          return Factory.createFrom({}, name, description);
        };
        Factory.createFrom = function(object, name, description) {
          if (!Document.Factory.hasClassProperties(object))
            object = Document.Factory.createFrom(object);
          if (!Utils.isString(name) || !name)
            throw new IllegalArgumentError_1.default("The name cannot be empty.");
          var app = object;
          app.name = name;
          app.types.push(NS.CS.Class.Application);
          if (!!description)
            app.description = description;
          return app;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
      exports_1("Context", Context_1.default);
      exports_1("PersistedRole", PersistedRole);
      exports_1("Role", Role);
      exports_1("Roles", Roles);
    }
  };
});

$__System.register("7", ["3", "17", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var App,
      PersistedDocument,
      Utils;
  var Factory;
  return {
    setters: [function(App_1) {
      App = App_1;
    }, function(PersistedDocument_1) {
      PersistedDocument = PersistedDocument_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(resource) {
          return Utils.hasPropertyDefined(resource, "rootContainer");
        };
        Factory.is = function(object) {
          return App.Factory.is(object) && PersistedDocument.Factory.hasClassProperties(object) && Factory.hasClassProperties(object);
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("18", ["e"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Agents;
  var Class;
  return {
    setters: [function(Agents_1) {
      Agents = Agents_1;
    }],
    execute: function() {
      Class = (function(_super) {
        __extends(Class, _super);
        function Class(appContext) {
          _super.call(this, appContext);
        }
        Class.prototype.get = function(agentURI, requestOptions) {
          return _super.prototype.get.call(this, agentURI, requestOptions);
        };
        return Class;
      }(Agents.Class));
      exports_1("Class", Class);
      exports_1("default", Class);
    }
  };
});

$__System.register("19", ["18", "14", "5"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Agents,
      Auth,
      Errors;
  var Class;
  return {
    setters: [function(Agents_1) {
      Agents = Agents_1;
    }, function(Auth_1) {
      Auth = Auth_1;
    }, function(Errors_1) {
      Errors = Errors_1;
    }],
    execute: function() {
      Class = (function(_super) {
        __extends(Class, _super);
        function Class(platformContext) {
          _super.call(this, platformContext);
          this.agents = new Agents.Class(platformContext);
        }
        Object.defineProperty(Class.prototype, "roles", {
          get: function() {
            throw new Errors.NotImplementedError("Currently there is no support for Platform Roles");
          },
          set: function(role) {},
          enumerable: true,
          configurable: true
        });
        return Class;
      }(Auth.Class));
      exports_1("Class", Class);
      exports_1("default", Class);
    }
  };
});

$__System.register("1a", ["19"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Auth;
  return {
    setters: [function(Auth_1) {
      Auth = Auth_1;
    }],
    execute: function() {
      exports_1("Auth", Auth);
    }
  };
});

$__System.register("1b", ["14"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Auth;
  var defaultSettings;
  return {
    setters: [function(Auth_1) {
      Auth = Auth_1;
    }],
    execute: function() {
      exports_1("defaultSettings", defaultSettings = {
        "domain": "carbonldp.com",
        "http.ssl": true,
        "auth.method": Auth.Method.TOKEN,
        "platform.container": "platform/",
        "platform.apps.container": "apps/",
        "platform.agents.container": "agents/",
        "platform.roles.container": "roles/",
        "vocabulary": "vocabulary/#"
      });
      exports_1("default", defaultSettings);
    }
  };
});

$__System.register("1c", ["a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Utils;
  var ValueTypes,
      Factory;
  return {
    setters: [function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      ValueTypes = (function() {
        function ValueTypes() {}
        Object.defineProperty(ValueTypes, "URI", {
          get: function() {
            return "uri";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ValueTypes, "LITERAL", {
          get: function() {
            return "literal";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ValueTypes, "BNODE", {
          get: function() {
            return "bnode";
          },
          enumerable: true,
          configurable: true
        });
        return ValueTypes;
      }());
      exports_1("ValueTypes", ValueTypes);
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(value) {
          return (Utils.hasPropertyDefined(value, "head"));
        };
        Factory.is = function(value) {
          return (Utils.isObject(value) && Factory.hasClassProperties(value));
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("1d", ["a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Utils;
  var Factory;
  return {
    setters: [function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      Factory = (function() {
        function Factory() {}
        Factory.is = function(value) {
          return Utils.hasPropertyDefined(value, "@list");
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("1e", [], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  return {
    setters: [],
    execute: function() {}
  };
});

$__System.register("1f", ["5", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Errors,
      Utils;
  var DateSerializer,
      dateSerializer,
      DateTimeSerializer,
      dateTimeSerializer,
      TimeSerializer,
      timeSerializer,
      IntegerSerializer,
      integerSerializer,
      UnsignedIntegerSerializer,
      unsignedIntegerSerializer,
      FloatSerializer,
      floatSerializer,
      BooleanSerializer,
      booleanSerializer,
      StringSerializer,
      stringSerializer;
  function pad(value) {
    var paddedValue = String(value);
    if (paddedValue.length === 1)
      paddedValue = "0" + paddedValue;
    return paddedValue;
  }
  return {
    setters: [function(Errors_1) {
      Errors = Errors_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      DateSerializer = (function() {
        function DateSerializer() {}
        DateSerializer.prototype.serialize = function(value) {
          if (!Utils.isDate(value))
            throw new Errors.IllegalArgumentError("The value is not a Date object.");
          return value.getUTCFullYear() + "-" + pad((value.getUTCMonth() + 1)) + "-" + pad(value.getUTCDate());
        };
        return DateSerializer;
      }());
      exports_1("DateSerializer", DateSerializer);
      exports_1("dateSerializer", dateSerializer = new DateSerializer());
      DateTimeSerializer = (function() {
        function DateTimeSerializer() {}
        DateTimeSerializer.prototype.serialize = function(value) {
          if (!Utils.isDate(value))
            throw new Errors.IllegalArgumentError("The value is not a Date object.");
          return value.toISOString();
        };
        return DateTimeSerializer;
      }());
      exports_1("DateTimeSerializer", DateTimeSerializer);
      exports_1("dateTimeSerializer", dateTimeSerializer = new DateTimeSerializer());
      TimeSerializer = (function() {
        function TimeSerializer() {}
        TimeSerializer.prototype.serialize = function(value) {
          if (!Utils.isDate(value))
            throw new Errors.IllegalArgumentError("The value is not a Date object.");
          return pad(value.getUTCHours()) + ":" + pad(value.getUTCMinutes()) + ":" + pad(value.getUTCSeconds()) + "." + String((value.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5) + "Z";
        };
        return TimeSerializer;
      }());
      exports_1("TimeSerializer", TimeSerializer);
      exports_1("timeSerializer", timeSerializer = new TimeSerializer());
      IntegerSerializer = (function() {
        function IntegerSerializer() {}
        IntegerSerializer.prototype.serialize = function(value) {
          if (!Utils.isNumber(value))
            throw new Errors.IllegalArgumentError("The value is not a number.");
          return (~~value).toString();
        };
        return IntegerSerializer;
      }());
      exports_1("IntegerSerializer", IntegerSerializer);
      exports_1("integerSerializer", integerSerializer = new IntegerSerializer());
      UnsignedIntegerSerializer = (function(_super) {
        __extends(UnsignedIntegerSerializer, _super);
        function UnsignedIntegerSerializer() {
          _super.apply(this, arguments);
        }
        UnsignedIntegerSerializer.prototype.serialize = function(value) {
          var stringValue = _super.prototype.serialize.call(this, value);
          stringValue = Utils.S.startsWith(stringValue, "-") ? stringValue.substring(1) : stringValue;
          return stringValue;
        };
        return UnsignedIntegerSerializer;
      }(IntegerSerializer));
      exports_1("UnsignedIntegerSerializer", UnsignedIntegerSerializer);
      exports_1("unsignedIntegerSerializer", unsignedIntegerSerializer = new UnsignedIntegerSerializer());
      FloatSerializer = (function() {
        function FloatSerializer() {}
        FloatSerializer.prototype.serialize = function(value) {
          if (!Utils.isNumber(value))
            throw new Errors.IllegalArgumentError("The value is not a number.");
          if (value === Number.POSITIVE_INFINITY)
            return "INF";
          if (value === Number.NEGATIVE_INFINITY)
            return "-INF";
          return value.toString();
        };
        return FloatSerializer;
      }());
      exports_1("FloatSerializer", FloatSerializer);
      exports_1("floatSerializer", floatSerializer = new FloatSerializer());
      BooleanSerializer = (function() {
        function BooleanSerializer() {}
        BooleanSerializer.prototype.serialize = function(value) {
          return (!!value).toString();
        };
        return BooleanSerializer;
      }());
      exports_1("BooleanSerializer", BooleanSerializer);
      exports_1("booleanSerializer", booleanSerializer = new BooleanSerializer());
      StringSerializer = (function() {
        function StringSerializer() {}
        StringSerializer.prototype.serialize = function(value) {
          return String(value);
        };
        return StringSerializer;
      }());
      exports_1("StringSerializer", StringSerializer);
      exports_1("stringSerializer", stringSerializer = new StringSerializer());
    }
  };
});

$__System.register("20", ["1f"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var XSD;
  return {
    setters: [function(XSD_1) {
      XSD = XSD_1;
    }],
    execute: function() {
      exports_1("XSD", XSD);
    }
  };
});

$__System.register("21", ["a", "22", "5", "1e", "20"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Utils,
      XSD,
      Errors,
      Serializer_1,
      Serializers;
  var Factory;
  return {
    setters: [function(Utils_1) {
      Utils = Utils_1;
    }, function(XSD_1) {
      XSD = XSD_1;
    }, function(Errors_1) {
      Errors = Errors_1;
    }, function(Serializer_1_1) {
      Serializer_1 = Serializer_1_1;
    }, function(Serializers_1) {
      Serializers = Serializers_1;
    }],
    execute: function() {
      Factory = (function() {
        function Factory() {}
        Factory.from = function(value) {
          if (Utils.isNull(value))
            throw new Errors.IllegalArgumentError("Null cannot be converted into a Literal");
          if (!Utils.isDefined(value))
            throw new Errors.IllegalArgumentError("The value is undefined");
          var type;
          switch (true) {
            case Utils.isDate(value):
              type = XSD.DataType.dateTime;
              value = value.toISOString();
              break;
            case Utils.isNumber(value):
              if (Utils.isInteger(value)) {
                type = XSD.DataType.integer;
              } else {
                type = XSD.DataType.double;
              }
              break;
            case Utils.isString(value):
              type = XSD.DataType.string;
              break;
            case Utils.isBoolean(value):
              type = XSD.DataType.boolean;
              break;
            default:
              type = XSD.DataType.object;
              value = JSON.stringify(value);
              break;
          }
          var literal = {"@value": value.toString()};
          if (type)
            literal["@type"] = type;
          return literal;
        };
        Factory.parse = function(literalValueOrLiteral, literalDataType) {
          if (literalDataType === void 0) {
            literalDataType = null;
          }
          var literalValue;
          if (Utils.isString(literalValueOrLiteral)) {
            literalValue = literalValueOrLiteral;
          } else {
            var literal = literalValueOrLiteral;
            if (!literal)
              return null;
            if (!Utils.hasProperty(literal, "@value"))
              return null;
            literalDataType = "@type" in literal ? literal["@type"] : null;
            literalValue = literal["@value"];
          }
          if (literalDataType === null)
            return literalValue;
          if (!Utils.hasProperty(XSD.DataType, literalDataType))
            return literalValue;
          var value;
          var parts;
          switch (literalDataType) {
            case XSD.DataType.date:
            case XSD.DataType.dateTime:
              value = new Date(literalValue);
              break;
            case XSD.DataType.time:
              parts = literalValue.match(/(\d+):(\d+):(\d+)\.(\d+)Z/);
              value = new Date();
              value.setUTCHours(parseFloat(parts[1]), parseFloat(parts[2]), parseFloat(parts[3]), parseFloat(parts[4]));
              break;
            case XSD.DataType.duration:
              break;
            case XSD.DataType.gDay:
            case XSD.DataType.gMonth:
            case XSD.DataType.gMonthDay:
            case XSD.DataType.gYear:
            case XSD.DataType.gYearMonth:
              break;
            case XSD.DataType.byte:
            case XSD.DataType.decimal:
            case XSD.DataType.int:
            case XSD.DataType.integer:
            case XSD.DataType.long:
            case XSD.DataType.negativeInteger:
            case XSD.DataType.nonNegativeInteger:
            case XSD.DataType.nonPositiveInteger:
            case XSD.DataType.positiveInteger:
            case XSD.DataType.short:
            case XSD.DataType.unsignedLong:
            case XSD.DataType.unsignedInt:
            case XSD.DataType.unsignedShort:
            case XSD.DataType.unsignedByte:
            case XSD.DataType.double:
            case XSD.DataType.float:
              value = parseFloat(literalValue);
              break;
            case XSD.DataType.boolean:
              value = Utils.parseBoolean(literalValue);
              break;
            case XSD.DataType.string:
              value = literalValue;
              break;
            case XSD.DataType.object:
              value = JSON.parse(literalValue);
              break;
            default:
              break;
          }
          return value;
        };
        Factory.is = function(value) {
          return Utils.hasProperty(value, "@value") && Utils.isString(value["@value"]);
        };
        Factory.hasType = function(value, type) {
          if (!value["@type"] && type === XSD.DataType.string)
            return true;
          return value["@type"] === type;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
      exports_1("Serializer", Serializer_1.default);
      exports_1("Serializers", Serializers);
    }
  };
});

$__System.register("23", [], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  return {
    setters: [],
    execute: function() {}
  };
});

$__System.register("24", ["25"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HTTPError_1;
  var name,
      statusCode,
      BadRequestError;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }],
    execute: function() {
      name = "BadRequestError";
      statusCode = 400;
      BadRequestError = (function(_super) {
        __extends(BadRequestError, _super);
        function BadRequestError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(BadRequestError, "statusCode", {
          get: function() {
            return statusCode;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(BadRequestError.prototype, "name", {
          get: function() {
            return name;
          },
          enumerable: true,
          configurable: true
        });
        return BadRequestError;
      }(HTTPError_1.default));
      exports_1("default", BadRequestError);
    }
  };
});

$__System.register("26", ["25"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HTTPError_1;
  var name,
      statusCode,
      ConflictError;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }],
    execute: function() {
      name = "ConflictError";
      statusCode = 409;
      ConflictError = (function(_super) {
        __extends(ConflictError, _super);
        function ConflictError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(ConflictError, "statusCode", {
          get: function() {
            return statusCode;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ConflictError.prototype, "name", {
          get: function() {
            return name;
          },
          enumerable: true,
          configurable: true
        });
        return ConflictError;
      }(HTTPError_1.default));
      exports_1("default", ConflictError);
    }
  };
});

$__System.register("27", ["25"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HTTPError_1;
  var name,
      statusCode,
      ForbiddenError;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }],
    execute: function() {
      name = "ForbiddenError";
      statusCode = 403;
      ForbiddenError = (function(_super) {
        __extends(ForbiddenError, _super);
        function ForbiddenError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(ForbiddenError, "statusCode", {
          get: function() {
            return statusCode;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ForbiddenError.prototype, "name", {
          get: function() {
            return name;
          },
          enumerable: true,
          configurable: true
        });
        return ForbiddenError;
      }(HTTPError_1.default));
      exports_1("default", ForbiddenError);
    }
  };
});

$__System.register("28", ["25"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HTTPError_1;
  var name,
      statusCode,
      MethodNotAllowedError;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }],
    execute: function() {
      name = "MethodNotAllowedError";
      statusCode = 405;
      MethodNotAllowedError = (function(_super) {
        __extends(MethodNotAllowedError, _super);
        function MethodNotAllowedError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(MethodNotAllowedError, "statusCode", {
          get: function() {
            return statusCode;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(MethodNotAllowedError.prototype, "name", {
          get: function() {
            return name;
          },
          enumerable: true,
          configurable: true
        });
        return MethodNotAllowedError;
      }(HTTPError_1.default));
      exports_1("default", MethodNotAllowedError);
    }
  };
});

$__System.register("29", ["25"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HTTPError_1;
  var name,
      statusCode,
      NotAcceptableError;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }],
    execute: function() {
      name = "NotAcceptableError";
      statusCode = 406;
      NotAcceptableError = (function(_super) {
        __extends(NotAcceptableError, _super);
        function NotAcceptableError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(NotAcceptableError, "statusCode", {
          get: function() {
            return statusCode;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NotAcceptableError.prototype, "name", {
          get: function() {
            return name;
          },
          enumerable: true,
          configurable: true
        });
        return NotAcceptableError;
      }(HTTPError_1.default));
      exports_1("default", NotAcceptableError);
    }
  };
});

$__System.register("2a", ["25"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HTTPError_1;
  var name,
      statusCode,
      NotFoundError;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }],
    execute: function() {
      name = "NotFoundError";
      statusCode = 404;
      NotFoundError = (function(_super) {
        __extends(NotFoundError, _super);
        function NotFoundError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(NotFoundError, "statusCode", {
          get: function() {
            return statusCode;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NotFoundError.prototype, "name", {
          get: function() {
            return name;
          },
          enumerable: true,
          configurable: true
        });
        return NotFoundError;
      }(HTTPError_1.default));
      exports_1("default", NotFoundError);
    }
  };
});

$__System.register("2b", ["25"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HTTPError_1;
  var name,
      statusCode,
      PreconditionFailedError;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }],
    execute: function() {
      name = "PreconditionFailedError";
      statusCode = 412;
      PreconditionFailedError = (function(_super) {
        __extends(PreconditionFailedError, _super);
        function PreconditionFailedError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(PreconditionFailedError, "statusCode", {
          get: function() {
            return statusCode;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(PreconditionFailedError.prototype, "name", {
          get: function() {
            return name;
          },
          enumerable: true,
          configurable: true
        });
        return PreconditionFailedError;
      }(HTTPError_1.default));
      exports_1("default", PreconditionFailedError);
    }
  };
});

$__System.register("2c", ["25"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HTTPError_1;
  var name,
      statusCode,
      PreconditionRequiredError;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }],
    execute: function() {
      name = "PreconditionRequiredError";
      statusCode = 428;
      PreconditionRequiredError = (function(_super) {
        __extends(PreconditionRequiredError, _super);
        function PreconditionRequiredError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(PreconditionRequiredError, "statusCode", {
          get: function() {
            return statusCode;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(PreconditionRequiredError.prototype, "name", {
          get: function() {
            return name;
          },
          enumerable: true,
          configurable: true
        });
        return PreconditionRequiredError;
      }(HTTPError_1.default));
      exports_1("default", PreconditionRequiredError);
    }
  };
});

$__System.register("2d", ["25"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HTTPError_1;
  var name,
      statusCode,
      RequestEntityTooLargeError;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }],
    execute: function() {
      name = "RequestEntityTooLargeError";
      statusCode = 413;
      RequestEntityTooLargeError = (function(_super) {
        __extends(RequestEntityTooLargeError, _super);
        function RequestEntityTooLargeError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(RequestEntityTooLargeError, "statusCode", {
          get: function() {
            return statusCode;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RequestEntityTooLargeError.prototype, "name", {
          get: function() {
            return name;
          },
          enumerable: true,
          configurable: true
        });
        return RequestEntityTooLargeError;
      }(HTTPError_1.default));
      exports_1("default", RequestEntityTooLargeError);
    }
  };
});

$__System.register("2e", ["25"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HTTPError_1;
  var name,
      statusCode,
      RequestHeaderFieldsTooLargeError;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }],
    execute: function() {
      name = "RequestHeaderFieldsTooLargeError";
      statusCode = 431;
      RequestHeaderFieldsTooLargeError = (function(_super) {
        __extends(RequestHeaderFieldsTooLargeError, _super);
        function RequestHeaderFieldsTooLargeError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(RequestHeaderFieldsTooLargeError, "statusCode", {
          get: function() {
            return statusCode;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RequestHeaderFieldsTooLargeError.prototype, "name", {
          get: function() {
            return name;
          },
          enumerable: true,
          configurable: true
        });
        return RequestHeaderFieldsTooLargeError;
      }(HTTPError_1.default));
      exports_1("default", RequestHeaderFieldsTooLargeError);
    }
  };
});

$__System.register("2f", ["25"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HTTPError_1;
  var name,
      statusCode,
      RequestURITooLongError;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }],
    execute: function() {
      name = "RequestURITooLongError";
      statusCode = 414;
      RequestURITooLongError = (function(_super) {
        __extends(RequestURITooLongError, _super);
        function RequestURITooLongError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(RequestURITooLongError, "statusCode", {
          get: function() {
            return statusCode;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RequestURITooLongError.prototype, "name", {
          get: function() {
            return name;
          },
          enumerable: true,
          configurable: true
        });
        return RequestURITooLongError;
      }(HTTPError_1.default));
      exports_1("default", RequestURITooLongError);
    }
  };
});

$__System.register("30", ["25"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HTTPError_1;
  var name,
      statusCode,
      TooManyRequestsError;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }],
    execute: function() {
      name = "TooManyRequestsError";
      statusCode = 429;
      TooManyRequestsError = (function(_super) {
        __extends(TooManyRequestsError, _super);
        function TooManyRequestsError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(TooManyRequestsError, "statusCode", {
          get: function() {
            return statusCode;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(TooManyRequestsError.prototype, "name", {
          get: function() {
            return name;
          },
          enumerable: true,
          configurable: true
        });
        return TooManyRequestsError;
      }(HTTPError_1.default));
      exports_1("default", TooManyRequestsError);
    }
  };
});

$__System.register("31", ["25"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HTTPError_1;
  var name,
      statusCode,
      UnauthorizedError;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }],
    execute: function() {
      name = "UnauthorizedError";
      statusCode = 401;
      UnauthorizedError = (function(_super) {
        __extends(UnauthorizedError, _super);
        function UnauthorizedError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(UnauthorizedError, "statusCode", {
          get: function() {
            return statusCode;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(UnauthorizedError.prototype, "name", {
          get: function() {
            return name;
          },
          enumerable: true,
          configurable: true
        });
        return UnauthorizedError;
      }(HTTPError_1.default));
      exports_1("default", UnauthorizedError);
    }
  };
});

$__System.register("32", ["25"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HTTPError_1;
  var name,
      statusCode,
      UnsupportedMediaTypeError;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }],
    execute: function() {
      name = "UnsupportedMediaTypeError";
      statusCode = 415;
      UnsupportedMediaTypeError = (function(_super) {
        __extends(UnsupportedMediaTypeError, _super);
        function UnsupportedMediaTypeError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(UnsupportedMediaTypeError, "statusCode", {
          get: function() {
            return statusCode;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(UnsupportedMediaTypeError.prototype, "name", {
          get: function() {
            return name;
          },
          enumerable: true,
          configurable: true
        });
        return UnsupportedMediaTypeError;
      }(HTTPError_1.default));
      exports_1("default", UnsupportedMediaTypeError);
    }
  };
});

$__System.register("33", ["25"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HTTPError_1;
  var name,
      statusCode,
      Class;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }],
    execute: function() {
      name = "BadResponseError";
      statusCode = 0;
      Class = (function(_super) {
        __extends(Class, _super);
        function Class() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(Class, "statusCode", {
          get: function() {
            return statusCode;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class.prototype, "name", {
          get: function() {
            return name;
          },
          enumerable: true,
          configurable: true
        });
        return Class;
      }(HTTPError_1.default));
      exports_1("default", Class);
    }
  };
});

$__System.register("34", ["25"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HTTPError_1;
  var name,
      statusCode,
      BadGatewayError;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }],
    execute: function() {
      name = "BadGatewayError";
      statusCode = 502;
      BadGatewayError = (function(_super) {
        __extends(BadGatewayError, _super);
        function BadGatewayError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(BadGatewayError, "statusCode", {
          get: function() {
            return statusCode;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(BadGatewayError.prototype, "name", {
          get: function() {
            return name;
          },
          enumerable: true,
          configurable: true
        });
        return BadGatewayError;
      }(HTTPError_1.default));
      exports_1("default", BadGatewayError);
    }
  };
});

$__System.register("35", ["25"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HTTPError_1;
  var name,
      statusCode,
      GatewayTimeoutError;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }],
    execute: function() {
      name = "GatewayTimeoutError";
      statusCode = 504;
      GatewayTimeoutError = (function(_super) {
        __extends(GatewayTimeoutError, _super);
        function GatewayTimeoutError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(GatewayTimeoutError, "statusCode", {
          get: function() {
            return statusCode;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(GatewayTimeoutError.prototype, "name", {
          get: function() {
            return name;
          },
          enumerable: true,
          configurable: true
        });
        return GatewayTimeoutError;
      }(HTTPError_1.default));
      exports_1("default", GatewayTimeoutError);
    }
  };
});

$__System.register("36", ["25"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HTTPError_1;
  var name,
      statusCode,
      HTTPVersionNotSupportedError;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }],
    execute: function() {
      name = "HTTPVersionNotSupportedError";
      statusCode = 505;
      HTTPVersionNotSupportedError = (function(_super) {
        __extends(HTTPVersionNotSupportedError, _super);
        function HTTPVersionNotSupportedError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(HTTPVersionNotSupportedError, "statusCode", {
          get: function() {
            return statusCode;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(HTTPVersionNotSupportedError.prototype, "name", {
          get: function() {
            return name;
          },
          enumerable: true,
          configurable: true
        });
        return HTTPVersionNotSupportedError;
      }(HTTPError_1.default));
      exports_1("default", HTTPVersionNotSupportedError);
    }
  };
});

$__System.register("37", ["25"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HTTPError_1;
  var name,
      statusCode,
      InternalServerErrorError;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }],
    execute: function() {
      name = "InternalServerErrorError";
      statusCode = 500;
      InternalServerErrorError = (function(_super) {
        __extends(InternalServerErrorError, _super);
        function InternalServerErrorError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(InternalServerErrorError, "statusCode", {
          get: function() {
            return statusCode;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(InternalServerErrorError.prototype, "name", {
          get: function() {
            return name;
          },
          enumerable: true,
          configurable: true
        });
        return InternalServerErrorError;
      }(HTTPError_1.default));
      exports_1("default", InternalServerErrorError);
    }
  };
});

$__System.register("38", ["25"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HTTPError_1;
  var name,
      statusCode,
      NotImplementedError;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }],
    execute: function() {
      name = "NotImplementedError";
      statusCode = 501;
      NotImplementedError = (function(_super) {
        __extends(NotImplementedError, _super);
        function NotImplementedError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(NotImplementedError, "statusCode", {
          get: function() {
            return statusCode;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NotImplementedError.prototype, "name", {
          get: function() {
            return name;
          },
          enumerable: true,
          configurable: true
        });
        return NotImplementedError;
      }(HTTPError_1.default));
      exports_1("default", NotImplementedError);
    }
  };
});

$__System.register("39", ["25"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HTTPError_1;
  var name,
      statusCode,
      ServiceUnavailableError;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }],
    execute: function() {
      name = "ServiceUnavailableError";
      statusCode = 503;
      ServiceUnavailableError = (function(_super) {
        __extends(ServiceUnavailableError, _super);
        function ServiceUnavailableError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(ServiceUnavailableError, "statusCode", {
          get: function() {
            return statusCode;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ServiceUnavailableError.prototype, "name", {
          get: function() {
            return name;
          },
          enumerable: true,
          configurable: true
        });
        return ServiceUnavailableError;
      }(HTTPError_1.default));
      exports_1("default", ServiceUnavailableError);
    }
  };
});

$__System.register("25", ["3a", "3b"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AbstractError_1,
      Resource;
  var HTTPError;
  return {
    setters: [function(AbstractError_1_1) {
      AbstractError_1 = AbstractError_1_1;
    }, function(Resource_1) {
      Resource = Resource_1;
    }],
    execute: function() {
      HTTPError = (function(_super) {
        __extends(HTTPError, _super);
        function HTTPError(message, response) {
          _super.call(this, message);
          Resource.Factory.createFrom(this);
          this.errors = [];
          this.requestID = null;
          this.response = response;
          this.statusCode = response.status;
        }
        Object.defineProperty(HTTPError, "statusCode", {
          get: function() {
            return null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(HTTPError.prototype, "name", {
          get: function() {
            return "HTTPError";
          },
          enumerable: true,
          configurable: true
        });
        return HTTPError;
      }(AbstractError_1.default));
      exports_1("default", HTTPError);
    }
  };
});

$__System.register("3c", ["25"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HTTPError_1;
  var name,
      UnknownError;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }],
    execute: function() {
      name = "UnknownError";
      UnknownError = (function(_super) {
        __extends(UnknownError, _super);
        function UnknownError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(UnknownError.prototype, "name", {
          get: function() {
            return name;
          },
          enumerable: true,
          configurable: true
        });
        return UnknownError;
      }(HTTPError_1.default));
      exports_1("default", UnknownError);
    }
  };
});

$__System.register("3d", ["25", "24", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3c"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var HTTPError_1,
      BadRequestError_1,
      ConflictError_1,
      ForbiddenError_1,
      MethodNotAllowedError_1,
      NotAcceptableError_1,
      NotFoundError_1,
      PreconditionFailedError_1,
      PreconditionRequiredError_1,
      RequestEntityTooLargeError_1,
      RequestHeaderFieldsTooLargeError_1,
      RequestURITooLongError_1,
      TooManyRequestsError_1,
      UnauthorizedError_1,
      UnsupportedMediaTypeError_1,
      BadResponseError_1,
      BadGatewayError_1,
      GatewayTimeoutError_1,
      HTTPVersionNotSupportedError_1,
      InternalServerErrorError_1,
      NotImplementedError_1,
      ServiceUnavailableError_1,
      UnknownError_1;
  var client,
      server,
      statusCodeMap;
  return {
    setters: [function(HTTPError_1_1) {
      HTTPError_1 = HTTPError_1_1;
    }, function(BadRequestError_1_1) {
      BadRequestError_1 = BadRequestError_1_1;
    }, function(ConflictError_1_1) {
      ConflictError_1 = ConflictError_1_1;
    }, function(ForbiddenError_1_1) {
      ForbiddenError_1 = ForbiddenError_1_1;
    }, function(MethodNotAllowedError_1_1) {
      MethodNotAllowedError_1 = MethodNotAllowedError_1_1;
    }, function(NotAcceptableError_1_1) {
      NotAcceptableError_1 = NotAcceptableError_1_1;
    }, function(NotFoundError_1_1) {
      NotFoundError_1 = NotFoundError_1_1;
    }, function(PreconditionFailedError_1_1) {
      PreconditionFailedError_1 = PreconditionFailedError_1_1;
    }, function(PreconditionRequiredError_1_1) {
      PreconditionRequiredError_1 = PreconditionRequiredError_1_1;
    }, function(RequestEntityTooLargeError_1_1) {
      RequestEntityTooLargeError_1 = RequestEntityTooLargeError_1_1;
    }, function(RequestHeaderFieldsTooLargeError_1_1) {
      RequestHeaderFieldsTooLargeError_1 = RequestHeaderFieldsTooLargeError_1_1;
    }, function(RequestURITooLongError_1_1) {
      RequestURITooLongError_1 = RequestURITooLongError_1_1;
    }, function(TooManyRequestsError_1_1) {
      TooManyRequestsError_1 = TooManyRequestsError_1_1;
    }, function(UnauthorizedError_1_1) {
      UnauthorizedError_1 = UnauthorizedError_1_1;
    }, function(UnsupportedMediaTypeError_1_1) {
      UnsupportedMediaTypeError_1 = UnsupportedMediaTypeError_1_1;
    }, function(BadResponseError_1_1) {
      BadResponseError_1 = BadResponseError_1_1;
    }, function(BadGatewayError_1_1) {
      BadGatewayError_1 = BadGatewayError_1_1;
    }, function(GatewayTimeoutError_1_1) {
      GatewayTimeoutError_1 = GatewayTimeoutError_1_1;
    }, function(HTTPVersionNotSupportedError_1_1) {
      HTTPVersionNotSupportedError_1 = HTTPVersionNotSupportedError_1_1;
    }, function(InternalServerErrorError_1_1) {
      InternalServerErrorError_1 = InternalServerErrorError_1_1;
    }, function(NotImplementedError_1_1) {
      NotImplementedError_1 = NotImplementedError_1_1;
    }, function(ServiceUnavailableError_1_1) {
      ServiceUnavailableError_1 = ServiceUnavailableError_1_1;
    }, function(UnknownError_1_1) {
      UnknownError_1 = UnknownError_1_1;
    }],
    execute: function() {
      client = [];
      client.push(BadRequestError_1.default);
      client.push(ConflictError_1.default);
      client.push(ForbiddenError_1.default);
      client.push(MethodNotAllowedError_1.default);
      client.push(NotAcceptableError_1.default);
      client.push(NotFoundError_1.default);
      client.push(PreconditionFailedError_1.default);
      client.push(PreconditionRequiredError_1.default);
      client.push(RequestEntityTooLargeError_1.default);
      client.push(RequestHeaderFieldsTooLargeError_1.default);
      client.push(RequestURITooLongError_1.default);
      client.push(TooManyRequestsError_1.default);
      client.push(UnauthorizedError_1.default);
      client.push(UnsupportedMediaTypeError_1.default);
      server = [];
      server.push(BadResponseError_1.default);
      server.push(BadGatewayError_1.default);
      server.push(GatewayTimeoutError_1.default);
      server.push(HTTPVersionNotSupportedError_1.default);
      server.push(InternalServerErrorError_1.default);
      server.push(NotImplementedError_1.default);
      server.push(ServiceUnavailableError_1.default);
      statusCodeMap = new Map();
      for (var i = 0,
          length = client.length; i < length; i++) {
        statusCodeMap.set(client[i].statusCode, client[i]);
      }
      for (var i = 0,
          length = server.length; i < length; i++) {
        statusCodeMap.set(server[i].statusCode, server[i]);
      }
      exports_1("Error", HTTPError_1.default);
      exports_1("BadRequestError", BadRequestError_1.default);
      exports_1("ConflictError", ConflictError_1.default);
      exports_1("ForbiddenError", ForbiddenError_1.default);
      exports_1("MethodNotAllowedError", MethodNotAllowedError_1.default);
      exports_1("NotAcceptableError", NotAcceptableError_1.default);
      exports_1("NotFoundError", NotFoundError_1.default);
      exports_1("PreconditionFailedError", PreconditionFailedError_1.default);
      exports_1("PreconditionRequiredError", PreconditionRequiredError_1.default);
      exports_1("RequestEntityTooLargeError", RequestEntityTooLargeError_1.default);
      exports_1("RequestHeaderFieldsTooLargeError", RequestHeaderFieldsTooLargeError_1.default);
      exports_1("RequestURITooLongError", RequestURITooLongError_1.default);
      exports_1("TooManyRequestsError", TooManyRequestsError_1.default);
      exports_1("UnauthorizedError", UnauthorizedError_1.default);
      exports_1("UnsupportedMediaTypeError", UnsupportedMediaTypeError_1.default);
      exports_1("BadResponseError", BadResponseError_1.default);
      exports_1("BadGatewayError", BadGatewayError_1.default);
      exports_1("GatewayTimeoutError", GatewayTimeoutError_1.default);
      exports_1("HTTPVersionNotSupportedError", HTTPVersionNotSupportedError_1.default);
      exports_1("InternalServerErrorError", InternalServerErrorError_1.default);
      exports_1("NotImplementedError", NotImplementedError_1.default);
      exports_1("ServiceUnavailableError", ServiceUnavailableError_1.default);
      exports_1("UnknownError", UnknownError_1.default);
      exports_1("client", client);
      exports_1("server", server);
      exports_1("statusCodeMap", statusCodeMap);
    }
  };
});

$__System.register("3e", [], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Method;
  return {
    setters: [],
    execute: function() {
      (function(Method) {
        Method[Method["OPTIONS"] = 0] = "OPTIONS";
        Method[Method["HEAD"] = 1] = "HEAD";
        Method[Method["GET"] = 2] = "GET";
        Method[Method["POST"] = 3] = "POST";
        Method[Method["PUT"] = 4] = "PUT";
        Method[Method["PATCH"] = 5] = "PATCH";
        Method[Method["DELETE"] = 6] = "DELETE";
      })(Method || (Method = {}));
      exports_1("default", Method);
    }
  };
});

$__System.register("3f", ["40", "41"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var JSONParser_1,
      Processor_1;
  var Class;
  return {
    setters: [function(JSONParser_1_1) {
      JSONParser_1 = JSONParser_1_1;
    }, function(Processor_1_1) {
      Processor_1 = Processor_1_1;
    }],
    execute: function() {
      Class = (function() {
        function Class() {}
        Class.prototype.parse = function(input) {
          var jsonParser = new JSONParser_1.default();
          return jsonParser.parse(input).then(function(parsedObject) {
            return Processor_1.default.expand(parsedObject);
          });
        };
        return Class;
      }());
      exports_1("Class", Class);
      exports_1("default", Class);
    }
  };
});

$__System.register("42", ["6"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var NS;
  var RDF_CLASS,
      SCHEMA;
  return {
    setters: [function(NS_1) {
      NS = NS_1;
    }],
    execute: function() {
      exports_1("RDF_CLASS", RDF_CLASS = NS.C.Class.API);
      exports_1("SCHEMA", SCHEMA = {
        "version": {
          "@id": NS.C.Predicate.version,
          "@type": NS.XSD.DataType.string
        },
        "buildDate": {
          "@id": NS.C.Predicate.buildDate,
          "@type": NS.XSD.DataType.dateTime
        }
      });
    }
  };
});

$__System.register("43", ["44", "6"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var LDP,
      NS;
  var RDF_CLASS,
      Factory;
  return {
    setters: [function(LDP_1) {
      LDP = LDP_1;
    }, function(NS_1) {
      NS = NS_1;
    }],
    execute: function() {
      exports_1("RDF_CLASS", RDF_CLASS = NS.C.Class.AccessPoint);
      Factory = (function() {
        function Factory() {}
        Factory.is = function(object) {
          return LDP.DirectContainer.Factory.is(object);
        };
        Factory.create = function(membershipResource, hasMemberRelation, isMemberOfRelation) {
          return Factory.createFrom({}, membershipResource, hasMemberRelation, isMemberOfRelation);
        };
        Factory.createFrom = function(object, membershipResource, hasMemberRelation, isMemberOfRelation) {
          return LDP.DirectContainer.Factory.createFrom(object, membershipResource, hasMemberRelation, isMemberOfRelation);
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("10", ["6", "3b", "45", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var NS,
      Resource,
      Role,
      Utils;
  var RDF_CLASS,
      SCHEMA,
      Factory;
  return {
    setters: [function(NS_1) {
      NS = NS_1;
    }, function(Resource_1) {
      Resource = Resource_1;
    }, function(Role_1) {
      Role = Role_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      exports_1("RDF_CLASS", RDF_CLASS = NS.CS.Class.AppRole);
      exports_1("SCHEMA", SCHEMA = {
        "parentRole": {
          "@id": NS.CS.Predicate.parentRole,
          "@type": "@id"
        },
        "childRoles": {
          "@id": NS.CS.Predicate.childRole,
          "@type": "@id",
          "@container": "@set"
        }
      });
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(resource) {
          return Utils.isObject(resource);
        };
        Factory.is = function(object) {
          return Role.Factory.is(object) && Resource.Util.hasType(object, RDF_CLASS);
        };
        Factory.create = function(name) {
          return Factory.createFrom({}, name);
        };
        Factory.createFrom = function(object, name) {
          var role = Role.Factory.createFrom(object, name);
          role.types.push(NS.CS.Class.AppRole);
          return role;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("46", ["5", "45", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Errors,
      Role,
      Utils;
  var Factory;
  function listAgents(requestOptions) {
    checkState.call(this);
    return this._roles.listAgents(this.id, requestOptions);
  }
  function getAgents(retrievalPreferencesOrRequestOptions, requestOptions) {
    checkState.call(this);
    return this._roles.getAgents(this.id, retrievalPreferencesOrRequestOptions, requestOptions);
  }
  function addAgent(agent, requestOptions) {
    checkState.call(this);
    return this._roles.addAgents(this.id, [agent], requestOptions);
  }
  function addAgents(agents, requestOptions) {
    checkState.call(this);
    return this._roles.addAgents(this.id, agents, requestOptions);
  }
  function removeAgent(agent, requestOptions) {
    checkState.call(this);
    return this._roles.removeAgents(this.id, [agent], requestOptions);
  }
  function removeAgents(agents, requestOptions) {
    checkState.call(this);
    return this._roles.removeAgents(this.id, agents, requestOptions);
  }
  function checkState() {
    if (!this._roles)
      throw new Errors.IllegalStateError("The context of the current role, does not support roles management.");
  }
  return {
    setters: [function(Errors_1) {
      Errors = Errors_1;
    }, function(Role_1) {
      Role = Role_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(object) {
          return Utils.hasPropertyDefined(object, "_roles") && Utils.hasPropertyDefined(object, "name") && Utils.hasFunction(object, "listAgents") && Utils.hasFunction(object, "getAgents") && Utils.hasFunction(object, "addAgent") && Utils.hasFunction(object, "addAgents") && Utils.hasFunction(object, "removeAgent") && Utils.hasFunction(object, "removeAgents");
        };
        Factory.is = function(object) {
          return Factory.hasClassProperties(object) && Role.Factory.is(object);
        };
        Factory.decorate = function(object, roles) {
          var role = object;
          if (Factory.hasClassProperties(role))
            return role;
          Object.defineProperties(role, {
            "_roles": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: roles
            },
            "listAgents": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: listAgents
            },
            "getAgents": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: getAgents
            },
            "addAgent": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: addAgent
            },
            "addAgents": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: addAgents
            },
            "removeAgent": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: removeAgent
            },
            "removeAgents": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: removeAgents
            }
          });
          return role;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("11", ["10", "46", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var AppRole,
      PersistedRole,
      Utils;
  var Factory;
  return {
    setters: [function(AppRole_1) {
      AppRole = AppRole_1;
    }, function(PersistedRole_1) {
      PersistedRole = PersistedRole_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(object) {
          return Utils.hasPropertyDefined(object, "_roles");
        };
        Factory.is = function(object) {
          return Factory.hasClassProperties(object) && AppRole.Factory.is(object);
        };
        Factory.decorate = function(object, roles) {
          var role = object;
          if (Factory.hasClassProperties(role))
            return role;
          PersistedRole.Factory.decorate(role, roles);
          return role;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("e", ["47", "5", "48"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Agent,
      Errors,
      URI;
  var Class;
  return {
    setters: [function(Agent_1) {
      Agent = Agent_1;
    }, function(Errors_1) {
      Errors = Errors_1;
    }, function(URI_1) {
      URI = URI_1;
    }],
    execute: function() {
      Class = (function() {
        function Class(context) {
          this.context = context;
        }
        Class.prototype.register = function(agentDocument, slug) {
          var _this = this;
          if (slug === void 0) {
            slug = null;
          }
          return this.resolveURI("").then(function(containerURI) {
            if (!Agent.Factory.is(agentDocument))
              throw new Errors.IllegalArgumentError("The Document is not a cs:Agent object.");
            return _this.context.documents.createChild(containerURI, agentDocument, slug);
          });
        };
        Class.prototype.get = function(agentURI, requestOptions) {
          var _this = this;
          return this.resolveURI(agentURI).then(function(uri) {
            return _this.context.documents.get(uri, requestOptions);
          });
        };
        Class.prototype.enable = function(agentURI, requestOptions) {
          return this.changeEnabledStatus(agentURI, true, requestOptions);
        };
        Class.prototype.disable = function(agentURI, requestOptions) {
          return this.changeEnabledStatus(agentURI, false, requestOptions);
        };
        Class.prototype.delete = function(agentURI, requestOptions) {
          var _this = this;
          return this.resolveURI(agentURI).then(function(uri) {
            return _this.context.documents.delete(uri, requestOptions);
          });
        };
        Class.prototype.changeEnabledStatus = function(agentURI, value, requestOptions) {
          var getResponse;
          return this.get(agentURI, requestOptions).then(function(_a) {
            var agent = _a[0],
                response = _a[1];
            getResponse = response;
            agent.enabled = value;
            return agent.save();
          }).then(function(_a) {
            var agent = _a[0],
                response = _a[1];
            return [agent, [getResponse, response]];
          });
        };
        Class.prototype.resolveURI = function(agentURI) {
          var _this = this;
          return new Promise(function(resolve) {
            var containerURI = _this.context.resolve(_this.getContainerURI());
            var uri = URI.Util.resolve(containerURI, agentURI);
            if (!URI.Util.isBaseOf(containerURI, uri))
              throw new Errors.IllegalArgumentError("The URI provided is not a valid agent of the current context.");
            resolve(uri);
          });
        };
        Class.prototype.getContainerURI = function() {
          if (!this.context.hasSetting("platform.agents.container"))
            throw new Errors.IllegalStateError("The agents container URI hasn't been set.");
          return this.context.getSetting("platform.agents.container");
        };
        return Class;
      }());
      exports_1("Class", Class);
      exports_1("default", Class);
    }
  };
});

$__System.register("49", [], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  return {
    setters: [],
    execute: function() {}
  };
});

$__System.register("4a", [], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  return {
    setters: [],
    execute: function() {}
  };
});

$__System.register("4b", [], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  return {
    setters: [],
    execute: function() {}
  };
});

$__System.register("4c", ["6", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var NS,
      Utils;
  var RDF_CLASS,
      SCHEMA,
      Factory;
  return {
    setters: [function(NS_1) {
      NS = NS_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      exports_1("RDF_CLASS", RDF_CLASS = NS.CS.Class.AccessControlEntry);
      exports_1("SCHEMA", SCHEMA = {
        "granting": {
          "@id": NS.CS.Predicate.granting,
          "@type": NS.XSD.DataType.boolean
        },
        "permissions": {
          "@id": NS.CS.Predicate.permission,
          "@type": "@id",
          "@container": "@set"
        },
        "subjects": {
          "@id": NS.CS.Predicate.subject,
          "@type": "@id",
          "@container": "@set"
        },
        "subjectsClass": {
          "@id": NS.CS.Predicate.subjectClass,
          "@type": "@id"
        }
      });
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(object) {
          return Utils.hasPropertyDefined(object, "granting") && Utils.hasPropertyDefined(object, "permissions") && Utils.hasPropertyDefined(object, "subjects") && Utils.hasPropertyDefined(object, "subjectsClass");
        };
        Factory.createFrom = function(object, granting, subjects, subjectClass, permissions) {
          var ace = object;
          if (!ace.types)
            ace.types = [];
          ace.types.push(RDF_CLASS);
          ace.granting = granting;
          ace.subjects = subjects;
          ace.subjectsClass = subjectClass;
          ace.permissions = permissions;
          return ace;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("4d", ["4c", "6", "8", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var ACE,
      NS,
      Pointer,
      Utils;
  var RDF_CLASS,
      SCHEMA,
      Factory;
  function parsePointer(element) {
    var acl = this;
    return Pointer.Factory.is(element) ? element : acl.getPointer(element);
  }
  function parsePointers(elements) {
    var _this = this;
    var elementsArray = Utils.isArray(elements) ? elements : [elements];
    return elementsArray.map(function(element) {
      return parsePointer.call(_this, element);
    });
  }
  function configACE(granting, subject, subjectClass, permissions, aces) {
    var subjectACEs = aces.filter(function(ace) {
      return ace.subjects.length === 1 && ace.subjects.indexOf(subject) !== -1 && ace.granting === granting;
    });
    var ace;
    if (subjectACEs.length === 0) {
      ace = ACE.Factory.createFrom(this.createFragment(), granting, [subject], subjectClass, []);
      aces.push(ace);
    } else {
      ace = subjectACEs[0];
    }
    Array.prototype.push.apply(ace.permissions, permissions);
    return ace;
  }
  function configACEs(granting, subjects, subjectsClass, permissions, aces) {
    var subjectPointers = parsePointers.call(this, subjects);
    var subjectClassPointer = parsePointer.call(this, subjectsClass);
    var permissionPointers = parsePointers.call(this, permissions);
    for (var _i = 0,
        subjectPointers_1 = subjectPointers; _i < subjectPointers_1.length; _i++) {
      var subject = subjectPointers_1[_i];
      removePermissionsFrom.call(this, subject, permissionPointers, aces);
      configACE.call(this, granting, subject, subjectClassPointer, permissionPointers, aces);
    }
  }
  function grant(subjects, subjectsClass, permissions) {
    var acl = this;
    acl.entries = acl.entries || [];
    configACEs.call(this, true, subjects, subjectsClass, permissions, acl.entries);
  }
  function deny(subjects, subjectsClass, permissions) {
    var acl = this;
    acl.entries = acl.entries || [];
    configACEs.call(this, false, subjects, subjectsClass, permissions, acl.entries);
  }
  function configureChildInheritance(granting, subjects, subjectsClass, permissions) {
    var acl = this;
    acl.inheritableEntries = acl.inheritableEntries || [];
    configACEs.call(this, granting, subjects, subjectsClass, permissions, acl.inheritableEntries);
  }
  function grantingFrom(subject, permission, aces) {
    var subjectACEs = aces.filter(function(ace) {
      return Utils.A.indexOf(ace.subjects, subject, Pointer.Util.areEqual) !== -1;
    });
    for (var _i = 0,
        subjectACEs_1 = subjectACEs; _i < subjectACEs_1.length; _i++) {
      var ace = subjectACEs_1[_i];
      if (Utils.A.indexOf(ace.permissions, permission, Pointer.Util.areEqual) !== -1)
        return ace.granting;
    }
    return null;
  }
  function getGranting(subject, permission, aces) {
    if (!aces)
      return null;
    var subjectPointer = parsePointer.call(this, subject);
    var permissionPointer = parsePointer.call(this, permission);
    return grantingFrom(subjectPointer, permissionPointer, aces);
  }
  function grants(subject, permission) {
    var acl = this;
    return getGranting.call(this, subject, permission, acl.entries);
  }
  function denies(subject, permission) {
    var acl = this;
    var granting = getGranting.call(this, subject, permission, acl.entries);
    return granting === null ? null : !granting;
  }
  function getChildInheritance(subject, permission) {
    var acl = this;
    return getGranting.call(this, subject, permission, acl.inheritableEntries);
  }
  function removePermissionsFrom(subject, permissions, aces) {
    if (!aces)
      return;
    var acl = this;
    var opposedAces = acl.entries === aces ? acl.inheritableEntries : acl.entries;
    var subjectACEs = aces.filter(function(ace) {
      return Utils.A.indexOf(ace.subjects, subject, Pointer.Util.areEqual) !== -1;
    });
    for (var _i = 0,
        subjectACEs_2 = subjectACEs; _i < subjectACEs_2.length; _i++) {
      var ace = subjectACEs_2[_i];
      if (opposedAces && Utils.A.indexOf(opposedAces, ace, Pointer.Util.areEqual) !== -1) {
        aces.splice(Utils.A.indexOf(aces, ace, Pointer.Util.areEqual), 1);
        var newACE = configACE.call(this, ace.granting, subject, ace.subjectsClass, ace.permissions, aces);
        subjectACEs.push(newACE);
        continue;
      }
      if (ace.subjects.length > 1) {
        ace.subjects.splice(Utils.A.indexOf(ace.subjects, subject, Pointer.Util.areEqual), 1);
        var newACE = configACE.call(this, ace.granting, subject, ace.subjectsClass, ace.permissions, aces);
        subjectACEs.push(newACE);
        continue;
      }
      for (var _a = 0,
          permissions_1 = permissions; _a < permissions_1.length; _a++) {
        var permission = permissions_1[_a];
        var index = Utils.A.indexOf(ace.permissions, permission, Pointer.Util.areEqual);
        if (index === -1)
          continue;
        ace.permissions.splice(index, 1);
      }
      if (ace.permissions.length === 0) {
        aces.splice(Utils.A.indexOf(aces, ace, Pointer.Util.areEqual), 1);
        acl._removeFragment(ace);
      }
    }
  }
  function removePermissions(subject, permissions, aces) {
    var subjectPointer = parsePointer.call(this, subject);
    var permissionPointers = parsePointers.call(this, permissions);
    removePermissionsFrom.call(this, subjectPointer, permissionPointers, aces);
  }
  function remove(subject, permissions) {
    var acl = this;
    removePermissions.call(this, subject, permissions, acl.entries);
  }
  function removeChildInheritance(subject, permissions) {
    var acl = this;
    removePermissions.call(this, subject, permissions, acl.inheritableEntries);
  }
  return {
    setters: [function(ACE_1) {
      ACE = ACE_1;
    }, function(NS_1) {
      NS = NS_1;
    }, function(Pointer_1) {
      Pointer = Pointer_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      exports_1("RDF_CLASS", RDF_CLASS = NS.CS.Class.AccessControlList);
      exports_1("SCHEMA", SCHEMA = {
        "entries": {
          "@id": NS.CS.Predicate.accessControlEntry,
          "@type": "@id",
          "@container": "@set"
        },
        "accessTo": {
          "@id": NS.CS.Predicate.accessTo,
          "@type": "@id"
        },
        "inheritableEntries": {
          "@id": NS.CS.Predicate.inheritableEntry,
          "@type": "@id",
          "@container": "@set"
        }
      });
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(object) {
          return Utils.hasPropertyDefined(object, "accessTo") && Utils.hasFunction(object, "grant") && Utils.hasFunction(object, "deny") && Utils.hasFunction(object, "configureChildInheritance") && Utils.hasFunction(object, "grants") && Utils.hasFunction(object, "denies") && Utils.hasFunction(object, "getChildInheritance") && Utils.hasFunction(object, "remove") && Utils.hasFunction(object, "removeChildInheritance");
        };
        Factory.decorate = function(object) {
          var acl = object;
          if (Factory.hasClassProperties(acl))
            return acl;
          Object.defineProperties(acl, {
            "grant": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: grant
            },
            "deny": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: deny
            },
            "configureChildInheritance": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: configureChildInheritance
            },
            "grants": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: grants
            },
            "denies": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: denies
            },
            "getChildInheritance": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: getChildInheritance
            },
            "remove": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: remove
            },
            "removeChildInheritance": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: removeChildInheritance
            }
          });
          return acl;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("4e", ["4d", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var ACL,
      Utils;
  var Factory;
  return {
    setters: [function(ACL_1) {
      ACL = ACL_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(object) {
          return Utils.hasPropertyDefined(object, "accessTo");
        };
        Factory.decorate = function(document) {
          var acl = ACL.Factory.decorate(document);
          if (Factory.hasClassProperties(acl))
            return acl;
          return acl;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("47", ["15", "16", "6", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Document,
      IllegalArgumentError_1,
      NS,
      Utils;
  var RDF_CLASS,
      SCHEMA,
      Factory;
  return {
    setters: [function(Document_1) {
      Document = Document_1;
    }, function(IllegalArgumentError_1_1) {
      IllegalArgumentError_1 = IllegalArgumentError_1_1;
    }, function(NS_1) {
      NS = NS_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      exports_1("RDF_CLASS", RDF_CLASS = NS.CS.Class.Agent);
      exports_1("SCHEMA", SCHEMA = {
        "name": {
          "@id": NS.CS.Predicate.namae,
          "@type": NS.XSD.DataType.string
        },
        "email": {
          "@id": NS.VCARD.Predicate.email,
          "@type": NS.XSD.DataType.string
        },
        "password": {
          "@id": NS.CS.Predicate.password,
          "@type": NS.XSD.DataType.string
        },
        "enabled": {
          "@id": NS.CS.Predicate.enabled,
          "@type": NS.XSD.DataType.boolean
        },
        "platformRoles": {
          "@id": NS.CS.Predicate.platformRole,
          "@type": "@id",
          "@container": "@set"
        }
      });
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(object) {
          return Utils.hasPropertyDefined(object, "name") && Utils.hasPropertyDefined(object, "email") && Utils.hasPropertyDefined(object, "password");
        };
        Factory.is = function(object) {
          return Factory.hasClassProperties(object) && Document.Factory.hasClassProperties(object) && object.hasType(RDF_CLASS);
        };
        Factory.create = function(name, email, password) {
          return Factory.createFrom({}, name, email, password);
        };
        Factory.createFrom = function(object, name, email, password) {
          if (!Document.Factory.hasClassProperties(object))
            object = Document.Factory.createFrom(object);
          if (!name)
            throw new IllegalArgumentError_1.default("The name cannot be empty.");
          if (!email)
            throw new IllegalArgumentError_1.default("The email cannot be empty.");
          if (!password)
            throw new IllegalArgumentError_1.default("The password cannot be empty.");
          var app = object;
          app.name = name;
          app.email = email;
          app.password = password;
          app.types.push(NS.CS.Class.Agent);
          return app;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("4f", ["47", "a", "17"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Agent,
      Utils,
      PersistedDocument;
  var Factory;
  function enable() {
    this.enabled = true;
    return this.save();
  }
  function disable() {
    this.enabled = false;
    return this.save();
  }
  return {
    setters: [function(Agent_1) {
      Agent = Agent_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }, function(PersistedDocument_1) {
      PersistedDocument = PersistedDocument_1;
    }],
    execute: function() {
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(object) {
          return Utils.hasPropertyDefined(object, "name") && Utils.hasPropertyDefined(object, "email") && Utils.hasPropertyDefined(object, "enabled") && Utils.hasFunction(object, "enable") && Utils.hasFunction(object, "disable");
        };
        Factory.is = function(object) {
          return Factory.hasClassProperties(object) && PersistedDocument.Factory.is(object) && object.hasType(Agent.RDF_CLASS);
        };
        Factory.decorate = function(object) {
          var agent = object;
          if (Factory.hasClassProperties(agent))
            return agent;
          Object.defineProperties(agent, {
            "enable": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: enable
            },
            "disable": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: disable
            }
          });
          return agent;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("45", ["a", "15", "6", "16"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Utils,
      Document,
      NS,
      IllegalArgumentError_1;
  var SCHEMA,
      Factory;
  return {
    setters: [function(Utils_1) {
      Utils = Utils_1;
    }, function(Document_1) {
      Document = Document_1;
    }, function(NS_1) {
      NS = NS_1;
    }, function(IllegalArgumentError_1_1) {
      IllegalArgumentError_1 = IllegalArgumentError_1_1;
    }],
    execute: function() {
      exports_1("SCHEMA", SCHEMA = {
        "name": {
          "@id": NS.CS.Predicate.namae,
          "@type": NS.XSD.DataType.string
        },
        "agents": {
          "@id": NS.CS.Predicate.agent,
          "@type": "@id",
          "@container": "@set"
        }
      });
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(object) {
          return Utils.hasPropertyDefined(object, "name");
        };
        Factory.is = function(object) {
          return Factory.hasClassProperties(object) && Document.Factory.is(object);
        };
        Factory.create = function(name) {
          return Factory.createFrom({}, name);
        };
        Factory.createFrom = function(object, name) {
          if (!Document.Factory.hasClassProperties(object))
            object = Document.Factory.createFrom(object);
          if (!name)
            throw new IllegalArgumentError_1.default("The name cannot be empty.");
          var role = object;
          role.name = name;
          return role;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("12", ["5", "50", "48", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Errors,
      HTTP,
      URI,
      Utils;
  var Class;
  return {
    setters: [function(Errors_1) {
      Errors = Errors_1;
    }, function(HTTP_1) {
      HTTP = HTTP_1;
    }, function(URI_1) {
      URI = URI_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      Class = (function() {
        function Class(context) {
          this.context = context;
        }
        Class.prototype.createChild = function(parentRole, role, slugOrRequestOptions, requestOptions) {
          var _this = this;
          var parentURI = Utils.isString(parentRole) ? parentRole : parentRole.id;
          var slug = Utils.isString(slugOrRequestOptions) ? slugOrRequestOptions : null;
          requestOptions = HTTP.Request.Util.isOptions(slugOrRequestOptions) ? slugOrRequestOptions : requestOptions;
          var containerURI;
          var persistedRole;
          var responseCreated;
          return this.resolveURI("").then(function(uri) {
            containerURI = uri;
            parentURI = URI.Util.resolve(containerURI, parentURI);
            if (!URI.Util.isBaseOf(containerURI, parentURI))
              throw new Errors.IllegalArgumentError("The parent role provided is not a valid role of the current context.");
            return _this.context.documents.exists(parentURI);
          }).then(function(_a) {
            var exists = _a[0],
                response = _a[1];
            if (!exists)
              throw new Errors.IllegalArgumentError("The parent role provided does not exist.");
            return _this.context.documents.createChild(containerURI, role, slug, requestOptions);
          }).then(function(_a) {
            var newRole = _a[0],
                response = _a[1];
            persistedRole = newRole;
            responseCreated = response;
            return _this.context.documents.addMember(parentURI, newRole);
          }).then(function(response) {
            return [persistedRole, [responseCreated, response]];
          });
        };
        Class.prototype.get = function(roleURI, requestOptions) {
          var _this = this;
          return this.resolveURI(roleURI).then(function(uri) {
            return _this.context.documents.get(uri, requestOptions);
          });
        };
        Class.prototype.listAgents = function(roleURI, requestOptions) {
          var _this = this;
          return this.getAgentsAccessPoint(roleURI).then(function(agentsAccessPoint) {
            return _this.context.documents.listMembers(agentsAccessPoint.id, requestOptions);
          });
        };
        Class.prototype.getAgents = function(roleURI, retrievalPreferencesOrRequestOptions, requestOptions) {
          var _this = this;
          return this.getAgentsAccessPoint(roleURI).then(function(agentsAccessPoint) {
            return _this.context.documents.getMembers(agentsAccessPoint.id, retrievalPreferencesOrRequestOptions, requestOptions);
          });
        };
        Class.prototype.addAgent = function(roleURI, agent, requestOptions) {
          return this.addAgents(roleURI, [agent], requestOptions);
        };
        Class.prototype.addAgents = function(roleURI, agents, requestOptions) {
          var _this = this;
          return this.getAgentsAccessPoint(roleURI).then(function(agentsAccessPoint) {
            return _this.context.documents.addMembers(agentsAccessPoint.id, agents, requestOptions);
          });
        };
        Class.prototype.removeAgent = function(roleURI, agent, requestOptions) {
          return this.removeAgents(roleURI, [agent], requestOptions);
        };
        Class.prototype.removeAgents = function(roleURI, agents, requestOptions) {
          var _this = this;
          return this.getAgentsAccessPoint(roleURI).then(function(agentsAccessPoint) {
            return _this.context.documents.removeMembers(agentsAccessPoint.id, agents, requestOptions);
          });
        };
        Class.prototype.resolveURI = function(agentURI) {
          var _this = this;
          return new Promise(function(resolve) {
            var containerURI = _this.context.resolve(_this.getContainerURI());
            var uri = URI.Util.resolve(containerURI, agentURI);
            if (!URI.Util.isBaseOf(containerURI, uri))
              throw new Errors.IllegalArgumentError("The URI provided is not a valid role of the current context.");
            resolve(uri);
          });
        };
        Class.prototype.getAgentsAccessPoint = function(roleURI) {
          var _this = this;
          return this.resolveURI(roleURI).then(function(uri) {
            return _this.context.documents.executeSELECTQuery(uri, " select distinct ?agentsAccessPoint where {\n\t\t\t\t<" + uri + "> <https://carbonldp.com/ns/v1/platform#accessPoint> ?agentsAccessPoint .\n\t\t\t\t?agentsAccessPoint <http://www.w3.org/ns/ldp#hasMemberRelation> <https://carbonldp.com/ns/v1/security#agent> .\n\t\t\t}");
          }).then(function(_a) {
            var selectResults = _a[0],
                response = _a[1];
            return selectResults.bindings[0]["agentsAccessPoint"];
          });
        };
        Class.prototype.getContainerURI = function() {
          if (!this.context.hasSetting("platform.roles.container"))
            throw new Errors.IllegalStateError("The roles container setting hasn't been declared.");
          return this.context.getSetting("platform.roles.container");
        };
        return Class;
      }());
      exports_1("Class", Class);
      exports_1("default", Class);
    }
  };
});

$__System.register("51", [], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Class;
  return {
    setters: [],
    execute: function() {
      Class = (function() {
        function Class(username, password) {
          this._username = username;
          this._password = password;
        }
        Object.defineProperty(Class.prototype, "username", {
          get: function() {
            return this._username;
          },
          enumerable: true,
          configurable: true
        });
        ;
        Object.defineProperty(Class.prototype, "password", {
          get: function() {
            return this._password;
          },
          enumerable: true,
          configurable: true
        });
        ;
        return Class;
      }());
      exports_1("Class", Class);
      exports_1("default", Class);
    }
  };
});

$__System.register("52", ["50", "5", "51"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var HTTP,
      Errors,
      UsernameAndPasswordCredentials;
  var Class;
  function toB64(str) {
    return (typeof btoa !== "undefined") ? btoa(str) : new Buffer(str).toString("base64");
  }
  return {
    setters: [function(HTTP_1) {
      HTTP = HTTP_1;
    }, function(Errors_1) {
      Errors = Errors_1;
    }, function(UsernameAndPasswordCredentials_1) {
      UsernameAndPasswordCredentials = UsernameAndPasswordCredentials_1;
    }],
    execute: function() {
      Class = (function() {
        function Class() {}
        Class.prototype.isAuthenticated = function() {
          return !!this.credentials;
        };
        Class.prototype.authenticate = function(authenticationToken) {
          var _this = this;
          if (authenticationToken === null)
            throw new Errors.IllegalArgumentError("The authenticationToken cannot be null.");
          return new Promise(function(resolve, reject) {
            if (!authenticationToken.username)
              throw new Errors.IllegalArgumentError("The username cannot be empty.");
            if (!authenticationToken.password)
              throw new Errors.IllegalArgumentError("The password cannot be empty.");
            _this.credentials = new UsernameAndPasswordCredentials.Class(authenticationToken.username, authenticationToken.password);
            resolve(_this.credentials);
          });
        };
        Class.prototype.addAuthentication = function(requestOptions) {
          if (!this.isAuthenticated())
            throw new Errors.IllegalStateError("The authenticator isn't authenticated.");
          var headers = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map();
          this.addBasicAuthenticationHeader(headers);
          return requestOptions;
        };
        Class.prototype.clearAuthentication = function() {
          this.credentials = null;
        };
        Class.prototype.addBasicAuthenticationHeader = function(headers) {
          if (headers.has("authorization"))
            return;
          var header = new HTTP.Header.Class();
          headers.set("authorization", header);
          var authorization = "Basic " + toB64(this.credentials.username + ":" + this.credentials.password);
          header.values.push(new HTTP.Header.Value(authorization));
        };
        return Class;
      }());
      exports_1("Class", Class);
      exports_1("default", Class);
    }
  };
});

$__System.register("53", ["5", "50", "54", "44", "6", "9", "3b", "52", "55", "56", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Errors,
      HTTP,
      JSONLD,
      LDP,
      NS,
      RDF,
      Resource,
      BasicAuthenticator_1,
      UsernameAndPasswordToken_1,
      Token,
      Utils;
  var Class;
  return {
    setters: [function(Errors_1) {
      Errors = Errors_1;
    }, function(HTTP_1) {
      HTTP = HTTP_1;
    }, function(JSONLD_1) {
      JSONLD = JSONLD_1;
    }, function(LDP_1) {
      LDP = LDP_1;
    }, function(NS_1) {
      NS = NS_1;
    }, function(RDF_1) {
      RDF = RDF_1;
    }, function(Resource_1) {
      Resource = Resource_1;
    }, function(BasicAuthenticator_1_1) {
      BasicAuthenticator_1 = BasicAuthenticator_1_1;
    }, function(UsernameAndPasswordToken_1_1) {
      UsernameAndPasswordToken_1 = UsernameAndPasswordToken_1_1;
    }, function(Token_1) {
      Token = Token_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      Class = (function() {
        function Class(context) {
          if (context === null)
            throw new Errors.IllegalArgumentError("context cannot be null");
          this.context = context;
          this.basicAuthenticator = new BasicAuthenticator_1.default();
        }
        Class.prototype.isAuthenticated = function() {
          return !!this._credentials && this._credentials.expirationTime > new Date();
        };
        Class.prototype.authenticate = function(authenticationOrCredentials) {
          var _this = this;
          if (authenticationOrCredentials instanceof UsernameAndPasswordToken_1.default)
            return this.basicAuthenticator.authenticate(authenticationOrCredentials).then(function() {
              return _this.createToken();
            }).then(function(_a) {
              var token = _a[0],
                  response = _a[1];
              _this.basicAuthenticator.clearAuthentication();
              _this._credentials = token;
              return token;
            });
          var credentials = authenticationOrCredentials;
          if (Utils.isString(credentials.expirationTime))
            authenticationOrCredentials.expirationTime = new Date(credentials.expirationTime);
          if (credentials.expirationTime <= new Date())
            return Promise.reject(new Errors.IllegalArgumentError("The token provided in not valid."));
          this._credentials = credentials;
          return Promise.resolve(credentials);
        };
        Class.prototype.addAuthentication = function(requestOptions) {
          var headers = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map();
          this.addTokenAuthenticationHeader(headers);
          return requestOptions;
        };
        Class.prototype.clearAuthentication = function() {
          this._credentials = null;
        };
        Class.prototype.createToken = function() {
          var _this = this;
          var uri = this.context.resolve(Class.TOKEN_CONTAINER);
          var requestOptions = {};
          this.basicAuthenticator.addAuthentication(requestOptions);
          HTTP.Request.Util.setAcceptHeader("application/ld+json", requestOptions);
          HTTP.Request.Util.setPreferredInteractionModel(NS.LDP.Class.RDFSource, requestOptions);
          return HTTP.Request.Service.post(uri, null, requestOptions, new JSONLD.Parser.Class()).then(function(_a) {
            var expandedResult = _a[0],
                response = _a[1];
            var freeNodes = RDF.Node.Util.getFreeNodes(expandedResult);
            var freeResources = _this.context.documents._getFreeResources(freeNodes);
            var tokenResources = freeResources.getResources().filter(function(resource) {
              return Resource.Util.hasType(resource, Token.RDF_CLASS);
            });
            if (tokenResources.length === 0)
              throw new HTTP.Errors.BadResponseError("No '" + Token.RDF_CLASS + "' was returned.", response);
            if (tokenResources.length > 1)
              throw new HTTP.Errors.BadResponseError("Multiple '" + Token.RDF_CLASS + "' were returned. ", response);
            var token = tokenResources[0];
            var agentDocuments = RDF.Document.Util.getDocuments(expandedResult).filter(function(rdfDocument) {
              return rdfDocument["@id"] === token.agent.id;
            });
            agentDocuments.forEach(function(document) {
              return _this.context.documents._getPersistedDocument(document, response);
            });
            var responseMetadata = freeResources.getResources().find(function(resource) {
              return Resource.Util.hasType(resource, LDP.ResponseMetadata.RDF_CLASS);
            });
            if (!!responseMetadata)
              responseMetadata.resourcesMetadata.forEach(function(resourceMetadata) {
                resourceMetadata.resource._etag = resourceMetadata.eTag;
              });
            return [token, response];
          });
        };
        Class.prototype.addTokenAuthenticationHeader = function(headers) {
          if (headers.has("authorization"))
            return;
          var header = new HTTP.Header.Class();
          headers.set("authorization", header);
          var authorization = "Token " + this._credentials.key;
          header.values.push(new HTTP.Header.Value(authorization));
        };
        Class.TOKEN_CONTAINER = "auth-tokens/";
        return Class;
      }());
      exports_1("Class", Class);
      exports_1("default", Class);
    }
  };
});

$__System.register("57", ["6", "8", "3b", "48"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var NS,
      Pointer,
      Resource,
      URI;
  var TICKETS_CONTAINER,
      RDF_CLASS,
      SCHEMA,
      Factory;
  return {
    setters: [function(NS_1) {
      NS = NS_1;
    }, function(Pointer_1) {
      Pointer = Pointer_1;
    }, function(Resource_1) {
      Resource = Resource_1;
    }, function(URI_1) {
      URI = URI_1;
    }],
    execute: function() {
      exports_1("TICKETS_CONTAINER", TICKETS_CONTAINER = "auth-tickets/");
      exports_1("RDF_CLASS", RDF_CLASS = NS.CS.Class.Ticket);
      exports_1("SCHEMA", SCHEMA = {
        "forURI": {
          "@id": NS.CS.Predicate.forIRI,
          "@type": "@id"
        },
        "expirationTime": {
          "@id": NS.CS.Predicate.expirationTime,
          "@type": NS.XSD.DataType.dateTime
        },
        "ticketKey": {
          "@id": NS.CS.Predicate.ticketKey,
          "@type": NS.XSD.DataType.string
        }
      });
      Factory = (function() {
        function Factory() {}
        Factory.create = function(uri) {
          return Factory.createFrom(Resource.Factory.create(URI.Util.generateBNodeID()), uri);
        };
        Factory.createFrom = function(object, uri) {
          var ticket = object;
          ticket.forURI = Pointer.Factory.create(uri);
          ticket.types.push(RDF_CLASS);
          return ticket;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("56", ["6", "3b", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var NS,
      Resource,
      Utils;
  var RDF_CLASS,
      SCHEMA,
      Factory;
  return {
    setters: [function(NS_1) {
      NS = NS_1;
    }, function(Resource_1) {
      Resource = Resource_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      exports_1("RDF_CLASS", RDF_CLASS = NS.CS.Class.Token);
      exports_1("SCHEMA", SCHEMA = {
        "key": {
          "@id": NS.CS.Predicate.tokenKey,
          "@type": NS.XSD.DataType.string
        },
        "expirationTime": {
          "@id": NS.CS.Predicate.expirationTime,
          "@type": NS.XSD.DataType.dateTime
        },
        "agent": {
          "@id": NS.CS.Predicate.credentialsOf,
          "@type": "@id"
        }
      });
      Factory = (function() {
        function Factory() {}
        Factory.is = function(value) {
          return (Resource.Factory.is(value) && Factory.hasClassProperties(value));
        };
        Factory.hasClassProperties = function(object) {
          return (Utils.hasPropertyDefined(object, "key") && Utils.hasPropertyDefined(object, "expirationTime") && Utils.hasPropertyDefined(object, "agent"));
        };
        Factory.hasRequiredValues = function(object) {
          return (Utils.hasProperty(object, "key") && Utils.hasProperty(object, "expirationTime"));
        };
        Factory.decorate = function(object) {
          if (this.hasClassProperties(object))
            return object;
          return object;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("55", [], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Class;
  return {
    setters: [],
    execute: function() {
      Class = (function() {
        function Class(username, password) {
          this._username = username;
          this._password = password;
        }
        Object.defineProperty(Class.prototype, "username", {
          get: function() {
            return this._username;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class.prototype, "password", {
          get: function() {
            return this._password;
          },
          enumerable: true,
          configurable: true
        });
        return Class;
      }());
      exports_1("Class", Class);
      exports_1("default", Class);
    }
  };
});

$__System.register("58", ["5", "59", "8", "9", "3b", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Errors,
      Converter_1,
      Pointer,
      RDF,
      Resource,
      Utils;
  var Factory;
  function hasPointer(id) {
    var freeResources = this;
    if (!inLocalScope(id)) {
      return freeResources._documents.hasPointer(id);
    }
    return freeResources.hasResource(id);
  }
  function getPointer(id) {
    var freeResources = this;
    if (!inLocalScope(id)) {
      return freeResources._documents.getPointer(id);
    }
    var resource = freeResources.getResource(id);
    return !resource ? freeResources.createResource(id) : resource;
  }
  function inLocalScope(id) {
    return RDF.URI.Util.isBNodeID(id);
  }
  function inScope(idOrPointer) {
    var freeResources = this;
    var id = Pointer.Factory.is(idOrPointer) ? idOrPointer.id : idOrPointer;
    return inLocalScope(id) || freeResources._documents.inScope(id);
  }
  function hasResource(id) {
    var freeResources = this;
    return freeResources._resourcesIndex.has(id);
  }
  function getResource(id) {
    var freeResources = this;
    return freeResources._resourcesIndex.get(id) || null;
  }
  function getResources() {
    var freeResources = this;
    return Utils.A.from(freeResources._resourcesIndex.values());
  }
  function createResource(id) {
    return this.createResourceFrom({}, id);
  }
  function createResourceFrom(object, id) {
    var freeResources = this;
    if (id) {
      if (!inLocalScope(id))
        throw new Errors.IllegalArgumentError("The id \"" + id + "\" is out of scope.");
      if (freeResources._resourcesIndex.has(id))
        throw new Errors.IDAlreadyInUseError("The id \"" + id + "\" is already in use by another resource.");
    } else {
      id = RDF.URI.Util.generateBNodeID();
    }
    var resource = Resource.Factory.createFrom(object, id);
    freeResources._resourcesIndex.set(id, resource);
    return resource;
  }
  function toJSON() {
    var generalSchema = this._documents.getGeneralSchema();
    var jsonldConverter = new Converter_1.default();
    var resources = this.getResources();
    var expandedResources = [];
    for (var _i = 0,
        resources_1 = resources; _i < resources_1.length; _i++) {
      var resource = resources_1[_i];
      expandedResources.push(jsonldConverter.expand(resource, generalSchema, this._documents.getSchemaFor(resource)));
    }
    return JSON.stringify(expandedResources);
  }
  return {
    setters: [function(Errors_1) {
      Errors = Errors_1;
    }, function(Converter_1_1) {
      Converter_1 = Converter_1_1;
    }, function(Pointer_1) {
      Pointer = Pointer_1;
    }, function(RDF_1) {
      RDF = RDF_1;
    }, function(Resource_1) {
      Resource = Resource_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(object) {
          return (Utils.hasPropertyDefined(object, "_documents") && Utils.hasPropertyDefined(object, "_resourcesIndex") && Utils.hasFunction(object, "hasResource") && Utils.hasFunction(object, "getResource") && Utils.hasFunction(object, "getResources") && Utils.hasFunction(object, "createResource") && Utils.hasFunction(object, "createResourceFrom") && Utils.hasFunction(object, "hasPointer") && Utils.hasFunction(object, "getPointer") && Utils.hasFunction(object, "inScope") && Utils.hasFunction(object, "toJSON"));
        };
        Factory.create = function(documents) {
          return Factory.createFrom({}, documents);
        };
        Factory.createFrom = function(object, documents) {
          var freeResources = Factory.decorate(object);
          freeResources._documents = documents;
          return freeResources;
        };
        Factory.decorate = function(object) {
          if (Factory.hasClassProperties(object))
            return object;
          Object.defineProperties(object, {
            "_resourcesIndex": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: new Map()
            },
            "hasPointer": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: hasPointer
            },
            "getPointer": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: getPointer
            },
            "inScope": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: inScope
            },
            "hasResource": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: hasResource
            },
            "getResource": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: getResource
            },
            "getResources": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: getResources
            },
            "createResource": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: createResource
            },
            "createResourceFrom": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: createResourceFrom
            },
            "toJSON": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: toJSON
            }
          });
          return object;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("14", ["4c", "4d", "47", "e", "49", "4a", "52", "4b", "4e", "4f", "45", "12", "53", "57", "56", "55", "5", "58", "54", "50", "6", "3b", "9", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var ACE,
      ACL,
      Agent,
      Agents,
      AuthenticationToken_1,
      Authenticator_1,
      BasicAuthenticator_1,
      PersistedACE,
      PersistedACL,
      PersistedAgent,
      Role,
      Roles,
      TokenAuthenticator_1,
      Ticket,
      Token,
      UsernameAndPasswordToken_1,
      Errors,
      FreeResources,
      JSONLD,
      HTTP,
      NS,
      Resource,
      RDF,
      Utils;
  var Method,
      Class;
  return {
    setters: [function(ACE_1) {
      ACE = ACE_1;
    }, function(ACL_1) {
      ACL = ACL_1;
    }, function(Agent_1) {
      Agent = Agent_1;
    }, function(Agents_1) {
      Agents = Agents_1;
    }, function(AuthenticationToken_1_1) {
      AuthenticationToken_1 = AuthenticationToken_1_1;
    }, function(Authenticator_1_1) {
      Authenticator_1 = Authenticator_1_1;
    }, function(BasicAuthenticator_1_1) {
      BasicAuthenticator_1 = BasicAuthenticator_1_1;
    }, function(PersistedACE_1) {
      PersistedACE = PersistedACE_1;
    }, function(PersistedACL_1) {
      PersistedACL = PersistedACL_1;
    }, function(PersistedAgent_1) {
      PersistedAgent = PersistedAgent_1;
    }, function(Role_1) {
      Role = Role_1;
    }, function(Roles_1) {
      Roles = Roles_1;
    }, function(TokenAuthenticator_1_1) {
      TokenAuthenticator_1 = TokenAuthenticator_1_1;
    }, function(Ticket_1) {
      Ticket = Ticket_1;
    }, function(Token_1) {
      Token = Token_1;
    }, function(UsernameAndPasswordToken_1_1) {
      UsernameAndPasswordToken_1 = UsernameAndPasswordToken_1_1;
    }, function(Errors_1) {
      Errors = Errors_1;
    }, function(FreeResources_1) {
      FreeResources = FreeResources_1;
    }, function(JSONLD_1) {
      JSONLD = JSONLD_1;
    }, function(HTTP_1) {
      HTTP = HTTP_1;
    }, function(NS_1) {
      NS = NS_1;
    }, function(Resource_1) {
      Resource = Resource_1;
    }, function(RDF_1) {
      RDF = RDF_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      exports_1("ACE", ACE);
      exports_1("ACL", ACL);
      exports_1("Agent", Agent);
      exports_1("Agents", Agents);
      exports_1("AuthenticationToken", AuthenticationToken_1.default);
      exports_1("Authenticator", Authenticator_1.default);
      exports_1("BasicAuthenticator", BasicAuthenticator_1.default);
      exports_1("PersistedACE", PersistedACE);
      exports_1("PersistedACL", PersistedACL);
      exports_1("PersistedAgent", PersistedAgent);
      exports_1("Role", Role);
      exports_1("Roles", Roles);
      exports_1("Ticket", Ticket);
      exports_1("Token", Token);
      exports_1("TokenAuthenticator", TokenAuthenticator_1.default);
      exports_1("UsernameAndPasswordToken", UsernameAndPasswordToken_1.default);
      (function(Method) {
        Method[Method["BASIC"] = 0] = "BASIC";
        Method[Method["TOKEN"] = 1] = "TOKEN";
      })(Method || (Method = {}));
      exports_1("Method", Method);
      Class = (function() {
        function Class(context) {
          this.roles = null;
          this.agents = null;
          this.context = context;
          this.authenticators = [];
          this.authenticators[Method.BASIC] = new BasicAuthenticator_1.default();
          this.authenticators[Method.TOKEN] = new TokenAuthenticator_1.default(this.context);
        }
        Object.defineProperty(Class.prototype, "authenticatedAgent", {
          get: function() {
            if (!this._authenticatedAgent) {
              if (this.context.parentContext && this.context.parentContext.auth)
                return this.context.parentContext.auth.authenticatedAgent;
              return null;
            }
            return this._authenticatedAgent;
          },
          enumerable: true,
          configurable: true
        });
        Class.prototype.isAuthenticated = function(askParent) {
          if (askParent === void 0) {
            askParent = true;
          }
          return ((this.authenticator && this.authenticator.isAuthenticated()) || (askParent && !!this.context.parentContext && !!this.context.parentContext.auth && this.context.parentContext.auth.isAuthenticated()));
        };
        Class.prototype.authenticate = function(username, password) {
          return this.authenticateUsing("TOKEN", username, password);
        };
        Class.prototype.authenticateUsing = function(method, userOrTokenOrCredentials, password) {
          switch (method) {
            case "BASIC":
              return this.authenticateWithBasic(userOrTokenOrCredentials, password);
            case "TOKEN":
              return this.authenticateWithToken(userOrTokenOrCredentials, password);
            default:
              return Promise.reject(new Errors.IllegalArgumentError("No exists the authentication method '" + method + "'"));
          }
        };
        Class.prototype.addAuthentication = function(requestOptions) {
          if (this.isAuthenticated(false)) {
            this.authenticator.addAuthentication(requestOptions);
          } else if (!!this.context.parentContext && !!this.context.parentContext.auth) {
            this.context.parentContext.auth.addAuthentication(requestOptions);
          } else {
            console.warn("There is no authentication to add to the request.");
          }
        };
        Class.prototype.clearAuthentication = function() {
          if (!this.authenticator)
            return;
          this.authenticator.clearAuthentication();
          this.authenticator = null;
          this._authenticatedAgent = null;
        };
        Class.prototype.createTicket = function(uri, requestOptions) {
          var _this = this;
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          var resourceURI = this.context.resolve(uri);
          var containerURI = this.context.resolve(Ticket.TICKETS_CONTAINER);
          var freeResources = FreeResources.Factory.create(this.context.documents);
          Ticket.Factory.createFrom(freeResources.createResource(), resourceURI);
          if (this.isAuthenticated())
            this.addAuthentication(requestOptions);
          HTTP.Request.Util.setAcceptHeader("application/ld+json", requestOptions);
          HTTP.Request.Util.setContentTypeHeader("application/ld+json", requestOptions);
          HTTP.Request.Util.setPreferredInteractionModel(NS.LDP.Class.RDFSource, requestOptions);
          return HTTP.Request.Service.post(containerURI, freeResources.toJSON(), requestOptions, new JSONLD.Parser.Class()).then(function(_a) {
            var expandedResult = _a[0],
                response = _a[1];
            var freeNodes = RDF.Node.Util.getFreeNodes(expandedResult);
            var ticketNodes = freeNodes.filter(function(freeNode) {
              return RDF.Node.Util.hasType(freeNode, Ticket.RDF_CLASS);
            });
            if (ticketNodes.length === 0)
              throw new HTTP.Errors.BadResponseError("No " + Ticket.RDF_CLASS + " was returned.", response);
            if (ticketNodes.length > 1)
              throw new HTTP.Errors.BadResponseError("Multiple " + Ticket.RDF_CLASS + " were returned.", response);
            var expandedTicket = ticketNodes[0];
            var ticket = Resource.Factory.create();
            var digestedSchema = _this.context.documents.getSchemaFor(expandedTicket);
            _this.context.documents.jsonldConverter.compact(expandedTicket, ticket, digestedSchema, _this.context.documents);
            return [ticket, response];
          });
        };
        Class.prototype.getAuthenticatedURL = function(uri, requestOptions) {
          var resourceURI = this.context.resolve(uri);
          return this.createTicket(resourceURI, requestOptions).then(function(_a) {
            var ticket = _a[0],
                response = _a[1];
            resourceURI += RDF.URI.Util.hasQuery(resourceURI) ? "&" : "?";
            resourceURI += "ticket=" + ticket.ticketKey;
            return resourceURI;
          });
        };
        Class.prototype.authenticateWithBasic = function(username, password) {
          var _this = this;
          var authenticator = this.authenticators[Method.BASIC];
          var authenticationToken;
          authenticationToken = new UsernameAndPasswordToken_1.default(username, password);
          this.clearAuthentication();
          var credentials;
          return authenticator.authenticate(authenticationToken).then(function(_credentials) {
            credentials = _credentials;
            return _this.getAuthenticatedAgent(authenticator);
          }).then(function(persistedAgent) {
            _this._authenticatedAgent = persistedAgent;
            _this.authenticator = authenticator;
            return credentials;
          });
        };
        Class.prototype.authenticateWithToken = function(userOrTokenOrCredentials, password) {
          var _this = this;
          var authenticator = this.authenticators[Method.TOKEN];
          var credentials = null;
          var authenticationToken = null;
          if (Utils.isString(userOrTokenOrCredentials) && Utils.isString(password)) {
            authenticationToken = new UsernameAndPasswordToken_1.default(userOrTokenOrCredentials, password);
          } else if (Token.Factory.hasRequiredValues(userOrTokenOrCredentials)) {
            credentials = userOrTokenOrCredentials;
          } else {
            return Promise.reject(new Errors.IllegalArgumentError("Parameters do not match with the authentication request."));
          }
          this.clearAuthentication();
          return authenticator.authenticate((authenticationToken) ? authenticationToken : credentials).then(function(_credentials) {
            credentials = _credentials;
            if (PersistedAgent.Factory.is(credentials.agent))
              return credentials.agent;
            return _this.getAuthenticatedAgent(authenticator);
          }).then(function(persistedAgent) {
            _this._authenticatedAgent = persistedAgent;
            credentials.agent = persistedAgent;
            _this.authenticator = authenticator;
            return credentials;
          });
        };
        Class.prototype.getAuthenticatedAgent = function(authenticator) {
          var requestOptions = {};
          authenticator.addAuthentication(requestOptions);
          return this.context.documents.get("agents/me/", requestOptions).then(function(_a) {
            var agentDocument = _a[0],
                response = _a[1];
            return agentDocument;
          });
        };
        return Class;
      }());
      exports_1("Class", Class);
      exports_1("default", Class);
    }
  };
});

$__System.register("5a", ["50", "14", "3b", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var HTTP,
      Auth,
      Resource,
      Utils;
  var Factory;
  function getACL(requestOptions) {
    var that = this;
    return that._documents.get(that.accessControlList.id, requestOptions).then(function(_a) {
      var acl = _a[0],
          response = _a[1];
      if (!Resource.Util.hasType(acl, Auth.ACL.RDF_CLASS))
        throw new HTTP.Errors.BadResponseError("The response does not contains a " + Auth.ACL.RDF_CLASS + " object.", response);
      return [acl, response];
    });
  }
  return {
    setters: [function(HTTP_1) {
      HTTP = HTTP_1;
    }, function(Auth_1) {
      Auth = Auth_1;
    }, function(Resource_1) {
      Resource = Resource_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(object) {
          return Utils.hasPropertyDefined(object, "accessControlList") && Utils.hasFunction(object, "getACL");
        };
        Factory.decorate = function(document) {
          if (Factory.hasClassProperties(document))
            return document;
          var rdfSource = document;
          Object.defineProperties(rdfSource, {"getACL": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: getACL
            }});
          return rdfSource;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("5b", ["16", "5c", "22", "48", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var IllegalArgumentError_1,
      ObjectSchema,
      XSD,
      URI,
      Utils;
  var allowedTypes,
      Factory,
      Util;
  return {
    setters: [function(IllegalArgumentError_1_1) {
      IllegalArgumentError_1 = IllegalArgumentError_1_1;
    }, function(ObjectSchema_1) {
      ObjectSchema = ObjectSchema_1;
    }, function(XSD_1) {
      XSD = XSD_1;
    }, function(URI_1) {
      URI = URI_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      allowedTypes = ["numeric", "string", "boolean", "dateTime"];
      Factory = (function() {
        function Factory() {}
        Factory.is = function(object) {
          return Utils.hasPropertyDefined(object, "orderBy") || Utils.hasPropertyDefined(object, "limit") || Utils.hasPropertyDefined(object, "offset");
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
      Util = (function() {
        function Util() {}
        Util.stringifyRetrievalPreferences = function(retrievalPreferences, digestedSchema) {
          var stringPreferences = "";
          if ("limit" in retrievalPreferences) {
            stringPreferences += "limit=" + retrievalPreferences.limit;
          }
          if ("offset" in retrievalPreferences) {
            stringPreferences += (stringPreferences ? "&" : "") + "offset=" + retrievalPreferences.offset;
          }
          if ("orderBy" in retrievalPreferences && retrievalPreferences.orderBy.length > 0) {
            stringPreferences += (stringPreferences ? "&" : "") + "orderBy=";
            var stringOrders = [];
            for (var _i = 0,
                _a = retrievalPreferences.orderBy; _i < _a.length; _i++) {
              var orderBy = _a[_i];
              var stringOrder = "";
              if ("@id" in orderBy) {
                var id = orderBy["@id"];
                var descending = false;
                if (id.startsWith("-")) {
                  descending = true;
                  id = id.substr(1);
                }
                if (!!digestedSchema && URI.Util.isRelative(id))
                  id = ObjectSchema.Util.resolveURI(id, digestedSchema);
                stringOrder += (descending ? "-" : "") + "<" + encodeURI(id).replace("#", "%23") + ">";
              }
              if ("@type" in orderBy) {
                if (!stringOrder)
                  throw new IllegalArgumentError_1.default("The @id property is missing in OrderBy property.");
                var type = orderBy["@type"];
                if (allowedTypes.indexOf(type) === -1)
                  throw new IllegalArgumentError_1.default("The @type value specified is not valid.");
                if (type !== "numeric")
                  type = "<" + encodeURI(XSD.DataType[type]).replace("#", "%23") + ">";
                stringOrder += ";" + type;
              }
              if ("@language" in orderBy) {
                if (!stringOrder)
                  throw new IllegalArgumentError_1.default("The @id property is missing in OrderBy property.");
                stringOrder += ";" + orderBy["@language"];
              }
              stringOrders.push(stringOrder);
            }
            stringPreferences += stringOrders.join(",");
          }
          return stringPreferences ? "?" + stringPreferences : stringPreferences;
        };
        return Util;
      }());
      exports_1("Util", Util);
    }
  };
});

$__System.register("5d", ["5", "50", "9", "a", "43", "10", "14", "15", "58", "54", "11", "17", "5a", "5e", "8", "6", "5c", "44", "5f", "3b", "5b"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Errors,
      HTTP,
      RDF,
      Utils,
      AccessPoint,
      AppRole,
      Auth,
      Document,
      FreeResources,
      JSONLD,
      PersistedAppRole,
      PersistedDocument,
      PersistedProtectedDocument,
      ProtectedDocument,
      Pointer,
      NS,
      ObjectSchema,
      LDP,
      SPARQL,
      Resource,
      RetrievalPreferences;
  var Documents;
  return {
    setters: [function(Errors_1) {
      Errors = Errors_1;
    }, function(HTTP_1) {
      HTTP = HTTP_1;
    }, function(RDF_1) {
      RDF = RDF_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }, function(AccessPoint_1) {
      AccessPoint = AccessPoint_1;
    }, function(AppRole_1) {
      AppRole = AppRole_1;
    }, function(Auth_1) {
      Auth = Auth_1;
    }, function(Document_1) {
      Document = Document_1;
    }, function(FreeResources_1) {
      FreeResources = FreeResources_1;
    }, function(JSONLD_1) {
      JSONLD = JSONLD_1;
    }, function(PersistedAppRole_1) {
      PersistedAppRole = PersistedAppRole_1;
    }, function(PersistedDocument_1) {
      PersistedDocument = PersistedDocument_1;
    }, function(PersistedProtectedDocument_1) {
      PersistedProtectedDocument = PersistedProtectedDocument_1;
    }, function(ProtectedDocument_1) {
      ProtectedDocument = ProtectedDocument_1;
    }, function(Pointer_1) {
      Pointer = Pointer_1;
    }, function(NS_1) {
      NS = NS_1;
    }, function(ObjectSchema_1) {
      ObjectSchema = ObjectSchema_1;
    }, function(LDP_1) {
      LDP = LDP_1;
    }, function(SPARQL_1) {
      SPARQL = SPARQL_1;
    }, function(Resource_1) {
      Resource = Resource_1;
    }, function(RetrievalPreferences_1) {
      RetrievalPreferences = RetrievalPreferences_1;
    }],
    execute: function() {
      Documents = (function() {
        function Documents(context) {
          if (context === void 0) {
            context = null;
          }
          this.context = context;
          this.pointers = new Map();
          this.documentsBeingResolved = new Map();
          if (!!this.context && !!this.context.parentContext) {
            var contextJSONLDConverter = this.context.parentContext.documents.jsonldConverter;
            this._jsonldConverter = new JSONLD.Converter.Class(contextJSONLDConverter.literalSerializers);
          } else {
            this._jsonldConverter = new JSONLD.Converter.Class();
          }
        }
        Object.defineProperty(Documents.prototype, "jsonldConverter", {
          get: function() {
            return this._jsonldConverter;
          },
          enumerable: true,
          configurable: true
        });
        Documents.prototype.inScope = function(idOrPointer) {
          var id = Pointer.Factory.is(idOrPointer) ? idOrPointer.id : idOrPointer;
          if (RDF.URI.Util.isBNodeID(id))
            return false;
          if (!!this.context) {
            if (RDF.URI.Util.isPrefixed(id))
              id = ObjectSchema.Digester.resolvePrefixedURI(id, this.context.getObjectSchema());
            var baseURI = this.context.getBaseURI();
            if (RDF.URI.Util.isRelative(id))
              return true;
            if (RDF.URI.Util.isBaseOf(baseURI, id))
              return true;
          } else {
            if (RDF.URI.Util.isAbsolute(id))
              return true;
          }
          if (!!this.context && !!this.context.parentContext)
            return this.context.parentContext.documents.inScope(id);
          return RDF.URI.Util.isRelative(id);
        };
        Documents.prototype.hasPointer = function(id) {
          id = this.getPointerID(id);
          if (this.pointers.has(id))
            return true;
          if (!!this.context && !!this.context.parentContext)
            return this.context.parentContext.documents.hasPointer(id);
          return false;
        };
        Documents.prototype.getPointer = function(id) {
          var localID = this.getPointerID(id);
          if (localID === null) {
            if (!!this.context && !!this.context.parentContext)
              return this.context.parentContext.documents.getPointer(id);
            throw new Errors.IllegalArgumentError("The pointer id is not supported by this module.");
          }
          var pointer;
          if (!this.pointers.has(localID)) {
            pointer = this.createPointer(localID);
            this.pointers.set(localID, pointer);
          }
          return this.pointers.get(localID);
        };
        Documents.prototype.get = function(uri, requestOptions) {
          var _this = this;
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          var pointerID = this.getPointerID(uri);
          uri = this.getRequestURI(uri);
          this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.RDFSource);
          if (this.hasPointer(uri)) {
            var pointer = this.getPointer(uri);
            if (pointer.isResolved()) {
              return Promise.resolve([pointer, null]);
            }
          }
          if (this.documentsBeingResolved.has(pointerID))
            return this.documentsBeingResolved.get(pointerID);
          var promise = HTTP.Request.Service.get(uri, requestOptions, new RDF.Document.Parser()).then(function(_a) {
            var rdfDocuments = _a[0],
                response = _a[1];
            var eTag = HTTP.Response.Util.getETag(response);
            if (eTag === null)
              throw new HTTP.Errors.BadResponseError("The response doesn't contain an ETag", response);
            var locationHeader = response.getHeader("Content-Location");
            if (!!locationHeader) {
              if (locationHeader.values.length !== 1)
                throw new HTTP.Errors.BadResponseError("The response contains more than one Content-Location header.", response);
              uri = locationHeader.toString();
              if (!uri)
                throw new HTTP.Errors.BadResponseError("The response doesn't contain a valid 'Content-Location' header.", response);
            }
            var rdfDocument = _this.getRDFDocument(uri, rdfDocuments, response);
            if (rdfDocument === null)
              throw new HTTP.Errors.BadResponseError("No document was returned.", response);
            var document = _this._getPersistedDocument(rdfDocument, response);
            document._etag = eTag;
            _this.documentsBeingResolved.delete(pointerID);
            return [document, response];
          });
          this.documentsBeingResolved.set(pointerID, promise);
          return promise;
        };
        Documents.prototype.exists = function(documentURI, requestOptions) {
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          documentURI = this.getRequestURI(documentURI);
          this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.RDFSource);
          return HTTP.Request.Service.head(documentURI, requestOptions).then(function(response) {
            return [true, response];
          }, function(error) {
            if (error.response.status === 404)
              return [false, error.response];
            return Promise.reject(error);
          });
        };
        Documents.prototype.createChild = function(parentURI, childObject, slugOrRequestOptions, requestOptions) {
          var _this = this;
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          var slug = Utils.isString(slugOrRequestOptions) ? slugOrRequestOptions : null;
          requestOptions = !Utils.isString(slugOrRequestOptions) && !!slugOrRequestOptions ? slugOrRequestOptions : requestOptions;
          if (PersistedDocument.Factory.is(childObject))
            return Promise.reject(new Errors.IllegalArgumentError("The child provided has been already persisted."));
          var childDocument = Document.Factory.is(childObject) ? childObject : Document.Factory.createFrom(childObject);
          parentURI = this.getRequestURI(parentURI);
          this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.Container);
          HTTP.Request.Util.setContentTypeHeader("application/ld+json", requestOptions);
          if (childDocument.id) {
            var childURI = childDocument.id;
            if (!!this.context)
              childURI = this.context.resolve(childURI);
            if (!RDF.URI.Util.isBaseOf(parentURI, childURI)) {
              return Promise.reject(new Errors.IllegalArgumentError("The childDocument's URI is not relative to the parentURI specified"));
            }
          }
          if (childDocument["__CarbonSDK_InProgressOfPersisting"])
            return Promise.reject(new Errors.IllegalArgumentError("The childDocument is already being persisted."));
          Object.defineProperty(childDocument, "__CarbonSDK_InProgressOfPersisting", {
            configurable: true,
            enumerable: false,
            writable: false,
            value: true
          });
          var body = childDocument.toJSON(this, this.jsonldConverter);
          if (!!slug)
            HTTP.Request.Util.setSlug(slug, requestOptions);
          return HTTP.Request.Service.post(parentURI, body, requestOptions).then(function(response) {
            delete childDocument["__CarbonSDK_InProgressOfPersisting"];
            var locationHeader = response.getHeader("Location");
            if (locationHeader === null || locationHeader.values.length < 1)
              throw new HTTP.Errors.BadResponseError("The response is missing a Location header.", response);
            if (locationHeader.values.length !== 1)
              throw new HTTP.Errors.BadResponseError("The response contains more than one Location header.", response);
            var localID = _this.getPointerID(locationHeader.values[0].toString());
            var persistedDocument = PersistedDocument.Factory.decorate(_this.createPointerFrom(childDocument, localID), _this);
            _this.pointers.set(localID, persistedDocument);
            return [persistedDocument, response];
          });
        };
        Documents.prototype.createChildAndRetrieve = function(parentURI, childObject, slugOrRequestOptions, requestOptions) {
          var _this = this;
          var createResponse;
          return this.createChild(parentURI, childObject, slugOrRequestOptions, requestOptions).then(function(_a) {
            var document = _a[0],
                response = _a[1];
            createResponse = response;
            return _this.get(document.id);
          }).then(function(_a) {
            var persistedDocument = _a[0],
                response = _a[1];
            return [persistedDocument, [createResponse, response]];
          });
        };
        Documents.prototype.listChildren = function(parentURI, requestOptions) {
          var _this = this;
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          parentURI = this.getRequestURI(parentURI);
          this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.Container);
          var containerRetrievalPreferences = {
            include: [NS.LDP.Class.PreferContainment],
            omit: [NS.LDP.Class.PreferMembership, NS.LDP.Class.PreferMinimalContainer, NS.C.Class.PreferContainmentResources, NS.C.Class.PreferMembershipResources]
          };
          HTTP.Request.Util.setContainerRetrievalPreferences(containerRetrievalPreferences, requestOptions);
          return HTTP.Request.Service.get(parentURI, requestOptions, new RDF.Document.Parser()).then(function(_a) {
            var rdfDocuments = _a[0],
                response = _a[1];
            var rdfDocument = _this.getRDFDocument(parentURI, rdfDocuments, response);
            if (rdfDocument === null)
              return [[], response];
            var documentResource = _this.getDocumentResource(rdfDocument, response);
            var childPointers = RDF.Value.Util.getPropertyPointers(documentResource, NS.LDP.Predicate.contains, _this);
            var persistedChildPointers = childPointers.map(function(pointer) {
              return PersistedDocument.Factory.decorate(pointer, _this);
            });
            return [persistedChildPointers, response];
          });
        };
        Documents.prototype.getChildren = function(parentURI, retPrefReqOpt, requestOptions) {
          var _this = this;
          var retrievalPreferences = RetrievalPreferences.Factory.is(retPrefReqOpt) ? retPrefReqOpt : null;
          requestOptions = HTTP.Request.Util.isOptions(retPrefReqOpt) ? retPrefReqOpt : (HTTP.Request.Util.isOptions(requestOptions) ? requestOptions : {});
          parentURI = this.getRequestURI(parentURI);
          this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.Container);
          var containerURI = parentURI;
          if (!!retrievalPreferences)
            parentURI += RetrievalPreferences.Util.stringifyRetrievalPreferences(retrievalPreferences, this.getGeneralSchema());
          var containerRetrievalPreferences = {
            include: [NS.LDP.Class.PreferContainment, NS.C.Class.PreferContainmentResources],
            omit: [NS.LDP.Class.PreferMembership, NS.LDP.Class.PreferMinimalContainer, NS.C.Class.PreferMembershipResources]
          };
          HTTP.Request.Util.setContainerRetrievalPreferences(containerRetrievalPreferences, requestOptions);
          return HTTP.Request.Service.get(parentURI, requestOptions, new JSONLD.Parser.Class()).then(function(_a) {
            var expandedResult = _a[0],
                response = _a[1];
            var freeNodes = RDF.Node.Util.getFreeNodes(expandedResult);
            var rdfDocuments = RDF.Document.Util.getDocuments(expandedResult).filter(function(document) {
              return document["@id"] !== containerURI;
            });
            var resources = _this.getPersistedMetadataResources(freeNodes, rdfDocuments, response);
            return [resources, response];
          });
        };
        Documents.prototype.createAccessPoint = function(documentURI, accessPoint, slugOrRequestOptions, requestOptions) {
          var _this = this;
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          var slug = Utils.isString(slugOrRequestOptions) ? slugOrRequestOptions : null;
          requestOptions = !Utils.isString(slugOrRequestOptions) && !!slugOrRequestOptions ? slugOrRequestOptions : requestOptions;
          documentURI = this.getRequestURI(documentURI);
          this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.RDFSource);
          HTTP.Request.Util.setContentTypeHeader("application/ld+json", requestOptions);
          if (PersistedDocument.Factory.is(accessPoint))
            return Promise.reject(new Errors.IllegalArgumentError("The accessPoint provided has been already persisted."));
          var accessPointDocument = AccessPoint.Factory.is(accessPoint) ? accessPoint : AccessPoint.Factory.createFrom(accessPoint, this.getPointer(documentURI), accessPoint.hasMemberRelation, accessPoint.isMemberOfRelation);
          if (accessPointDocument.membershipResource.id !== documentURI)
            return Promise.reject(new Errors.IllegalArgumentError("The documentURI must be the same as the accessPoint's membershipResource"));
          if (accessPointDocument.id) {
            var childURI = accessPointDocument.id;
            if (!!this.context)
              childURI = this.context.resolve(childURI);
            if (!RDF.URI.Util.isBaseOf(documentURI, childURI)) {
              return Promise.reject(new Errors.IllegalArgumentError("The accessPoint's URI is not relative to the parentURI specified"));
            }
          }
          if (accessPoint["__CarbonSDK_InProgressOfPersisting"])
            return Promise.reject(new Errors.IllegalArgumentError("The accessPoint is already being persisted."));
          Object.defineProperty(accessPoint, "__CarbonSDK_InProgressOfPersisting", {
            configurable: true,
            enumerable: false,
            writable: false,
            value: true
          });
          var body = accessPointDocument.toJSON(this, this.jsonldConverter);
          if (!!slug)
            HTTP.Request.Util.setSlug(slug, requestOptions);
          return HTTP.Request.Service.post(documentURI, body, requestOptions).then(function(response) {
            delete accessPoint["__CarbonSDK_InProgressOfPersisting"];
            var locationHeader = response.getHeader("Location");
            if (locationHeader === null || locationHeader.values.length < 1)
              throw new HTTP.Errors.BadResponseError("The response is missing a Location header.", response);
            if (locationHeader.values.length !== 1)
              throw new HTTP.Errors.BadResponseError("The response contains more than one Location header.", response);
            var localID = _this.getPointerID(locationHeader.values[0].toString());
            var persistedAccessPoint = PersistedDocument.Factory.decorate(_this.createPointerFrom(accessPointDocument, localID), _this);
            _this.pointers.set(localID, persistedAccessPoint);
            return [persistedAccessPoint, response];
          });
        };
        Documents.prototype.upload = function(parentURI, data, slugOrRequestOptions, requestOptions) {
          var _this = this;
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          var slug = Utils.isString(slugOrRequestOptions) ? slugOrRequestOptions : null;
          requestOptions = !Utils.isString(slugOrRequestOptions) && !!slugOrRequestOptions ? slugOrRequestOptions : requestOptions;
          if (typeof Blob !== "undefined") {
            if (!(data instanceof Blob))
              return Promise.reject(new Errors.IllegalArgumentError("The data is not a valid Blob object."));
            HTTP.Request.Util.setContentTypeHeader(data.type, requestOptions);
          } else {
            if (!(data instanceof Buffer))
              return Promise.reject(new Errors.IllegalArgumentError("The data is not a valid Buffer object."));
            var fileType = require("file-type");
            var bufferType = fileType(data);
            HTTP.Request.Util.setContentTypeHeader(bufferType ? bufferType.mime : "application/octet-stream", requestOptions);
          }
          parentURI = this.getRequestURI(parentURI);
          this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.Container);
          if (!!slug)
            HTTP.Request.Util.setSlug(slug, requestOptions);
          return HTTP.Request.Service.post(parentURI, data, requestOptions).then(function(response) {
            var locationHeader = response.getHeader("Location");
            if (locationHeader === null || locationHeader.values.length < 1)
              throw new HTTP.Errors.BadResponseError("The response is missing a Location header.", response);
            if (locationHeader.values.length !== 1)
              throw new HTTP.Errors.BadResponseError("The response contains more than one Location header.", response);
            var locationURI = locationHeader.values[0].toString();
            var pointer = _this.getPointer(locationURI);
            return [pointer, response];
          });
        };
        Documents.prototype.listMembers = function(uri, nonReadReqOpt, reqOpt) {
          var _this = this;
          var includeNonReadable = Utils.isBoolean(nonReadReqOpt) ? nonReadReqOpt : true;
          var requestOptions = HTTP.Request.Util.isOptions(nonReadReqOpt) ? nonReadReqOpt : (HTTP.Request.Util.isOptions(reqOpt) ? reqOpt : {});
          uri = this.getRequestURI(uri);
          this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.Container);
          var containerRetrievalPreferences = {
            include: [NS.LDP.Class.PreferMinimalContainer, NS.LDP.Class.PreferMembership],
            omit: [NS.LDP.Class.PreferContainment, NS.C.Class.PreferContainmentResources, NS.C.Class.PreferMembershipResources]
          };
          if (includeNonReadable) {
            containerRetrievalPreferences.include.push(NS.C.Class.NonReadableMembershipResourceTriples);
          } else {
            containerRetrievalPreferences.omit.push(NS.C.Class.NonReadableMembershipResourceTriples);
          }
          HTTP.Request.Util.setContainerRetrievalPreferences(containerRetrievalPreferences, requestOptions);
          return HTTP.Request.Service.get(uri, requestOptions, new RDF.Document.Parser()).then(function(_a) {
            var rdfDocuments = _a[0],
                response = _a[1];
            var rdfDocument = _this.getRDFDocument(uri, rdfDocuments, response);
            if (rdfDocument === null)
              throw new HTTP.Errors.BadResponseError("No document was returned.", response);
            var documentResource = _this.getDocumentResource(rdfDocument, response);
            var membershipResource = _this.getMembershipResource(documentResource, rdfDocuments, response);
            if (membershipResource === null)
              return [[], response];
            var hasMemberRelation = RDF.Node.Util.getPropertyURI(documentResource, NS.LDP.Predicate.hasMemberRelation);
            var memberPointers = RDF.Value.Util.getPropertyPointers(membershipResource, hasMemberRelation, _this);
            var persistedMemberPointers = memberPointers.map(function(pointer) {
              return PersistedDocument.Factory.decorate(pointer, _this);
            });
            return [persistedMemberPointers, response];
          });
        };
        Documents.prototype.getMembers = function(uri, nonReadRetPrefReqOpt, retPrefReqOpt, requestOptions) {
          var _this = this;
          var includeNonReadable = Utils.isBoolean(nonReadRetPrefReqOpt) ? nonReadRetPrefReqOpt : true;
          var retrievalPreferences = RetrievalPreferences.Factory.is(nonReadRetPrefReqOpt) ? nonReadRetPrefReqOpt : (RetrievalPreferences.Factory.is(retPrefReqOpt) ? retPrefReqOpt : null);
          requestOptions = HTTP.Request.Util.isOptions(nonReadRetPrefReqOpt) ? nonReadRetPrefReqOpt : (HTTP.Request.Util.isOptions(retPrefReqOpt) ? retPrefReqOpt : (HTTP.Request.Util.isOptions(requestOptions) ? requestOptions : {}));
          uri = this.getRequestURI(uri);
          this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.Container);
          var containerURI = uri;
          if (!!retrievalPreferences)
            uri += RetrievalPreferences.Util.stringifyRetrievalPreferences(retrievalPreferences, this.getGeneralSchema());
          var containerRetrievalPreferences = {
            include: [NS.LDP.Class.PreferMinimalContainer, NS.LDP.Class.PreferMembership, NS.C.Class.PreferMembershipResources],
            omit: [NS.LDP.Class.PreferContainment, NS.C.Class.PreferContainmentResources]
          };
          if (includeNonReadable) {
            containerRetrievalPreferences.include.push(NS.C.Class.NonReadableMembershipResourceTriples);
          } else {
            containerRetrievalPreferences.omit.push(NS.C.Class.NonReadableMembershipResourceTriples);
          }
          HTTP.Request.Util.setContainerRetrievalPreferences(containerRetrievalPreferences, requestOptions);
          return HTTP.Request.Service.get(uri, requestOptions, new JSONLD.Parser.Class()).then(function(_a) {
            var expandedResult = _a[0],
                response = _a[1];
            var freeNodes = RDF.Node.Util.getFreeNodes(expandedResult);
            var rdfDocuments = RDF.Document.Util.getDocuments(expandedResult);
            var rdfDocument = _this.getRDFDocument(containerURI, rdfDocuments, response);
            if (rdfDocument === null)
              throw new HTTP.Errors.BadResponseError("No document was returned.", response);
            var containerResource = _this.getDocumentResource(rdfDocument, response);
            var membershipResource = _this.getMembershipResource(containerResource, rdfDocuments, response);
            if (membershipResource === null)
              return [[], response];
            rdfDocuments = rdfDocuments.filter(function(targetRDFDocument) {
              return !RDF.Node.Util.areEqual(targetRDFDocument, containerResource) && !RDF.Node.Util.areEqual(targetRDFDocument, membershipResource);
            });
            var resources = _this.getPersistedMetadataResources(freeNodes, rdfDocuments, response);
            return [resources, response];
          });
        };
        Documents.prototype.addMember = function(documentURI, memberORUri, requestOptions) {
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          return this.addMembers(documentURI, [memberORUri], requestOptions);
        };
        Documents.prototype.addMembers = function(documentURI, members, requestOptions) {
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          var pointers = [];
          for (var _i = 0,
              members_1 = members; _i < members_1.length; _i++) {
            var member = members_1[_i];
            member = Utils.isString(member) ? this.getPointer(member) : member;
            if (!Pointer.Factory.is(member))
              return Promise.reject(new Errors.IllegalArgumentError("No Carbon.Pointer or URI provided."));
            pointers.push(member);
          }
          documentURI = this.getRequestURI(documentURI);
          this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.Container);
          HTTP.Request.Util.setContentTypeHeader("application/ld+json", requestOptions);
          var document = LDP.AddMemberAction.Factory.createDocument(pointers);
          var body = document.toJSON(this, this.jsonldConverter);
          return HTTP.Request.Service.put(documentURI, body, requestOptions);
        };
        Documents.prototype.removeMember = function(documentURI, memberORUri, requestOptions) {
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          return this.removeMembers(documentURI, [memberORUri], requestOptions);
        };
        Documents.prototype.removeMembers = function(documentURI, members, requestOptions) {
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          var pointers = [];
          for (var _i = 0,
              members_2 = members; _i < members_2.length; _i++) {
            var member = members_2[_i];
            member = Utils.isString(member) ? this.getPointer(member) : member;
            if (!Pointer.Factory.is(member))
              return Promise.reject(new Errors.IllegalArgumentError("No Carbon.Pointer or URI provided."));
            pointers.push(member);
          }
          documentURI = this.getRequestURI(documentURI);
          this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.Container);
          HTTP.Request.Util.setContentTypeHeader("application/ld+json", requestOptions);
          var document = LDP.RemoveMemberAction.Factory.createDocument(pointers);
          var containerRetrievalPreferences = {
            include: [NS.C.Class.PreferSelectedMembershipTriples],
            omit: [NS.C.Class.PreferMembershipTriples]
          };
          HTTP.Request.Util.setContainerRetrievalPreferences(containerRetrievalPreferences, requestOptions, false);
          var body = document.toJSON(this, this.jsonldConverter);
          return HTTP.Request.Service.delete(documentURI, body, requestOptions);
        };
        Documents.prototype.removeAllMembers = function(documentURI, requestOptions) {
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          documentURI = this.getRequestURI(documentURI);
          this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.Container);
          var containerRetrievalPreferences = {
            include: [NS.C.Class.PreferMembershipTriples],
            omit: [NS.C.Class.PreferMembershipResources, NS.C.Class.PreferContainmentTriples, NS.C.Class.PreferContainmentResources, NS.C.Class.PreferContainer]
          };
          HTTP.Request.Util.setContainerRetrievalPreferences(containerRetrievalPreferences, requestOptions, false);
          return HTTP.Request.Service.delete(documentURI, requestOptions);
        };
        Documents.prototype.save = function(persistedDocument, requestOptions) {
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          var uri = this.getRequestURI(persistedDocument.id);
          this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.RDFSource);
          HTTP.Request.Util.setContentTypeHeader("application/ld+json", requestOptions);
          HTTP.Request.Util.setIfMatchHeader(persistedDocument._etag, requestOptions);
          persistedDocument._normalize();
          var body = persistedDocument.toJSON(this, this.jsonldConverter);
          return HTTP.Request.Service.put(uri, body, requestOptions).then(function(response) {
            return [persistedDocument, response];
          });
        };
        Documents.prototype.refresh = function(persistedDocument, requestOptions) {
          var _this = this;
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          var uri = this.getRequestURI(persistedDocument.id);
          this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.RDFSource);
          return HTTP.Request.Service.head(uri, requestOptions).then(function(headerResponse) {
            var eTag = HTTP.Response.Util.getETag(headerResponse);
            if (eTag === persistedDocument._etag)
              return [persistedDocument, null];
            return HTTP.Request.Service.get(uri, requestOptions, new RDF.Document.Parser());
          }).then(function(_a) {
            var rdfDocuments = _a[0],
                response = _a[1];
            if (response === null)
              return [rdfDocuments, response];
            var eTag = HTTP.Response.Util.getETag(response);
            if (eTag === null)
              throw new HTTP.Errors.BadResponseError("The response doesn't contain an ETag", response);
            var rdfDocument = _this.getRDFDocument(uri, rdfDocuments, response);
            if (rdfDocument === null)
              throw new HTTP.Errors.BadResponseError("No document was returned.", response);
            var updatedPersistedDocument = _this._getPersistedDocument(rdfDocument, response);
            updatedPersistedDocument._etag = eTag;
            return [updatedPersistedDocument, response];
          });
        };
        Documents.prototype.saveAndRefresh = function(persistedDocument, requestOptions) {
          var _this = this;
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          var saveResponse;
          return this.save(persistedDocument).then(function(_a) {
            var document = _a[0],
                response = _a[1];
            saveResponse = response;
            return _this.refresh(persistedDocument);
          }).then(function(_a) {
            var document = _a[0],
                response = _a[1];
            return [persistedDocument, [saveResponse, response]];
          });
        };
        Documents.prototype.delete = function(documentURI, requestOptions) {
          var _this = this;
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          documentURI = this.getRequestURI(documentURI);
          this.setDefaultRequestOptions(requestOptions, NS.LDP.Class.RDFSource);
          return HTTP.Request.Service.delete(documentURI, requestOptions).then(function(response) {
            var pointerID = _this.getPointerID(documentURI);
            _this.pointers.delete(pointerID);
            return response;
          });
        };
        Documents.prototype.getDownloadURL = function(documentURI, requestOptions) {
          if (!this.context.auth)
            Promise.reject(new Errors.IllegalStateError("This instance doesn't support Authenticated request."));
          return this.context.auth.getAuthenticatedURL(documentURI, requestOptions);
        };
        Documents.prototype.getGeneralSchema = function() {
          if (!this.context)
            return new ObjectSchema.DigestedObjectSchema();
          var schema = ObjectSchema.Digester.combineDigestedObjectSchemas([this.context.getObjectSchema()]);
          if (this.context.hasSetting("vocabulary"))
            schema.vocab = this.context.resolve(this.context.getSetting("vocabulary"));
          return schema;
        };
        Documents.prototype.getSchemaFor = function(object) {
          var schema = ("@id" in object) ? this.getDigestedObjectSchemaForExpandedObject(object) : this.getDigestedObjectSchemaForDocument(object);
          return schema;
        };
        Documents.prototype.executeRawASKQuery = function(documentURI, askQuery, requestOptions) {
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          documentURI = this.getRequestURI(documentURI);
          if (this.context && this.context.auth && this.context.auth.isAuthenticated())
            this.context.auth.addAuthentication(requestOptions);
          return SPARQL.Service.executeRawASKQuery(documentURI, askQuery, requestOptions);
        };
        Documents.prototype.executeASKQuery = function(documentURI, askQuery, requestOptions) {
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          documentURI = this.getRequestURI(documentURI);
          if (this.context && this.context.auth && this.context.auth.isAuthenticated())
            this.context.auth.addAuthentication(requestOptions);
          return SPARQL.Service.executeASKQuery(documentURI, askQuery, requestOptions);
        };
        Documents.prototype.executeRawSELECTQuery = function(documentURI, selectQuery, requestOptions) {
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          documentURI = this.getRequestURI(documentURI);
          if (this.context && this.context.auth && this.context.auth.isAuthenticated())
            this.context.auth.addAuthentication(requestOptions);
          return SPARQL.Service.executeRawSELECTQuery(documentURI, selectQuery, requestOptions);
        };
        Documents.prototype.executeSELECTQuery = function(documentURI, selectQuery, requestOptions) {
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          documentURI = this.getRequestURI(documentURI);
          if (this.context && this.context.auth && this.context.auth.isAuthenticated())
            this.context.auth.addAuthentication(requestOptions);
          return SPARQL.Service.executeSELECTQuery(documentURI, selectQuery, this, requestOptions);
        };
        Documents.prototype.executeRawCONSTRUCTQuery = function(documentURI, constructQuery, requestOptions) {
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          documentURI = this.getRequestURI(documentURI);
          if (this.context && this.context.auth && this.context.auth.isAuthenticated())
            this.context.auth.addAuthentication(requestOptions);
          return SPARQL.Service.executeRawCONSTRUCTQuery(documentURI, constructQuery, requestOptions);
        };
        Documents.prototype.executeRawDESCRIBEQuery = function(documentURI, describeQuery, requestOptions) {
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          documentURI = this.getRequestURI(documentURI);
          if (this.context && this.context.auth && this.context.auth.isAuthenticated())
            this.context.auth.addAuthentication(requestOptions);
          return SPARQL.Service.executeRawDESCRIBEQuery(documentURI, describeQuery, requestOptions);
        };
        Documents.prototype.executeUPDATE = function(documentURI, update, requestOptions) {
          if (requestOptions === void 0) {
            requestOptions = {};
          }
          if (!RDF.URI.Util.isAbsolute(documentURI)) {
            if (!this.context)
              throw new Errors.IllegalArgumentError("This Documents instance doesn't support relative URIs.");
            documentURI = this.context.resolve(documentURI);
          }
          if (this.context && this.context.auth && this.context.auth.isAuthenticated())
            this.context.auth.addAuthentication(requestOptions);
          return SPARQL.Service.executeUPDATE(documentURI, update, requestOptions);
        };
        Documents.prototype._getPersistedDocument = function(rdfDocument, response) {
          var documentResource = this.getDocumentResource(rdfDocument, response);
          var fragmentResources = RDF.Document.Util.getBNodeResources(rdfDocument);
          fragmentResources = fragmentResources.concat(RDF.Document.Util.getFragmentResources(rdfDocument));
          var uri = documentResource["@id"];
          var documentPointer = this.getPointer(uri);
          if (documentPointer.isResolved()) {
            this.updatePersistedDocument(documentPointer, documentResource, fragmentResources);
          } else {
            this.createPersistedDocument(documentPointer, documentResource, fragmentResources);
          }
          return documentPointer;
        };
        Documents.prototype._getFreeResources = function(nodes) {
          var freeResourcesDocument = FreeResources.Factory.create(this);
          var resources = nodes.map(function(node) {
            return freeResourcesDocument.createResource(node["@id"]);
          });
          this.compact(nodes, resources, freeResourcesDocument);
          return freeResourcesDocument;
        };
        Documents.prototype.getRDFDocument = function(requestURL, rdfDocuments, response) {
          rdfDocuments = rdfDocuments.filter(function(rdfDocument) {
            return rdfDocument["@id"] === requestURL;
          });
          if (rdfDocuments.length > 1)
            throw new HTTP.Errors.BadResponseError("Several documents share the same id.", response);
          return rdfDocuments.length > 0 ? rdfDocuments[0] : null;
        };
        Documents.prototype.getDocumentResource = function(rdfDocument, response) {
          var documentResources = RDF.Document.Util.getDocumentResources(rdfDocument);
          if (documentResources.length === 0)
            throw new HTTP.Errors.BadResponseError("The RDFDocument: " + rdfDocument["@id"] + ", doesn't contain a document resource.", response);
          if (documentResources.length > 1)
            throw new HTTP.Errors.BadResponseError("The RDFDocument: " + rdfDocument["@id"] + ", contains more than one document resource.", response);
          return documentResources[0];
        };
        Documents.prototype.getPointerID = function(uri) {
          if (RDF.URI.Util.isBNodeID(uri))
            throw new Errors.IllegalArgumentError("BNodes cannot be fetched directly.");
          if (!!this.context) {
            if (RDF.URI.Util.isPrefixed(uri))
              uri = ObjectSchema.Digester.resolvePrefixedURI(uri, this.getGeneralSchema());
            if (!RDF.URI.Util.isRelative(uri)) {
              var baseURI = this.context.getBaseURI();
              if (!RDF.URI.Util.isBaseOf(baseURI, uri))
                return null;
              return uri.substring(baseURI.length);
            } else {
              return uri[0] === "/" ? uri.substr(1) : uri;
            }
          } else {
            if (RDF.URI.Util.isRelative(uri))
              throw new Errors.IllegalArgumentError("This Documents instance doesn't support relative URIs.");
            if (RDF.URI.Util.isPrefixed(uri))
              throw new Errors.IllegalArgumentError("This Documents instance doesn't support prefixed URIs.");
            return uri;
          }
        };
        Documents.prototype.createPointer = function(localID) {
          return this.createPointerFrom({}, localID);
        };
        Documents.prototype.createPointerFrom = function(object, localID) {
          var _this = this;
          var id = !!this.context ? this.context.resolve(localID) : localID;
          var pointer = Pointer.Factory.createFrom(object, id);
          Object.defineProperty(pointer, "resolve", {
            writable: false,
            enumerable: false,
            configurable: true,
            value: function() {
              return _this.get(id);
            }
          });
          return pointer;
        };
        Documents.prototype.compact = function(expandedObjectOrObjects, targetObjectOrObjects, pointerLibrary) {
          if (!Utils.isArray(expandedObjectOrObjects))
            return this.compactSingle(expandedObjectOrObjects, targetObjectOrObjects, pointerLibrary);
          var expandedObjects = expandedObjectOrObjects;
          var targetObjects = !!targetObjectOrObjects ? targetObjectOrObjects : [];
          for (var i = 0,
              length = expandedObjects.length; i < length; i++) {
            var expandedObject = expandedObjects[i];
            var targetObject = targetObjects[i] = !!targetObjects[i] ? targetObjects[i] : {};
            this.compactSingle(expandedObject, targetObject, pointerLibrary);
          }
          return targetObjects;
        };
        Documents.prototype.compactSingle = function(expandedObject, targetObject, pointerLibrary) {
          var digestedSchema = this.getDigestedObjectSchemaForExpandedObject(expandedObject);
          return this.jsonldConverter.compact(expandedObject, targetObject, digestedSchema, pointerLibrary);
        };
        Documents.prototype.getDigestedObjectSchemaForExpandedObject = function(expandedObject) {
          var types = RDF.Node.Util.getTypes(expandedObject);
          return this.getDigestedObjectSchema(types, expandedObject["@id"]);
        };
        Documents.prototype.getDigestedObjectSchemaForDocument = function(document) {
          var types = Resource.Util.getTypes(document);
          return this.getDigestedObjectSchema(types, document.id);
        };
        Documents.prototype.getDigestedObjectSchema = function(objectTypes, objectID) {
          if (!this.context)
            return new ObjectSchema.DigestedObjectSchema();
          var objectSchemas = [this.context.getObjectSchema()];
          if (Utils.isDefined(objectID) && !RDF.URI.Util.hasFragment(objectID) && !RDF.URI.Util.isBNodeID(objectID))
            objectSchemas.push(Documents._documentSchema);
          for (var _i = 0,
              objectTypes_1 = objectTypes; _i < objectTypes_1.length; _i++) {
            var type = objectTypes_1[_i];
            if (this.context.hasObjectSchema(type))
              objectSchemas.push(this.context.getObjectSchema(type));
          }
          var digestedSchema = ObjectSchema.Digester.combineDigestedObjectSchemas(objectSchemas);
          if (this.context.hasSetting("vocabulary"))
            digestedSchema.vocab = this.context.resolve(this.context.getSetting("vocabulary"));
          return digestedSchema;
        };
        Documents.prototype.updateObject = function(target, source) {
          var keys = Utils.A.joinWithoutDuplicates(Object.keys(source), Object.keys(target));
          for (var _i = 0,
              keys_1 = keys; _i < keys_1.length; _i++) {
            var key = keys_1[_i];
            if (Utils.hasProperty(source, key)) {
              target[key] = source[key];
            } else {
              delete target[key];
            }
          }
          return target;
        };
        Documents.prototype.getAssociatedFragment = function(blankNodes, namedFragments, searchedFragment) {
          if (!RDF.URI.Util.isBNodeID(searchedFragment["@id"]))
            return namedFragments.get(searchedFragment["@id"]);
          var bNodeIdentifier = RDF.Value.Util.getProperty(searchedFragment, NS.C.Predicate.bNodeIdentifier, null);
          for (var _i = 0,
              blankNodes_1 = blankNodes; _i < blankNodes_1.length; _i++) {
            var fragment = blankNodes_1[_i];
            if (!RDF.URI.Util.isBNodeID(fragment.id))
              continue;
            var persistedBlankNode = fragment;
            if (!!persistedBlankNode.bNodeIdentifier && persistedBlankNode.bNodeIdentifier === bNodeIdentifier)
              return fragment;
          }
          return null;
        };
        Documents.prototype.getRequestURI = function(uri) {
          if (RDF.URI.Util.isRelative(uri)) {
            if (!this.context)
              throw new Errors.IllegalArgumentError("This Documents instance doesn't support relative URIs.");
            uri = this.context.resolve(uri);
          } else if (RDF.URI.Util.isPrefixed(uri)) {
            if (!this.context)
              throw new Errors.IllegalArgumentError("This Documents instance doesn't support prefixed URIs.");
            uri = ObjectSchema.Digester.resolvePrefixedURI(uri, this.context.getObjectSchema());
            if (RDF.URI.Util.isPrefixed(uri))
              throw new Errors.IllegalArgumentError("The prefixed URI \"" + uri + "\" could not be resolved.");
          }
          return uri;
        };
        Documents.prototype.setDefaultRequestOptions = function(requestOptions, interactionModel) {
          if (this.context && this.context.auth && this.context.auth.isAuthenticated())
            this.context.auth.addAuthentication(requestOptions);
          HTTP.Request.Util.setAcceptHeader("application/ld+json", requestOptions);
          HTTP.Request.Util.setPreferredInteractionModel(interactionModel, requestOptions);
        };
        Documents.prototype.getMembershipResource = function(documentResource, rdfDocuments, response) {
          var membershipResource;
          var membershipResourceURI = RDF.Node.Util.getPropertyURI(documentResource, NS.LDP.Predicate.membershipResource);
          if (documentResource["@id"] === membershipResourceURI) {
            membershipResource = documentResource;
          } else if (membershipResourceURI === null) {
            if (documentResource["@type"].indexOf(NS.LDP.Class.BasicContainer) !== -1) {
              membershipResource = documentResource;
            } else {
              throw new HTTP.Errors.BadResponseError("The document is not an ldp:BasicContainer and it doesn't contain an ldp:membershipResource triple.", response);
            }
          } else {
            var membershipResourceDocument = this.getRDFDocument(membershipResourceURI, rdfDocuments, response);
            if (membershipResourceDocument === null)
              return null;
            membershipResource = this.getDocumentResource(membershipResourceDocument, response);
          }
          return membershipResource;
        };
        Documents.prototype.createPersistedDocument = function(documentPointer, documentResource, fragmentResources) {
          var persistedDocument = PersistedDocument.Factory.decorate(documentPointer, this);
          var fragments = [];
          for (var _i = 0,
              fragmentResources_1 = fragmentResources; _i < fragmentResources_1.length; _i++) {
            var fragmentResource = fragmentResources_1[_i];
            fragments.push(persistedDocument.createFragment(fragmentResource["@id"]));
          }
          this.compact(documentResource, persistedDocument, persistedDocument);
          this.compact(fragmentResources, fragments, persistedDocument);
          persistedDocument._syncSnapshot();
          fragments.forEach(function(fragment) {
            return fragment._syncSnapshot();
          });
          persistedDocument._syncSavedFragments();
          persistedDocument._resolved = true;
          if (persistedDocument.hasType(ProtectedDocument.RDF_CLASS))
            PersistedProtectedDocument.Factory.decorate(persistedDocument);
          if (persistedDocument.hasType(Auth.ACL.RDF_CLASS))
            Auth.PersistedACL.Factory.decorate(persistedDocument);
          if (persistedDocument.hasType(Auth.Agent.RDF_CLASS))
            Auth.PersistedAgent.Factory.decorate(persistedDocument);
          if (persistedDocument.hasType(AppRole.RDF_CLASS))
            PersistedAppRole.Factory.decorate(persistedDocument, this.context.auth ? this.context.auth.roles : null);
          return persistedDocument;
        };
        Documents.prototype.updatePersistedDocument = function(persistedDocument, documentResource, fragmentResources) {
          var namedFragmentsMap = new Map();
          var blankNodesArray = persistedDocument.getFragments().filter(function(fragment) {
            persistedDocument._removeFragment(fragment.id);
            if (RDF.URI.Util.isBNodeID(fragment.id))
              return true;
            namedFragmentsMap.set(fragment.id, fragment);
            return false;
          });
          var newFragments = [];
          for (var _i = 0,
              fragmentResources_2 = fragmentResources; _i < fragmentResources_2.length; _i++) {
            var fragmentResource = fragmentResources_2[_i];
            var fragment = this.getAssociatedFragment(blankNodesArray, namedFragmentsMap, fragmentResource);
            fragment = persistedDocument.createFragment(fragment || {}, fragmentResource["@id"]);
            newFragments.push([fragment, fragmentResource]);
          }
          for (var _a = 0,
              newFragments_1 = newFragments; _a < newFragments_1.length; _a++) {
            var _b = newFragments_1[_a],
                fragment = _b[0],
                resource = _b[1];
            this.updateObject(fragment, this.compact(resource, {}, persistedDocument));
            fragment._syncSnapshot();
          }
          persistedDocument._syncSavedFragments();
          this.updateObject(persistedDocument, this.compact(documentResource, {}, persistedDocument));
          persistedDocument._syncSnapshot();
          return persistedDocument;
        };
        Documents.prototype.getPersistedMetadataResources = function(freeNodes, rdfDocuments, response) {
          var _this = this;
          var freeResources = this._getFreeResources(freeNodes);
          var descriptionResources = freeResources.getResources().filter(LDP.ResponseMetadata.Factory.hasRDFClass);
          if (descriptionResources.length === 0)
            return [];
          if (descriptionResources.length > 1)
            throw new HTTP.Errors.BadResponseError("The response contained multiple " + LDP.ResponseMetadata.RDF_CLASS + " objects.", response);
          rdfDocuments.forEach(function(rdfDocument) {
            return _this._getPersistedDocument(rdfDocument, response);
          });
          var responseMetadata = descriptionResources[0];
          return responseMetadata.resourcesMetadata.map(function(resourceMetadata) {
            var resource = resourceMetadata.resource;
            resource._etag = resourceMetadata.eTag;
            return resource;
          });
        };
        Documents._documentSchema = ObjectSchema.Digester.digestSchema(Document.SCHEMA);
        return Documents;
      }());
      exports_1("default", Documents);
    }
  };
});

$__System.register("60", ["15", "6", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Document,
      NS,
      Utils;
  var RDF_CLASS,
      SCHEMA,
      Factory;
  return {
    setters: [function(Document_1) {
      Document = Document_1;
    }, function(NS_1) {
      NS = NS_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      exports_1("RDF_CLASS", RDF_CLASS = NS.C.Class.AddMemberAction);
      exports_1("SCHEMA", SCHEMA = {"targetMembers": {
          "@id": NS.C.Predicate.targetMember,
          "@type": "@id",
          "@container": "@set"
        }});
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(object) {
          return Utils.hasPropertyDefined(object, "targetMembers");
        };
        Factory.createDocument = function(targetMembers) {
          var document = Document.Factory.create();
          var fragment = document.createFragment({targetMembers: targetMembers});
          fragment.types.push(RDF_CLASS);
          return document;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("61", ["15", "5", "6", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Document,
      Errors,
      NS,
      Utils;
  var RDF_CLASS,
      Factory;
  return {
    setters: [function(Document_1) {
      Document = Document_1;
    }, function(Errors_1) {
      Errors = Errors_1;
    }, function(NS_1) {
      NS = NS_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      exports_1("RDF_CLASS", RDF_CLASS = NS.LDP.Class.DirectContainer);
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(resource) {
          return (Utils.hasPropertyDefined(resource, "membershipResource"));
        };
        Factory.is = function(object) {
          return (Factory.hasClassProperties(object) && Document.Factory.is(object) && object.hasType(RDF_CLASS));
        };
        Factory.create = function(membershipResource, hasMemberRelation, isMemberOfRelation) {
          return Factory.createFrom({}, membershipResource, hasMemberRelation, isMemberOfRelation);
        };
        Factory.createFrom = function(object, membershipResource, hasMemberRelation, isMemberOfRelation) {
          if (Factory.is(object))
            throw new Errors.IllegalArgumentError("The base object is already a DirectContainer");
          if (!membershipResource)
            throw new Errors.IllegalArgumentError("The membershipResource cannot be null");
          var container = object;
          if (!Document.Factory.is(object))
            container = Document.Factory.createFrom(object);
          container.types.push(NS.LDP.Class.Container);
          container.types.push(NS.LDP.Class.DirectContainer);
          container.membershipResource = membershipResource;
          container.hasMemberRelation = hasMemberRelation;
          container.isMemberOfRelation = isMemberOfRelation;
          return container;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("62", ["6"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var NS;
  var RDF_CLASS,
      SCHEMA;
  return {
    setters: [function(NS_1) {
      NS = NS_1;
    }],
    execute: function() {
      exports_1("RDF_CLASS", RDF_CLASS = NS.C.Class.Error);
      exports_1("SCHEMA", SCHEMA = {
        "carbonCode": {
          "@id": NS.C.Predicate.carbonCode,
          "@type": NS.XSD.DataType.string
        },
        "message": {
          "@id": NS.C.Predicate.message,
          "@type": NS.XSD.DataType.string
        }
      });
    }
  };
});

$__System.register("63", ["6", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var NS,
      Utils;
  var RDF_CLASS,
      Factory;
  return {
    setters: [function(NS_1) {
      NS = NS_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      exports_1("RDF_CLASS", RDF_CLASS = NS.LDP.Class.IndirectContainer);
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(resource) {
          return (Utils.hasPropertyDefined(resource, "insertedContentRelation"));
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("64", ["15", "6", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Document,
      NS,
      Utils;
  var RDF_CLASS,
      SCHEMA,
      Factory;
  return {
    setters: [function(Document_1) {
      Document = Document_1;
    }, function(NS_1) {
      NS = NS_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      exports_1("RDF_CLASS", RDF_CLASS = NS.C.Class.RemoveMemberAction);
      exports_1("SCHEMA", SCHEMA = {"targetMembers": {
          "@id": NS.C.Predicate.targetMember,
          "@type": "@id",
          "@container": "@set"
        }});
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(object) {
          return Utils.hasPropertyDefined(object, "targetMembers");
        };
        Factory.createDocument = function(targetMembers) {
          var document = Document.Factory.create();
          var fragment = document.createFragment({targetMembers: targetMembers});
          fragment.types.push(RDF_CLASS);
          return document;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("65", ["6", "a", "66"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var NS,
      Utils,
      VolatileResource;
  var RDF_CLASS,
      SCHEMA,
      Factory;
  return {
    setters: [function(NS_1) {
      NS = NS_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }, function(VolatileResource_1) {
      VolatileResource = VolatileResource_1;
    }],
    execute: function() {
      exports_1("RDF_CLASS", RDF_CLASS = NS.C.Class.ResponseMetadata);
      exports_1("SCHEMA", SCHEMA = {"resourcesMetadata": {
          "@id": NS.C.Predicate.resourceMetadata,
          "@type": "@id",
          "@container": "@set"
        }});
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(object) {
          return Utils.hasPropertyDefined(object, "resourcesMetadata");
        };
        Factory.is = function(object) {
          return VolatileResource.Factory.is(object) && Factory.hasClassProperties(object) && Factory.hasRDFClass(object);
        };
        Factory.hasRDFClass = function(object) {
          if (!object)
            return false;
          var types = ("@type" in object) ? object["@type"] : ("types" in object) ? object.types : [];
          return types.indexOf(RDF_CLASS) !== -1;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("66", ["6", "3b"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var NS,
      Resource;
  var RDF_CLASS,
      Factory;
  return {
    setters: [function(NS_1) {
      NS = NS_1;
    }, function(Resource_1) {
      Resource = Resource_1;
    }],
    execute: function() {
      exports_1("RDF_CLASS", RDF_CLASS = NS.C.Class.VolatileResource);
      Factory = (function() {
        function Factory() {}
        Factory.is = function(object) {
          return Resource.Factory.is(object) && Factory.hasRDFClass(object);
        };
        Factory.hasRDFClass = function(object) {
          if (!object)
            return false;
          var types = ("@type" in object) ? object["@type"] : ("types" in object) ? object.types : [];
          return types.indexOf(RDF_CLASS) !== -1;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("67", ["6", "a", "66"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var NS,
      Utils,
      VolatileResource;
  var RDF_CLASS,
      SCHEMA,
      Factory;
  return {
    setters: [function(NS_1) {
      NS = NS_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }, function(VolatileResource_1) {
      VolatileResource = VolatileResource_1;
    }],
    execute: function() {
      exports_1("RDF_CLASS", RDF_CLASS = NS.C.Class.ResourceMetadata);
      exports_1("SCHEMA", SCHEMA = {
        "eTag": {
          "@id": NS.C.Predicate.eTag,
          "@type": NS.XSD.DataType.string
        },
        "resource": {
          "@id": NS.C.Predicate.resource,
          "@type": "@id"
        }
      });
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(object) {
          return Utils.hasPropertyDefined(object, "eTag") && Utils.hasPropertyDefined(object, "resource");
        };
        Factory.is = function(object) {
          return VolatileResource.Factory.is(object) && Factory.hasClassProperties(object) && Factory.hasRDFClass(object);
        };
        Factory.hasRDFClass = function(object) {
          if (!object)
            return false;
          var types = ("@type" in object) ? object["@type"] : ("types" in object) ? object.types : [];
          return types.indexOf(RDF_CLASS) !== -1;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("44", ["60", "61", "62", "68", "63", "64", "65", "67"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var AddMemberAction,
      DirectContainer,
      Error,
      ErrorResponse,
      IndirectContainer,
      RemoveMemberAction,
      ResponseMetadata,
      ResourceMetadata;
  return {
    setters: [function(AddMemberAction_1) {
      AddMemberAction = AddMemberAction_1;
    }, function(DirectContainer_1) {
      DirectContainer = DirectContainer_1;
    }, function(Error_1) {
      Error = Error_1;
    }, function(ErrorResponse_1) {
      ErrorResponse = ErrorResponse_1;
    }, function(IndirectContainer_1) {
      IndirectContainer = IndirectContainer_1;
    }, function(RemoveMemberAction_1) {
      RemoveMemberAction = RemoveMemberAction_1;
    }, function(ResponseMetadata_1) {
      ResponseMetadata = ResponseMetadata_1;
    }, function(ResourceMetadata_1) {
      ResourceMetadata = ResourceMetadata_1;
    }],
    execute: function() {
      exports_1("AddMemberAction", AddMemberAction);
      exports_1("DirectContainer", DirectContainer);
      exports_1("Error", Error);
      exports_1("ErrorResponse", ErrorResponse);
      exports_1("IndirectContainer", IndirectContainer);
      exports_1("RemoveMemberAction", RemoveMemberAction);
      exports_1("ResponseMetadata", ResponseMetadata);
      exports_1("ResourceMetadata", ResourceMetadata);
    }
  };
});

$__System.register("5e", ["6"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var NS;
  var RDF_CLASS,
      SCHEMA;
  return {
    setters: [function(NS_1) {
      NS = NS_1;
    }],
    execute: function() {
      exports_1("RDF_CLASS", RDF_CLASS = NS.CS.Class.ProtectedDocument);
      exports_1("SCHEMA", SCHEMA = {"accessControlList": {
          "@id": NS.CS.Predicate.accessControlList,
          "@type": "@id"
        }});
    }
  };
});

$__System.register("69", ["6a", "6", "9", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Fragment,
      NS,
      RDF,
      Utils;
  var SCHEMA,
      Factory;
  return {
    setters: [function(Fragment_1) {
      Fragment = Fragment_1;
    }, function(NS_1) {
      NS = NS_1;
    }, function(RDF_1) {
      RDF = RDF_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      exports_1("SCHEMA", SCHEMA = {"bNodeIdentifier": {
          "@id": NS.C.Predicate.bNodeIdentifier,
          "@type": NS.XSD.DataType.string
        }});
      Factory = (function() {
        function Factory() {}
        Factory.createFrom = function(object, idOrDocument, document) {
          var id = !!idOrDocument && Utils.isString(idOrDocument) ? idOrDocument : RDF.URI.Util.generateBNodeID();
          document = document || idOrDocument;
          var fragment = Fragment.Factory.createFrom(object, id, document);
          return Factory.decorate(fragment, fragment.bNodeIdentifier);
        };
        Factory.decorate = function(object, bNodeIdentifier) {
          if (bNodeIdentifier === void 0) {
            bNodeIdentifier = Utils.UUID.generate();
          }
          var bNode = object;
          bNode.bNodeIdentifier = bNodeIdentifier;
          return bNode;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("59", ["5", "5c", "6", "8", "9", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Errors,
      ObjectSchema,
      NS,
      Pointer,
      RDF,
      Utils;
  var Class;
  return {
    setters: [function(Errors_1) {
      Errors = Errors_1;
    }, function(ObjectSchema_1) {
      ObjectSchema = ObjectSchema_1;
    }, function(NS_1) {
      NS = NS_1;
    }, function(Pointer_1) {
      Pointer = Pointer_1;
    }, function(RDF_1) {
      RDF = RDF_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      Class = (function() {
        function Class(literalSerializers) {
          this._literalSerializers = !!literalSerializers ? literalSerializers : Class.getDefaultSerializers();
        }
        Object.defineProperty(Class.prototype, "literalSerializers", {
          get: function() {
            return this._literalSerializers;
          },
          enumerable: true,
          configurable: true
        });
        ;
        Class.getDefaultSerializers = function() {
          var literalSerializers = new Map();
          literalSerializers.set(NS.XSD.DataType.date, RDF.Literal.Serializers.XSD.dateSerializer);
          literalSerializers.set(NS.XSD.DataType.dateTime, RDF.Literal.Serializers.XSD.dateTimeSerializer);
          literalSerializers.set(NS.XSD.DataType.time, RDF.Literal.Serializers.XSD.timeSerializer);
          literalSerializers.set(NS.XSD.DataType.integer, RDF.Literal.Serializers.XSD.integerSerializer);
          literalSerializers.set(NS.XSD.DataType.int, RDF.Literal.Serializers.XSD.integerSerializer);
          literalSerializers.set(NS.XSD.DataType.unsignedInt, RDF.Literal.Serializers.XSD.unsignedIntegerSerializer);
          literalSerializers.set(NS.XSD.DataType.long, RDF.Literal.Serializers.XSD.integerSerializer);
          literalSerializers.set(NS.XSD.DataType.unsignedLong, RDF.Literal.Serializers.XSD.unsignedIntegerSerializer);
          literalSerializers.set(NS.XSD.DataType.float, RDF.Literal.Serializers.XSD.floatSerializer);
          literalSerializers.set(NS.XSD.DataType.double, RDF.Literal.Serializers.XSD.floatSerializer);
          literalSerializers.set(NS.XSD.DataType.boolean, RDF.Literal.Serializers.XSD.booleanSerializer);
          literalSerializers.set(NS.XSD.DataType.string, RDF.Literal.Serializers.XSD.stringSerializer);
          return literalSerializers;
        };
        Class.prototype.compact = function(expandedObjectOrObjects, targetObjectOrObjectsOrDigestedContext, digestedSchemaOrPointerLibrary, pointerLibrary) {
          if (pointerLibrary === void 0) {
            pointerLibrary = null;
          }
          var targetObjectOrObjects = !pointerLibrary ? null : targetObjectOrObjectsOrDigestedContext;
          var digestedSchema = !pointerLibrary ? targetObjectOrObjectsOrDigestedContext : digestedSchemaOrPointerLibrary;
          pointerLibrary = !pointerLibrary ? digestedSchemaOrPointerLibrary : pointerLibrary;
          if (!Utils.isArray(expandedObjectOrObjects))
            return this.compactSingle(expandedObjectOrObjects, targetObjectOrObjects, digestedSchema, pointerLibrary);
          var expandedObjects = expandedObjectOrObjects;
          var targetObjects = !!targetObjectOrObjects ? targetObjectOrObjects : [];
          for (var i = 0,
              length = expandedObjects.length; i < length; i++) {
            var expandedObject = expandedObjects[i];
            var targetObject = targetObjects[i] = !!targetObjects[i] ? targetObjects[i] : {};
            this.compactSingle(expandedObject, targetObject, digestedSchema, pointerLibrary);
          }
          return targetObjects;
        };
        Class.prototype.expand = function(compactedObjectOrObjects, generalSchema, digestedSchema) {
          if (!Utils.isArray(compactedObjectOrObjects))
            return this.expandSingle(compactedObjectOrObjects, generalSchema, digestedSchema);
        };
        Class.prototype.expandSingle = function(compactedObject, generalSchema, digestedSchema) {
          var _this = this;
          var expandedObject = {};
          expandedObject["@id"] = !!compactedObject["id"] ? compactedObject["id"] : "";
          if (!!compactedObject["types"])
            expandedObject["@type"] = compactedObject["types"].map(function(type) {
              return ObjectSchema.Util.resolveURI(type, generalSchema);
            });
          Utils.forEachOwnProperty(compactedObject, function(propertyName, value) {
            if (propertyName === "id")
              return;
            if (propertyName === "types")
              return;
            var expandedValue;
            if (digestedSchema.properties.has(propertyName)) {
              var definition = digestedSchema.properties.get(propertyName);
              expandedValue = _this.expandProperty(value, definition, generalSchema, digestedSchema);
              propertyName = definition.uri.toString();
            } else if (RDF.URI.Util.isAbsolute(propertyName)) {
              expandedValue = _this.expandPropertyValues(value, generalSchema, digestedSchema);
            } else if (digestedSchema.vocab) {
              expandedValue = _this.expandPropertyValue(value, generalSchema, digestedSchema);
              propertyName = ObjectSchema.Util.resolveURI(propertyName, generalSchema);
            }
            if (!expandedValue)
              return;
            expandedObject[propertyName] = expandedValue;
          });
          return expandedObject;
        };
        Class.prototype.expandProperty = function(propertyValue, propertyDefinition, generalSchema, digestedSchema) {
          switch (propertyDefinition.containerType) {
            case null:
              if (propertyDefinition.literal) {
                return this.expandPropertyLiteral(propertyValue, propertyDefinition.literalType.toString());
              } else if (propertyDefinition.literal === false) {
                return this.expandPropertyPointer(propertyValue, generalSchema, digestedSchema);
              } else {
                return this.expandPropertyValue(propertyValue, generalSchema, digestedSchema);
              }
            case ObjectSchema.ContainerType.LIST:
              if (propertyDefinition.literal) {
                return this.expandPropertyLiteralList(propertyValue, propertyDefinition.literalType.toString());
              } else if (propertyDefinition.literal === false) {
                return this.expandPropertyPointerList(propertyValue, generalSchema, digestedSchema);
              } else {
                return this.expandPropertyList(propertyValue, generalSchema, digestedSchema);
              }
            case ObjectSchema.ContainerType.SET:
              if (propertyDefinition.literal) {
                return this.expandPropertyLiterals(propertyValue, propertyDefinition.literalType.toString());
              } else if (propertyDefinition.literal === false) {
                return this.expandPropertyPointers(propertyValue, generalSchema, digestedSchema);
              } else {
                return this.expandPropertyValues(propertyValue, generalSchema, digestedSchema);
              }
            case ObjectSchema.ContainerType.LANGUAGE:
              return this.expandPropertyLanguageMap(propertyValue);
            default:
              throw new Errors.IllegalArgumentError("The containerType specified is not supported.");
          }
        };
        Class.prototype.expandPropertyValue = function(propertyValue, generalSchema, digestedSchema) {
          if (Utils.isArray(propertyValue)) {
            return this.expandPropertyValues(propertyValue, generalSchema, digestedSchema);
          } else {
            var expandedValue = this.expandValue(propertyValue, generalSchema, digestedSchema);
            if (!expandedValue)
              return null;
            return [expandedValue];
          }
        };
        Class.prototype.expandPropertyPointer = function(propertyValue, generalSchema, digestedSchema) {
          var expandedPointer = this.expandPointer(propertyValue, generalSchema, digestedSchema);
          if (!expandedPointer)
            return null;
          return [expandedPointer];
        };
        Class.prototype.expandPropertyLiteral = function(propertyValue, literalType) {
          var serializedValue = this.serializeLiteral(propertyValue, literalType);
          if (serializedValue === null)
            return null;
          return [{
            "@value": serializedValue,
            "@type": literalType
          }];
        };
        Class.prototype.expandPropertyList = function(propertyValues, generalSchema, digestedSchema) {
          propertyValues = Utils.isArray(propertyValues) ? propertyValues : [propertyValues];
          var expandedArray = this.expandArray(propertyValues, generalSchema, digestedSchema);
          if (!expandedArray)
            return null;
          return [{"@list": expandedArray}];
        };
        Class.prototype.expandPropertyPointerList = function(propertyValues, generalSchema, digestedSchema) {
          var listValues = this.expandPropertyPointers(propertyValues, generalSchema, digestedSchema);
          return [{"@list": listValues}];
        };
        Class.prototype.expandPropertyLiteralList = function(propertyValues, literalType) {
          var listValues = this.expandPropertyLiterals(propertyValues, literalType);
          return [{"@list": listValues}];
        };
        Class.prototype.expandPropertyValues = function(propertyValues, generalSchema, digestedSchema) {
          propertyValues = Utils.isArray(propertyValues) ? propertyValues : [propertyValues];
          var expandedArray = this.expandArray(propertyValues, generalSchema, digestedSchema);
          if (!expandedArray)
            return null;
          return expandedArray;
        };
        Class.prototype.expandPropertyPointers = function(propertyValues, generalSchema, digestedSchema) {
          propertyValues = Utils.isArray(propertyValues) ? propertyValues : [propertyValues];
          var expandedPointers = [];
          for (var _i = 0,
              propertyValues_1 = propertyValues; _i < propertyValues_1.length; _i++) {
            var propertyValue = propertyValues_1[_i];
            var expandedPointer = this.expandPointer(propertyValue, generalSchema, digestedSchema);
            if (!expandedPointer)
              continue;
            expandedPointers.push(expandedPointer);
          }
          return expandedPointers;
        };
        Class.prototype.expandPropertyLiterals = function(propertyValues, literalType) {
          propertyValues = Utils.isArray(propertyValues) ? propertyValues : [propertyValues];
          var listValues = [];
          for (var _i = 0,
              propertyValues_2 = propertyValues; _i < propertyValues_2.length; _i++) {
            var propertyValue = propertyValues_2[_i];
            var serializedValue = this.serializeLiteral(propertyValue, literalType);
            if (!serializedValue)
              continue;
            listValues.push({
              "@value": serializedValue,
              "@type": literalType
            });
          }
          return listValues;
        };
        Class.prototype.expandPropertyLanguageMap = function(propertyValue) {
          var _this = this;
          if (!Utils.isObject(propertyValue)) {
            return null;
          }
          var mapValues = [];
          Utils.forEachOwnProperty(propertyValue, function(languageTag, value) {
            var serializedValue = _this.literalSerializers.get(NS.XSD.DataType.string).serialize(value);
            mapValues.push({
              "@value": serializedValue,
              "@type": NS.XSD.DataType.string,
              "@language": languageTag
            });
          });
          return mapValues;
        };
        Class.prototype.serializeLiteral = function(propertyValue, literalType) {
          if (Pointer.Factory.is(propertyValue)) {
            return null;
          }
          if (!this.literalSerializers.has(literalType)) {
            return null;
          }
          try {
            return this.literalSerializers.get(literalType).serialize(propertyValue);
          } catch (error) {
            return null;
          }
        };
        Class.prototype.expandPointer = function(propertyValue, generalSchema, digestedSchema) {
          var notPointer = true;
          var id;
          if (Pointer.Factory.is(propertyValue)) {
            notPointer = false;
            propertyValue = propertyValue.id;
          } else if (!Utils.isString(propertyValue)) {
            propertyValue = null;
          }
          id = propertyValue;
          if (!id) {
            return null;
          }
          id = ObjectSchema.Digester.resolvePrefixedURI(id, generalSchema);
          if (generalSchema.properties.has(id)) {
            var definition = generalSchema.properties.get(id);
            if (definition.uri)
              id = definition.uri.stringValue;
          }
          if (notPointer && !!digestedSchema.vocab)
            id = ObjectSchema.Util.resolveURI(id, generalSchema);
          return {"@id": id};
        };
        Class.prototype.expandArray = function(propertyValue, generalSchema, digestedSchema) {
          var listValues = [];
          for (var _i = 0,
              propertyValue_1 = propertyValue; _i < propertyValue_1.length; _i++) {
            var listValue = propertyValue_1[_i];
            var expandedValue = this.expandValue(listValue, generalSchema, digestedSchema);
            if (!expandedValue)
              continue;
            listValues.push(expandedValue);
          }
          if (!listValues.length)
            return null;
          return listValues;
        };
        Class.prototype.expandValue = function(propertyValue, generalSchema, digestedSchema) {
          if (Utils.isArray(propertyValue)) {
            return null;
          } else if (Pointer.Factory.is(propertyValue)) {
            return this.expandPointer(propertyValue, generalSchema, digestedSchema);
          } else {
            return this.expandLiteral(propertyValue);
          }
        };
        Class.prototype.expandLiteral = function(literalValue) {
          var serializedValue;
          var literalType;
          switch (true) {
            case Utils.isFunction(literalValue):
              return null;
            case Utils.isDate(literalValue):
              literalType = NS.XSD.DataType.dateTime;
              break;
            case Utils.isNumber(literalValue):
              literalType = NS.XSD.DataType.float;
              break;
            case Utils.isBoolean(literalValue):
              literalType = NS.XSD.DataType.boolean;
              break;
            case Utils.isString(literalValue):
              literalType = NS.XSD.DataType.string;
              break;
            default:
              return null;
          }
          serializedValue = this.literalSerializers.get(literalType).serialize(literalValue);
          return {
            "@value": serializedValue,
            "@type": literalType
          };
        };
        Class.prototype.compactSingle = function(expandedObject, targetObject, digestedSchema, pointerLibrary) {
          var _this = this;
          var propertyURINameMap = this.getPropertyURINameMap(digestedSchema);
          if (!expandedObject["@id"])
            throw new Errors.IllegalArgumentError("The expandedObject doesn't have an @id defined.");
          targetObject["id"] = expandedObject["@id"];
          targetObject["types"] = !!expandedObject["@type"] ? expandedObject["@type"] : [];
          Utils.forEachOwnProperty(expandedObject, function(propertyURI, value) {
            if (propertyURI === "@id")
              return;
            if (propertyURI === "@type")
              return;
            if (propertyURINameMap.has(propertyURI)) {
              var propertyName = propertyURINameMap.get(propertyURI);
              _this.assignProperty(targetObject, expandedObject, propertyName, digestedSchema, pointerLibrary);
            } else {
              var propertyName = digestedSchema.vocab ? RDF.URI.Util.getRelativeURI(propertyURI, digestedSchema.vocab) : propertyURI;
              _this.assignURIProperty(targetObject, expandedObject, propertyURI, propertyName, pointerLibrary);
            }
          });
          return targetObject;
        };
        Class.prototype.assignProperty = function(compactedObject, expandedObject, propertyName, digestedSchema, pointerLibrary) {
          var propertyDefinition = digestedSchema.properties.get(propertyName);
          compactedObject[propertyName] = this.getPropertyValue(expandedObject, propertyDefinition, pointerLibrary);
        };
        Class.prototype.assignURIProperty = function(compactedObject, expandedObject, propertyURI, propertyName, pointerLibrary) {
          var guessedDefinition = new ObjectSchema.DigestedPropertyDefinition();
          guessedDefinition.uri = new RDF.URI.Class(propertyURI);
          guessedDefinition.containerType = this.getPropertyContainerType(expandedObject[propertyURI]);
          compactedObject[propertyName] = this.getPropertyValue(expandedObject, guessedDefinition, pointerLibrary);
        };
        Class.prototype.getPropertyContainerType = function(propertyValues) {
          if (propertyValues.length === 1) {
            if (RDF.List.Factory.is(propertyValues[0]))
              return ObjectSchema.ContainerType.LIST;
          } else {
            return ObjectSchema.ContainerType.SET;
          }
          return null;
        };
        Class.prototype.getPropertyValue = function(expandedObject, propertyDefinition, pointerLibrary) {
          var propertyURI = propertyDefinition.uri.toString();
          switch (propertyDefinition.containerType) {
            case null:
              if (propertyDefinition.literal) {
                return this.getPropertyLiteral(expandedObject, propertyURI, propertyDefinition.literalType.toString());
              } else if (propertyDefinition.literal === false) {
                return this.getPropertyPointer(expandedObject, propertyURI, pointerLibrary);
              } else {
                return this.getProperty(expandedObject, propertyURI, pointerLibrary);
              }
            case ObjectSchema.ContainerType.LIST:
              if (propertyDefinition.literal) {
                return this.getPropertyLiteralList(expandedObject, propertyURI, propertyDefinition.literalType.toString());
              } else if (propertyDefinition.literal === false) {
                return this.getPropertyPointerList(expandedObject, propertyURI, pointerLibrary);
              } else {
                return this.getPropertyList(expandedObject, propertyURI, pointerLibrary);
              }
            case ObjectSchema.ContainerType.SET:
              if (propertyDefinition.literal) {
                return this.getPropertyLiterals(expandedObject, propertyURI, propertyDefinition.literalType.toString());
              } else if (propertyDefinition.literal === false) {
                return this.getPropertyPointers(expandedObject, propertyURI, pointerLibrary);
              } else {
                return this.getProperties(expandedObject, propertyURI, pointerLibrary);
              }
            case ObjectSchema.ContainerType.LANGUAGE:
              return this.getPropertyLanguageMap(expandedObject, propertyURI);
            default:
              throw new Errors.IllegalArgumentError("The containerType specified is not supported.");
          }
        };
        Class.prototype.getProperty = function(expandedObject, propertyURI, pointerLibrary) {
          var propertyValues = expandedObject[propertyURI];
          if (!propertyValues)
            return null;
          if (!propertyValues.length)
            return null;
          var propertyValue = propertyValues[0];
          return this.parseValue(propertyValue, pointerLibrary);
        };
        Class.prototype.getPropertyPointer = function(expandedObject, propertyURI, pointerLibrary) {
          var propertyValues = expandedObject[propertyURI];
          if (!propertyValues)
            return null;
          for (var _i = 0,
              propertyValues_3 = propertyValues; _i < propertyValues_3.length; _i++) {
            var propertyValue = propertyValues_3[_i];
            if (!RDF.Node.Factory.is(propertyValue))
              continue;
            return pointerLibrary.getPointer(propertyValue["@id"]);
          }
          return null;
        };
        Class.prototype.getPropertyLiteral = function(expandedObject, propertyURI, literalType) {
          var propertyValues = expandedObject[propertyURI];
          if (!propertyValues)
            return null;
          for (var _i = 0,
              propertyValues_4 = propertyValues; _i < propertyValues_4.length; _i++) {
            var propertyValue = propertyValues_4[_i];
            if (!RDF.Literal.Factory.is(propertyValue))
              continue;
            if (!RDF.Literal.Factory.hasType(propertyValue, literalType))
              continue;
            return RDF.Literal.Factory.parse(propertyValue);
          }
          return null;
        };
        Class.prototype.getPropertyList = function(expandedObject, propertyURI, pointerLibrary) {
          var propertyValues = expandedObject[propertyURI];
          if (!propertyValues)
            return null;
          var propertyList = this.getList(propertyValues);
          if (!propertyList)
            return null;
          var listValues = [];
          for (var _i = 0,
              _a = propertyList["@list"]; _i < _a.length; _i++) {
            var listValue = _a[_i];
            listValues.push(this.parseValue(listValue, pointerLibrary));
          }
          return listValues;
        };
        Class.prototype.getPropertyPointerList = function(expandedObject, propertyURI, pointerLibrary) {
          var propertyValues = expandedObject[propertyURI];
          if (!propertyValues)
            return null;
          var propertyList = this.getList(propertyValues);
          if (!propertyList)
            return null;
          var listPointers = [];
          for (var _i = 0,
              _a = propertyList["@list"]; _i < _a.length; _i++) {
            var listValue = _a[_i];
            if (!RDF.Node.Factory.is(listValue))
              continue;
            var pointer = pointerLibrary.getPointer(listValue["@id"]);
            listPointers.push(pointer);
          }
          return listPointers;
        };
        Class.prototype.getPropertyLiteralList = function(expandedObject, propertyURI, literalType) {
          var propertyValues = expandedObject[propertyURI];
          if (!propertyValues)
            return null;
          var propertyList = this.getList(propertyValues);
          if (!propertyList)
            return null;
          var listLiterals = [];
          for (var _i = 0,
              _a = propertyList["@list"]; _i < _a.length; _i++) {
            var listValue = _a[_i];
            if (!RDF.Literal.Factory.is(listValue))
              continue;
            if (!RDF.Literal.Factory.hasType(listValue, literalType))
              continue;
            listLiterals.push(RDF.Literal.Factory.parse(listValue));
          }
          return listLiterals;
        };
        Class.prototype.getProperties = function(expandedObject, propertyURI, pointerLibrary) {
          var propertyValues = expandedObject[propertyURI];
          if (!propertyValues)
            return null;
          if (!propertyValues.length)
            return null;
          var properties = [];
          for (var _i = 0,
              propertyValues_5 = propertyValues; _i < propertyValues_5.length; _i++) {
            var propertyValue = propertyValues_5[_i];
            properties.push(this.parseValue(propertyValue, pointerLibrary));
          }
          return properties;
        };
        Class.prototype.getPropertyPointers = function(expandedObject, propertyURI, pointerLibrary) {
          var propertyValues = expandedObject[propertyURI];
          if (!propertyValues)
            return null;
          if (!propertyValues.length)
            return null;
          var propertyPointers = [];
          for (var _i = 0,
              propertyValues_6 = propertyValues; _i < propertyValues_6.length; _i++) {
            var propertyValue = propertyValues_6[_i];
            if (!RDF.Node.Factory.is(propertyValue))
              continue;
            var pointer = pointerLibrary.getPointer(propertyValue["@id"]);
            propertyPointers.push(pointer);
          }
          return propertyPointers;
        };
        Class.prototype.getPropertyLiterals = function(expandedObject, propertyURI, literalType) {
          var propertyValues = expandedObject[propertyURI];
          if (!propertyValues)
            return null;
          var propertyLiterals = [];
          for (var _i = 0,
              propertyValues_7 = propertyValues; _i < propertyValues_7.length; _i++) {
            var propertyValue = propertyValues_7[_i];
            if (!RDF.Literal.Factory.is(propertyValue))
              continue;
            if (!RDF.Literal.Factory.hasType(propertyValue, literalType))
              continue;
            propertyLiterals.push(RDF.Literal.Factory.parse(propertyValue));
          }
          return propertyLiterals;
        };
        Class.prototype.getPropertyLanguageMap = function(expandedObject, propertyURI) {
          var propertyValues = expandedObject[propertyURI];
          if (!propertyValues)
            return null;
          var propertyLanguageMap = {};
          for (var _i = 0,
              propertyValues_8 = propertyValues; _i < propertyValues_8.length; _i++) {
            var propertyValue = propertyValues_8[_i];
            if (!RDF.Literal.Factory.is(propertyValue))
              continue;
            if (!RDF.Literal.Factory.hasType(propertyValue, NS.XSD.DataType.string))
              continue;
            var languageTag = propertyValue["@language"];
            if (!languageTag)
              continue;
            propertyLanguageMap[languageTag] = RDF.Literal.Factory.parse(propertyValue);
          }
          return propertyLanguageMap;
        };
        Class.prototype.getList = function(propertyValues) {
          for (var _i = 0,
              propertyValues_9 = propertyValues; _i < propertyValues_9.length; _i++) {
            var propertyValue = propertyValues_9[_i];
            if (!RDF.List.Factory.is(propertyValue))
              continue;
            return propertyValue;
          }
          return null;
        };
        Class.prototype.getPropertyURINameMap = function(digestedSchema) {
          var map = new Map();
          digestedSchema.properties.forEach(function(definition, propertyName) {
            map.set(definition.uri.toString(), propertyName);
          });
          return map;
        };
        Class.prototype.parseValue = function(propertyValue, pointerLibrary) {
          if (RDF.Literal.Factory.is(propertyValue)) {
            return RDF.Literal.Factory.parse(propertyValue);
          } else if (RDF.Node.Factory.is(propertyValue)) {
            return pointerLibrary.getPointer(propertyValue["@id"]);
          } else if (RDF.List.Factory.is(propertyValue)) {
            var parsedValue = [];
            var listValues = propertyValue["@list"];
            for (var _i = 0,
                listValues_1 = listValues; _i < listValues_1.length; _i++) {
              var listValue = listValues_1[_i];
              parsedValue.push(this.parseValue(listValue, pointerLibrary));
            }
            return parsedValue;
          } else {}
        };
        return Class;
      }());
      exports_1("Class", Class);
      exports_1("default", Class);
    }
  };
});

$__System.register("6a", ["3b", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Resource,
      Utils;
  var Factory;
  return {
    setters: [function(Resource_1) {
      Resource = Resource_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(resource) {
          return (Utils.hasPropertyDefined(resource, "document"));
        };
        Factory.create = function(idOrDocument, document) {
          return this.createFrom({}, idOrDocument, document);
        };
        Factory.createFrom = function(object, idOrDocument, document) {
          if (document === void 0) {
            document = null;
          }
          var id = !!idOrDocument && Utils.isString(idOrDocument) ? idOrDocument : "";
          document = document || idOrDocument;
          var resource = Resource.Factory.createFrom(object, id);
          if (Factory.hasClassProperties(resource))
            return resource;
          Object.defineProperties(resource, {"document": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: document
            }});
          return resource;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("6b", ["6a", "9", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Fragment,
      RDF,
      Utils;
  var Factory;
  return {
    setters: [function(Fragment_1) {
      Fragment = Fragment_1;
    }, function(RDF_1) {
      RDF = RDF_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(resource) {
          return (Utils.hasPropertyDefined(resource, "slug"));
        };
        Factory.create = function(slug, document) {
          return this.createFrom({}, slug, document);
        };
        Factory.createFrom = function(object, slug, document) {
          var uri = document.id + "#" + slug;
          var fragment = Fragment.Factory.createFrom(object, uri, document);
          if (this.hasClassProperties(fragment))
            return fragment;
          Object.defineProperties(fragment, {"slug": {
              enumerable: false,
              configurable: true,
              get: function() {
                return RDF.URI.Util.getFragment(fragment.id);
              },
              set: function(value) {
                this.id = this.document.id + "#" + value;
              }
            }});
          return fragment;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("6c", [], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var namespace,
      Class,
      Predicate;
  return {
    setters: [],
    execute: function() {
      exports_1("namespace", namespace = "https://carbonldp.com/ns/v1/platform#");
      Class = (function() {
        function Class() {}
        Object.defineProperty(Class, "AccessPoint", {
          get: function() {
            return namespace + "AccessPoint";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "AddMemberAction", {
          get: function() {
            return namespace + "AddMemberAction";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "API", {
          get: function() {
            return namespace + "API";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "Document", {
          get: function() {
            return namespace + "Document";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "NonReadableMembershipResourceTriples", {
          get: function() {
            return namespace + "NonReadableMembershipResourceTriples";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "PreferContainer", {
          get: function() {
            return namespace + "PreferContainer";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "PreferContainmentResources", {
          get: function() {
            return namespace + "PreferContainmentResources";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "PreferContainmentTriples", {
          get: function() {
            return namespace + "PreferContainmentTriples";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "PreferMembershipResources", {
          get: function() {
            return namespace + "PreferMembershipResources";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "PreferMembershipTriples", {
          get: function() {
            return namespace + "PreferMembershipTriples";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "PreferSelectedMembershipTriples", {
          get: function() {
            return namespace + "PreferSelectedMembershipTriples";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "VolatileResource", {
          get: function() {
            return namespace + "VolatileResource";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "RDFRepresentation", {
          get: function() {
            return namespace + "RDFRepresentation";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "RemoveMemberAction", {
          get: function() {
            return namespace + "RemoveMemberAction";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "ErrorResponse", {
          get: function() {
            return namespace + "ErrorResponse";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "Error", {
          get: function() {
            return namespace + "Error";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "ResponseMetadata", {
          get: function() {
            return namespace + "ResponseMetadata";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "ResourceMetadata", {
          get: function() {
            return namespace + "ResourceMetadata";
          },
          enumerable: true,
          configurable: true
        });
        return Class;
      }());
      exports_1("Class", Class);
      Predicate = (function() {
        function Predicate() {}
        Object.defineProperty(Predicate, "accessPoint", {
          get: function() {
            return namespace + "accessPoint";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "appRoleMap", {
          get: function() {
            return namespace + "appRoleMap";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "bNodeIdentifier", {
          get: function() {
            return namespace + "bNodeIdentifier";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "buildDate", {
          get: function() {
            return namespace + "buildDate";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "carbonCode", {
          get: function() {
            return namespace + "carbonCode";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "created", {
          get: function() {
            return namespace + "created";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "defaultInteractionModel", {
          get: function() {
            return namespace + "defaultInteractionModel";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "entry", {
          get: function() {
            return namespace + "entry";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "error", {
          get: function() {
            return namespace + "error";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "eTag", {
          get: function() {
            return namespace + "eTag";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "httpStatusCode", {
          get: function() {
            return namespace + "httpStatusCode";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "key", {
          get: function() {
            return namespace + "key";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "mediaType", {
          get: function() {
            return namespace + "mediaType";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "message", {
          get: function() {
            return namespace + "message";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "modified", {
          get: function() {
            return namespace + "modified";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "requestID", {
          get: function() {
            return namespace + "requestID";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "resourceMetadata", {
          get: function() {
            return namespace + "resourceMetadata";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "resource", {
          get: function() {
            return namespace + "resource";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "size", {
          get: function() {
            return namespace + "size";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "targetMember", {
          get: function() {
            return namespace + "targetMember";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "version", {
          get: function() {
            return namespace + "version";
          },
          enumerable: true,
          configurable: true
        });
        return Predicate;
      }());
      exports_1("Predicate", Predicate);
    }
  };
});

$__System.register("6d", [], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var namespace,
      Predicate;
  return {
    setters: [],
    execute: function() {
      namespace = "https://carbonldp.com/ns/v1/patch#";
      Predicate = (function() {
        function Predicate() {}
        Predicate.ADD_ACTION = namespace + "addAction";
        Predicate.SET_ACTION = namespace + "setAction";
        Predicate.DELETE_ACTION = namespace + "deleteAction";
        return Predicate;
      }());
      exports_1("namespace", namespace);
      exports_1("Predicate", Predicate);
    }
  };
});

$__System.register("6e", [], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var namespace,
      Class,
      Predicate;
  return {
    setters: [],
    execute: function() {
      namespace = "https://carbonldp.com/ns/v1/security#";
      Class = (function() {
        function Class() {}
        Object.defineProperty(Class, "AccessControlEntry", {
          get: function() {
            return namespace + "AccessControlEntry";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "AccessControlList", {
          get: function() {
            return namespace + "AccessControlList";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "Agent", {
          get: function() {
            return namespace + "Agent";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "AllOrigins", {
          get: function() {
            return namespace + "AllOrigins";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "Application", {
          get: function() {
            return namespace + "Application";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "AppRole", {
          get: function() {
            return namespace + "AppRole";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "ProtectedDocument", {
          get: function() {
            return namespace + "ProtectedDocument";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "Ticket", {
          get: function() {
            return namespace + "Ticket";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "Token", {
          get: function() {
            return namespace + "Token";
          },
          enumerable: true,
          configurable: true
        });
        return Class;
      }());
      Predicate = (function() {
        function Predicate() {}
        Object.defineProperty(Predicate, "accessControlEntry", {
          get: function() {
            return namespace + "accessControlEntry";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "accessControlList", {
          get: function() {
            return namespace + "accessControlList";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "accessTo", {
          get: function() {
            return namespace + "accessTo";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "agent", {
          get: function() {
            return namespace + "agent";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "allowsOrigin", {
          get: function() {
            return namespace + "allowsOrigin";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "childRole", {
          get: function() {
            return namespace + "childRole";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "credentialsOf", {
          get: function() {
            return namespace + "credentialsOf";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "description", {
          get: function() {
            return namespace + "description";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "enabled", {
          get: function() {
            return namespace + "enabled";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "expirationTime", {
          get: function() {
            return namespace + "expirationTime";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "forIRI", {
          get: function() {
            return namespace + "forIRI";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "granting", {
          get: function() {
            return namespace + "granting";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "inheritableEntry", {
          get: function() {
            return namespace + "inheritableEntry";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "namae", {
          get: function() {
            return namespace + "name";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "parentRole", {
          get: function() {
            return namespace + "parentRole";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "password", {
          get: function() {
            return namespace + "password";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "permission", {
          get: function() {
            return namespace + "permission";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "platformRole", {
          get: function() {
            return namespace + "platformRole";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "rootContainer", {
          get: function() {
            return namespace + "rootContainer";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "subject", {
          get: function() {
            return namespace + "subject";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "subjectClass", {
          get: function() {
            return namespace + "subjectClass";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "ticketKey", {
          get: function() {
            return namespace + "ticketKey";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "tokenKey", {
          get: function() {
            return namespace + "tokenKey";
          },
          enumerable: true,
          configurable: true
        });
        return Predicate;
      }());
      exports_1("namespace", namespace);
      exports_1("Class", Class);
      exports_1("Predicate", Predicate);
    }
  };
});

$__System.register("6f", [], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var namespace,
      Class,
      Predicate;
  return {
    setters: [],
    execute: function() {
      namespace = "http://www.w3.org/ns/ldp#";
      Class = (function() {
        function Class() {}
        Object.defineProperty(Class, "Resource", {
          get: function() {
            return namespace + "Resource";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "RDFSource", {
          get: function() {
            return namespace + "RDFSource";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "Container", {
          get: function() {
            return namespace + "Container";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "BasicContainer", {
          get: function() {
            return namespace + "BasicContainer";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "DirectContainer", {
          get: function() {
            return namespace + "DirectContainer";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "IndirectContainer", {
          get: function() {
            return namespace + "IndirectContainer";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "NonRDFSource", {
          get: function() {
            return namespace + "NonRDFSource";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "MemberSubject", {
          get: function() {
            return namespace + "MemberSubject";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "PreferContainment", {
          get: function() {
            return namespace + "PreferContainment";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "PreferMembership", {
          get: function() {
            return namespace + "PreferMembership";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "PreferEmptyContainer", {
          get: function() {
            return namespace + "PreferEmptyContainer";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "PreferMinimalContainer", {
          get: function() {
            return namespace + "PreferMinimalContainer";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "Page", {
          get: function() {
            return namespace + "Page";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "PageSortCriterion", {
          get: function() {
            return namespace + "PageSortCriterion";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "Ascending", {
          get: function() {
            return namespace + "Ascending";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Class, "Descending", {
          get: function() {
            return namespace + "Descending";
          },
          enumerable: true,
          configurable: true
        });
        return Class;
      }());
      Predicate = (function() {
        function Predicate() {}
        Object.defineProperty(Predicate, "contains", {
          get: function() {
            return namespace + "contains";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "member", {
          get: function() {
            return namespace + "member";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "hasMemberRelation", {
          get: function() {
            return namespace + "hasMemberRelation";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "isMemberOfRelation", {
          get: function() {
            return namespace + "isMemberOfRelation";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "membershipResource", {
          get: function() {
            return namespace + "membershipResource";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "insertedContentRelation", {
          get: function() {
            return namespace + "insertedContentRelation";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "constrainedBy", {
          get: function() {
            return namespace + "constrainedBy";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "pageSortCriteria", {
          get: function() {
            return namespace + "pageSortCriteria";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "pageSortOrder", {
          get: function() {
            return namespace + "pageSortOrder";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "pageSortCollation", {
          get: function() {
            return namespace + "pageSortCollation";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Predicate, "pageSequence", {
          get: function() {
            return namespace + "pageSequence";
          },
          enumerable: true,
          configurable: true
        });
        return Predicate;
      }());
      exports_1("namespace", namespace);
      exports_1("Class", Class);
      exports_1("Predicate", Predicate);
    }
  };
});

$__System.register("70", [], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var namespace,
      Predicate;
  return {
    setters: [],
    execute: function() {
      namespace = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
      Predicate = (function() {
        function Predicate() {}
        Predicate.type = namespace + "type";
        return Predicate;
      }());
      exports_1("namespace", namespace);
      exports_1("Predicate", Predicate);
    }
  };
});

$__System.register("22", ["a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Utils;
  var namespace,
      DataType;
  return {
    setters: [function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      exports_1("namespace", namespace = "http://www.w3.org/2001/XMLSchema#");
      DataType = (function() {
        function DataType() {}
        DataType.date = namespace + "date";
        DataType.dateTime = namespace + "dateTime";
        DataType.duration = namespace + "duration";
        DataType.gDay = namespace + "gDay";
        DataType.gMonth = namespace + "gMonth";
        DataType.gMonthDay = namespace + "gMonthDay";
        DataType.gYear = namespace + "gYear";
        DataType.gYearMonth = namespace + "gYearMonth";
        DataType.time = namespace + "time";
        DataType.byte = namespace + "byte";
        DataType.decimal = namespace + "decimal";
        DataType.int = namespace + "int";
        DataType.integer = namespace + "integer";
        DataType.long = namespace + "long";
        DataType.negativeInteger = namespace + "negativeInteger";
        DataType.nonNegativeInteger = namespace + "nonNegativeInteger";
        DataType.nonPositiveInteger = namespace + "nonPositiveInteger";
        DataType.positiveInteger = namespace + "positiveInteger";
        DataType.short = namespace + "short";
        DataType.unsignedLong = namespace + "unsignedLong";
        DataType.unsignedInt = namespace + "unsignedInt";
        DataType.unsignedShort = namespace + "unsignedShort";
        DataType.unsignedByte = namespace + "unsignedByte";
        DataType.double = namespace + "double";
        DataType.float = namespace + "float";
        DataType.boolean = namespace + "boolean";
        DataType.string = namespace + "string";
        DataType.object = namespace + "object";
        return DataType;
      }());
      exports_1("DataType", DataType);
      Utils.forEachOwnProperty(DataType, function(key, value) {
        DataType[value] = key;
      });
    }
  };
});

$__System.register("71", [], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var namespace,
      Predicate;
  return {
    setters: [],
    execute: function() {
      exports_1("namespace", namespace = "http://www.w3.org/2001/vcard-rdf/3.0#");
      Predicate = (function() {
        function Predicate() {}
        Object.defineProperty(Predicate, "email", {
          get: function() {
            return namespace + "email";
          },
          enumerable: true,
          configurable: true
        });
        return Predicate;
      }());
      exports_1("Predicate", Predicate);
    }
  };
});

$__System.register("6", ["6c", "6d", "6e", "6f", "70", "22", "71"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var C,
      CP,
      CS,
      LDP,
      RDF,
      XSD,
      VCARD;
  return {
    setters: [function(C_1) {
      C = C_1;
    }, function(CP_1) {
      CP = CP_1;
    }, function(CS_1) {
      CS = CS_1;
    }, function(LDP_1) {
      LDP = LDP_1;
    }, function(RDF_1) {
      RDF = RDF_1;
    }, function(XSD_1) {
      XSD = XSD_1;
    }, function(VCARD_1) {
      VCARD = VCARD_1;
    }],
    execute: function() {
      exports_1("C", C);
      exports_1("CP", CP);
      exports_1("CS", CS);
      exports_1("LDP", LDP);
      exports_1("RDF", RDF);
      exports_1("XSD", XSD);
      exports_1("VCARD", VCARD);
    }
  };
});

$__System.register("3b", ["8", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Pointer,
      Utils;
  var Factory,
      Util;
  function addType(type) {
    this.types.push(type);
  }
  function hasType(type) {
    return this.types.indexOf(type) !== -1;
  }
  function removeType(type) {
    var index = this.types.indexOf(type);
    if (index !== -1)
      this.types.splice(index, 1);
  }
  return {
    setters: [function(Pointer_1) {
      Pointer = Pointer_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(object) {
          return (Utils.hasPropertyDefined(object, "types") && Utils.hasFunction(object, "addType") && Utils.hasFunction(object, "hasType") && Utils.hasFunction(object, "removeType"));
        };
        Factory.is = function(object) {
          return Pointer.Factory.is(object) && Factory.hasClassProperties(object);
        };
        Factory.create = function(id, types) {
          if (id === void 0) {
            id = null;
          }
          if (types === void 0) {
            types = null;
          }
          return Factory.createFrom({}, id, types);
        };
        Factory.createFrom = function(object, id, types) {
          if (id === void 0) {
            id = null;
          }
          if (types === void 0) {
            types = null;
          }
          id = !!id ? id : (object.id || "");
          types = !!types ? types : (object.types || []);
          var resource = Factory.decorate(object);
          resource.id = id;
          resource.types = types;
          return resource;
        };
        Factory.decorate = function(object) {
          Pointer.Factory.decorate(object);
          if (Factory.hasClassProperties(object))
            return object;
          Object.defineProperties(object, {
            "types": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: []
            },
            "addType": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: addType
            },
            "hasType": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: hasType
            },
            "removeType": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: removeType
            }
          });
          return object;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
      Util = (function() {
        function Util() {}
        Util.hasType = function(resource, type) {
          return Util.getTypes(resource).indexOf(type) !== -1;
        };
        Util.getTypes = function(resource) {
          return resource.types || [];
        };
        return Util;
      }());
      exports_1("Util", Util);
    }
  };
});

$__System.register("15", ["69", "5", "59", "6b", "6", "5c", "8", "9", "3b", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var BlankNode,
      Errors,
      Converter_1,
      NamedFragment,
      NS,
      ObjectSchema,
      Pointer,
      RDF,
      Resource,
      Utils;
  var RDF_CLASS,
      SCHEMA,
      Factory;
  function hasPointer(id) {
    var document = this;
    if (id === document.id)
      return true;
    if (!document.inScope(id))
      return false;
    return document.hasFragment(id);
  }
  function getPointer(id) {
    var document = this;
    if (!document.inScope(id))
      return null;
    if (id === document.id)
      return document;
    var fragment = document.getFragment(id);
    fragment = !fragment ? document.createFragment(id) : fragment;
    return fragment;
  }
  function inScope(idOrPointer) {
    var document = this;
    var id = Pointer.Factory.is(idOrPointer) ? idOrPointer.id : idOrPointer;
    if (id === document.id)
      return true;
    if (RDF.URI.Util.isBNodeID(id))
      return true;
    if (RDF.URI.Util.isFragmentOf(id, document.id))
      return true;
    return RDF.URI.Util.isFragmentOf(id, "");
  }
  function hasFragment(id) {
    var document = this;
    if (RDF.URI.Util.isAbsolute(id)) {
      if (!RDF.URI.Util.isFragmentOf(id, document.id))
        return false;
      id = RDF.URI.Util.hasFragment(id) ? RDF.URI.Util.getFragment(id) : id;
    } else if (Utils.S.startsWith(id, "#"))
      id = id.substring(1);
    return document._fragmentsIndex.has(id);
  }
  function getFragment(id) {
    var document = this;
    if (!RDF.URI.Util.isBNodeID(id))
      return document.getNamedFragment(id);
    return document._fragmentsIndex.get(id) || null;
  }
  function getNamedFragment(id) {
    var document = this;
    if (RDF.URI.Util.isBNodeID(id))
      throw new Errors.IllegalArgumentError("Named fragments can't have a id that starts with '_:'.");
    if (RDF.URI.Util.isAbsolute(id)) {
      if (!RDF.URI.Util.isFragmentOf(id, document.id))
        throw new Errors.IllegalArgumentError("The id is out of scope.");
      id = RDF.URI.Util.hasFragment(id) ? RDF.URI.Util.getFragment(id) : id;
    } else if (Utils.S.startsWith(id, "#"))
      id = id.substring(1);
    return document._fragmentsIndex.get(id) || null;
  }
  function getFragments() {
    var document = this;
    return Utils.A.from(document._fragmentsIndex.values());
  }
  function createFragment(slugOrObject, slug) {
    var document = this;
    slug = Utils.isString(slugOrObject) ? slugOrObject : slug;
    var object = !Utils.isString(slugOrObject) && !!slugOrObject ? slugOrObject : {};
    if (slug) {
      if (!RDF.URI.Util.isBNodeID(slug))
        return document.createNamedFragment(object, slug);
      if (this._fragmentsIndex.has(slug))
        throw new Errors.IDAlreadyInUseError("The slug provided is already being used by a fragment.");
    }
    var fragment = BlankNode.Factory.createFrom(object, slug, document);
    document._fragmentsIndex.set(fragment.id, fragment);
    convertNestedObjects(document, fragment);
    return fragment;
  }
  function createNamedFragment(slugOrObject, slug) {
    var document = this;
    slug = Utils.isString(slugOrObject) ? slugOrObject : slug;
    var object = !Utils.isString(slugOrObject) && !!slugOrObject ? slugOrObject : {};
    if (RDF.URI.Util.isBNodeID(slug))
      throw new Errors.IllegalArgumentError("Named fragments can't have a slug that starts with '_:'.");
    if (RDF.URI.Util.isAbsolute(slug)) {
      if (!RDF.URI.Util.isFragmentOf(slug, document.id))
        throw new Errors.IllegalArgumentError("The slug is out of scope.");
      slug = RDF.URI.Util.hasFragment(slug) ? RDF.URI.Util.getFragment(slug) : slug;
    } else if (Utils.S.startsWith(slug, "#"))
      slug = slug.substring(1);
    if (document._fragmentsIndex.has(slug))
      throw new Errors.IDAlreadyInUseError("The slug provided is already being used by a fragment.");
    var fragment = NamedFragment.Factory.createFrom(object, slug, document);
    document._fragmentsIndex.set(slug, fragment);
    convertNestedObjects(document, fragment);
    return fragment;
  }
  function removeFragment(fragmentOrSlug) {
    var document = this;
    var id = Utils.isString(fragmentOrSlug) ? fragmentOrSlug : fragmentOrSlug.id;
    if (RDF.URI.Util.isAbsolute(id)) {
      if (!RDF.URI.Util.isFragmentOf(id, document.id))
        return;
      id = RDF.URI.Util.hasFragment(id) ? RDF.URI.Util.getFragment(id) : id;
    } else if (Utils.S.startsWith(id, "#"))
      id = id.substring(1);
    document._fragmentsIndex.delete(id);
  }
  function removeNamedFragment(fragmentOrSlug) {
    var document = this;
    var id = Utils.isString(fragmentOrSlug) ? fragmentOrSlug : fragmentOrSlug.id;
    if (RDF.URI.Util.isBNodeID(id))
      throw new Errors.IllegalArgumentError("You can only remove NamedFragments.");
    document._removeFragment(id);
  }
  function toJSON(objectSchemaResolver, jsonldConverter) {
    if (objectSchemaResolver === void 0) {
      objectSchemaResolver = null;
    }
    if (jsonldConverter === void 0) {
      jsonldConverter = null;
    }
    var generalSchema = objectSchemaResolver ? objectSchemaResolver.getGeneralSchema() : new ObjectSchema.DigestedObjectSchema();
    jsonldConverter = !!jsonldConverter ? jsonldConverter : new Converter_1.default();
    var resources = [];
    resources.push(this);
    resources = resources.concat(this.getFragments());
    var expandedResources = [];
    for (var _i = 0,
        resources_1 = resources; _i < resources_1.length; _i++) {
      var resource = resources_1[_i];
      var resourceSchema = objectSchemaResolver ? objectSchemaResolver.getSchemaFor(resource) : new ObjectSchema.DigestedObjectSchema();
      expandedResources.push(jsonldConverter.expand(resource, generalSchema, resourceSchema));
    }
    var graph = {
      "@id": this.id,
      "@graph": expandedResources
    };
    return JSON.stringify(graph);
  }
  function normalize() {
    var _this = this;
    var currentFragments = this.getFragments().filter(function(fragment) {
      return RDF.URI.Util.isBNodeID(fragment.id);
    });
    var usedFragmentsIDs = new Set();
    convertNestedObjects(this, this, usedFragmentsIDs);
    currentFragments.forEach(function(fragment) {
      if (!usedFragmentsIDs.has(fragment.id)) {
        _this._fragmentsIndex.delete(fragment.id);
      }
    });
  }
  function convertNestedObjects(parent, actual, fragmentsTracker) {
    var next;
    var idOrSlug;
    var fragment;
    var keys = Object.keys(actual);
    for (var _i = 0,
        keys_1 = keys; _i < keys_1.length; _i++) {
      var key = keys_1[_i];
      next = actual[key];
      if (Utils.isArray(next)) {
        convertNestedObjects(parent, next, fragmentsTracker);
        continue;
      }
      if (!Utils.isPlainObject(next))
        continue;
      if (Pointer.Factory.is(next)) {
        if (parent.hasFragment(next.id)) {
          if (fragmentsTracker)
            fragmentsTracker.add(next.id);
          convertNestedObjects(parent, next, fragmentsTracker);
        }
        continue;
      }
      idOrSlug = ("id" in next) ? next.id : (("slug" in next) ? "#" + next.slug : "");
      if (!!idOrSlug && !parent.inScope(idOrSlug))
        continue;
      var parentFragment = parent.getFragment(idOrSlug);
      if (!parentFragment) {
        fragment = parent.createFragment(next, idOrSlug);
        convertNestedObjects(parent, fragment, fragmentsTracker);
      } else if (parentFragment !== next) {
        Object.assign(parentFragment, next);
        fragment = actual[key] = parentFragment;
        convertNestedObjects(parent, fragment, fragmentsTracker);
      }
    }
  }
  return {
    setters: [function(BlankNode_1) {
      BlankNode = BlankNode_1;
    }, function(Errors_1) {
      Errors = Errors_1;
    }, function(Converter_1_1) {
      Converter_1 = Converter_1_1;
    }, function(NamedFragment_1) {
      NamedFragment = NamedFragment_1;
    }, function(NS_1) {
      NS = NS_1;
    }, function(ObjectSchema_1) {
      ObjectSchema = ObjectSchema_1;
    }, function(Pointer_1) {
      Pointer = Pointer_1;
    }, function(RDF_1) {
      RDF = RDF_1;
    }, function(Resource_1) {
      Resource = Resource_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      exports_1("RDF_CLASS", RDF_CLASS = NS.C.Class.Document);
      exports_1("SCHEMA", SCHEMA = {
        "contains": {
          "@id": NS.LDP.Predicate.contains,
          "@container": "@set",
          "@type": "@id"
        },
        "members": {
          "@id": NS.LDP.Predicate.member,
          "@container": "@set",
          "@type": "@id"
        },
        "membershipResource": {
          "@id": NS.LDP.Predicate.membershipResource,
          "@type": "@id"
        },
        "isMemberOfRelation": {
          "@id": NS.LDP.Predicate.isMemberOfRelation,
          "@type": "@id"
        },
        "hasMemberRelation": {
          "@id": NS.LDP.Predicate.hasMemberRelation,
          "@type": "@id"
        },
        "insertedContentRelation": {
          "@id": NS.LDP.Predicate.insertedContentRelation,
          "@type": "@id"
        },
        "created": {
          "@id": NS.C.Predicate.created,
          "@type": NS.XSD.DataType.dateTime
        },
        "modified": {
          "@id": NS.C.Predicate.modified,
          "@type": NS.XSD.DataType.dateTime
        },
        "defaultInteractionModel": {
          "@id": NS.C.Predicate.defaultInteractionModel,
          "@type": "@id"
        },
        "accessPoints": {
          "@id": NS.C.Predicate.accessPoint,
          "@type": "@id",
          "@container": "@set"
        }
      });
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(documentResource) {
          return (Utils.isObject(documentResource) && Utils.hasPropertyDefined(documentResource, "_fragmentsIndex") && Utils.hasFunction(documentResource, "_normalize") && Utils.hasFunction(documentResource, "_removeFragment") && Utils.hasFunction(documentResource, "hasFragment") && Utils.hasFunction(documentResource, "getFragment") && Utils.hasFunction(documentResource, "getNamedFragment") && Utils.hasFunction(documentResource, "getFragments") && Utils.hasFunction(documentResource, "createFragment") && Utils.hasFunction(documentResource, "createNamedFragment") && Utils.hasFunction(documentResource, "removeNamedFragment") && Utils.hasFunction(documentResource, "toJSON"));
        };
        Factory.is = function(object) {
          return (Resource.Factory.is(object) && Factory.hasClassProperties(object));
        };
        Factory.create = function() {
          return Factory.createFrom({});
        };
        Factory.createFrom = function(object) {
          if (Factory.is(object))
            throw new Errors.IllegalArgumentError("The object provided is already a Document");
          var resource = object;
          if (!Resource.Factory.is(object))
            resource = Resource.Factory.createFrom(object);
          var document = Factory.decorate(resource);
          convertNestedObjects(document, document);
          return document;
        };
        Factory.decorate = function(object) {
          Resource.Factory.decorate(object);
          if (Factory.hasClassProperties(object))
            return object;
          Object.defineProperties(object, {
            "_fragmentsIndex": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: new Map()
            },
            "_normalize": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: normalize
            },
            "_removeFragment": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: removeFragment
            },
            "hasPointer": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: hasPointer
            },
            "getPointer": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: getPointer
            },
            "inScope": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: inScope
            },
            "hasFragment": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: hasFragment
            },
            "getFragment": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: getFragment
            },
            "getNamedFragment": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: getNamedFragment
            },
            "getFragments": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: getFragments
            },
            "createFragment": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: createFragment
            },
            "createNamedFragment": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: createNamedFragment
            },
            "removeNamedFragment": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: removeNamedFragment
            },
            "toJSON": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: toJSON
            }
          });
          return object;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("72", ["a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Utils;
  var Factory;
  function syncSnapshot() {
    var resource = this;
    resource._snapshot = Utils.O.clone(resource, {arrays: true});
  }
  function isDirty() {
    var resource = this;
    return !Utils.O.areEqual(resource, resource._snapshot, {arrays: true});
  }
  return {
    setters: [function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(object) {
          return (Utils.hasPropertyDefined(object, "_snapshot") && Utils.hasFunction(object, "_syncSnapshot") && Utils.hasFunction(object, "isDirty"));
        };
        Factory.decorate = function(object, snapshot) {
          if (snapshot === void 0) {
            snapshot = {};
          }
          if (Factory.hasClassProperties(object))
            return object;
          var persistedResource = object;
          Object.defineProperties(persistedResource, {
            "_snapshot": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: snapshot
            },
            "_syncSnapshot": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: syncSnapshot
            },
            "isDirty": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: isDirty
            }
          });
          return persistedResource;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("73", ["5c", "72", "9"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var ObjectSchema,
      PersistedResource,
      RDF;
  var Factory;
  function resolveURI(uri) {
    if (RDF.URI.Util.isAbsolute(uri))
      return uri;
    var schema = this.document._documents.getGeneralSchema();
    return ObjectSchema.Util.resolveURI(uri, schema);
  }
  function extendAddType(superFunction) {
    return function(type) {
      type = resolveURI.call(this, type);
      superFunction.call(this, type);
    };
  }
  function extendHasType(superFunction) {
    return function(type) {
      type = resolveURI.call(this, type);
      return superFunction.call(this, type);
    };
  }
  function extendRemoveType(superFunction) {
    return function(type) {
      type = resolveURI.call(this, type);
      superFunction.call(this, type);
    };
  }
  return {
    setters: [function(ObjectSchema_1) {
      ObjectSchema = ObjectSchema_1;
    }, function(PersistedResource_1) {
      PersistedResource = PersistedResource_1;
    }, function(RDF_1) {
      RDF = RDF_1;
    }],
    execute: function() {
      Factory = (function() {
        function Factory() {}
        Factory.decorate = function(fragment, snapshot) {
          if (snapshot === void 0) {
            snapshot = {};
          }
          PersistedResource.Factory.decorate(fragment, snapshot);
          Object.defineProperties(fragment, {
            "addType": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: extendAddType(fragment.addType)
            },
            "hasType": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: extendHasType(fragment.hasType)
            },
            "removeType": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: extendRemoveType(fragment.removeType)
            }
          });
          return fragment;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("74", ["73"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var PersistedFragment;
  var Factory;
  return {
    setters: [function(PersistedFragment_1) {
      PersistedFragment = PersistedFragment_1;
    }],
    execute: function() {
      Factory = (function() {
        function Factory() {}
        Factory.decorate = function(fragment, snapshot) {
          if (snapshot === void 0) {
            snapshot = {};
          }
          PersistedFragment.Factory.decorate(fragment, snapshot);
          return fragment;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("8", ["5", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Errors,
      Utils;
  var Factory,
      Util;
  return {
    setters: [function(Errors_1) {
      Errors = Errors_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(object) {
          return !!(Utils.hasPropertyDefined(object, "_id") && Utils.hasPropertyDefined(object, "_resolved") && Utils.hasPropertyDefined(object, "id") && Utils.hasFunction(object, "isResolved") && Utils.hasPropertyDefined(object, "resolve"));
        };
        Factory.is = function(value) {
          return !!(Utils.isObject(value) && Factory.hasClassProperties(value));
        };
        Factory.create = function(id) {
          return Factory.createFrom({}, id);
        };
        Factory.createFrom = function(object, id) {
          id = !!id ? id : "";
          var pointer = Factory.decorate(object);
          pointer.id = id;
          return pointer;
        };
        Factory.decorate = function(object) {
          if (Factory.hasClassProperties(object))
            return object;
          Object.defineProperties(object, {
            "_id": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: ""
            },
            "_resolved": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: false
            },
            "id": {
              enumerable: false,
              configurable: true,
              get: function() {
                if (!this._id)
                  return "";
                return this._id;
              },
              set: function(value) {
                this._id = value;
              }
            },
            "isResolved": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: function() {
                return this._resolved;
              }
            },
            "resolve": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: function() {
                return Promise.reject(new Errors.NotImplementedError("A simple pointer cannot be resolved by it self."));
              }
            }
          });
          return object;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
      Util = (function() {
        function Util() {}
        Util.areEqual = function(pointer1, pointer2) {
          return pointer1.id === pointer2.id;
        };
        Util.getIDs = function(pointers) {
          var ids = [];
          for (var _i = 0,
              pointers_1 = pointers; _i < pointers_1.length; _i++) {
            var pointer = pointers_1[_i];
            ids.push(pointer.id);
          }
          return ids;
        };
        Util.resolveAll = function(pointers) {
          var promises = pointers.map(function(pointer) {
            return pointer.resolve();
          });
          return Promise.all(promises).then(function(results) {
            var resolvedPointers = results.map(function(result) {
              return result[0];
            });
            var responses = results.map(function(result) {
              return result[1];
            });
            return [resolvedPointers, responses];
          });
        };
        return Util;
      }());
      exports_1("Util", Util);
    }
  };
});

$__System.register("17", ["15", "5c", "72", "73", "74", "8", "9", "a", "48"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Document,
      ObjectSchema,
      PersistedResource,
      PersistedFragment,
      PersistedNamedFragment,
      Pointer,
      RDF,
      Utils,
      URI;
  var Factory;
  function extendIsDirty(superFunction) {
    return function() {
      var isDirty = superFunction.call(this);
      if (isDirty)
        return true;
      var document = this;
      for (var _i = 0,
          _a = document.getFragments(); _i < _a.length; _i++) {
        var fragment = _a[_i];
        if (fragment.isDirty())
          return true;
      }
      for (var _b = 0,
          _c = document._savedFragments; _b < _c.length; _b++) {
        var fragment = _c[_b];
        if (!document.hasFragment(fragment.id))
          return true;
      }
      return false;
    };
  }
  function syncSavedFragments() {
    var document = this;
    document._savedFragments = Utils.A.from(document._fragmentsIndex.values());
  }
  function resolveURI(uri) {
    if (URI.Util.isAbsolute(uri))
      return uri;
    var schema = this._documents.getGeneralSchema();
    return ObjectSchema.Util.resolveURI(uri, schema);
  }
  function extendAddType(superFunction) {
    return function(type) {
      type = resolveURI.call(this, type);
      superFunction.call(this, type);
    };
  }
  function extendHasType(superFunction) {
    return function(type) {
      type = resolveURI.call(this, type);
      return superFunction.call(this, type);
    };
  }
  function extendRemoveType(superFunction) {
    return function(type) {
      type = resolveURI.call(this, type);
      superFunction.call(this, type);
    };
  }
  function extendCreateFragment(superFunction) {
    return function(slugOrObject, slug) {
      var fragment = superFunction.call(this, slugOrObject, slug);
      var id = fragment.id;
      if (RDF.URI.Util.isBNodeID(id)) {
        PersistedFragment.Factory.decorate(fragment);
      } else {
        PersistedNamedFragment.Factory.decorate(fragment);
      }
      return fragment;
    };
  }
  function extendCreateNamedFragment(superFunction) {
    return function(slugOrObject, slug) {
      var fragment = superFunction.call(this, slugOrObject, slug);
      return PersistedFragment.Factory.decorate(fragment);
    };
  }
  function refresh() {
    return this._documents.refresh(this);
  }
  function save() {
    return this._documents.save(this);
  }
  function saveAndRefresh() {
    return this._documents.saveAndRefresh(this);
  }
  function _delete() {
    return this._documents.delete(this.id);
  }
  function getDownloadURL() {
    return this._documents.getDownloadURL(this.id);
  }
  function addMember(memberOrUri) {
    return this._documents.addMember(this.id, memberOrUri);
  }
  function addMembers(members) {
    return this._documents.addMembers(this.id, members);
  }
  function createChild(slugOrObject, slug) {
    var object = !Utils.isString(slugOrObject) && !!slugOrObject ? slugOrObject : {};
    slug = Utils.isString(slugOrObject) ? slugOrObject : slug;
    return this._documents.createChild(this.id, object, slug);
  }
  function createChildAndRetrieve(slugOrObject, slug) {
    var object = !Utils.isString(slugOrObject) && !!slugOrObject ? slugOrObject : {};
    slug = Utils.isString(slugOrObject) ? slugOrObject : slug;
    return this._documents.createChildAndRetrieve(this.id, object, slug);
  }
  function createAccessPoint(accessPoint, slugOrRequestOptions, requestOptions) {
    return this._documents.createAccessPoint(this.id, accessPoint, slugOrRequestOptions, requestOptions);
  }
  function listChildren() {
    return this._documents.listChildren(this.id);
  }
  function getChildren(retrievalPreferences) {
    return this._documents.getChildren(this.id, retrievalPreferences);
  }
  function listMembers(includeNonReadable) {
    if (includeNonReadable === void 0) {
      includeNonReadable = true;
    }
    return this._documents.listMembers(this.id, includeNonReadable);
  }
  function getMembers(nonReadRetPref, retrievalPreferences) {
    if (nonReadRetPref === void 0) {
      nonReadRetPref = true;
    }
    return this._documents.getMembers(this.id, nonReadRetPref, retrievalPreferences);
  }
  function removeMember(memberOrUri) {
    return this._documents.removeMember(this.id, memberOrUri);
  }
  function removeMembers(members) {
    return this._documents.removeMembers(this.id, members);
  }
  function removeAllMembers() {
    return this._documents.removeAllMembers(this.id);
  }
  function upload(data, slug) {
    return this._documents.upload(this.id, data, slug);
  }
  function executeRawASKQuery(askQuery, requestOptions) {
    if (requestOptions === void 0) {
      requestOptions = {};
    }
    return this._documents.executeRawASKQuery(this.id, askQuery, requestOptions);
  }
  function executeASKQuery(askQuery, requestOptions) {
    if (requestOptions === void 0) {
      requestOptions = {};
    }
    return this._documents.executeASKQuery(this.id, askQuery, requestOptions);
  }
  function executeRawSELECTQuery(selectQuery, requestOptions) {
    if (requestOptions === void 0) {
      requestOptions = {};
    }
    return this._documents.executeRawSELECTQuery(this.id, selectQuery, requestOptions);
  }
  function executeSELECTQuery(selectQuery, requestOptions) {
    if (requestOptions === void 0) {
      requestOptions = {};
    }
    return this._documents.executeSELECTQuery(this.id, selectQuery, requestOptions);
  }
  function executeRawCONSTRUCTQuery(constructQuery, requestOptions) {
    if (requestOptions === void 0) {
      requestOptions = {};
    }
    return this._documents.executeRawCONSTRUCTQuery(this.id, constructQuery, requestOptions);
  }
  function executeRawDESCRIBEQuery(describeQuery, requestOptions) {
    if (requestOptions === void 0) {
      requestOptions = {};
    }
    return this._documents.executeRawDESCRIBEQuery(this.id, describeQuery, requestOptions);
  }
  function executeUPDATE(updateQuery, requestOptions) {
    if (requestOptions === void 0) {
      requestOptions = {};
    }
    return this._documents.executeUPDATE(this.id, updateQuery, requestOptions);
  }
  return {
    setters: [function(Document_1) {
      Document = Document_1;
    }, function(ObjectSchema_1) {
      ObjectSchema = ObjectSchema_1;
    }, function(PersistedResource_1) {
      PersistedResource = PersistedResource_1;
    }, function(PersistedFragment_1) {
      PersistedFragment = PersistedFragment_1;
    }, function(PersistedNamedFragment_1) {
      PersistedNamedFragment = PersistedNamedFragment_1;
    }, function(Pointer_1) {
      Pointer = Pointer_1;
    }, function(RDF_1) {
      RDF = RDF_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }, function(URI_1) {
      URI = URI_1;
    }],
    execute: function() {
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(object) {
          return Utils.hasPropertyDefined(object, "_documents") && Utils.hasPropertyDefined(object, "_etag") && Utils.hasFunction(object, "refresh") && Utils.hasFunction(object, "save") && Utils.hasFunction(object, "saveAndRefresh") && Utils.hasFunction(object, "delete") && Utils.hasFunction(object, "getDownloadURL") && Utils.hasFunction(object, "addMember") && Utils.hasFunction(object, "addMembers") && Utils.hasFunction(object, "createAccessPoint") && Utils.hasFunction(object, "createChild") && Utils.hasFunction(object, "createChildAndRetrieve") && Utils.hasFunction(object, "getChildren") && Utils.hasFunction(object, "getMembers") && Utils.hasFunction(object, "listChildren") && Utils.hasFunction(object, "listMembers") && Utils.hasFunction(object, "removeMember") && Utils.hasFunction(object, "removeMembers") && Utils.hasFunction(object, "removeAllMembers") && Utils.hasFunction(object, "upload") && Utils.hasFunction(object, "executeRawASKQuery") && Utils.hasFunction(object, "executeASKQuery") && Utils.hasFunction(object, "executeRawSELECTQuery") && Utils.hasFunction(object, "executeSELECTQuery") && Utils.hasFunction(object, "executeRawDESCRIBEQuery") && Utils.hasFunction(object, "executeRawCONSTRUCTQuery") && Utils.hasFunction(object, "executeUPDATE");
        };
        Factory.is = function(object) {
          return Factory.hasClassProperties(object) && Document.Factory.is(object);
        };
        Factory.create = function(uri, documents, snapshot) {
          if (snapshot === void 0) {
            snapshot = {};
          }
          var document = Document.Factory.create();
          document.id = uri;
          return Factory.decorate(document, documents, snapshot);
        };
        Factory.createFrom = function(object, uri, documents, snapshot) {
          if (snapshot === void 0) {
            snapshot = {};
          }
          var document = Document.Factory.createFrom(object);
          document.id = uri;
          return Factory.decorate(document, documents, snapshot);
        };
        Factory.decorate = function(document, documents, snapshot) {
          if (snapshot === void 0) {
            snapshot = {};
          }
          Document.Factory.decorate(document);
          PersistedResource.Factory.decorate(document, snapshot);
          if (Factory.hasClassProperties(document))
            return document;
          var persistedDocument = document;
          Object.defineProperties(persistedDocument, {
            "_documents": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: documents
            },
            "_etag": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: null
            },
            "_savedFragments": {
              writable: true,
              enumerable: false,
              configurable: true,
              value: []
            },
            "_syncSavedFragments": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: syncSavedFragments
            },
            "addType": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: extendAddType(persistedDocument.addType)
            },
            "hasType": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: extendHasType(persistedDocument.hasType)
            },
            "removeType": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: extendRemoveType(persistedDocument.removeType)
            },
            "hasPointer": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: (function() {
                var superFunction = persistedDocument.hasPointer;
                return function(id) {
                  if (RDF.URI.Util.isPrefixed(id)) {
                    id = ObjectSchema.Digester.resolvePrefixedURI(id, this._documents.getGeneralSchema());
                  }
                  if (superFunction.call(this, id))
                    return true;
                  return !URI.Util.isBNodeID(id) && this._documents.hasPointer(id);
                };
              })()
            },
            "getPointer": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: (function() {
                var superFunction = persistedDocument.getPointer;
                var inScopeFunction = persistedDocument.inScope;
                return function(id) {
                  if (RDF.URI.Util.isPrefixed(id)) {
                    id = ObjectSchema.Digester.resolvePrefixedURI(id, this._documents.getGeneralSchema());
                  }
                  if (inScopeFunction.call(this, id))
                    return superFunction.call(this, id);
                  return this._documents.getPointer(id);
                };
              })()
            },
            "inScope": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: (function() {
                var superFunction = persistedDocument.inScope;
                return function(idOrPointer) {
                  var uri = Pointer.Factory.is(idOrPointer) ? idOrPointer.id : idOrPointer;
                  if (RDF.URI.Util.isPrefixed(uri)) {
                    uri = ObjectSchema.Digester.resolvePrefixedURI(uri, this._documents.getGeneralSchema());
                  }
                  if (superFunction.call(this, uri))
                    return true;
                  return this._documents.inScope(uri);
                };
              })()
            },
            "refresh": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: refresh
            },
            "save": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: save
            },
            "saveAndRefresh": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: saveAndRefresh
            },
            "delete": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: _delete
            },
            "getDownloadURL": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: getDownloadURL
            },
            "addMember": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: addMember
            },
            "addMembers": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: addMembers
            },
            "createChild": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: createChild
            },
            "createChildAndRetrieve": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: createChildAndRetrieve
            },
            "createAccessPoint": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: createAccessPoint
            },
            "listChildren": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: listChildren
            },
            "getChildren": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: getChildren
            },
            "listMembers": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: listMembers
            },
            "getMembers": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: getMembers
            },
            "removeMember": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: removeMember
            },
            "removeMembers": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: removeMembers
            },
            "removeAllMembers": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: removeAllMembers
            },
            "upload": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: upload
            },
            "executeRawASKQuery": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: executeRawASKQuery
            },
            "executeASKQuery": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: executeASKQuery
            },
            "executeRawSELECTQuery": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: executeRawSELECTQuery
            },
            "executeSELECTQuery": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: executeSELECTQuery
            },
            "executeRawCONSTRUCTQuery": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: executeRawCONSTRUCTQuery
            },
            "executeRawDESCRIBEQuery": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: executeRawDESCRIBEQuery
            },
            "executeUPDATE": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: executeUPDATE
            },
            "createFragment": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: extendCreateFragment(persistedDocument.createFragment)
            },
            "createNamedFragment": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: extendCreateNamedFragment(persistedDocument.createNamedFragment)
            },
            "isDirty": {
              writable: false,
              enumerable: false,
              configurable: true,
              value: extendIsDirty(persistedDocument.isDirty)
            }
          });
          return persistedDocument;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("75", ["6", "17", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var NS,
      PersistedDocument,
      Utils;
  var RDF_CLASS,
      SCHEMA,
      Factory;
  return {
    setters: [function(NS_1) {
      NS = NS_1;
    }, function(PersistedDocument_1) {
      PersistedDocument = PersistedDocument_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      exports_1("RDF_CLASS", RDF_CLASS = NS.C.Class.RDFRepresentation);
      exports_1("SCHEMA", SCHEMA = {
        "mediaType": {
          "@id": NS.C.Predicate.mediaType,
          "@type": NS.XSD.DataType.string
        },
        "size": {
          "@id": NS.C.Predicate.size,
          "@type": NS.XSD.DataType.long
        }
      });
      Factory = (function() {
        function Factory() {}
        Factory.hasClassProperties = function(object) {
          return Utils.hasPropertyDefined(object, "mediaType") && Utils.hasPropertyDefined(object, "size");
        };
        Factory.is = function(object) {
          return Factory.hasClassProperties(object) && PersistedDocument.Factory.is(object) && object.hasType(RDF_CLASS);
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
    }
  };
});

$__System.register("c", ["10", "42", "14", "69", "5d", "62", "68", "5", "44", "6", "5c", "5e", "9", "75"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var AppRole,
      APIDescription,
      Auth,
      BlankNode,
      Documents_1,
      Error,
      ErrorResponse,
      Errors,
      LDP,
      NS,
      ObjectSchema,
      ProtectedDocument,
      RDF,
      RDFRepresentation;
  var Class,
      instance;
  return {
    setters: [function(AppRole_1) {
      AppRole = AppRole_1;
    }, function(APIDescription_1) {
      APIDescription = APIDescription_1;
    }, function(Auth_1) {
      Auth = Auth_1;
    }, function(BlankNode_1) {
      BlankNode = BlankNode_1;
    }, function(Documents_1_1) {
      Documents_1 = Documents_1_1;
    }, function(Error_1) {
      Error = Error_1;
    }, function(ErrorResponse_1) {
      ErrorResponse = ErrorResponse_1;
    }, function(Errors_1) {
      Errors = Errors_1;
    }, function(LDP_1) {
      LDP = LDP_1;
    }, function(NS_1) {
      NS = NS_1;
    }, function(ObjectSchema_1) {
      ObjectSchema = ObjectSchema_1;
    }, function(ProtectedDocument_1) {
      ProtectedDocument = ProtectedDocument_1;
    }, function(RDF_1) {
      RDF = RDF_1;
    }, function(RDFRepresentation_1) {
      RDFRepresentation = RDFRepresentation_1;
    }],
    execute: function() {
      Class = (function() {
        function Class() {
          this.settings = new Map();
          this.generalObjectSchema = new ObjectSchema.DigestedObjectSchema();
          this.typeObjectSchemaMap = new Map();
          this.auth = null;
          this.documents = new Documents_1.default(this);
          this.registerDefaultObjectSchemas();
        }
        Object.defineProperty(Class.prototype, "parentContext", {
          get: function() {
            return null;
          },
          enumerable: true,
          configurable: true
        });
        Class.prototype.getBaseURI = function() {
          return this.resolve("");
        };
        Class.prototype.resolve = function(relativeURI) {
          return relativeURI;
        };
        Class.prototype.hasSetting = function(name) {
          return (this.settings.has(name)) || (!!this.parentContext && this.parentContext.hasSetting(name));
        };
        Class.prototype.getSetting = function(name) {
          if (this.settings.has(name))
            return this.settings.get(name);
          if (this.parentContext && this.parentContext.hasSetting(name))
            return this.parentContext.getSetting(name);
          return null;
        };
        Class.prototype.setSetting = function(name, value) {
          this.settings.set(name, value);
        };
        Class.prototype.deleteSetting = function(name) {
          this.settings.delete(name);
        };
        Class.prototype.hasObjectSchema = function(type) {
          type = this.resolveTypeURI(type);
          if (this.typeObjectSchemaMap.has(type))
            return true;
          if (!!this.parentContext && this.parentContext.hasObjectSchema(type))
            return true;
          return false;
        };
        Class.prototype.getObjectSchema = function(type) {
          if (type === void 0) {
            type = null;
          }
          if (!!type) {
            type = this.resolveTypeURI(type);
            if (this.typeObjectSchemaMap.has(type))
              return this.typeObjectSchemaMap.get(type);
            if (!!this.parentContext && this.parentContext.hasObjectSchema(type))
              return this.parentContext.getObjectSchema(type);
            return null;
          } else {
            if (!!this.generalObjectSchema)
              return this.generalObjectSchema;
            if (!!this.parentContext)
              return this.parentContext.getObjectSchema();
            throw new Errors.IllegalStateError();
          }
        };
        Class.prototype.extendObjectSchema = function(typeOrObjectSchema, objectSchema) {
          if (objectSchema === void 0) {
            objectSchema = null;
          }
          var type = objectSchema ? typeOrObjectSchema : null;
          objectSchema = !!objectSchema ? objectSchema : typeOrObjectSchema;
          var digestedSchema = ObjectSchema.Digester.digestSchema(objectSchema);
          if (!type) {
            this.extendGeneralObjectSchema(digestedSchema);
          } else {
            this.extendTypeObjectSchema(digestedSchema, type);
          }
        };
        Class.prototype.clearObjectSchema = function(type) {
          if (type === void 0) {
            type = null;
          }
          if (!type) {
            this.generalObjectSchema = !!this.parentContext ? null : new ObjectSchema.DigestedObjectSchema();
          } else {
            type = this.resolveTypeURI(type);
            this.typeObjectSchemaMap.delete(type);
          }
        };
        Class.prototype.extendGeneralObjectSchema = function(digestedSchema) {
          var digestedSchemaToExtend;
          if (!!this.generalObjectSchema) {
            digestedSchemaToExtend = this.generalObjectSchema;
          } else if (!!this.parentContext) {
            digestedSchemaToExtend = this.parentContext.getObjectSchema();
          } else {
            digestedSchemaToExtend = new ObjectSchema.DigestedObjectSchema();
          }
          this.generalObjectSchema = ObjectSchema.Digester.combineDigestedObjectSchemas([new ObjectSchema.DigestedObjectSchema(), digestedSchemaToExtend, digestedSchema]);
        };
        Class.prototype.extendTypeObjectSchema = function(digestedSchema, type) {
          type = this.resolveTypeURI(type);
          var digestedSchemaToExtend;
          if (this.typeObjectSchemaMap.has(type)) {
            digestedSchemaToExtend = this.typeObjectSchemaMap.get(type);
          } else if (!!this.parentContext && this.parentContext.hasObjectSchema(type)) {
            digestedSchemaToExtend = this.parentContext.getObjectSchema(type);
          } else {
            digestedSchemaToExtend = new ObjectSchema.DigestedObjectSchema();
          }
          var extendedDigestedSchema = ObjectSchema.Digester.combineDigestedObjectSchemas([digestedSchemaToExtend, digestedSchema]);
          this.typeObjectSchemaMap.set(type, extendedDigestedSchema);
        };
        Class.prototype.registerDefaultObjectSchemas = function() {
          this.extendObjectSchema(BlankNode.SCHEMA);
          this.extendObjectSchema(ProtectedDocument.RDF_CLASS, ProtectedDocument.SCHEMA);
          this.extendObjectSchema(RDFRepresentation.RDF_CLASS, RDFRepresentation.SCHEMA);
          this.extendObjectSchema(APIDescription.RDF_CLASS, APIDescription.SCHEMA);
          this.extendObjectSchema(Error.RDF_CLASS, Error.SCHEMA);
          this.extendObjectSchema(ErrorResponse.RDF_CLASS, ErrorResponse.SCHEMA);
          this.extendObjectSchema(NS.CS.Class.Application, {
            "name": {
              "@id": NS.CS.Predicate.namae,
              "@type": NS.XSD.DataType.string
            },
            "description": {
              "@id": NS.CS.Predicate.description,
              "@type": NS.XSD.DataType.string
            },
            "rootContainer": {
              "@id": NS.CS.Predicate.rootContainer,
              "@type": "@id"
            },
            "allowsOrigins": {
              "@id": NS.CS.Predicate.allowsOrigin,
              "@container": "@set"
            }
          });
          this.extendObjectSchema(AppRole.RDF_CLASS, Auth.Role.SCHEMA);
          this.extendObjectSchema(AppRole.RDF_CLASS, AppRole.SCHEMA);
          this.extendObjectSchema(LDP.ResponseMetadata.RDF_CLASS, LDP.ResponseMetadata.SCHEMA);
          this.extendObjectSchema(LDP.ResourceMetadata.RDF_CLASS, LDP.ResourceMetadata.SCHEMA);
          this.extendObjectSchema(LDP.AddMemberAction.RDF_CLASS, LDP.AddMemberAction.SCHEMA);
          this.extendObjectSchema(LDP.RemoveMemberAction.RDF_CLASS, LDP.RemoveMemberAction.SCHEMA);
          this.extendObjectSchema(Auth.ACE.RDF_CLASS, Auth.ACE.SCHEMA);
          this.extendObjectSchema(Auth.ACL.RDF_CLASS, Auth.ACL.SCHEMA);
          this.extendObjectSchema(Auth.Agent.RDF_CLASS, Auth.Agent.SCHEMA);
          this.extendObjectSchema(Auth.Ticket.RDF_CLASS, Auth.Ticket.SCHEMA);
          this.extendObjectSchema(Auth.Token.RDF_CLASS, Auth.Token.SCHEMA);
        };
        Class.prototype.resolveTypeURI = function(uri) {
          if (RDF.URI.Util.isAbsolute(uri))
            return uri;
          var schema = this.getObjectSchema();
          var vocab;
          if (this.hasSetting("vocabulary"))
            vocab = this.resolve(this.getSetting("vocabulary"));
          if (RDF.URI.Util.isPrefixed(uri)) {
            uri = ObjectSchema.Digester.resolvePrefixedURI(uri, schema);
          } else if (vocab) {
            uri = vocab + uri;
          }
          return uri;
        };
        return Class;
      }());
      exports_1("Class", Class);
      exports_1("instance", instance = new Class());
      exports_1("default", instance);
    }
  };
});

$__System.register("68", ["58", "3f", "6", "9", "c", "16"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var FreeResources,
      Parser_1,
      NS,
      RDF,
      SDKContext_1,
      IllegalArgumentError_1;
  var RDF_CLASS,
      SCHEMA,
      Util,
      Parser;
  return {
    setters: [function(FreeResources_1) {
      FreeResources = FreeResources_1;
    }, function(Parser_1_1) {
      Parser_1 = Parser_1_1;
    }, function(NS_1) {
      NS = NS_1;
    }, function(RDF_1) {
      RDF = RDF_1;
    }, function(SDKContext_1_1) {
      SDKContext_1 = SDKContext_1_1;
    }, function(IllegalArgumentError_1_1) {
      IllegalArgumentError_1 = IllegalArgumentError_1_1;
    }],
    execute: function() {
      exports_1("RDF_CLASS", RDF_CLASS = NS.C.Class.ErrorResponse);
      exports_1("SCHEMA", SCHEMA = {
        "errors": {
          "@id": NS.C.Predicate.error,
          "@type": "@id",
          "@container": "@set"
        },
        "requestID": {
          "@id": NS.C.Predicate.requestID,
          "@type": NS.XSD.DataType.string
        },
        "statusCode": {
          "@id": NS.C.Predicate.httpStatusCode,
          "@type": NS.XSD.DataType.int
        }
      });
      Util = (function() {
        function Util() {}
        Util.getMessage = function(errorResponse) {
          var messages = [];
          for (var _i = 0,
              _a = errorResponse.errors; _i < _a.length; _i++) {
            var error = _a[_i];
            messages.push(error.message);
          }
          return messages.join(", ");
        };
        return Util;
      }());
      exports_1("Util", Util);
      Parser = (function() {
        function Parser() {}
        Parser.prototype.parse = function(input, errorResponse) {
          if (errorResponse === void 0) {
            errorResponse = {};
          }
          var documents = SDKContext_1.default.documents;
          var parser = new Parser_1.default();
          return parser.parse(input).then(function(freeNodes) {
            var freeResources = FreeResources.Factory.create(documents);
            for (var _i = 0,
                freeNodes_1 = freeNodes; _i < freeNodes_1.length; _i++) {
              var node = freeNodes_1[_i];
              var resource = void 0;
              var errorResponseFound = false;
              if (RDF.Node.Util.hasType(node, RDF_CLASS)) {
                if (errorResponseFound)
                  throw new IllegalArgumentError_1.default("The input string contains more than once c:ErrorResponse.");
                resource = freeResources.createResourceFrom(errorResponse);
                errorResponseFound = true;
              } else {
                resource = freeResources.getPointer(node["@id"]);
              }
              documents.jsonldConverter.compact(node, resource, documents.getSchemaFor(node), freeResources);
            }
            if (!errorResponse)
              throw new IllegalArgumentError_1.default("The input string does not contains a c:ErrorResponse.");
            return errorResponse;
          });
        };
        return Parser;
      }());
      exports_1("Parser", Parser);
    }
  };
});

$__System.register("76", ["3d", "77", "3e", "78", "68", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Errors,
      Header,
      Method_1,
      Response_1,
      ErrorResponse,
      Utils;
  var Service,
      Util;
  function forEachHeaders(headers, setHeader) {
    var namesIterator = headers.keys();
    var next = namesIterator.next();
    while (!next.done) {
      var name = next.value;
      var value = headers.get(name);
      setHeader(name, value.toString());
      next = namesIterator.next();
    }
  }
  function onResolve(resolve, reject, response) {
    if (response.status >= 200 && response.status <= 299) {
      resolve(response);
    } else if (response.status >= 400 && response.status < 600 && Errors.statusCodeMap.has(response.status)) {
      var errorClass = Errors.statusCodeMap.get(response.status);
      var error_1 = new errorClass("", response);
      if (!response.data) {
        reject(error_1);
      }
      var parser = new ErrorResponse.Parser();
      parser.parse(response.data, error_1).then(function(errorResponse) {
        error_1.message = ErrorResponse.Util.getMessage(errorResponse);
        reject(error_1);
      }).catch(function() {
        error_1.message = response.data;
        reject(error_1);
      });
    } else {
      reject(new Errors.UnknownError(response.data, response));
    }
  }
  function sendWithBrowser(method, url, body, options) {
    return new Promise(function(resolve, reject) {
      var request = options.request ? options.request : new XMLHttpRequest();
      request.open(method, url, true);
      if (options.headers)
        forEachHeaders(options.headers, function(name, value) {
          return request.setRequestHeader(name, value);
        });
      request.withCredentials = options.sendCredentialsOnCORS;
      if (options.timeout)
        request.timeout = options.timeout;
      request.onload = request.onerror = function() {
        var response = new Response_1.default(request);
        onResolve(resolve, reject, response);
      };
      if (body) {
        request.send(body);
      } else {
        request.send();
      }
    });
  }
  function sendWithNode(method, url, body, options) {
    return new Promise(function(resolve, reject) {
      var URL = require("url");
      function returnResponse(request, res) {
        var rawData = [];
        res.on("data", function(chunk) {
          rawData.push(chunk);
        }).on("end", function() {
          var data = Buffer.concat(rawData).toString("utf8");
          var response = new Response_1.default(request, data, res);
          onResolve(resolve, reject, response);
        });
      }
      var numberOfRedirects = 0;
      function sendRequest(_url) {
        var parsedURL = URL.parse(_url);
        var HTTP = parsedURL.protocol === "http:" ? require("http") : require("https");
        var requestOptions = {
          protocol: parsedURL.protocol,
          hostname: parsedURL.hostname,
          path: parsedURL.path,
          method: method,
          headers: {},
          withCredentials: options.sendCredentialsOnCORS
        };
        if (options.headers)
          forEachHeaders(options.headers, function(name, value) {
            return requestOptions.headers[name] = value;
          });
        var request = HTTP.request(requestOptions);
        if (options.timeout)
          request.setTimeout(options.timeout);
        request.on("response", function(res) {
          if (res.statusCode >= 300 && res.statusCode <= 399 && "location" in res.headers) {
            if (++numberOfRedirects < 10)
              return sendRequest(URL.resolve(_url, res.headers.location));
          }
          returnResponse(request, res);
        });
        request.on("error", function(error) {
          var response = new Response_1.default(request, error.message);
          onResolve(resolve, reject, response);
        });
        request.end(body);
      }
      sendRequest(url);
    });
  }
  function isBody(data) {
    return Utils.isString(data) || typeof Blob !== "undefined" && data instanceof Blob || typeof Buffer !== "undefined" && data instanceof Buffer;
  }
  return {
    setters: [function(Errors_1) {
      Errors = Errors_1;
    }, function(Header_1) {
      Header = Header_1;
    }, function(Method_1_1) {
      Method_1 = Method_1_1;
    }, function(Response_1_1) {
      Response_1 = Response_1_1;
    }, function(ErrorResponse_1) {
      ErrorResponse = ErrorResponse_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      Service = (function() {
        function Service() {}
        Service.send = function(method, url, bodyOrOptions, optionsOrParser, parser) {
          if (bodyOrOptions === void 0) {
            bodyOrOptions = Service.defaultOptions;
          }
          if (optionsOrParser === void 0) {
            optionsOrParser = Service.defaultOptions;
          }
          if (parser === void 0) {
            parser = null;
          }
          var body = null;
          var options = Utils.hasProperty(optionsOrParser, "parse") ? bodyOrOptions : optionsOrParser;
          parser = Utils.hasProperty(optionsOrParser, "parse") ? optionsOrParser : parser;
          if (isBody(bodyOrOptions)) {
            body = bodyOrOptions;
          } else {
            options = bodyOrOptions ? bodyOrOptions : options;
          }
          options = Utils.extend({}, Service.defaultOptions, options);
          if (Utils.isNumber(method))
            method = Method_1.default[method];
          var requestPromise;
          if (typeof XMLHttpRequest !== "undefined") {
            requestPromise = sendWithBrowser(method, url, body, options);
          } else {
            requestPromise = sendWithNode(method, url, body, options);
          }
          if (parser === null)
            return requestPromise;
          return requestPromise.then(function(response) {
            return parser.parse(response.data).then(function(parsedBody) {
              return [parsedBody, response];
            });
          });
        };
        Service.options = function(url, options) {
          if (options === void 0) {
            options = Service.defaultOptions;
          }
          return Service.send(Method_1.default.OPTIONS, url, options);
        };
        Service.head = function(url, options) {
          if (options === void 0) {
            options = Service.defaultOptions;
          }
          return Service.send(Method_1.default.HEAD, url, options);
        };
        Service.get = function(url, options, parser) {
          if (options === void 0) {
            options = Service.defaultOptions;
          }
          if (parser === void 0) {
            parser = null;
          }
          return Service.send(Method_1.default.GET, url, null, options, parser);
        };
        Service.post = function(url, bodyOrOptions, options, parser) {
          if (bodyOrOptions === void 0) {
            bodyOrOptions = Service.defaultOptions;
          }
          if (options === void 0) {
            options = Service.defaultOptions;
          }
          if (parser === void 0) {
            parser = null;
          }
          return Service.send(Method_1.default.POST, url, bodyOrOptions, options, parser);
        };
        Service.put = function(url, bodyOrOptions, options, parser) {
          if (bodyOrOptions === void 0) {
            bodyOrOptions = Service.defaultOptions;
          }
          if (options === void 0) {
            options = Service.defaultOptions;
          }
          if (parser === void 0) {
            parser = null;
          }
          return Service.send(Method_1.default.PUT, url, bodyOrOptions, options, parser);
        };
        Service.patch = function(url, bodyOrOptions, options, parser) {
          if (bodyOrOptions === void 0) {
            bodyOrOptions = Service.defaultOptions;
          }
          if (options === void 0) {
            options = Service.defaultOptions;
          }
          if (parser === void 0) {
            parser = null;
          }
          return Service.send(Method_1.default.PATCH, url, bodyOrOptions, options, parser);
        };
        Service.delete = function(url, bodyOrOptions, optionsOrParser, parser) {
          if (bodyOrOptions === void 0) {
            bodyOrOptions = Service.defaultOptions;
          }
          if (optionsOrParser === void 0) {
            optionsOrParser = Service.defaultOptions;
          }
          if (parser === void 0) {
            parser = null;
          }
          return Service.send(Method_1.default.DELETE, url, bodyOrOptions, optionsOrParser, parser);
        };
        Service.defaultOptions = {sendCredentialsOnCORS: true};
        return Service;
      }());
      exports_1("Service", Service);
      Util = (function() {
        function Util() {}
        Util.getHeader = function(headerName, requestOptions, initialize) {
          if (initialize === void 0) {
            initialize = false;
          }
          headerName = headerName.toLowerCase();
          if (initialize) {
            var headers = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map();
            if (!headers.has(headerName))
              headers.set(headerName, new Header.Class());
          }
          if (!requestOptions.headers)
            return undefined;
          return requestOptions.headers.get(headerName);
        };
        Util.setAcceptHeader = function(accept, requestOptions) {
          var headers = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map();
          headers.set("accept", new Header.Class(accept));
          return requestOptions;
        };
        Util.setContentTypeHeader = function(contentType, requestOptions) {
          var headers = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map();
          headers.set("content-type", new Header.Class(contentType));
          return requestOptions;
        };
        Util.setIfMatchHeader = function(etag, requestOptions) {
          var headers = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map();
          headers.set("if-match", new Header.Class(etag));
          return requestOptions;
        };
        Util.setPreferredInteractionModel = function(interactionModelURI, requestOptions) {
          var prefer = Util.getHeader("prefer", requestOptions, true);
          prefer.values.push(new Header.Value(interactionModelURI + "; rel=interaction-model"));
          return requestOptions;
        };
        Util.setContainerRetrievalPreferences = function(preferences, requestOptions, returnRepresentation) {
          if (returnRepresentation === void 0) {
            returnRepresentation = true;
          }
          var prefer = Util.getHeader("prefer", requestOptions, true);
          var representation = returnRepresentation ? "return=representation; " : "";
          var keys = ["include", "omit"];
          for (var _i = 0,
              keys_1 = keys; _i < keys_1.length; _i++) {
            var key = keys_1[_i];
            if (key in preferences && preferences[key].length > 0) {
              prefer.values.push(new Header.Value("" + representation + key + "=\"" + preferences[key].join(" ") + "\""));
            }
          }
          return requestOptions;
        };
        Util.setSlug = function(slug, requestOptions) {
          var slugHeader = Util.getHeader("slug", requestOptions, true);
          slugHeader.values.push(new Header.Value(slug));
          return requestOptions;
        };
        Util.isOptions = function(object) {
          return Utils.hasPropertyDefined(object, "headers") || Utils.hasPropertyDefined(object, "sendCredentialsOnCORS") || Utils.hasPropertyDefined(object, "timeout") || Utils.hasPropertyDefined(object, "request");
        };
        return Util;
      }());
      exports_1("Util", Util);
    }
  };
});

$__System.register("77", [], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Class,
      Value,
      Util;
  return {
    setters: [],
    execute: function() {
      Class = (function() {
        function Class(valueOrValues) {
          this.values = [];
          if (!valueOrValues) {
            return;
          } else if (Array.isArray(valueOrValues)) {
            this.values = valueOrValues;
          } else {
            this.setValues(valueOrValues);
          }
        }
        Class.prototype.toString = function() {
          return this.values.join(", ");
        };
        Class.prototype.setValues = function(valuesString) {
          this.values = [];
          var valueStrings = valuesString.split(",");
          for (var i = 0,
              length = valueStrings.length; i < length; i++) {
            var valueString = valueStrings[i].trim();
            this.values.push(new Value(valueString));
          }
        };
        return Class;
      }());
      exports_1("Class", Class);
      Value = (function() {
        function Value(value) {
          this.value = value;
        }
        Value.prototype.toString = function() {
          return this.value;
        };
        return Value;
      }());
      exports_1("Value", Value);
      Util = (function() {
        function Util() {}
        Util.parseHeaders = function(headersString) {
          var headers = new Map();
          var headerStrings = headersString.split(/\r?\n/);
          for (var i = 0,
              length = headerStrings.length; i < length; i++) {
            var headerString = headerStrings[i];
            if (!headerString.trim())
              continue;
            var parts = headerString.split(":");
            if (parts.length < 2)
              throw new Error("ParseError: The header couldn't be parsed.");
            if (parts.length > 2)
              parts[1] = parts.slice(1).join(":");
            var name = parts[0].trim().toLowerCase();
            var header = new Class(parts[1].trim());
            if (headers.has(name)) {
              var existingHeader = headers.get(name);
              existingHeader.values.concat(header.values);
            } else
              headers.set(name, header);
          }
          return headers;
        };
        return Util;
      }());
      exports_1("Util", Util);
      exports_1("default", Class);
    }
  };
});

$__System.register("78", ["77", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Header,
      Utils_1;
  var Class,
      Util;
  return {
    setters: [function(Header_1) {
      Header = Header_1;
    }, function(Utils_1_1) {
      Utils_1 = Utils_1_1;
    }],
    execute: function() {
      Class = (function() {
        function Class(request, data, response) {
          if (response === void 0) {
            response = {};
          }
          if (typeof XMLHttpRequest !== "undefined" && request instanceof XMLHttpRequest) {
            var res = request;
            this.status = res.status;
            this.data = res.responseText;
            this.setHeaders(res.getAllResponseHeaders());
          } else {
            this.status = response.statusCode;
            this.data = data || "";
            this.setHeaders(response.headers);
          }
          this.request = request;
        }
        Class.prototype.getHeader = function(name) {
          name = name.toLowerCase();
          return this.headers.get(name) || null;
        };
        Class.prototype.setHeaders = function(headers) {
          if (Utils_1.isString(headers)) {
            this.headers = Header.Util.parseHeaders(headers);
          } else {
            this.headers = new Map();
            if (Utils_1.isObject(headers)) {
              for (var _i = 0,
                  _a = Object.keys(headers); _i < _a.length; _i++) {
                var name = _a[_i];
                this.headers.set(name, new Header.Class(headers[name]));
              }
            }
          }
        };
        return Class;
      }());
      exports_1("Class", Class);
      Util = (function() {
        function Util() {}
        Util.getETag = function(response) {
          if (!response || !response.headers)
            return null;
          var etagHeader = response.getHeader("ETag");
          if (!etagHeader)
            return null;
          if (!etagHeader.values.length)
            return null;
          if (etagHeader.values.length > 1)
            console.warn("The response contains more than one ETag. Response: %o", response);
          return etagHeader.values[0].toString();
        };
        return Util;
      }());
      exports_1("Util", Util);
      exports_1("default", Class);
    }
  };
});

$__System.register("79", [], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var StatusCode;
  return {
    setters: [],
    execute: function() {
      (function(StatusCode) {
        StatusCode[StatusCode["CONTINUE"] = 100] = "CONTINUE";
        StatusCode[StatusCode["SWITCHING_PROTOCOLS"] = 101] = "SWITCHING_PROTOCOLS";
        StatusCode[StatusCode["OK"] = 200] = "OK";
        StatusCode[StatusCode["CREATED"] = 201] = "CREATED";
        StatusCode[StatusCode["ACCEPTED"] = 202] = "ACCEPTED";
        StatusCode[StatusCode["NON_AUTHORITATIVE_INFORMATION"] = 203] = "NON_AUTHORITATIVE_INFORMATION";
        StatusCode[StatusCode["NO_CONTENT"] = 204] = "NO_CONTENT";
        StatusCode[StatusCode["RESET_CONTENT"] = 205] = "RESET_CONTENT";
        StatusCode[StatusCode["PARTIAL_CONTENT"] = 206] = "PARTIAL_CONTENT";
        StatusCode[StatusCode["MULTIPLE_CHOICES"] = 300] = "MULTIPLE_CHOICES";
        StatusCode[StatusCode["MOVED_PERMANENTLY"] = 301] = "MOVED_PERMANENTLY";
        StatusCode[StatusCode["FOUND"] = 302] = "FOUND";
        StatusCode[StatusCode["SEE_OTHER"] = 303] = "SEE_OTHER";
        StatusCode[StatusCode["NOT_MODIFIED"] = 304] = "NOT_MODIFIED";
        StatusCode[StatusCode["USE_PROXY"] = 305] = "USE_PROXY";
        StatusCode[StatusCode["TEMPORARY_REDIRECT"] = 307] = "TEMPORARY_REDIRECT";
        StatusCode[StatusCode["BAD_REQUEST"] = 400] = "BAD_REQUEST";
        StatusCode[StatusCode["UNAUTHORIZED"] = 401] = "UNAUTHORIZED";
        StatusCode[StatusCode["PAYMENT_REQUIRED"] = 402] = "PAYMENT_REQUIRED";
        StatusCode[StatusCode["FORBIDDEN"] = 403] = "FORBIDDEN";
        StatusCode[StatusCode["NOT_FOUND"] = 404] = "NOT_FOUND";
        StatusCode[StatusCode["METHOD_NOT_ALLOWED"] = 405] = "METHOD_NOT_ALLOWED";
        StatusCode[StatusCode["NOT_ACCEPTABLE"] = 406] = "NOT_ACCEPTABLE";
        StatusCode[StatusCode["PROXY_AUTHENTICATION_REQUIRED"] = 407] = "PROXY_AUTHENTICATION_REQUIRED";
        StatusCode[StatusCode["REQUEST_TIME_OUT"] = 408] = "REQUEST_TIME_OUT";
        StatusCode[StatusCode["CONFLICT"] = 409] = "CONFLICT";
        StatusCode[StatusCode["GONE"] = 410] = "GONE";
        StatusCode[StatusCode["LENGTH_REQUIRED"] = 411] = "LENGTH_REQUIRED";
        StatusCode[StatusCode["PRECONDITION_FAILED"] = 412] = "PRECONDITION_FAILED";
        StatusCode[StatusCode["REQUEST_ENTITY_TOO_LARGE"] = 413] = "REQUEST_ENTITY_TOO_LARGE";
        StatusCode[StatusCode["REQUEST_URI_TOO_LARGE"] = 414] = "REQUEST_URI_TOO_LARGE";
        StatusCode[StatusCode["UNSUPPORTED_MEDIA_TYPE"] = 415] = "UNSUPPORTED_MEDIA_TYPE";
        StatusCode[StatusCode["REQUESTED_RANGE_NOT_SATISFIABLE"] = 416] = "REQUESTED_RANGE_NOT_SATISFIABLE";
        StatusCode[StatusCode["EXPECTATION_FAILED"] = 417] = "EXPECTATION_FAILED";
        StatusCode[StatusCode["INTERNAL_SERVER_ERROR"] = 500] = "INTERNAL_SERVER_ERROR";
        StatusCode[StatusCode["NOT_IMPLEMENTED"] = 501] = "NOT_IMPLEMENTED";
        StatusCode[StatusCode["BAD_GATEWAY"] = 502] = "BAD_GATEWAY";
        StatusCode[StatusCode["SERVICE_UNAVAILABLE"] = 503] = "SERVICE_UNAVAILABLE";
        StatusCode[StatusCode["GATEWAY_TIME_OUT"] = 504] = "GATEWAY_TIME_OUT";
        StatusCode[StatusCode["HTTP_VERSION_NOT_SUPPORTED"] = 505] = "HTTP_VERSION_NOT_SUPPORTED";
      })(StatusCode || (StatusCode = {}));
      exports_1("default", StatusCode);
    }
  };
});

$__System.register("7a", [], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Class;
  return {
    setters: [],
    execute: function() {
      Class = (function() {
        function Class() {}
        Class.prototype.parse = function(body) {
          return new Promise(function(resolve, reject) {
            resolve(body);
          });
        };
        return Class;
      }());
      exports_1("Class", Class);
      exports_1("default", Class);
    }
  };
});

$__System.register("50", ["3d", "77", "40", "3e", "23", "76", "78", "79", "7a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Errors,
      Header,
      JSONParser,
      Method_1,
      Parser,
      Request,
      Response,
      StatusCode_1,
      StringParser;
  return {
    setters: [function(Errors_1) {
      Errors = Errors_1;
    }, function(Header_1) {
      Header = Header_1;
    }, function(JSONParser_1) {
      JSONParser = JSONParser_1;
    }, function(Method_1_1) {
      Method_1 = Method_1_1;
    }, function(Parser_1) {
      Parser = Parser_1;
    }, function(Request_1) {
      Request = Request_1;
    }, function(Response_1) {
      Response = Response_1;
    }, function(StatusCode_1_1) {
      StatusCode_1 = StatusCode_1_1;
    }, function(StringParser_1) {
      StringParser = StringParser_1;
    }],
    execute: function() {
      exports_1("Errors", Errors);
      exports_1("Header", Header);
      exports_1("JSONParser", JSONParser);
      exports_1("Method", Method_1.default);
      exports_1("Parser", Parser);
      exports_1("Request", Request);
      exports_1("Response", Response);
      exports_1("StatusCode", StatusCode_1.default);
      exports_1("StringParser", StringParser);
    }
  };
});

$__System.register("5c", ["5", "9", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Errors,
      RDF,
      Utils;
  var ContainerType,
      PointerType,
      DigestedObjectSchema,
      DigestedPropertyDefinition,
      Digester,
      Util;
  return {
    setters: [function(Errors_1) {
      Errors = Errors_1;
    }, function(RDF_1) {
      RDF = RDF_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      (function(ContainerType) {
        ContainerType[ContainerType["SET"] = 0] = "SET";
        ContainerType[ContainerType["LIST"] = 1] = "LIST";
        ContainerType[ContainerType["LANGUAGE"] = 2] = "LANGUAGE";
      })(ContainerType || (ContainerType = {}));
      exports_1("ContainerType", ContainerType);
      (function(PointerType) {
        PointerType[PointerType["ID"] = 0] = "ID";
        PointerType[PointerType["VOCAB"] = 1] = "VOCAB";
      })(PointerType || (PointerType = {}));
      exports_1("PointerType", PointerType);
      DigestedObjectSchema = (function() {
        function DigestedObjectSchema() {
          this.base = "";
          this.vocab = null;
          this.prefixes = new Map();
          this.properties = new Map();
          this.prefixedURIs = new Map();
        }
        return DigestedObjectSchema;
      }());
      exports_1("DigestedObjectSchema", DigestedObjectSchema);
      DigestedPropertyDefinition = (function() {
        function DigestedPropertyDefinition() {
          this.uri = null;
          this.literal = null;
          this.literalType = null;
          this.pointerType = null;
          this.language = null;
          this.containerType = null;
        }
        return DigestedPropertyDefinition;
      }());
      exports_1("DigestedPropertyDefinition", DigestedPropertyDefinition);
      Digester = (function() {
        function Digester() {}
        Digester.digestSchema = function(schemaOrSchemas) {
          if (!Utils.isArray(schemaOrSchemas))
            return Digester.digestSingleSchema(schemaOrSchemas);
          var digestedSchemas = [];
          for (var _i = 0,
              _a = schemaOrSchemas; _i < _a.length; _i++) {
            var schema = _a[_i];
            digestedSchemas.push(Digester.digestSingleSchema(schema));
          }
          return Digester.combineDigestedObjectSchemas(digestedSchemas);
        };
        Digester.combineDigestedObjectSchemas = function(digestedSchemas) {
          if (digestedSchemas.length === 0)
            throw new Errors.IllegalArgumentError("At least one DigestedObjectSchema needs to be specified.");
          var combinedSchema = new DigestedObjectSchema();
          combinedSchema.vocab = digestedSchemas[0].vocab;
          combinedSchema.base = digestedSchemas[0].base;
          for (var _i = 0,
              digestedSchemas_1 = digestedSchemas; _i < digestedSchemas_1.length; _i++) {
            var digestedSchema = digestedSchemas_1[_i];
            Utils.M.extend(combinedSchema.prefixes, digestedSchema.prefixes);
            Utils.M.extend(combinedSchema.prefixedURIs, digestedSchema.prefixedURIs);
            Utils.M.extend(combinedSchema.properties, digestedSchema.properties);
          }
          Digester.resolvePrefixedURIs(combinedSchema);
          return combinedSchema;
        };
        Digester.resolvePrefixedURI = function(uri, digestedSchema) {
          if (uri === null)
            return null;
          if (!RDF.URI.Util.isPrefixed(uri))
            return uri;
          var _a = uri.split(":"),
              prefix = _a[0],
              slug = _a[1];
          if (digestedSchema.prefixes.has(prefix)) {
            uri = digestedSchema.prefixes.get(prefix) + slug;
          }
          return uri;
        };
        Digester._resolvePrefixedURI = function(uri, digestedSchema) {
          if (uri.stringValue === null || !RDF.URI.Util.isPrefixed(uri.stringValue))
            return uri;
          var _a = uri.stringValue.split(":"),
              prefix = _a[0],
              slug = _a[1];
          if (digestedSchema.prefixes.has(prefix)) {
            uri.stringValue = digestedSchema.prefixes.get(prefix) + slug;
          } else {
            if (!digestedSchema.prefixedURIs.has(prefix))
              digestedSchema.prefixedURIs.set(prefix, []);
            digestedSchema.prefixedURIs.get(prefix).push(uri);
          }
          return uri;
        };
        Digester.digestSingleSchema = function(schema) {
          var digestedSchema = new DigestedObjectSchema();
          for (var _i = 0,
              _a = ["@base", "@vocab"]; _i < _a.length; _i++) {
            var propertyName = _a[_i];
            if (!(propertyName in schema))
              continue;
            var value = schema[propertyName];
            if (!Utils.isString(value))
              throw new Errors.IllegalArgumentError("The value of '" + propertyName + "' must be a string or null.");
            if ((propertyName === "@vocab" || !!value) && !RDF.URI.Util.isAbsolute(value) && !RDF.URI.Util.isBNodeID(value))
              throw new Errors.IllegalArgumentError("The value of '" + propertyName + "' must be an absolute URI" + (propertyName === "@base" ? " or an empty string" : "") + ".");
            digestedSchema[propertyName.substr(1)] = value;
          }
          digestedSchema.base = digestedSchema.base || "";
          for (var propertyName in schema) {
            if (!schema.hasOwnProperty(propertyName))
              continue;
            if (propertyName === "@reverse")
              continue;
            if (propertyName === "@index")
              continue;
            if (propertyName === "@base")
              continue;
            if (propertyName === "@vocab")
              continue;
            var propertyValue = schema[propertyName];
            if (Utils.isString(propertyValue)) {
              if (RDF.URI.Util.isPrefixed(propertyName))
                throw new Errors.IllegalArgumentError("A prefixed property cannot be equal to another URI.");
              var uri = new RDF.URI.Class(propertyValue);
              if (RDF.URI.Util.isPrefixed(uri.stringValue))
                uri = Digester._resolvePrefixedURI(uri, digestedSchema);
              digestedSchema.prefixes.set(propertyName, uri);
            } else if (!!propertyValue && Utils.isObject(propertyValue)) {
              var schemaDefinition = propertyValue;
              var digestedDefinition = new DigestedPropertyDefinition();
              if ("@id" in schemaDefinition) {
                if (RDF.URI.Util.isPrefixed(propertyName))
                  throw new Errors.IllegalArgumentError("A prefixed property cannot have assigned another URI.");
                if (!Utils.isString(schemaDefinition["@id"]))
                  throw new Errors.IllegalArgumentError("@id needs to point to a string");
                digestedDefinition.uri = Digester._resolvePrefixedURI(new RDF.URI.Class(schemaDefinition["@id"]), digestedSchema);
              } else if (RDF.URI.Util.isPrefixed(propertyName)) {
                digestedDefinition.uri = Digester._resolvePrefixedURI(new RDF.URI.Class(propertyName), digestedSchema);
              } else if (digestedSchema.vocab !== null) {
                digestedDefinition.uri = new RDF.URI.Class(digestedSchema.vocab + propertyName);
              } else {
                throw new Errors.IllegalArgumentError("Every property definition needs to have a \"@id\" defined.");
              }
              if ("@type" in schemaDefinition) {
                if (!Utils.isString(schemaDefinition["@type"]))
                  throw new Errors.IllegalArgumentError("@type needs to point to a string");
                if (schemaDefinition["@type"] === "@id" || schemaDefinition["@type"] === "@vocab") {
                  digestedDefinition.literal = false;
                  digestedDefinition.pointerType = (schemaDefinition["@type"] === "@id") ? PointerType.ID : PointerType.VOCAB;
                } else {
                  digestedDefinition.literal = true;
                  digestedDefinition.literalType = Digester._resolvePrefixedURI(new RDF.URI.Class(schemaDefinition["@type"]), digestedSchema);
                }
              }
              if ("@language" in schemaDefinition) {
                if (!Utils.isString(schemaDefinition["@language"]))
                  throw new Errors.IllegalArgumentError("@language needs to point to a string");
                digestedDefinition.language = schemaDefinition["@language"];
              }
              if ("@container" in schemaDefinition) {
                switch (schemaDefinition["@container"]) {
                  case "@set":
                    digestedDefinition.containerType = ContainerType.SET;
                    break;
                  case "@list":
                    digestedDefinition.containerType = ContainerType.LIST;
                    break;
                  case "@language":
                    if (digestedDefinition.language !== null)
                      throw new Errors.IllegalArgumentError("@container cannot be set to @language when the property definition already contains an @language tag.");
                    digestedDefinition.containerType = ContainerType.LANGUAGE;
                    break;
                  default:
                    throw new Errors.IllegalArgumentError("@container needs to be equal to '@list', '@set', or '@language'");
                }
              }
              digestedSchema.properties.set(propertyName, digestedDefinition);
            } else {
              throw new Errors.IllegalArgumentError("ObjectSchema Properties can only have string values or object values.");
            }
          }
          Digester.resolvePrefixedURIs(digestedSchema);
          return digestedSchema;
        };
        Digester.resolvePrefixedURIs = function(digestedSchema) {
          digestedSchema.prefixes.forEach(function(prefixValue, prefixName) {
            if (!digestedSchema.prefixedURIs.has(prefixName))
              return;
            var prefixedURIs = digestedSchema.prefixedURIs.get(prefixName);
            for (var _i = 0,
                prefixedURIs_1 = prefixedURIs; _i < prefixedURIs_1.length; _i++) {
              var prefixedURI = prefixedURIs_1[_i];
              Digester._resolvePrefixedURI(prefixedURI, digestedSchema);
            }
            digestedSchema.prefixedURIs.delete(prefixName);
          });
          return digestedSchema;
        };
        return Digester;
      }());
      exports_1("Digester", Digester);
      Util = (function() {
        function Util() {}
        Util.resolveURI = function(uri, schema) {
          if (RDF.URI.Util.isAbsolute(uri))
            return uri;
          if (RDF.URI.Util.isPrefixed(uri)) {
            uri = Digester.resolvePrefixedURI(uri, schema);
          } else if (schema.vocab) {
            uri = schema.vocab + uri;
          }
          return uri;
        };
        return Util;
      }());
      exports_1("Util", Util);
    }
  };
});

$__System.register("41", ["7b", "5", "50", "5c", "9", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var InvalidJSONLDSyntaxError_1,
      Errors,
      HTTP,
      ObjectSchema,
      RDF,
      Utils;
  var MAX_CONTEXT_URLS,
      LINK_HEADER_REL,
      Class;
  return {
    setters: [function(InvalidJSONLDSyntaxError_1_1) {
      InvalidJSONLDSyntaxError_1 = InvalidJSONLDSyntaxError_1_1;
    }, function(Errors_1) {
      Errors = Errors_1;
    }, function(HTTP_1) {
      HTTP = HTTP_1;
    }, function(ObjectSchema_1) {
      ObjectSchema = ObjectSchema_1;
    }, function(RDF_1) {
      RDF = RDF_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      MAX_CONTEXT_URLS = 10;
      LINK_HEADER_REL = "http://www.w3.org/ns/json-ld#context";
      Class = (function() {
        function Class() {}
        Class.expand = function(input) {
          return this.retrieveContexts(input, Object.create(null), "").then(function() {
            var expanded = Class.process(new ObjectSchema.DigestedObjectSchema(), input);
            if (Utils.isObject(expanded) && "@graph" in expanded && Object.keys(expanded).length === 1) {
              expanded = expanded["@graph"];
            } else if (expanded === null) {
              expanded = [];
            }
            if (!Utils.isArray(expanded))
              expanded = [expanded];
            return expanded;
          });
        };
        Class.getTargetFromLinkHeader = function(header) {
          var rLinkHeader = /\s*<([^>]*?)>\s*(?:;\s*(.*))?/;
          for (var _i = 0,
              _a = header.values; _i < _a.length; _i++) {
            var value = _a[_i];
            var match = value.toString().match(rLinkHeader);
            if (!match)
              continue;
            var target = match[1];
            var params = match[2];
            var rParams = /(.*?)=(?:(?:"([^"]*?)")|([^"]*?))\s*(?:(?:;\s*)|$)/g;
            var result = {};
            while (true) {
              match = rParams.exec(params);
              if (!match)
                break;
              result[match[1]] = (match[2] === undefined) ? match[3] : match[2];
            }
            if (result["rel"] === LINK_HEADER_REL)
              return target;
          }
          return null;
        };
        Class.findContextURLs = function(input, contexts, base, replace) {
          if (replace === void 0) {
            replace = false;
          }
          var previousContexts = Object.keys(contexts).length;
          if (Utils.isArray(input)) {
            for (var _i = 0,
                _a = input; _i < _a.length; _i++) {
              var element = _a[_i];
              Class.findContextURLs(element, contexts, base);
            }
          } else if (Utils.isPlainObject(input)) {
            for (var key in input) {
              if ("@context" !== key) {
                Class.findContextURLs(input[key], contexts, base);
                continue;
              }
              var urlOrArrayOrContext = input[key];
              if (Utils.isArray(urlOrArrayOrContext)) {
                var contextArray = urlOrArrayOrContext;
                for (var index = 0,
                    length = contextArray.length; index < length; ++index) {
                  var urlOrContext = contextArray[index];
                  if (!Utils.isString(urlOrContext))
                    continue;
                  var url = urlOrContext;
                  url = RDF.URI.Util.resolve(base, url);
                  if (replace) {
                    if (Utils.isArray(contexts[url])) {
                      Array.prototype.splice.apply(contextArray, [index, 1].concat(contexts[url]));
                      index += contexts[url].length - 1;
                      length = contextArray.length;
                    } else {
                      contextArray[index] = contexts[url];
                    }
                  } else if (!(url in contexts)) {
                    contexts[url] = true;
                  }
                }
              } else if (Utils.isString(urlOrArrayOrContext)) {
                var url = urlOrArrayOrContext;
                url = RDF.URI.Util.resolve(base, url);
                if (replace) {
                  input[key] = contexts[url];
                } else if (!(url in contexts)) {
                  contexts[url] = null;
                }
              }
            }
          }
          return previousContexts < Object.keys(contexts).length;
        };
        Class.retrieveContexts = function(input, contextsRequested, base) {
          if (Object.keys(contextsRequested).length > MAX_CONTEXT_URLS)
            return Promise.reject(new InvalidJSONLDSyntaxError_1.default("Maximum number of @context URLs exceeded."));
          var contextToResolved = Object.create(null);
          if (!Class.findContextURLs(input, contextToResolved, base))
            return Promise.resolve();
          function resolved(url, promise) {
            return promise.then(function(_a) {
              var object = _a[0],
                  response = _a[1];
              var _contextsRequested = Utils.O.clone(contextsRequested);
              _contextsRequested[url] = true;
              var contextWrapper = {"@context": {}};
              var header = response.getHeader("Content-Type");
              if (!Utils.S.contains(header.toString(), "application/ld+json")) {
                header = response.getHeader("Link");
                var link = void 0;
                if (!!header)
                  link = Class.getTargetFromLinkHeader(header);
                if (!!link)
                  contextWrapper["@context"] = link;
              } else {
                contextWrapper["@context"] = ("@context" in object) ? object["@context"] : {};
              }
              contextToResolved[url] = contextWrapper["@context"];
              return Class.retrieveContexts(contextWrapper, _contextsRequested, url);
            });
          }
          var promises = [];
          for (var url in contextToResolved) {
            if (url in contextsRequested)
              return Promise.reject(new InvalidJSONLDSyntaxError_1.default("Cyclical @context URLs detected."));
            var requestOptions = {sendCredentialsOnCORS: false};
            HTTP.Request.Util.setAcceptHeader("application/ld+json, application/json", requestOptions);
            var promise = HTTP.Request.Service.get(url, requestOptions, new HTTP.JSONParser.Class());
            promises.push(resolved(url, promise));
          }
          return Promise.all(promises).then(function() {
            Class.findContextURLs(input, contextToResolved, base, true);
          });
        };
        Class.isKeyword = function(value) {
          if (!Utils.isString(value))
            return false;
          switch (value) {
            case "@base":
            case "@context":
            case "@container":
            case "@default":
            case "@embed":
            case "@explicit":
            case "@graph":
            case "@id":
            case "@index":
            case "@language":
            case "@list":
            case "@omitDefault":
            case "@preserve":
            case "@requireAll":
            case "@reverse":
            case "@set":
            case "@type":
            case "@value":
            case "@vocab":
              return true;
            default:
              return false;
          }
        };
        Class.isValidType = function(value) {
          if (Utils.isString(value))
            return true;
          if (!Utils.isArray(value))
            return false;
          for (var _i = 0,
              _a = value; _i < _a.length; _i++) {
            var element = _a[_i];
            if (!Utils.isString(element))
              return false;
          }
          return true;
        };
        Class.expandURI = function(schema, uri, relativeTo) {
          if (relativeTo === void 0) {
            relativeTo = {};
          }
          if (uri === null || Class.isKeyword(uri) || RDF.URI.Util.isAbsolute(uri))
            return uri;
          if (schema.properties.has(uri))
            return schema.properties.get(uri).uri.stringValue;
          if (RDF.URI.Util.isPrefixed(uri))
            return ObjectSchema.Digester.resolvePrefixedURI(uri, schema);
          if (schema.prefixes.has(uri))
            return schema.prefixes.get(uri).stringValue;
          if (relativeTo.vocab) {
            if (schema.vocab === null)
              return null;
            return schema.vocab + uri;
          }
          if (relativeTo.base)
            RDF.URI.Util.resolve(schema.base, uri);
          return uri;
        };
        Class.expandLanguageMap = function(languageMap) {
          var expandedLanguage = [];
          var keys = Object.keys(languageMap).sort();
          for (var _i = 0,
              keys_1 = keys; _i < keys_1.length; _i++) {
            var key = keys_1[_i];
            var values = languageMap[key];
            if (!Utils.isArray(values))
              values = [values];
            for (var _a = 0,
                values_1 = values; _a < values_1.length; _a++) {
              var item = values_1[_a];
              if (item === null)
                continue;
              if (!Utils.isString(item))
                throw new InvalidJSONLDSyntaxError_1.default("Language map values must be strings.");
              expandedLanguage.push({
                "@value": item,
                "@language": key.toLowerCase()
              });
            }
          }
          return expandedLanguage;
        };
        Class.getContainer = function(context, property) {
          if (context.properties.has(property))
            return context.properties.get(property).containerType;
          return undefined;
        };
        Class.expandValue = function(context, value, propertyName) {
          if (Utils.isNull(value) || !Utils.isDefined(value))
            return null;
          if (propertyName === "@id") {
            return Class.expandURI(context, value, {base: true});
          } else if (propertyName === "@type") {
            return Class.expandURI(context, value, {
              vocab: true,
              base: true
            });
          }
          var definition = new ObjectSchema.DigestedPropertyDefinition();
          if (context.properties.has(propertyName))
            definition = context.properties.get(propertyName);
          if (definition.literal === false || (propertyName === "@graph" && Utils.isString(value))) {
            var options = {base: true};
            if (definition.pointerType === ObjectSchema.PointerType.VOCAB)
              options.vocab = true;
            return {"@id": Class.expandURI(context, value, options)};
          }
          if (Class.isKeyword(propertyName))
            return value;
          var expandedValue = {};
          if (!!definition.literalType) {
            expandedValue["@type"] = definition.literalType.stringValue;
          } else if (Utils.isString(value)) {
            if (!!definition.language)
              expandedValue["@laguage"] = definition.language;
          }
          if (["boolean", "number", "string"].indexOf(typeof value) === -1)
            value = value.toString();
          expandedValue["@value"] = value;
          return expandedValue;
        };
        Class.process = function(context, element, activeProperty, insideList) {
          if (Utils.isNull(element) || !Utils.isDefined(element))
            return null;
          if (!Utils.isArray(element) && !Utils.isObject(element)) {
            if (!insideList && (activeProperty === null || activeProperty === "@graph"))
              return null;
            return Class.expandValue(context, element, activeProperty);
          }
          if (Utils.isArray(element)) {
            var container = Class.getContainer(context, activeProperty);
            insideList = insideList || container === ObjectSchema.ContainerType.LIST;
            var expandedElement_1 = [];
            for (var _i = 0,
                _a = element; _i < _a.length; _i++) {
              var item = _a[_i];
              var expandedItem = Class.process(context, item, activeProperty);
              if (expandedItem === null)
                continue;
              if (insideList && (Utils.isArray(expandedItem) || RDF.List.Factory.is(expandedItem)))
                throw new InvalidJSONLDSyntaxError_1.default("Lists of lists are not permitted.");
              if (!Utils.isArray(expandedItem))
                expandedItem = [expandedItem];
              Array.prototype.push.apply(expandedElement_1, expandedItem);
            }
            return expandedElement_1;
          }
          if ("@context" in element) {
            context = ObjectSchema.Digester.combineDigestedObjectSchemas([ObjectSchema.Digester.digestSchema(element["@context"]), context]);
          }
          var expandedElement = {};
          var keys = Object.keys(element);
          for (var _b = 0,
              keys_2 = keys; _b < keys_2.length; _b++) {
            var key = keys_2[_b];
            if (key === "@context")
              continue;
            var uri = Class.expandURI(context, key, {vocab: true});
            if (!uri || !(RDF.URI.Util.isAbsolute(uri) || RDF.URI.Util.isBNodeID(uri) || Class.isKeyword(uri)))
              continue;
            var value = element[key];
            if (Class.isKeyword(uri)) {
              if (uri === "@id" && !Utils.isString(value))
                throw new InvalidJSONLDSyntaxError_1.default("\"@id\" value must a string.");
              if (uri === "@type" && !Class.isValidType(value))
                throw new InvalidJSONLDSyntaxError_1.default("\"@type\" value must a string, an array of strings.");
              if (uri === "@graph" && !(Utils.isObject(value) || Utils.isArray(value)))
                throw new InvalidJSONLDSyntaxError_1.default("\"@graph\" value must not be an object or an array.");
              if (uri === "@value" && (Utils.isObject(value) || Utils.isArray(value)))
                throw new InvalidJSONLDSyntaxError_1.default("\"@value\" value must not be an object or an array.");
              if (uri === "@language") {
                if (value)
                  continue;
                if (!Utils.isString(value))
                  throw new InvalidJSONLDSyntaxError_1.default("\"@language\" value must be a string.");
                value = value.toLowerCase();
              }
              if (uri === "@index" && !Utils.isString(value))
                throw new InvalidJSONLDSyntaxError_1.default("\"@index\" value must be a string.");
              if (uri === "@reverse" && !Utils.isObject(value))
                throw new InvalidJSONLDSyntaxError_1.default("\"@reverse\" value must be an object.");
              if (uri === "@index" || uri === "@reverse")
                throw new Errors.NotImplementedError("The SDK does not support \"@index\" and \"@reverse\" tags.");
            }
            var expandedValue = void 0;
            var container = Class.getContainer(context, key);
            if (container === ObjectSchema.ContainerType.LANGUAGE && Utils.isObject(value)) {
              expandedValue = Class.expandLanguageMap(value);
            } else {
              var nextActiveProperty = key;
              var isList = container === ObjectSchema.ContainerType.LIST;
              if (isList || container === ObjectSchema.ContainerType.SET)
                nextActiveProperty = (isList && activeProperty === "@graph") ? null : activeProperty;
              expandedValue = Class.process(context, value, nextActiveProperty);
            }
            if (expandedValue === null && uri !== "@value")
              continue;
            if (uri !== "@list" && !RDF.List.Factory.is(expandedValue) && container === ObjectSchema.ContainerType.LIST) {
              if (!Utils.isArray(expandedValue))
                expandedValue = [expandedValue];
              expandedValue = {"@list": expandedValue};
            }
            var useArray = ["@type", "@id", "@value", "@language"].indexOf(uri) === -1;
            Class.addValue(expandedElement, uri, expandedValue, {propertyIsArray: useArray});
          }
          if ("@value" in expandedElement) {
            if (expandedElement["@value"] === null)
              expandedElement = null;
          } else if ("@type" in expandedElement) {
            if (!Utils.isArray(expandedElement["@type"]))
              expandedElement["@type"] = [expandedElement["@type"]];
          } else if ("@set" in expandedElement) {
            expandedElement = expandedElement["@set"];
          }
          return expandedElement;
        };
        Class.addValue = function(element, propertyName, value, options) {
          if (Utils.isArray(value)) {
            var values = value;
            if (values.length === 0 && options.propertyIsArray && !Utils.hasProperty(element, propertyName))
              element[propertyName] = [];
            for (var _i = 0,
                values_2 = values; _i < values_2.length; _i++) {
              var item = values_2[_i];
              Class.addValue(element, propertyName, item, options);
            }
          } else if (propertyName in element) {
            if (!Class.hasValue(element, propertyName, value)) {
              var items = element[propertyName];
              if (!Utils.isArray(items))
                items = element[propertyName] = [items];
              items.push(value);
            }
          } else {
            element[propertyName] = options.propertyIsArray ? [value] : value;
          }
        };
        Class.hasProperty = function(element, propertyName) {
          if (propertyName in element) {
            var item = element[propertyName];
            return !Utils.isArray(item) || item.length > 0;
          }
          return false;
        };
        Class.compareValues = function(value1, value2) {
          if (value1 === value2)
            return true;
          if (Utils.isObject(value1) && Utils.isObject(value2)) {
            if ("@value" in value1 && value1["@value"] === value2["@value"] && value1["@type"] === value2["@type"] && value1["@language"] === value2["@language"] && value1["@index"] === value2["@index"])
              return true;
            if ("@id" in value1)
              return value1["@id"] === value2["@id"];
          }
          return false;
        };
        Class.hasValue = function(element, propertyName, value) {
          if (Class.hasProperty(element, propertyName)) {
            var item = element[propertyName];
            var isList = RDF.List.Factory.is(value);
            if (isList || Utils.isArray(item)) {
              var items = item;
              if (isList)
                items = items["@list"];
              for (var _i = 0,
                  items_1 = items; _i < items_1.length; _i++) {
                var entry = items_1[_i];
                if (Class.compareValues(entry, value))
                  return true;
              }
            } else if (!Utils.isArray(value)) {
              return Class.compareValues(item, value);
            }
          }
          return false;
        };
        return Class;
      }());
      exports_1("Class", Class);
      exports_1("default", Class);
    }
  };
});

$__System.register("54", ["59", "3f", "41"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Converter,
      Parser,
      Processor;
  return {
    setters: [function(Converter_1) {
      Converter = Converter_1;
    }, function(Parser_1) {
      Parser = Parser_1;
    }, function(Processor_1) {
      Processor = Processor_1;
    }],
    execute: function() {
      exports_1("Converter", Converter);
      exports_1("Parser", Parser);
      exports_1("Processor", Processor);
    }
  };
});

$__System.register("7c", ["3a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AbstractError_1;
  var IDAlreadyInUseError;
  return {
    setters: [function(AbstractError_1_1) {
      AbstractError_1 = AbstractError_1_1;
    }],
    execute: function() {
      IDAlreadyInUseError = (function(_super) {
        __extends(IDAlreadyInUseError, _super);
        function IDAlreadyInUseError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(IDAlreadyInUseError.prototype, "name", {
          get: function() {
            return "IDAlreadyInUseError";
          },
          enumerable: true,
          configurable: true
        });
        return IDAlreadyInUseError;
      }(AbstractError_1.default));
      exports_1("default", IDAlreadyInUseError);
    }
  };
});

$__System.register("7d", ["3a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AbstractError_1;
  var IllegalActionError;
  return {
    setters: [function(AbstractError_1_1) {
      AbstractError_1 = AbstractError_1_1;
    }],
    execute: function() {
      IllegalActionError = (function(_super) {
        __extends(IllegalActionError, _super);
        function IllegalActionError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(IllegalActionError.prototype, "name", {
          get: function() {
            return "IllegalActionError";
          },
          enumerable: true,
          configurable: true
        });
        return IllegalActionError;
      }(AbstractError_1.default));
      exports_1("default", IllegalActionError);
    }
  };
});

$__System.register("16", ["3a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AbstractError_1;
  var IllegalArgumentError;
  return {
    setters: [function(AbstractError_1_1) {
      AbstractError_1 = AbstractError_1_1;
    }],
    execute: function() {
      IllegalArgumentError = (function(_super) {
        __extends(IllegalArgumentError, _super);
        function IllegalArgumentError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(IllegalArgumentError.prototype, "name", {
          get: function() {
            return "IllegalArgumentError";
          },
          enumerable: true,
          configurable: true
        });
        return IllegalArgumentError;
      }(AbstractError_1.default));
      exports_1("default", IllegalArgumentError);
    }
  };
});

$__System.register("7e", ["3a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AbstractError_1;
  var IllegalStateError;
  return {
    setters: [function(AbstractError_1_1) {
      AbstractError_1 = AbstractError_1_1;
    }],
    execute: function() {
      IllegalStateError = (function(_super) {
        __extends(IllegalStateError, _super);
        function IllegalStateError(message) {
          if (message === void 0) {
            message = "";
          }
          _super.call(this, message);
        }
        Object.defineProperty(IllegalStateError.prototype, "name", {
          get: function() {
            return "IllegalStateError";
          },
          enumerable: true,
          configurable: true
        });
        return IllegalStateError;
      }(AbstractError_1.default));
      exports_1("default", IllegalStateError);
    }
  };
});

$__System.register("7b", ["3a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AbstractError_1;
  var InvalidJSONLDSyntaxError;
  return {
    setters: [function(AbstractError_1_1) {
      AbstractError_1 = AbstractError_1_1;
    }],
    execute: function() {
      InvalidJSONLDSyntaxError = (function(_super) {
        __extends(InvalidJSONLDSyntaxError, _super);
        function InvalidJSONLDSyntaxError() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(InvalidJSONLDSyntaxError.prototype, "name", {
          get: function() {
            return "InvalidJSONLDSyntaxError";
          },
          enumerable: true,
          configurable: true
        });
        return InvalidJSONLDSyntaxError;
      }(AbstractError_1.default));
      exports_1("default", InvalidJSONLDSyntaxError);
    }
  };
});

$__System.register("3a", [], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AbstractError;
  return {
    setters: [],
    execute: function() {
      AbstractError = (function(_super) {
        __extends(AbstractError, _super);
        function AbstractError(message) {
          _super.call(this, message);
          this.message = message;
        }
        Object.defineProperty(AbstractError.prototype, "name", {
          get: function() {
            return "AbstractError";
          },
          enumerable: true,
          configurable: true
        });
        AbstractError.prototype.toString = function() {
          return this.name + ": " + this.message;
        };
        return AbstractError;
      }(Error));
      exports_1("default", AbstractError);
    }
  };
});

$__System.register("7f", ["3a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AbstractError_1;
  var NotImplementedError;
  return {
    setters: [function(AbstractError_1_1) {
      AbstractError_1 = AbstractError_1_1;
    }],
    execute: function() {
      NotImplementedError = (function(_super) {
        __extends(NotImplementedError, _super);
        function NotImplementedError(message) {
          if (message === void 0) {
            message = "";
          }
          _super.call(this, message);
        }
        Object.defineProperty(NotImplementedError.prototype, "name", {
          get: function() {
            return "NotImplementedError";
          },
          enumerable: true,
          configurable: true
        });
        return NotImplementedError;
      }(AbstractError_1.default));
      exports_1("default", NotImplementedError);
    }
  };
});

$__System.register("5", ["7c", "7d", "16", "7e", "7b", "7f"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var IDAlreadyInUseError_1,
      IllegalActionError_1,
      IllegalArgumentError_1,
      IllegalStateError_1,
      InvalidJSONLDSyntaxError_1,
      NotImplementedError_1;
  return {
    setters: [function(IDAlreadyInUseError_1_1) {
      IDAlreadyInUseError_1 = IDAlreadyInUseError_1_1;
    }, function(IllegalActionError_1_1) {
      IllegalActionError_1 = IllegalActionError_1_1;
    }, function(IllegalArgumentError_1_1) {
      IllegalArgumentError_1 = IllegalArgumentError_1_1;
    }, function(IllegalStateError_1_1) {
      IllegalStateError_1 = IllegalStateError_1_1;
    }, function(InvalidJSONLDSyntaxError_1_1) {
      InvalidJSONLDSyntaxError_1 = InvalidJSONLDSyntaxError_1_1;
    }, function(NotImplementedError_1_1) {
      NotImplementedError_1 = NotImplementedError_1_1;
    }],
    execute: function() {
      exports_1("IDAlreadyInUseError", IDAlreadyInUseError_1.default);
      exports_1("IllegalActionError", IllegalActionError_1.default);
      exports_1("IllegalArgumentError", IllegalArgumentError_1.default);
      exports_1("IllegalStateError", IllegalStateError_1.default);
      exports_1("InvalidJSONLDSyntaxError", InvalidJSONLDSyntaxError_1.default);
      exports_1("NotImplementedError", NotImplementedError_1.default);
    }
  };
});

$__System.register("48", ["5", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Errors,
      Utils;
  var Class,
      Util;
  function prefixWithObjectSchema(uri, objectSchema) {
    var prefixEntries = objectSchema.prefixes.entries();
    while (true) {
      var result = prefixEntries.next();
      if (result.done)
        return uri;
      var _a = result.value,
          prefix = _a[0],
          prefixURI = _a[1];
      if (!Util.isAbsolute(prefixURI.toString()))
        continue;
      if (!uri.startsWith(prefixURI.toString()))
        continue;
      return Util.prefix(uri, prefix, prefixURI.toString());
    }
  }
  return {
    setters: [function(Errors_1) {
      Errors = Errors_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      Class = (function() {
        function Class(stringValue) {
          this.stringValue = stringValue;
        }
        Class.prototype.toString = function() {
          return this.stringValue;
        };
        return Class;
      }());
      exports_1("Class", Class);
      Util = (function() {
        function Util() {}
        Util.hasFragment = function(uri) {
          return uri.indexOf("#") !== -1;
        };
        Util.hasQuery = function(uri) {
          return uri.indexOf("?") !== -1;
        };
        Util.hasProtocol = function(uri) {
          return Utils.S.startsWith(uri, "https://") || Utils.S.startsWith(uri, "http://");
        };
        Util.isAbsolute = function(uri) {
          return Utils.S.startsWith(uri, "http://") || Utils.S.startsWith(uri, "https://") || Utils.S.startsWith(uri, "://");
        };
        Util.isRelative = function(uri) {
          return !Util.isAbsolute(uri);
        };
        Util.isBNodeID = function(uri) {
          return Utils.S.startsWith(uri, "_:");
        };
        Util.generateBNodeID = function() {
          return "_:" + Utils.UUID.generate();
        };
        Util.isPrefixed = function(uri) {
          return !Util.isAbsolute(uri) && !Util.isBNodeID(uri) && Utils.S.contains(uri, ":");
        };
        Util.isFragmentOf = function(fragmentURI, uri) {
          if (!Util.hasFragment(fragmentURI))
            return false;
          return Util.getDocumentURI(fragmentURI) === uri;
        };
        Util.isBaseOf = function(baseURI, uri) {
          if (baseURI === uri)
            return true;
          if (baseURI === "")
            return true;
          if (uri.startsWith(baseURI)) {
            if (Utils.S.endsWith(baseURI, "/") || Utils.S.endsWith(baseURI, "#"))
              return true;
            var relativeURI = uri.substring(baseURI.length);
            if (Utils.S.startsWith(relativeURI, "/") || Utils.S.startsWith(relativeURI, "#"))
              return true;
          }
          return false;
        };
        Util.getRelativeURI = function(absoluteURI, base) {
          if (!absoluteURI.startsWith(base))
            return absoluteURI;
          return absoluteURI.substring(base.length);
        };
        Util.getDocumentURI = function(uri) {
          var parts = uri.split("#");
          if (parts.length > 2)
            throw new Error("IllegalArgument: The URI provided has more than one # sign.");
          return parts[0];
        };
        Util.getFragment = function(uri) {
          var parts = uri.split("#");
          if (parts.length < 2)
            return null;
          if (parts.length > 2)
            throw new Error("IllegalArgument: The URI provided has more than one # sign.");
          return parts[1];
        };
        Util.getSlug = function(uri) {
          var uriParts = uri.split("#");
          if (uriParts.length === 2)
            return Util.getSlug(uriParts[1]);
          if (uriParts.length > 2)
            throw new Errors.IllegalArgumentError("Invalid URI: The uri contains two '#' symbols.");
          uri = uriParts[0];
          if (uri === "")
            return uri;
          if (uri === "/")
            return uri;
          var parts = uri.split("/");
          if (parts[parts.length - 1] === "") {
            return parts[parts.length - 2] + "/";
          } else {
            return parts[parts.length - 1];
          }
        };
        Util.getParameters = function(uri) {
          var parameters = new Map();
          if (!Util.hasQuery(uri))
            return parameters;
          uri.replace(/^.*\?/, "").split("&").forEach(function(param) {
            var parts = param.replace(/\+/g, " ").split("=");
            var key = parts.shift();
            var val = parts.length > 0 ? parts.join("=") : null;
            if (!parameters.has(key)) {
              parameters.set(key, val);
            } else {
              parameters.set(key, [].concat(parameters.get(key), val));
            }
          });
          return parameters;
        };
        Util.resolve = function(parentURI, childURI) {
          if (Util.isAbsolute(childURI) || Util.isBNodeID(childURI) || Util.isPrefixed(childURI))
            return childURI;
          var protocol = parentURI.substr(0, parentURI.indexOf("://") + 3);
          var path = parentURI.substr(parentURI.indexOf("://") + 3, parentURI.length - 1);
          if (path.lastIndexOf("/") === -1)
            path += "/";
          if (Utils.S.startsWith(childURI, "?") || Utils.S.startsWith(childURI, "#")) {
            if (Util.hasQuery(path))
              path = path.substr(0, path.indexOf("?"));
            if (Util.hasFragment(path) && (!Utils.S.startsWith(childURI, "?") || Utils.S.endsWith(path, "#")))
              path = Util.getDocumentURI(path);
          } else {
            path = path.substr(0, path.lastIndexOf("/") + 1);
            if (!Utils.S.endsWith(path, "?") && !Utils.S.endsWith(path, "#") && !Utils.S.endsWith(path, "/"))
              path += "/";
          }
          if (Utils.S.startsWith(childURI, "/")) {
            childURI = childURI.substr(1, childURI.length);
          }
          return protocol + path + childURI;
        };
        Util.removeProtocol = function(uri) {
          if (Utils.S.startsWith(uri, "https://"))
            return uri.substr(5, uri.length);
          if (Utils.S.startsWith(uri, "http://"))
            return uri.substr(4, uri.length);
          return uri;
        };
        Util.prefix = function(uri, prefixOrObjectSchema, prefixURI) {
          if (prefixURI === void 0) {
            prefixURI = null;
          }
          var objectSchema = !Utils.isString(prefixOrObjectSchema) ? prefixOrObjectSchema : null;
          var prefix = Utils.isString(prefixOrObjectSchema) ? prefixOrObjectSchema : null;
          if (objectSchema !== null)
            return prefixWithObjectSchema(uri, objectSchema);
          if (Util.isPrefixed(uri) || !uri.startsWith(prefixURI))
            return uri;
          return prefix + ":" + uri.substring(prefixURI.length);
        };
        return Util;
      }());
      exports_1("Util", Util);
      exports_1("default", Class);
    }
  };
});

$__System.register("80", ["54", "81", "a", "48"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var JSONLD,
      RDFNode,
      Utils,
      URI;
  var Factory,
      Util,
      Parser;
  return {
    setters: [function(JSONLD_1) {
      JSONLD = JSONLD_1;
    }, function(RDFNode_1) {
      RDFNode = RDFNode_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }, function(URI_1) {
      URI = URI_1;
    }],
    execute: function() {
      Factory = (function() {
        function Factory() {}
        Factory.is = function(object) {
          return Utils.hasProperty(object, "@graph") && Utils.isArray(object["@graph"]);
        };
        Factory.create = function(resources, uri) {
          var document = uri ? RDFNode.Factory.create(uri) : {};
          document["@graph"] = resources;
          return document;
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
      Util = (function() {
        function Util() {}
        Util.getDocuments = function(value) {
          if (Utils.isArray(value)) {
            var array = value;
            return array.filter(function(element) {
              return Factory.is(element);
            });
          } else if (Utils.isObject(value)) {
            if (Factory.is(value))
              return [value];
          }
          return [];
        };
        Util.getResources = function(value) {
          var freeNodes = RDFNode.Util.getFreeNodes(value);
          var documents = Util.getDocuments(value);
          var resources = [].concat(freeNodes);
          for (var _i = 0,
              documents_1 = documents; _i < documents_1.length; _i++) {
            var document = documents_1[_i];
            resources = resources.concat(document["@graph"]);
          }
          return resources;
        };
        Util.getDocumentResources = function(document) {
          var resources = Util.getResources(document);
          var documentResources = [];
          for (var i = 0,
              length = resources.length; i < length; i++) {
            var resource = resources[i];
            var uri = resource["@id"];
            if (!uri)
              continue;
            if (!URI.Util.hasFragment(uri) && !URI.Util.isBNodeID(uri))
              documentResources.push(resource);
          }
          return documentResources;
        };
        Util.getFragmentResources = function(document, documentResource) {
          var resources = Util.getResources(document);
          var documentURIToMatch = null;
          if (documentResource) {
            if (Utils.isString(documentResource)) {
              documentURIToMatch = documentResource;
            } else
              documentURIToMatch = documentResource["@id"];
          }
          var fragmentResources = [];
          for (var i = 0,
              length = resources.length; i < length; i++) {
            var resource = resources[i];
            var uri = resource["@id"];
            if (!uri)
              continue;
            if (!URI.Util.hasFragment(uri))
              continue;
            if (!documentURIToMatch) {
              fragmentResources.push(resource);
            } else {
              var documentURI = URI.Util.getDocumentURI(uri);
              if (documentURI === documentURIToMatch)
                fragmentResources.push(resource);
            }
          }
          return fragmentResources;
        };
        Util.getBNodeResources = function(document) {
          var resources = Util.getResources(document);
          var bnodes = [];
          for (var i = 0,
              length = resources.length; i < length; i++) {
            var resource = resources[i];
            if (!("@id" in resource) || URI.Util.isBNodeID(resource["@id"]))
              bnodes.push(resource);
          }
          return bnodes;
        };
        return Util;
      }());
      exports_1("Util", Util);
      Parser = (function() {
        function Parser() {}
        Parser.prototype.parse = function(input) {
          var jsonLDParser = new JSONLD.Parser.Class();
          return jsonLDParser.parse(input).then(function(expandedResult) {
            return Util.getDocuments(expandedResult);
          });
        };
        return Parser;
      }());
      exports_1("Parser", Parser);
    }
  };
});

$__System.register("81", ["a", "80"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Utils,
      Document;
  var Factory,
      Util;
  return {
    setters: [function(Utils_1) {
      Utils = Utils_1;
    }, function(Document_1) {
      Document = Document_1;
    }],
    execute: function() {
      Factory = (function() {
        function Factory() {}
        Factory.is = function(value) {
          return Utils.hasProperty(value, "@id") && Utils.isString(value["@id"]);
        };
        Factory.create = function(uri) {
          return {"@id": uri};
        };
        return Factory;
      }());
      exports_1("Factory", Factory);
      Util = (function() {
        function Util() {}
        Util.areEqual = function(node1, node2) {
          return node1["@id"] === node2["@id"];
        };
        Util.hasType = function(node, type) {
          return Util.getTypes(node).indexOf(type) !== -1;
        };
        Util.getTypes = function(node) {
          if (!("@type" in node))
            return [];
          return node["@type"];
        };
        Util.getPropertyURI = function(node, predicate) {
          if (!(predicate in node))
            return null;
          if (!Utils.isArray(node[predicate]))
            return null;
          var uri = node[predicate].find(function(value) {
            return Factory.is(value);
          });
          return typeof uri !== "undefined" ? uri["@id"] : null;
        };
        Util.getFreeNodes = function(value) {
          if (!Utils.isArray(value))
            return [];
          var array = value;
          return array.filter(function(element) {
            return !Document.Factory.is(element);
          }).filter(function(element) {
            return Factory.is(element);
          });
        };
        return Util;
      }());
      exports_1("Util", Util);
    }
  };
});

$__System.register("82", ["1d", "21", "6", "81"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var List,
      Literal,
      NS,
      RDFNode;
  var Util;
  return {
    setters: [function(List_1) {
      List = List_1;
    }, function(Literal_1) {
      Literal = Literal_1;
    }, function(NS_1) {
      NS = NS_1;
    }, function(RDFNode_1) {
      RDFNode = RDFNode_1;
    }],
    execute: function() {
      Util = (function() {
        function Util() {}
        Util.getProperty = function(expandedObject, propertyURI, pointerLibrary) {
          var propertyValues = expandedObject[propertyURI];
          if (!propertyValues)
            return null;
          if (!propertyValues.length)
            return null;
          var propertyValue = propertyValues[0];
          return Util.parseValue(propertyValue, pointerLibrary);
        };
        Util.getPropertyPointer = function(expandedObject, propertyURI, pointerLibrary) {
          var propertyValues = expandedObject[propertyURI];
          if (!propertyValues)
            return null;
          for (var _i = 0,
              propertyValues_1 = propertyValues; _i < propertyValues_1.length; _i++) {
            var propertyValue = propertyValues_1[_i];
            if (!RDFNode.Factory.is(propertyValue))
              continue;
            return pointerLibrary.getPointer(propertyValue["@id"]);
          }
          return null;
        };
        Util.getPropertyLiteral = function(expandedObject, propertyURI, literalType) {
          var propertyValues = expandedObject[propertyURI];
          if (!propertyValues)
            return null;
          for (var _i = 0,
              propertyValues_2 = propertyValues; _i < propertyValues_2.length; _i++) {
            var propertyValue = propertyValues_2[_i];
            if (!Literal.Factory.is(propertyValue))
              continue;
            if (!Literal.Factory.hasType(propertyValue, literalType))
              continue;
            return Literal.Factory.parse(propertyValue);
          }
          return null;
        };
        Util.getPropertyList = function(expandedObject, propertyURI, pointerLibrary) {
          var propertyValues = expandedObject[propertyURI];
          if (!propertyValues)
            return null;
          var propertyList = Util.getList(propertyValues);
          if (!propertyList)
            return null;
          var listValues = [];
          for (var _i = 0,
              _a = propertyList["@list"]; _i < _a.length; _i++) {
            var listValue = _a[_i];
            listValues.push(Util.parseValue(listValue, pointerLibrary));
          }
          return listValues;
        };
        Util.getPropertyPointerList = function(expandedObject, propertyURI, pointerLibrary) {
          var propertyValues = expandedObject[propertyURI];
          if (!propertyValues)
            return null;
          var propertyList = Util.getList(propertyValues);
          if (!propertyList)
            return null;
          var listPointers = [];
          for (var _i = 0,
              _a = propertyList["@list"]; _i < _a.length; _i++) {
            var listValue = _a[_i];
            if (!RDFNode.Factory.is(listValue))
              continue;
            var pointer = pointerLibrary.getPointer(listValue["@id"]);
            listPointers.push(pointer);
          }
          return listPointers;
        };
        Util.getPropertyLiteralList = function(expandedObject, propertyURI, literalType) {
          var propertyValues = expandedObject[propertyURI];
          if (!propertyValues)
            return null;
          var propertyList = Util.getList(propertyValues);
          if (!propertyList)
            return null;
          var listLiterals = [];
          for (var _i = 0,
              _a = propertyList["@list"]; _i < _a.length; _i++) {
            var listValue = _a[_i];
            if (!Literal.Factory.is(listValue))
              continue;
            if (!Literal.Factory.hasType(listValue, literalType))
              continue;
            listLiterals.push(Literal.Factory.parse(listValue));
          }
          return listLiterals;
        };
        Util.getProperties = function(expandedObject, propertyURI, pointerLibrary) {
          var propertyValues = expandedObject[propertyURI];
          if (!propertyValues)
            return null;
          if (!propertyValues.length)
            return null;
          var properties = [];
          for (var _i = 0,
              propertyValues_3 = propertyValues; _i < propertyValues_3.length; _i++) {
            var propertyValue = propertyValues_3[_i];
            var parsedValue = Util.parseValue(propertyValue, pointerLibrary);
            if (parsedValue !== null)
              properties.push(parsedValue);
          }
          return properties;
        };
        Util.getPropertyPointers = function(expandedObject, propertyURI, pointerLibrary) {
          var propertyValues = expandedObject[propertyURI];
          if (!propertyValues)
            return [];
          if (!propertyValues.length)
            return [];
          var propertyPointers = [];
          for (var _i = 0,
              propertyValues_4 = propertyValues; _i < propertyValues_4.length; _i++) {
            var propertyValue = propertyValues_4[_i];
            if (!RDFNode.Factory.is(propertyValue))
              continue;
            var pointer = pointerLibrary.getPointer(propertyValue["@id"]);
            if (pointer !== null)
              propertyPointers.push(pointer);
          }
          return propertyPointers;
        };
        Util.getPropertyURIs = function(expandedObject, propertyURI) {
          var propertyValues = expandedObject[propertyURI];
          if (!propertyValues)
            return null;
          if (!propertyValues.length)
            return null;
          var propertyURIs = [];
          for (var _i = 0,
              propertyValues_5 = propertyValues; _i < propertyValues_5.length; _i++) {
            var propertyValue = propertyValues_5[_i];
            if (!RDFNode.Factory.is(propertyValue))
              continue;
            propertyURIs.push(propertyValue["@id"]);
          }
          return propertyURIs;
        };
        Util.getPropertyLiterals = function(expandedObject, propertyURI, literalType) {
          var propertyValues = expandedObject[propertyURI];
          if (!propertyValues)
            return null;
          var propertyLiterals = [];
          for (var _i = 0,
              propertyValues_6 = propertyValues; _i < propertyValues_6.length; _i++) {
            var propertyValue = propertyValues_6[_i];
            if (!Literal.Factory.is(propertyValue))
              continue;
            if (!Literal.Factory.hasType(propertyValue, literalType))
              continue;
            propertyLiterals.push(Literal.Factory.parse(propertyValue));
          }
          return propertyLiterals;
        };
        Util.getPropertyLanguageMap = function(expandedObject, propertyURI) {
          var propertyValues = expandedObject[propertyURI];
          if (!propertyValues)
            return null;
          var propertyLanguageMap = {};
          for (var _i = 0,
              propertyValues_7 = propertyValues; _i < propertyValues_7.length; _i++) {
            var propertyValue = propertyValues_7[_i];
            if (!Literal.Factory.is(propertyValue))
              continue;
            if (!Literal.Factory.hasType(propertyValue, NS.XSD.DataType.string))
              continue;
            var languageTag = propertyValue["@language"];
            if (!languageTag)
              continue;
            propertyLanguageMap[languageTag] = Literal.Factory.parse(propertyValue);
          }
          return propertyLanguageMap;
        };
        Util.getList = function(propertyValues) {
          for (var _i = 0,
              propertyValues_8 = propertyValues; _i < propertyValues_8.length; _i++) {
            var propertyValue = propertyValues_8[_i];
            if (!List.Factory.is(propertyValue))
              continue;
            return propertyValue;
          }
          return null;
        };
        Util.parseValue = function(propertyValue, pointerLibrary) {
          if (Literal.Factory.is(propertyValue)) {
            return Literal.Factory.parse(propertyValue);
          } else if (RDFNode.Factory.is(propertyValue)) {
            return pointerLibrary.getPointer(propertyValue["@id"]);
          } else if (List.Factory.is(propertyValue)) {
            var parsedValue = [];
            var listValues = propertyValue["@list"];
            for (var _i = 0,
                listValues_1 = listValues; _i < listValues_1.length; _i++) {
              var listValue = listValues_1[_i];
              parsedValue.push(this.parseValue(listValue, pointerLibrary));
            }
            return parsedValue;
          } else {}
          return null;
        };
        return Util;
      }());
      exports_1("Util", Util);
    }
  };
});

$__System.register("9", ["21", "80", "1d", "81", "48", "82"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Literal,
      Document,
      List,
      Node,
      URI,
      Value;
  return {
    setters: [function(Literal_1) {
      Literal = Literal_1;
    }, function(Document_1) {
      Document = Document_1;
    }, function(List_1) {
      List = List_1;
    }, function(Node_1) {
      Node = Node_1;
    }, function(URI_1) {
      URI = URI_1;
    }, function(Value_1) {
      Value = Value_1;
    }],
    execute: function() {
      exports_1("Literal", Literal);
      exports_1("Document", Document);
      exports_1("List", List);
      exports_1("Node", Node);
      exports_1("URI", URI);
      exports_1("Value", Value);
    }
  };
});

$__System.register("40", [], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Class;
  return {
    setters: [],
    execute: function() {
      Class = (function() {
        function Class() {}
        Class.prototype.parse = function(body) {
          return new Promise(function(resolve, reject) {
            try {
              resolve(JSON.parse(body));
            } catch (error) {
              reject(error);
            }
          });
        };
        return Class;
      }());
      exports_1("Class", Class);
      exports_1("default", Class);
    }
  };
});

$__System.register("83", ["40"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var JSONParser_1;
  var Class;
  return {
    setters: [function(JSONParser_1_1) {
      JSONParser_1 = JSONParser_1_1;
    }],
    execute: function() {
      Class = (function() {
        function Class() {}
        Class.prototype.parse = function(input) {
          var jsonParser = new JSONParser_1.default();
          return jsonParser.parse(input).then(function(parsedObject) {
            return parsedObject;
          });
        };
        return Class;
      }());
      exports_1("Class", Class);
      exports_1("default", Class);
    }
  };
});

$__System.register("84", ["5", "50", "9", "a", "83"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Errors,
      HTTP,
      RDF,
      Utils,
      RawResultsParser_1;
  var Class;
  return {
    setters: [function(Errors_1) {
      Errors = Errors_1;
    }, function(HTTP_1) {
      HTTP = HTTP_1;
    }, function(RDF_1) {
      RDF = RDF_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }, function(RawResultsParser_1_1) {
      RawResultsParser_1 = RawResultsParser_1_1;
    }],
    execute: function() {
      Class = (function() {
        function Class() {}
        Class.executeRawASKQuery = function(url, askQuery, options) {
          if (options === void 0) {
            options = {};
          }
          options = Utils.extend(options, Class.defaultOptions);
          HTTP.Request.Util.setAcceptHeader("application/sparql-results+json", options);
          HTTP.Request.Util.setContentTypeHeader("application/sparql-query", options);
          return HTTP.Request.Service.post(url, askQuery, options, Class.resultsParser);
        };
        Class.executeASKQuery = function(url, askQuery, options) {
          if (options === void 0) {
            options = {};
          }
          return Class.executeRawASKQuery(url, askQuery, options).then(function(_a) {
            var rawResults = _a[0],
                response = _a[1];
            return [rawResults.boolean, response];
          });
        };
        Class.executeRawSELECTQuery = function(url, selectQuery, options) {
          if (options === void 0) {
            options = {};
          }
          options = Utils.extend(options, Class.defaultOptions);
          HTTP.Request.Util.setAcceptHeader("application/sparql-results+json", options);
          HTTP.Request.Util.setContentTypeHeader("application/sparql-query", options);
          return HTTP.Request.Service.post(url, selectQuery, options, Class.resultsParser);
        };
        Class.executeSELECTQuery = function(url, selectQuery, pointerLibrary, options) {
          if (options === void 0) {
            options = {};
          }
          return Class.executeRawSELECTQuery(url, selectQuery, options).then(function(_a) {
            var rawResults = _a[0],
                response = _a[1];
            var rawBindings = rawResults.results.bindings;
            var bindings = [];
            for (var _i = 0,
                rawBindings_1 = rawBindings; _i < rawBindings_1.length; _i++) {
              var bindingColumn = rawBindings_1[_i];
              var binding = {};
              for (var bindingRow in bindingColumn) {
                if (!bindingColumn.hasOwnProperty(bindingRow))
                  continue;
                var bindingCell = bindingColumn[bindingRow];
                binding[bindingRow] = Class.parseRawBindingProperty(bindingCell, pointerLibrary);
              }
              bindings.push(binding);
            }
            var results = {
              vars: rawResults.head.vars,
              bindings: bindings
            };
            return [results, response];
          });
        };
        Class.executeRawCONSTRUCTQuery = function(url, constructQuery, options) {
          if (options === void 0) {
            options = {};
          }
          options = Utils.extend(options, Class.defaultOptions);
          if (HTTP.Request.Util.getHeader("Accept", options) === undefined)
            HTTP.Request.Util.setAcceptHeader("application/ld+json", options);
          HTTP.Request.Util.setContentTypeHeader("application/sparql-query", options);
          return HTTP.Request.Service.post(url, constructQuery, options, Class.stringParser);
        };
        Class.executeRawDESCRIBEQuery = function(url, describeQuery, options) {
          if (options === void 0) {
            options = {};
          }
          options = Utils.extend(options, Class.defaultOptions);
          if (HTTP.Request.Util.getHeader("Accept", options) === undefined)
            HTTP.Request.Util.setAcceptHeader("application/ld+json", options);
          HTTP.Request.Util.setContentTypeHeader("application/sparql-query", options);
          return HTTP.Request.Service.post(url, describeQuery, options, Class.stringParser);
        };
        Class.executeUPDATE = function(url, updateQuery, options) {
          if (options === void 0) {
            options = {};
          }
          options = Utils.extend(options, Class.defaultOptions);
          if (HTTP.Request.Util.getHeader("Accept", options) === undefined)
            HTTP.Request.Util.setAcceptHeader("application/ld+json", options);
          HTTP.Request.Util.setContentTypeHeader("application/sparql-update", options);
          return HTTP.Request.Service.post(url, updateQuery, options);
        };
        Class.parseRawBindingProperty = function(rawBindingProperty, pointerLibrary) {
          switch (rawBindingProperty.type) {
            case "uri":
              return pointerLibrary.getPointer(rawBindingProperty.value);
            case "bnode":
              throw new Errors.NotImplementedError("BNodes cannot be queried directly");
            case "literal":
              if ("datatype" in rawBindingProperty) {
                return RDF.Literal.Factory.parse(rawBindingProperty.value, rawBindingProperty.datatype);
              } else {
                return RDF.Literal.Factory.parse(rawBindingProperty.value);
              }
            default:
              throw new Errors.IllegalArgumentError("The bindingProperty has an unsupported type");
          }
        };
        Class.defaultOptions = {};
        Class.resultsParser = new RawResultsParser_1.default();
        Class.stringParser = new HTTP.StringParser.Class();
        return Class;
      }());
      exports_1("Class", Class);
      exports_1("default", Class);
    }
  };
});

$__System.register("85", [], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  return {
    setters: [],
    execute: function() {}
  };
});

$__System.register("5f", ["1c", "83", "84", "85"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var RawResults,
      RawResultsParser,
      Service_1,
      SELECTResults;
  return {
    setters: [function(RawResults_1) {
      RawResults = RawResults_1;
    }, function(RawResultsParser_1) {
      RawResultsParser = RawResultsParser_1;
    }, function(Service_1_1) {
      Service_1 = Service_1_1;
    }, function(SELECTResults_1) {
      SELECTResults = SELECTResults_1;
    }],
    execute: function() {
      exports_1("RawResults", RawResults);
      exports_1("RawResultsParser", RawResultsParser);
      exports_1("Service", Service_1.default);
      exports_1("SELECTResults", SELECTResults);
    }
  };
});

$__System.register("a", [], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var O,
      S,
      A,
      M,
      UUID;
  function hasFunction(object, functionName) {
    return typeof object[functionName] === "function";
  }
  function hasProperty(object, property) {
    if (!object)
      return false;
    return isDefined(object[property]);
  }
  function hasPropertyDefined(object, property) {
    if (!object)
      return false;
    return !!Object.getOwnPropertyDescriptor(object, property);
  }
  function isDefined(value) {
    return void 0 !== value;
  }
  function isNull(value) {
    return value === null;
  }
  function isArray(object) {
    return object instanceof Array;
  }
  function isString(value) {
    return typeof value === "string" || value instanceof String;
  }
  function isBoolean(value) {
    return typeof value === "boolean";
  }
  function isNumber(value) {
    return typeof value === "number" || value instanceof Number;
  }
  function isInteger(value) {
    if (!isNumber(value))
      return false;
    return value % 1 === 0;
  }
  function isDouble(value) {
    if (!isNumber(value))
      return false;
    return value % 1 !== 0;
  }
  function isDate(date) {
    return typeof date === "date" || date instanceof Date;
  }
  function isObject(object) {
    return typeof object === "object" && (!!object);
  }
  function isPlainObject(object) {
    return isObject(object) && !isArray(object) && !isDate(object) && !isMap(object) && !(typeof Blob !== "undefined" && object instanceof Blob) && !(Object.prototype.toString.call(object) === "[object Set]");
  }
  function isFunction(value) {
    return typeof value === "function";
  }
  function isMap(value) {
    return (isObject(value) && hasFunction(value, "get") && hasFunction(value, "has") && hasProperty(value, "size") && hasFunction(value, "clear") && hasFunction(value, "delete") && hasFunction(value, "entries") && hasFunction(value, "forEach") && hasFunction(value, "get") && hasFunction(value, "has") && hasFunction(value, "keys") && hasFunction(value, "set") && hasFunction(value, "values"));
  }
  function parseBoolean(value) {
    if (!isString(value))
      return false;
    switch (value.toLowerCase()) {
      case "true":
      case "yes":
      case "y":
      case "1":
        return true;
      case "false":
      case "no":
      case "n":
      case "0":
      default:
        return false;
    }
  }
  function extend(target) {
    var objects = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      objects[_i - 1] = arguments[_i];
    }
    for (var _a = 0,
        objects_1 = objects; _a < objects_1.length; _a++) {
      var toMerge = objects_1[_a];
      if (!toMerge)
        continue;
      for (var name in toMerge) {
        if (toMerge.hasOwnProperty(name)) {
          target[name] = toMerge[name];
        }
      }
    }
    return target;
  }
  function forEachOwnProperty(object, action) {
    if (!(isObject(object) || isFunction(object)))
      throw new Error("IllegalArgument");
    for (var name in object) {
      if (object.hasOwnProperty(name)) {
        if (action(name, object[name]) === false)
          break;
      }
    }
  }
  function internalAreEqual(object1, object2, config, stack1, stack2) {
    if (object1 === object2)
      return true;
    if (!isObject(object1) || !isObject(object2))
      return false;
    if (isDate(object1))
      return object1.getTime() === object2.getTime();
    var keys = A.joinWithoutDuplicates(Object.keys(object1), Object.keys(object2));
    for (var _i = 0,
        keys_1 = keys; _i < keys_1.length; _i++) {
      var key = keys_1[_i];
      if (!(key in object1) || !(key in object2))
        return false;
      if (typeof object1 !== typeof object2)
        return false;
      if (isFunction(object1[key]))
        continue;
      var firstIsPlainObject = isPlainObject(object1[key]);
      if (isArray(object1[key]) && config.arrays || firstIsPlainObject && config.objects || isDate(object1[key])) {
        if (firstIsPlainObject) {
          var lengthStack = stack1.length;
          while (lengthStack--) {
            if (stack1[lengthStack] === object1[key])
              return stack2[lengthStack] === object2[key];
          }
          stack1.push(object1[key]);
          stack2.push(object2[key]);
        }
        if (!internalAreEqual(object1[key], object2[key], config, stack1, stack2))
          return false;
        if (firstIsPlainObject) {
          stack1.pop();
          stack2.pop();
        }
      } else {
        if (object1[key] !== object2[key])
          return false;
      }
    }
    return true;
  }
  return {
    setters: [],
    execute: function() {
      O = (function() {
        function O() {}
        O.clone = function(object, config) {
          if (config === void 0) {
            config = {
              arrays: false,
              objects: false
            };
          }
          var isAnArray = isArray(object);
          if (!isAnArray && !isPlainObject(object))
            return null;
          var clone = (isAnArray ? [] : (!!Object.getPrototypeOf(object)) ? {} : Object.create(null));
          object.__SDKUtils_circularReferenceFlag = clone;
          for (var _i = 0,
              _a = Object.keys(object); _i < _a.length; _i++) {
            var key = _a[_i];
            if (isFunction(object[key]) || key === "__SDKUtils_circularReferenceFlag")
              continue;
            var property = object[key];
            if (isArray(property) && config.arrays || isPlainObject(property) && config.objects) {
              property = property.__SDKUtils_circularReferenceFlag || O.clone(property, config);
            }
            clone[key] = property;
          }
          delete object.__SDKUtils_circularReferenceFlag;
          return clone;
        };
        O.areEqual = function(object1, object2, config) {
          if (config === void 0) {
            config = {
              arrays: false,
              objects: false
            };
          }
          return internalAreEqual(object1, object2, config, [object1], [object2]);
        };
        O.areShallowlyEqual = function(object1, object2) {
          if (object1 === object2)
            return true;
          if (!isObject(object1) || !isObject(object2))
            return false;
          var properties = [];
          for (var propertyName in object1) {
            if (!object1.hasOwnProperty(propertyName))
              continue;
            if (isFunction(object1[propertyName]))
              continue;
            if (!(propertyName in object2))
              return false;
            if (object1[propertyName] !== object2[propertyName])
              return false;
            properties.push(propertyName);
          }
          for (var propertyName in object2) {
            if (!object2.hasOwnProperty(propertyName))
              continue;
            if (isFunction(object2[propertyName]))
              continue;
            if (!(propertyName in object1))
              return false;
            if (properties.indexOf(propertyName) === -1)
              return false;
          }
          return true;
        };
        return O;
      }());
      S = (function() {
        function S() {}
        S.startsWith = function(str, substring) {
          return str.lastIndexOf(substring, 0) === 0;
        };
        S.endsWith = function(str, substring) {
          return str.indexOf(substring, str.length - substring.length) !== -1;
        };
        S.contains = function(str, substring) {
          return str.indexOf(substring) !== -1;
        };
        return S;
      }());
      A = (function() {
        function A() {}
        A.from = function(iterator) {
          var array = [];
          var next = iterator.next();
          while (!next.done) {
            array.push(next.value);
            next = iterator.next();
          }
          return array;
        };
        A.joinWithoutDuplicates = function() {
          var arrays = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            arrays[_i - 0] = arguments[_i];
          }
          var result = arrays[0].slice();
          for (var i = 1,
              length = arrays.length; i < length; i++) {
            result = result.concat(arrays[i].filter(function(item) {
              return result.indexOf(item) < 0;
            }));
          }
          return result;
        };
        A.indexOf = function(array, searchedElement, comparator) {
          if (comparator === void 0) {
            comparator = function(a, b) {
              return a === b;
            };
          }
          for (var i = 0,
              length = array.length; i < length; ++i) {
            if (comparator(array[i], searchedElement))
              return i;
          }
          return -1;
        };
        return A;
      }());
      M = (function() {
        function M() {}
        M.from = function(object) {
          var map = new Map();
          forEachOwnProperty(object, function(name, value) {
            map.set(name, value);
          });
          return map;
        };
        M.extend = function(toExtend) {
          var extenders = [];
          for (var _i = 1; _i < arguments.length; _i++) {
            extenders[_i - 1] = arguments[_i];
          }
          for (var i = 0,
              length = extenders.length; i < length; i++) {
            var extender = extenders[i];
            var values = extender.entries();
            var next = values.next();
            while (!next.done) {
              var entry = next.value;
              var key = entry[0];
              var value = entry[1];
              if (!toExtend.has(key))
                toExtend.set(key, value);
              next = values.next();
            }
          }
          return toExtend;
        };
        return M;
      }());
      UUID = (function() {
        function UUID() {}
        UUID.is = function(uuid) {
          return UUID.regExp.test(uuid);
        };
        UUID.generate = function() {
          return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
            var r = Math.random() * 16 | 0;
            var v = c === "x" ? r : (r & 0x3 | 0x8);
            return v.toString(16);
          });
        };
        UUID.regExp = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        return UUID;
      }());
      exports_1("hasFunction", hasFunction);
      exports_1("hasProperty", hasProperty);
      exports_1("hasPropertyDefined", hasPropertyDefined);
      exports_1("isDefined", isDefined);
      exports_1("isNull", isNull);
      exports_1("isArray", isArray);
      exports_1("isString", isString);
      exports_1("isBoolean", isBoolean);
      exports_1("isNumber", isNumber);
      exports_1("isInteger", isInteger);
      exports_1("isDouble", isDouble);
      exports_1("isDate", isDate);
      exports_1("isObject", isObject);
      exports_1("isPlainObject", isPlainObject);
      exports_1("isFunction", isFunction);
      exports_1("isMap", isMap);
      exports_1("parseBoolean", parseBoolean);
      exports_1("extend", extend);
      exports_1("forEachOwnProperty", forEachOwnProperty);
      exports_1("O", O);
      exports_1("S", S);
      exports_1("A", A);
      exports_1("M", M);
      exports_1("UUID", UUID);
    }
  };
});

$__System.register("86", ["b", "43", "3", "2", "14", "15", "5d", "5", "6a", "50", "54", "44", "6b", "6", "5c", "7", "17", "73", "74", "72", "1a", "8", "9", "3b", "c", "1b", "5f", "a"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AbstractContext_1,
      AccessPoint,
      App,
      Apps,
      Auth,
      Document,
      Documents_1,
      Errors,
      Fragment,
      HTTP,
      JSONLD,
      LDP,
      NamedFragment,
      NS,
      ObjectSchema,
      PersistedApp,
      PersistedDocument,
      PersistedFragment,
      PersistedNamedFragment,
      PersistedResource,
      Platform,
      Pointer,
      RDF,
      Resource,
      SDKContext,
      Settings,
      SPARQL,
      Utils;
  var Carbon;
  return {
    setters: [function(AbstractContext_1_1) {
      AbstractContext_1 = AbstractContext_1_1;
    }, function(AccessPoint_1) {
      AccessPoint = AccessPoint_1;
    }, function(App_1) {
      App = App_1;
    }, function(Apps_1) {
      Apps = Apps_1;
    }, function(Auth_1) {
      Auth = Auth_1;
    }, function(Document_1) {
      Document = Document_1;
    }, function(Documents_1_1) {
      Documents_1 = Documents_1_1;
    }, function(Errors_1) {
      Errors = Errors_1;
    }, function(Fragment_1) {
      Fragment = Fragment_1;
    }, function(HTTP_1) {
      HTTP = HTTP_1;
    }, function(JSONLD_1) {
      JSONLD = JSONLD_1;
    }, function(LDP_1) {
      LDP = LDP_1;
    }, function(NamedFragment_1) {
      NamedFragment = NamedFragment_1;
    }, function(NS_1) {
      NS = NS_1;
    }, function(ObjectSchema_1) {
      ObjectSchema = ObjectSchema_1;
    }, function(PersistedApp_1) {
      PersistedApp = PersistedApp_1;
    }, function(PersistedDocument_1) {
      PersistedDocument = PersistedDocument_1;
    }, function(PersistedFragment_1) {
      PersistedFragment = PersistedFragment_1;
    }, function(PersistedNamedFragment_1) {
      PersistedNamedFragment = PersistedNamedFragment_1;
    }, function(PersistedResource_1) {
      PersistedResource = PersistedResource_1;
    }, function(Platform_1) {
      Platform = Platform_1;
    }, function(Pointer_1) {
      Pointer = Pointer_1;
    }, function(RDF_1) {
      RDF = RDF_1;
    }, function(Resource_1) {
      Resource = Resource_1;
    }, function(SDKContext_1) {
      SDKContext = SDKContext_1;
    }, function(Settings_1) {
      Settings = Settings_1;
    }, function(SPARQL_1) {
      SPARQL = SPARQL_1;
    }, function(Utils_1) {
      Utils = Utils_1;
    }],
    execute: function() {
      Carbon = (function(_super) {
        __extends(Carbon, _super);
        function Carbon(settings) {
          _super.call(this);
          this.auth = new Platform.Auth.Class(this);
          settings = settings ? settings : Settings.defaultSettings;
          Utils.M.extend(this.settings, Utils.M.from(settings));
          this.apps = new Apps.Class(this);
        }
        Object.defineProperty(Carbon, "version", {
          get: function() {
            return "0.36.0";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Carbon.prototype, "version", {
          get: function() {
            return Carbon.version;
          },
          enumerable: true,
          configurable: true
        });
        Carbon.prototype.resolve = function(uri) {
          if (RDF.URI.Util.isAbsolute(uri))
            return uri;
          var finalURI = this.settings.get("http.ssl") ? "https://" : "http://";
          finalURI += this.settings.get("domain") + "/" + this.getSetting("platform.container");
          return RDF.URI.Util.resolve(finalURI, uri);
        };
        Carbon.prototype.getAPIDescription = function() {
          return this.documents.get("api/").then(function(_a) {
            var description = _a[0],
                response = _a[1];
            return description;
          });
        };
        Carbon.AccessPoint = AccessPoint;
        Carbon.App = App;
        Carbon.Apps = Apps;
        Carbon.Auth = Auth;
        Carbon.Document = Document;
        Carbon.Documents = Documents_1.default;
        Carbon.Errors = Errors;
        Carbon.Fragment = Fragment;
        Carbon.HTTP = HTTP;
        Carbon.JSONLD = JSONLD;
        Carbon.LDP = LDP;
        Carbon.NamedFragment = NamedFragment;
        Carbon.NS = NS;
        Carbon.ObjectSchema = ObjectSchema;
        Carbon.PersistedApp = PersistedApp;
        Carbon.PersistedDocument = PersistedDocument;
        Carbon.PersistedFragment = PersistedFragment;
        Carbon.PersistedNamedFragment = PersistedNamedFragment;
        Carbon.PersistedResource = PersistedResource;
        Carbon.Platform = Platform;
        Carbon.Pointer = Pointer;
        Carbon.RDF = RDF;
        Carbon.Resource = Resource;
        Carbon.SDKContext = SDKContext;
        Carbon.Settings = Settings;
        Carbon.SPARQL = SPARQL;
        Carbon.Utils = Utils;
        return Carbon;
      }(AbstractContext_1.default));
      exports_1("default", Carbon);
    }
  };
});

$__System.register("1", ["86"], function(exports_1, context_1) {
  "use strict";
  var __moduleName = context_1 && context_1.id;
  var Carbon_1;
  return {
    setters: [function(Carbon_1_1) {
      Carbon_1 = Carbon_1_1;
    }],
    execute: function() {
      window.Carbon = Carbon_1.default;
    }
  };
});

})
(function(factory) {
  if (typeof define == 'function' && define.amd)
    define([], factory);
  else if (typeof module == 'object' && module.exports && typeof require == 'function')
    module.exports = factory();
  else
    factory();
});
//# sourceMappingURL=data:application/json;base64,