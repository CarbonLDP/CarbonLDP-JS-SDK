{"version":3,"sources":["RDF/Node.ts"],"names":[],"mappings":"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","file":"Node.js","sourcesContent":["import * as Utils from \"../Utils\";\nimport { XSD } from \"../Vocabularies/XSD\";\n\nimport { RDFList } from \"./List\";\nimport { RDFLiteral } from \"./Literal\";\nimport { URI } from \"./URI\";\nimport { RDFValue } from \"./Value\";\n\n\nexport type RDFNodePropertyValue = string | RDFNode | RDFList | RDFValue | RDFLiteral;\n\nexport interface RDFNode {\n\t\"@id\":string;\n\t\"@type\"?:string[];\n\n\t[propertyURI:string]:string | RDFNodePropertyValue[];\n}\n\n\nexport interface RDFNodeFactory {\n\tis( value:any ):value is RDFNode;\n\n\tcreate( uri:string ):RDFNode;\n\n\n\tgetID( node:RDFNode ):string;\n\n\tgetRelativeID( node:RDFNode ):string;\n\n\tareEqual( node1:RDFNode, node2:RDFNode ):boolean;\n\n\tisFragment( node:RDFNode ):boolean;\n\n\thasType( node:RDFNode, type:string ):boolean;\n\n\tgetTypes( node:RDFNode ):string[];\n\n\tgetList( propertyValues:RDFNodePropertyValue[] ):RDFList | undefined;\n\n\tgetPropertyLiterals( propertyValues:RDFNodePropertyValue[], literalType:string ):any[] | undefined;\n\n\tgetPropertyLanguageMap( propertyValues:RDFNodePropertyValue[] ):object | undefined;\n}\n\nexport const RDFNode:RDFNodeFactory = {\n\tis( value:any ):value is RDFNode {\n\t\treturn Utils.hasProperty( value, \"@id\" )\n\t\t\t&& Utils.isString( value[ \"@id\" ] );\n\t},\n\n\tcreate( uri:string ):RDFNode {\n\t\treturn {\n\t\t\t\"@id\": uri,\n\t\t};\n\t},\n\n\n\tgetID( node:RDFNode ):string {\n\t\treturn node[ \"@id\" ];\n\t},\n\n\tgetRelativeID( node:RDFNode ):string {\n\t\tconst id:string = RDFNode.getID( node );\n\t\treturn URI.hasFragment( id ) ? URI.getFragment( id ) : id;\n\t},\n\n\tareEqual( node1:RDFNode, node2:RDFNode ):boolean {\n\t\treturn RDFNode.getID( node1 ) === RDFNode.getID( node2 );\n\t},\n\n\tisFragment( node:RDFNode ):boolean {\n\t\tconst id:string = RDFNode.getID( node );\n\t\treturn URI.hasFragment( id ) || URI.isBNodeID( id );\n\t},\n\n\thasType( node:RDFNode, type:string ):boolean {\n\t\treturn RDFNode.getTypes( node ).indexOf( type ) !== - 1;\n\t},\n\n\tgetTypes( node:RDFNode ):string[] {\n\t\tif( ! ( \"@type\" in node ) ) return [];\n\t\treturn node[ \"@type\" ];\n\t},\n\n\tgetList( propertyValues:RDFNodePropertyValue[] ):RDFList | undefined {\n\t\tif( ! Array.isArray( propertyValues ) ) return;\n\n\t\treturn propertyValues\n\t\t\t.find( RDFList.is )\n\t\t\t;\n\t},\n\n\tgetPropertyLiterals( propertyValues:RDFNodePropertyValue[], literalType:string ):any[] | undefined {\n\t\tif( ! Array.isArray( propertyValues ) ) return;\n\n\t\treturn propertyValues\n\t\t\t.filter( RDFLiteral.is )\n\t\t\t.filter( literal => RDFLiteral.hasType( literal, literalType ) )\n\t\t\t.map( RDFLiteral.parse )\n\t\t\t;\n\t},\n\n\tgetPropertyLanguageMap( propertyValues:RDFNodePropertyValue[] ):object | undefined {\n\t\tif( ! Array.isArray( propertyValues ) ) return;\n\n\t\tconst propertyLanguageMap:object = {};\n\t\tfor( const propertyValue of propertyValues ) {\n\t\t\tif( ! RDFLiteral.is( propertyValue ) ) continue;\n\t\t\tif( ! RDFLiteral.hasType( propertyValue, XSD.string ) ) continue;\n\n\t\t\tconst languageTag:string = propertyValue[ \"@language\" ];\n\t\t\tif( ! languageTag ) continue;\n\n\t\t\tpropertyLanguageMap[ languageTag ] = RDFLiteral.parse( propertyValue );\n\t\t}\n\n\t\treturn propertyLanguageMap;\n\t},\n\n};\n"]}