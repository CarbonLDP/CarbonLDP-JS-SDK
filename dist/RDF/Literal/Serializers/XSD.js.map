{"version":3,"sources":["RDF/Literal/Serializers/XSD.ts"],"names":[],"mappings":"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","file":"RDF/Literal/Serializers/XSD.js","sourcesContent":["import * as Errors from \"./../../../Errors\";\nimport * as Utils from \"./../../../Utils\";\n\nimport Serializer from \"./../Serializer\";\n\nfunction pad( value:number ):string {\n\tlet paddedValue:string = String( value );\n\tif ( paddedValue.length === 1 ) paddedValue = \"0\" + paddedValue;\n\treturn paddedValue;\n}\n\nexport class DateSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isDate( value ) ) throw new Errors.IllegalArgumentError( \"The value is not a Date object.\" );\n\n\t\treturn value.getUTCFullYear() + \"-\" + pad( (value.getUTCMonth() + 1) ) + \"-\" + pad( value.getUTCDate() );\n\t}\n}\n\nexport let dateSerializer:DateSerializer = new DateSerializer();\n\nexport class DateTimeSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isDate( value ) ) throw new Errors.IllegalArgumentError( \"The value is not a Date object.\" );\n\n\t\treturn value.toISOString();\n\t}\n}\n\nexport let dateTimeSerializer:DateTimeSerializer = new DateTimeSerializer();\n\nexport class TimeSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isDate( value ) ) throw new Errors.IllegalArgumentError( \"The value is not a Date object.\" );\n\n\t\treturn pad( value.getUTCHours() )\n\t\t\t+ \":\" + pad( value.getUTCMinutes() )\n\t\t\t+ \":\" + pad( value.getUTCSeconds() )\n\t\t\t+ \".\" + String( ( value.getUTCMilliseconds() / 1000 ).toFixed( 3 ) ).slice( 2, 5 )\n\t\t\t+ \"Z\"\n\t\t;\n\t}\n}\n\nexport let timeSerializer:TimeSerializer = new TimeSerializer();\n\nexport class IntegerSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isNumber( value ) ) throw new Errors.IllegalArgumentError( \"The value is not a number.\" );\n\n\t\t// Negative truncate\n\t\treturn ( ~~value ) + \"\";\n\t}\n}\n\nexport let integerSerializer:IntegerSerializer = new IntegerSerializer();\n\nexport class UnsignedIntegerSerializer extends IntegerSerializer {\n\tserialize( value:any ):string {\n\t\tlet stringValue:string = super.serialize( value );\n\n\t\tstringValue = Utils.S.startsWith( stringValue, \"-\" ) ? stringValue.substring( 1 ) : stringValue;\n\n\t\treturn stringValue;\n\t}\n}\n\nexport let unsignedIntegerSerializer:UnsignedIntegerSerializer = new UnsignedIntegerSerializer();\n\nexport class FloatSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isNumber( value ) ) throw new Errors.IllegalArgumentError( \"The value is not a number.\" );\n\n\t\treturn value + \"\";\n\t}\n}\n\nexport let floatSerializer:FloatSerializer = new FloatSerializer();\n\nexport class BooleanSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( !! value ) {\n\t\t\treturn \"true\";\n\t\t} else {\n\t\t\treturn \"false\";\n\t\t}\n\t}\n}\n\nexport let booleanSerializer:BooleanSerializer = new BooleanSerializer();\n\nexport class StringSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\treturn value + \"\";\n\t}\n}\n\nexport let stringSerializer:StringSerializer = new StringSerializer();\n"],"sourceRoot":"/source/"}