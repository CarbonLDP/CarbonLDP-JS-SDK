{"version":3,"sources":["RDF/Literal/Serializers/XSD.ts"],"names":[],"mappings":"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","file":"XSD.js","sourcesContent":["import * as Errors from \"../../../Errors\";\nimport * as Utils from \"./../../../Utils\";\n\nimport Serializer from \"./../Serializer\";\n\nfunction pad( value:number ):string {\n\tlet paddedValue:string = String( value );\n\tif( paddedValue.length === 1 ) paddedValue = \"0\" + paddedValue;\n\treturn paddedValue;\n}\n\nconst notNumberError:string = \"The value is not a number.\";\n\nexport class DateSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isDate( value ) ) throw new Errors.IllegalArgumentError( \"The value is not a Date object.\" );\n\n\t\treturn value.getUTCFullYear() + \"-\" + pad( (value.getUTCMonth() + 1) ) + \"-\" + pad( value.getUTCDate() );\n\t}\n}\n\nexport let dateSerializer:DateSerializer = new DateSerializer();\n\nexport class DateTimeSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isDate( value ) ) throw new Errors.IllegalArgumentError( \"The value is not a Date object.\" );\n\n\t\treturn value.toISOString();\n\t}\n}\n\nexport let dateTimeSerializer:DateTimeSerializer = new DateTimeSerializer();\n\nexport class TimeSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isDate( value ) ) throw new Errors.IllegalArgumentError( \"The value is not a Date object.\" );\n\n\t\treturn pad( value.getUTCHours() )\n\t\t\t+ \":\" + pad( value.getUTCMinutes() )\n\t\t\t+ \":\" + pad( value.getUTCSeconds() )\n\t\t\t+ \".\" + String( ( value.getUTCMilliseconds() / 1000 ).toFixed( 3 ) ).slice( 2, 5 )\n\t\t\t+ \"Z\"\n\t\t\t;\n\t}\n}\n\nexport let timeSerializer:TimeSerializer = new TimeSerializer();\n\nexport class IntegerSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isNumber( value ) ) throw new Errors.IllegalArgumentError( notNumberError );\n\n\t\t// Negative truncate\n\t\treturn ( ~ ~ value ).toString();\n\t}\n}\n\nexport let integerSerializer:IntegerSerializer = new IntegerSerializer();\n\nexport class LongSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isNumber( value ) ) throw new Errors.IllegalArgumentError( notNumberError );\n\t\treturn Math.trunc( value ).toString();\n\t}\n}\n\nexport const longSerializer:LongSerializer = new LongSerializer();\n\nexport class UnsignedIntegerSerializer extends IntegerSerializer {\n\tserialize( value:any ):string {\n\t\tlet stringValue:string = super.serialize( value );\n\n\t\tstringValue = Utils.StringUtils.startsWith( stringValue, \"-\" ) ? stringValue.substring( 1 ) : stringValue;\n\n\t\treturn stringValue;\n\t}\n}\n\nexport let unsignedIntegerSerializer:UnsignedIntegerSerializer = new UnsignedIntegerSerializer();\n\nexport class UnsignedLongSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isNumber( value ) ) throw new Errors.IllegalArgumentError( notNumberError );\n\t\treturn Math.trunc( Math.abs( value ) ).toString();\n\t}\n}\n\nexport const unsignedLongSerializer:UnsignedLongSerializer = new UnsignedLongSerializer();\n\nexport class FloatSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isNumber( value ) ) throw new Errors.IllegalArgumentError( notNumberError );\n\t\tif( value === Number.POSITIVE_INFINITY ) return \"INF\";\n\t\tif( value === Number.NEGATIVE_INFINITY ) return \"-INF\";\n\n\t\treturn value.toString();\n\t}\n}\n\nexport let floatSerializer:FloatSerializer = new FloatSerializer();\n\nexport class BooleanSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\treturn ( ! ! value ).toString();\n\t}\n}\n\nexport let booleanSerializer:BooleanSerializer = new BooleanSerializer();\n\nexport class StringSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\treturn String( value );\n\t}\n}\n\nexport let stringSerializer:StringSerializer = new StringSerializer();\n"]}