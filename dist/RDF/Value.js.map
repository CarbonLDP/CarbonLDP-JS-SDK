{"version":3,"sources":["RDF/Value.ts"],"names":[],"mappings":";;AAEA,kCAAoC;AAEpC,+BAAiC;AACjC,qCAAuC;AACvC,+BAAiC;AAepB,QAAA,QAAQ,GAAmB;IAEvC,KAAK,EAAL,UAAO,cAA6B,EAAE,KAAwD;QAC7F,IAAI,gBAAQ,CAAE,KAAK,CAAE;YAAG,OAAO,KAAK,CAAC;QAErC,IAAI,oBAAU,CAAC,EAAE,CAAE,KAAK,CAAE;YACzB,OAAO,oBAAU,CAAC,KAAK,CAAE,KAAK,CAAE,CAAC;QAElC,IAAI,cAAO,CAAC,EAAE,CAAE,KAAK,CAAE;YACtB,OAAO,cAAc,CAAC,WAAW,CAAE,KAAK,CAAE,KAAK,CAAE,CAAE,CAAC;QAErD,IAAI,cAAO,CAAC,EAAE,CAAE,KAAK,CAAE;YACtB,OAAO,KAAK,CAAE,OAAO,CAAE;iBACrB,GAAG,CAAE,gBAAQ,CAAC,KAAK,CAAC,IAAI,CAAE,IAAI,EAAE,cAAc,CAAE,CAAE,CAAC;QAGtD,OAAO,IAAI,CAAC;IACb,CAAC;CAED,CAAC","file":"Value.js","sourcesContent":["import { PointerLibrary } from \"../Pointer/PointerLibrary\";\n\nimport { isString } from \"../Utils\";\n\nimport { RDFList } from \"./List\";\nimport { RDFLiteral } from \"./Literal\";\nimport { RDFNode } from \"./Node\";\n\n\nexport interface RDFValue {\n\t\"@id\"?:string;\n\t\"@type\"?:string;\n\t\"@value\"?:string;\n\t\"@language\"?:string;\n}\n\n\nexport interface RDFValueFactory {\n\tparse( pointerLibrary:PointerLibrary, value:RDFLiteral | RDFNode | RDFList | RDFValue | string, ):any;\n}\n\nexport const RDFValue:RDFValueFactory = {\n\n\tparse( pointerLibrary:PointerLibrary, value:RDFLiteral | RDFNode | RDFList | RDFValue | string ):any {\n\t\tif( isString( value ) ) return value;\n\n\t\tif( RDFLiteral.is( value ) )\n\t\t\treturn RDFLiteral.parse( value );\n\n\t\tif( RDFNode.is( value ) )\n\t\t\treturn pointerLibrary.$getPointer( value[ \"@id\" ] );\n\n\t\tif( RDFList.is( value ) )\n\t\t\treturn value[ \"@list\" ]\n\t\t\t\t.map( RDFValue.parse.bind( null, pointerLibrary ) );\n\n\t\t// TODO: What else could it be?\n\t\treturn null;\n\t},\n\n};\n"]}