{"version":3,"sources":["RDF/Value.ts"],"names":[],"mappings":";AAAA,IAAY,IAAI,WAAM,QAAQ,CAAC,CAAA;AAC/B,IAAY,OAAO,WAAM,WAAW,CAAC,CAAA;AACrC,IAAY,EAAE,WAAM,SAAS,CAAC,CAAA;AAE9B,IAAY,OAAO,WAAM,WAAW,CAAC,CAAA;AASrC;IAAA;IA2MA,CAAC;IA1MO,aAAQ,GAAf,UAAiB,MAAY,EAAE,MAAY;QAC1C,EAAE,CAAC,CAAE,OAAO,CAAC,OAAO,CAAC,EAAE,CAAE,MAAM,CAAE,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAE,MAAM,CAAG,CAAC,CAAC,CAAC;YACpE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAkB,MAAM,EAAkB,MAAM,CAAE,CAAC;QAChF,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAE,OAAO,CAAC,OAAO,CAAC,EAAE,CAAE,MAAM,CAAE,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAE,MAAM,CAAG,CAAC,CAAC,CAAC;YAC3E,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAkB,MAAM,EAAkB,MAAM,CAAE,CAAC;QAChF,CAAC;QAAC,IAAI;YAAC,MAAM,CAAC,KAAK,CAAC;IACrB,CAAC;IAEM,gBAAW,GAAlB,UAAoB,cAAkB,EAAE,WAAkB,EAAE,cAA8B;QACzF,IAAI,cAAc,GAAc,cAAc,CAAE,WAAW,CAAE,CAAC;QAC9D,EAAE,CAAA,CAAE,CAAE,cAAe,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QACnC,EAAE,CAAA,CAAE,CAAE,cAAc,CAAC,MAAO,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAE1C,IAAI,aAAa,GAAO,cAAc,CAAE,CAAC,CAAE,CAAC;QAE5C,MAAM,CAAC,IAAI,CAAC,UAAU,CAAE,aAAa,EAAE,cAAc,CAAE,CAAC;IACzD,CAAC;IAEM,uBAAkB,GAAzB,UAA2B,cAAkB,EAAE,WAAkB,EAAE,cAA8B;QAChG,IAAI,cAAc,GAAc,cAAc,CAAE,WAAW,CAAE,CAAC;QAC9D,EAAE,CAAA,CAAE,CAAE,cAAe,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAEnC,GAAG,CAAA,CAAuB,UAAc,EAAd,iCAAc,EAAd,4BAAc,EAAd,IAAe,CAAC;YAArC,IAAI,aAAa,uBAAA;YACrB,EAAE,CAAA,CAAE,CAAE,OAAO,CAAC,OAAO,CAAC,EAAE,CAAE,aAAa,CAAG,CAAC;gBAAC,QAAQ,CAAC;YAErD,MAAM,CAAC,cAAc,CAAC,UAAU,CAAE,aAAa,CAAE,KAAK,CAAE,CAAE,CAAC;SAC3D;QAED,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAEM,uBAAkB,GAAzB,UAA2B,cAAkB,EAAE,WAAkB,EAAE,WAAkB;QACpF,IAAI,cAAc,GAAc,cAAc,CAAE,WAAW,CAAE,CAAC;QAC9D,EAAE,CAAA,CAAE,CAAE,cAAe,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAEnC,GAAG,CAAA,CAAuB,UAAc,EAAd,iCAAc,EAAd,4BAAc,EAAd,IAAe,CAAC;YAArC,IAAI,aAAa,uBAAA;YACrB,EAAE,CAAA,CAAE,CAAE,OAAO,CAAC,OAAO,CAAC,EAAE,CAAE,aAAa,CAAG,CAAC;gBAAC,QAAQ,CAAC;YACrD,EAAE,CAAA,CAAE,CAAE,OAAO,CAAC,OAAO,CAAC,OAAO,CAAE,aAAa,EAAE,WAAW,CAAG,CAAC;gBAAC,QAAQ,CAAC;YAEvE,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAE,aAAa,CAAE,CAAC;SAC9C;QAED,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAEM,oBAAe,GAAtB,UAAwB,cAAkB,EAAE,WAAkB,EAAE,cAA8B;QAC7F,IAAI,cAAc,GAAc,cAAc,CAAE,WAAW,CAAE,CAAC;QAC9D,EAAE,CAAA,CAAE,CAAE,cAAe,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAEnC,IAAI,YAAY,GAAc,IAAI,CAAC,OAAO,CAAE,cAAc,CAAE,CAAC;QAC7D,EAAE,CAAA,CAAE,CAAE,YAAa,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAEjC,IAAI,UAAU,GAAc,EAAE,CAAC;QAC/B,GAAG,CAAA,CAAmB,UAAuB,EAAvB,KAAA,YAAY,CAAE,OAAO,CAAE,EAAvB,cAAuB,EAAvB,IAAwB,CAAC;YAA1C,IAAI,SAAS,SAAA;YACjB,UAAU,CAAC,IAAI,CAAE,IAAI,CAAC,UAAU,CAAE,SAAS,EAAE,cAAc,CAAE,CAAE,CAAC;SAChE;QAED,MAAM,CAAC,UAAU,CAAC;IACnB,CAAC;IAEM,2BAAsB,GAA7B,UAA+B,cAAkB,EAAE,WAAkB,EAAE,cAA8B;QACpG,IAAI,cAAc,GAAc,cAAc,CAAE,WAAW,CAAE,CAAC;QAC9D,EAAE,CAAA,CAAE,CAAE,cAAe,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAEnC,IAAI,YAAY,GAAc,IAAI,CAAC,OAAO,CAAE,cAAc,CAAE,CAAC;QAC7D,EAAE,CAAA,CAAE,CAAE,YAAa,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAEjC,IAAI,YAAY,GAAc,EAAE,CAAC;QACjC,GAAG,CAAA,CAAmB,UAAuB,EAAvB,KAAA,YAAY,CAAE,OAAO,CAAE,EAAvB,cAAuB,EAAvB,IAAwB,CAAC;YAA1C,IAAI,SAAS,SAAA;YACjB,EAAE,CAAA,CAAE,CAAE,OAAO,CAAC,OAAO,CAAC,EAAE,CAAE,SAAS,CAAG,CAAC;gBAAC,QAAQ,CAAC;YAEjD,IAAI,OAAO,GAAiB,cAAc,CAAC,UAAU,CAAE,SAAS,CAAE,KAAK,CAAE,CAAE,CAAC;YAC5E,YAAY,CAAC,IAAI,CAAE,OAAO,CAAE,CAAC;SAC7B;QAED,MAAM,CAAC,YAAY,CAAC;IACrB,CAAC;IAEM,2BAAsB,GAA7B,UAA+B,cAAkB,EAAE,WAAkB,EAAE,WAAkB;QACxF,IAAI,cAAc,GAAc,cAAc,CAAE,WAAW,CAAE,CAAC;QAC9D,EAAE,CAAA,CAAE,CAAE,cAAe,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAEnC,IAAI,YAAY,GAAc,IAAI,CAAC,OAAO,CAAE,cAAc,CAAE,CAAC;QAC7D,EAAE,CAAA,CAAE,CAAE,YAAa,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAEjC,IAAI,YAAY,GAAc,EAAE,CAAC;QACjC,GAAG,CAAA,CAAmB,UAAuB,EAAvB,KAAA,YAAY,CAAE,OAAO,CAAE,EAAvB,cAAuB,EAAvB,IAAwB,CAAC;YAA1C,IAAI,SAAS,SAAA;YACjB,EAAE,CAAA,CAAE,CAAE,OAAO,CAAC,OAAO,CAAC,EAAE,CAAE,SAAS,CAAG,CAAC;gBAAC,QAAQ,CAAC;YACjD,EAAE,CAAA,CAAE,CAAE,OAAO,CAAC,OAAO,CAAC,OAAO,CAAQ,SAAS,EAAE,WAAW,CAAG,CAAC;gBAAC,QAAQ,CAAC;YAEzE,YAAY,CAAC,IAAI,CAAE,OAAO,CAAC,OAAO,CAAC,KAAK,CAAQ,SAAS,CAAE,CAAE,CAAC;SAC9D;QAED,MAAM,CAAC,YAAY,CAAC;IACrB,CAAC;IAEM,kBAAa,GAApB,UAAsB,cAAkB,EAAE,WAAkB,EAAE,cAA8B;QAC3F,IAAI,cAAc,GAAc,cAAc,CAAE,WAAW,CAAE,CAAC;QAC9D,EAAE,CAAA,CAAE,CAAE,cAAe,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QACnC,EAAE,CAAA,CAAE,CAAE,cAAc,CAAC,MAAO,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAE1C,IAAI,UAAU,GAAc,EAAE,CAAC;QAC/B,GAAG,CAAA,CAAuB,UAAc,EAAd,iCAAc,EAAd,4BAAc,EAAd,IAAe,CAAC;YAArC,IAAI,aAAa,uBAAA;YACrB,IAAI,WAAW,GAAO,IAAI,CAAC,UAAU,CAAE,aAAa,EAAE,cAAc,CAAE,CAAC;YACvE,EAAE,CAAC,CAAE,WAAW,KAAK,IAAK,CAAC;gBAC1B,UAAU,CAAC,IAAI,CAAE,WAAW,CAAE,CAAC;SAChC;QAED,MAAM,CAAC,UAAU,CAAC;IACnB,CAAC;IAEM,wBAAmB,GAA1B,UAA4B,cAAkB,EAAE,WAAkB,EAAE,cAA8B;QACjG,IAAI,cAAc,GAAc,cAAc,CAAE,WAAW,CAAE,CAAC;QAC9D,EAAE,CAAA,CAAE,CAAE,cAAe,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QACnC,EAAE,CAAA,CAAE,CAAE,cAAc,CAAC,MAAO,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAE1C,IAAI,gBAAgB,GAAc,EAAE,CAAC;QACrC,GAAG,CAAA,CAAuB,UAAc,EAAd,iCAAc,EAAd,4BAAc,EAAd,IAAe,CAAC;YAArC,IAAI,aAAa,uBAAA;YACrB,EAAE,CAAA,CAAE,CAAE,OAAO,CAAC,OAAO,CAAC,EAAE,CAAE,aAAa,CAAG,CAAC;gBAAC,QAAQ,CAAC;YAErD,IAAI,OAAO,GAAiB,cAAc,CAAC,UAAU,CAAE,aAAa,CAAE,KAAK,CAAE,CAAE,CAAC;YAChF,EAAE,CAAC,CAAE,OAAO,KAAK,IAAK,CAAC;gBACtB,gBAAgB,CAAC,IAAI,CAAE,OAAO,CAAE,CAAC;SAClC;QAED,MAAM,CAAC,gBAAgB,CAAC;IACzB,CAAC;IAEM,oBAAe,GAAtB,UAAwB,cAAkB,EAAE,WAAkB;QAC7D,IAAI,cAAc,GAAc,cAAc,CAAE,WAAW,CAAE,CAAC;QAC9D,EAAE,CAAA,CAAE,CAAE,cAAe,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QACnC,EAAE,CAAA,CAAE,CAAE,cAAc,CAAC,MAAO,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAE1C,IAAI,YAAY,GAAY,EAAE,CAAC;QAC/B,GAAG,CAAA,CAAuB,UAAc,EAAd,iCAAc,EAAd,4BAAc,EAAd,IAAe,CAAC;YAArC,IAAI,aAAa,uBAAA;YACrB,EAAE,CAAA,CAAE,CAAE,OAAO,CAAC,OAAO,CAAC,EAAE,CAAE,aAAa,CAAG,CAAC;gBAAC,QAAQ,CAAC;YAErD,YAAY,CAAC,IAAI,CAAE,aAAa,CAAE,KAAK,CAAE,CAAE,CAAC;SAC5C;QAED,MAAM,CAAC,YAAY,CAAC;IACrB,CAAC;IAEM,wBAAmB,GAA1B,UAA4B,cAAkB,EAAE,WAAkB,EAAE,WAAkB;QACrF,IAAI,cAAc,GAAc,cAAc,CAAE,WAAW,CAAE,CAAC;QAC9D,EAAE,CAAA,CAAE,CAAE,cAAe,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAEnC,IAAI,gBAAgB,GAAc,EAAE,CAAC;QACrC,GAAG,CAAA,CAAuB,UAAc,EAAd,iCAAc,EAAd,4BAAc,EAAd,IAAe,CAAC;YAArC,IAAI,aAAa,uBAAA;YACrB,EAAE,CAAA,CAAE,CAAE,OAAO,CAAC,OAAO,CAAC,EAAE,CAAE,aAAa,CAAG,CAAC;gBAAC,QAAQ,CAAC;YACrD,EAAE,CAAA,CAAE,CAAE,OAAO,CAAC,OAAO,CAAC,OAAO,CAAE,aAAa,EAAE,WAAW,CAAG,CAAC;gBAAC,QAAQ,CAAC;YAEvE,gBAAgB,CAAC,IAAI,CAAE,OAAO,CAAC,OAAO,CAAC,KAAK,CAAE,aAAa,CAAE,CAAE,CAAC;SAChE;QAED,MAAM,CAAC,gBAAgB,CAAC;IACzB,CAAC;IAEM,2BAAsB,GAA7B,UAA+B,cAAkB,EAAE,WAAkB;QACpE,IAAI,cAAc,GAAc,cAAc,CAAE,WAAW,CAAE,CAAC;QAC9D,EAAE,CAAA,CAAE,CAAE,cAAe,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAEnC,IAAI,mBAAmB,GAAO,EAAE,CAAC;QACjC,GAAG,CAAA,CAAuB,UAAc,EAAd,iCAAc,EAAd,4BAAc,EAAd,IAAe,CAAC;YAArC,IAAI,aAAa,uBAAA;YACrB,EAAE,CAAA,CAAE,CAAE,OAAO,CAAC,OAAO,CAAC,EAAE,CAAE,aAAa,CAAG,CAAC;gBAAC,QAAQ,CAAC;YACrD,EAAE,CAAA,CAAE,CAAE,OAAO,CAAC,OAAO,CAAC,OAAO,CAAE,aAAa,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAG,CAAC;gBAAC,QAAQ,CAAC;YAElF,IAAI,WAAW,GAAU,aAAa,CAAE,WAAW,CAAE,CAAC;YACtD,EAAE,CAAA,CAAE,CAAE,WAAY,CAAC;gBAAC,QAAQ,CAAC;YAE7B,mBAAmB,CAAE,WAAW,CAAE,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAE,aAAa,CAAE,CAAC;SAC5E;QAED,MAAM,CAAC,mBAAmB,CAAC;IAC5B,CAAC;IAEM,YAAO,GAAd,UAAgB,cAAyB;QACxC,GAAG,CAAA,CAAuB,UAAc,EAAd,iCAAc,EAAd,4BAAc,EAAd,IAAe,CAAC;YAArC,IAAI,aAAa,uBAAA;YACrB,EAAE,CAAA,CAAE,CAAE,IAAI,CAAC,OAAO,CAAC,EAAE,CAAE,aAAa,CAAG,CAAC;gBAAC,QAAQ,CAAC;YAElD,MAAM,CAAC,aAAa,CAAC;SACrB;QACD,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAEM,eAAU,GAAjB,UAAmB,aAAmB,EAAE,cAA8B;QACrE,EAAE,CAAA,CAAE,OAAO,CAAC,OAAO,CAAC,EAAE,CAAE,aAAa,CAAG,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAQ,aAAa,CAAE,CAAC;QACrD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAA,CAAE,OAAO,CAAC,OAAO,CAAC,EAAE,CAAE,aAAa,CAAG,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,cAAc,CAAC,UAAU,CAAE,aAAa,CAAE,KAAK,CAAE,CAAE,CAAC;QAC5D,CAAC;QAAC,IAAI,CAAC,EAAE,CAAA,CAAE,IAAI,CAAC,OAAO,CAAC,EAAE,CAAE,aAAa,CAAG,CAAC,CAAC,CAAC;YAC9C,IAAI,WAAW,GAAc,EAAE,CAAC;YAChC,IAAI,UAAU,GAAc,aAAa,CAAE,OAAO,CAAE,CAAC;YACrD,GAAG,CAAA,CAAmB,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAW,CAAC;gBAA7B,IAAI,SAAS,mBAAA;gBACjB,WAAW,CAAC,IAAI,CAAE,IAAI,CAAC,UAAU,CAAE,SAAS,EAAE,cAAc,CAAE,CAAE,CAAC;aACjE;YACD,MAAM,CAAC,WAAW,CAAC;QACpB,CAAC;QAAC,IAAI,CAAC,CAAC;QAER,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IACF,WAAC;AAAD,CA3MA,AA2MC,IAAA;AA3MY,YAAI,OA2MhB,CAAA","file":"RDF/Value.js","sourcesContent":["import * as List from \"./List\";\nimport * as Literal from \"./Literal\";\nimport * as NS from \"./../NS\";\nimport * as Pointer from \"./../Pointer\";\nimport * as RDFNode from \"./RDFNode\";\n\nexport interface Class {\n\t\"@id\"?:string;\n\t\"@type\"?:string;\n\t\"@value\"?:string;\n}\n\n// TODO: Move all getters and setters to RDFNode.Util\nexport class Util {\n\tstatic areEqual( value1:Class, value2:Class ):boolean {\n\t\tif ( Literal.Factory.is( value1 ) && Literal.Factory.is( value2 ) ) {\n\t\t\treturn Literal.Util.areEqual( <Literal.Class> value1, <Literal.Class> value2 );\n\t\t} else if ( RDFNode.Factory.is( value1 ) && RDFNode.Factory.is( value2 ) ) {\n\t\t\treturn RDFNode.Util.areEqual( <RDFNode.Class> value1, <RDFNode.Class> value2 );\n\t\t} else return false;\n\t}\n\n\tstatic getProperty( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\t\tif( ! propertyValues.length ) return null;\n\n\t\tlet propertyValue:any = propertyValues[ 0 ];\n\n\t\treturn Util.parseValue( propertyValue, pointerLibrary );\n\t}\n\n\tstatic getPropertyPointer( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! RDFNode.Factory.is( propertyValue ) ) continue;\n\n\t\t\treturn pointerLibrary.getPointer( propertyValue[ \"@id\" ] );\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tstatic getPropertyLiteral( expandedObject:any, propertyURI:string, literalType:string ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! Literal.Factory.is( propertyValue ) ) continue;\n\t\t\tif( ! Literal.Factory.hasType( propertyValue, literalType ) ) continue;\n\n\t\t\treturn Literal.Factory.parse( propertyValue );\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tstatic getPropertyList( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyList:List.Class = Util.getList( propertyValues );\n\t\tif( ! propertyList ) return null;\n\n\t\tlet listValues:Array<any> = [];\n\t\tfor( let listValue of propertyList[ \"@list\" ] ) {\n\t\t\tlistValues.push( Util.parseValue( listValue, pointerLibrary ) );\n\t\t}\n\n\t\treturn listValues;\n\t}\n\n\tstatic getPropertyPointerList( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyList:List.Class = Util.getList( propertyValues );\n\t\tif( ! propertyList ) return null;\n\n\t\tlet listPointers:Array<any> = [];\n\t\tfor( let listValue of propertyList[ \"@list\" ] ) {\n\t\t\tif( ! RDFNode.Factory.is( listValue ) ) continue;\n\n\t\t\tlet pointer:Pointer.Class = pointerLibrary.getPointer( listValue[ \"@id\" ] );\n\t\t\tlistPointers.push( pointer );\n\t\t}\n\n\t\treturn listPointers;\n\t}\n\n\tstatic getPropertyLiteralList( expandedObject:any, propertyURI:string, literalType:string ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyList:List.Class = Util.getList( propertyValues );\n\t\tif( ! propertyList ) return null;\n\n\t\tlet listLiterals:Array<any> = [];\n\t\tfor( let listValue of propertyList[ \"@list\" ] ) {\n\t\t\tif( ! Literal.Factory.is( listValue ) ) continue;\n\t\t\tif( ! Literal.Factory.hasType( <any> listValue, literalType ) ) continue;\n\n\t\t\tlistLiterals.push( Literal.Factory.parse( <any> listValue ) );\n\t\t}\n\n\t\treturn listLiterals;\n\t}\n\n\tstatic getProperties( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\t\tif( ! propertyValues.length ) return null;\n\n\t\tlet properties:Array<any> = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tlet parsedValue:any = Util.parseValue( propertyValue, pointerLibrary );\n\t\t\tif ( parsedValue !== null )\n\t\t\t\tproperties.push( parsedValue );\n\t\t}\n\n\t\treturn properties;\n\t}\n\n\tstatic getPropertyPointers( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\t\tif( ! propertyValues.length ) return null;\n\n\t\tlet propertyPointers:Array<any> = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! RDFNode.Factory.is( propertyValue ) ) continue;\n\n\t\t\tlet pointer:Pointer.Class = pointerLibrary.getPointer( propertyValue[ \"@id\" ] );\n\t\t\tif ( pointer !== null )\n\t\t\t\tpropertyPointers.push( pointer );\n\t\t}\n\n\t\treturn propertyPointers;\n\t}\n\n\tstatic getPropertyURIs( expandedObject:any, propertyURI:string ):string[] {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\t\tif( ! propertyValues.length ) return null;\n\n\t\tlet propertyURIs:string[] = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! RDFNode.Factory.is( propertyValue ) ) continue;\n\n\t\t\tpropertyURIs.push( propertyValue[ \"@id\" ] );\n\t\t}\n\n\t\treturn propertyURIs;\n\t}\n\n\tstatic getPropertyLiterals( expandedObject:any, propertyURI:string, literalType:string ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyLiterals:Array<any> = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! Literal.Factory.is( propertyValue ) ) continue;\n\t\t\tif( ! Literal.Factory.hasType( propertyValue, literalType ) ) continue;\n\n\t\t\tpropertyLiterals.push( Literal.Factory.parse( propertyValue ) );\n\t\t}\n\n\t\treturn propertyLiterals;\n\t}\n\n\tstatic getPropertyLanguageMap( expandedObject:any, propertyURI:string ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyLanguageMap:any = {};\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! Literal.Factory.is( propertyValue ) ) continue;\n\t\t\tif( ! Literal.Factory.hasType( propertyValue, NS.XSD.DataType.string ) ) continue;\n\n\t\t\tlet languageTag:string = propertyValue[ \"@language\" ];\n\t\t\tif( ! languageTag ) continue;\n\n\t\t\tpropertyLanguageMap[ languageTag ] = Literal.Factory.parse( propertyValue );\n\t\t}\n\n\t\treturn propertyLanguageMap;\n\t}\n\n\tstatic getList( propertyValues:Array<any> ):List.Class {\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! List.Factory.is( propertyValue ) ) continue;\n\n\t\t\treturn propertyValue;\n\t\t}\n\t\treturn null;\n\t}\n\n\tstatic parseValue( propertyValue:Class, pointerLibrary:Pointer.Library ):any {\n\t\tif( Literal.Factory.is( propertyValue ) ) {\n\t\t\treturn Literal.Factory.parse( <any> propertyValue );\n\t\t} else if( RDFNode.Factory.is( propertyValue ) ) {\n\t\t\treturn pointerLibrary.getPointer( propertyValue[ \"@id\" ] );\n\t\t} else if( List.Factory.is( propertyValue ) ) {\n\t\t\tlet parsedValue:Array<any> = [];\n\t\t\tlet listValues:Array<any> = propertyValue[ \"@list\" ];\n\t\t\tfor( let listValue of listValues ) {\n\t\t\t\tparsedValue.push( this.parseValue( listValue, pointerLibrary ) );\n\t\t\t}\n\t\t\treturn parsedValue;\n\t\t} else {\n\t\t\t// TODO: What else could it be?\n\t\t}\n\t\treturn null;\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}