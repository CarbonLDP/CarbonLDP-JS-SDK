{"version":3,"sources":["HTTP/Response.ts"],"names":[],"mappings":";AAAA,IAAY,MAAM,WAAM,UAAU,CAAC,CAAA;AAEnC;IACC,eAAa,OAAsB;QAClC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAC7B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,YAAY,CAAC;QACrD,IAAI,CAAC,UAAU,CAAE,OAAO,CAAE,CAAC;QAE3B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACxB,CAAC;IAOM,yBAAS,GAAhB,UAAkB,IAAW;QAC5B,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAE,IAAI,CAAE,IAAI,IAAI,CAAC;IACzC,CAAC;IAEO,0BAAU,GAAlB,UAAoB,OAAsB;QACzC,IAAI,aAAa,GAAU,OAAO,CAAC,qBAAqB,EAAE,CAAC;QAC3D,EAAE,CAAC,CAAE,aAAc,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAE,aAAa,CAAE,CAAC;QAC1D,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAwB,CAAC;QAChD,CAAC;IACF,CAAC;IACF,YAAC;AAAD,CA3BA,AA2BC,IAAA;AA3BY,aAAK,QA2BjB,CAAA;AAED;IAAA;IAYA,CAAC;IAXO,YAAO,GAAd,UAAgB,QAAc;QAC7B,EAAE,CAAA,CAAE,CAAE,QAAQ,IAAI,CAAE,QAAQ,CAAC,OAAQ,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAEnD,IAAI,UAAU,GAAgB,QAAQ,CAAC,SAAS,CAAE,MAAM,CAAE,CAAC;QAE3D,EAAE,CAAA,CAAE,CAAE,UAAW,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAC/B,EAAE,CAAA,CAAE,CAAE,UAAU,CAAC,MAAM,CAAC,MAAO,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAC7C,EAAE,CAAA,CAAE,UAAU,CAAC,MAAM,CAAC,MAAM,GAAG,CAAE,CAAC;YAAC,OAAO,CAAC,IAAI,CAAE,wDAAwD,EAAE,QAAQ,CAAE,CAAC;QAEtH,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,CAAC,CAAE,CAAC,QAAQ,EAAE,CAAC;IAC1C,CAAC;IACF,WAAC;AAAD,CAZA,AAYC,IAAA;AAZY,YAAI,OAYhB,CAAA;AAED;kBAAe,KAAK,CAAC","file":"HTTP/Response.js","sourcesContent":["import * as Header from \"./Header\";\n\nexport class Class {\n\tconstructor( request:XMLHttpRequest ) {\n\t\tthis.status = request.status;\n\t\tthis.data = request.response || request.responseText;\n\t\tthis.setHeaders( request );\n\n\t\tthis.request = request;\n\t}\n\n\tstatus:number;\n\tdata:string | Blob;\n\theaders:Map<string, Header.Class>;\n\trequest:XMLHttpRequest;\n\n\tpublic getHeader( name:string ):Header.Class {\n\t\tname = name.toLowerCase();\n\t\treturn this.headers.get( name ) || null;\n\t}\n\n\tprivate setHeaders( request:XMLHttpRequest ):void {\n\t\tlet headersString:string = request.getAllResponseHeaders();\n\t\tif ( headersString ) {\n\t\t\tthis.headers = Header.Util.parseHeaders( headersString );\n\t\t} else {\n\t\t\tthis.headers = new Map<string, Header.Class>();\n\t\t}\n\t}\n}\n\nexport class Util {\n\tstatic getETag( response:Class ):string {\n\t\tif( ! response || ! response.headers ) return null;\n\n\t\tlet etagHeader:Header.Class = response.getHeader( \"ETag\" );\n\n\t\tif( ! etagHeader ) return null;\n\t\tif( ! etagHeader.values.length ) return null;\n\t\tif( etagHeader.values.length > 1 ) console.warn( \"The response contains more than one ETag. Response: %o\", response );\n\n\t\treturn etagHeader.values[ 0 ].toString();\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}