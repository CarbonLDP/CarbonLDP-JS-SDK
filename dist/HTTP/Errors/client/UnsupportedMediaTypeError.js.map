{"version":3,"sources":["HTTP/Errors/client/UnsupportedMediaTypeError.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,4CAAuC;AAGvC,IAAM,IAAI,GAAU,2BAA2B,CAAC;AAChD,IAAM,UAAU,GAAU,GAAG,CAAC;AAE9B;IAAwC,6CAAS;IAKhD,mCAAa,OAAc,EAAE,QAAiB;QAA9C,YACC,kBAAO,OAAO,EAAE,QAAQ,CAAE,SAE1B;QADA,MAAM,CAAC,cAAc,CAAE,KAAI,EAAE,yBAAyB,CAAC,SAAS,CAAE,CAAC;;IACpE,CAAC;IAPD,sBAAW,uCAAU;aAArB,cAAiC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;;;OAAA;IAErD,sBAAI,2CAAI;aAAR,cAAoB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;;OAAA;IAMnC,gCAAC;AAAD,CATA,AASC,CATuC,mBAAS,GAShD;AAED,kBAAe,yBAAyB,CAAC","file":"UnsupportedMediaTypeError.js","sourcesContent":["import HTTPError from \"./../HTTPError\";\nimport Response from \"./../../Response\";\n\nconst name:string = \"UnsupportedMediaTypeError\";\nconst statusCode:number = 415;\n\nclass UnsupportedMediaTypeError extends HTTPError {\n\tstatic get statusCode():number { return statusCode; }\n\n\tget name():string { return name; }\n\n\tconstructor( message:string, response:Response ) {\n\t\tsuper( message, response );\n\t\tObject.setPrototypeOf( this, UnsupportedMediaTypeError.prototype );\n\t}\n}\n\nexport default UnsupportedMediaTypeError;\n"]}