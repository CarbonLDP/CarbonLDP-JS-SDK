{"version":3,"sources":["HTTP/Errors/index.ts"],"names":[],"mappings":";;;;;AAAA,6CAA+C;AAC/C,yCAAwC;AAiBvC,oBAjBQ,qBAAS,CAiBR;AAhBV,6CAA+C;AAC/C,+CAA8C;AAgB7C,uBAhBQ,2BAAY,CAgBR;AAdb,oCAA+B;AAC/B,oCAA+B;AAE/B,IAAM,aAAa,GAAiC,IAAI,GAAG,EAA4B,CAAC;AAavF,sCAAa;AAZd,IAAM,SAAS,GAAiC,UAAA,CAAC,IAAI,OAAA,MAAM;KACzD,IAAI,CAAE,CAAC,CAAE;KACT,GAAG,CAAE,UAAA,CAAC,IAAI,OAAA,CAAC,CAAE,CAAC,CAAE,EAAN,CAAM,CAAE;KAClB,OAAO,CAAE,UAAA,CAAC,IAAI,OAAA,aAAa,CAAC,GAAG,CAAE,CAAC,CAAC,UAAU,EAAE,CAAC,CAAE,EAApC,CAAoC,CAAE,EAHD,CAGC,CACrD;AACD,SAAS,CAAE,YAAY,CAAE,CAAC;AAC1B,SAAS,CAAE,YAAY,CAAE,CAAC","file":"index.js","sourcesContent":["import * as ClientErrors from \"./ClientErrors\";\nimport { HTTPError } from \"./HTTPError\";\nimport * as ServerErrors from \"./ServerErrors\";\nimport { UnknownError } from \"./UnknownError\";\n\nexport * from \"./ClientErrors\";\nexport * from \"./ServerErrors\";\n\nconst statusCodeMap:Map<number, typeof HTTPError> = new Map<number, typeof HTTPError>();\nconst addErrors:<T extends {}>( o:T ) => void = o => Object\n\t.keys( o )\n\t.map( k => o[ k ] )\n\t.forEach( e => statusCodeMap.set( e.statusCode, e ) )\n;\naddErrors( ClientErrors );\naddErrors( ServerErrors );\n\nexport {\n\tHTTPError,\n\tUnknownError,\n\n\tstatusCodeMap,\n};\n"]}