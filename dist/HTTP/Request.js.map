{"version":3,"sources":["HTTP/Request.ts"],"names":[],"mappings":"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","file":"Request.js","sourcesContent":["import HTTP from \"http\";\nimport HTTPS from \"https\";\nimport URL from \"url\";\n\nimport { hasProperty, hasPropertyDefined, isNumber, isString } from \"../Utils\";\n\nimport { HTTPError } from \"./Errors/HTTPError\";\nimport { statusCodeMap } from \"./Errors/index\";\nimport { BadResponseError } from \"./Errors/ServerErrors/BadResponseError\";\nimport { UnknownError } from \"./Errors/UnknownError\";\n\nimport { Header } from \"./Header\";\nimport { HTTPMethod } from \"./HTTPMethod\";\nimport { Parser } from \"./Parser\";\nimport { Response } from \"./Response\";\n\n\nexport interface RequestOptions {\n\theaders?:Map<string, Header>;\n\tsendCredentialsOnCORS?:boolean;\n\ttimeout?:number;\n\trequest?:XMLHttpRequest;\n}\n\nexport interface GETOptions extends RequestOptions {\n\tensureLatest?:boolean;\n}\n\nexport interface RetrievalPreferences {\n\tinclude?:string[];\n\tomit?:string[];\n}\n\ntype ResolveCallback = ( response:Response ) => void;\ntype RejectCallback = ( error:HTTPError ) => void;\n\nfunction __onResolve( resolve:ResolveCallback, reject:RejectCallback, response:Response ):void {\n\tif( response.status >= 200 && response.status <= 299 ) {\n\t\tresolve( response );\n\t} else {\n\t\tif( ! statusCodeMap.has( response.status ) )\n\t\t\treturn reject( new UnknownError( response.data, response ) );\n\n\t\treject( new (statusCodeMap.get( response.status ))( response.data, response ) );\n\t}\n}\n\nfunction __sendWithBrowser( method:string, url:string, body:string | Blob, options:RequestOptions ):Promise<Response> {\n\treturn new Promise<Response>( ( resolve:ResolveCallback, reject:RejectCallback ):void => {\n\t\tlet request:XMLHttpRequest = options.request ? options.request : new XMLHttpRequest();\n\t\trequest.open( method, url, true );\n\n\t\tif( options.headers ) options.headers\n\t\t\t.forEach( ( header:Header, name:string ) => request.setRequestHeader( name, header.toString() ) );\n\n\t\trequest.withCredentials = options.sendCredentialsOnCORS;\n\t\tif( options.timeout ) request.timeout = options.timeout;\n\n\t\trequest.onload = request.onerror = () => {\n\t\t\tlet response:Response = new Response( request );\n\t\t\t__onResolve( resolve, reject, response );\n\t\t};\n\n\t\tif( body ) {\n\t\t\trequest.send( body );\n\t\t} else {\n\t\t\trequest.send();\n\t\t}\n\t} );\n}\n\nfunction __sendWithNode( method:string, url:string, body:string | Buffer, options:RequestOptions ):Promise<Response> {\n\treturn new Promise<Response>( ( resolve:ResolveCallback, reject:RejectCallback ):void => {\n\t\tfunction returnResponse( request:HTTP.ClientRequest, res:HTTP.IncomingMessage ):void {\n\t\t\tlet rawData:Buffer[] = [];\n\n\t\t\tres.on( \"data\", ( chunk:string | Buffer ):void => {\n\t\t\t\tif( typeof chunk === \"string\" ) chunk = Buffer.from( <any>chunk, \"utf-8\" );\n\t\t\t\trawData.push( chunk );\n\t\t\t} ).on( \"end\", () => {\n\t\t\t\tlet data:string = Buffer.concat( rawData ).toString( \"utf8\" );\n\t\t\t\tlet response:Response = new Response( request, data, res );\n\n\t\t\t\t__onResolve( resolve, reject, response );\n\t\t\t} );\n\t\t}\n\n\t\tlet numberOfRedirects:number = 0;\n\n\t\tfunction sendRequestWithRedirect( _url:string ):void {\n\t\t\tlet parsedURL:URL.Url = URL.parse( _url );\n\t\t\tlet Adapter:any = parsedURL.protocol === \"http:\" ? HTTP : HTTPS;\n\n\t\t\tlet requestOptions:HTTP.RequestOptions = {\n\t\t\t\tprotocol: parsedURL.protocol,\n\t\t\t\thostname: parsedURL.hostname,\n\t\t\t\tport: parsedURL.port,\n\t\t\t\tpath: parsedURL.path,\n\t\t\t\tmethod: method,\n\t\t\t\theaders: {},\n\t\t\t};\n\n\t\t\tif( options.headers ) options.headers\n\t\t\t\t.forEach( ( header:Header, name:string ) => requestOptions.headers[ name ] = header.toString() );\n\n\t\t\tlet request:HTTP.ClientRequest = Adapter.request( requestOptions );\n\t\t\tif( options.timeout ) request.setTimeout( options.timeout );\n\t\t\trequest.on( \"response\", ( res:HTTP.IncomingMessage ) => {\n\t\t\t\tif( res.statusCode >= 300 && res.statusCode <= 399 && \"location\" in res.headers ) {\n\t\t\t\t\tif( ++ numberOfRedirects < 10 ) return sendRequestWithRedirect( URL.resolve( _url, res.headers.location ) );\n\t\t\t\t}\n\n\t\t\t\treturnResponse( request, res );\n\t\t\t} );\n\n\t\t\trequest.on( \"error\", ( error ) => {\n\t\t\t\tlet response:Response = new Response( request, error.message );\n\t\t\t\t__onResolve( resolve, reject, response );\n\t\t\t} );\n\t\t\trequest.end( body );\n\t\t}\n\n\t\tsendRequestWithRedirect( url );\n\n\t} );\n}\n\nfunction __sendRequest( method:string, url:string, body:string | Blob | Buffer, options:RequestOptions ):Promise<Response> {\n\treturn typeof XMLHttpRequest !== \"undefined\" ?\n\t\t__sendWithBrowser( method, url, <string | Blob> body, options ) :\n\t\t__sendWithNode( method, url, <string | Buffer> body, options );\n}\n\nfunction __isBody( data:string | Blob | Buffer ):boolean {\n\treturn isString( data )\n\t\t|| typeof Blob !== \"undefined\" && data instanceof Blob\n\t\t|| typeof Buffer !== \"undefined\" && data instanceof Buffer;\n}\n\nexport class RequestService {\n\tprivate static defaultOptions:RequestOptions = {\n\t\tsendCredentialsOnCORS: true,\n\t};\n\n\tstatic send( method:(HTTPMethod | string), url:string, options?:RequestOptions ):Promise<Response>;\n\tstatic send( method:(HTTPMethod | string), url:string, body:string | Blob | Buffer, options?:RequestOptions ):Promise<Response>;\n\tstatic send( method:(HTTPMethod | string), url:string, body:string | Blob | Buffer, options?:RequestOptions ):Promise<Response>;\n\tstatic send<T>( method:(HTTPMethod | string), url:string, options?:RequestOptions, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic send<T>( method:(HTTPMethod | string), url:string, body:string | Blob | Buffer, options?:RequestOptions, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic send<T>( method:any, url:string, bodyOrOptions:any = RequestService.defaultOptions, optionsOrParser:any = RequestService.defaultOptions, parser:Parser<T> = null ):any {\n\t\tlet body:string | Blob | Buffer = null;\n\t\tlet options:RequestOptions = hasProperty( optionsOrParser, \"parse\" ) ? bodyOrOptions : optionsOrParser;\n\t\tparser = hasProperty( optionsOrParser, \"parse\" ) ? optionsOrParser : parser;\n\n\t\tif( __isBody( bodyOrOptions ) ) {\n\t\t\tbody = bodyOrOptions;\n\t\t} else {\n\t\t\toptions = bodyOrOptions ? bodyOrOptions : options;\n\t\t}\n\n\t\toptions = Object.assign( {}, RequestService.defaultOptions, options );\n\n\t\tif( isNumber( method ) ) method = HTTPMethod[ method ];\n\n\t\tconst requestPromise:Promise<Response> = __sendRequest( method, url, body, options )\n\t\t\t.then( response => {\n\t\t\t\tif( method === \"GET\" && options.headers ) return this.__handleGETResponse( url, options, response );\n\t\t\t\telse return response;\n\t\t\t} )\n\t\t;\n\n\t\tif( parser === null ) return requestPromise;\n\n\t\treturn requestPromise.then( ( response:Response ) => {\n\t\t\treturn parser.parse( response.data ).then( ( parsedBody:T ) => {\n\t\t\t\treturn [ parsedBody, response ];\n\t\t\t} );\n\t\t} );\n\t}\n\n\tstatic options( url:string, options:RequestOptions = RequestService.defaultOptions ):Promise<Response> {\n\t\treturn RequestService.send( HTTPMethod.OPTIONS, url, options );\n\t}\n\n\tstatic head( url:string, options:RequestOptions = RequestService.defaultOptions ):Promise<Response> {\n\t\treturn RequestService.send( HTTPMethod.HEAD, url, options );\n\t}\n\n\tstatic get( url:string, options?:RequestOptions ):Promise<Response>;\n\tstatic get<T>( url:string, options?:RequestOptions, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic get<T>( url:string, options:RequestOptions = RequestService.defaultOptions, parser:Parser<T> = null ):any {\n\t\treturn RequestService.send( HTTPMethod.GET, url, null, options, parser );\n\t}\n\n\tstatic post( url:string, body:Buffer, options?:RequestOptions ):Promise<Response>;\n\tstatic post<T>( url:string, body:Buffer, options?:RequestOptions, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic post( url:string, body:Blob, options?:RequestOptions ):Promise<Response>;\n\tstatic post<T>( url:string, body:Blob, options?:RequestOptions, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic post( url:string, body:string, options?:RequestOptions ):Promise<Response>;\n\tstatic post<T>( url:string, body:string, options?:RequestOptions, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic post<T>( url:string, bodyOrOptions:any = RequestService.defaultOptions, options:RequestOptions = RequestService.defaultOptions, parser:Parser<T> = null ):any {\n\t\treturn RequestService.send( HTTPMethod.POST, url, bodyOrOptions, options, parser );\n\t}\n\n\tstatic put( url:string, body:string, options?:RequestOptions ):Promise<Response>;\n\tstatic put<T>( url:string, body:string, options?:RequestOptions, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic put<T>( url:string, bodyOrOptions:any = RequestService.defaultOptions, options:RequestOptions = RequestService.defaultOptions, parser:Parser<T> = null ):any {\n\t\treturn RequestService.send( HTTPMethod.PUT, url, bodyOrOptions, options, parser );\n\t}\n\n\tstatic patch( url:string, body:string, options?:RequestOptions ):Promise<Response>;\n\tstatic patch<T>( url:string, body:string, options?:RequestOptions, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic patch<T>( url:string, bodyOrOptions:any = RequestService.defaultOptions, options:RequestOptions = RequestService.defaultOptions, parser:Parser<T> = null ):any {\n\t\treturn RequestService.send( HTTPMethod.PATCH, url, bodyOrOptions, options, parser );\n\t}\n\n\tstatic delete( url:string, options?:RequestOptions ):Promise<Response>;\n\tstatic delete( url:string, body:string, options?:RequestOptions ):Promise<Response>;\n\tstatic delete<T>( url:string, options?:RequestOptions, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic delete<T>( url:string, body:string, options?:RequestOptions, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic delete<T>( url:string, bodyOrOptions:any = RequestService.defaultOptions, optionsOrParser:any = RequestService.defaultOptions, parser:Parser<T> = null ):any {\n\t\treturn RequestService.send( HTTPMethod.DELETE, url, bodyOrOptions, optionsOrParser, parser );\n\t}\n\n\t/**\n\t * GET requests can be affected by previously cached resources that were originally requested with a different Accept header. This method identifies that\n\t * and retries the request with headers that force browsers to ignore cache.\n\t */\n\tprivate static __handleGETResponse( url:string, requestOptions:RequestOptions, response:Response ):Promise<Response> {\n\t\treturn Promise.resolve()\n\t\t\t.then( () => {\n\t\t\t\tif( this.__contentTypeIsAccepted( requestOptions, response ) ) return response;\n\n\t\t\t\tthis.__setNoCacheHeaders( requestOptions );\n\n\t\t\t\tif( ! this.__isChromiumAgent() ) this.__setFalseETag( requestOptions );\n\n\t\t\t\treturn __sendRequest( \"GET\", url, null, requestOptions )\n\t\t\t\t\t.then( noCachedResponse => {\n\t\t\t\t\t\tif( ! this.__contentTypeIsAccepted( requestOptions, response ) ) {\n\t\t\t\t\t\t\tthrow new BadResponseError( \"The server responded with an unacceptable Content-Type\", response );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn noCachedResponse;\n\t\t\t\t\t} );\n\t\t\t} );\n\t}\n\n\tprivate static __contentTypeIsAccepted( requestOptions:RequestOptions, response:Response ):boolean {\n\t\tconst accepts:string[] = requestOptions.headers.has( \"accept\" ) ?\n\t\t\trequestOptions.headers.get( \"accept\" ).values :\n\t\t\t[]\n\t\t;\n\n\t\tconst contentType:Header = response.headers.has( \"content-type\" ) ?\n\t\t\tresponse.headers.get( \"content-type\" ) :\n\t\t\tnull\n\t\t;\n\t\treturn ! contentType || accepts.some( contentType.hasValue, contentType );\n\t}\n\n\tprivate static __setNoCacheHeaders( requestOptions:RequestOptions ):void {\n\t\trequestOptions.headers\n\t\t\t.set( \"pragma\", new Header( \"no-cache\" ) )\n\t\t\t.set( \"cache-control\", new Header( \"no-cache, max-age=0\" ) )\n\t\t;\n\t}\n\n\tprivate static __isChromiumAgent():boolean {\n\t\treturn typeof window !== \"undefined\" && ! ! window[ \"chrome\" ];\n\t}\n\n\tprivate static __setFalseETag( requestOptions:RequestOptions ):void {\n\t\trequestOptions.headers.set( \"if-none-match\", new Header() );\n\t}\n}\n\nexport class RequestUtils {\n\n\tstatic getHeader( headerName:string, requestOptions:RequestOptions, initialize:boolean = false ):Header {\n\t\theaderName = headerName.toLowerCase();\n\n\t\tif( initialize ) {\n\t\t\tlet headers:Map<string, Header> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, Header>();\n\t\t\tif( ! headers.has( headerName ) )\n\t\t\t\theaders.set( headerName, new Header() );\n\t\t}\n\n\t\tif( ! requestOptions.headers ) return undefined;\n\t\treturn requestOptions.headers.get( headerName );\n\t}\n\n\tstatic setAcceptHeader( accept:string, requestOptions:RequestOptions ):RequestOptions {\n\t\tlet headers:Map<string, Header> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, Header>();\n\t\theaders.set( \"accept\", new Header( accept ) );\n\t\treturn requestOptions;\n\t}\n\n\tstatic setContentTypeHeader( contentType:string, requestOptions:RequestOptions ):RequestOptions {\n\t\tlet headers:Map<string, Header> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, Header>();\n\t\theaders.set( \"content-type\", new Header( contentType ) );\n\t\treturn requestOptions;\n\t}\n\n\tstatic setIfMatchHeader( eTag:string, requestOptions:RequestOptions ):RequestOptions {\n\t\tif( ! eTag ) return;\n\n\t\tlet headers:Map<string, Header> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, Header>();\n\t\theaders.set( \"if-match\", new Header( eTag ) );\n\t\treturn requestOptions;\n\t}\n\n\tstatic setIfNoneMatchHeader( eTag:string, requestOptions:RequestOptions ):RequestOptions {\n\t\tif( ! eTag ) return;\n\n\t\tlet headers:Map<string, Header> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, Header>();\n\t\theaders.set( \"if-none-match\", new Header( eTag ) );\n\t\treturn requestOptions;\n\t}\n\n\tstatic setPreferredInteractionModel( interactionModelURI:string, requestOptions:RequestOptions ):RequestOptions {\n\t\tlet prefer:Header = RequestUtils.getHeader( \"prefer\", requestOptions, true );\n\t\tprefer.values.push( interactionModelURI + \"; rel=interaction-model\" );\n\n\t\treturn requestOptions;\n\t}\n\n\tstatic setPreferredRetrieval( retrievalType:\"representation\" | \"minimal\", requestOptions:RequestOptions ):RequestOptions {\n\t\tconst prefer:Header = RequestUtils.getHeader( \"prefer\", requestOptions, true );\n\n\t\tprefer.values.push( `return=${ retrievalType }` );\n\t\treturn requestOptions;\n\t}\n\n\tstatic setRetrievalPreferences( preferences:RetrievalPreferences, requestOptions:RequestOptions ):RequestOptions {\n\t\tlet prefer:Header = RequestUtils.getHeader( \"prefer\", requestOptions, true );\n\n\t\tlet keys:string[] = [ \"include\", \"omit\" ];\n\t\tfor( let key of keys ) {\n\t\t\tif( key in preferences && preferences[ key ].length > 0 ) {\n\t\t\t\tprefer.values.push( `${ key }=\"${ preferences[ key ].join( \" \" ) }\"` );\n\t\t\t}\n\t\t}\n\n\t\treturn requestOptions;\n\t}\n\n\tstatic setSlug( slug:string, requestOptions:RequestOptions ):RequestOptions {\n\t\tlet slugHeader:Header = RequestUtils.getHeader( \"slug\", requestOptions, true );\n\t\tslugHeader.values.push( slug );\n\n\t\treturn requestOptions;\n\t}\n\n\n\tstatic isOptions( object:Object ):object is RequestOptions {\n\t\treturn hasPropertyDefined( object, \"headers\" )\n\t\t\t|| hasPropertyDefined( object, \"sendCredentialsOnCORS\" )\n\t\t\t|| hasPropertyDefined( object, \"timeout\" )\n\t\t\t|| hasPropertyDefined( object, \"request\" );\n\t}\n\n\tstatic cloneOptions( options:RequestOptions ):RequestOptions {\n\t\tconst clone:RequestOptions = {\n\t\t\t...options,\n\t\t\theaders: new Map(),\n\t\t};\n\n\t\tif( options.headers ) options.headers\n\t\t\t.forEach( ( value, key ) => clone.headers.set( key, new Header( value.values.slice() ) ) );\n\n\t\treturn clone;\n\t}\n\n}\n"]}