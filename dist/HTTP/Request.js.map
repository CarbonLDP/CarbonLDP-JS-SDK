{"version":3,"sources":["HTTP/Request.ts"],"names":[],"mappings":"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","file":"HTTP/Request.js","sourcesContent":["import * as Errors from \"./Errors\";\nimport * as Header from \"./Header\";\nimport Method from \"./Method\";\nimport Parser from \"./Parser\";\nimport Response from \"./Response\";\n\nimport * as Utils from \"./../Utils\";\n\nexport interface Options {\n\theaders?: Map<string, Header.Class>;\n\tsendCredentialsOnCORS?:boolean;\n\ttimeout?:number;\n\trequest?:XMLHttpRequest;\n}\n\nexport interface ContainerRetrievalPreferences {\n\tinclude?:string[];\n\tomit?:string[];\n}\n\nfunction setHeaders( request:XMLHttpRequest, headers:Map<string, Header.Class> ):void {\n\tlet namesIterator:Iterator<string> = headers.keys();\n\tlet next:IteratorResult<string> = namesIterator.next();\n\twhile ( ! next.done ) {\n\t\tlet name:string = next.value;\n\t\tlet value:Header.Class = headers.get( name );\n\t\trequest.setRequestHeader( name, value.toString() );\n\n\t\tnext = namesIterator.next();\n\t}\n}\n\nfunction onLoad( resolve:( result:any ) => void, reject:( value:Response ) => void, request:XMLHttpRequest ):() => void {\n\treturn () => {\n\t\tlet response:Response = new Response( request );\n\t\tif ( request.status >= 200 && request.status <= 299 ) {\n\n\n\t\t\tresolve( response );\n\t\t} else {\n\t\t\trejectRequest( reject, request );\n\t\t}\n\t};\n}\n\nfunction onError( reject:( error:any ) => void, request:XMLHttpRequest ):() => void {\n\treturn () => {\n\t\trejectRequest( reject, request );\n\t};\n}\n\nfunction rejectRequest( reject:( error:any ) => void, request:XMLHttpRequest ):void {\n\tlet response:Response = new Response( request );\n\n\tif ( response.status >= 400 && response.status < 600 ) {\n\t\tif ( Errors.statusCodeMap.has( response.status ) ) {\n\t\t\tlet error:typeof Errors.Error = Errors.statusCodeMap.get( response.status );\n\t\t\t// TODO: Set error message\n\t\t\treject( new error( \"\", response ) );\n\t\t}\n\t}\n\n\treject( new Errors.UnknownError( \"\", response ) );\n}\n\nexport class Service {\n\n\tprivate static defaultOptions:Options = {\n\t\tsendCredentialsOnCORS: true,\n\t};\n\n\tstatic send( method:(Method | string), url:string, options?:Options ):Promise<Response>;\n\tstatic send( method:(Method | string), url:string, body:string, options?:Options ):Promise<Response>;\n\tstatic send( method:(Method | string), url:string, body:string, options?:Options ):Promise<Response>;\n\tstatic send<T>( method:(Method | string), url:string, options?:Options, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic send<T>( method:(Method | string), url:string, body:string, options?:Options, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic send<T>( method:any, url:string, bodyOrOptions:any = Service.defaultOptions, optionsOrParser:any = Service.defaultOptions, parser:Parser<T> = null ):any {\n\t\tlet body:string = bodyOrOptions && Utils.isString( bodyOrOptions ) ? bodyOrOptions : null;\n\t\tlet options:Options = Utils.hasProperty( optionsOrParser, \"parse\" ) ? bodyOrOptions : optionsOrParser;\n\t\tparser = Utils.hasProperty( optionsOrParser, \"parse\" ) ? optionsOrParser : parser;\n\n\t\toptions = ! bodyOrOptions || Utils.isString( bodyOrOptions ) ? options : bodyOrOptions;\n\t\toptions = options ? options : {};\n\t\toptions = Utils.extend( options, Service.defaultOptions );\n\n\t\tif ( Utils.isNumber( method ) ) method = Method[ method ];\n\n\t\tlet requestPromise:Promise<Response> = new Promise<Response>( ( resolve:( result:Response ) => void, reject:( error:any ) => void ):void => {\n\t\t\tlet request:XMLHttpRequest = options.request ? options.request : new XMLHttpRequest();\n\t\t\trequest.open( method, url, true );\n\n\t\t\tif ( options.headers ) setHeaders( request, options.headers );\n\t\t\trequest.withCredentials = options.sendCredentialsOnCORS;\n\t\t\tif ( options.timeout ) request.timeout = options.timeout;\n\n\t\t\trequest.onload = onLoad( resolve, reject, request );\n\t\t\trequest.onerror = onError( reject, request );\n\n\t\t\tif ( body ) {\n\t\t\t\trequest.send( body );\n\t\t\t} else {\n\t\t\t\trequest.send();\n\t\t\t}\n\t\t});\n\n\t\tif( parser === null ) return requestPromise;\n\n\t\treturn requestPromise.then( ( response:Response ) => {\n\t\t\treturn parser.parse( response.data ).then( ( parsedBody:T ) => {\n\t\t\t\treturn [ parsedBody, response ];\n\t\t\t});\n\t\t});\n\t}\n\n\tstatic options( url:string, options:Options = Service.defaultOptions ):Promise<Response> {\n\t\treturn Service.send( Method.OPTIONS, url, options );\n\t}\n\n\tstatic head( url:string, options:Options = Service.defaultOptions ):Promise<Response> {\n\t\treturn Service.send( Method.HEAD, url, options );\n\t}\n\n\tstatic get( url:string, options?:Options ):Promise<Response>;\n\tstatic get<T>( url:string, options?:Options, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic get<T>( url:string, options:Options = Service.defaultOptions, parser:Parser<T> = null ):any {\n\t\treturn Service.send( Method.GET, url, null, options, parser );\n\t}\n\n\tstatic post( url:string, body:string, options?:Options ):Promise<Response>;\n\tstatic post<T>( url:string, body:string, options?:Options, parser?:Parser<T> ):Promise<[ T, Response ] >;\n\tstatic post<T>( url:string, bodyOrOptions:any = Service.defaultOptions, options:Options = Service.defaultOptions, parser:Parser<T> = null ):any {\n\t\treturn Service.send( Method.POST, url, bodyOrOptions, options, parser );\n\t}\n\n\tstatic put( url:string, body:string, options?:Options ):Promise<Response>;\n\tstatic put<T>( url:string, body:string, options?:Options, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic put<T>( url:string, bodyOrOptions:any = Service.defaultOptions, options:Options = Service.defaultOptions, parser:Parser<T> = null ):any {\n\t\treturn Service.send( Method.PUT, url, bodyOrOptions, options, parser );\n\t}\n\n\tstatic patch( url:string, body:string, options?:Options ):Promise<Response>;\n\tstatic patch<T>( url:string, body:string, options?:Options, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic patch<T>( url:string, bodyOrOptions:any = Service.defaultOptions, options:Options = Service.defaultOptions, parser:Parser<T> = null ):any {\n\t\treturn Service.send( Method.PATCH, url, bodyOrOptions, options, parser );\n\t}\n\n\tstatic delete( url:string, options?:Options ):Promise<Response>;\n\tstatic delete( url:string, body:string, options?:Options ):Promise<Response>;\n\tstatic delete<T>( url:string, options?:Options, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic delete<T>( url:string, body:string, options?:Options, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic delete<T>( url:string, bodyOrOptions:any = Service.defaultOptions, optionsOrParser:any = Service.defaultOptions, parser:Parser<T> = null ):any {\n\t\treturn Service.send( Method.DELETE, url, bodyOrOptions, optionsOrParser, parser );\n\t}\n}\n\nexport class Util {\n\tstatic getHeader( headerName:string, requestOptions:Options, initialize:boolean = false ):Header.Class {\n\t\theaderName = headerName.toLowerCase();\n\n\t\tif( initialize ) {\n\t\t\tlet headers:Map<string, Header.Class> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, Header.Class>();\n\t\t\theaders.set( headerName, new Header.Class() );\n\t\t}\n\n\t\tif( ! requestOptions.headers  ) return undefined;\n\t\treturn requestOptions.headers.get( headerName );\n\t}\n\n\tstatic setAcceptHeader( accept:string, requestOptions:Options ):Options {\n\t\tlet headers:Map<string, Header.Class> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, Header.Class>();\n\t\theaders.set( \"accept\", new Header.Class( accept ) );\n\t\treturn requestOptions;\n\t}\n\n\tstatic setContentTypeHeader( contentType:string, requestOptions:Options ):Options {\n\t\tlet headers:Map<string, Header.Class> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, Header.Class>();\n\t\theaders.set( \"content-type\", new Header.Class( contentType ) );\n\t\treturn requestOptions;\n\t}\n\n\tstatic setIfMatchHeader( etag:string, requestOptions:Options ):Options {\n\t\tlet headers:Map<string, Header.Class> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, Header.Class>();\n\t\theaders.set( \"if-match\", new Header.Class( etag ) );\n\t\treturn requestOptions;\n\t}\n\n\tstatic setPreferredInteractionModel( interactionModelURI:string, requestOptions:Options ):Options {\n\t\tlet prefer:Header.Class = Util.getHeader( \"prefer\", requestOptions, true );\n\t\tprefer.values.push( new Header.Value( interactionModelURI + \"; rel=interaction-model\" ) );\n\n\t\treturn requestOptions;\n\t}\n\n\tstatic setContainerRetrievalPreferences( preferences:ContainerRetrievalPreferences, requestOptions:Options ):Options {\n\t\tlet prefer:Header.Class = Util.getHeader( \"prefer\", requestOptions, true );\n\n\t\tlet headerPieces:string[] = [ \"return=representation;\" ];\n\t\tif( \"include\" in preferences && preferences.include.length > 0 ) headerPieces.push( 'include=\"' + preferences.include.join( \" \" ) + '\"' );\n\t\tif( \"omit\" in preferences && preferences.omit.length > 0 ) headerPieces.push( 'omit=\"' + preferences.omit.join( \" \" ) + '\"' );\n\n\t\tif( headerPieces.length === 1 ) return requestOptions;\n\n\t\tprefer.values.push( new Header.Value( headerPieces.join( \" \" ) ) );\n\n\t\treturn requestOptions;\n\t}\n\n\tstatic setSlug( slug:string, requestOptions:Options ):Options {\n\t\tlet slugHeader:Header.Class = Util.getHeader( \"slug\", requestOptions, true );\n\t\tslugHeader.values.push( new Header.Value( slug ) );\n\n\t\treturn requestOptions;\n\t}\n}\n"],"sourceRoot":"/source/"}