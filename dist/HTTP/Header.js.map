{"version":3,"sources":["HTTP/Header.ts"],"names":[],"mappings":"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","file":"HTTP/Header.js","sourcesContent":["import * as Utils from \"./../Utils\";\n\nexport class Class {\n\tvalues:Value[] = [];\n\n\tconstructor();\n\tconstructor( values:Value[] );\n\tconstructor( value:string );\n\tconstructor( valueOrValues?:(string | Value[]) ) {\n\t\tif( ! valueOrValues ) {\n\t\t\treturn;\n\t\t} else if( Array.isArray( valueOrValues ) ) {\n\t\t\tthis.values = <Value[]> valueOrValues;\n\t\t} else {\n\t\t\tthis.setValues( <string> valueOrValues );\n\t\t}\n\t}\n\n\ttoString():string {\n\t\treturn this.values.join( \", \" );\n\t}\n\n\tprivate setValues( valuesString:string ):void {\n\t\tthis.values = [];\n\n\t\tlet valueStrings:string[] = valuesString.split( \",\" );\n\t\tfor( let i:number = 0, length:number = valueStrings.length; i < length; i ++ ) {\n\t\t\tlet valueString:string = valueStrings[ i ].trim();\n\t\t\tthis.values.push( new Value( valueString ) );\n\t\t}\n\t}\n}\n\nexport class Value {\n\tprivate value:string;\n\n\tconstructor( value:string ) {\n\t\tthis.value = value;\n\t}\n\n\ttoString():string {\n\t\treturn this.value;\n\t}\n}\n\nexport class Util {\n\tstatic parseHeaders( headersString:string ):Map<string, Class> {\n\t\tlet headers:Map<string, Class> = new Map<string, Class>();\n\n\t\tlet headerStrings:string[] = headersString.split( /\\r?\\n/ );\n\t\tfor( let i:number = 0, length:number = headerStrings.length; i < length; i ++ ) {\n\t\t\tlet headerString:string = headerStrings[ i ];\n\t\t\tif( ! headerString.trim() ) continue;\n\n\t\t\tlet parts:string[] = headerString.split( \":\" );\n\t\t\tif( parts.length < 2 ) throw new Error( \"ParseError: The header couldn't be parsed.\" );\n\t\t\tif( parts.length > 2 ) parts[ 1 ] = parts.slice( 1 ).join( \":\" );\n\n\t\t\tlet name:string = parts[ 0 ].trim().toLowerCase();\n\t\t\tlet header:Class = new Class( parts[ 1 ].trim() );\n\t\t\tif( headers.has( name ) ) {\n\t\t\t\tlet existingHeader:Class = headers.get( name );\n\t\t\t\texistingHeader.values.concat( header.values );\n\t\t\t} else headers.set( name, header );\n\t\t}\n\n\t\treturn headers;\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}