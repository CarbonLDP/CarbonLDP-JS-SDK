import { DigestedObjectSchema } from "../ObjectSchema/DigestedObjectSchema";
import { PointerLibrary } from "../Pointer/PointerLibrary";
import { Serializer } from "../RDF/Literal/Serializer";
import { RDFNode } from "../RDF/Node";
export declare class JSONLDConverter {
    private readonly _literalSerializers;
    readonly literalSerializers: Map<string, Serializer>;
    private static getDefaultSerializers();
    constructor(literalSerializers?: Map<string, Serializer>);
    compact(expandedObjects: Object[], targetObjects: Object[], digestedSchema: DigestedObjectSchema, pointerLibrary: PointerLibrary): Object[];
    compact(expandedObject: Object, targetObject: Object, digestedSchema: DigestedObjectSchema, pointerLibrary: PointerLibrary, strict?: boolean): Object;
    compact(expandedObjects: Object[], digestedSchema: DigestedObjectSchema, pointerLibrary: PointerLibrary): Object[];
    compact(expandedObject: Object, digestedSchema: DigestedObjectSchema, pointerLibrary: PointerLibrary): Object;
    expand(compactedObjects: Object[], generalSchema: DigestedObjectSchema, digestedSchema: DigestedObjectSchema): RDFNode[];
    expand(compactedObject: Object, generalSchema: DigestedObjectSchema, digestedSchema: DigestedObjectSchema): RDFNode;
    private __expandSingle(compactedObject, generalSchema, digestedSchema);
    private __expandProperty(propertyName, propertyValue, digestedSchema, generalSchema);
    private __expandPropertyValue(propertyValue, digestedSchema, generalSchema);
    private __expandPropertyPointer(propertyValue, digestedSchema, generalSchema);
    private __expandPropertyLiteral(propertyValue, definition, digestedSchema);
    private __expandPropertyLanguageMap(propertyValue);
    private __expandPointerValue(propertyValue, digestedSchema, generalSchema);
    private __expandValue(propertyValue, digestedSchema, generalSchema);
    private __expandLiteralValue(literalValue, literalType);
    private __compactSingle(expandedObject, targetObject, digestedSchema, pointerLibrary, strict?);
    private __getPropertyContainerType(propertyValues);
    private __getPropertyValue(propertyName, propertyValues, digestedSchema, pointerLibrary);
    private __getPropertyURINameMap(digestedSchema);
    private __compactPropertyLiteral(propertyValues, definition, digestedSchema);
    private __getProperties(propertyValues, pointerLibrary);
    private __getPropertyPointers(propertyValues, pointerLibrary);
}
