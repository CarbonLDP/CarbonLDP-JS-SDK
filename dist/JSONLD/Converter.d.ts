import * as ObjectSchema from "./../ObjectSchema";
import * as Pointer from "./../Pointer";
import * as RDF from "./../RDF";
export declare class Class {
    private _literalSerializers;
    literalSerializers: Map<string, RDF.Literal.Serializer>;
    private static getDefaultSerializers();
    private static getPropertyURI(propertyName, definition, vocab);
    constructor(literalSerializers?: Map<string, RDF.Literal.Serializer>);
    compact(expandedObjects: Object[], targetObjects: Object[], digestedSchema: ObjectSchema.DigestedObjectSchema, pointerLibrary: Pointer.Library): Object[];
    compact(expandedObject: Object, targetObject: Object, digestedSchema: ObjectSchema.DigestedObjectSchema, pointerLibrary: Pointer.Library): Object;
    compact(expandedObjects: Object[], digestedSchema: ObjectSchema.DigestedObjectSchema, pointerLibrary: Pointer.Library): Object[];
    compact(expandedObject: Object, digestedSchema: ObjectSchema.DigestedObjectSchema, pointerLibrary: Pointer.Library): Object;
    expand(compactedObjects: Object[], generalSchema: ObjectSchema.DigestedObjectSchema, digestedSchema: ObjectSchema.DigestedObjectSchema): RDF.Node.Class[];
    expand(compactedObject: Object, generalSchema: ObjectSchema.DigestedObjectSchema, digestedSchema: ObjectSchema.DigestedObjectSchema): RDF.Node.Class;
    private expandSingle(compactedObject, generalSchema, digestedSchema);
    private expandProperty(propertyValue, propertyDefinition, generalSchema, digestedSchema);
    private expandPropertyValue(propertyValue, generalSchema, digestedSchema);
    private expandPropertyPointer(propertyValue, generalSchema, digestedSchema);
    private expandPropertyLiteral(propertyValue, literalType);
    private expandPropertyList(propertyValues, generalSchema, digestedSchema);
    private expandPropertyPointerList(propertyValues, generalSchema, digestedSchema);
    private expandPropertyLiteralList(propertyValues, literalType);
    private expandPropertyValues(propertyValues, generalSchema, digestedSchema);
    private expandPropertyPointers(propertyValues, generalSchema, digestedSchema);
    private expandPropertyLiterals(propertyValues, literalType);
    private expandPropertyLanguageMap(propertyValue);
    private serializeLiteral(propertyValue, literalType);
    private expandPointer(propertyValue, generalSchema, digestedSchema);
    private expandArray(propertyValue, generalSchema, digestedSchema);
    private expandValue(propertyValue, generalSchema, digestedSchema);
    private expandLiteral(literalValue);
    private compactSingle(expandedObject, targetObject, digestedSchema, pointerLibrary);
    private getPropertyContainerType(propertyValues);
    private getPropertyValue(expandedObject, propertyURI, propertyDefinition, pointerLibrary);
    private getPropertyURINameMap(digestedSchema);
}
export default Class;
