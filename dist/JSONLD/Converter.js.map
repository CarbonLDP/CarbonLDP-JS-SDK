{"version":3,"sources":["JSONLD/Converter.ts"],"names":[],"mappings":"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","file":"Converter.js","sourcesContent":["import * as Errors from \"./../Errors\";\nimport * as ObjectSchema from \"./../ObjectSchema\";\nimport * as NS from \"./../NS\";\nimport * as Pointer from \"./../Pointer\";\nimport * as RDF from \"./../RDF\";\nimport * as Utils from \"./../Utils\";\n\n// TODO: Use Literal.Parsers to parse literals\nexport class Class {\n\tprivate _literalSerializers:Map<string, RDF.Literal.Serializer>;\n\n\tget literalSerializers():Map<string, RDF.Literal.Serializer> { return this._literalSerializers; }\n\n\tprivate static getDefaultSerializers():Map<string, RDF.Literal.Serializer> {\n\t\tlet literalSerializers:Map<string, RDF.Literal.Serializer> = new Map<string, RDF.Literal.Serializer>();\n\n\t\tliteralSerializers.set( NS.XSD.DataType.date, RDF.Literal.Serializers.XSD.dateSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.dateTime, RDF.Literal.Serializers.XSD.dateTimeSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.time, RDF.Literal.Serializers.XSD.timeSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.integer, RDF.Literal.Serializers.XSD.integerSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.int, RDF.Literal.Serializers.XSD.integerSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.unsignedInt, RDF.Literal.Serializers.XSD.unsignedIntegerSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.long, RDF.Literal.Serializers.XSD.integerSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.unsignedLong, RDF.Literal.Serializers.XSD.unsignedIntegerSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.float, RDF.Literal.Serializers.XSD.floatSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.double, RDF.Literal.Serializers.XSD.floatSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.boolean, RDF.Literal.Serializers.XSD.booleanSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.string, RDF.Literal.Serializers.XSD.stringSerializer );\n\n\t\treturn literalSerializers;\n\t}\n\n\tprivate static getPropertyURI( propertyName:string, definition:ObjectSchema.DigestedPropertyDefinition, vocab:string ):string {\n\t\tlet uri:string;\n\t\tlet relativeName:string = null;\n\n\t\tif( definition.uri !== null ) {\n\t\t\turi = definition.uri.toString();\n\t\t\tif( RDF.URI.Util.isRelative( uri ) ) relativeName = uri;\n\t\t} else {\n\t\t\trelativeName = propertyName;\n\t\t}\n\n\t\tif( relativeName !== null ) {\n\t\t\tif( vocab !== null ) {\n\t\t\t\turi = vocab + relativeName;\n\t\t\t} else {\n\t\t\t\tthrow new Errors.InvalidJSONLDSyntaxError( `The context doesn't have a default vocabulary and the object schema does not define a proper absolute @id for the property '${ propertyName }'` );\n\t\t\t}\n\t\t}\n\n\t\treturn uri;\n\t}\n\n\tconstructor( literalSerializers?:Map<string, RDF.Literal.Serializer> ) {\n\t\tthis._literalSerializers = ! ! literalSerializers ? literalSerializers : Class.getDefaultSerializers();\n\t}\n\n\tcompact( expandedObjects:Object[], targetObjects:Object[], digestedSchema:ObjectSchema.DigestedObjectSchema, pointerLibrary:Pointer.Library ):Object[];\n\tcompact( expandedObject:Object, targetObject:Object, digestedSchema:ObjectSchema.DigestedObjectSchema, pointerLibrary:Pointer.Library ):Object;\n\tcompact( expandedObjects:Object[], digestedSchema:ObjectSchema.DigestedObjectSchema, pointerLibrary:Pointer.Library ):Object[];\n\tcompact( expandedObject:Object, digestedSchema:ObjectSchema.DigestedObjectSchema, pointerLibrary:Pointer.Library ):Object;\n\tcompact( expandedObjectOrObjects:any, targetObjectOrObjectsOrDigestedContext:any, digestedSchemaOrPointerLibrary:any, pointerLibrary:Pointer.Library = null ):any {\n\t\tlet targetObjectOrObjects:any = ! pointerLibrary ? null : targetObjectOrObjectsOrDigestedContext;\n\t\tlet digestedSchema:any = ! pointerLibrary ? targetObjectOrObjectsOrDigestedContext : digestedSchemaOrPointerLibrary;\n\t\tpointerLibrary = ! pointerLibrary ? digestedSchemaOrPointerLibrary : pointerLibrary;\n\n\t\tif( ! Utils.isArray( expandedObjectOrObjects ) ) return this.compactSingle( expandedObjectOrObjects, targetObjectOrObjects, digestedSchema, pointerLibrary );\n\n\t\tlet expandedObjects:Object[] = expandedObjectOrObjects;\n\t\tlet targetObjects:Object[] = ! ! targetObjectOrObjects ? targetObjectOrObjects : [];\n\t\tfor( let i:number = 0, length:number = expandedObjects.length; i < length; i ++ ) {\n\t\t\tlet expandedObject:Object = expandedObjects[ i ];\n\t\t\tlet targetObject:Object = targetObjects[ i ] = ! ! targetObjects[ i ] ? targetObjects[ i ] : {};\n\n\t\t\tthis.compactSingle( expandedObject, targetObject, digestedSchema, pointerLibrary );\n\t\t}\n\n\t\treturn targetObjects;\n\t}\n\n\texpand( compactedObjects:Object[], generalSchema:ObjectSchema.DigestedObjectSchema, digestedSchema:ObjectSchema.DigestedObjectSchema ):RDF.Node.Class[];\n\texpand( compactedObject:Object, generalSchema:ObjectSchema.DigestedObjectSchema, digestedSchema:ObjectSchema.DigestedObjectSchema ):RDF.Node.Class;\n\texpand( compactedObjectOrObjects:Object[], generalSchema:ObjectSchema.DigestedObjectSchema, digestedSchema:ObjectSchema.DigestedObjectSchema ):any {\n\t\tif( ! Utils.isArray( compactedObjectOrObjects ) ) return this.expandSingle( compactedObjectOrObjects, generalSchema, digestedSchema );\n\t}\n\n\tprivate expandSingle( compactedObject:Object, generalSchema:ObjectSchema.DigestedObjectSchema, digestedSchema:ObjectSchema.DigestedObjectSchema ):RDF.Node.Class {\n\t\tlet expandedObject:any = {};\n\n\t\texpandedObject[ \"@id\" ] = ! ! compactedObject[ \"id\" ] ? compactedObject[ \"id\" ] : \"\";\n\t\tif( ! ! compactedObject[ \"types\" ] ) expandedObject[ \"@type\" ] = compactedObject[ \"types\" ].map( ( type:string ) => ObjectSchema.Util.resolveURI( type, generalSchema ) );\n\n\t\tUtils.forEachOwnProperty( compactedObject, ( propertyName:string, value:any ):void => {\n\t\t\tif( propertyName === \"id\" ) return;\n\t\t\tif( propertyName === \"types\" ) return;\n\n\t\t\tlet expandedValue:any;\n\t\t\tlet expandedPropertyName:string = null;\n\t\t\tif( digestedSchema.properties.has( propertyName ) ) {\n\t\t\t\tlet definition:ObjectSchema.DigestedPropertyDefinition = Utils.O.clone( digestedSchema.properties.get( propertyName ), { objects: true } );\n\t\t\t\texpandedPropertyName = Class.getPropertyURI( propertyName, definition, digestedSchema.vocab );\n\t\t\t\texpandedValue = this.expandProperty( value, definition, generalSchema, digestedSchema );\n\n\t\t\t} else if( RDF.URI.Util.isAbsolute( propertyName ) || digestedSchema.vocab !== null ) {\n\t\t\t\texpandedValue = this.expandPropertyValue( value, generalSchema, digestedSchema );\n\t\t\t\texpandedPropertyName = ObjectSchema.Util.resolveURI( propertyName, generalSchema );\n\t\t\t}\n\n\t\t\tif( ! expandedValue || ! expandedPropertyName ) return;\n\t\t\texpandedObject[ expandedPropertyName ] = expandedValue;\n\t\t} );\n\n\t\treturn expandedObject;\n\t}\n\n\tprivate expandProperty( propertyValue:any, propertyDefinition:ObjectSchema.DigestedPropertyDefinition, generalSchema:ObjectSchema.DigestedObjectSchema, digestedSchema:ObjectSchema.DigestedObjectSchema ):any {\n\t\tswitch( propertyDefinition.containerType ) {\n\t\t\tcase null:\n\t\t\t\t// Property is not a list\n\t\t\t\tif( propertyDefinition.literal ) {\n\t\t\t\t\treturn this.expandPropertyLiteral( propertyValue, propertyDefinition.literalType.toString() );\n\t\t\t\t} else if( propertyDefinition.literal === false ) {\n\t\t\t\t\treturn this.expandPropertyPointer( propertyValue, generalSchema, digestedSchema );\n\t\t\t\t} else {\n\t\t\t\t\treturn this.expandPropertyValue( propertyValue, generalSchema, digestedSchema );\n\t\t\t\t}\n\t\t\tcase ObjectSchema.ContainerType.LIST:\n\t\t\t\tif( propertyDefinition.literal ) {\n\t\t\t\t\treturn this.expandPropertyLiteralList( propertyValue, propertyDefinition.literalType.toString() );\n\t\t\t\t} else if( propertyDefinition.literal === false ) {\n\t\t\t\t\treturn this.expandPropertyPointerList( propertyValue, generalSchema, digestedSchema );\n\t\t\t\t} else {\n\t\t\t\t\treturn this.expandPropertyList( propertyValue, generalSchema, digestedSchema );\n\t\t\t\t}\n\t\t\tcase ObjectSchema.ContainerType.SET:\n\t\t\t\tif( propertyDefinition.literal ) {\n\t\t\t\t\treturn this.expandPropertyLiterals( propertyValue, propertyDefinition.literalType.toString() );\n\t\t\t\t} else if( propertyDefinition.literal === false ) {\n\t\t\t\t\treturn this.expandPropertyPointers( propertyValue, generalSchema, digestedSchema );\n\t\t\t\t} else {\n\t\t\t\t\treturn this.expandPropertyValues( propertyValue, generalSchema, digestedSchema );\n\t\t\t\t}\n\t\t\tcase ObjectSchema.ContainerType.LANGUAGE:\n\t\t\t\treturn this.expandPropertyLanguageMap( propertyValue );\n\t\t\tdefault:\n\t\t\t\tthrow new Errors.IllegalArgumentError( \"The containerType specified is not supported.\" );\n\t\t}\n\t}\n\n\tprivate expandPropertyValue( propertyValue:any, generalSchema:ObjectSchema.DigestedObjectSchema, digestedSchema:ObjectSchema.DigestedObjectSchema ):any {\n\t\tif( Utils.isArray( propertyValue ) ) {\n\t\t\treturn this.expandPropertyValues( propertyValue, generalSchema, digestedSchema );\n\t\t} else {\n\t\t\tlet expandedValue:RDF.Node.Class = this.expandValue( propertyValue, generalSchema, digestedSchema );\n\n\t\t\tif( ! expandedValue ) return null;\n\n\t\t\treturn [ expandedValue ];\n\t\t}\n\t}\n\n\tprivate expandPropertyPointer( propertyValue:any, generalSchema:ObjectSchema.DigestedObjectSchema, digestedSchema:ObjectSchema.DigestedObjectSchema ):any {\n\t\tlet expandedPointer:RDF.Node.Class = this.expandPointer( propertyValue, generalSchema, digestedSchema );\n\n\t\tif( ! expandedPointer ) return null;\n\n\t\treturn [ expandedPointer ];\n\t}\n\n\tprivate expandPropertyLiteral( propertyValue:any, literalType:string ):any {\n\t\t// TODO: Language\n\t\tlet serializedValue:string = this.serializeLiteral( propertyValue, literalType );\n\n\t\tif( serializedValue === null ) return null;\n\n\t\treturn [\n\t\t\t{ \"@value\": serializedValue, \"@type\": literalType },\n\t\t];\n\t}\n\n\tprivate expandPropertyList( propertyValues:any, generalSchema:ObjectSchema.DigestedObjectSchema, digestedSchema:ObjectSchema.DigestedObjectSchema ):any {\n\t\tpropertyValues = Utils.isArray( propertyValues ) ? propertyValues : [ propertyValues ];\n\n\t\tlet expandedArray:any = this.expandArray( propertyValues, generalSchema, digestedSchema );\n\n\t\tif( ! expandedArray ) return null;\n\n\t\treturn [\n\t\t\t{ \"@list\": expandedArray },\n\t\t];\n\t}\n\n\tprivate expandPropertyPointerList( propertyValues:any, generalSchema:ObjectSchema.DigestedObjectSchema, digestedSchema:ObjectSchema.DigestedObjectSchema ):any {\n\t\tlet listValues:Array<any> = this.expandPropertyPointers( propertyValues, generalSchema, digestedSchema );\n\n\t\treturn [\n\t\t\t{ \"@list\": listValues },\n\t\t];\n\t}\n\n\tprivate expandPropertyLiteralList( propertyValues:any, literalType:string ):any {\n\t\tlet listValues:Array<any> = this.expandPropertyLiterals( propertyValues, literalType );\n\n\t\treturn [\n\t\t\t{ \"@list\": listValues },\n\t\t];\n\t}\n\n\tprivate expandPropertyValues( propertyValues:any, generalSchema:ObjectSchema.DigestedObjectSchema, digestedSchema:ObjectSchema.DigestedObjectSchema ):any {\n\t\tpropertyValues = Utils.isArray( propertyValues ) ? propertyValues : [ propertyValues ];\n\n\t\tlet expandedArray:any = this.expandArray( propertyValues, generalSchema, digestedSchema );\n\n\t\tif( ! expandedArray ) return null;\n\n\t\treturn expandedArray;\n\t}\n\n\tprivate expandPropertyPointers( propertyValues:any, generalSchema:ObjectSchema.DigestedObjectSchema, digestedSchema:ObjectSchema.DigestedObjectSchema ):any {\n\t\tpropertyValues = Utils.isArray( propertyValues ) ? propertyValues : [ propertyValues ];\n\n\t\tlet expandedPointers:Array<any> = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tlet expandedPointer:RDF.Node.Class = this.expandPointer( propertyValue, generalSchema, digestedSchema );\n\t\t\tif( ! expandedPointer ) continue;\n\n\t\t\texpandedPointers.push( expandedPointer );\n\t\t}\n\n\t\treturn expandedPointers;\n\t}\n\n\tprivate expandPropertyLiterals( propertyValues:any, literalType:string ):any {\n\t\tpropertyValues = Utils.isArray( propertyValues ) ? propertyValues : [ propertyValues ];\n\n\t\tlet listValues:Array<any> = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tlet serializedValue:string = this.serializeLiteral( propertyValue, literalType );\n\t\t\tif( ! serializedValue ) continue;\n\n\t\t\tlistValues.push( { \"@value\": serializedValue, \"@type\": literalType } );\n\t\t}\n\n\t\treturn listValues;\n\t}\n\n\tprivate expandPropertyLanguageMap( propertyValue:any ):any {\n\t\tif( ! Utils.isObject( propertyValue ) ) {\n\t\t\t// TODO: Warn of data loss\n\t\t\treturn null;\n\t\t}\n\n\t\tlet mapValues:Array<any> = [];\n\t\tUtils.forEachOwnProperty( propertyValue, ( languageTag:string, value:any ):void => {\n\t\t\t// TODO: Validate language tags\n\n\t\t\tlet serializedValue:string = this.literalSerializers.get( NS.XSD.DataType.string ).serialize( value );\n\t\t\tmapValues.push( { \"@value\": serializedValue, \"@type\": NS.XSD.DataType.string, \"@language\": languageTag } );\n\t\t} );\n\n\t\treturn mapValues;\n\t}\n\n\tprivate serializeLiteral( propertyValue:any, literalType:string ):string {\n\t\tif( Pointer.Factory.is( propertyValue ) ) {\n\t\t\t// TODO: Warn of data loss\n\t\t\treturn null;\n\t\t}\n\n\t\tif( ! this.literalSerializers.has( literalType ) ) {\n\t\t\t// TODO: Warn of data loss\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\treturn this.literalSerializers.get( literalType ).serialize( propertyValue );\n\t\t} catch( error ) {\n\t\t\t// TODO: Warn of data loss\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate expandPointer( propertyValue:any, generalSchema:ObjectSchema.DigestedObjectSchema, digestedSchema:ObjectSchema.DigestedObjectSchema ):RDF.Node.Class {\n\t\tlet notPointer:boolean = true;\n\t\tlet id:string;\n\t\tif( Pointer.Factory.is( propertyValue ) ) {\n\t\t\tnotPointer = false;\n\t\t\tpropertyValue = propertyValue.id;\n\t\t} else if( ! Utils.isString( propertyValue ) ) {\n\t\t\tpropertyValue = null;\n\t\t}\n\n\t\tid = propertyValue;\n\t\tif( ! id ) {\n\t\t\t// TODO: Warn of data loss\n\t\t\treturn null;\n\t\t}\n\n\t\tid = ObjectSchema.Digester.resolvePrefixedURI( id, generalSchema );\n\n\t\tif( generalSchema.properties.has( id ) ) {\n\t\t\tlet definition:ObjectSchema.DigestedPropertyDefinition = generalSchema.properties.get( id );\n\t\t\tif( definition.uri ) id = definition.uri.stringValue;\n\t\t}\n\n\t\tif( notPointer && ! ! digestedSchema.vocab ) id = ObjectSchema.Util.resolveURI( id, generalSchema );\n\n\t\treturn { \"@id\": id };\n\t}\n\n\tprivate expandArray( propertyValue:any, generalSchema:ObjectSchema.DigestedObjectSchema, digestedSchema:ObjectSchema.DigestedObjectSchema ):any {\n\t\tlet listValues:Array<any> = [];\n\t\tfor( let listValue of propertyValue ) {\n\t\t\tlet expandedValue:any = this.expandValue( listValue, generalSchema, digestedSchema );\n\t\t\tif( ! expandedValue ) continue;\n\n\t\t\tlistValues.push( expandedValue );\n\t\t}\n\n\t\tif( ! listValues.length ) return null;\n\n\t\treturn listValues;\n\t}\n\n\tprivate expandValue( propertyValue:any, generalSchema:ObjectSchema.DigestedObjectSchema, digestedSchema:ObjectSchema.DigestedObjectSchema ):any {\n\t\tif( Utils.isArray( propertyValue ) ) {\n\t\t\t// TODO: Lists of lists are not currently supported by the spec\n\t\t\treturn null;\n\t\t} else if( Pointer.Factory.is( propertyValue ) ) {\n\t\t\treturn this.expandPointer( propertyValue, generalSchema, digestedSchema );\n\t\t} else {\n\t\t\treturn this.expandLiteral( propertyValue );\n\t\t}\n\t}\n\n\tprivate expandLiteral( literalValue:any ):any {\n\t\tlet serializedValue:string;\n\t\tlet literalType:string;\n\t\tswitch( true ) {\n\t\t\tcase Utils.isFunction( literalValue ):\n\t\t\t\treturn null;\n\t\t\tcase Utils.isDate( literalValue ):\n\t\t\t\tliteralType = NS.XSD.DataType.dateTime;\n\t\t\t\tbreak;\n\t\t\tcase Utils.isNumber( literalValue ):\n\t\t\t\tliteralType = NS.XSD.DataType.float;\n\t\t\t\tbreak;\n\t\t\tcase Utils.isBoolean( literalValue ):\n\t\t\t\tliteralType = NS.XSD.DataType.boolean;\n\t\t\t\tbreak;\n\t\t\tcase Utils.isString( literalValue ):\n\t\t\t\tliteralType = NS.XSD.DataType.string;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// TODO: Warn of data loss\n\t\t\t\treturn null;\n\t\t}\n\n\t\tserializedValue = this.literalSerializers.get( literalType ).serialize( literalValue );\n\n\t\treturn { \"@value\": serializedValue, \"@type\": literalType };\n\t}\n\n\tprivate compactSingle( expandedObject:any, targetObject:any, digestedSchema:ObjectSchema.DigestedObjectSchema, pointerLibrary:Pointer.Library ):void {\n\t\tlet propertyURINameMap:Map<string, string> = this.getPropertyURINameMap( digestedSchema );\n\n\t\tif( ! expandedObject[ \"@id\" ] ) throw new Errors.IllegalArgumentError( \"The expandedObject doesn't have an @id defined.\" );\n\t\ttargetObject[ \"id\" ] = expandedObject[ \"@id\" ];\n\n\t\ttargetObject[ \"types\" ] = ! ! expandedObject[ \"@type\" ] ? expandedObject[ \"@type\" ] : [];\n\n\t\tUtils.forEachOwnProperty( expandedObject, ( propertyURI:string, value:any ):void => {\n\t\t\tif( propertyURI === \"@id\" ) return;\n\t\t\tif( propertyURI === \"@type\" ) return;\n\n\t\t\tlet propertyName:string = propertyURI;\n\t\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\n\t\t\tlet definition:ObjectSchema.DigestedPropertyDefinition;\n\t\t\tif( propertyURINameMap.has( propertyURI ) ) {\n\t\t\t\tpropertyName = propertyURINameMap.get( propertyURI );\n\t\t\t\tdefinition = digestedSchema.properties.get( propertyName );\n\t\t\t} else {\n\t\t\t\tif( digestedSchema.vocab !== null ) propertyName = RDF.URI.Util.getRelativeURI( propertyURI, digestedSchema.vocab );\n\t\t\t\tdefinition = new ObjectSchema.DigestedPropertyDefinition();\n\t\t\t\tdefinition.containerType = this.getPropertyContainerType( propertyValues );\n\t\t\t}\n\n\t\t\ttargetObject[ propertyName ] = this.getPropertyValue( expandedObject, propertyURI, definition, pointerLibrary );\n\t\t} );\n\n\t\treturn targetObject;\n\t}\n\n\tprivate getPropertyContainerType( propertyValues:any ):ObjectSchema.ContainerType {\n\t\tif( propertyValues.length === 1 ) {\n\t\t\tif( RDF.List.Factory.is( propertyValues[ 0 ] ) ) return ObjectSchema.ContainerType.LIST;\n\t\t} else {\n\t\t\treturn ObjectSchema.ContainerType.SET;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate getPropertyValue( expandedObject:any, propertyURI:string, propertyDefinition:ObjectSchema.DigestedPropertyDefinition, pointerLibrary:Pointer.Library ):any {\n\t\tswitch( propertyDefinition.containerType ) {\n\t\t\tcase null:\n\t\t\t\t// Property is not a list\n\t\t\t\tif( propertyDefinition.literal ) {\n\t\t\t\t\treturn RDF.Node.Util.getPropertyLiteral( expandedObject, propertyURI, propertyDefinition.literalType.toString() );\n\t\t\t\t} else if( propertyDefinition.literal === false ) {\n\t\t\t\t\treturn RDF.Node.Util.getPropertyPointer( expandedObject, propertyURI, pointerLibrary );\n\t\t\t\t} else {\n\t\t\t\t\treturn RDF.Node.Util.getProperty( expandedObject, propertyURI, pointerLibrary );\n\t\t\t\t}\n\t\t\tcase ObjectSchema.ContainerType.LIST:\n\t\t\t\tif( propertyDefinition.literal ) {\n\t\t\t\t\treturn RDF.Node.Util.getPropertyLiteralList( expandedObject, propertyURI, propertyDefinition.literalType.toString() );\n\t\t\t\t} else if( propertyDefinition.literal === false ) {\n\t\t\t\t\treturn RDF.Node.Util.getPropertyPointerList( expandedObject, propertyURI, pointerLibrary );\n\t\t\t\t} else {\n\t\t\t\t\treturn RDF.Node.Util.getPropertyList( expandedObject, propertyURI, pointerLibrary );\n\t\t\t\t}\n\t\t\tcase ObjectSchema.ContainerType.SET:\n\t\t\t\tif( propertyDefinition.literal ) {\n\t\t\t\t\treturn RDF.Node.Util.getPropertyLiterals( expandedObject, propertyURI, propertyDefinition.literalType.toString() );\n\t\t\t\t} else if( propertyDefinition.literal === false ) {\n\t\t\t\t\treturn RDF.Node.Util.getPropertyPointers( expandedObject, propertyURI, pointerLibrary );\n\t\t\t\t} else {\n\t\t\t\t\treturn RDF.Node.Util.getProperties( expandedObject, propertyURI, pointerLibrary );\n\t\t\t\t}\n\t\t\tcase ObjectSchema.ContainerType.LANGUAGE:\n\t\t\t\treturn RDF.Node.Util.getPropertyLanguageMap( expandedObject, propertyURI );\n\t\t\tdefault:\n\t\t\t\tthrow new Errors.IllegalArgumentError( \"The containerType specified is not supported.\" );\n\t\t}\n\t}\n\n\tprivate getPropertyURINameMap( digestedSchema:ObjectSchema.DigestedObjectSchema ):Map<string, string> {\n\t\tlet map:Map<string, string> = new Map<string, string>();\n\t\tdigestedSchema.properties.forEach( ( definition:ObjectSchema.DigestedPropertyDefinition, propertyName:string ):void => {\n\t\t\tlet uri:string = Class.getPropertyURI( propertyName, definition, digestedSchema.vocab );\n\t\t\tmap.set( uri, propertyName );\n\t\t} );\n\t\treturn map;\n\t}\n\n}\n\nexport default Class;\n"]}