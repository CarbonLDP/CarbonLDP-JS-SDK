{"version":3,"sources":["JSONLD/Compacter.ts"],"names":[],"mappings":"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","file":"Compacter.js","sourcesContent":["import { DigestedObjectSchema, Resolver } from \"../ObjectSchema\";\nimport * as PersistedDocument from \"../PersistedDocument\";\nimport * as PersistedResource from \"../PersistedResource\";\nimport * as Pointer from \"../Pointer\";\nimport * as RDFDocument from \"../RDF/Document\";\nimport * as RDFNode from \"../RDF/Node\";\nimport { Util as URIUtils } from \"../RDF/URI\";\nimport { PartialMetadata, QueryContextBuilder } from \"../SPARQL/QueryDocument\";\nimport * as Documents from \"./../Documents\";\nimport * as Converter from \"./Converter\";\n\nfunction getRelativeID( node:RDFNode.Class ):string {\n\tconst id:string = node[ \"@id\" ];\n\treturn URIUtils.hasFragment( id ) ? URIUtils.getFragment( id ) : id;\n}\n\ninterface CompactionNode {\n\tpath:string;\n\tnode:RDFNode.Class;\n\tresource:PersistedResource.Class;\n\tcontainerLibrary:Pointer.Library;\n\tadded?:boolean;\n}\n\nexport class Class {\n\tprivate documents:Documents.Class;\n\tprivate root:string;\n\tprivate resolver?:Resolver;\n\tprivate converter?:Converter.Class;\n\tprivate compactionMap:Map<string, CompactionNode>;\n\n\tconstructor( documents:Documents.Class, root?:string, schemaResolver?:Resolver, jsonldConverter?:Converter.Class ) {\n\t\tthis.documents = documents;\n\t\tthis.root = root;\n\t\tthis.resolver = schemaResolver || documents;\n\t\tthis.converter = jsonldConverter || documents.jsonldConverter;\n\t\tthis.compactionMap = new Map();\n\t}\n\n\tcompactDocument<T extends PersistedDocument.Class>( rdfDocument:RDFDocument.Class ):T {\n\t\tconst rdfDocuments:RDFDocument.Class[] = [ rdfDocument ];\n\t\treturn this.compactDocuments<T>( rdfDocuments )[ 0 ];\n\t}\n\n\tcompactDocuments<T extends PersistedDocument.Class>( rdfDocuments:RDFDocument.Class[], mainDocuments:RDFDocument.Class[] = rdfDocuments ):T[] {\n\t\trdfDocuments.forEach( rdfDocument => {\n\t\t\tconst [ [ documentNode ], fragmentNodes ] = RDFDocument.Util.getNodes( rdfDocument );\n\t\t\tconst targetDocument:PersistedDocument.Class = this.getResource( documentNode, this.documents, true );\n\n\t\t\tconst fragmentsSet:Set<string> = new Set( targetDocument._fragmentsIndex.keys() );\n\n\t\t\tfragmentNodes.forEach( fragmentNode => {\n\t\t\t\tconst fragmentID:string = getRelativeID( fragmentNode );\n\t\t\t\tif( fragmentsSet.has( fragmentID ) ) fragmentsSet.delete( fragmentID );\n\n\t\t\t\tthis.getResource( fragmentNode, targetDocument );\n\t\t\t} );\n\n\t\t\tfragmentsSet.forEach( targetDocument._removeFragment, targetDocument );\n\t\t} );\n\n\t\tconst compactedDocuments:PersistedDocument.Class[] = rdfDocuments\n\t\t\t.map( rdfDocument => rdfDocument[ \"@id\" ] )\n\t\t\t.map( this.compactionMap.get, this.compactionMap )\n\t\t\t.map( compactionNode => compactionNode.resource as any );\n\n\t\tconst compactionQueue:string[] = mainDocuments\n\t\t\t.map( rdfDocument => rdfDocument[ \"@id\" ] );\n\n\t\tconst mainCompactedDocuments:T[] = compactionQueue\n\t\t\t.map( this.compactionMap.get, this.compactionMap )\n\t\t\t.map( compactionNode => compactionNode.resource as any );\n\n\t\tthis.processCompactionQueue( compactionQueue );\n\t\twhile( this.compactionMap.size ) {\n\t\t\tconst first:string = this.compactionMap.keys().next().value;\n\t\t\tthis.processCompactionQueue( [ first ] );\n\t\t}\n\n\t\tcompactedDocuments.forEach( persistedDocument => {\n\t\t\tpersistedDocument._syncSavedFragments();\n\t\t\tpersistedDocument._resolved = true;\n\n\t\t\tpersistedDocument.types\n\t\t\t\t.map( type => this.documents.documentDecorators.get( type ) )\n\t\t\t\t.forEach( decorator => decorator && decorator.call( void 0, persistedDocument, this.documents ) );\n\t\t} );\n\n\t\treturn mainCompactedDocuments;\n\t}\n\n\tcompactNode( node:RDFNode.Class, resource:PersistedResource.Class, containerLibrary:Pointer.Library, path:string ):void {\n\t\tconst schema:DigestedObjectSchema = this.resolver.getSchemaFor( node, path );\n\t\tconst compactedData:object = this.converter.compact( node, {}, schema, containerLibrary );\n\n\t\tnew Set( [\n\t\t\t...Object.keys( resource ),\n\t\t\t...Object.keys( compactedData ),\n\t\t] ).forEach( key => {\n\t\t\tif( ! compactedData.hasOwnProperty( key ) ) {\n\t\t\t\tif( ! resource.isPartial() || schema.properties.has( key ) ) delete resource[ key ];\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif( ! Array.isArray( resource[ key ] ) ) {\n\t\t\t\tresource[ key ] = compactedData[ key ];\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst values:any[] = Array.isArray( compactedData[ key ] ) ? compactedData[ key ] : [ compactedData[ key ] ];\n\t\t\tresource[ key ].length = 0;\n\t\t\tresource[ key ].push( ...values );\n\t\t} );\n\n\t\tif( this.resolver instanceof QueryContextBuilder.Class ) {\n\t\t\tresource._partialMetadata = new PartialMetadata.Class( schema, resource._partialMetadata );\n\t\t}\n\t}\n\n\tprivate getResource<T extends PersistedResource.Class>( node:RDFNode.Class, containerLibrary:Pointer.Library, isDocument?:boolean ):T {\n\t\tconst resource:T = containerLibrary.getPointer( node[ \"@id\" ] ) as any;\n\n\t\tif( isDocument ) containerLibrary = PersistedDocument.Factory.decorate( resource, this.documents );\n\t\tthis.compactionMap.set( resource.id, { path: this.root, node, resource, containerLibrary } );\n\n\t\treturn resource;\n\t}\n\n\tprivate processCompactionQueue( compactionQueue:string[] ):void {\n\t\twhile( compactionQueue.length ) {\n\t\t\tconst targetNode:string = compactionQueue.shift();\n\n\t\t\tconst compactionNode:CompactionNode = this.compactionMap.get( targetNode );\n\t\t\tthis.compactionMap.delete( targetNode );\n\n\t\t\tthis.compactNode( compactionNode.node, compactionNode.resource, compactionNode.containerLibrary, compactionNode.path );\n\t\t\tcompactionNode.resource._syncSnapshot();\n\n\t\t\tfor( const propertyName in compactionNode.resource ) {\n\t\t\t\tif( ! compactionNode.resource.hasOwnProperty( propertyName ) ) continue;\n\n\t\t\t\tconst value:any = compactionNode.resource[ propertyName ];\n\t\t\t\tconst values:any[] = Array.isArray( value ) ? value : [ value ];\n\n\t\t\t\tconst pointers:Pointer.Class[] = values.filter( Pointer.Factory.is );\n\t\t\t\tfor( const pointer of pointers ) {\n\t\t\t\t\tconst subCompactionNode:CompactionNode = this.compactionMap.get( pointer.id );\n\t\t\t\t\tif( ! subCompactionNode || subCompactionNode.added ) continue;\n\n\t\t\t\t\tconst parentPath:string = compactionNode.path ? `${ compactionNode.path }.` : \"\";\n\t\t\t\t\tsubCompactionNode.path = parentPath + propertyName;\n\t\t\t\t\tsubCompactionNode.added = true;\n\n\t\t\t\t\tcompactionQueue.push( pointer.id );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nexport default Class;\n"]}