{"version":3,"sources":["Document.ts"],"names":["toJSON","Factory"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAwJiB,6EAA6C;YAAM,wEAAkC;;;;;;;;;;;iCAQhFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAkCbC,4DAAaA;;;;;;4BAMmBA,4DAAaA","file":"Document.js","sourcesContent":["/// <reference path=\"./../typings/typings.d.ts\" />\n\nimport * as Errors from \"./Errors\";\nimport * as Fragment from \"./Fragment\";\nimport JSONLDConverter from \"./JSONLDConverter\";\nimport * as NamedFragment from \"./NamedFragment\";\nimport * as ObjectSchema from \"./ObjectSchema\";\nimport * as Pointer from \"./Pointer\";\nimport * as RDF from \"./RDF\";\nimport * as Resource from \"./Resource\";\nimport * as Utils from \"./Utils\";\n\nexport interface Class extends Resource.Class, Pointer.Library, Pointer.Validator {\n\t_fragmentsIndex:Map<string, Fragment.Class>;\n\n\thasFragment( slug:string ):boolean;\n\tgetFragment( slug:string ):Fragment.Class;\n\tgetNamedFragment( slug:string ):NamedFragment.Class;\n\tgetFragments():Fragment.Class[];\n\n\tcreateFragment():Fragment.Class;\n\tcreateFragment( slug:string ):NamedFragment.Class;\n\tcreateNamedFragment( slug:string ):NamedFragment.Class;\n\n\tremoveFragment( fragment:NamedFragment.Class ):void;\n\tremoveFragment( fragment:Fragment.Class ):void;\n\tremoveFragment( slug:string ):void;\n\tremoveFragment( fragmentOrSlug:any ):void;\n\n\ttoJSON( objectSchemaResolver:ObjectSchema.Resolver, jsonldConverter:JSONLDConverter ):string;\n\ttoJSON( objectSchemaResolver:ObjectSchema.Resolver ):string;\n\ttoJSON():string;\n}\n\nfunction hasPointer( id:string ):boolean {\n\tlet document:Class = <Class> this;\n\n\tif( ! document.inScope( id ) ) return false;\n\n\treturn !! document.getFragment( id );\n}\n\nfunction getPointer( id:string ):Pointer.Class {\n\tlet document:Class = <Class> this;\n\n\tif( ! document.inScope( id ) ) return null;\n\n\tif( id === document.id ) return document;\n\n\tlet fragment:Fragment.Class = document.getFragment( id );\n\tfragment = ! fragment ? document.createFragment( id ) : fragment;\n\n\treturn fragment;\n}\n\nfunction inScope( pointer:Pointer.Class ):boolean;\nfunction inScope( id:string ):boolean;\nfunction inScope( idOrPointer:any ):boolean {\n\tlet document:Class = <Class> this;\n\n\tlet id:string = Pointer.Factory.is( idOrPointer ) ? idOrPointer.id : idOrPointer;\n\n\tif( id === document.id ) return true;\n\n\tif( RDF.URI.Util.isBNodeID( id ) ) return true;\n\n\tif( RDF.URI.Util.isAbsolute( id ) && RDF.URI.Util.isFragmentOf( id, document.id ) ) return true;\n\n\tif( ! RDF.URI.Util.isAbsolute( document.id ) && ! RDF.URI.Util.isAbsolute( id ) && RDF.URI.Util.isFragmentOf( id, document.id ) ) return true;\n\n\treturn false;\n}\n\nfunction hasFragment( id:string ):boolean {\n\tlet document:Class = <Class> this;\n\n\tif( ! document.inScope( id ) ) return false;\n\n\treturn !! document._fragmentsIndex.has( id );\n}\nfunction getFragment( id:string ):Fragment.Class {\n\tlet document:Class = <Class> this;\n\n\tif( ! RDF.URI.Util.isBNodeID( id ) ) return document.getNamedFragment( id );\n\n\treturn document._fragmentsIndex.get( id );\n}\nfunction getNamedFragment( id:string ):NamedFragment.Class {\n\tlet document:Class = <Class> this;\n\n\tif( RDF.URI.Util.isBNodeID( id ) ) throw new Errors.IllegalArgumentError( \"Named fragments can't have a id that starts with '_:'.\" );\n\tif( RDF.URI.Util.isAbsolute( id ) ) {\n\t\tif( ! RDF.URI.Util.isFragmentOf( id, document.id ) ) throw new Errors.IllegalArgumentError( \"The id is out of scope.\" );\n\t\tid = RDF.URI.Util.hasFragment( id ) ? RDF.URI.Util.getFragment( id ) : id;\n\t} else if( Utils.S.startsWith( id, \"#\" ) ) id = id.substring( 1 );\n\n\treturn <NamedFragment.Class> document._fragmentsIndex.get( id );\n}\nfunction getFragments():Fragment.Class[] {\n\tlet document:Class = <Class> this;\n\treturn Utils.A.from( document._fragmentsIndex.values() );\n}\n\nfunction createFragment( slug:string ):NamedFragment.Class;\nfunction createFragment( slug?:string ):Fragment.Class;\nfunction createFragment( slug:any ):any {\n\tlet document:Class = <Class> this;\n\n\tlet id:string;\n\tif( slug ) {\n\t\tif( ! RDF.URI.Util.isBNodeID( slug ) ) return document.createNamedFragment( slug );\n\t\tid = slug;\n\t\tif( this._fragmentsIndex.has( id ) ) return this.getFragment( id );\n\t} else {\n\t\tid = Fragment.Util.generateID();\n\t}\n\n\tlet fragment:Fragment.Class = Fragment.factory.create( id, document );\n\n\tdocument._fragmentsIndex.set( id, fragment );\n\n\treturn fragment;\n}\nfunction createNamedFragment( slug:string ):NamedFragment.Class {\n\tlet document:Class = <Class> this;\n\n\tif( RDF.URI.Util.isBNodeID( slug ) ) throw new Errors.IllegalArgumentError( \"Named fragments can't have a slug that starts with '_:'.\" );\n\n\tif( RDF.URI.Util.isAbsolute( slug ) ) {\n\t\tif( ! RDF.URI.Util.isFragmentOf( slug, document.id ) ) throw new Errors.IllegalArgumentError( \"The slug is out of scope.\" );\n\t\tslug = RDF.URI.Util.hasFragment( slug ) ? RDF.URI.Util.getFragment( slug ) : slug;\n\t} else if( Utils.S.startsWith( slug, \"#\" ) ) slug = slug.substring( 1 );\n\n\tif( document._fragmentsIndex.has( slug ) ) throw new Errors.IDAlreadyInUseError( \"The slug provided is already being used by a fragment.\" );\n\n\tlet fragment:NamedFragment.Class = <NamedFragment.Class> NamedFragment.factory.create( slug, document );\n\n\tdocument._fragmentsIndex.set( slug, fragment );\n\n\treturn fragment;\n}\n\nfunction removeFragment( fragment:NamedFragment.Class ):void;\nfunction removeFragment( fragment:Fragment.Class ):void;\nfunction removeFragment( slug:string ):void;\nfunction removeFragment( fragmentOrSlug:any ):void {\n\t// TODO: FT\n}\n\nfunction toJSON( objectSchemaResolver:ObjectSchema.Resolver, jsonLDConverter:JSONLDConverter ):string;\nfunction toJSON( objectSchemaResolver:ObjectSchema.Resolver ):string;\nfunction toJSON():string;\nfunction toJSON( objectSchemaResolver:ObjectSchema.Resolver = null, jsonldConverter:JSONLDConverter = null ):string {\n\tjsonldConverter = !! jsonldConverter ? jsonldConverter : new JSONLDConverter();\n\n\tlet resources:{ toJSON:() => string }[] = [];\n\tresources.push( this );\n\tresources = resources.concat( this.getFragments() );\n\n\tlet expandedResources:RDF.Node.Class[] = [];\n\tfor( let resource of resources ) {\n\t\tlet digestedContext:ObjectSchema.DigestedObjectSchema = objectSchemaResolver ? objectSchemaResolver.getSchemaFor( resource ) : new ObjectSchema.DigestedObjectSchema();\n\n\t\texpandedResources.push( jsonldConverter.expand( resource, digestedContext, this ) );\n\t}\n\n\tlet graph:RDF.Document.Class = {\n\t\t\"@id\": this.id,\n\t\t\"@graph\": expandedResources,\n\t};\n\n\treturn JSON.stringify( graph );\n}\n\nexport class Factory {\n\thasClassProperties( documentResource:Object ):boolean {\n\t\treturn (\n\t\t\tUtils.isObject( documentResource ) &&\n\n\t\t\tUtils.hasPropertyDefined( documentResource, \"_fragmentsIndex\" ) &&\n\n\t\t\tUtils.hasFunction( documentResource, \"hasFragment\" ) &&\n\t\t\tUtils.hasFunction( documentResource, \"getFragment\" ) &&\n\t\t\tUtils.hasFunction( documentResource, \"getNamedFragment\" ) &&\n\t\t\tUtils.hasFunction( documentResource, \"getFragments\" ) &&\n\t\t\tUtils.hasFunction( documentResource, \"createFragment\" ) &&\n\t\t\tUtils.hasFunction( documentResource, \"createNamedFragment\" ) &&\n\t\t\tUtils.hasFunction( documentResource, \"removeFragment\" ) &&\n\t\t\tUtils.hasFunction( documentResource, \"toJSON\" )\n\t\t);\n\t}\n\n\tcreate( uri:string ):Class;\n\tcreate():Class;\n\tcreate( uri:string = null ):Class {\n\t\treturn this.createFrom( {}, uri );\n\t}\n\n\tcreateFrom<T extends Object>( object:T, uri:string ):T & Class;\n\tcreateFrom<T extends Object>( object:T ):T & Class;\n\tcreateFrom<T extends Object>( object:T, uri:string = null ):T & Class {\n\t\tif( !! uri && RDF.URI.Util.isBNodeID( uri ) ) throw new Errors.IllegalArgumentError( \"Documents cannot have a BNodeID as a uri.\" );\n\n\t\tlet resource:Resource.Class = Resource.Factory.createFrom( object, uri );\n\n\t\tlet document:Class = this.decorate( resource );\n\n\t\treturn <any> document;\n\t}\n\n\tdecorate<T extends Object>( object:T ):T & Class {\n\t\tif( this.hasClassProperties( object ) ) return <any> object;\n\n\t\tObject.defineProperties( object, {\n\t\t\t\"_fragmentsIndex\": {\n\t\t\t\twritable: false,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: new Map<string, Fragment.Class>(),\n\t\t\t},\n\t\t\t\"hasPointer\": {\n\t\t\t\twritable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: hasPointer,\n\t\t\t},\n\t\t\t\"getPointer\": {\n\t\t\t\twritable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: getPointer,\n\t\t\t},\n\t\t\t\"inScope\": {\n\t\t\t\twritable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: inScope,\n\t\t\t},\n\t\t\t\"hasFragment\": {\n\t\t\t\twritable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: hasFragment,\n\t\t\t},\n\t\t\t\"getFragment\": {\n\t\t\t\twritable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: getFragment,\n\t\t\t},\n\t\t\t\"getNamedFragment\": {\n\t\t\t\twritable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: getNamedFragment,\n\t\t\t},\n\t\t\t\"getFragments\": {\n\t\t\t\twritable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: getFragments,\n\t\t\t},\n\t\t\t\"createFragment\": {\n\t\t\t\twritable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: createFragment,\n\t\t\t},\n\t\t\t\"createNamedFragment\": {\n\t\t\t\twritable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: createNamedFragment,\n\t\t\t},\n\t\t\t\"removeFragment\": {\n\t\t\t\twritable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: removeFragment,\n\t\t\t},\n\t\t\t\"toJSON\": {\n\t\t\t\twritable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: toJSON,\n\t\t\t},\n\t\t} );\n\n\t\treturn <any> object;\n\t}\n}\n\nexport var factory:Factory = new Factory();\n\nexport default Document;\n"],"sourceRoot":"/source/"}