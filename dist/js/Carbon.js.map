{"version":3,"sources":["Carbon.ts"],"names":[],"mappings":"AAAA,gDAAgD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAahD;gBAAqB,0BAAe;gBAiBnC,gBAAa,QAAY;oBACxB,iBAAO,CAAC;oBAER,QAAQ,GAAG,QAAQ,GAAG,QAAQ,GAAG,kBAAe,CAAC;oBAEjD,KAAK,CAAC,CAAC,CAAC,MAAM,CAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAE,QAAQ,CAAE,CAAE,CAAC;oBAE1D,IAAI,CAAC,IAAI,GAAG,IAAI,cAAI,CAAE,IAAI,CAAE,CAAC;gBAC9B,CAAC;gBAZD,sBAAW,iBAAO;oBAHlB,kCAAkC;oBAElC,0CAA0C;yBAC1C,cAA8B,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;;;mBAAA;gBActD,wBAAO,GAAP,UAAS,GAAU;oBAClB,EAAE,CAAC,CAAE,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAE,GAAG,CAAG,CAAC;wBAAC,MAAM,CAAC,GAAG,CAAC;oBAEjD,IAAI,QAAQ,GAAU,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAE,UAAU,CAAE,GAAG,UAAU,GAAG,SAAS,CAAC;oBAC/E,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAE,QAAQ,CAAE,GAAG,GAAG,GAAG,IAAI,CAAC,UAAU,CAAE,oBAAoB,CAAE,CAAC;oBAC1F,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAE,QAAQ,EAAE,GAAG,CAAE,CAAC;gBAC9C,CAAC;gBAED,kCAAiB,GAAjB;oBACC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAE,MAAM,CAAE,CAAC,IAAI,CACvC,UAAE,EAAiE;4BAA/D,mBAAW,EAAE,gBAAQ;wBACxB,MAAM,CAAO,WAAW,CAAC;oBAC1B,CAAC,CACD,CAAC;gBACH,CAAC;gBAvCD,mCAAmC;gBAC5B,WAAI,GAAe,cAAI,CAAC;gBACxB,WAAI,GAAe,IAAI,CAAC;gBACxB,eAAQ,GAAmB,QAAQ,CAAC;gBACpC,gBAAS,GAAoB,mBAAS,CAAC;gBACvC,WAAI,GAAe,IAAI,CAAC;gBACxB,UAAG,GAAc,GAAG,CAAC;gBACrB,YAAK,GAAgB,KAAK,CAAC;gBAiCnC,aAAC;YAAD,CA1CA,AA0CC,CA1CoB,yBAAe,GA0CnC;YAED,oBAAe,MAAM,EAAC","file":"Carbon.js","sourcesContent":["/// <reference path=\"../typings/typings.d.ts\" />\n\nimport * as APIDescription from \"./APIDescription\";\nimport Apps from \"./Apps\";\nimport * as Auth from \"./Auth\";\nimport AbstractContext from \"./AbstractContext\";\nimport * as Document from \"./Document\";\nimport Documents from \"./Documents\";\nimport * as HTTP from \"./HTTP\";\nimport * as RDF from \"./RDF\";\nimport defaultSettings from \"./settings\";\nimport * as Utils from \"./Utils\";\n\nclass Carbon extends AbstractContext {\n\n\t/* tslint:disable: variable-name */\n\tstatic Apps:typeof Apps = Apps;\n\tstatic Auth:typeof Auth = Auth;\n\tstatic Document:typeof Document = Document;\n\tstatic Documents:typeof Documents = Documents;\n\tstatic HTTP:typeof HTTP = HTTP;\n\tstatic RDF:typeof RDF = RDF;\n\tstatic Utils:typeof Utils = Utils;\n\t/* tslint:enable: variable-name */\n\n\t// TODO: Get package.json version directly\n\tstatic get version():string { return \"0.16.0-ALPHA\"; }\n\n\tapps:Apps;\n\n\tconstructor( settings:any ) {\n\t\tsuper();\n\n\t\tsettings = settings ? settings : defaultSettings;\n\n\t\tUtils.M.extend( this.settings, Utils.M.from( settings ) );\n\n\t\tthis.apps = new Apps( this );\n\t}\n\n\tresolve( uri:string ):string {\n\t\tif ( RDF.URI.Util.isAbsolute( uri ) ) return uri;\n\n\t\tlet finalURI:string = this.settings.get( \"http.ssl\" ) ? \"https://\" : \"http://\";\n\t\tfinalURI += this.settings.get( \"domain\" ) + \"/\" + this.getSetting( \"platform.container\" );\n\t\treturn RDF.URI.Util.resolve( finalURI, uri );\n\t}\n\n\tgetAPIDescription():Promise<APIDescription.Class> {\n\t\treturn this.documents.get( \"api/\" ).then(\n\t\t\t( [ description, response ]:[ Document.Class, HTTP.Response.Class ] ) => {\n\t\t\t\treturn <any> description;\n\t\t\t}\n\t\t);\n\t}\n}\n\nexport default Carbon;\n"],"sourceRoot":"/source/"}