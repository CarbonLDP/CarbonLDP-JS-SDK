{"version":3,"sources":["Apps.ts"],"names":["Apps","Apps.constructor","Apps.get","Apps.getAppsContainerURI"],"mappings":"AAAA,8CAA8C;AAE9C,IAAY,GAAG,WAAM,OAAO,CAAC,CAAA;AAI7B,IAAY,GAAG,WAAM,OAAO,CAAC,CAAA;AAC7B,IAAY,KAAK,WAAM,SAAS,CAAC,CAAA;AACjC,IAAY,EAAE,WAAM,SAAS,CAAC,CAAA;AAE9B;IAGCA,cAAaA,OAAeA;QAC3BC,IAAIA,CAACA,OAAOA,GAAGA,OAAOA,CAACA;IACxBA,CAACA;IAEDD,kBAAGA,GAAHA,UAAKA,GAAUA;QAAfE,iBAcCA;QAbAA,IAAIA,gBAAgBA,GAAUA,IAAIA,CAACA,mBAAmBA,EAAEA,CAACA;QACzDA,EAAEA,CAACA,CAAEA,GAAGA,CAACA,GAAGA,CAACA,IAAIA,CAACA,UAAUA,CAAEA,GAAGA,CAAGA,CAACA,CAACA,CAACA;YACtCA,EAAEA,CAACA,CAAEA,CAAEA,KAAKA,CAACA,CAACA,CAACA,UAAUA,CAAEA,GAAGA,EAAEA,gBAAgBA,CAAGA,CAACA;gBAACA,GAAGA,GAAGA,GAAGA,CAACA,GAAGA,CAACA,IAAIA,CAACA,OAAOA,CAAEA,gBAAgBA,EAAEA,GAAGA,CAAEA,CAACA;YACzGA,GAAGA,GAAGA,IAAIA,CAACA,OAAOA,CAACA,OAAOA,CAAEA,GAAGA,CAAEA,CAACA;QACnCA,CAACA;QAEDA,MAAMA,CAACA,IAAIA,CAACA,OAAOA,CAACA,SAASA,CAACA,GAAGA,CAAEA,GAAGA,CAAEA,CAACA,IAAIA,CAC5CA,UAAEA,EAA8DA;gBAA5DA,QAAQA,UAAEA,QAAQA;YACrBA,EAAEA,CAACA,CAAEA,CAAEA,QAAQA,CAACA,KAAKA,CAACA,OAAOA,CAAEA,EAAEA,CAACA,KAAKA,CAACA,WAAWA,CAAGA,CAACA;gBAACA,MAAMA,IAAIA,KAAKA,CAAEA,+CAA+CA,CAAEA,CAACA;YAE3HA,MAAMA,CAACA,IAAIA,GAAGA,CAACA,OAAOA,CAAEA,KAAIA,CAACA,OAAOA,EAAQA,QAAQA,CAAEA,CAACA;QACxDA,CAACA,CACDA,CAACA;IACHA,CAACA;IAEOF,kCAAmBA,GAA3BA;QACCG,EAAEA,CAACA,CAAEA,CAAEA,IAAIA,CAACA,OAAOA,CAACA,UAAUA,CAAEA,yBAAyBA,CAAGA,CAACA;YAACA,MAAMA,IAAIA,KAAKA,CAAEA,yCAAyCA,CAAEA,CAACA;QAC3HA,MAAMA,CAACA,IAAIA,CAACA,OAAOA,CAACA,UAAUA,CAAEA,yBAAyBA,CAAEA,CAACA;IAC7DA,CAACA;IACFH,WAACA;AAADA,CA3BA,AA2BCA,IAAA;AA3BY,YAAI,OA2BhB,CAAA;AAED;kBAAe,IAAI,CAAC","file":"Apps.js","sourcesContent":["/// <reference path=\"./../typings/tsd.d.ts\" />\n\nimport * as App from \"./App\";\nimport * as Document from \"./Document\";\nimport Context from \"./Context\";\nimport * as HTTP from \"./HTTP\";\nimport * as RDF from \"./RDF\";\nimport * as Utils from \"./Utils\";\nimport * as CS from \"./NS/CS\";\n\nexport class Apps {\n\tprivate context:Context;\n\n\tconstructor( context:Context ) {\n\t\tthis.context = context;\n\t}\n\n\tget( uri:string ):Promise<App.Context> {\n\t\tlet appsContainerURI:string = this.getAppsContainerURI();\n\t\tif ( RDF.URI.Util.isRelative( uri ) ) {\n\t\t\tif ( ! Utils.S.startsWith( uri, appsContainerURI ) ) uri = RDF.URI.Util.resolve( appsContainerURI, uri );\n\t\t\turi = this.context.resolve( uri );\n\t\t}\n\n\t\treturn this.context.Documents.get( uri ).then(\n\t\t\t( [ document, response ]:[ Document.Class, HTTP.Response.Class ] ) => {\n\t\t\t\tif ( ! document.types.indexOf( CS.Class.Application ) ) throw new Error( \"The resource fetched is not a cs:Application.\" );\n\n\t\t\t\treturn new App.Context( this.context, <any> document );\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate getAppsContainerURI():string {\n\t\tif ( ! this.context.hasSetting( \"platform.apps.container\" ) ) throw new Error( \"The apps container URI hasn't been set.\" );\n\t\treturn this.context.getSetting( \"platform.apps.container\" );\n\t}\n}\n\nexport default Apps;\n"],"sourceRoot":"/source/"}