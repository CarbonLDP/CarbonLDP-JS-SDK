{"version":3,"sources":["SPARQL/Service.ts"],"names":["Class","Class.constructor","Class.executeRawASKQuery","Class.executeRawSELECTQuery","Class.executeRawCONSTRUCTQuery","Class.executeRawDESCRIBEQuery"],"mappings":"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","file":"SPARQL/Service.js","sourcesContent":["/// <reference path=\"./../../typings/typings.d.ts\" />\n\nimport * as HTTP from \"./../HTTP\";\nimport * as Utils from \"./../Utils\";\n\n\nimport RawResults from \"./RawResults\";\nimport ResultsParser from \"./RawResultsParser\";\n\nexport class Class {\n\tprivate static defaultOptions:HTTP.Request.Options = {};\n\tprivate static resultsParser:ResultsParser = new ResultsParser();\n\tprivate static stringParser:HTTP.StringParser.Class = new HTTP.StringParser.Class();\n\n\tstatic executeRawASKQuery( url:string, askQuery:string, options:HTTP.Request.Options = {} ):Promise<[ RawResults, HTTP.Response.Class ]> {\n\t\toptions = Utils.extend( options, Class.defaultOptions );\n\n\t\tHTTP.Request.Util.setAcceptHeader( \"application/sparql-results+json\", options );\n\t\tHTTP.Request.Util.setContentTypeHeader( \"application/sparql-query\", options );\n\n\t\treturn HTTP.Request.Service.post( url, askQuery, options, Class.resultsParser );\n\t}\n\n\tstatic executeRawSELECTQuery( url:string, selectQuery:string, options:HTTP.Request.Options = {} ):Promise<[ RawResults, HTTP.Response.Class ]> {\n\t\toptions = Utils.extend( options, Class.defaultOptions );\n\n\t\tHTTP.Request.Util.setAcceptHeader( \"application/sparql-results+json\", options );\n\t\tHTTP.Request.Util.setContentTypeHeader( \"application/sparql-query\", options );\n\n\t\treturn HTTP.Request.Service.post( url, selectQuery, options, Class.resultsParser );\n\t}\n\n\tstatic executeRawCONSTRUCTQuery( url:string, constructQuery:string, options:HTTP.Request.Options = {} ):Promise<[ string, HTTP.Response.Class ]> {\n\t\toptions = Utils.extend( options, Class.defaultOptions );\n\n\t\tif( HTTP.Request.Util.getHeader( \"Accept\", options ) === null ) HTTP.Request.Util.setAcceptHeader( \"application/ld+json\", options );\n\t\tHTTP.Request.Util.setContentTypeHeader( \"application/sparql-query\", options );\n\n\t\treturn HTTP.Request.Service.post( url, constructQuery, options, Class.stringParser );\n\t}\n\n\tstatic executeRawDESCRIBEQuery( url:string, describeQuery:string, options:HTTP.Request.Options = {} ):Promise<[ string, HTTP.Response.Class ]> {\n\t\toptions = Utils.extend( options, Class.defaultOptions );\n\n\t\tif( HTTP.Request.Util.getHeader( \"Accept\", options ) === null ) HTTP.Request.Util.setAcceptHeader( \"application/ld+json\", options );\n\t\tHTTP.Request.Util.setContentTypeHeader( \"application/sparql-query\", options );\n\n\t\treturn HTTP.Request.Service.post( url, describeQuery, options, Class.stringParser );\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}