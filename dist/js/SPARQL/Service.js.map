{"version":3,"sources":["SPARQL/Service.ts"],"names":[],"mappings":"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","file":"SPARQL/Service.js","sourcesContent":["/// <reference path=\"./../../typings/typings.d.ts\" />\n\nimport * as Errors from \"./../Errors\";\nimport * as HTTP from \"./../HTTP\";\nimport * as Pointer from \"./../Pointer\";\nimport * as RDF from \"./../RDF\";\nimport * as Utils from \"./../Utils\";\n\nimport * as RawResults from \"./RawResults\";\nimport ResultsParser from \"./RawResultsParser\";\nimport * as SELECTResults from \"./SELECTResults\";\n\n\nexport class Class {\n\tprivate static defaultOptions:HTTP.Request.Options = {};\n\tprivate static resultsParser:ResultsParser = new ResultsParser();\n\tprivate static stringParser:HTTP.StringParser.Class = new HTTP.StringParser.Class();\n\n\tstatic executeRawASKQuery( url:string, askQuery:string, options:HTTP.Request.Options = {} ):Promise<[ RawResults.Class, HTTP.Response.Class ]> {\n\t\toptions = Utils.extend( options, Class.defaultOptions );\n\n\t\tHTTP.Request.Util.setAcceptHeader( \"application/sparql-results+json\", options );\n\t\tHTTP.Request.Util.setContentTypeHeader( \"application/sparql-query\", options );\n\n\t\treturn HTTP.Request.Service.post( url, askQuery, options, Class.resultsParser );\n\t}\n\n\tstatic executeASKQuery( url:string, askQuery:string, options:HTTP.Request.Options = {} ):Promise<[ boolean, HTTP.Response.Class ]> {\n\t\treturn HTTP.Request.Service.post( url, askQuery, options, Class.resultsParser ).then( ( [ rawResults, response ]:[ RawResults.Class, HTTP.Response.Class ] ) => {\n\t\t\treturn [ rawResults.boolean, response ];\n\t\t});\n\t}\n\n\tstatic executeRawSELECTQuery( url:string, selectQuery:string, options:HTTP.Request.Options = {} ):Promise<[ RawResults.Class, HTTP.Response.Class ]> {\n\t\toptions = Utils.extend( options, Class.defaultOptions );\n\n\t\tHTTP.Request.Util.setAcceptHeader( \"application/sparql-results+json\", options );\n\t\tHTTP.Request.Util.setContentTypeHeader( \"application/sparql-query\", options );\n\n\t\treturn HTTP.Request.Service.post( url, selectQuery, options, Class.resultsParser );\n\t}\n\n\tstatic executeSELECTQuery( url:string, selectQuery:string, pointerLibrary:Pointer.Library, options:HTTP.Request.Options ):Promise<[ any, HTTP.Response.Class]> {\n\t\treturn Class.executeRawSELECTQuery( url, selectQuery, options ).then( ( [ rawResults, response ]:[ RawResults.Class, HTTP.Response.Class ] ) => {\n\t\t\tlet rawBindings:RawResults.BindingObject[] = rawResults.results.bindings;\n\t\t\tlet bindings:SELECTResults.BindingObject[] = [];\n\n\t\t\tfor( let bindingColumn of rawBindings ) {\n\t\t\t\tlet binding:SELECTResults.BindingObject = {};\n\t\t\t\tfor( let bindingRow in bindingColumn ) {\n\t\t\t\t\tif( ! bindingColumn.hasOwnProperty( bindingRow ) ) continue;\n\n\t\t\t\t\tlet bindingCell:RawResults.BindingProperty = bindingColumn[ bindingRow ];\n\t\t\t\t\tbinding[ bindingRow ] = Class.parseRawBindingProperty( bindingCell, pointerLibrary );\n\t\t\t\t}\n\t\t\t\tbindings.push( binding );\n\t\t\t}\n\n\t\t\tlet results:SELECTResults.Class = {\n\t\t\t\tvars: rawResults.head.vars,\n\t\t\t\tbindings: bindings,\n\t\t\t};\n\t\t\treturn [ results, response ];\n\t\t});\n\t}\n\n\tstatic executeRawCONSTRUCTQuery( url:string, constructQuery:string, options:HTTP.Request.Options = {} ):Promise<[ string, HTTP.Response.Class ]> {\n\t\toptions = Utils.extend( options, Class.defaultOptions );\n\n\t\tif( HTTP.Request.Util.getHeader( \"Accept\", options ) === null ) HTTP.Request.Util.setAcceptHeader( \"application/ld+json\", options );\n\t\tHTTP.Request.Util.setContentTypeHeader( \"application/sparql-query\", options );\n\n\t\treturn HTTP.Request.Service.post( url, constructQuery, options, Class.stringParser );\n\t}\n\n\tstatic executeRawDESCRIBEQuery( url:string, describeQuery:string, options:HTTP.Request.Options = {} ):Promise<[ string, HTTP.Response.Class ]> {\n\t\toptions = Utils.extend( options, Class.defaultOptions );\n\n\t\tif( HTTP.Request.Util.getHeader( \"Accept\", options ) === null ) HTTP.Request.Util.setAcceptHeader( \"application/ld+json\", options );\n\t\tHTTP.Request.Util.setContentTypeHeader( \"application/sparql-query\", options );\n\n\t\treturn HTTP.Request.Service.post( url, describeQuery, options, Class.stringParser );\n\t}\n\n\tprivate static parseRawBindingProperty( rawBindingProperty:RawResults.BindingProperty, pointerLibrary:Pointer.Library ):any {\n\t\tswitch( rawBindingProperty.type ) {\n\t\t\tcase \"uri\":\n\t\t\t\treturn pointerLibrary.getPointer( rawBindingProperty.value );\n\t\t\tcase \"bnode\":\n\t\t\t\tthrow new Errors.NotImplementedError( \"BNodes cannot be queried directly\" );\n\t\t\tcase \"literal\":\n\t\t\t\tif( \"datatype\" in rawBindingProperty ) {\n\t\t\t\t\treturn RDF.Literal.Factory.parse( rawBindingProperty.value, rawBindingProperty.datatype );\n\t\t\t\t} else {\n\t\t\t\t\treturn RDF.Literal.Factory.parse( rawBindingProperty.value );\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new Errors.IllegalArgumentError( \"The bindingProperty has an unsupported type\" );\n\t\t}\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}