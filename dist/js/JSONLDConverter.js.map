{"version":3,"sources":["JSONLDConverter.ts"],"names":[],"mappings":"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","file":"JSONLDConverter.js","sourcesContent":["/// <reference path=\"./../typings/typings.d.ts\" />\n\nimport * as Errors from \"./Errors\";\nimport * as ObjectSchema from \"./ObjectSchema\";\nimport * as NS from \"./NS\";\nimport * as Pointer from \"./Pointer\";\nimport * as RDF from \"./RDF\";\nimport * as Utils from \"./Utils\";\nimport ContainerType from \"./ObjectSchema\";\n\n// TODO: Use Literal.Parsers to parse literals\nexport class Class {\n\tprivate _literalSerializers:Map<string, RDF.Literal.Serializer>;\n\n\tget literalSerializers():Map<string, RDF.Literal.Serializer> { return this._literalSerializers; };\n\n\tprivate static getDefaultSerializers():Map<string, RDF.Literal.Serializer> {\n\t\tlet literalSerializers:Map<string, RDF.Literal.Serializer> = new Map<string, RDF.Literal.Serializer>();\n\n\t\tliteralSerializers.set( NS.XSD.DataType.date, RDF.Literal.Serializers.XSD.dateSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.dateTime, RDF.Literal.Serializers.XSD.dateTimeSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.time, RDF.Literal.Serializers.XSD.timeSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.integer, RDF.Literal.Serializers.XSD.integerSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.int, RDF.Literal.Serializers.XSD.integerSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.unsignedInt, RDF.Literal.Serializers.XSD.unsignedIntegerSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.float, RDF.Literal.Serializers.XSD.floatSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.double, RDF.Literal.Serializers.XSD.floatSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.boolean, RDF.Literal.Serializers.XSD.booleanSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.string, RDF.Literal.Serializers.XSD.stringSerializer );\n\n\t\treturn literalSerializers;\n\t}\n\n\tconstructor( literalSerializers:Map<string, RDF.Literal.Serializer> = null ) {\n\t\tthis._literalSerializers = !! literalSerializers ? literalSerializers : Class.getDefaultSerializers();\n\t}\n\n\tcompact( expandedObjects:Object[], targetObjects:Object[], digestedSchema:ObjectSchema.DigestedObjectSchema, pointerLibrary:Pointer.Library ):Object[];\n\tcompact( expandedObject:Object, targetObject:Object, digestedSchema:ObjectSchema.DigestedObjectSchema, pointerLibrary:Pointer.Library ):Object;\n\tcompact( expandedObjects:Object[], digestedSchema:ObjectSchema.DigestedObjectSchema, pointerLibrary:Pointer.Library ):Object[];\n\tcompact( expandedObject:Object, digestedSchema:ObjectSchema.DigestedObjectSchema, pointerLibrary:Pointer.Library ):Object;\n\tcompact( expandedObjectOrObjects:any, targetObjectOrObjectsOrDigestedContext:any, digestedSchemaOrPointerLibrary:any, pointerLibrary:Pointer.Library = null ):any {\n\t\tlet targetObjectOrObjects:any = ! pointerLibrary ? null : targetObjectOrObjectsOrDigestedContext;\n\t\tlet digestedSchema:any = ! pointerLibrary ? targetObjectOrObjectsOrDigestedContext : digestedSchemaOrPointerLibrary;\n\t\tpointerLibrary = ! pointerLibrary ? digestedSchemaOrPointerLibrary : pointerLibrary;\n\n\t\tif( ! Utils.isArray( expandedObjectOrObjects ) ) return this.compactSingle( expandedObjectOrObjects, targetObjectOrObjects, digestedSchema, pointerLibrary );\n\n\t\tlet expandedObjects:Object[] = expandedObjectOrObjects;\n\t\tlet targetObjects:Object[] = !! targetObjectOrObjects ? targetObjectOrObjects : [];\n\t\tfor( let i:number = 0, length:number = expandedObjects.length; i < length; i++ ) {\n\t\t\tlet expandedObject:Object = expandedObjects[ i ];\n\t\t\tlet targetObject:Object = targetObjects[ i ] = !! targetObjects[ i ] ? targetObjects[ i ] : {};\n\n\t\t\tthis.compactSingle( expandedObject, targetObject, digestedSchema, pointerLibrary );\n\t\t}\n\n\t\treturn targetObjects;\n\t}\n\n\texpand( compactedObjects:Object[], digestedSchema:ObjectSchema.DigestedObjectSchema, pointerValidator?:Pointer.Validator ):RDF.Node.Class[];\n\texpand( compactedObject:Object, digestedSchema:ObjectSchema.DigestedObjectSchema, pointerValidator?:Pointer.Validator ):RDF.Node.Class;\n\texpand( compactedObjectOrObjects:Object[], digestedSchema:ObjectSchema.DigestedObjectSchema, pointerValidator:Pointer.Validator = null ):any {\n\t\tif( ! Utils.isArray( compactedObjectOrObjects ) ) return this.expandSingle( compactedObjectOrObjects, digestedSchema, pointerValidator );\n\t}\n\n\tprivate expandSingle( compactedObject:Object, digestedSchema:ObjectSchema.DigestedObjectSchema, pointerValidator:Pointer.Validator ):RDF.Node.Class {\n\t\tlet expandedObject:any = {};\n\n\t\texpandedObject[ \"@id\" ] = !! compactedObject[ \"id\" ] ? compactedObject[ \"id\" ] : \"\";\n\t\tif( !! compactedObject[ \"types\" ] ) expandedObject[ \"@type\" ] = compactedObject[ \"types\" ];\n\n\t\tUtils.forEachOwnProperty( compactedObject, ( propertyName:string, value:any ):void => {\n\t\t\tif( propertyName === \"id\" ) return;\n\n\t\t\tif( digestedSchema.properties.has( propertyName ) ) {\n\t\t\t\tlet definition:ObjectSchema.DigestedPropertyDefinition = digestedSchema.properties.get( propertyName );\n\t\t\t\tlet expandedValue:any = this.expandProperty( value, definition, pointerValidator );\n\n\t\t\t\tif( ! expandedValue ) return;\n\n\t\t\t\texpandedObject[ definition.uri.toString() ] = expandedValue;\n\t\t\t} else if( RDF.URI.Util.isAbsolute( propertyName ) ) {\n\t\t\t\tlet expandedValue:any = this.expandPropertyValues( value, pointerValidator );\n\n\t\t\t\tif( ! expandedValue ) return;\n\n\t\t\t\texpandedObject[ propertyName ] = expandedValue;\n\t\t\t} else {\n\t\t\t\t// TODO: Do your best. Use the default vocabulary\n\t\t\t}\n\t\t});\n\n\t\treturn expandedObject;\n\t}\n\n\tprivate expandProperty( propertyValue:any, propertyDefinition:ObjectSchema.DigestedPropertyDefinition, pointerValidator:Pointer.Validator ):any {\n\t\tswitch( propertyDefinition.containerType ) {\n\t\t\tcase null:\n\t\t\t\t// Property is not a list\n\t\t\t\tif( propertyDefinition.literal ) {\n\t\t\t\t\treturn this.expandPropertyLiteral( propertyValue, propertyDefinition.literalType.toString() );\n\t\t\t\t} else if( propertyDefinition.literal === false ) {\n\t\t\t\t\treturn this.expandPropertyPointer( propertyValue, pointerValidator );\n\t\t\t\t} else {\n\t\t\t\t\treturn this.expandPropertyValue( propertyValue, pointerValidator );\n\t\t\t\t}\n\t\t\tcase ObjectSchema.ContainerType.LIST:\n\t\t\t\tif( propertyDefinition.literal ) {\n\t\t\t\t\treturn this.expandPropertyLiteralList( propertyValue, propertyDefinition.literalType.toString() );\n\t\t\t\t} else if( propertyDefinition.literal === false ) {\n\t\t\t\t\treturn this.expandPropertyPointerList( propertyValue, pointerValidator );\n\t\t\t\t} else {\n\t\t\t\t\treturn this.expandPropertyList( propertyValue, pointerValidator );\n\t\t\t\t}\n\t\t\tcase ObjectSchema.ContainerType.SET:\n\t\t\t\tif( propertyDefinition.literal ) {\n\t\t\t\t\treturn this.expandPropertyLiterals( propertyValue, propertyDefinition.literalType.toString() );\n\t\t\t\t} else if( propertyDefinition.literal === false ) {\n\t\t\t\t\treturn this.expandPropertyPointers( propertyValue, pointerValidator );\n\t\t\t\t} else {\n\t\t\t\t\treturn this.expandPropertyValues( propertyValue, pointerValidator );\n\t\t\t\t}\n\t\t\tcase ObjectSchema.ContainerType.LANGUAGE:\n\t\t\t\treturn this.expandPropertyLanguageMap( propertyValue );\n\t\t\tdefault:\n\t\t\t\tthrow new Errors.IllegalArgumentError( \"The containerType specified is not supported.\" );\n\t\t}\n\t}\n\n\tprivate expandPropertyValue( propertyValue:any, pointerValidator:Pointer.Validator ):any {\n\t\tif( Utils.isArray( propertyValue ) ) {\n\t\t\treturn this.expandPropertyValues( propertyValue, pointerValidator );\n\t\t} else {\n\t\t\tlet expandedValue:RDF.Node.Class = this.expandValue( propertyValue, pointerValidator );\n\n\t\t\tif( ! expandedValue ) return null;\n\n\t\t\treturn [ expandedValue ];\n\t\t}\n\t}\n\n\tprivate expandPropertyPointer( propertyValue:any, pointerValidator:Pointer.Validator ):any {\n\t\tlet expandedPointer:RDF.Node.Class = this.expandPointer( propertyValue, pointerValidator );\n\n\t\tif( ! expandedPointer ) return null;\n\n\t\treturn [ expandedPointer ];\n\t}\n\n\tprivate expandPropertyLiteral( propertyValue:any, literalType:string ):any {\n\t\t// TODO: Language\n\t\tlet serializedValue:string = this.serializeLiteral( propertyValue, literalType );\n\n\t\tif( serializedValue === null ) return null;\n\n\t\treturn [\n\t\t\t{ \"@value\": serializedValue, \"@type\": literalType },\n\t\t];\n\t}\n\n\tprivate expandPropertyList( propertyValues:any, pointerValidator:Pointer.Validator ):any {\n\t\tpropertyValues = Utils.isArray( propertyValues ) ? propertyValues : [ propertyValues ];\n\n\t\tlet expandedArray:any = this.expandArray( propertyValues, pointerValidator );\n\n\t\tif( ! expandedArray ) return null;\n\n\t\treturn [\n\t\t\t{ \"@list\": expandedArray },\n\t\t];\n\t}\n\n\tprivate expandPropertyPointerList( propertyValues:any, pointerValidator:Pointer.Validator ):any {\n\t\tlet listValues:Array<any> = this.expandPropertyPointers( propertyValues, pointerValidator );\n\n\t\treturn [\n\t\t\t{ \"@list\": listValues },\n\t\t];\n\t}\n\n\tprivate expandPropertyLiteralList( propertyValues:any, literalType:string ):any {\n\t\tlet listValues:Array<any> = this.expandPropertyLiterals( propertyValues, literalType );\n\n\t\treturn [\n\t\t\t{ \"@list\": listValues },\n\t\t];\n\t}\n\n\tprivate expandPropertyValues( propertyValues:any, pointerValidator:Pointer.Validator ):any {\n\t\tpropertyValues = Utils.isArray( propertyValues ) ? propertyValues : [ propertyValues ];\n\n\t\tlet expandedArray:any = this.expandArray( propertyValues, pointerValidator );\n\n\t\tif( ! expandedArray ) return null;\n\n\t\treturn expandedArray;\n\t}\n\n\tprivate expandPropertyPointers( propertyValues:any, pointerValidator:Pointer.Validator ):any {\n\t\tpropertyValues = Utils.isArray( propertyValues ) ? propertyValues : [ propertyValues ];\n\n\t\tlet expandedPointers:Array<any> = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tlet expandedPointer:RDF.Node.Class = this.expandPointer( propertyValue, pointerValidator );\n\t\t\tif( ! expandedPointer ) continue;\n\n\t\t\texpandedPointers.push( expandedPointer );\n\t\t}\n\n\t\treturn expandedPointers;\n\t}\n\n\tprivate expandPropertyLiterals( propertyValues:any, literalType:string ):any {\n\t\tpropertyValues = Utils.isArray( propertyValues ) ? propertyValues : [ propertyValues ];\n\n\t\tlet listValues:Array<any> = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tlet serializedValue:string = this.serializeLiteral( propertyValue, literalType );\n\t\t\tif( ! serializedValue ) continue;\n\n\t\t\tlistValues.push( { \"@value\": serializedValue, \"@type\": literalType } );\n\t\t}\n\n\t\treturn listValues;\n\t}\n\n\tprivate expandPropertyLanguageMap( propertyValue:any ):any {\n\t\tif( ! Utils.isObject( propertyValue ) ) {\n\t\t\t// TODO: Warn of data loss\n\t\t\treturn null;\n\t\t}\n\n\t\tlet mapValues:Array<any> = [];\n\t\tUtils.forEachOwnProperty( propertyValue, ( languageTag:string, value:any ):void => {\n\t\t\t// TODO: Validate language tags\n\n\t\t\tlet serializedValue:string = this.literalSerializers.get( NS.XSD.DataType.string ).serialize( value );\n\t\t\tmapValues.push( { \"@value\": serializedValue, \"@type\": NS.XSD.DataType.string, \"@language\": languageTag } );\n\t\t});\n\n\t\treturn mapValues;\n\t}\n\n\tprivate serializeLiteral( propertyValue:any, literalType:string ):string {\n\t\tif( Pointer.Factory.is( propertyValue ) ) {\n\t\t\t// TODO: Warn of data loss\n\t\t\treturn null;\n\t\t}\n\n\t\tif( ! this.literalSerializers.has( literalType ) ) {\n\t\t\t// TODO: Warn of data loss\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\treturn this.literalSerializers.get( literalType ).serialize( propertyValue );\n\t\t} catch( error ) {\n\t\t\t// TODO: Warn of data loss\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate expandPointer( propertyValue:any, pointerValidator:Pointer.Validator ):RDF.Node.Class {\n\t\tif( ! Pointer.Factory.is( propertyValue ) ) {\n\t\t\t// TODO: Warn of data loss\n\t\t\treturn null;\n\t\t}\n\n\t\tif( !! pointerValidator && ! pointerValidator.inScope( propertyValue ) ) {\n\t\t\t// TODO: Warn of data loss\n\t\t\treturn null;\n\t\t}\n\n\t\treturn { \"@id\": propertyValue.id };\n\t}\n\n\tprivate expandArray( propertyValue:any, pointerValidator:Pointer.Validator ):any {\n\t\tlet listValues:Array<any> = [];\n\t\tfor( let listValue of propertyValue ) {\n\t\t\tlet expandedValue:any = this.expandValue( listValue, pointerValidator );\n\t\t\tif( ! expandedValue ) continue;\n\n\t\t\tlistValues.push( expandedValue );\n\t\t}\n\n\t\tif( ! listValues.length ) return null;\n\n\t\treturn listValues;\n\t}\n\n\tprivate expandValue( propertyValue:any, pointerValidator:Pointer.Validator ):any {\n\t\tif( Utils.isArray( propertyValue ) ) {\n\t\t\t// TODO: Lists of lists are not currently supported by the spec\n\t\t\treturn null;\n\t\t} else if( Pointer.Factory.is( propertyValue ) ) {\n\t\t\treturn this.expandPointer( propertyValue, pointerValidator );\n\t\t} else {\n\t\t\treturn this.expandLiteral( propertyValue );\n\t\t}\n\t}\n\n\tprivate expandLiteral( literalValue:any ):any {\n\t\tlet serializedValue:string;\n\t\tlet literalType:string;\n\t\tswitch( true ) {\n\t\t\tcase Utils.isFunction( literalValue ):\n\t\t\t\treturn null;\n\t\t\tcase Utils.isDate( literalValue ):\n\t\t\t\tliteralType = NS.XSD.DataType.dateTime;\n\t\t\t\tbreak;\n\t\t\tcase Utils.isNumber( literalValue ):\n\t\t\t\tliteralType = NS.XSD.DataType.float;\n\t\t\t\tbreak;\n\t\t\tcase Utils.isBoolean( literalValue ):\n\t\t\t\tliteralType = NS.XSD.DataType.boolean;\n\t\t\t\tbreak;\n\t\t\tcase Utils.isString( literalValue ):\n\t\t\t\tliteralType = NS.XSD.DataType.string;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// TODO: Warn of data loss\n\t\t\t\treturn null;\n\t\t}\n\n\t\tserializedValue = this.literalSerializers.get( literalType ).serialize( literalValue );\n\n\t\treturn { \"@value\": serializedValue, \"@type\": literalType };\n\t}\n\n\tprivate compactSingle( expandedObject:any, targetObject:any, digestedSchema:ObjectSchema.DigestedObjectSchema, pointerLibrary:Pointer.Library ):void {\n\t\tlet propertyURINameMap:Map<string, string> = this.getPropertyURINameMap( digestedSchema );\n\n\t\tif( ! expandedObject[ \"@id\" ] ) throw new Errors.IllegalArgumentError( \"The expandedObject doesn't have an @id defined.\" );\n\t\ttargetObject[ \"id\" ] = expandedObject[ \"@id\" ];\n\n\t\ttargetObject[ \"types\" ] = !! expandedObject[ \"@type\" ] ? expandedObject[ \"@type\" ] : [];\n\n\t\tUtils.forEachOwnProperty( expandedObject, ( propertyURI:string, value:any ):void => {\n\t\t\tif( propertyURI === \"@id\" ) return;\n\t\t\tif( propertyURI === \"@type\" ) return;\n\n\t\t\tif( propertyURINameMap.has( propertyURI ) ) {\n\t\t\t\tlet propertyName:string = propertyURINameMap.get( propertyURI );\n\t\t\t\tthis.assignProperty( targetObject, expandedObject, propertyName, digestedSchema, pointerLibrary );\n\t\t\t} else {\n\t\t\t\tthis.assignURIProperty( targetObject, expandedObject, propertyURI, pointerLibrary );\n\t\t\t}\n\t\t});\n\n\t\treturn targetObject;\n\t}\n\n\tprivate assignProperty( compactedObject:any, expandedObject:any, propertyName:string, digestedSchema:ObjectSchema.DigestedObjectSchema, pointerLibrary:Pointer.Library ):void {\n\t\tlet propertyDefinition:ObjectSchema.DigestedPropertyDefinition = digestedSchema.properties.get( propertyName );\n\t\tcompactedObject[ propertyName ] = this.getPropertyValue( expandedObject, propertyDefinition, pointerLibrary );\n\t}\n\n\tprivate assignURIProperty( compactedObject:any, expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):void {\n\t\tlet guessedDefinition:ObjectSchema.DigestedPropertyDefinition = new ObjectSchema.DigestedPropertyDefinition();\n\t\tguessedDefinition.uri = new RDF.URI.Class( propertyURI );\n\t\tguessedDefinition.containerType = this.getPropertyContainerType( expandedObject[ propertyURI ] );\n\n\t\tcompactedObject[ propertyURI ] = this.getPropertyValue( expandedObject, guessedDefinition, pointerLibrary );\n\t}\n\n\tprivate getPropertyContainerType( propertyValues:any ):ObjectSchema.ContainerType {\n\t\tif( propertyValues.length === 1 ) {\n\t\t\tif( RDF.List.Factory.is( propertyValues[ 0 ] ) ) return ObjectSchema.ContainerType.LIST;\n\t\t} else {\n\t\t\treturn ObjectSchema.ContainerType.SET;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate getPropertyValue( expandedObject:any, propertyDefinition:ObjectSchema.DigestedPropertyDefinition, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyURI:string = propertyDefinition.uri.toString();\n\n\t\tswitch( propertyDefinition.containerType ) {\n\t\t\tcase null:\n\t\t\t\t// Property is not a list\n\t\t\t\tif( propertyDefinition.literal ) {\n\t\t\t\t\treturn this.getPropertyLiteral( expandedObject, propertyURI, propertyDefinition.literalType.toString() );\n\t\t\t\t} else if( propertyDefinition.literal === false ) {\n\t\t\t\t\treturn this.getPropertyPointer( expandedObject, propertyURI, pointerLibrary );\n\t\t\t\t} else {\n\t\t\t\t\treturn this.getProperty( expandedObject, propertyURI, pointerLibrary );\n\t\t\t\t}\n\t\t\tcase ObjectSchema.ContainerType.LIST:\n\t\t\t\tif( propertyDefinition.literal ) {\n\t\t\t\t\treturn this.getPropertyLiteralList( expandedObject, propertyURI, propertyDefinition.literalType.toString() );\n\t\t\t\t} else if( propertyDefinition.literal === false ) {\n\t\t\t\t\treturn this.getPropertyPointerList( expandedObject, propertyURI, pointerLibrary );\n\t\t\t\t} else {\n\t\t\t\t\treturn this.getPropertyList( expandedObject, propertyURI, pointerLibrary );\n\t\t\t\t}\n\t\t\tcase ObjectSchema.ContainerType.SET:\n\t\t\t\tif( propertyDefinition.literal ) {\n\t\t\t\t\treturn this.getPropertyLiterals( expandedObject, propertyURI, propertyDefinition.literalType.toString() );\n\t\t\t\t} else if( propertyDefinition.literal === false ) {\n\t\t\t\t\treturn this.getPropertyPointers( expandedObject, propertyURI, pointerLibrary );\n\t\t\t\t} else {\n\t\t\t\t\treturn this.getProperties( expandedObject, propertyURI, pointerLibrary );\n\t\t\t\t}\n\t\t\tcase ObjectSchema.ContainerType.LANGUAGE:\n\t\t\t\treturn this.getPropertyLanguageMap( expandedObject, propertyURI );\n\t\t\tdefault:\n\t\t\t\tthrow new Errors.IllegalArgumentError( \"The containerType specified is not supported.\" );\n\t\t}\n\t}\n\n\tprivate getProperty( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\t\tif( ! propertyValues.length ) return null;\n\n\t\tlet propertyValue:any = propertyValues[ 0 ];\n\n\t\treturn this.parseValue( propertyValue, pointerLibrary );\n\t}\n\n\tprivate getPropertyPointer( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! RDF.Node.Factory.is( propertyValue ) ) continue;\n\n\t\t\treturn pointerLibrary.getPointer( propertyValue[ \"@id\" ] );\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate getPropertyLiteral( expandedObject:any, propertyURI:string, literalType:string ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! RDF.Literal.Factory.is( propertyValue ) ) continue;\n\t\t\tif( ! RDF.Literal.Factory.hasType( propertyValue, literalType ) ) continue;\n\n\t\t\treturn RDF.Literal.Factory.parse( propertyValue );\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate getPropertyList( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyList:RDF.List.Class = this.getList( propertyValues );\n\t\tif( ! propertyList ) return null;\n\n\t\tlet listValues:Array<any> = [];\n\t\tfor( let listValue of propertyList[ \"@list\" ] ) {\n\t\t\tlistValues.push( this.parseValue( listValue, pointerLibrary ) );\n\t\t}\n\n\t\treturn listValues;\n\t}\n\n\tprivate getPropertyPointerList( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyList:RDF.List.Class = this.getList( propertyValues );\n\t\tif( ! propertyList ) return null;\n\n\t\tlet listPointers:Array<any> = [];\n\t\tfor( let listValue of propertyList[ \"@list\" ] ) {\n\t\t\tif( ! RDF.Node.Factory.is( listValue ) ) continue;\n\n\t\t\tlet pointer:Pointer.Class = pointerLibrary.getPointer( listValue[ \"@id\" ] );\n\t\t\tlistPointers.push( pointer );\n\t\t}\n\n\t\treturn listPointers;\n\t}\n\n\tprivate getPropertyLiteralList( expandedObject:any, propertyURI:string, literalType:string ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyList:RDF.List.Class = this.getList( propertyValues );\n\t\tif( ! propertyList ) return null;\n\n\t\tlet listLiterals:Array<any> = [];\n\t\tfor( let listValue of propertyList[ \"@list\" ] ) {\n\t\t\tif( ! RDF.Literal.Factory.is( listValue ) ) continue;\n\t\t\tif( ! RDF.Literal.Factory.hasType( <any> listValue, literalType ) ) continue;\n\n\t\t\tlistLiterals.push( RDF.Literal.Factory.parse( <any> listValue ) );\n\t\t}\n\n\t\treturn listLiterals;\n\t}\n\n\tprivate getProperties( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\t\tif( ! propertyValues.length ) return null;\n\n\t\tlet properties:Array<any> = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tproperties.push( this.parseValue( propertyValue, pointerLibrary ) );\n\t\t}\n\n\t\treturn properties;\n\t}\n\n\tprivate getPropertyPointers( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\t\tif( ! propertyValues.length ) return null;\n\n\t\tlet propertyPointers:Array<any> = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! RDF.Node.Factory.is( propertyValue ) ) continue;\n\n\t\t\tlet pointer:Pointer.Class = pointerLibrary.getPointer( propertyValue[ \"@id\" ] );\n\t\t\tpropertyPointers.push( pointer );\n\t\t}\n\n\t\treturn propertyPointers;\n\t}\n\n\tprivate getPropertyLiterals( expandedObject:any, propertyURI:string, literalType:string ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyLiterals:Array<any> = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! RDF.Literal.Factory.is( propertyValue ) ) continue;\n\t\t\tif( ! RDF.Literal.Factory.hasType( propertyValue, literalType ) ) continue;\n\n\t\t\tpropertyLiterals.push( RDF.Literal.Factory.parse( propertyValue ) );\n\t\t}\n\n\t\treturn propertyLiterals;\n\t}\n\n\tprivate getPropertyLanguageMap( expandedObject:any, propertyURI:string ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyLanguageMap:any = {};\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! RDF.Literal.Factory.is( propertyValue ) ) continue;\n\t\t\tif( ! RDF.Literal.Factory.hasType( propertyValue, NS.XSD.DataType.string ) ) continue;\n\n\t\t\tlet languageTag:string = propertyValue[ \"@language\" ];\n\t\t\tif( ! languageTag ) continue;\n\n\t\t\tpropertyLanguageMap[ languageTag ] = RDF.Literal.Factory.parse( propertyValue );\n\t\t}\n\n\t\treturn propertyLanguageMap;\n\t}\n\n\tprivate getList( propertyValues:Array<any> ):RDF.List.Class {\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! RDF.List.Factory.is( propertyValue ) ) continue;\n\n\t\t\treturn propertyValue;\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate getPropertyURINameMap( digestedSchema:ObjectSchema.DigestedObjectSchema ):Map<string, string> {\n\t\tlet map:Map<string, string> = new Map<string, string>();\n\t\tdigestedSchema.properties.forEach( ( definition:ObjectSchema.DigestedPropertyDefinition, propertyName:string ):void => {\n\t\t\tmap.set( definition.uri.toString(), propertyName );\n\t\t});\n\t\treturn map;\n\t}\n\n\tprivate parseValue( propertyValue:RDF.Value.Class, pointerLibrary:Pointer.Library ):any {\n\t\tif( RDF.Literal.Factory.is( propertyValue ) ) {\n\t\t\treturn RDF.Literal.Factory.parse( <any> propertyValue );\n\t\t} else if( RDF.Node.Factory.is( propertyValue ) ) {\n\t\t\treturn pointerLibrary.getPointer( propertyValue[ \"@id\" ] );\n\t\t} else if( RDF.List.Factory.is( propertyValue ) ) {\n\t\t\tlet parsedValue:Array<any> = [];\n\t\t\tlet listValues:Array<any> = propertyValue[ \"@list\" ];\n\t\t\tfor( let listValue of listValues ) {\n\t\t\t\tparsedValue.push( this.parseValue( listValue, pointerLibrary ) );\n\t\t\t}\n\t\t\treturn parsedValue;\n\t\t} else {\n\t\t\t// TODO: What else could it be?\n\t\t}\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}