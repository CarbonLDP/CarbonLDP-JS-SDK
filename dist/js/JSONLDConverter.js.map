{"version":3,"sources":["JSONLDConverter.ts"],"names":["Class","Class.constructor","Class.literalSerializers","Class.getDefaultSerializers","Class.compact","Class.expand","Class.expandSingle","Class.expandProperty","Class.expandPropertyValue","Class.expandPropertyPointer","Class.expandPropertyLiteral","Class.expandPropertyList","Class.expandPropertyPointerList","Class.expandPropertyLiteralList","Class.expandPropertyValues","Class.expandPropertyPointers","Class.expandPropertyLiterals","Class.expandPropertyLanguageMap","Class.serializeLiteral","Class.expandPointer","Class.expandArray","Class.expandValue","Class.expandLiteral","Class.compactSingle","Class.assignProperty","Class.assignURIProperty","Class.getPropertyContainerType","Class.getPropertyValue","Class.getProperty","Class.getPropertyPointer","Class.getPropertyLiteral","Class.getPropertyList","Class.getPropertyPointerList","Class.getPropertyLiteralList","Class.getProperties","Class.getPropertyPointers","Class.getPropertyLiterals","Class.getPropertyLanguageMap","Class.getList","Class.getPropertyURINameMap","Class.parseValue"],"mappings":"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","file":"JSONLDConverter.js","sourcesContent":["/// <reference path=\"./../typings/tsd.d.ts\" />\n\nimport * as Errors from \"./Errors\";\nimport * as ObjectSchema from \"./ObjectSchema\";\nimport * as NS from \"./NS\";\nimport * as Pointer from \"./Pointer\";\nimport * as RDF from \"./RDF\";\nimport * as Utils from \"./Utils\";\n\nexport class Class {\n\tprivate _literalSerializers:Map<string, RDF.Literal.Serializer>;\n\n\tget literalSerializers():Map<string, RDF.Literal.Serializer> { return this._literalSerializers; };\n\n\tprivate static getDefaultSerializers():Map<string, RDF.Literal.Serializer> {\n\t\tlet literalSerializers:Map<string, RDF.Literal.Serializer> = new Map<string, RDF.Literal.Serializer>();\n\n\t\tliteralSerializers.set( NS.XSD.DataType.date, RDF.Literal.Serializers.XSD.dateSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.dateTime, RDF.Literal.Serializers.XSD.dateTimeSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.time, RDF.Literal.Serializers.XSD.timeSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.integer, RDF.Literal.Serializers.XSD.integerSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.int, RDF.Literal.Serializers.XSD.integerSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.unsignedInt, RDF.Literal.Serializers.XSD.unsignedIntegerSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.float, RDF.Literal.Serializers.XSD.floatSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.double, RDF.Literal.Serializers.XSD.floatSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.boolean, RDF.Literal.Serializers.XSD.booleanSerializer );\n\t\tliteralSerializers.set( NS.XSD.DataType.string, RDF.Literal.Serializers.XSD.stringSerializer );\n\n\t\treturn literalSerializers;\n\t}\n\n\tconstructor( literalSerializers:Map<string, RDF.Literal.Serializer> = null ) {\n\t\tthis._literalSerializers = !! literalSerializers ? literalSerializers : Class.getDefaultSerializers();\n\t}\n\n\tcompact( expandedObjects:Object[], targetObjects:Object[], digestedSchema:ObjectSchema.DigestedObjectSchema, pointerLibrary:Pointer.Library ):Object[];\n\tcompact( expandedObject:Object, targetObject:Object, digestedSchema:ObjectSchema.DigestedObjectSchema, pointerLibrary:Pointer.Library ):Object;\n\tcompact( expandedObjects:Object[], digestedSchema:ObjectSchema.DigestedObjectSchema, pointerLibrary:Pointer.Library ):Object[];\n\tcompact( expandedObject:Object, digestedSchema:ObjectSchema.DigestedObjectSchema, pointerLibrary:Pointer.Library ):Object;\n\tcompact( expandedObjectOrObjects:any, targetObjectOrObjectsOrDigestedContext:any, digestedSchemaOrPointerLibrary:any, pointerLibrary:Pointer.Library = null ):any {\n\t\tlet targetObjectOrObjects:any = ! pointerLibrary ? null : targetObjectOrObjectsOrDigestedContext;\n\t\tlet digestedSchema:any = ! pointerLibrary ? targetObjectOrObjectsOrDigestedContext : digestedSchemaOrPointerLibrary;\n\t\tpointerLibrary = ! pointerLibrary ? digestedSchemaOrPointerLibrary : pointerLibrary;\n\n\t\tif( ! Utils.isArray( expandedObjectOrObjects ) ) return this.compactSingle( expandedObjectOrObjects, targetObjectOrObjects, digestedSchema, pointerLibrary );\n\n\t\tlet expandedObjects:Object[] = expandedObjectOrObjects;\n\t\tlet targetObjects:Object[] = !! targetObjectOrObjects ? targetObjectOrObjects : [];\n\t\tfor( let i:number = 0, length:number = expandedObjects.length; i < length; i++ ) {\n\t\t\tlet expandedObject:Object = expandedObjects[ i ];\n\t\t\tlet targetObject:Object = targetObjects[ i ] = !! targetObjects[ i ] ? targetObjects[ i ] : {};\n\n\t\t\tthis.compactSingle( expandedObject, targetObject, digestedSchema, pointerLibrary );\n\t\t}\n\n\t\treturn targetObjects;\n\t}\n\n\texpand( compactedObjects:Object[], digestedSchema:ObjectSchema.DigestedObjectSchema, pointerValidator?:Pointer.Validator ):RDF.Node.Class[];\n\texpand( compactedObject:Object, digestedSchema:ObjectSchema.DigestedObjectSchema, pointerValidator?:Pointer.Validator ):RDF.Node.Class;\n\texpand( compactedObjectOrObjects:Object[], digestedSchema:ObjectSchema.DigestedObjectSchema, pointerValidator:Pointer.Validator = null ):any {\n\t\tif( ! Utils.isArray( compactedObjectOrObjects ) ) return this.expandSingle( compactedObjectOrObjects, digestedSchema, pointerValidator );\n\t}\n\n\tprivate expandSingle( compactedObject:Object, digestedSchema:ObjectSchema.DigestedObjectSchema, pointerValidator:Pointer.Validator ):RDF.Node.Class {\n\t\tlet expandedObject:any = {};\n\n\t\texpandedObject[ \"@id\" ] = !! compactedObject[ \"id\" ] ? compactedObject[ \"id\" ] : \"\";\n\t\tif( !! compactedObject[ \"types\" ] ) expandedObject[ \"@type\" ] = compactedObject[ \"types\" ];\n\n\t\tUtils.forEachOwnProperty( compactedObject, ( propertyName:string, value:any ):void => {\n\t\t\tif( propertyName === \"id\" ) return;\n\n\t\t\tif( digestedSchema.properties.has( propertyName ) ) {\n\t\t\t\tlet definition:ObjectSchema.DigestedPropertyDefinition = digestedSchema.properties.get( propertyName );\n\t\t\t\tlet expandedValue:any = this.expandProperty( value, definition, pointerValidator );\n\n\t\t\t\tif( ! expandedValue ) return;\n\n\t\t\t\texpandedObject[ definition.uri.toString() ] = expandedValue;\n\t\t\t} else {\n\t\t\t\t// TODO: Do your best. Use the default vocabulary\n\t\t\t}\n\t\t});\n\n\t\treturn expandedObject;\n\t}\n\n\tprivate expandProperty( propertyValue:any, propertyDefinition:ObjectSchema.DigestedPropertyDefinition, pointerValidator:Pointer.Validator ):any {\n\t\tswitch( propertyDefinition.containerType ) {\n\t\t\tcase null:\n\t\t\t\t// Property is not a list\n\t\t\t\tif( propertyDefinition.literal ) {\n\t\t\t\t\treturn this.expandPropertyLiteral( propertyValue, propertyDefinition.literalType.toString() );\n\t\t\t\t} else if( propertyDefinition.literal === false ) {\n\t\t\t\t\treturn this.expandPropertyPointer( propertyValue, pointerValidator );\n\t\t\t\t} else {\n\t\t\t\t\treturn this.expandPropertyValue( propertyValue, pointerValidator );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ObjectSchema.ContainerType.LIST:\n\t\t\t\tif( propertyDefinition.literal ) {\n\t\t\t\t\treturn this.expandPropertyLiteralList( propertyValue, propertyDefinition.literalType.toString() );\n\t\t\t\t} else if( propertyDefinition.literal === false ) {\n\t\t\t\t\treturn this.expandPropertyPointerList( propertyValue, pointerValidator );\n\t\t\t\t} else {\n\t\t\t\t\treturn this.expandPropertyList( propertyValue, pointerValidator );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ObjectSchema.ContainerType.SET:\n\t\t\t\tif( propertyDefinition.literal ) {\n\t\t\t\t\treturn this.expandPropertyLiterals( propertyValue, propertyDefinition.literalType.toString() );\n\t\t\t\t} else if( propertyDefinition.literal === false ) {\n\t\t\t\t\treturn this.expandPropertyPointers( propertyValue, pointerValidator );\n\t\t\t\t} else {\n\t\t\t\t\treturn this.expandPropertyValues( propertyValue, pointerValidator );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ObjectSchema.ContainerType.LANGUAGE:\n\t\t\t\treturn this.expandPropertyLanguageMap( propertyValue );\n\t\t\tdefault:\n\t\t\t\tthrow new Errors.IllegalArgumentError( \"The containerType specified is not supported.\" );\n\t\t}\n\t}\n\n\tprivate expandPropertyValue( propertyValue:any, pointerValidator:Pointer.Validator ):any {\n\t\tif( Utils.isArray( propertyValue ) ) {\n\t\t\treturn this.expandPropertyValues( propertyValue, pointerValidator );\n\t\t} else {\n\t\t\tlet expandedValue:RDF.Node.Class = this.expandValue( propertyValue, pointerValidator );\n\n\t\t\tif( ! expandedValue ) return null;\n\n\t\t\treturn [ expandedValue ];\n\t\t}\n\t}\n\n\tprivate expandPropertyPointer( propertyValue:any, pointerValidator:Pointer.Validator ):any {\n\t\tlet expandedPointer:RDF.Node.Class = this.expandPointer( propertyValue, pointerValidator );\n\n\t\tif( ! expandedPointer ) return null;\n\n\t\treturn [ expandedPointer ];\n\t}\n\n\tprivate expandPropertyLiteral( propertyValue:any, literalType:string ):any {\n\t\t// TODO: Language\n\t\tlet serializedValue:string = this.serializeLiteral( propertyValue, literalType );\n\n\t\tif( serializedValue === null ) return null;\n\n\t\treturn [\n\t\t\t{ \"@value\": serializedValue, \"@type\": literalType }\n\t\t];\n\t}\n\n\tprivate expandPropertyList( propertyValues:any, pointerValidator:Pointer.Validator ):any {\n\t\tpropertyValues = Utils.isArray( propertyValues ) ? propertyValues : [ propertyValues ];\n\n\t\tlet expandedArray:any = this.expandArray( propertyValues, pointerValidator );\n\n\t\tif( ! expandedArray ) return null;\n\n\t\treturn [\n\t\t\t{ \"@list\": expandedArray }\n\t\t];\n\t}\n\n\tprivate expandPropertyPointerList( propertyValues:any, pointerValidator:Pointer.Validator ):any {\n\t\tlet listValues:Array<any> = this.expandPropertyPointers( propertyValues, pointerValidator );\n\n\t\treturn [\n\t\t\t{ \"@list\": listValues }\n\t\t];\n\t}\n\n\tprivate expandPropertyLiteralList( propertyValues:any, literalType:string ):any {\n\t\tlet listValues:Array<any> = this.expandPropertyLiterals( propertyValues, literalType );\n\n\t\treturn [\n\t\t\t{ \"@list\": listValues }\n\t\t];\n\t}\n\n\tprivate expandPropertyValues( propertyValue:any, pointerValidator:Pointer.Validator ):any {\n\t\tlet expandedArray:any = this.expandArray( propertyValue, pointerValidator );\n\n\t\tif( ! expandedArray ) return null;\n\n\t\treturn expandedArray;\n\t}\n\n\tprivate expandPropertyPointers( propertyValues:any, pointerValidator:Pointer.Validator ):any {\n\t\tpropertyValues = Utils.isArray( propertyValues ) ? propertyValues : [ propertyValues ];\n\n\t\tlet expandedPointers:Array<any> = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tlet expandedPointer:RDF.Node.Class = this.expandPointer( propertyValue, pointerValidator );\n\t\t\tif( ! expandedPointer ) continue;\n\n\t\t\texpandedPointers.push( expandedPointer );\n\t\t}\n\n\t\treturn expandedPointers;\n\t}\n\n\tprivate expandPropertyLiterals( propertyValues:any, literalType:string ):any {\n\t\tpropertyValues = Utils.isArray( propertyValues ) ? propertyValues : [ propertyValues ];\n\n\t\tlet listValues:Array<any> = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tlet serializedValue:string = this.serializeLiteral( propertyValue, literalType );\n\t\t\tif( ! serializedValue ) continue;\n\n\t\t\tlistValues.push( { \"@value\": serializedValue, \"@type\": literalType } );\n\t\t}\n\n\t\treturn listValues;\n\t}\n\n\tprivate expandPropertyLanguageMap( propertyValue:any ):any {\n\t\tif( ! Utils.isObject( propertyValue ) ) {\n\t\t\t// TODO: Warn of data loss\n\t\t\treturn null;\n\t\t}\n\n\t\tlet mapValues:Array<any> = [];\n\t\tUtils.forEachOwnProperty( propertyValue, ( languageTag:string, value:any ):void => {\n\t\t\t// TODO: Validate language tags\n\n\t\t\tlet serializedValue:string = this.literalSerializers.get( NS.XSD.DataType.string ).serialize( value );\n\t\t\tmapValues.push( { \"@value\": serializedValue, \"@type\": NS.XSD.DataType.string, \"@language\": languageTag } );\n\t\t});\n\n\t\treturn mapValues;\n\t}\n\n\tprivate serializeLiteral( propertyValue:any, literalType:string ):string {\n\t\tif( Pointer.Factory.is( propertyValue ) ) {\n\t\t\t// TODO: Warn of data loss\n\t\t\treturn null;\n\t\t}\n\n\t\tif( ! this.literalSerializers.has( literalType ) ) {\n\t\t\t// TODO: Warn of data loss\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\treturn this.literalSerializers.get( literalType ).serialize( propertyValue );\n\t\t} catch( error ) {\n\t\t\t// TODO: Warn of data loss\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate expandPointer( propertyValue:any, pointerValidator:Pointer.Validator ):RDF.Node.Class {\n\t\tif( ! Pointer.Factory.is( propertyValue ) ) {\n\t\t\t// TODO: Warn of data loss\n\t\t\treturn null;\n\t\t}\n\n\t\tif( !! pointerValidator && ! pointerValidator.inScope( propertyValue ) ) {\n\t\t\t// TODO: Warn of data loss\n\t\t\treturn null;\n\t\t}\n\n\t\treturn { \"@id\": propertyValue.id };\n\t}\n\n\tprivate expandArray( propertyValue:any, pointerValidator:Pointer.Validator ):any {\n\t\tlet listValues:Array<any> = [];\n\t\tfor( let listValue of propertyValue ) {\n\t\t\tlet expandedValue:any = this.expandValue( listValue, pointerValidator );\n\t\t\tif( ! expandedValue ) continue;\n\n\t\t\tlistValues.push( expandedValue );\n\t\t}\n\n\t\tif( ! listValues.length ) return null;\n\n\t\treturn listValues;\n\t}\n\n\tprivate expandValue( propertyValue:any, pointerValidator:Pointer.Validator ):any {\n\t\tif( Utils.isArray( propertyValue ) ) {\n\t\t\t// TODO: Lists of lists are not currently supported by the spec\n\t\t\treturn null;\n\t\t} else if( Pointer.Factory.is( propertyValue ) ) {\n\t\t\treturn this.expandPointer( propertyValue, pointerValidator );\n\t\t} else {\n\t\t\treturn this.expandLiteral( propertyValue );\n\t\t}\n\t}\n\n\tprivate expandLiteral( literalValue:any ):any {\n\t\tlet serializedValue:string;\n\t\tlet literalType:string;\n\t\tswitch( true ) {\n\t\t\tcase Utils.isFunction( literalValue ):\n\t\t\t\treturn null;\n\t\t\tcase Utils.isDate( literalValue ):\n\t\t\t\tliteralType = NS.XSD.DataType.dateTime;\n\t\t\t\tbreak;\n\t\t\tcase Utils.isNumber( literalValue ):\n\t\t\t\tliteralType = NS.XSD.DataType.float;\n\t\t\t\tbreak;\n\t\t\tcase Utils.isBoolean( literalValue ):\n\t\t\t\tliteralType = NS.XSD.DataType.boolean;\n\t\t\t\tbreak;\n\t\t\tcase Utils.isString( literalValue ):\n\t\t\t\tliteralType = NS.XSD.DataType.string;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// TODO: Warn of data loss\n\t\t\t\treturn null;\n\t\t}\n\n\t\tserializedValue = this.literalSerializers.get( literalType ).serialize( literalValue );\n\n\t\treturn { \"@value\": serializedValue, \"@type\": literalType };\n\t}\n\n\tprivate compactSingle( expandedObject:any, targetObject:any, digestedSchema:ObjectSchema.DigestedObjectSchema, pointerLibrary:Pointer.Library ):void {\n\t\tlet propertyURINameMap:Map<string, string> = this.getPropertyURINameMap( digestedSchema );\n\n\t\tif( ! expandedObject[ \"@id\" ] ) throw new Errors.IllegalArgumentError( \"The expandedObject doesn't have an @id defined.\" );\n\t\ttargetObject[ \"id\" ] = expandedObject[ \"@id\" ];\n\n\t\ttargetObject[ \"types\" ] = !! expandedObject[ \"@type\" ] ? expandedObject[ \"@type\" ] : [];\n\n\t\tUtils.forEachOwnProperty( expandedObject, ( propertyURI:string, value:any ):void => {\n\t\t\tif( propertyURI === \"@id\" ) return;\n\t\t\tif( propertyURI === \"@type\" ) return;\n\n\t\t\tif( propertyURINameMap.has( propertyURI ) ) {\n\t\t\t\tlet propertyName:string = propertyURINameMap.get( propertyURI );\n\t\t\t\tthis.assignProperty( targetObject, expandedObject, propertyName, digestedSchema, pointerLibrary );\n\t\t\t} else {\n\t\t\t\tthis.assignURIProperty( targetObject, expandedObject, propertyURI, pointerLibrary );\n\t\t\t}\n\t\t});\n\n\t\treturn targetObject;\n\t}\n\n\tprivate assignProperty( compactedObject:any, expandedObject:any, propertyName:string, digestedSchema:ObjectSchema.DigestedObjectSchema, pointerLibrary:Pointer.Library ):void {\n\t\tlet propertyDefinition:ObjectSchema.DigestedPropertyDefinition = digestedSchema.properties.get( propertyName );\n\t\tcompactedObject[ propertyName ] = this.getPropertyValue( expandedObject, propertyDefinition, pointerLibrary );\n\t}\n\n\tprivate assignURIProperty( compactedObject:any, expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):void {\n\t\tlet guessedDefinition:ObjectSchema.DigestedPropertyDefinition = new ObjectSchema.DigestedPropertyDefinition();\n\t\tguessedDefinition.uri = new RDF.URI.Class( propertyURI );\n\t\tguessedDefinition.containerType = this.getPropertyContainerType( expandedObject[ propertyURI ] );\n\n\t\tcompactedObject[ propertyURI ] = this.getPropertyValue( expandedObject, guessedDefinition, pointerLibrary );\n\t}\n\n\tprivate getPropertyContainerType( propertyValues:any ):ObjectSchema.ContainerType {\n\t\tif( propertyValues.length === 1 ) {\n\t\t\tif( RDF.List.Factory.is( propertyValues[ 0 ] ) ) return ObjectSchema.ContainerType.LIST;\n\t\t} else {\n\t\t\treturn ObjectSchema.ContainerType.SET;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate getPropertyValue( expandedObject:any, propertyDefinition:ObjectSchema.DigestedPropertyDefinition, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyURI:string = propertyDefinition.uri.toString();\n\n\t\tswitch( propertyDefinition.containerType ) {\n\t\t\tcase null:\n\t\t\t\t// Property is not a list\n\t\t\t\tif( propertyDefinition.literal ) {\n\t\t\t\t\treturn this.getPropertyLiteral( expandedObject, propertyURI, propertyDefinition.literalType.toString() );\n\t\t\t\t} else if( propertyDefinition.literal === false ) {\n\t\t\t\t\treturn this.getPropertyPointer( expandedObject, propertyURI, pointerLibrary );\n\t\t\t\t} else {\n\t\t\t\t\treturn this.getProperty( expandedObject, propertyURI, pointerLibrary );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ObjectSchema.ContainerType.LIST:\n\t\t\t\tif( propertyDefinition.literal ) {\n\t\t\t\t\treturn this.getPropertyLiteralList( expandedObject, propertyURI, propertyDefinition.literalType.toString() );\n\t\t\t\t} else if( propertyDefinition.literal === false ) {\n\t\t\t\t\treturn this.getPropertyPointerList( expandedObject, propertyURI, pointerLibrary );\n\t\t\t\t} else {\n\t\t\t\t\treturn this.getPropertyList( expandedObject, propertyURI, pointerLibrary );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ObjectSchema.ContainerType.SET:\n\t\t\t\tif( propertyDefinition.literal ) {\n\t\t\t\t\treturn this.getPropertyLiterals( expandedObject, propertyURI, propertyDefinition.literalType.toString() );\n\t\t\t\t} else if( propertyDefinition.literal === false ) {\n\t\t\t\t\treturn this.getPropertyPointers( expandedObject, propertyURI, pointerLibrary );\n\t\t\t\t} else {\n\t\t\t\t\treturn this.getProperties( expandedObject, propertyURI, pointerLibrary );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ObjectSchema.ContainerType.LANGUAGE:\n\t\t\t\treturn this.getPropertyLanguageMap( expandedObject, propertyURI );\n\t\t\tdefault:\n\t\t\t\tthrow new Errors.IllegalArgumentError( \"The containerType specified is not supported.\" );\n\t\t}\n\t}\n\n\tprivate getProperty( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\t\tif( ! propertyValues.length ) return null;\n\n\t\tlet propertyValue:any = propertyValues[ 0 ];\n\n\t\treturn this.parseValue( propertyValue, pointerLibrary );\n\t}\n\n\tprivate getPropertyPointer( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! RDF.Node.Factory.is( propertyValue ) ) continue;\n\n\t\t\treturn pointerLibrary.getPointer( propertyValue[ \"@id\" ] );\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate getPropertyLiteral( expandedObject:any, propertyURI:string, literalType:string ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! RDF.Literal.Factory.is( propertyValue ) ) continue;\n\t\t\tif( ! RDF.Literal.Factory.hasType( propertyValue, literalType ) ) continue;\n\n\t\t\treturn RDF.Literal.Factory.parse( propertyValue );\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate getPropertyList( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyList:RDF.List.Class = this.getList( propertyValues );\n\t\tif( ! propertyList ) return null;\n\n\t\tlet listValues:Array<any> = [];\n\t\tfor( let listValue of propertyList[ \"@list\" ] ) {\n\t\t\tlistValues.push( this.parseValue( listValue, pointerLibrary ) );\n\t\t}\n\n\t\treturn listValues;\n\t}\n\n\tprivate getPropertyPointerList( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyList:RDF.List.Class = this.getList( propertyValues );\n\t\tif( ! propertyList ) return null;\n\n\t\tlet listPointers:Array<any> = [];\n\t\tfor( let listValue of propertyList[ \"@list\" ] ) {\n\t\t\tif( ! RDF.Node.Factory.is( listValue ) ) continue;\n\n\t\t\tlet pointer:Pointer.Class = pointerLibrary.getPointer( listValue[ \"@id\" ] );\n\t\t\tlistPointers.push( pointer );\n\t\t}\n\n\t\treturn listPointers;\n\t}\n\n\tprivate getPropertyLiteralList( expandedObject:any, propertyURI:string, literalType:string ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyList:RDF.List.Class = this.getList( propertyValues );\n\t\tif( ! propertyList ) return null;\n\n\t\tlet listLiterals:Array<any> = [];\n\t\tfor( let listValue of propertyList[ \"@list\" ] ) {\n\t\t\tif( ! RDF.Literal.Factory.is( listValue ) ) continue;\n\t\t\tif( ! RDF.Literal.Factory.hasType( <any> listValue, literalType ) ) continue;\n\n\t\t\tlistLiterals.push( RDF.Literal.Factory.parse( <any> listValue ) );\n\t\t}\n\n\t\treturn listLiterals;\n\t}\n\n\tprivate getProperties( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\t\tif( ! propertyValues.length ) return null;\n\n\t\tlet properties:Array<any> = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tproperties.push( this.parseValue( propertyValue, pointerLibrary ) );\n\t\t}\n\n\t\treturn properties;\n\t}\n\n\tprivate getPropertyPointers( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\t\tif( ! propertyValues.length ) return null;\n\n\t\tlet propertyPointers:Array<any> = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! RDF.Node.Factory.is( propertyValue ) ) continue;\n\n\t\t\tlet pointer:Pointer.Class = pointerLibrary.getPointer( propertyValue[ \"@id\" ] );\n\t\t\tpropertyPointers.push( pointer );\n\t\t}\n\n\t\treturn propertyPointers;\n\t}\n\n\tprivate getPropertyLiterals( expandedObject:any, propertyURI:string, literalType:string ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyLiterals:Array<any> = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! RDF.Literal.Factory.is( propertyValue ) ) continue;\n\t\t\tif( ! RDF.Literal.Factory.hasType( propertyValue, literalType ) ) continue;\n\n\t\t\tpropertyLiterals.push( RDF.Literal.Factory.parse( propertyValue ) );\n\t\t}\n\n\t\treturn propertyLiterals;\n\t}\n\n\tprivate getPropertyLanguageMap( expandedObject:any, propertyURI:string ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyLanguageMap:any = {};\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! RDF.Literal.Factory.is( propertyValue ) ) continue;\n\t\t\tif( ! RDF.Literal.Factory.hasType( propertyValue, NS.XSD.DataType.string ) ) continue;\n\n\t\t\tlet languageTag:string = propertyValue[ \"@language\" ];\n\t\t\tif( ! languageTag ) continue;\n\n\t\t\tpropertyLanguageMap[ languageTag ] = RDF.Literal.Factory.parse( propertyValue );\n\t\t}\n\n\t\treturn propertyLanguageMap;\n\t}\n\n\tprivate getList( propertyValues:Array<any> ):RDF.List.Class {\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! RDF.List.Factory.is( propertyValue ) ) continue;\n\n\t\t\treturn propertyValue;\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate getPropertyURINameMap( digestedSchema:ObjectSchema.DigestedObjectSchema ):Map<string, string> {\n\t\tlet map:Map<string, string> = new Map<string, string>();\n\t\tdigestedSchema.properties.forEach( ( definition:ObjectSchema.DigestedPropertyDefinition, propertyName:string ):void => {\n\t\t\tmap.set( definition.uri.toString(), propertyName );\n\t\t});\n\t\treturn map;\n\t}\n\n\tprivate parseValue( propertyValue:RDF.Value.Class, pointerLibrary:Pointer.Library ):any {\n\t\tif( RDF.Literal.Factory.is( propertyValue ) ) {\n\t\t\treturn RDF.Literal.Factory.parse( <any> propertyValue );\n\t\t} else if( RDF.Node.Factory.is( propertyValue ) ) {\n\t\t\treturn pointerLibrary.getPointer( propertyValue[ \"@id\" ] );\n\t\t} else if( RDF.List.Factory.is( propertyValue ) ) {\n\t\t\tlet parsedValue:Array<any> = [];\n\t\t\tlet listValues:Array<any> = propertyValue[ \"@list\" ];\n\t\t\tfor( let listValue of listValues ) {\n\t\t\t\tparsedValue.push( this.parseValue( listValue, pointerLibrary ) );\n\t\t\t}\n\t\t\treturn parsedValue;\n\t\t} else {\n\t\t\t// TODO: What else could it be?\n\t\t}\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}