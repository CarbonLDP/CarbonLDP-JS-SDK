/// <reference path="../typings/tsd.d.ts" />
import * as ContextDigester from "./ContextDigester";
import * as Pointer from "./Pointer";
import * as RDF from "./RDF";
export declare class Class {
    private _literalSerializers;
    literalSerializers: Map<string, RDF.Literal.Serializer>;
    private static getDefaultSerializers();
    constructor(literalSerializers?: Map<string, RDF.Literal.Serializer>);
    compact(expandedObjects: Object[], targetObjects: Object[], digestedContext: ContextDigester.DigestedContext, pointerLibrary: Pointer.Library): Object[];
    compact(expandedObject: Object, targetObject: Object, digestedContext: ContextDigester.DigestedContext, pointerLibrary: Pointer.Library): Object;
    compact(expandedObjects: Object[], digestedContext: ContextDigester.DigestedContext, pointerLibrary: Pointer.Library): Object[];
    compact(expandedObject: Object, digestedContext: ContextDigester.DigestedContext, pointerLibrary: Pointer.Library): Object;
    expand(compactedObjects: Object[], digestedContext: ContextDigester.DigestedContext, pointerValidator?: Pointer.Validator): Object[];
    expand(compactedObject: Object, digestedContext: ContextDigester.DigestedContext, pointerValidator?: Pointer.Validator): Object;
    private expandSingle(compactedObject, digestedContext, pointerValidator);
    private expandProperty(propertyValue, propertyDefinition, pointerValidator);
    private expandPropertyValue(propertyValue, pointerValidator);
    private expandPropertyPointer(propertyValue, pointerValidator);
    private expandPropertyLiteral(propertyValue, literalType);
    private expandPropertyList(propertyValues, pointerValidator);
    private expandPropertyPointerList(propertyValues, pointerValidator);
    private expandPropertyLiteralList(propertyValues, literalType);
    private expandPropertyValues(propertyValue, pointerValidator);
    private expandPropertyPointers(propertyValues, pointerValidator);
    private expandPropertyLiterals(propertyValues, literalType);
    private expandPropertyLanguageMap(propertyValue);
    private serializeLiteral(propertyValue, literalType);
    private expandPointer(propertyValue, pointerValidator);
    private expandArray(propertyValue, pointerValidator);
    private expandValue(propertyValue, pointerValidator);
    private expandLiteral(literalValue);
    private compactSingle(expandedObject, targetObject, digestedContext, pointerLibrary);
    private assignProperty(compactedObject, expandedObject, propertyName, digestedContext, pointerLibrary);
    private getPropertyValue(expandedObject, propertyDefinition, pointerLibrary);
    private getProperty(expandedObject, propertyURI, pointerLibrary);
    private getPropertyPointer(expandedObject, propertyURI, pointerLibrary);
    private getPropertyLiteral(expandedObject, propertyURI, literalType);
    private getPropertyList(expandedObject, propertyURI, pointerLibrary);
    private getPropertyPointerList(expandedObject, propertyURI, pointerLibrary);
    private getPropertyLiteralList(expandedObject, propertyURI, literalType);
    private getProperties(expandedObject, propertyURI, pointerLibrary);
    private getPropertyPointers(expandedObject, propertyURI, pointerLibrary);
    private getPropertyLiterals(expandedObject, propertyURI, literalType);
    private getPropertyLanguageMap(expandedObject, propertyURI);
    private getList(propertyValues);
    private getPropertyURINameMap(digestedContext);
    private parseValue(propertyValue, pointerLibrary);
}
export default Class;
