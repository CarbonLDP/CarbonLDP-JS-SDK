{"version":3,"sources":["RDF/PersistedDocumentResource.ts"],"names":[],"mappings":"AAAA,mDAAmD;AACnD,mEAAmE;AAEnE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6KE","file":"RDF/PersistedDocumentResource.js","sourcesContent":["/// <reference path=\"../../typings/es6/es6.d.ts\" />\n/// <reference path=\"../../typings/es6-promise/es6-promise.d.ts\" />\n\n/*\n\n\timport * as DocumentResource from './DocumentResource';\n\timport Committer from '../Committer';\n\timport * as Literal from './Literal';\n\timport * as Persisted from './Persisted';\n\timport * as RDFNode from './RDFNode';\n\timport * as Utils from '../Utils';\n\timport * as Value from './Value';\n\n\n\tenum SpecialValue {\n\t\tALL_VALUES\n\t}\n\n\tinterface PersistedDocumentResource extends DocumentResource.Class, Persisted.Class {\n\t\t_committer:Committer;\n\t\t_clean():void;\n\n\t\tcommit():Promise<any>;\n\t\tdelete():void;\n\t}\n\n\tfunction modificationsDeleteAllValues( deleteModifications:Value.Class[] ):boolean {\n\t\treturn deleteModifications.length === 1 && deleteModifications[ 0 ] === SpecialValue.ALL_VALUES;\n\t}\n\n\tfunction getModifications( type:Persisted.ModificationType ):Map<string, Value.Class[]> {\n\t\tvar modifications:Map<string, Value.Class[]>;\n\t\tswitch ( type ) {\n\t\t\tcase Persisted.ModificationType.ADD:\n\t\t\t\tmodifications = this._modifications.add;\n\t\t\t\tbreak;\n\t\t\tcase Persisted.ModificationType.SET:\n\t\t\t\tmodifications = this._modifications.set;\n\t\t\t\tbreak;\n\t\t\tcase Persisted.ModificationType.DELETE:\n\t\t\t\tmodifications = this._modifications.delete;\n\t\t\t\tbreak;\n\t\t}\n\t\treturn modifications;\n\t}\n\n\tfunction addModification( type:Persisted.ModificationType, propertyURI:string, value:any ):void {\n\t\tvar modifications:Map<string, Value.Class[]> = getModifications.call( this, type, propertyURI );\n\n\t\tvar values:Value.Class[];\n\t\tif ( modifications.has( propertyURI ) ) {\n\t\t\tvalues = modifications.get( propertyURI );\n\t\t\tfor ( let i:number = 0, length:number = values.length; i < length; i ++ ) {\n\t\t\t\tif ( Value.Util.areEqual( values[ i ], value ) ) return;\n\t\t\t}\n\t\t} else {\n\t\t\tvalues = [];\n\t\t\tmodifications.set( propertyURI, values );\n\t\t}\n\n\t\tvalues.push( value );\n\t}\n\n\tfunction removeModification( type:Persisted.ModificationType, propertyURI:string, value:any ):void {\n\t\tvar modifications:Map<string, Value.Class[]> = getModifications.call( this, type, propertyURI );\n\t\tvar values:Value.Class[] = modifications.get( propertyURI );\n\t\tfor ( let i:number = 0, length:number = values.length; i < length; i ++ ) {\n\t\t\tif ( Value.Util.areEqual( values[ i ], value ) ) {\n\t\t\t\tvalues.splice( i, 1 );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction registerAddModification( propertyURI:string, value:any ):void {\n\t\tthis._dirty = true;\n\n\t\tif ( this._modifications.delete.has( propertyURI ) ) {\n\t\t\tvar deleteModifications:Value.Class[] = this._modifications.delete.get( propertyURI );\n\n\t\t\tif ( modificationsDeleteAllValues( deleteModifications ) ) {\n\t\t\t\tthis._modifications.delete.delete( propertyURI );\n\t\t\t\taddModification.call( this, Persisted.ModificationType.SET, propertyURI, value );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tremoveModification.call( this, Persisted.ModificationType.DELETE, propertyURI, value );\n\n\t\t\tfor ( let i:number = 0, length:number = deleteModifications.length; i < length; i ++ ) {\n\t\t\t\tif ( Value.Util.areEqual( deleteModifications[ i ], value ) ) {\n\t\t\t\t\tdeleteModifications.splice( i, 1 );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( this._modifications.set.has( propertyURI ) ) {\n\t\t\taddModification.call( this, Persisted.ModificationType.SET, propertyURI, value );\n\t\t} else {\n\t\t\taddModification.call( this, Persisted.ModificationType.ADD, propertyURI, value );\n\t\t}\n\t}\n\n\tfunction registerDeleteModification( propertyURI:string, value:any = null ):void {\n\t\tthis._dirty = true;\n\n\t\tif ( Utils.isNull( value ) ) value = SpecialValue.ALL_VALUES;\n\n\t\tif ( value === SpecialValue.ALL_VALUES ) {\n\t\t\tif ( this._modifications.add.has( propertyURI ) ) this._modifications.add.delete( propertyURI );\n\t\t\tif ( this._modifications.set.has( propertyURI ) ) this._modifications.set.delete( propertyURI );\n\t\t\tif ( this._modifications.delete.has( propertyURI ) ) this._modifications.delete.delete( propertyURI );\n\t\t} else {\n\t\t\tif ( this._modifications.add.has( propertyURI ) ) removeModification.call( this, Persisted.ModificationType.ADD, propertyURI, value );\n\t\t\tif ( this._modifications.set.has( propertyURI ) ) removeModification.call( this, Persisted.ModificationType.SET, propertyURI, value );\n\t\t}\n\n\t\taddModification.call( this, Persisted.ModificationType.DELETE, propertyURI, value );\n\t}\n\n\tfunction clean():void {\n\t\tthis._modifications = new Persisted.Modifications();\n\t\tthis._dirty = true;\n\t}\n\n\tfunction commit():Promise<any> {\n\t\treturn this._committer.commit( this );\n\t}\n\n\tfunction destroy():any {\n\t\t// TODO: Implement\n\t}\n\n\tclass Factory {\n\t\tstatic is( value:any ) {\n\t\t\t//@formatter:off\n\t\t\treturn (\n\t\t\t\tDocumentResource.factory.is( value ) &&\n\t\t\t\tPersisted.Factory.is( value ) &&\n\n\t\t\t\tUtils.hasProperty( value, '_parent' ) &&\n\t\t\t\tUtils.hasFunction( value, '_clean' ) &&\n\n\t\t\t\tUtils.hasFunction( value, 'commit' ) &&\n\t\t\t\tUtils.hasFunction( value, 'delete' )\n\t\t\t);\n\t\t\t//@formatter:on\n\t\t}\n\n\t\tstatic from( documentResource:DocumentResource.Class, committer:Committer ):PersistedDocumentResource {\n\t\t\tvar persisted:PersistedDocumentResource = <PersistedDocumentResource> documentResource;\n\n\t\t\tPersisted.Factory.from( persisted );\n\n\t\t\tif ( ! Factory.is( persisted ) ) {\n\t\t\t\tObject.defineProperties( persisted, {\n\t\t\t\t\t'_committer': {\n\t\t\t\t\t\twritable: false,\n\t\t\t\t\t\tenumerable: false,\n\t\t\t\t\t\tvalue: committer\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tpersisted._propertyAddedCallbacks.push( registerAddModification );\n\t\t\t\tpersisted._propertyDeletedCallbacks.push( registerDeleteModification );\n\n\t\t\t\tpersisted._clean = clean;\n\n\t\t\t\tpersisted.commit = commit;\n\t\t\t\tpersisted.delete = destroy;\n\t\t\t}\n\n\t\t\treturn persisted;\n\t\t}\n\t}\n\n\texport { PersistedDocumentResource as Class, Factory };\n\n*/"],"sourceRoot":"/source/"}