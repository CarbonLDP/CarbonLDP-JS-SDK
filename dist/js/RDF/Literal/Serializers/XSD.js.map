{"version":3,"sources":["RDF/Literal/Serializers/XSD.ts"],"names":[],"mappings":"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","file":"RDF/Literal/Serializers/XSD.js","sourcesContent":["import * as Errors from \"./../../../Errors\";\nimport * as Utils from \"./../../../Utils\";\n\nimport Serializer from \"./../Serializer\";\n\nfunction pad( value:number ):string {\n\tlet paddedValue:string = String( value );\n\tif ( paddedValue.length === 1 ) paddedValue = \"0\" + paddedValue;\n\treturn paddedValue;\n}\n\nexport class DateSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isDate( value ) ) throw new Errors.IllegalArgumentError( \"The value is not a Date object.\" );\n\n\t\treturn value.getUTCFullYear() + \"-\" + pad( (value.getUTCMonth() + 1) ) + \"-\" + pad( value.getUTCDate() );\n\t}\n}\n\nexport let dateSerializer:DateSerializer = new DateSerializer();\n\nexport class DateTimeSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isDate( value ) ) throw new Errors.IllegalArgumentError( \"The value is not a Date object.\" );\n\n\t\treturn value.toISOString();\n\t}\n}\n\nexport let dateTimeSerializer:DateTimeSerializer = new DateTimeSerializer();\n\nexport class TimeSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isDate( value ) ) throw new Errors.IllegalArgumentError( \"The value is not a Date object.\" );\n\n\t\treturn pad( value.getUTCHours() )\n\t\t\t+ \":\" + pad( value.getUTCMinutes() )\n\t\t\t+ \":\" + pad( value.getUTCSeconds() )\n\t\t\t+ \".\" + String( ( value.getUTCMilliseconds() / 1000 ).toFixed( 3 ) ).slice( 2, 5 )\n\t\t\t+ \"Z\"\n\t\t;\n\t}\n}\n\nexport let timeSerializer:TimeSerializer = new TimeSerializer();\n\nexport class IntegerSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isNumber( value ) ) throw new Errors.IllegalArgumentError( \"The value is not a number.\" );\n\n\t\t// Negative truncate\n\t\treturn ( ~~value ) + \"\";\n\t}\n}\n\nexport let integerSerializer:IntegerSerializer = new IntegerSerializer();\n\nexport class UnsignedIntegerSerializer extends IntegerSerializer {\n\tserialize( value:any ):string {\n\t\tlet stringValue:string = super.serialize( value );\n\n\t\tstringValue = Utils.S.startsWith( stringValue, \"-\" ) ? stringValue.substring( 1 ) : stringValue;\n\n\t\treturn stringValue;\n\t}\n}\n\nexport let unsignedIntegerSerializer:UnsignedIntegerSerializer = new UnsignedIntegerSerializer();\n\nexport class FloatSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isNumber( value ) ) throw new Errors.IllegalArgumentError( \"The value is not a number.\" );\n\n\t\treturn value + \"\";\n\t}\n}\n\nexport let floatSerializer:FloatSerializer = new FloatSerializer();\n\nexport class BooleanSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( !! value ) {\n\t\t\treturn \"true\";\n\t\t} else {\n\t\t\treturn \"false\";\n\t\t}\n\t}\n}\n\nexport let booleanSerializer:BooleanSerializer = new BooleanSerializer();\n\nexport class StringSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\treturn value + \"\";\n\t}\n}\n\nexport let stringSerializer:StringSerializer = new StringSerializer();\n"],"sourceRoot":"/source/"}