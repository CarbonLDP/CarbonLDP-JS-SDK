{"version":3,"sources":["RDF/Literal/Serializers/XSD.ts"],"names":["pad","DateSerializer","DateSerializer.constructor","DateSerializer.serialize","DateTimeSerializer","DateTimeSerializer.constructor","DateTimeSerializer.serialize","TimeSerializer","TimeSerializer.constructor","TimeSerializer.serialize","IntegerSerializer","IntegerSerializer.constructor","IntegerSerializer.serialize","UnsignedIntegerSerializer","UnsignedIntegerSerializer.constructor","UnsignedIntegerSerializer.serialize","FloatSerializer","FloatSerializer.constructor","FloatSerializer.serialize","BooleanSerializer","BooleanSerializer.constructor","BooleanSerializer.serialize","StringSerializer","StringSerializer.constructor","StringSerializer.serialize"],"mappings":"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","file":"RDF/Literal/Serializers/XSD.js","sourcesContent":["import * as Errors from \"./../../../Errors\";\nimport * as Utils from \"./../../../Utils\";\n\nimport Serializer from \"./../Serializer\";\n\nfunction pad( value:number ):string {\n\tlet paddedValue:string = String( value );\n\tif ( paddedValue.length === 1 ) paddedValue = \"0\" + paddedValue;\n\treturn paddedValue;\n}\n\nexport class DateSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isDate( value ) ) throw new Errors.IllegalArgumentError( \"The value is not a Date object.\" );\n\n\t\treturn value.getUTCFullYear() + \"-\" + pad( (value.getUTCMonth() + 1) ) + \"-\" + pad( value.getUTCDate() );\n\t}\n}\n\nexport let dateSerializer:DateSerializer = new DateSerializer();\n\nexport class DateTimeSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isDate( value ) ) throw new Errors.IllegalArgumentError( \"The value is not a Date object.\" );\n\n\t\treturn value.toISOString();\n\t}\n}\n\nexport let dateTimeSerializer:DateTimeSerializer = new DateTimeSerializer();\n\nexport class TimeSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isDate( value ) ) throw new Errors.IllegalArgumentError( \"The value is not a Date object.\" );\n\n\t\treturn pad( value.getUTCHours() )\n\t\t\t+ \":\" + pad( value.getUTCMinutes() )\n\t\t\t+ \":\" + pad( value.getUTCSeconds() )\n\t\t\t+ \".\" + String( ( value.getUTCMilliseconds() / 1000 ).toFixed( 3 ) ).slice( 2, 5 )\n\t\t\t+ \"Z\"\n\t\t;\n\t}\n}\n\nexport let timeSerializer:TimeSerializer = new TimeSerializer();\n\nexport class IntegerSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isNumber( value ) ) throw new Errors.IllegalArgumentError( \"The value is not a number.\" );\n\n\t\t// Negative truncate\n\t\treturn ( ~~value ) + \"\";\n\t}\n}\n\nexport let integerSerializer:IntegerSerializer = new IntegerSerializer();\n\nexport class UnsignedIntegerSerializer extends IntegerSerializer {\n\tserialize( value:any ):string {\n\t\tlet stringValue:string = super.serialize( value );\n\n\t\tstringValue = Utils.S.startsWith( stringValue, \"-\" ) ? stringValue.substring( 1 ) : stringValue;\n\n\t\treturn stringValue;\n\t}\n}\n\nexport let unsignedIntegerSerializer:UnsignedIntegerSerializer = new UnsignedIntegerSerializer();\n\nexport class FloatSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isNumber( value ) ) throw new Errors.IllegalArgumentError( \"The value is not a number.\" );\n\n\t\treturn value + \"\";\n\t}\n}\n\nexport let floatSerializer:FloatSerializer = new FloatSerializer();\n\nexport class BooleanSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( !! value ) {\n\t\t\treturn \"true\";\n\t\t} else {\n\t\t\treturn \"false\";\n\t\t}\n\t}\n}\n\nexport let booleanSerializer:BooleanSerializer = new BooleanSerializer();\n\nexport class StringSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\treturn value + \"\";\n\t}\n}\n\nexport let stringSerializer:StringSerializer = new StringSerializer();\n"],"sourceRoot":"/source/"}