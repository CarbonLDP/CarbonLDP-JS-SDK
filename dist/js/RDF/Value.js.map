{"version":3,"sources":["RDF/Value.ts"],"names":["Util","Util.constructor","Util.areEqual","Util.getProperty","Util.getPropertyPointer","Util.getPropertyLiteral","Util.getPropertyList","Util.getPropertyPointerList","Util.getPropertyLiteralList","Util.getProperties","Util.getPropertyPointers","Util.getPropertyURIs","Util.getPropertyLiterals","Util.getPropertyLanguageMap","Util.getList","Util.parseValue"],"mappings":"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","file":"RDF/Value.js","sourcesContent":["import * as List from \"./List\";\nimport * as Literal from \"./Literal\";\nimport * as NS from \"./../NS\";\nimport * as Pointer from \"./../Pointer\";\nimport * as RDFNode from \"./RDFNode\";\n\nexport interface Class {\n\t\"@id\"?:string;\n\t\"@type\"?:string;\n\t\"@value\"?:string;\n}\n\nexport class Util {\n\tstatic areEqual( value1:Class, value2:Class ):boolean {\n\t\tif ( Literal.Factory.is( value1 ) && Literal.Factory.is( value2 ) ) {\n\t\t\treturn Literal.Util.areEqual( <Literal.Class> value1, <Literal.Class> value2 );\n\t\t} else if ( RDFNode.Factory.is( value1 ) && RDFNode.Factory.is( value2 ) ) {\n\t\t\treturn RDFNode.Util.areEqual( <RDFNode.Class> value1, <RDFNode.Class> value2 );\n\t\t} else return false;\n\t}\n\n\tstatic getProperty( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\t\tif( ! propertyValues.length ) return null;\n\n\t\tlet propertyValue:any = propertyValues[ 0 ];\n\n\t\treturn Util.parseValue( propertyValue, pointerLibrary );\n\t}\n\n\tstatic getPropertyPointer( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! RDFNode.Factory.is( propertyValue ) ) continue;\n\n\t\t\treturn pointerLibrary.getPointer( propertyValue[ \"@id\" ] );\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tstatic getPropertyLiteral( expandedObject:any, propertyURI:string, literalType:string ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! Literal.Factory.is( propertyValue ) ) continue;\n\t\t\tif( ! Literal.Factory.hasType( propertyValue, literalType ) ) continue;\n\n\t\t\treturn Literal.Factory.parse( propertyValue );\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tstatic getPropertyList( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyList:List.Class = Util.getList( propertyValues );\n\t\tif( ! propertyList ) return null;\n\n\t\tlet listValues:Array<any> = [];\n\t\tfor( let listValue of propertyList[ \"@list\" ] ) {\n\t\t\tlistValues.push( Util.parseValue( listValue, pointerLibrary ) );\n\t\t}\n\n\t\treturn listValues;\n\t}\n\n\tstatic getPropertyPointerList( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyList:List.Class = Util.getList( propertyValues );\n\t\tif( ! propertyList ) return null;\n\n\t\tlet listPointers:Array<any> = [];\n\t\tfor( let listValue of propertyList[ \"@list\" ] ) {\n\t\t\tif( ! RDFNode.Factory.is( listValue ) ) continue;\n\n\t\t\tlet pointer:Pointer.Class = pointerLibrary.getPointer( listValue[ \"@id\" ] );\n\t\t\tlistPointers.push( pointer );\n\t\t}\n\n\t\treturn listPointers;\n\t}\n\n\tstatic getPropertyLiteralList( expandedObject:any, propertyURI:string, literalType:string ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyList:List.Class = Util.getList( propertyValues );\n\t\tif( ! propertyList ) return null;\n\n\t\tlet listLiterals:Array<any> = [];\n\t\tfor( let listValue of propertyList[ \"@list\" ] ) {\n\t\t\tif( ! Literal.Factory.is( listValue ) ) continue;\n\t\t\tif( ! Literal.Factory.hasType( <any> listValue, literalType ) ) continue;\n\n\t\t\tlistLiterals.push( Literal.Factory.parse( <any> listValue ) );\n\t\t}\n\n\t\treturn listLiterals;\n\t}\n\n\tstatic getProperties( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\t\tif( ! propertyValues.length ) return null;\n\n\t\tlet properties:Array<any> = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tproperties.push( Util.parseValue( propertyValue, pointerLibrary ) );\n\t\t}\n\n\t\treturn properties;\n\t}\n\n\tstatic getPropertyPointers( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\t\tif( ! propertyValues.length ) return null;\n\n\t\tlet propertyPointers:Array<any> = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! RDFNode.Factory.is( propertyValue ) ) continue;\n\n\t\t\tlet pointer:Pointer.Class = pointerLibrary.getPointer( propertyValue[ \"@id\" ] );\n\t\t\tpropertyPointers.push( pointer );\n\t\t}\n\n\t\treturn propertyPointers;\n\t}\n\n\tstatic getPropertyURIs( expandedObject:any, propertyURI:string ):string[] {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\t\tif( ! propertyValues.length ) return null;\n\n\t\tlet propertyURIs:string[] = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! RDFNode.Factory.is( propertyValue ) ) continue;\n\n\t\t\tpropertyURIs.push( propertyValue[ \"@id\" ] );\n\t\t}\n\n\t\treturn propertyURIs;\n\t}\n\n\tstatic getPropertyLiterals( expandedObject:any, propertyURI:string, literalType:string ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyLiterals:Array<any> = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! Literal.Factory.is( propertyValue ) ) continue;\n\t\t\tif( ! Literal.Factory.hasType( propertyValue, literalType ) ) continue;\n\n\t\t\tpropertyLiterals.push( Literal.Factory.parse( propertyValue ) );\n\t\t}\n\n\t\treturn propertyLiterals;\n\t}\n\n\tstatic getPropertyLanguageMap( expandedObject:any, propertyURI:string ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyLanguageMap:any = {};\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! Literal.Factory.is( propertyValue ) ) continue;\n\t\t\tif( ! Literal.Factory.hasType( propertyValue, NS.XSD.DataType.string ) ) continue;\n\n\t\t\tlet languageTag:string = propertyValue[ \"@language\" ];\n\t\t\tif( ! languageTag ) continue;\n\n\t\t\tpropertyLanguageMap[ languageTag ] = Literal.Factory.parse( propertyValue );\n\t\t}\n\n\t\treturn propertyLanguageMap;\n\t}\n\n\tstatic getList( propertyValues:Array<any> ):List.Class {\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! List.Factory.is( propertyValue ) ) continue;\n\n\t\t\treturn propertyValue;\n\t\t}\n\t\treturn null;\n\t}\n\n\tstatic parseValue( propertyValue:Class, pointerLibrary:Pointer.Library ):any {\n\t\tif( Literal.Factory.is( propertyValue ) ) {\n\t\t\treturn Literal.Factory.parse( <any> propertyValue );\n\t\t} else if( RDFNode.Factory.is( propertyValue ) ) {\n\t\t\treturn pointerLibrary.getPointer( propertyValue[ \"@id\" ] );\n\t\t} else if( List.Factory.is( propertyValue ) ) {\n\t\t\tlet parsedValue:Array<any> = [];\n\t\t\tlet listValues:Array<any> = propertyValue[ \"@list\" ];\n\t\t\tfor( let listValue of listValues ) {\n\t\t\t\tparsedValue.push( this.parseValue( listValue, pointerLibrary ) );\n\t\t\t}\n\t\t\treturn parsedValue;\n\t\t} else {\n\t\t\t// TODO: What else could it be?\n\t\t}\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}