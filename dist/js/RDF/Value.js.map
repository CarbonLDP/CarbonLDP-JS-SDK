{"version":3,"sources":["RDF/Value.ts"],"names":["Util.getPropertyPointer","Util.getPropertyLiteral","Util.getPropertyList","Util.getPropertyPointerList","Util.getPropertyLiteralList","Util.getProperties","Util.getPropertyPointers","Util.getPropertyURIs","Util.getPropertyLiterals","Util.getPropertyLanguageMap","Util.getList","Util.parseValue"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iDAmC4BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAaAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAkBJC,aAAcA,OAAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAeAC,aAAcA,OAAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAkBAC,aAAcA,OAAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAgBIC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAaAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAgBAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAcAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mDAeAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mDAcAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uDAgBHC","file":"RDF/Value.js","sourcesContent":["import * as List from \"./List\";\nimport * as Literal from \"./Literal\";\nimport * as NS from \"./../NS\";\nimport * as Pointer from \"./../Pointer\";\nimport * as RDFNode from \"./RDFNode\";\n\nexport interface Class {\n\t\"@id\"?:string;\n\t\"@type\"?:string;\n\t\"@value\"?:string;\n}\n\nexport class Util {\n\tstatic areEqual( value1:Class, value2:Class ):boolean {\n\t\tif ( Literal.Factory.is( value1 ) && Literal.Factory.is( value2 ) ) {\n\t\t\treturn Literal.Util.areEqual( <Literal.Class> value1, <Literal.Class> value2 );\n\t\t} else if ( RDFNode.Factory.is( value1 ) && RDFNode.Factory.is( value2 ) ) {\n\t\t\treturn RDFNode.Util.areEqual( <RDFNode.Class> value1, <RDFNode.Class> value2 );\n\t\t} else return false;\n\t}\n\n\tstatic getProperty( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\t\tif( ! propertyValues.length ) return null;\n\n\t\tlet propertyValue:any = propertyValues[ 0 ];\n\n\t\treturn Util.parseValue( propertyValue, pointerLibrary );\n\t}\n\n\tstatic getPropertyPointer( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! RDFNode.Factory.is( propertyValue ) ) continue;\n\n\t\t\treturn pointerLibrary.getPointer( propertyValue[ \"@id\" ] );\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tstatic getPropertyLiteral( expandedObject:any, propertyURI:string, literalType:string ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! Literal.Factory.is( propertyValue ) ) continue;\n\t\t\tif( ! Literal.Factory.hasType( propertyValue, literalType ) ) continue;\n\n\t\t\treturn Literal.Factory.parse( propertyValue );\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tstatic getPropertyList( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyList:List.Class = Util.getList( propertyValues );\n\t\tif( ! propertyList ) return null;\n\n\t\tlet listValues:Array<any> = [];\n\t\tfor( let listValue of propertyList[ \"@list\" ] ) {\n\t\t\tlistValues.push( Util.parseValue( listValue, pointerLibrary ) );\n\t\t}\n\n\t\treturn listValues;\n\t}\n\n\tstatic getPropertyPointerList( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyList:List.Class = Util.getList( propertyValues );\n\t\tif( ! propertyList ) return null;\n\n\t\tlet listPointers:Array<any> = [];\n\t\tfor( let listValue of propertyList[ \"@list\" ] ) {\n\t\t\tif( ! RDFNode.Factory.is( listValue ) ) continue;\n\n\t\t\tlet pointer:Pointer.Class = pointerLibrary.getPointer( listValue[ \"@id\" ] );\n\t\t\tlistPointers.push( pointer );\n\t\t}\n\n\t\treturn listPointers;\n\t}\n\n\tstatic getPropertyLiteralList( expandedObject:any, propertyURI:string, literalType:string ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyList:List.Class = Util.getList( propertyValues );\n\t\tif( ! propertyList ) return null;\n\n\t\tlet listLiterals:Array<any> = [];\n\t\tfor( let listValue of propertyList[ \"@list\" ] ) {\n\t\t\tif( ! Literal.Factory.is( listValue ) ) continue;\n\t\t\tif( ! Literal.Factory.hasType( <any> listValue, literalType ) ) continue;\n\n\t\t\tlistLiterals.push( Literal.Factory.parse( <any> listValue ) );\n\t\t}\n\n\t\treturn listLiterals;\n\t}\n\n\tstatic getProperties( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\t\tif( ! propertyValues.length ) return null;\n\n\t\tlet properties:Array<any> = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tproperties.push( Util.parseValue( propertyValue, pointerLibrary ) );\n\t\t}\n\n\t\treturn properties;\n\t}\n\n\tstatic getPropertyPointers( expandedObject:any, propertyURI:string, pointerLibrary:Pointer.Library ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\t\tif( ! propertyValues.length ) return null;\n\n\t\tlet propertyPointers:Array<any> = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! RDFNode.Factory.is( propertyValue ) ) continue;\n\n\t\t\tlet pointer:Pointer.Class = pointerLibrary.getPointer( propertyValue[ \"@id\" ] );\n\t\t\tpropertyPointers.push( pointer );\n\t\t}\n\n\t\treturn propertyPointers;\n\t}\n\n\tstatic getPropertyURIs( expandedObject:any, propertyURI:string ):string[] {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\t\tif( ! propertyValues.length ) return null;\n\n\t\tlet propertyURIs:string[] = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! RDFNode.Factory.is( propertyValue ) ) continue;\n\n\t\t\tpropertyURIs.push( propertyValue[ \"@id\" ] );\n\t\t}\n\n\t\treturn propertyURIs;\n\t}\n\n\tstatic getPropertyLiterals( expandedObject:any, propertyURI:string, literalType:string ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyLiterals:Array<any> = [];\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! Literal.Factory.is( propertyValue ) ) continue;\n\t\t\tif( ! Literal.Factory.hasType( propertyValue, literalType ) ) continue;\n\n\t\t\tpropertyLiterals.push( Literal.Factory.parse( propertyValue ) );\n\t\t}\n\n\t\treturn propertyLiterals;\n\t}\n\n\tstatic getPropertyLanguageMap( expandedObject:any, propertyURI:string ):any {\n\t\tlet propertyValues:Array<any> = expandedObject[ propertyURI ];\n\t\tif( ! propertyValues ) return null;\n\n\t\tlet propertyLanguageMap:any = {};\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! Literal.Factory.is( propertyValue ) ) continue;\n\t\t\tif( ! Literal.Factory.hasType( propertyValue, NS.XSD.DataType.string ) ) continue;\n\n\t\t\tlet languageTag:string = propertyValue[ \"@language\" ];\n\t\t\tif( ! languageTag ) continue;\n\n\t\t\tpropertyLanguageMap[ languageTag ] = Literal.Factory.parse( propertyValue );\n\t\t}\n\n\t\treturn propertyLanguageMap;\n\t}\n\n\tstatic getList( propertyValues:Array<any> ):List.Class {\n\t\tfor( let propertyValue of propertyValues ) {\n\t\t\tif( ! List.Factory.is( propertyValue ) ) continue;\n\n\t\t\treturn propertyValue;\n\t\t}\n\t\treturn null;\n\t}\n\n\tstatic parseValue( propertyValue:Class, pointerLibrary:Pointer.Library ):any {\n\t\tif( Literal.Factory.is( propertyValue ) ) {\n\t\t\treturn Literal.Factory.parse( <any> propertyValue );\n\t\t} else if( RDFNode.Factory.is( propertyValue ) ) {\n\t\t\treturn pointerLibrary.getPointer( propertyValue[ \"@id\" ] );\n\t\t} else if( List.Factory.is( propertyValue ) ) {\n\t\t\tlet parsedValue:Array<any> = [];\n\t\t\tlet listValues:Array<any> = propertyValue[ \"@list\" ];\n\t\t\tfor( let listValue of listValues ) {\n\t\t\t\tparsedValue.push( this.parseValue( listValue, pointerLibrary ) );\n\t\t\t}\n\t\t\treturn parsedValue;\n\t\t} else {\n\t\t\t// TODO: What else could it be?\n\t\t}\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}