{"version":3,"sources":["RDF/Document.ts"],"names":["Util.getResources"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iDA+CuBA","file":"RDF/Document.js","sourcesContent":["import * as Value from \"./Value\";\nimport * as RDFNode from \"./RDFNode\";\nimport * as Utils from \"../Utils\";\nimport * as URI from \"./URI\";\n\nexport interface Class {\n\t\"@id\"?:string;\n\t\"@graph\":RDFNode.Class[];\n}\n\nexport class Factory {\n\tstatic is( object:Object ):boolean {\n\t\treturn (\n\t\t\tUtils.hasProperty( object, \"@graph\" )\n\t\t);\n\t}\n\n\tstatic create( resources:RDFNode.Class[] ):Class;\n\tstatic create( resources:RDFNode.Class[], uri?:string ):Class {\n\t\tlet document:any = uri ? RDFNode.Factory.create( uri ) : {};\n\t\tdocument[ \"@graph\" ] = resources;\n\n\t\treturn document;\n\t}\n}\n\nexport class Util {\n\tstatic getDocuments( object:Object[] ):Class[];\n\tstatic getDocuments( object:Object ):Class[];\n\tstatic getDocuments( value:any ):Class[] {\n\t\tif ( Utils.isArray( value ) ) {\n\t\t\tif ( value.length === 0 ) return value;\n\t\t\tif ( Factory.is( value[ 0 ] ) ) return value;\n\t\t\tif ( RDFNode.Factory.is( value[ 0 ] ) ) return [ Factory.create( value ) ];\n\t\t} else if ( Utils.isObject( value ) ) {\n\t\t\tif ( Factory.is( value ) ) return [ value ];\n\t\t\tif ( RDFNode.Factory.is( value ) ) return [ Factory.create( [ value ] ) ];\n\t\t} else throw new Error( \"IllegalArgument: The value structure isn't valid.\" );\n\t}\n\n\tstatic getResources( objects:Object[] ):RDFNode.Class[];\n\tstatic getResources( object:Object ):RDFNode.Class[];\n\tstatic getResources( value:any ):RDFNode.Class[] {\n\t\tlet documents:Class[] = Util.getDocuments( value );\n\n\t\tlet resources:RDFNode.Class[] = [];\n\n\t\tfor( let document of documents ) {\n\t\t\tresources = resources.concat( document[ \"@graph\"] );\n\t\t}\n\n\t\treturn resources;\n\t}\n\n\tstatic getDocumentResources( document:RDFNode.Class[] ):RDFNode.Class[];\n\tstatic getDocumentResources( document:Class ):RDFNode.Class[];\n\tstatic getDocumentResources( document:any ):RDFNode.Class[] {\n\t\tlet resources:RDFNode.Class[] = Util.getResources( document );\n\t\tlet documentResources:RDFNode.Class[] = [];\n\n\t\tfor ( let i:number = 0, length:number = resources.length; i < length; i ++ ) {\n\t\t\tlet resource:RDFNode.Class = resources[ i ];\n\t\t\tlet uri:string = resource[ \"@id\" ];\n\t\t\tif ( ! uri ) continue;\n\n\t\t\tif ( ! URI.Util.hasFragment( uri ) && ! URI.Util.isBNodeID( uri ) ) documentResources.push( resource );\n\t\t}\n\n\t\treturn documentResources;\n\t}\n\n\tstatic getFragmentResources( document:RDFNode.Class[], documentResource?:RDFNode.Class ):RDFNode.Class[];\n\tstatic getFragmentResources( document:Class, documentResource?:RDFNode.Class ):RDFNode.Class[];\n\tstatic getFragmentResources( document:RDFNode.Class[], documentResource?:string ):RDFNode.Class[];\n\tstatic getFragmentResources( document:Class, documentResource?:string ):RDFNode.Class[];\n\tstatic getFragmentResources( document:any, documentResource?:any ):RDFNode.Class[] {\n\t\tlet resources:RDFNode.Class[] = Util.getResources( document );\n\n\t\tlet documentURIToMatch:string = null;\n\t\tif ( documentResource ) {\n\t\t\tif ( Utils.isString( documentResource ) ) {\n\t\t\t\tdocumentURIToMatch = documentResource;\n\t\t\t} else documentURIToMatch = documentResource[ \"@id\" ];\n\t\t}\n\n\t\tlet fragmentResources:RDFNode.Class[] = [];\n\n\t\tfor ( let i:number = 0, length:number = resources.length; i < length; i ++ ) {\n\t\t\tlet resource:RDFNode.Class = resources[ i ];\n\t\t\tlet uri:string = resource[ \"@id\" ];\n\n\t\t\tif ( ! uri ) continue;\n\t\t\tif ( ! URI.Util.hasFragment( uri ) ) continue;\n\n\t\t\tif ( ! documentURIToMatch ) {\n\t\t\t\tfragmentResources.push( resource );\n\t\t\t} else {\n\t\t\t\tlet documentURI:string = URI.Util.getDocumentURI( uri );\n\t\t\t\tif ( documentURI === documentURIToMatch ) fragmentResources.push( resource );\n\t\t\t}\n\t\t}\n\n\t\treturn fragmentResources;\n\t}\n\n\tstatic getBNodeResources( document:Class ):RDFNode.Class[] {\n\t\tlet resources:RDFNode.Class[] = Util.getResources( document );\n\n\t\tlet bnodes:RDFNode.Class[] = [];\n\t\tfor( let i:number = 0, length:number = resources.length; i < length; i++ ) {\n\t\t\tlet resource:RDFNode.Class = resources[i];\n\t\t\tif( ! ( \"@id\" in resource ) || URI.Util.isBNodeID( resource[\"@id\"] ) ) bnodes.push( resource );\n\t\t}\n\n\t\treturn bnodes;\n\t}\n}\n"],"sourceRoot":"/source/"}