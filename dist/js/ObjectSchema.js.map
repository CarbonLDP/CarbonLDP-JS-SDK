{"version":3,"sources":["ObjectSchema.ts"],"names":["ContainerType","DigestedObjectSchema","DigestedObjectSchema.constructor","DigestedPropertyDefinition","DigestedPropertyDefinition.constructor","Digester","Digester.constructor","Digester.digestSchema","Digester.combineDigestedObjectSchemas","Digester.digestSingleSchema","Digester.resolvePrefixedURIs","Digester.resolvePrefixedURI"],"mappings":"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","file":"ObjectSchema.js","sourcesContent":["/// <reference path=\"./../typings/typings.d.ts\" />\n\nimport * as Errors from \"./Errors\";\nimport * as NS from \"./NS\";\nimport * as Pointer from \"./Pointer\";\nimport * as RDF from \"./RDF\";\nimport * as Utils from \"./Utils\";\n\nexport interface PropertyDefinition {\n\t\"@id\"?:string;\n\t\"@type\"?:string;\n\t\"@language\"?:string;\n\t\"@container\"?:string;\n}\n\nexport interface Class {\n\t\"@base\"?:string;\n\t\"@index\"?:Object;\n\t\"@language\"?:string;\n\t\"@reverse\"?:Object;\n\t\"@vocab\"?:string;\n\t[ name:string ]:(string | PropertyDefinition);\n}\n\nexport enum ContainerType {\n\tSET,\n\tLIST,\n\tLANGUAGE\n}\n\nexport class DigestedObjectSchema {\n\tbase:string;\n\tprefixes:Map<string, RDF.URI.Class>;\n\tproperties:Map<string, DigestedPropertyDefinition>;\n\tprefixedURIs:Map<string, RDF.URI.Class[]>;\n\n\tconstructor() {\n\t\tthis.base = \"\";\n\t\tthis.prefixes = new Map<string, RDF.URI.Class>();\n\t\tthis.properties = new Map<string, DigestedPropertyDefinition>();\n\t\tthis.prefixedURIs = new Map<string, RDF.URI.Class[]>();\n\t}\n}\n\nexport class DigestedPropertyDefinition {\n\turi:RDF.URI.Class = null;\n\tliteral:boolean = null;\n\tliteralType:RDF.URI.Class = null;\n\tlanguage:string = null;\n\tcontainerType:ContainerType = null;\n}\n\nexport interface Resolver {\n\tgetSchemaFor( object:Object ):DigestedObjectSchema;\n}\n\nexport class Digester {\n\tstatic digestSchema( schemas:Class[] ):DigestedObjectSchema;\n\tstatic digestSchema( schema:Class ):DigestedObjectSchema;\n\tstatic digestSchema( schemaOrSchemas:any ):DigestedObjectSchema {\n\t\tif( ! Utils.isArray( schemaOrSchemas ) ) return Digester.digestSingleSchema( schemaOrSchemas );\n\n\t\tlet digestedSchemas:DigestedObjectSchema[] = [];\n\t\tfor( let schema of <Class[]> schemaOrSchemas ) {\n\t\t\tdigestedSchemas.push( Digester.digestSingleSchema( schema ) );\n\t\t}\n\n\t\treturn Digester.combineDigestedObjectSchemas( digestedSchemas );\n\t}\n\n\tstatic combineDigestedObjectSchemas( digestedSchemas:DigestedObjectSchema[] ):DigestedObjectSchema {\n\t\tif( digestedSchemas.length === 0 ) throw new Errors.IllegalArgumentError( \"At least one DigestedObjectSchema needs to be specified.\" );\n\n\t\tlet combinedSchema:DigestedObjectSchema = digestedSchemas.shift();\n\n\t\tfor( let digestedSchema of digestedSchemas ) {\n\t\t\tUtils.M.extend( combinedSchema.prefixes, digestedSchema.prefixes );\n\t\t\tUtils.M.extend( combinedSchema.prefixedURIs, digestedSchema.prefixedURIs );\n\t\t\tUtils.M.extend( combinedSchema.properties, digestedSchema.properties );\n\t\t}\n\n\t\tDigester.resolvePrefixedURIs( combinedSchema );\n\n\t\treturn combinedSchema;\n\t}\n\n\tprivate static digestSingleSchema( schema:Class ):DigestedObjectSchema {\n\t\tlet digestedSchema:DigestedObjectSchema = new DigestedObjectSchema();\n\n\t\tfor( let propertyName in schema ) {\n\t\t\tif( ! schema.hasOwnProperty( propertyName ) ) continue;\n\n\t\t\tif( propertyName === \"@reverse\" ) continue;\n\t\t\tif( propertyName === \"@index\" ) continue;\n\t\t\tif( propertyName === \"@base\" ) continue;\n\t\t\tif( propertyName === \"@vocab\" ) continue;\n\n\t\t\tlet propertyValue:( string | PropertyDefinition ) = schema[ propertyName ];\n\n\t\t\tif( Utils.isString( propertyValue ) ) {\n\t\t\t\tif( RDF.URI.Util.isPrefixed( propertyName ) ) throw new Errors.IllegalArgumentError( \"A prefixed property cannot be equal to another URI.\" );\n\n\t\t\t\tlet uri:RDF.URI.Class = new RDF.URI.Class( <string> propertyValue );\n\t\t\t\tif( RDF.URI.Util.isPrefixed( uri.stringValue ) ) uri = Digester.resolvePrefixedURI( uri, digestedSchema );\n\t\t\t\tdigestedSchema.prefixes.set( propertyName, uri );\n\t\t\t} else if( !! propertyValue && Utils.isObject( propertyValue ) ) {\n\t\t\t\tlet schemaDefinition:PropertyDefinition = <PropertyDefinition> propertyValue;\n\t\t\t\tlet digestedDefinition:DigestedPropertyDefinition = new DigestedPropertyDefinition();\n\n\t\t\t\tif( \"@id\" in schemaDefinition ) {\n\t\t\t\t\tif( RDF.URI.Util.isPrefixed( propertyName ) ) throw new Errors.IllegalArgumentError( \"A prefixed property cannot have assigned another URI.\" );\n\n\t\t\t\t\tif( ! Utils.isString( schemaDefinition[ \"@id\" ] ) ) throw new Errors.IllegalArgumentError( \"@id needs to point to a string\" );\n\t\t\t\t\tdigestedDefinition.uri = Digester.resolvePrefixedURI( new RDF.URI.Class( schemaDefinition[ \"@id\" ] ), digestedSchema );\n\t\t\t\t} else if( RDF.URI.Util.isPrefixed( propertyName ) ) {\n\t\t\t\t\tdigestedDefinition.uri = Digester.resolvePrefixedURI( new RDF.URI.Class( propertyName ), digestedSchema );\n\t\t\t\t} else {\n\t\t\t\t\t// TODO: Handle @vocab or @base case\n\t\t\t\t\tthrow new Errors.IllegalArgumentError( \"Every property definition needs to have a uri defined.\" );\n\t\t\t\t}\n\n\t\t\t\tif( \"@type\" in schemaDefinition ) {\n\t\t\t\t\tif( ! Utils.isString( schemaDefinition[ \"@type\" ] ) ) throw new Errors.IllegalArgumentError( \"@type needs to point to a string\" );\n\n\t\t\t\t\tif( schemaDefinition[ \"@type\" ] === \"@id\" ) {\n\t\t\t\t\t\tdigestedDefinition.literal = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdigestedDefinition.literal = true;\n\t\t\t\t\t\tdigestedDefinition.literalType = Digester.resolvePrefixedURI( new RDF.URI.Class( schemaDefinition[ \"@type\" ] ), digestedSchema );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif( \"@language\" in schemaDefinition ) {\n\t\t\t\t\tif( ! Utils.isString( schemaDefinition[ \"@language\" ] ) ) throw new Errors.IllegalArgumentError( \"@language needs to point to a string\" );\n\t\t\t\t\tdigestedDefinition.language = schemaDefinition[ \"@language\" ];\n\t\t\t\t}\n\n\t\t\t\tif( \"@container\" in schemaDefinition ) {\n\t\t\t\t\tswitch( schemaDefinition[ \"@container\" ] ) {\n\t\t\t\t\t\tcase \"@set\":\n\t\t\t\t\t\t\tdigestedDefinition.containerType = ContainerType.SET;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"@list\":\n\t\t\t\t\t\t\tdigestedDefinition.containerType = ContainerType.LIST;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"@language\":\n\t\t\t\t\t\t\tif( digestedDefinition.language !== null ) throw new Errors.IllegalArgumentError( \"@container cannot be set to @language when the property definition already contains an @language tag.\" );\n\t\t\t\t\t\t\tdigestedDefinition.containerType = ContainerType.LANGUAGE;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthrow new Errors.IllegalArgumentError( \"@container needs to be equal to '@list', '@set', or '@language'\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdigestedSchema.properties.set( propertyName, digestedDefinition );\n\t\t\t} else {\n\t\t\t\tthrow new Errors.IllegalArgumentError( \"ObjectSchema Properties can only have string values or object values.\" );\n\t\t\t}\n\t\t}\n\n\t\tDigester.resolvePrefixedURIs( digestedSchema );\n\n\t\treturn digestedSchema;\n\t}\n\n\tprivate static resolvePrefixedURIs( digestedSchema:DigestedObjectSchema ):DigestedObjectSchema {\n\t\tdigestedSchema.prefixes.forEach( ( prefixValue:RDF.URI.Class, prefixName:string ) => {\n\t\t\tif( ! digestedSchema.prefixedURIs.has( prefixName ) ) return;\n\n\t\t\tlet prefixedURIs:RDF.URI.Class[] = digestedSchema.prefixedURIs.get( prefixName );\n\t\t\tfor( let prefixedURI of prefixedURIs ) {\n\t\t\t\tDigester.resolvePrefixedURI( prefixedURI, digestedSchema );\n\t\t\t}\n\n\t\t\tdigestedSchema.prefixedURIs.delete( prefixName );\n\t\t} );\n\n\t\treturn digestedSchema;\n\t}\n\n\tprivate static resolvePrefixedURI( uri:RDF.URI.Class, digestedSchema:DigestedObjectSchema ):RDF.URI.Class {\n\t\tif( ! RDF.URI.Util.isPrefixed( uri.stringValue ) ) return uri;\n\n\t\tlet uriParts:string[] = uri.stringValue.split( \":\" );\n\t\tlet prefix:string = uriParts[ 0 ];\n\t\tlet slug:string = uriParts[ 1 ];\n\n\t\tif( digestedSchema.prefixes.has( prefix ) ) {\n\t\t\turi.stringValue = digestedSchema.prefixes.get( prefix ) + slug;\n\t\t} else {\n\t\t\tif( ! digestedSchema.prefixedURIs.has( prefix ) ) digestedSchema.prefixedURIs.set( prefix, [] );\n\t\t\tdigestedSchema.prefixedURIs.get( prefix ).push( uri );\n\t\t}\n\n\t\treturn uri;\n\t}\n}\n\n\nexport default Class;\n"],"sourceRoot":"/source/"}