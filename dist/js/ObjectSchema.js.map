{"version":3,"sources":["ObjectSchema.ts"],"names":[],"mappings":"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","file":"ObjectSchema.js","sourcesContent":["/// <reference path=\"./../typings/typings.d.ts\" />\n\nimport * as Errors from \"./Errors\";\nimport * as NS from \"./NS\";\nimport * as Pointer from \"./Pointer\";\nimport * as RDF from \"./RDF\";\nimport * as Utils from \"./Utils\";\n\nexport interface PropertyDefinition {\n\t\"@id\"?:string;\n\t\"@type\"?:string;\n\t\"@language\"?:string;\n\t\"@container\"?:string;\n}\n\nexport interface Class {\n\t\"@base\"?:string;\n\t\"@index\"?:Object;\n\t\"@language\"?:string;\n\t\"@reverse\"?:Object;\n\t\"@vocab\"?:string;\n\t[ name:string ]:(string | PropertyDefinition);\n}\n\nexport enum ContainerType {\n\tSET,\n\tLIST,\n\tLANGUAGE\n}\n\nexport class DigestedObjectSchema {\n\tbase:string;\n\tprefixes:Map<string, RDF.URI.Class>;\n\tproperties:Map<string, DigestedPropertyDefinition>;\n\tprefixedURIs:Map<string, RDF.URI.Class[]>;\n\n\tconstructor() {\n\t\tthis.base = \"\";\n\t\tthis.prefixes = new Map<string, RDF.URI.Class>();\n\t\tthis.properties = new Map<string, DigestedPropertyDefinition>();\n\t\tthis.prefixedURIs = new Map<string, RDF.URI.Class[]>();\n\t}\n}\n\nexport class DigestedPropertyDefinition {\n\turi:RDF.URI.Class = null;\n\tliteral:boolean = null;\n\tliteralType:RDF.URI.Class = null;\n\tlanguage:string = null;\n\tcontainerType:ContainerType = null;\n}\n\nexport interface Resolver {\n\tgetSchemaFor( object:Object ):DigestedObjectSchema;\n}\n\nexport class Digester {\n\tstatic digestSchema( schemas:Class[] ):DigestedObjectSchema;\n\tstatic digestSchema( schema:Class ):DigestedObjectSchema;\n\tstatic digestSchema( schemaOrSchemas:any ):DigestedObjectSchema {\n\t\tif( ! Utils.isArray( schemaOrSchemas ) ) return Digester.digestSingleSchema( schemaOrSchemas );\n\n\t\tlet digestedSchemas:DigestedObjectSchema[] = [];\n\t\tfor( let schema of <Class[]> schemaOrSchemas ) {\n\t\t\tdigestedSchemas.push( Digester.digestSingleSchema( schema ) );\n\t\t}\n\n\t\treturn Digester.combineDigestedObjectSchemas( digestedSchemas );\n\t}\n\n\tstatic combineDigestedObjectSchemas( digestedSchemas:DigestedObjectSchema[] ):DigestedObjectSchema {\n\t\tif( digestedSchemas.length === 0 ) throw new Errors.IllegalArgumentError( \"At least one DigestedObjectSchema needs to be specified.\" );\n\n\t\tlet combinedSchema:DigestedObjectSchema = digestedSchemas.shift();\n\n\t\tfor( let digestedSchema of digestedSchemas ) {\n\t\t\tUtils.M.extend( combinedSchema.prefixes, digestedSchema.prefixes );\n\t\t\tUtils.M.extend( combinedSchema.prefixedURIs, digestedSchema.prefixedURIs );\n\t\t\tUtils.M.extend( combinedSchema.properties, digestedSchema.properties );\n\t\t}\n\n\t\tDigester.resolvePrefixedURIs( combinedSchema );\n\n\t\treturn combinedSchema;\n\t}\n\n\tprivate static digestSingleSchema( schema:Class ):DigestedObjectSchema {\n\t\tlet digestedSchema:DigestedObjectSchema = new DigestedObjectSchema();\n\n\t\tfor( let propertyName in schema ) {\n\t\t\tif( ! schema.hasOwnProperty( propertyName ) ) continue;\n\n\t\t\tif( propertyName === \"@reverse\" ) continue;\n\t\t\tif( propertyName === \"@index\" ) continue;\n\t\t\tif( propertyName === \"@base\" ) continue;\n\t\t\tif( propertyName === \"@vocab\" ) continue;\n\n\t\t\tlet propertyValue:( string | PropertyDefinition ) = schema[ propertyName ];\n\n\t\t\tif( Utils.isString( propertyValue ) ) {\n\t\t\t\tif( RDF.URI.Util.isPrefixed( propertyName ) ) throw new Errors.IllegalArgumentError( \"A prefixed property cannot be equal to another URI.\" );\n\n\t\t\t\tlet uri:RDF.URI.Class = new RDF.URI.Class( <string> propertyValue );\n\t\t\t\tif( RDF.URI.Util.isPrefixed( uri.stringValue ) ) uri = Digester.resolvePrefixedURI( uri, digestedSchema );\n\t\t\t\tdigestedSchema.prefixes.set( propertyName, uri );\n\t\t\t} else if( !! propertyValue && Utils.isObject( propertyValue ) ) {\n\t\t\t\tlet schemaDefinition:PropertyDefinition = <PropertyDefinition> propertyValue;\n\t\t\t\tlet digestedDefinition:DigestedPropertyDefinition = new DigestedPropertyDefinition();\n\n\t\t\t\tif( \"@id\" in schemaDefinition ) {\n\t\t\t\t\tif( RDF.URI.Util.isPrefixed( propertyName ) ) throw new Errors.IllegalArgumentError( \"A prefixed property cannot have assigned another URI.\" );\n\n\t\t\t\t\tif( ! Utils.isString( schemaDefinition[ \"@id\" ] ) ) throw new Errors.IllegalArgumentError( \"@id needs to point to a string\" );\n\t\t\t\t\tdigestedDefinition.uri = Digester.resolvePrefixedURI( new RDF.URI.Class( schemaDefinition[ \"@id\" ] ), digestedSchema );\n\t\t\t\t} else if( RDF.URI.Util.isPrefixed( propertyName ) ) {\n\t\t\t\t\tdigestedDefinition.uri = Digester.resolvePrefixedURI( new RDF.URI.Class( propertyName ), digestedSchema );\n\t\t\t\t} else {\n\t\t\t\t\t// TODO: Handle @vocab or @base case\n\t\t\t\t\tthrow new Errors.IllegalArgumentError( \"Every property definition needs to have a uri defined.\" );\n\t\t\t\t}\n\n\t\t\t\tif( \"@type\" in schemaDefinition ) {\n\t\t\t\t\tif( ! Utils.isString( schemaDefinition[ \"@type\" ] ) ) throw new Errors.IllegalArgumentError( \"@type needs to point to a string\" );\n\n\t\t\t\t\tif( schemaDefinition[ \"@type\" ] === \"@id\" ) {\n\t\t\t\t\t\tdigestedDefinition.literal = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdigestedDefinition.literal = true;\n\t\t\t\t\t\tdigestedDefinition.literalType = Digester.resolvePrefixedURI( new RDF.URI.Class( schemaDefinition[ \"@type\" ] ), digestedSchema );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif( \"@language\" in schemaDefinition ) {\n\t\t\t\t\tif( ! Utils.isString( schemaDefinition[ \"@language\" ] ) ) throw new Errors.IllegalArgumentError( \"@language needs to point to a string\" );\n\t\t\t\t\tdigestedDefinition.language = schemaDefinition[ \"@language\" ];\n\t\t\t\t}\n\n\t\t\t\tif( \"@container\" in schemaDefinition ) {\n\t\t\t\t\tswitch( schemaDefinition[ \"@container\" ] ) {\n\t\t\t\t\t\tcase \"@set\":\n\t\t\t\t\t\t\tdigestedDefinition.containerType = ContainerType.SET;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"@list\":\n\t\t\t\t\t\t\tdigestedDefinition.containerType = ContainerType.LIST;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"@language\":\n\t\t\t\t\t\t\tif( digestedDefinition.language !== null ) throw new Errors.IllegalArgumentError( \"@container cannot be set to @language when the property definition already contains an @language tag.\" );\n\t\t\t\t\t\t\tdigestedDefinition.containerType = ContainerType.LANGUAGE;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthrow new Errors.IllegalArgumentError( \"@container needs to be equal to '@list', '@set', or '@language'\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdigestedSchema.properties.set( propertyName, digestedDefinition );\n\t\t\t} else {\n\t\t\t\tthrow new Errors.IllegalArgumentError( \"ObjectSchema Properties can only have string values or object values.\" );\n\t\t\t}\n\t\t}\n\n\t\tDigester.resolvePrefixedURIs( digestedSchema );\n\n\t\treturn digestedSchema;\n\t}\n\n\tprivate static resolvePrefixedURIs( digestedSchema:DigestedObjectSchema ):DigestedObjectSchema {\n\t\tdigestedSchema.prefixes.forEach( ( prefixValue:RDF.URI.Class, prefixName:string ) => {\n\t\t\tif( ! digestedSchema.prefixedURIs.has( prefixName ) ) return;\n\n\t\t\tlet prefixedURIs:RDF.URI.Class[] = digestedSchema.prefixedURIs.get( prefixName );\n\t\t\tfor( let prefixedURI of prefixedURIs ) {\n\t\t\t\tDigester.resolvePrefixedURI( prefixedURI, digestedSchema );\n\t\t\t}\n\n\t\t\tdigestedSchema.prefixedURIs.delete( prefixName );\n\t\t} );\n\n\t\treturn digestedSchema;\n\t}\n\n\tprivate static resolvePrefixedURI( uri:RDF.URI.Class, digestedSchema:DigestedObjectSchema ):RDF.URI.Class {\n\t\tif( ! RDF.URI.Util.isPrefixed( uri.stringValue ) ) return uri;\n\n\t\tlet uriParts:string[] = uri.stringValue.split( \":\" );\n\t\tlet prefix:string = uriParts[ 0 ];\n\t\tlet slug:string = uriParts[ 1 ];\n\n\t\tif( digestedSchema.prefixes.has( prefix ) ) {\n\t\t\turi.stringValue = digestedSchema.prefixes.get( prefix ) + slug;\n\t\t} else {\n\t\t\tif( ! digestedSchema.prefixedURIs.has( prefix ) ) digestedSchema.prefixedURIs.set( prefix, [] );\n\t\t\tdigestedSchema.prefixedURIs.get( prefix ).push( uri );\n\t\t}\n\n\t\treturn uri;\n\t}\n}\n\n\nexport default Class;\n"],"sourceRoot":"/source/"}