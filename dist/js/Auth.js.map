{"version":3,"sources":["Auth.ts"],"names":["Class","Class.getAuthenticator"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BA2CkBA,kEAAoBA;;;;;;;;4BASFA,iEAAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iDAuC1BC,KAAKA,cAALA","file":"Auth.js","sourcesContent":["/// <reference path=\"./../typings/typings.d.ts\" />\n\nimport AuthenticationToken from \"./Auth/AuthenticationToken\";\nimport Authenticator from \"./Auth/Authenticator\";\nimport BasicAuthenticator from \"./Auth/BasicAuthenticator\";\nimport * as Token from \"./Auth/Token\";\nimport TokenAuthenticator from \"./Auth/TokenAuthenticator\";\nimport UsernameAndPasswordToken from \"./Auth/UsernameAndPasswordToken\";\n\nimport * as HTTP from \"./HTTP\";\nimport * as Errors from \"./Errors\";\nimport Context from \"./Context\";\nimport * as Utils from \"./Utils\";\n\nexport {\n\tAuthenticationToken,\n\tAuthenticator,\n\tBasicAuthenticator,\n\tToken,\n\tTokenAuthenticator,\n\tUsernameAndPasswordToken\n}\n\nexport enum Method {\n\tBASIC,\n\tTOKEN\n}\n\nexport class Class {\n\tprivate context:Context;\n\n\tprivate method:Method = null;\n\tprivate authenticators:Array<Authenticator<AuthenticationToken>>;\n\tprivate authenticator:Authenticator<AuthenticationToken>;\n\n\tconstructor( context:Context ) {\n\t\tthis.context = context;\n\n\t\tthis.authenticators = [];\n\t\tthis.authenticators.push( new TokenAuthenticator( this.context ) );\n\t\tthis.authenticators.push( new BasicAuthenticator() );\n\t}\n\n\tisAuthenticated( askParent:boolean = true ):boolean {\n\t\treturn (\n\t\t\t( this.authenticator && this.authenticator.isAuthenticated() ) ||\n\t\t\t( askParent && !! this.context.parentContext && this.context.parentContext.Auth.isAuthenticated() )\n\t\t);\n\t}\n\n\tauthenticate( username:string, password:string ):Promise<void>;\n\tauthenticate( authenticationToken:AuthenticationToken ):Promise<void>;\n\tauthenticate( usernameOrToken:any, password:string = null ):Promise<void> {\n\t\treturn new Promise<void>( ( resolve:( result:any ) => void, reject:( reject:Error ) => void ) => {\n\t\t\tif( ! usernameOrToken ) throw new Errors.IllegalArgumentError( \"Either a username or an authenticationToken are required.\" );\n\n\t\t\tlet authenticationToken:AuthenticationToken;\n\t\t\tif( Utils.isString( usernameOrToken ) ) {\n\t\t\t\tlet username:string = usernameOrToken;\n\t\t\t\tif( ! password ) throw new Errors.IllegalArgumentError( \"A password is required when providing a username.\" );\n\t\t\t\tauthenticationToken = new UsernameAndPasswordToken( username, password );\n\t\t\t} else {\n\t\t\t\tauthenticationToken = usernameOrToken;\n\t\t\t}\n\n\t\t\tif( this.authenticator ) this.clearAuthentication();\n\n\t\t\tthis.authenticator = this.getAuthenticator( authenticationToken );\n\n\t\t\tresolve( this.authenticator.authenticate( authenticationToken ) );\n\t\t});\n\t}\n\n\taddAuthentication( requestOptions:HTTP.Request.Options ):void {\n\t\tif( this.isAuthenticated( false ) ) {\n\t\t\tthis.authenticator.addAuthentication( requestOptions );\n\t\t} else if( !! this.context.parentContext ) {\n\t\t\tthis.context.parentContext.Auth.addAuthentication( requestOptions );\n\t\t} else {\n\t\t\tconsole.warn( \"There is no authentication to add to the request.\" );\n\t\t}\n\t}\n\n\tclearAuthentication():void {\n\t\tif( ! this.authenticator ) return;\n\n\t\tthis.authenticator.clearAuthentication();\n\t\tthis.authenticator = null;\n\t}\n\n\tprivate getAuthenticator( authenticationToken:AuthenticationToken ):Authenticator<AuthenticationToken> {\n\t\tfor( let authenticator of this.authenticators ) {\n\t\t\tif( authenticator.supports( authenticationToken ) ) return authenticator;\n\t\t}\n\n\t\tthrow new Errors.IllegalStateError( \"The configured authentication method isn\\'t supported.\" );\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}