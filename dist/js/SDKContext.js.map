{"version":3,"sources":["SDKContext.ts"],"names":["Class"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BA6EkBA,6DAAcA;;;;;;;;;;;;;;;4BAkBaA,qEAAkCA;;;;;;;;;;;;;;4BAY3DA,6DAAcA","file":"SDKContext.js","sourcesContent":["/// <reference path=\"./../typings/typings.d.ts\" />\n\nimport * as App from \"./App\";\nimport * as APIDescription from \"./APIDescription\";\nimport * as Auth from \"./Auth\";\nimport Context from \"./Context\";\nimport Documents from \"./Documents\";\nimport * as Errors from \"./Errors\";\nimport * as JSONLDConverter from \"./JSONLDConverter\";\nimport * as LDP from \"./LDP\";\nimport * as NS from \"./NS\";\nimport * as Pointer from \"./Pointer\";\nimport * as RDF from \"./RDF\";\nimport * as Utils from \"./Utils\";\nimport * as ObjectSchema from \"./ObjectSchema\";\n\nexport class Class implements Context {\n\t/* tslint:disable: variable-name */\n\tAuth:Auth.Class;\n\tDocuments:Documents;\n\t/* tslint:enable: variable-name */\n\n\tget parentContext():Context { return null; }\n\n\tprotected settings:Map<string, any>;\n\n\tprotected generalObjectSchema:ObjectSchema.DigestedObjectSchema;\n\tprotected typeObjectSchemaMap:Map<string, ObjectSchema.DigestedObjectSchema>;\n\n\tconstructor() {\n\t\tthis.settings = new Map<string, any>();\n\n\t\tthis.generalObjectSchema = new ObjectSchema.DigestedObjectSchema();\n\t\tthis.typeObjectSchemaMap = new Map<string, ObjectSchema.DigestedObjectSchema>();\n\n\t\tthis.Auth = new Auth.Class( this );\n\t\tthis.Documents = new Documents( this );\n\n\t\tthis.registerDefaultObjectSchemas();\n\t}\n\n\tgetBaseURI():string {\n\t\treturn this.resolve( \"\" );\n\t}\n\n\tresolve( relativeURI:string ):string {\n\t\treturn relativeURI;\n\t}\n\n\thasSetting( name:string ):boolean {\n\t\treturn (\n\t\t\t\tthis.settings.has( name ) ||\n\t\t\t\t( this.parentContext && this.parentContext.hasSetting( name ) )\n\t\t);\n\t}\n\n\tgetSetting( name:string ):any {\n\t\tif( this.settings.has( name ) ) return this.settings.get( name );\n\t\tif( this.parentContext && this.parentContext.hasSetting( name ) ) return this.parentContext.getSetting( name );\n\t\treturn null;\n\t}\n\n\tsetSetting( name:string, value:any ):any {\n\t\tthis.settings.set( name, value );\n\t}\n\n\tdeleteSetting( name:string ):any {\n\t\tthis.settings.delete( name );\n\t}\n\n\thasObjectSchema( type:string ):boolean {\n\t\tif( this.typeObjectSchemaMap.has( type ) ) return true;\n\t\tif( !! this.parentContext && this.parentContext.hasObjectSchema( type ) ) return true;\n\n\t\treturn false;\n\t}\n\n\tgetObjectSchema( type:string = null ):ObjectSchema.DigestedObjectSchema {\n\t\tif( !! type ) {\n\t\t\t// Type specific schema\n\t\t\tif( this.typeObjectSchemaMap.has( type ) ) return this.typeObjectSchemaMap.get( type );\n\t\t\tif( !! this.parentContext && this.parentContext.hasObjectSchema( type ) ) return this.parentContext.getObjectSchema( type );\n\n\t\t\treturn null;\n\t\t} else {\n\t\t\t// General schema\n\t\t\tif( !! this.generalObjectSchema ) return this.generalObjectSchema;\n\t\t\tif( !! this.parentContext ) return this.parentContext.getObjectSchema();\n\n\t\t\tthrow new Errors.IllegalStateError();\n\t\t}\n\t}\n\n\textendObjectSchema( type:string, objectSchema:ObjectSchema.Class ):void;\n\textendObjectSchema( objectSchema:ObjectSchema.Class ):void;\n\textendObjectSchema( typeOrObjectSchema:any, objectSchema:ObjectSchema.Class = null ):void {\n\t\tlet type:string = objectSchema ? typeOrObjectSchema : null;\n\t\tobjectSchema = !! objectSchema ? objectSchema : typeOrObjectSchema;\n\t\tlet digestedSchema:ObjectSchema.DigestedObjectSchema = ObjectSchema.Digester.digestSchema( objectSchema );\n\n\t\tif( ! type ) {\n\t\t\tthis.extendGeneralObjectSchema( digestedSchema );\n\t\t} else {\n\t\t\tthis.extendTypeObjectSchema( digestedSchema, type );\n\t\t}\n\t}\n\n\tclearObjectSchema( type:string = null ):void {\n\t\tif( ! type ) {\n\t\t\tthis.generalObjectSchema = !! this.parentContext ? null : new ObjectSchema.DigestedObjectSchema();\n\t\t} else {\n\t\t\tthis.typeObjectSchemaMap.delete( type );\n\t\t}\n\t}\n\n\tprotected extendGeneralObjectSchema( digestedSchema:ObjectSchema.DigestedObjectSchema ):void {\n\t\tlet digestedSchemaToExtend:ObjectSchema.DigestedObjectSchema;\n\t\tif( !! this.generalObjectSchema ) {\n\t\t\tdigestedSchemaToExtend = this.generalObjectSchema;\n\t\t} else if( !! this.parentContext ) {\n\t\t\tdigestedSchemaToExtend = this.parentContext.getObjectSchema();\n\t\t} else {\n\t\t\tdigestedSchemaToExtend = new ObjectSchema.DigestedObjectSchema();\n\t\t}\n\n\t\tthis.generalObjectSchema = ObjectSchema.Digester.combineDigestedObjectSchemas( [\n\t\t\tnew ObjectSchema.DigestedObjectSchema(),\n\t\t\tdigestedSchemaToExtend,\n\t\t\tdigestedSchema,\n\t\t] );\n\t}\n\n\tprotected extendTypeObjectSchema( digestedSchema:ObjectSchema.DigestedObjectSchema, type:string ):void {\n\t\tlet digestedSchemaToExtend:ObjectSchema.DigestedObjectSchema;\n\t\tif( this.typeObjectSchemaMap.has( type ) ) {\n\t\t\tdigestedSchemaToExtend = this.typeObjectSchemaMap.get( type );\n\t\t} else if( !! this.parentContext && this.parentContext.hasObjectSchema( type ) ) {\n\t\t\tdigestedSchemaToExtend = this.parentContext.getObjectSchema( type );\n\t\t} else {\n\t\t\tdigestedSchemaToExtend = new ObjectSchema.DigestedObjectSchema();\n\t\t}\n\n\t\tlet extendedDigestedSchema:ObjectSchema.DigestedObjectSchema = ObjectSchema.Digester.combineDigestedObjectSchemas( [\n\t\t\tnew ObjectSchema.DigestedObjectSchema(),\n\t\t\tdigestedSchemaToExtend,\n\t\t\tdigestedSchema,\n\t\t] );\n\n\t\tthis.typeObjectSchemaMap.set( type, extendedDigestedSchema );\n\t}\n\n\tprivate registerDefaultObjectSchemas():void {\n\t\tthis.extendObjectSchema( LDP.RDFSource.RDF_CLASS, LDP.RDFSource.SCHEMA );\n\t\tthis.extendObjectSchema( LDP.Container.RDF_CLASS, LDP.Container.SCHEMA );\n\t\tthis.extendObjectSchema( LDP.BasicContainer.RDF_CLASS, LDP.Container.SCHEMA );\n\n\t\tthis.extendObjectSchema( APIDescription.RDF_CLASS, APIDescription.SCHEMA );\n\t\tthis.extendObjectSchema( App.RDF_CLASS, App.SCHEMA );\n\n\t\tthis.extendObjectSchema( Auth.Token.RDF_CLASS, Auth.Token.CONTEXT );\n\t}\n}\n\n/* tslint:disable: variable-name */\nexport const instance:Class = new Class();\n/* tslint:enable: variable-name */\n\nexport default instance;\n"],"sourceRoot":"/source/"}