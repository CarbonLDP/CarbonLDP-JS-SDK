{"version":3,"sources":["HTTP/Errors.ts"],"names":[],"mappings":";;;;QA4BI,MAAM,EAgBN,MAAM,EASN,aAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAzBb,MAAM,GAA2B,EAAE,CAAC;YACxC,MAAM,CAAC,IAAI,CAAE,yBAAe,CAAE,CAAC;YAC/B,MAAM,CAAC,IAAI,CAAE,uBAAa,CAAE,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAE,wBAAc,CAAE,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAE,+BAAqB,CAAE,CAAC;YACrC,MAAM,CAAC,IAAI,CAAE,4BAAkB,CAAE,CAAC;YAClC,MAAM,CAAC,IAAI,CAAE,uBAAa,CAAE,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAE,iCAAuB,CAAE,CAAC;YACvC,MAAM,CAAC,IAAI,CAAE,mCAAyB,CAAE,CAAC;YACzC,MAAM,CAAC,IAAI,CAAE,oCAA0B,CAAE,CAAC;YAC1C,MAAM,CAAC,IAAI,CAAE,0CAAgC,CAAE,CAAC;YAChD,MAAM,CAAC,IAAI,CAAE,gCAAsB,CAAE,CAAC;YACtC,MAAM,CAAC,IAAI,CAAE,8BAAoB,CAAE,CAAC;YACpC,MAAM,CAAC,IAAI,CAAE,2BAAiB,CAAE,CAAC;YACjC,MAAM,CAAC,IAAI,CAAE,mCAAyB,CAAE,CAAC;YAErC,MAAM,GAA2B,EAAE,CAAC;YACxC,MAAM,CAAC,IAAI,CAAE,0BAAgB,CAAE,CAAC;YAChC,MAAM,CAAC,IAAI,CAAE,yBAAe,CAAE,CAAC;YAC/B,MAAM,CAAC,IAAI,CAAE,6BAAmB,CAAE,CAAC;YACnC,MAAM,CAAC,IAAI,CAAE,sCAA4B,CAAE,CAAC;YAC5C,MAAM,CAAC,IAAI,CAAE,6BAAmB,CAAE,CAAC;YACnC,MAAM,CAAC,IAAI,CAAE,6BAAmB,CAAE,CAAC;YACnC,MAAM,CAAC,IAAI,CAAE,iCAAuB,CAAE,CAAC;YAEnC,aAAa,GAAiC,IAAI,GAAG,EAA4B,CAAC;YACtF,GAAG,CAAC,CAAE,IAAI,CAAC,GAAU,CAAC,EAAE,QAAM,GAAU,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,QAAM,EAAE,CAAC,EAAG,EAAG,CAAC;gBAC1E,aAAa,CAAC,GAAG,CAAE,MAAM,CAAE,CAAC,CAAE,CAAC,UAAU,EAAE,MAAM,CAAE,CAAC,CAAE,CAAE,CAAC;YAC1D,CAAC;YACD,GAAG,CAAC,CAAE,IAAI,CAAC,GAAU,CAAC,EAAE,QAAM,GAAU,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,QAAM,EAAE,CAAC,EAAG,EAAG,CAAC;gBAC1E,aAAa,CAAC,GAAG,CAAE,MAAM,CAAE,CAAC,CAAE,CAAC,UAAU,EAAE,MAAM,CAAE,CAAC,CAAE,CAAE,CAAC;YAC1D,CAAC;YAGa,uCAAK;YAElB,uDAAe;YACf,mDAAa;YACb,qDAAc;YACd,mEAAqB;YACrB,6DAAkB;YAClB,mDAAa;YACb,uEAAuB;YACvB,2EAAyB;YACzB,6EAA0B;YAC1B,yFAAgC;YAChC,qEAAsB;YACtB,iEAAoB;YACpB,2DAAiB;YACjB,2EAAyB;YAEzB,yDAAgB;YAChB,uDAAe;YACf,+DAAmB;YACnB,iFAA4B;YAC5B,+DAAmB;YACnB,+DAAmB;YACnB,uEAAuB;YAEvB,iDAAY;YAEZ,2BAAM;YACN,2BAAM;YACN,yCAAa","file":"HTTP/Errors.js","sourcesContent":["import HTTPError from \"./Errors/HTTPError\";\n\nimport BadRequestError from \"./Errors/client/BadRequestError\";\nimport ConflictError from \"./Errors/client/ConflictError\";\nimport ForbiddenError from \"./Errors/client/ForbiddenError\";\nimport MethodNotAllowedError from \"./Errors/client/MethodNotAllowedError\";\nimport NotAcceptableError from \"./Errors/client/NotAcceptableError\";\nimport NotFoundError from \"./Errors/client/NotFoundError\";\nimport PreconditionFailedError from \"./Errors/client/PreconditionFailedError\";\nimport PreconditionRequiredError from \"./Errors/client/PreconditionRequiredError\";\nimport RequestEntityTooLargeError from \"./Errors/client/RequestEntityTooLargeError\";\nimport RequestHeaderFieldsTooLargeError from \"./Errors/client/RequestHeaderFieldsTooLargeError\";\nimport RequestURITooLongError from \"./Errors/client/RequestURITooLongError\";\nimport TooManyRequestsError from \"./Errors/client/TooManyRequestsError\";\nimport UnauthorizedError from \"./Errors/client/UnauthorizedError\";\nimport UnsupportedMediaTypeError from \"./Errors/client/UnsupportedMediaTypeError\";\n\nimport BadResponseError from \"./Errors/server/BadResponseError\";\nimport BadGatewayError from \"./Errors/server/BadGatewayError\";\nimport GatewayTimeoutError from \"./Errors/server/GatewayTimeoutError\";\nimport HTTPVersionNotSupportedError from \"./Errors/server/HTTPVersionNotSupportedError\";\nimport InternalServerError from \"./Errors/server/InternalServerError\";\nimport NotImplementedError from \"./Errors/server/NotImplementedError\";\nimport ServiceUnavailableError from \"./Errors/server/ServiceUnavailableError\";\n\nimport UnknownError from \"./Errors/UnknownError\";\n\n\nlet client:Array<typeof HTTPError> = [];\nclient.push( BadRequestError );\nclient.push( ConflictError );\nclient.push( ForbiddenError );\nclient.push( MethodNotAllowedError );\nclient.push( NotAcceptableError );\nclient.push( NotFoundError );\nclient.push( PreconditionFailedError );\nclient.push( PreconditionRequiredError );\nclient.push( RequestEntityTooLargeError );\nclient.push( RequestHeaderFieldsTooLargeError );\nclient.push( RequestURITooLongError );\nclient.push( TooManyRequestsError );\nclient.push( UnauthorizedError );\nclient.push( UnsupportedMediaTypeError );\n\nlet server:Array<typeof HTTPError> = [];\nserver.push( BadResponseError );\nserver.push( BadGatewayError );\nserver.push( GatewayTimeoutError );\nserver.push( HTTPVersionNotSupportedError );\nserver.push( InternalServerError );\nserver.push( NotImplementedError );\nserver.push( ServiceUnavailableError );\n\nlet statusCodeMap:Map<number, typeof HTTPError> = new Map<number, typeof HTTPError>();\nfor ( let i:number = 0, length:number = client.length; i < length; i ++ ) {\n\tstatusCodeMap.set( client[ i ].statusCode, client[ i ] );\n}\nfor ( let i:number = 0, length:number = server.length; i < length; i ++ ) {\n\tstatusCodeMap.set( server[ i ].statusCode, server[ i ] );\n}\n\nexport {\n\tHTTPError as Error,\n\n\tBadRequestError,\n\tConflictError,\n\tForbiddenError,\n\tMethodNotAllowedError,\n\tNotAcceptableError,\n\tNotFoundError,\n\tPreconditionFailedError,\n\tPreconditionRequiredError,\n\tRequestEntityTooLargeError,\n\tRequestHeaderFieldsTooLargeError,\n\tRequestURITooLongError,\n\tTooManyRequestsError,\n\tUnauthorizedError,\n\tUnsupportedMediaTypeError,\n\n\tBadResponseError,\n\tBadGatewayError,\n\tGatewayTimeoutError,\n\tHTTPVersionNotSupportedError,\n\tInternalServerError,\n\tNotImplementedError,\n\tServiceUnavailableError,\n\n\tUnknownError,\n\n\tclient,\n\tserver,\n\tstatusCodeMap\n};\n"],"sourceRoot":"/source/"}