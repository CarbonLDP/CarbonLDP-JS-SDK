{"version":3,"sources":["HTTP/Errors.ts"],"names":[],"mappings":"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","file":"HTTP/Errors.js","sourcesContent":["import HTTPError from \"./Errors/HTTPError\";\n\nimport BadRequestError from \"./Errors/client/BadRequestError\";\nimport ConflictError from \"./Errors/client/ConflictError\";\nimport ForbiddenError from \"./Errors/client/ForbiddenError\";\nimport MethodNotAllowedError from \"./Errors/client/MethodNotAllowedError\";\nimport NotAcceptableError from \"./Errors/client/NotAcceptableError\";\nimport NotFoundError from \"./Errors/client/NotFoundError\";\nimport PreconditionFailedError from \"./Errors/client/PreconditionFailedError\";\nimport PreconditionRequiredError from \"./Errors/client/PreconditionRequiredError\";\nimport RequestEntityTooLargeError from \"./Errors/client/RequestEntityTooLargeError\";\nimport RequestHeaderFieldsTooLargeError from \"./Errors/client/RequestHeaderFieldsTooLargeError\";\nimport RequestURITooLongError from \"./Errors/client/RequestURITooLongError\";\nimport TooManyRequestsError from \"./Errors/client/TooManyRequestsError\";\nimport UnauthorizedError from \"./Errors/client/UnauthorizedError\";\nimport UnsupportedMediaTypeError from \"./Errors/client/UnsupportedMediaTypeError\";\n\nimport BadResponseError from \"./Errors/server/BadResponseError\";\nimport BadGatewayError from \"./Errors/server/BadGatewayError\";\nimport GatewayTimeoutError from \"./Errors/server/GatewayTimeoutError\";\nimport HTTPVersionNotSupportedError from \"./Errors/server/HTTPVersionNotSupportedError\";\nimport InternalServerErrorError from \"./Errors/server/InternalServerErrorError\";\nimport NotImplementedError from \"./Errors/server/NotImplementedError\";\nimport ServiceUnavailableError from \"./Errors/server/ServiceUnavailableError\";\n\nimport UnknownError from \"./Errors/UnknownError\";\n\n\nlet client:Array<typeof HTTPError> = [];\nclient.push( BadRequestError );\nclient.push( ConflictError );\nclient.push( ForbiddenError );\nclient.push( MethodNotAllowedError );\nclient.push( NotAcceptableError );\nclient.push( NotFoundError );\nclient.push( PreconditionFailedError );\nclient.push( PreconditionRequiredError );\nclient.push( RequestEntityTooLargeError );\nclient.push( RequestHeaderFieldsTooLargeError );\nclient.push( RequestURITooLongError );\nclient.push( TooManyRequestsError );\nclient.push( UnauthorizedError );\nclient.push( UnsupportedMediaTypeError );\n\nlet server:Array<typeof HTTPError> = [];\nserver.push( BadResponseError );\nserver.push( BadGatewayError );\nserver.push( GatewayTimeoutError );\nserver.push( HTTPVersionNotSupportedError );\nserver.push( InternalServerErrorError );\nserver.push( NotImplementedError );\nserver.push( ServiceUnavailableError );\n\nlet statusCodeMap:Map<number, typeof HTTPError> = new Map<number, typeof HTTPError>();\nfor ( let i:number = 0, length:number = client.length; i < length; i ++ ) {\n\tstatusCodeMap.set( client[ i ].statusCode, client[ i ] );\n}\nfor ( let i:number = 0, length:number = server.length; i < length; i ++ ) {\n\tstatusCodeMap.set( server[ i ].statusCode, server[ i ] );\n}\n\nexport {\n\tHTTPError as Error,\n\n\tBadRequestError,\n\tConflictError,\n\tForbiddenError,\n\tMethodNotAllowedError,\n\tNotAcceptableError,\n\tNotFoundError,\n\tPreconditionFailedError,\n\tPreconditionRequiredError,\n\tRequestEntityTooLargeError,\n\tRequestHeaderFieldsTooLargeError,\n\tRequestURITooLongError,\n\tTooManyRequestsError,\n\tUnauthorizedError,\n\tUnsupportedMediaTypeError,\n\n\tBadResponseError,\n\tBadGatewayError,\n\tGatewayTimeoutError,\n\tHTTPVersionNotSupportedError,\n\tInternalServerErrorError,\n\tNotImplementedError,\n\tServiceUnavailableError,\n\n\tUnknownError,\n\n\tclient,\n\tserver,\n\tstatusCodeMap\n};\n"],"sourceRoot":"/source/"}