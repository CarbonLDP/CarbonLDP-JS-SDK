{"version":3,"sources":["HTTP/JSONParser.ts"],"names":["Class","Class.constructor","Class.parse"],"mappings":"AAAA,qDAAqD;;;;;;YAIrD;gBAAAA;gBAWAC,CAACA;gBAVAD,qBAAKA,GAALA,UAAOA,IAAWA;oBACjBE,MAAMA,CAACA,IAAIA,OAAOA,CAAUA,UAAEA,OAAiCA,EAAEA,MAA8BA;wBAC9FA,IAAIA,CAACA;4BACJA,OAAOA,CAAEA,IAAIA,CAACA,KAAKA,CAAEA,IAAIA,CAAEA,CAAEA,CAACA;wBAC/BA,CAAEA;wBAAAA,KAAKA,CAACA,CAAEA,KAAMA,CAACA,CAACA,CAACA;4BAClBA,2BAA2BA;4BAC3BA,MAAMA,CAAEA,KAAKA,CAAEA,CAACA;wBACjBA,CAACA;oBACFA,CAACA,CAACA,CAACA;gBACJA,CAACA;gBACFF,YAACA;YAADA,CAXA,AAWCA,IAAA;YAXD,yBAWC,CAAA;YAED,oBAAe,KAAK,EAAC","file":"HTTP/JSONParser.js","sourcesContent":["/// <reference path=\"./../../typings/typings.d.ts\" />\n\nimport Parser from \"./Parser\";\n\nexport class Class implements Parser<Object> {\n\tparse( body:string ):Promise<Object> {\n\t\treturn new Promise<Object>( ( resolve:( result:string ) => void, reject:( error:Error ) => void ) => {\n\t\t\ttry {\n\t\t\t\tresolve( JSON.parse( body ) );\n\t\t\t} catch ( error ) {\n\t\t\t\t// TODO: Handle SyntaxError\n\t\t\t\treject( error );\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}