{"version":3,"sources":["HTTP/JSONParser.ts"],"names":["Class","Class.constructor","Class.parse"],"mappings":"AAEA;IAAAA;IAWAC,CAACA;IAVAD,qBAAKA,GAALA,UAAOA,IAAWA;QACjBE,MAAMA,CAACA,IAAIA,OAAOA,CAAUA,UAAEA,OAAiCA,EAAEA,MAA8BA;YAC9FA,IAAIA,CAACA;gBACJA,OAAOA,CAAEA,IAAIA,CAACA,KAAKA,CAAEA,IAAIA,CAAEA,CAAEA,CAACA;YAC/BA,CAAEA;YAAAA,KAAKA,CAACA,CAAEA,KAAMA,CAACA,CAACA,CAACA;gBAClBA,2BAA2BA;gBAC3BA,MAAMA,CAAEA,KAAKA,CAAEA,CAACA;YACjBA,CAACA;QACFA,CAACA,CAACA,CAACA;IACJA,CAACA;IACFF,YAACA;AAADA,CAXA,AAWCA,IAAA;AAXY,aAAK,QAWjB,CAAA;AAED;kBAAe,KAAK,CAAC","file":"HTTP/JSONParser.js","sourcesContent":["import Parser from \"./Parser\";\n\nexport class Class implements Parser<Object> {\n\tparse( body:string ):Promise<Object> {\n\t\treturn new Promise<Object>( ( resolve:( result:string ) => void, reject:( error:Error ) => void ) => {\n\t\t\ttry {\n\t\t\t\tresolve( JSON.parse( body ) );\n\t\t\t} catch ( error ) {\n\t\t\t\t// TODO: Handle SyntaxError\n\t\t\t\treject( error );\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport default Class;"],"sourceRoot":"/source/"}