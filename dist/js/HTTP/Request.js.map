{"version":3,"sources":["HTTP/Request.ts"],"names":["setHeaders","onLoad","onError","rejectRequest","Service","Service.constructor","Service.send","Service.options","Service.head","Service.get","Service.post","Service.put","Service.patch","Service.delete","Util","Util.constructor","Util.setAcceptHeader","Util.setContentTypeHeader","Util.setIfMatchHeader","Util.setPreferredInteractionModel","Util.setSlug"],"mappings":"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","file":"HTTP/Request.js","sourcesContent":["/// <reference path=\"./../../typings/typings.d.ts\" />\n\nimport * as Errors from \"./Errors\";\nimport * as Header from \"./Header\";\nimport Method from \"./Method\";\nimport Parser from \"./Parser\";\nimport ProcessedResponse from \"./ProcessedResponse\";\nimport Response from \"./Response\";\n\nimport * as Utils from \"./../Utils\";\n\nexport interface Options {\n\theaders?: Map<string, Header.Class>;\n\tsendCredentialsOnCORS?:boolean;\n\ttimeout?:number;\n\trequest?:XMLHttpRequest;\n}\n\nfunction setHeaders( request:XMLHttpRequest, headers:Map<string, Header.Class> ):void {\n\tlet namesIterator:Iterator<string> = headers.keys();\n\tlet next:IteratorResult<string> = namesIterator.next();\n\twhile ( ! next.done ) {\n\t\tlet name:string = next.value;\n\t\tlet value:Header.Class = headers.get( name );\n\t\trequest.setRequestHeader( name, value.toString() );\n\n\t\tnext = namesIterator.next();\n\t}\n}\n\nfunction onLoad( resolve:( result:any ) => void, reject:( value:Response ) => void, request:XMLHttpRequest ):() => void {\n\treturn () => {\n\t\tlet response:Response = new Response( request );\n\t\tif ( request.status >= 200 && request.status <= 299 ) {\n\n\n\t\t\tresolve( response );\n\t\t} else {\n\t\t\trejectRequest( reject, request );\n\t\t}\n\t};\n}\n\nfunction onError( reject:( error:any ) => void, request:XMLHttpRequest ):() => void {\n\treturn () => {\n\t\trejectRequest( reject, request );\n\t};\n}\n\nfunction rejectRequest( reject:( error:any ) => void, request:XMLHttpRequest ):void {\n\tlet response:Response = new Response( request );\n\n\tif ( response.status >= 400 && response.status < 600 ) {\n\t\tif ( Errors.statusCodeMap.has( response.status ) ) {\n\t\t\tlet error:typeof Errors.Error = Errors.statusCodeMap.get( response.status );\n\t\t\t// TODO: Set error message\n\t\t\treject( new error( \"\", response ) );\n\t\t}\n\t}\n\n\treject( new Errors.UnknownError( \"\", response ) );\n}\n\nexport class Service {\n\n\tprivate static defaultOptions:Options = {\n\t\tsendCredentialsOnCORS: true\n\t};\n\n\tstatic send( method:(Method | string), url:string, options?:Options ):Promise<Response>;\n\tstatic send( method:(Method | string), url:string, body:string, options?:Options ):Promise<Response>;\n\tstatic send( method:(Method | string), url:string, body:string, options?:Options ):Promise<Response>;\n\tstatic send<T>( method:(Method | string), url:string, body:string, options?:Options, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic send<T>( method:any, url:string, bodyOrOptions:any = Service.defaultOptions, options:Options = Service.defaultOptions, parser:Parser<T> = null ):any {\n\t\tlet body:string = bodyOrOptions && Utils.isString( bodyOrOptions ) ? bodyOrOptions : null;\n\n\t\toptions = ! bodyOrOptions || Utils.isString( bodyOrOptions ) ? options : bodyOrOptions;\n\t\toptions = options ? options : {};\n\t\toptions = Utils.extend( options, Service.defaultOptions );\n\n\t\tif ( Utils.isNumber( method ) ) method = Method[ method ];\n\n\t\tlet requestPromise:Promise<Response> = new Promise<Response>( ( resolve:( result:Response ) => void, reject:( error:any ) => void ):void => {\n\t\t\tlet request:XMLHttpRequest = options.request ? options.request : new XMLHttpRequest();\n\t\t\trequest.open( method, url, true );\n\n\t\t\tif ( options.headers ) setHeaders( request, options.headers );\n\t\t\trequest.withCredentials = options.sendCredentialsOnCORS;\n\t\t\tif ( options.timeout ) request.timeout = options.timeout;\n\n\t\t\trequest.onload = onLoad( resolve, reject, request );\n\t\t\trequest.onerror = onError( reject, request );\n\n\t\t\tif ( body ) {\n\t\t\t\trequest.send( body );\n\t\t\t} else {\n\t\t\t\trequest.send();\n\t\t\t}\n\t\t});\n\n\t\tif( parser === null ) return requestPromise;\n\n\t\treturn requestPromise.then( ( response:Response ) => {\n\t\t\treturn parser.parse( response.data ).then( ( parsedBody:T ) => {\n\t\t\t\treturn [ parsedBody, response ];\n\t\t\t});\n\t\t});\n\t}\n\n\tstatic options( url:string, options:Options = Service.defaultOptions ):Promise<Response> {\n\t\treturn Service.send( Method.OPTIONS, url, options );\n\t}\n\n\tstatic head( url:string, options:Options = Service.defaultOptions ):Promise<Response> {\n\t\treturn Service.send( Method.HEAD, url, options );\n\t}\n\n\tstatic get( url:string, options?:Options ):Promise<Response>;\n\tstatic get<T>( url:string, options?:Options, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic get<T>( url:string, options:Options = Service.defaultOptions, parser:Parser<T> = null ):any {\n\t\treturn Service.send( Method.GET, url, null, options, parser );\n\t}\n\n\tstatic post( url:string, body:string, options?:Options ):Promise<Response>;\n\tstatic post<T>( url:string, body:string, options?:Options, parser?:Parser<T> ):Promise<[ T, Response ] >;\n\tstatic post<T>( url:string, bodyOrOptions:any = Service.defaultOptions, options:Options = Service.defaultOptions, parser:Parser<T> = null ):any {\n\t\treturn Service.send( Method.POST, url, bodyOrOptions, options, parser );\n\t}\n\n\tstatic put( url:string, body:string, options?:Options ):Promise<Response>;\n\tstatic put<T>( url:string, body:string, options?:Options, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic put<T>( url:string, bodyOrOptions:any = Service.defaultOptions, options:Options = Service.defaultOptions, parser:Parser<T> = null ):any {\n\t\treturn Service.send( Method.PUT, url, bodyOrOptions, options, parser );\n\t}\n\n\tstatic patch( url:string, body:string, options?:Options ):Promise<Response>;\n\tstatic patch<T>( url:string, body:string, options?:Options, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic patch<T>( url:string, bodyOrOptions:any = Service.defaultOptions, options:Options = Service.defaultOptions, parser:Parser<T> = null ):any {\n\t\treturn Service.send( Method.PATCH, url, bodyOrOptions, options, parser );\n\t}\n\n\tstatic delete( url:string, body:string, options?:Options ):Promise<Response>;\n\tstatic delete<T>( url:string, body:string, options?:Options, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic delete<T>( url:string, bodyOrOptions:any = Service.defaultOptions, options:Options = Service.defaultOptions, parser:Parser<T> = null ):any {\n\t\treturn Service.send( Method.DELETE, url, bodyOrOptions, options, parser );\n\t}\n}\n\nexport class Util {\n\tstatic setAcceptHeader( accept:string, requestOptions:Options ):Options {\n\t\tlet headers:Map<string, Header.Class> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, Header.Class>();\n\t\theaders.set( \"Accept\", new Header.Class( accept ) );\n\t\treturn requestOptions;\n\t}\n\n\tstatic setContentTypeHeader( contentType:string, requestOptions:Options ):Options {\n\t\tlet headers:Map<string, Header.Class> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, Header.Class>();\n\t\theaders.set( \"Content-Type\", new Header.Class( contentType ) );\n\t\treturn requestOptions;\n\t}\n\n\tstatic setIfMatchHeader( etag:string, requestOptions:Options ):Options {\n\t\tlet headers:Map<string, Header.Class> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, Header.Class>();\n\t\theaders.set( \"If-Match\", new Header.Class( etag ) );\n\t\treturn requestOptions;\n\t}\n\n\tstatic setPreferredInteractionModel( interactionModelURI:string, requestOptions:Options ):Options {\n\t\tlet headers:Map<string, Header.Class> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, Header.Class>();\n\t\tif ( ! headers.has( \"Prefer\" ) ) headers.set( \"Prefer\", new Header.Class() );\n\n\t\tlet prefer:Header.Class = headers.get( \"Prefer\" );\n\t\tprefer.values.push( new Header.Value( interactionModelURI + \"; rel=interaction-model\" ) );\n\n\t\treturn requestOptions;\n\t}\n\n\tstatic setSlug( slug:string, requestOptions:Options ):Options {\n\t\tlet headers:Map<string, Header.Class> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, Header.Class>();\n\t\tif ( ! headers.has( \"Slug\" ) ) headers.set( \"Slug\", new Header.Class() );\n\n\t\tlet slugHeader:Header.Class = headers.get( \"Slug\" );\n\t\tslugHeader.values.push( new Header.Value( slug ) );\n\n\t\treturn requestOptions;\n\t}\n}\n"],"sourceRoot":"/source/"}