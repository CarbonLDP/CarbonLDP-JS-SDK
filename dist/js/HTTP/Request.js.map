{"version":3,"sources":["HTTP/Request.ts"],"names":["Service"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAyEyCA,sEAAoBA,QAAQA,cAARA;4BAAwBA,gEAAkBA,QAAQA,cAARA;4BAAwBA,+DAAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAoCrHA,iEAAkBA,QAAQA,cAARA;;;;;;;4BAIrBA,gEAAkBA,QAAQA,cAARA;;;;;;4BAMhBA,gEAAkBA,QAAQA,cAARA;4BAAwBA,+DAAmBA;;;;;;4BAM5DA,sEAAoBA,QAAQA,cAARA;4BAAwBA,gEAAkBA,QAAQA,cAARA;4BAAwBA,+DAAmBA;;;;;;4BAM1GA,sEAAoBA,QAAQA,cAARA;4BAAwBA,gEAAkBA,QAAQA,cAARA;4BAAwBA,+DAAmBA;;;;;;4BAMvGA,sEAAoBA,QAAQA,cAARA;4BAAwBA,gEAAkBA,QAAQA,cAARA;4BAAwBA,+DAAmBA;;;;;;4BAMxGA,sEAAoBA,QAAQA,cAARA;4BAAwBA,gEAAkBA,QAAQA,cAARA;4BAAwBA,+DAAmBA","file":"HTTP/Request.js","sourcesContent":["/// <reference path=\"./../../typings/typings.d.ts\" />\n\nimport * as Errors from \"./Errors\";\nimport * as Header from \"./Header\";\nimport Method from \"./Method\";\nimport Parser from \"./Parser\";\nimport ProcessedResponse from \"./ProcessedResponse\";\nimport Response from \"./Response\";\n\nimport * as Utils from \"./../Utils\";\n\nexport interface Options {\n\theaders?: Map<string, Header.Class>;\n\tsendCredentialsOnCORS?:boolean;\n\ttimeout?:number;\n\trequest?:XMLHttpRequest;\n}\n\nfunction setHeaders( request:XMLHttpRequest, headers:Map<string, Header.Class> ):void {\n\tlet namesIterator:Iterator<string> = headers.keys();\n\tlet next:IteratorResult<string> = namesIterator.next();\n\twhile ( ! next.done ) {\n\t\tlet name:string = next.value;\n\t\tlet value:Header.Class = headers.get( name );\n\t\trequest.setRequestHeader( name, value.toString() );\n\n\t\tnext = namesIterator.next();\n\t}\n}\n\nfunction onLoad( resolve:( result:any ) => void, reject:( value:Response ) => void, request:XMLHttpRequest ):() => void {\n\treturn () => {\n\t\tlet response:Response = new Response( request );\n\t\tif ( request.status >= 200 && request.status <= 299 ) {\n\n\n\t\t\tresolve( response );\n\t\t} else {\n\t\t\trejectRequest( reject, request );\n\t\t}\n\t};\n}\n\nfunction onError( reject:( error:any ) => void, request:XMLHttpRequest ):() => void {\n\treturn () => {\n\t\trejectRequest( reject, request );\n\t};\n}\n\nfunction rejectRequest( reject:( error:any ) => void, request:XMLHttpRequest ):void {\n\tlet response:Response = new Response( request );\n\n\tif ( response.status >= 400 && response.status < 600 ) {\n\t\tif ( Errors.statusCodeMap.has( response.status ) ) {\n\t\t\tlet error:typeof Errors.Error = Errors.statusCodeMap.get( response.status );\n\t\t\t// TODO: Set error message\n\t\t\treject( new error( \"\", response ) );\n\t\t}\n\t}\n\n\treject( new Errors.UnknownError( \"\", response ) );\n}\n\nexport class Service {\n\n\tprivate static defaultOptions:Options = {\n\t\tsendCredentialsOnCORS: true\n\t};\n\n\tstatic send( method:(Method | string), url:string, options?:Options ):Promise<Response>;\n\tstatic send( method:(Method | string), url:string, body:string, options?:Options ):Promise<Response>;\n\tstatic send( method:(Method | string), url:string, body:string, options?:Options ):Promise<Response>;\n\tstatic send<T>( method:(Method | string), url:string, body:string, options?:Options, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic send<T>( method:any, url:string, bodyOrOptions:any = Service.defaultOptions, options:Options = Service.defaultOptions, parser:Parser<T> = null ):any {\n\t\tlet body:string = bodyOrOptions && Utils.isString( bodyOrOptions ) ? bodyOrOptions : null;\n\n\t\toptions = ! bodyOrOptions || Utils.isString( bodyOrOptions ) ? options : bodyOrOptions;\n\t\toptions = options ? options : {};\n\t\toptions = Utils.extend( options, Service.defaultOptions );\n\n\t\tif ( Utils.isNumber( method ) ) method = Method[ method ];\n\n\t\tlet requestPromise:Promise<Response> = new Promise<Response>( ( resolve:( result:Response ) => void, reject:( error:any ) => void ):void => {\n\t\t\tlet request:XMLHttpRequest = options.request ? options.request : new XMLHttpRequest();\n\t\t\trequest.open( method, url, true );\n\n\t\t\tif ( options.headers ) setHeaders( request, options.headers );\n\t\t\trequest.withCredentials = options.sendCredentialsOnCORS;\n\t\t\tif ( options.timeout ) request.timeout = options.timeout;\n\n\t\t\trequest.onload = onLoad( resolve, reject, request );\n\t\t\trequest.onerror = onError( reject, request );\n\n\t\t\tif ( body ) {\n\t\t\t\trequest.send( body );\n\t\t\t} else {\n\t\t\t\trequest.send();\n\t\t\t}\n\t\t});\n\n\t\tif( parser === null ) return requestPromise;\n\n\t\treturn requestPromise.then( ( response:Response ) => {\n\t\t\treturn parser.parse( response.data ).then( ( parsedBody:T ) => {\n\t\t\t\treturn [ parsedBody, response ];\n\t\t\t});\n\t\t});\n\t}\n\n\tstatic options( url:string, options:Options = Service.defaultOptions ):Promise<Response> {\n\t\treturn Service.send( Method.OPTIONS, url, options );\n\t}\n\n\tstatic head( url:string, options:Options = Service.defaultOptions ):Promise<Response> {\n\t\treturn Service.send( Method.HEAD, url, options );\n\t}\n\n\tstatic get( url:string, options?:Options ):Promise<Response>;\n\tstatic get<T>( url:string, options?:Options, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic get<T>( url:string, options:Options = Service.defaultOptions, parser:Parser<T> = null ):any {\n\t\treturn Service.send( Method.GET, url, null, options, parser );\n\t}\n\n\tstatic post( url:string, body:string, options?:Options ):Promise<Response>;\n\tstatic post<T>( url:string, body:string, options?:Options, parser?:Parser<T> ):Promise<[ T, Response ] >;\n\tstatic post<T>( url:string, bodyOrOptions:any = Service.defaultOptions, options:Options = Service.defaultOptions, parser:Parser<T> = null ):any {\n\t\treturn Service.send( Method.POST, url, bodyOrOptions, options, parser );\n\t}\n\n\tstatic put( url:string, body:string, options?:Options ):Promise<Response>;\n\tstatic put<T>( url:string, body:string, options?:Options, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic put<T>( url:string, bodyOrOptions:any = Service.defaultOptions, options:Options = Service.defaultOptions, parser:Parser<T> = null ):any {\n\t\treturn Service.send( Method.PUT, url, bodyOrOptions, options, parser );\n\t}\n\n\tstatic patch( url:string, body:string, options?:Options ):Promise<Response>;\n\tstatic patch<T>( url:string, body:string, options?:Options, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic patch<T>( url:string, bodyOrOptions:any = Service.defaultOptions, options:Options = Service.defaultOptions, parser:Parser<T> = null ):any {\n\t\treturn Service.send( Method.PATCH, url, bodyOrOptions, options, parser );\n\t}\n\n\tstatic delete( url:string, body:string, options?:Options ):Promise<Response>;\n\tstatic delete<T>( url:string, body:string, options?:Options, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic delete<T>( url:string, bodyOrOptions:any = Service.defaultOptions, options:Options = Service.defaultOptions, parser:Parser<T> = null ):any {\n\t\treturn Service.send( Method.DELETE, url, bodyOrOptions, options, parser );\n\t}\n}\n\nexport class Util {\n\tstatic setAcceptHeader( accept:string, requestOptions:Options ):Options {\n\t\tlet headers:Map<string, Header.Class> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, Header.Class>();\n\t\theaders.set( \"Accept\", new Header.Class( accept ) );\n\t\treturn requestOptions;\n\t}\n\n\tstatic setContentTypeHeader( contentType:string, requestOptions:Options ):Options {\n\t\tlet headers:Map<string, Header.Class> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, Header.Class>();\n\t\theaders.set( \"Content-Type\", new Header.Class( contentType ) );\n\t\treturn requestOptions;\n\t}\n\n\tstatic setIfMatchHeader( etag:string, requestOptions:Options ):Options {\n\t\tlet headers:Map<string, Header.Class> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, Header.Class>();\n\t\theaders.set( \"If-Match\", new Header.Class( etag ) );\n\t\treturn requestOptions;\n\t}\n\n\tstatic setPreferredInteractionModel( interactionModelURI:string, requestOptions:Options ):Options {\n\t\tlet headers:Map<string, Header.Class> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, Header.Class>();\n\t\tif ( ! headers.has( \"Prefer\" ) ) headers.set( \"Prefer\", new Header.Class() );\n\n\t\tlet prefer:Header.Class = headers.get( \"Prefer\" );\n\t\tprefer.values.push( new Header.Value( interactionModelURI + \"; rel=interaction-model\" ) );\n\n\t\treturn requestOptions;\n\t}\n\n\tstatic setSlug( slug:string, requestOptions:Options ):Options {\n\t\tlet headers:Map<string, Header.Class> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, Header.Class>();\n\t\tif ( ! headers.has( \"Slug\" ) ) headers.set( \"Slug\", new Header.Class() );\n\n\t\tlet slugHeader:Header.Class = headers.get( \"Slug\" );\n\t\tslugHeader.values.push( new Header.Value( slug ) );\n\n\t\treturn requestOptions;\n\t}\n}\n"],"sourceRoot":"/source/"}