{"version":3,"sources":["LDP/RDFSource.ts"],"names":["Factory","Factory.constructor","Factory.hasClassProperties","Factory.is","Factory.from","Factory.hasRDFClass","Factory.injectBehaviour"],"mappings":";;;;;AAAA,IAAY,EAAE,WAAM,SAAS,CAAC,CAAA;AAC9B,IAAY,GAAG,WAAM,UAAU,CAAC,CAAA;AAChC,IAAY,KAAK,WAAM,YAAY,CAAC,CAAA;AAEvB,iBAAS,GAAU,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC;AAMvD;IAA6BA,2BAAoBA;IAAjDA;QAA6BC,8BAAoBA;IAuCjDA,CAACA;IAtCOD,0BAAkBA,GAAzBA,UAA2BA,QAAuBA;QACjDE,MAAMA,CAACA,CACLA,KAAKA,CAACA,kBAAkBA,CAAEA,QAAQA,EAAEA,kBAAkBA,CAAEA;YACxDA,KAAKA,CAACA,kBAAkBA,CAAEA,QAAQA,EAAEA,mBAAmBA,CAAEA,CAC1DA,CAACA;IACHA,CAACA;IAEDF,oBAAEA,GAAFA,UAAIA,MAAaA;QAChBG,MAAMA,CAACA,CACNA,gBAAKA,CAACA,EAAEA,YAAEA,MAAMA,CAAEA;YACIA,MAAOA,CAACA,KAAKA,CAACA,OAAOA,CAAEA,iBAASA,CAAEA,KAAKA,CAACA,CAACA,CAC/DA,CAACA;IACHA,CAACA;IAIDH,sBAAIA,GAAJA,UAAMA,mBAAuBA;QAC5BI,IAAIA,WAAWA,GAA+CA,gBAAKA,CAACA,IAAIA,YAAEA,mBAAmBA,CAAEA,CAACA;QAChGA,IAAIA,SAASA,GAAwBA,KAAKA,CAACA,OAAOA,CAAEA,WAAWA,CAAEA,GAA0BA,WAAWA,GAA0BA,CAAEA,WAAWA,CAAEA,CAACA;QAEhJA,GAAGA,CAACA,CAAEA,GAAGA,CAACA,CAACA,GAAUA,CAACA,EAAEA,QAAMA,GAAUA,SAASA,CAACA,MAAMA,EAAEA,CAACA,GAAGA,QAAMA,EAAEA,CAACA,EAAGA,EAAGA,CAACA;YAC7EA,IAAIA,QAAQA,GAAsBA,SAASA,CAAEA,CAACA,CAAEA,CAACA;YACjDA,EAAEA,CAACA,CAAEA,CAAEA,OAAOA,CAACA,kBAAkBA,CAAEA,QAAQA,CAAGA,CAACA;gBAACA,IAAIA,CAACA,eAAeA,CAAEA,QAAQA,CAAEA,CAACA;QAClFA,CAACA;QAEDA,EAAEA,CAACA,CAAEA,KAAKA,CAACA,OAAOA,CAAEA,mBAAmBA,CAAGA,CAACA;YAACA,MAAMA,CAAWA,SAASA,CAACA;QACvEA,MAAMA,CAASA,SAASA,CAAEA,CAACA,CAAEA,CAACA;IAC/BA,CAACA;IAESJ,6BAAWA,GAArBA,UAAuBA,QAA2BA;QACjDK,MAAMA,CAACA,CACNA,QAAQA,CAACA,KAAKA,CAACA,OAAOA,CAAEA,iBAASA,CAAEA,KAAKA,CAAEA,CAACA,CAC3CA,CAACA;IACHA,CAACA;IAESL,iCAAeA,GAAzBA,UAA2BA,QAA2BA;QACrDM,MAAMA,CAASA,QAAQA,CAACA;IACzBA,CAACA;IACFN,cAACA;AAADA,CAvCA,AAuCCA,EAvC4B,GAAG,CAAC,QAAQ,CAAC,OAAO,EAuChD;AAvCY,eAAO,UAuCnB,CAAA;AAEU,eAAO,GAAW,IAAI,OAAO,EAAE,CAAC","file":"LDP/RDFSource.js","sourcesContent":["import * as NS from \"./../NS\";\nimport * as RDF from \"./../RDF\";\nimport * as Utils from \"./../Utils\";\n\nexport const RDF_CLASS:string = NS.LDP.Class.RDFSource;\n\nexport interface Class extends RDF.Resource.Class {\n\n}\n\nexport class Factory extends RDF.Resource.Factory {\n\tstatic hasClassProperties( resource:RDF.Node.Class ):boolean {\n\t\treturn (\n\t\t\t\tUtils.hasPropertyDefined( resource, \"memberOfRelation\" ) &&\n\t\t\t\tUtils.hasPropertyDefined( resource, \"hasMemberRelation\" )\n\t\t);\n\t}\n\n\tis( object:Object ):boolean {\n\t\treturn (\n\t\t\tsuper.is( object ) &&\n\t\t\t(<RDF.Resource.Class> object).types.indexOf( RDF_CLASS ) !== -1\n\t\t);\n\t}\n\n\tfrom( resource:RDF.Node.Class ):Class;\n\tfrom( resources:RDF.Node.Class[] ):Class[];\n\tfrom( resourceOrResources:any ):any {\n\t\tlet superResult:(RDF.Resource.Class | RDF.Resource.Class[]) = super.from( resourceOrResources );\n\t\tlet resources:RDF.Resource.Class[] = Utils.isArray( superResult ) ? <RDF.Resource.Class[]> superResult : <RDF.Resource.Class[]> [ superResult ];\n\n\t\tfor ( let i:number = 0, length:number = resources.length; i < length; i ++ ) {\n\t\t\tlet resource:RDF.Resource.Class = resources[ i ];\n\t\t\tif ( ! Factory.hasClassProperties( resource ) ) this.injectBehaviour( resource );\n\t\t}\n\n\t\tif ( Utils.isArray( resourceOrResources ) ) return <Class[]> resources;\n\t\treturn <Class> resources[ 0 ];\n\t}\n\n\tprotected hasRDFClass( resource:RDF.Resource.Class ):boolean {\n\t\treturn (\n\t\t\tresource.types.indexOf( RDF_CLASS ) !== - 1\n\t\t);\n\t}\n\n\tprotected injectBehaviour( resource:RDF.Resource.Class ):Class {\n\t\treturn <Class> resource;\n\t}\n}\n\nexport let factory:Factory = new Factory();\n\nexport default Class;\n"],"sourceRoot":"/source/"}