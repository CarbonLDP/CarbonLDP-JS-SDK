{"version":3,"sources":["LDP/RDFSource.ts"],"names":["Factory","Factory.constructor","Factory.is","Factory.from","Factory.hasRDFClass","Factory.hasClassProperties","Factory.injectBehaviour"],"mappings":";;;;;AAAA,IAAY,EAAE,WAAM,SAAS,CAAC,CAAA;AAC9B,IAAY,GAAG,WAAM,UAAU,CAAC,CAAA;AAChC,IAAY,KAAK,WAAM,YAAY,CAAC,CAAA;AAEpC,IAAM,QAAQ,GAAU,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC;AAM/C;IAAsBA,2BAAoBA;IAA1CA;QAAsBC,8BAAoBA;IAyC1CA,CAACA;IAxCAD,oBAAEA,GAAFA,UAAIA,MAAaA;QAChBE,gBAAgBA;QAChBA,MAAMA,CAACA,CACNA,gBAAKA,CAACA,EAAEA,YAAEA,MAAMA,CAAEA;YACIA,MAAOA,CAACA,KAAKA,CAACA,OAAOA,CAAEA,QAAQA,CAAEA,KAAKA,CAACA,CAACA,CAC9DA,CAACA;QACFA,eAAeA;IAChBA,CAACA;IAIDF,sBAAIA,GAAJA,UAAMA,mBAAuBA;QAC5BG,IAAIA,WAAWA,GAA+CA,gBAAKA,CAACA,IAAIA,YAAEA,mBAAmBA,CAAEA,CAACA;QAChGA,IAAIA,SAASA,GAAwBA,KAAKA,CAACA,OAAOA,CAAEA,WAAWA,CAAEA,GAA0BA,WAAWA,GAA0BA,CAAEA,WAAWA,CAAEA,CAACA;QAEhJA,GAAGA,CAACA,CAAEA,GAAGA,CAACA,CAACA,GAAUA,CAACA,EAAEA,QAAMA,GAAUA,SAASA,CAACA,MAAMA,EAAEA,CAACA,GAAGA,QAAMA,EAAEA,CAACA,EAAGA,EAAGA,CAACA;YAC7EA,IAAIA,QAAQA,GAAsBA,SAASA,CAAEA,CAACA,CAAEA,CAACA;YACjDA,EAAEA,CAACA,CAAEA,CAAEA,IAAIA,CAACA,kBAAkBA,CAAEA,QAAQA,CAAGA,CAACA;gBAACA,IAAIA,CAACA,eAAeA,CAAEA,QAAQA,CAAEA,CAACA;QAC/EA,CAACA;QAEDA,EAAEA,CAACA,CAAEA,KAAKA,CAACA,OAAOA,CAAEA,mBAAmBA,CAAGA,CAACA;YAACA,MAAMA,CAAeA,SAASA,CAACA;QAC3EA,IAAIA;YAACA,MAAMA,CAAaA,SAASA,CAAEA,CAACA,CAAEA,CAACA;IACxCA,CAACA;IAESH,6BAAWA,GAArBA,UAAuBA,QAA2BA;QACjDI,MAAMA,CAACA,CACNA,QAAQA,CAACA,KAAKA,CAACA,OAAOA,CAAEA,QAAQA,CAAEA,KAAKA,CAAEA,CAACA,CAC1CA,CAACA;IACHA,CAACA;IAESJ,oCAAkBA,GAA5BA,UAA8BA,QAAuBA;QACpDK,MAAMA,CAACA,CACNA,KAAKA,CAACA,kBAAkBA,CAAEA,QAAQA,EAAEA,kBAAkBA,CAAEA;YACxDA,KAAKA,CAACA,kBAAkBA,CAAEA,QAAQA,EAAEA,mBAAmBA,CAAEA,CACzDA,CAACA;IACHA,CAACA;IAESL,iCAAeA,GAAzBA,UAA2BA,QAA2BA;QACrDM,MAAMA,CAAaA,QAAQA,CAACA;IAC7BA,CAACA;IACFN,cAACA;AAADA,CAzCA,AAyCCA,EAzCqB,GAAG,CAAC,QAAQ,CAAC,OAAO,EAyCzC;AAOA,eAAO,WAPP;AAED,IAAI,OAAO,GAAG,IAAI,OAAO,EAAE;AAM1B,eAAO,WANoB;AAE5B,gBAAgB;AAMhB,eAAe","file":"LDP/RDFSource.js","sourcesContent":["import * as NS from './../NS';\nimport * as RDF from './../RDF';\nimport * as Utils from './../Utils';\n\nconst RDFClass:string = NS.LDP.Class.RDFSource;\n\ninterface RDFSource extends RDF.Resource.Class {\n\n}\n\nclass Factory extends RDF.Resource.Factory {\n\tis( object:Object ):boolean {\n\t\t//@formatter:off\n\t\treturn (\n\t\t\tsuper.is( object ) &&\n\t\t\t(<RDF.Resource.Class> object).types.indexOf( RDFClass ) !== -1\n\t\t);\n\t\t//@formatter:on\n\t}\n\n\tfrom( resource:RDF.Node.Class ):RDFSource;\n\tfrom( resources:RDF.Node.Class[] ):RDFSource[];\n\tfrom( resourceOrResources:any ):any {\n\t\tvar superResult:(RDF.Resource.Class | RDF.Resource.Class[]) = super.from( resourceOrResources );\n\t\tvar resources:RDF.Resource.Class[] = Utils.isArray( superResult ) ? <RDF.Resource.Class[]> superResult : <RDF.Resource.Class[]> [ superResult ];\n\n\t\tfor ( let i:number = 0, length:number = resources.length; i < length; i ++ ) {\n\t\t\tvar resource:RDF.Resource.Class = resources[ i ];\n\t\t\tif ( ! this.hasClassProperties( resource ) ) this.injectBehaviour( resource );\n\t\t}\n\n\t\tif ( Utils.isArray( resourceOrResources ) ) return <RDFSource[]> resources;\n\t\telse return <RDFSource> resources[ 0 ];\n\t}\n\n\tprotected hasRDFClass( resource:RDF.Resource.Class ):boolean {\n\t\treturn (\n\t\t\tresource.types.indexOf( RDFClass ) !== - 1\n\t\t);\n\t}\n\n\tprotected hasClassProperties( resource:RDF.Node.Class ):boolean {\n\t\treturn (\n\t\t\tUtils.hasPropertyDefined( resource, \"memberOfRelation\" ) &&\n\t\t\tUtils.hasPropertyDefined( resource, \"hasMemberRelation\" )\n\t\t);\n\t}\n\n\tprotected injectBehaviour( resource:RDF.Resource.Class ):RDFSource {\n\t\treturn <RDFSource> resource;\n\t}\n}\n\nvar factory = new Factory();\n\n//@formatter:off\nexport {\n\tRDFSource as Class,\n\tFactory,\n\tfactory\n};\n//@formatter:on"],"sourceRoot":"/source/"}