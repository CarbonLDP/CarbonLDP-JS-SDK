{"version":3,"sources":["LDP/Container.ts"],"names":["Factory","Factory.constructor","Factory.hasClassProperties","Factory.hasRDFClass"],"mappings":"AAAA,mDAAmD;;;QAStC,SAAS,EAET,MAAM,WAkDR,OAAO;;;;;;;;;;;;;YApDL,uBAAA,SAAS,GAAU,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAA,CAAC;YAE1C,oBAAA,MAAM,GAAsB;gBACxC,UAAU,EAAE;oBACX,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ;oBAChC,YAAY,EAAE,MAAM;oBACpB,OAAO,EAAE,KAAK;iBACd;gBACD,kBAAkB,EAAE;oBACnB,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,gBAAgB;oBACxC,OAAO,EAAE,KAAK;iBACd;gBACD,mBAAmB,EAAE;oBACpB,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,iBAAiB;oBACzC,OAAO,EAAE,KAAK;iBACd;aACD,CAAA,CAAC;YAOF;gBAAAA;gBA2BAC,CAACA;gBA1BAD,oCAAkBA,GAAlBA,UAAoBA,QAAuBA;oBAC1CE,MAAMA,CAACA,CACNA,KAAKA,CAACA,kBAAkBA,CAAEA,QAAQA,EAAEA,kBAAkBA,CAAEA;wBACxDA,KAAKA,CAACA,kBAAkBA,CAAEA,QAAQA,EAAEA,mBAAmBA,CAAEA,CACzDA,CAACA;gBACHA,CAACA;gBAIDF,6BAAWA,GAAXA,UAAaA,uBAA8BA;oBAC1CG,IAAIA,KAAKA,GAAYA,EAAEA,CAACA;oBACxBA,EAAEA,CAAAA,CAAEA,OAAOA,IAAIA,uBAAwBA,CAACA,CAACA,CAACA;wBACzCA,KAAKA,GAAGA,uBAAuBA,CAAEA,OAAOA,CAAEA,CAACA;oBAC5CA,CAACA;oBAACA,IAAIA,CAACA,EAAEA,CAAAA,CAAEA,OAAOA,IAAIA,uBAAwBA,CAACA,CAACA,CAACA;wBAChDA,yBAAyBA;wBACzBA,IAAIA,QAAQA,GAAoCA,uBAAuBA,CAACA;wBACxEA,KAAKA,GAAGA,OAAOA,CAACA,IAAIA,CAACA,MAAMA,CAAEA,QAAQA,CAACA,KAAKA,CAAEA,CAACA;oBAC/CA,CAACA;oBAEDA,MAAMA,CAACA,CACNA,KAAKA,CAACA,OAAOA,CAAEA,SAASA,CAAEA,KAAKA,CAAEA,CAACA;wBAClCA,KAAKA,CAACA,OAAOA,CAAEA,EAAEA,CAACA,GAAGA,CAACA,KAAKA,CAACA,cAAcA,CAAEA,KAAKA,CAAEA,CAACA;wBACpDA,KAAKA,CAACA,OAAOA,CAAEA,EAAEA,CAACA,GAAGA,CAACA,KAAKA,CAACA,eAAeA,CAAEA,KAAKA,CAAEA,CAACA;wBACrDA,KAAKA,CAACA,OAAOA,CAAEA,EAAEA,CAACA,GAAGA,CAACA,KAAKA,CAACA,iBAAiBA,CAAEA,KAAKA,CAAEA,CAACA,CACvDA,CAACA;gBACHA,CAACA;gBACFH,cAACA;YAADA,CA3BA,AA2BCA,IAAA;YA3BD,6BA2BC,CAAA;YAEU,qBAAA,OAAO,GAAW,IAAI,OAAO,EAAE,CAAA,CAAC","file":"LDP/Container.js","sourcesContent":["/// <reference path=\"../../typings/typings.d.ts\" />\n\nimport * as NS from \"./../NS\";\nimport * as ObjectSchema from \"./../ObjectSchema\";\nimport * as Pointer from \"./../Pointer\";\nimport * as RDF from \"./../RDF\";\nimport * as RDFSource from \"./RDFSource\";\nimport * as Utils from \"./../Utils\";\n\nexport const RDF_CLASS:string = NS.LDP.Class.Container;\n\nexport const SCHEMA:ObjectSchema.Class = {\n\t\"contains\": {\n\t\t\"@id\": NS.LDP.Predicate.contains,\n\t\t\"@container\": \"@set\",\n\t\t\"@type\": \"@id\",\n\t},\n\t\"memberOfRelation\": {\n\t\t\"@id\": NS.LDP.Predicate.memberOfRelation,\n\t\t\"@type\": \"@id\",\n\t},\n\t\"hasMemberRelation\": {\n\t\t\"@id\": NS.LDP.Predicate.hasMemberRelation,\n\t\t\"@type\": \"@id\",\n\t},\n};\n\nexport interface Class extends RDFSource.Class {\n\tmemberOfRelation:Pointer.Class;\n\thasMemberRelation:Pointer.Class;\n}\n\nexport class Factory {\n\thasClassProperties( resource:RDF.Node.Class ):boolean {\n\t\treturn (\n\t\t\tUtils.hasPropertyDefined( resource, \"memberOfRelation\" ) &&\n\t\t\tUtils.hasPropertyDefined( resource, \"hasMemberRelation\" )\n\t\t);\n\t}\n\n\thasRDFClass( pointer:Pointer.Class ):boolean;\n\thasRDFClass( expandedObject:Object ):boolean;\n\thasRDFClass( pointerOrExpandedObject:Object ):boolean {\n\t\tlet types:string[] = [];\n\t\tif( \"@type\" in pointerOrExpandedObject ) {\n\t\t\ttypes = pointerOrExpandedObject[ \"@type\" ];\n\t\t} else if( \"types\" in pointerOrExpandedObject ) {\n\t\t\t// TODO: Use proper class\n\t\t\tlet resource:{ types: Pointer.Class[] } = <any> pointerOrExpandedObject;\n\t\t\ttypes = Pointer.Util.getIDs( resource.types );\n\t\t}\n\n\t\treturn (\n\t\t\ttypes.indexOf( RDF_CLASS ) !== - 1 ||\n\t\t\ttypes.indexOf( NS.LDP.Class.BasicContainer ) !== - 1 ||\n\t\t\ttypes.indexOf( NS.LDP.Class.DirectContainer ) !== - 1 ||\n\t\t\ttypes.indexOf( NS.LDP.Class.IndirectContainer ) !== - 1\n\t\t);\n\t}\n}\n\nexport let factory:Factory = new Factory();\n\nexport default Class;\n"],"sourceRoot":"/source/"}