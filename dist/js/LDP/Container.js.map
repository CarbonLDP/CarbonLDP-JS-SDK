{"version":3,"sources":["LDP/Container.ts"],"names":[],"mappings":"AAAA,mDAAmD;;;;;QAStC,SAAS,EAET,MAAM,WA2DR,OAAO;;;;;;;;;;;;;YA7DL,uBAAA,SAAS,GAAU,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAA,CAAC;YAE1C,oBAAA,MAAM,GAAsB;gBACxC,UAAU,EAAE;oBACX,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ;oBAChC,YAAY,EAAE,MAAM;oBACpB,OAAO,EAAE,KAAK;iBACd;gBACD,SAAS,EAAE;oBACV,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM;oBAC9B,YAAY,EAAE,MAAM;oBACpB,OAAO,EAAE,KAAK;iBACd;gBACD,kBAAkB,EAAE;oBACnB,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,gBAAgB;oBACxC,OAAO,EAAE,KAAK;iBACd;gBACD,mBAAmB,EAAE;oBACpB,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,iBAAiB;oBACzC,OAAO,EAAE,KAAK;iBACd;gBACD,yBAAyB,EAAE;oBAC1B,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,uBAAuB;oBAC/C,OAAO,EAAE,KAAK;iBACd;aACD,CAAA,CAAC;YAOF;gBAAA;gBA2BA,CAAC;gBA1BA,oCAAkB,GAAlB,UAAoB,QAAuB;oBAC1C,MAAM,CAAC,CACN,KAAK,CAAC,kBAAkB,CAAE,QAAQ,EAAE,kBAAkB,CAAE;wBACxD,KAAK,CAAC,kBAAkB,CAAE,QAAQ,EAAE,mBAAmB,CAAE,CACzD,CAAC;gBACH,CAAC;gBAID,6BAAW,GAAX,UAAa,uBAA8B;oBAC1C,IAAI,KAAK,GAAY,EAAE,CAAC;oBACxB,EAAE,CAAA,CAAE,OAAO,IAAI,uBAAwB,CAAC,CAAC,CAAC;wBACzC,KAAK,GAAG,uBAAuB,CAAE,OAAO,CAAE,CAAC;oBAC5C,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAA,CAAE,OAAO,IAAI,uBAAwB,CAAC,CAAC,CAAC;wBAChD,yBAAyB;wBACzB,IAAI,QAAQ,GAAoC,uBAAuB,CAAC;wBACxE,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAE,QAAQ,CAAC,KAAK,CAAE,CAAC;oBAC/C,CAAC;oBAED,MAAM,CAAC,CACN,KAAK,CAAC,OAAO,CAAE,SAAS,CAAE,KAAK,CAAE,CAAC;wBAClC,KAAK,CAAC,OAAO,CAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,cAAc,CAAE,KAAK,CAAE,CAAC;wBACpD,KAAK,CAAC,OAAO,CAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,eAAe,CAAE,KAAK,CAAE,CAAC;wBACrD,KAAK,CAAC,OAAO,CAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,iBAAiB,CAAE,KAAK,CAAE,CAAC,CACvD,CAAC;gBACH,CAAC;gBACF,cAAC;YAAD,CA3BA,AA2BC,IAAA;YA3BD,6BA2BC,CAAA;YAEU,qBAAA,OAAO,GAAW,IAAI,OAAO,EAAE,CAAA,CAAC","file":"LDP/Container.js","sourcesContent":["/// <reference path=\"../../typings/typings.d.ts\" />\n\nimport * as NS from \"./../NS\";\nimport * as ObjectSchema from \"./../ObjectSchema\";\nimport * as Pointer from \"./../Pointer\";\nimport * as RDF from \"./../RDF\";\nimport * as RDFSource from \"./RDFSource\";\nimport * as Utils from \"./../Utils\";\n\nexport const RDF_CLASS:string = NS.LDP.Class.Container;\n\nexport const SCHEMA:ObjectSchema.Class = {\n\t\"contains\": {\n\t\t\"@id\": NS.LDP.Predicate.contains,\n\t\t\"@container\": \"@set\",\n\t\t\"@type\": \"@id\",\n\t},\n\t\"members\": {\n\t\t\"@id\": NS.LDP.Predicate.member,\n\t\t\"@container\": \"@set\",\n\t\t\"@type\": \"@id\",\n\t},\n\t\"memberOfRelation\": {\n\t\t\"@id\": NS.LDP.Predicate.memberOfRelation,\n\t\t\"@type\": \"@id\",\n\t},\n\t\"hasMemberRelation\": {\n\t\t\"@id\": NS.LDP.Predicate.hasMemberRelation,\n\t\t\"@type\": \"@id\",\n\t},\n\t\"insertedContentRelation\": {\n\t\t\"@id\": NS.LDP.Predicate.insertedContentRelation,\n\t\t\"@type\": \"@id\",\n\t},\n};\n\nexport interface Class extends RDFSource.Class {\n\tmemberOfRelation:Pointer.Class;\n\thasMemberRelation:Pointer.Class;\n}\n\nexport class Factory {\n\thasClassProperties( resource:RDF.Node.Class ):boolean {\n\t\treturn (\n\t\t\tUtils.hasPropertyDefined( resource, \"memberOfRelation\" ) &&\n\t\t\tUtils.hasPropertyDefined( resource, \"hasMemberRelation\" )\n\t\t);\n\t}\n\n\thasRDFClass( pointer:Pointer.Class ):boolean;\n\thasRDFClass( expandedObject:Object ):boolean;\n\thasRDFClass( pointerOrExpandedObject:Object ):boolean {\n\t\tlet types:string[] = [];\n\t\tif( \"@type\" in pointerOrExpandedObject ) {\n\t\t\ttypes = pointerOrExpandedObject[ \"@type\" ];\n\t\t} else if( \"types\" in pointerOrExpandedObject ) {\n\t\t\t// TODO: Use proper class\n\t\t\tlet resource:{ types: Pointer.Class[] } = <any> pointerOrExpandedObject;\n\t\t\ttypes = Pointer.Util.getIDs( resource.types );\n\t\t}\n\n\t\treturn (\n\t\t\ttypes.indexOf( RDF_CLASS ) !== - 1 ||\n\t\t\ttypes.indexOf( NS.LDP.Class.BasicContainer ) !== - 1 ||\n\t\t\ttypes.indexOf( NS.LDP.Class.DirectContainer ) !== - 1 ||\n\t\t\ttypes.indexOf( NS.LDP.Class.IndirectContainer ) !== - 1\n\t\t);\n\t}\n}\n\nexport let factory:Factory = new Factory();\n\nexport default Class;\n"],"sourceRoot":"/source/"}