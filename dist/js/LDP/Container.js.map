{"version":3,"sources":["LDP/Container.ts"],"names":["Factory","Factory.constructor","Factory.hasClassProperties","Factory.hasRDFClass"],"mappings":"AAAA,+CAA+C;AAE/C,IAAY,EAAE,WAAM,SAAS,CAAC,CAAA;AAE9B,IAAY,OAAO,WAAM,cAAc,CAAC,CAAA;AAGxC,IAAY,KAAK,WAAM,YAAY,CAAC,CAAA;AAEvB,iBAAS,GAAU,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC;AAE1C,cAAM,GAAsB;IACxC,UAAU,EAAE;QACX,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ;QAChC,YAAY,EAAE,MAAM;QACpB,OAAO,EAAE,KAAK;KACd;IACD,kBAAkB,EAAE;QACnB,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,gBAAgB;QACxC,OAAO,EAAE,KAAK;KACd;IACD,mBAAmB,EAAE;QACpB,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,iBAAiB;QACzC,OAAO,EAAE,KAAK;KACd;CACD,CAAC;AAOF;IAAAA;IA2BAC,CAACA;IA1BAD,oCAAkBA,GAAlBA,UAAoBA,QAAuBA;QAC1CE,MAAMA,CAACA,CACNA,KAAKA,CAACA,kBAAkBA,CAAEA,QAAQA,EAAEA,kBAAkBA,CAAEA;YACxDA,KAAKA,CAACA,kBAAkBA,CAAEA,QAAQA,EAAEA,mBAAmBA,CAAEA,CACzDA,CAACA;IACHA,CAACA;IAIDF,6BAAWA,GAAXA,UAAaA,uBAA8BA;QAC1CG,IAAIA,KAAKA,GAAYA,EAAEA,CAACA;QACxBA,EAAEA,CAAAA,CAAEA,OAAOA,IAAIA,uBAAwBA,CAACA,CAACA,CAACA;YACzCA,KAAKA,GAAGA,uBAAuBA,CAAEA,OAAOA,CAAEA,CAACA;QAC5CA,CAACA;QAACA,IAAIA,CAACA,EAAEA,CAAAA,CAAEA,OAAOA,IAAIA,uBAAwBA,CAACA,CAACA,CAACA;YAChDA,yBAAyBA;YACzBA,IAAIA,QAAQA,GAAoCA,uBAAuBA,CAACA;YACxEA,KAAKA,GAAGA,OAAOA,CAACA,IAAIA,CAACA,MAAMA,CAAEA,QAAQA,CAACA,KAAKA,CAAEA,CAACA;QAC/CA,CAACA;QAEDA,MAAMA,CAACA,CACNA,KAAKA,CAACA,OAAOA,CAAEA,iBAASA,CAAEA,KAAKA,CAAEA,CAACA;YAClCA,KAAKA,CAACA,OAAOA,CAAEA,EAAEA,CAACA,GAAGA,CAACA,KAAKA,CAACA,cAAcA,CAAEA,KAAKA,CAAEA,CAACA;YACpDA,KAAKA,CAACA,OAAOA,CAAEA,EAAEA,CAACA,GAAGA,CAACA,KAAKA,CAACA,eAAeA,CAAEA,KAAKA,CAAEA,CAACA;YACrDA,KAAKA,CAACA,OAAOA,CAAEA,EAAEA,CAACA,GAAGA,CAACA,KAAKA,CAACA,iBAAiBA,CAAEA,KAAKA,CAAEA,CAACA,CACvDA,CAACA;IACHA,CAACA;IACFH,cAACA;AAADA,CA3BA,AA2BCA,IAAA;AA3BY,eAAO,UA2BnB,CAAA;AAEU,eAAO,GAAW,IAAI,OAAO,EAAE,CAAC","file":"LDP/Container.js","sourcesContent":["/// <reference path=\"../../typings/tsd.d.ts\" />\n\nimport * as NS from \"./../NS\";\nimport * as ObjectSchema from \"./../ObjectSchema\";\nimport * as Pointer from \"./../Pointer\";\nimport * as RDF from \"./../RDF\";\nimport * as RDFSource from \"./RDFSource\";\nimport * as Utils from \"./../Utils\";\n\nexport const RDF_CLASS:string = NS.LDP.Class.Container;\n\nexport const SCHEMA:ObjectSchema.Class = {\n\t\"contains\": {\n\t\t\"@id\": NS.LDP.Predicate.contains,\n\t\t\"@container\": \"@set\",\n\t\t\"@type\": \"@id\",\n\t},\n\t\"memberOfRelation\": {\n\t\t\"@id\": NS.LDP.Predicate.memberOfRelation,\n\t\t\"@type\": \"@id\",\n\t},\n\t\"hasMemberRelation\": {\n\t\t\"@id\": NS.LDP.Predicate.hasMemberRelation,\n\t\t\"@type\": \"@id\",\n\t},\n};\n\nexport interface Class extends RDFSource.Class {\n\tmemberOfRelation:Pointer.Class;\n\thasMemberRelation:Pointer.Class;\n}\n\nexport class Factory {\n\thasClassProperties( resource:RDF.Node.Class ):boolean {\n\t\treturn (\n\t\t\tUtils.hasPropertyDefined( resource, \"memberOfRelation\" ) &&\n\t\t\tUtils.hasPropertyDefined( resource, \"hasMemberRelation\" )\n\t\t);\n\t}\n\n\thasRDFClass( pointer:Pointer.Class ):boolean;\n\thasRDFClass( expandedObject:Object ):boolean;\n\thasRDFClass( pointerOrExpandedObject:Object ):boolean {\n\t\tlet types:string[] = [];\n\t\tif( \"@type\" in pointerOrExpandedObject ) {\n\t\t\ttypes = pointerOrExpandedObject[ \"@type\" ];\n\t\t} else if( \"types\" in pointerOrExpandedObject ) {\n\t\t\t// TODO: Use proper class\n\t\t\tlet resource:{ types: Pointer.Class[] } = <any> pointerOrExpandedObject;\n\t\t\ttypes = Pointer.Util.getIDs( resource.types );\n\t\t}\n\n\t\treturn (\n\t\t\ttypes.indexOf( RDF_CLASS ) !== - 1 ||\n\t\t\ttypes.indexOf( NS.LDP.Class.BasicContainer ) !== - 1 ||\n\t\t\ttypes.indexOf( NS.LDP.Class.DirectContainer ) !== - 1 ||\n\t\t\ttypes.indexOf( NS.LDP.Class.IndirectContainer ) !== - 1\n\t\t);\n\t}\n}\n\nexport let factory:Factory = new Factory();\n\nexport default Class;\n"],"sourceRoot":"/source/"}