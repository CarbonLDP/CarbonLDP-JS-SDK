{"version":3,"sources":["LDP/BasicContainer.ts"],"names":["Injector","Injector.constructor","Injector.is","Injector.hasRDFClass","Injector.hasClassProperties","Injector.injectBehaviour"],"mappings":"AAAA,mDAAmD;;;;;;AAEnD,IAAY,EAAE,WAAM,SAAS,CAAC,CAAA;AAC9B,IAAY,GAAG,WAAM,UAAU,CAAC,CAAA;AAChC,IAAY,SAAS,WAAM,aAAa,CAAC,CAAA;AAGzC,IAAM,SAAS,GAAU,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC;AAMrD;IAA8BA,4BAA2BA;IACxDA;QACCC,kBAAOA,SAASA,EAAEA,CAAEA,SAASA,CAACA,QAAQA,CAAEA,CAAEA,CAACA;IAC5CA,CAACA;IAEDD,qBAAEA,GAAFA,UAAIA,MAAaA;QAChBE,MAAMA,CAACA,CACNA,gBAAKA,CAACA,EAAEA,YAAEA,MAAMA,CAAEA;YAClBA,IAAIA,CAACA,WAAWA,CAAoBA,MAAMA,CAAEA;YAC5CA,IAAIA,CAACA,kBAAkBA,CAAoBA,MAAMA,CAAEA,CACnDA,CAACA;IACHA,CAACA;IAEDF,8BAAWA,GAAXA,UAAaA,QAA2BA;QACvCG,MAAMA,CAACA,CACNA,QAAQA,CAACA,KAAKA,CAACA,OAAOA,CAAEA,EAAEA,CAACA,GAAGA,CAACA,KAAKA,CAACA,cAAcA,CAAEA,KAAKA,CAAEA,CAACA,CAC7DA,CAACA;IACHA,CAACA;IAEDH,qCAAkBA,GAAlBA,UAAoBA,QAAuBA;QAC1CI,MAAMA,CAACA,IAAIA,CAACA;IACbA,CAACA;IAESJ,kCAAeA,GAAzBA,UAA8BA,QAAUA;QACvCK,MAAMA,CAAOA,QAAQA,CAACA;IACvBA,CAACA;IACFL,eAACA;AAADA,CA1BA,AA0BCA,EA1B6B,GAAG,CAAC,gBAAgB,EA0BjD;AA1BY,gBAAQ,WA0BpB,CAAA;AAEU,gBAAQ,GAAY,IAAI,QAAQ,EAAE,CAAC","file":"LDP/BasicContainer.js","sourcesContent":["/// <reference path=\"../../typings/es6/es6.d.ts\" />\n\nimport * as NS from \"./../NS\";\nimport * as RDF from \"./../RDF\";\nimport * as Container from \"./Container\";\nimport * as Utils from \"./../Utils\";\n\nconst RDF_CLASS:string = NS.LDP.Class.BasicContainer;\n\nexport interface Class extends Container.Class {\n\n}\n\nexport class Injector extends RDF.AbstractInjector<Class> {\n\tconstructor() {\n\t\tsuper( RDF_CLASS, [ Container.injector ] );\n\t}\n\n\tis( object:Object ):boolean {\n\t\treturn (\n\t\t\tsuper.is( object ) &&\n\t\t\tthis.hasRDFClass( <Container.Class> object ) &&\n\t\t\tthis.hasClassProperties( <Container.Class> object )\n\t\t);\n\t}\n\n\thasRDFClass( resource:RDF.Resource.Class ):boolean {\n\t\treturn (\n\t\t\tresource.types.indexOf( NS.LDP.Class.BasicContainer ) !== - 1\n\t\t);\n\t}\n\n\thasClassProperties( resource:RDF.Node.Class ):boolean {\n\t\treturn true;\n\t}\n\n\tprotected injectBehaviour<T>( resource:T ):( T & Class ) {\n\t\treturn <any> resource;\n\t}\n}\n\nexport let injector:Injector = new Injector();\n\nexport default Class;\n"],"sourceRoot":"/source/"}