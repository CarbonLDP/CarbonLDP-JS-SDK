{"version":3,"sources":["AbstractContext.ts"],"names":["AbstractContext"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBAiBcA,sEAAwBA","file":"AbstractContext.js","sourcesContent":["/// <reference path=\"./../typings/typings.d.ts\" />\n\nimport Auth from \"./Auth\";\nimport Context from \"./Context\";\nimport Documents from \"./Documents\";\nimport * as Errors from \"./Errors\";\nimport * as JSONLDConverter from \"./JSONLDConverter\";\nimport * as Pointer from \"./Pointer\";\nimport * as RDF from \"./RDF\";\nimport * as SDKContext from \"./SDKContext\";\nimport * as Utils from \"./Utils\";\nimport * as ObjectSchema from \"./ObjectSchema\";\n\nabstract class AbstractContext extends SDKContext.Class {\n\t_parentContext:Context;\n\tget parentContext():Context { return this._parentContext; };\n\n\tconstructor( parentContext:Context = null ) {\n\t\tsuper();\n\n\t\tthis._parentContext = !! parentContext ? parentContext : SDKContext.instance;\n\n\t\tthis.generalObjectSchema = !! parentContext ? null : new ObjectSchema.DigestedObjectSchema();\n\t}\n\n\tabstract resolve( relativeURI:string ):string;\n}\n\nexport default AbstractContext;\n"],"sourceRoot":"/source/"}