{"version":3,"sources":["Fragment.ts"],"names":["Factory"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAoB2BA,iEAA0BA;;;;;;4BAMMA,iEAA0BA","file":"Fragment.js","sourcesContent":["import * as Document from \"./Document\";\nimport * as Errors from \"./Errors\";\nimport * as Pointer from \"./Pointer\";\nimport * as RDF from \"./RDF\";\nimport * as Resource from \"./Resource\";\nimport * as Utils from \"./Utils\";\n\nexport interface Class extends Resource.Class {\n\tdocument:Document.Class;\n}\n\nexport class Factory {\n\thasClassProperties( resource:Object ):boolean {\n\t\treturn (\n\t\t\tUtils.hasPropertyDefined( resource, \"document\" )\n\t\t);\n\t}\n\n\tcreate( id:string, document:Document.Class ):Class;\n\tcreate( document:Document.Class ):Class;\n\tcreate( idOrDocument:any, document:Document.Class = null ):Class {\n\t\treturn this.createFrom( {}, idOrDocument, document );\n\t}\n\n\tcreateFrom<T extends Object>( object:T, id:string, document:Document.Class ):T & Class;\n\tcreateFrom<T extends Object>( object:T, document:Document.Class ):T & Class;\n\tcreateFrom<T extends Object>( object:T, idOrDocument:any, document:Document.Class = null ):T & Class {\n\t\tlet id:string = !! document ? idOrDocument : Util.generateID();\n\n\t\tlet resource:Resource.Class = Resource.Factory.createFrom( object, id );\n\n\t\tif( this.hasClassProperties( resource ) ) return <any> resource;\n\n\t\tObject.defineProperties( resource, {\n\t\t\t\"document\": {\n\t\t\t\twritable: false,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: document,\n\t\t\t},\n\t\t} );\n\n\t\treturn <any> resource;\n\t}\n}\n\nexport var factory:Factory = new Factory();\n\nexport class Util {\n\tstatic generateID():string {\n\t\treturn \"_:\" + Utils.UUID.generate();\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}