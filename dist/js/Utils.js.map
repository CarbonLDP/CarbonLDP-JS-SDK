{"version":3,"sources":["Utils.ts"],"names":["A","M"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0CAgGmC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2DA+CEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2DAsBQC","file":"Utils.js","sourcesContent":["/// <reference path=\"./../typings/typings.d.ts\" />\n\nfunction hasFunction( object:Object, functionName:string ):boolean {\n\treturn typeof object[ functionName ] === \"function\";\n}\n\nfunction hasProperty( object:Object, property:string ):boolean {\n\tif ( ! object ) return false;\n\treturn \"undefined\" !== typeof object[ property ];\n}\n\nfunction hasPropertyDefined( object:Object, property:string ):boolean {\n\treturn ! ! Object.getOwnPropertyDescriptor( object, property );\n}\n\nfunction isNull( value:any ):boolean {\n\treturn value === null;\n}\n\nfunction isArray( object:any ):boolean {\n\treturn object instanceof Array;\n}\n\nfunction isString( value:any ):boolean {\n\treturn typeof value === \"string\" || value instanceof String;\n}\n\nfunction isBoolean( value:any ):boolean {\n\treturn typeof value === \"boolean\";\n}\n\nfunction isNumber( value:any ):boolean {\n\treturn typeof value === \"number\" || value instanceof Number;\n}\n\nfunction isInteger( value:any ):boolean {\n\tif ( ! isNumber( value ) )return false;\n\treturn value % 1 === 0;\n}\n\nfunction isDouble( value:any ):boolean {\n\tif ( ! isNumber( value ) ) return false;\n\treturn value % 1 !== 0;\n}\n\nfunction isDate( date:any ):boolean {\n\treturn typeof date === \"date\" || date instanceof Date;\n}\n\nfunction isObject( object:any ):boolean {\n\treturn typeof object === \"object\" && ( ! ! object );\n}\n\nfunction isFunction( value:any ):boolean {\n\treturn typeof value === \"function\";\n}\n\nfunction isMap( value:any ):boolean {\n\treturn (\n\t\tisObject( value ) &&\n\n\t\thasFunction( value, \"get\" ) &&\n\t\thasFunction( value, \"has\" ) &&\n\t\thasProperty( value, \"size\" ) &&\n\t\thasFunction( value, \"clear\" ) &&\n\t\thasFunction( value, \"delete\" ) &&\n\t\thasFunction( value, \"entries\" ) &&\n\t\thasFunction( value, \"forEach\" ) &&\n\t\thasFunction( value, \"get\" ) &&\n\t\thasFunction( value, \"has\" ) &&\n\t\thasFunction( value, \"keys\" ) &&\n\t\thasFunction( value, \"set\" ) &&\n\t\thasFunction( value, \"values\" )\n\t);\n}\n\nfunction parseBoolean( value:string ):boolean {\n\tif ( ! isString( value ) ) return false;\n\n\t/* tslint:disable: no-switch-case-fall-through */\n\tswitch ( value.toLowerCase() ) {\n\t\tcase \"true\":\n\t\tcase \"yes\":\n\t\tcase \"y\":\n\t\tcase \"1\":\n\t\t\treturn true;\n\t\tcase \"false\":\n\t\tcase \"no\":\n\t\tcase \"n\":\n\t\tcase \"0\":\n\t\tdefault:\n\t\t\treturn false;\n\t}\n\t/* tslint:enable: no-switch-case-fall-through */\n}\n\nfunction extend( target:Object, ...objects:Object[] ):Object {\n\tif ( arguments.length <= 1 ) return target;\n\tfor ( let i:number = 0, length:number = arguments.length; i < length; i ++ ) {\n\t\tlet toMerge:Object = objects[ i ];\n\t\tfor ( let name in toMerge ) {\n\t\t\tif ( toMerge.hasOwnProperty( name ) ) {\n\t\t\t\ttarget[ name ] = toMerge[ name ];\n\t\t\t}\n\t\t}\n\t}\n\treturn target;\n}\n\nfunction forEachOwnProperty( object:Object, action:( name:string, value:any ) => ( boolean | void ) ):void {\n\tif ( ! ( isObject( object ) || isFunction( object ) ) ) throw new Error( \"IllegalArgument\" );\n\tfor ( let name in object ) {\n\t\tif ( object.hasOwnProperty( name ) ) {\n\t\t\tif( action( name, object[ name ] ) === false ) break;\n\t\t}\n\t}\n}\n\nclass S {\n\tstatic startsWith( str:string, substring:string ):boolean {\n\t\treturn str.lastIndexOf( substring, 0 ) === 0;\n\t}\n\n\tstatic endsWith( str:string, substring:string ):boolean {\n\t\treturn str.indexOf( substring, str.length - substring.length ) !== - 1;\n\t}\n\n\tstatic contains( str:string, substring:string ):boolean {\n\t\treturn str.indexOf( substring ) !== - 1;\n\t}\n}\n\nclass A {\n\tstatic from<T>( iterator:Iterator<T> ):Array<T> {\n\t\tlet array:Array<T> = [];\n\t\tlet next:IteratorResult<T> = iterator.next();\n\t\twhile ( ! next.done ) {\n\t\t\tarray.push( next.value );\n\t\t\tnext = iterator.next();\n\t\t}\n\t\treturn array;\n\t}\n\n\tstatic joinWithoutDuplicates<T>( ...arrays:Array<Array<T>> ):Array<T> {\n\t\tlet result:Array<T> = arrays[ 0 ].slice();\n\n\t\tfor ( let i:number = 1, length:number = arrays.length; i < length; i ++ ) {\n\t\t\tresult = result.concat( arrays[ i ].filter( function ( item:T ):boolean {\n\t\t\t\treturn result.indexOf( item ) < 0;\n\t\t\t} ) );\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nclass M {\n\tstatic from<V>( object:Object ):Map<string, V> {\n\t\tlet map:Map<string, V> = new Map<string, V>();\n\t\tforEachOwnProperty( object, ( name:string, value:any ) => {\n\t\t\tmap.set( name, value );\n\t\t} );\n\t\treturn map;\n\t}\n\n\tstatic extend<K, V>( toExtend:Map<K, V>, ...extenders:Map<K, V>[] ):Map<K, V> {\n\t\tfor ( let i:number = 0, length:number = extenders.length; i < length; i ++ ) {\n\t\t\tlet extender:Map<K, V> = extenders[ i ];\n\t\t\tlet values:Iterator<Array<(K|V)>> = extender.entries();\n\n\t\t\tlet next:IteratorResult<Array<(K|V)>> = values.next();\n\t\t\twhile ( ! next.done ) {\n\t\t\t\tlet entry:Array<(K|V)> = next.value;\n\t\t\t\tlet key:K = <K> entry[ 0 ];\n\t\t\t\tlet value:V = <V> entry[ 1 ];\n\t\t\t\tif ( ! toExtend.has( key ) ) toExtend.set( key, value );\n\n\t\t\t\tnext = values.next();\n\t\t\t}\n\t\t}\n\t\treturn toExtend;\n\t}\n}\n\nclass UUID {\n\tprivate static regExp:RegExp = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n\n\tpublic static is( uuid:string ):boolean {\n\t\treturn UUID.regExp.test( uuid );\n\t}\n\n\tpublic static generate():string {\n\t\treturn \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace( /[xy]/g, function( c:string ):string {\n\t\t\tlet r:number = Math.random() * 16 | 0;\n\t\t\tlet v:number = c === \"x\" ? r : (r & 0x3 | 0x8);\n\t\t\treturn v.toString( 16 );\n\t\t} );\n\t}\n}\n\nclass P {\n\tpublic static createRejectedPromise<T extends Error>( error:T ):Promise<any> {\n\t\treturn new Promise<any>( ( resolve:( result:any ) => void, reject:( error:T ) => void ) => {\n\t\t\treject( error );\n\t\t} );\n\t}\n}\n\nexport {\n\thasFunction,\n\thasProperty,\n\thasPropertyDefined,\n\tisNull,\n\tisArray,\n\tisString,\n\tisBoolean,\n\tisNumber,\n\tisInteger,\n\tisDouble,\n\tisDate,\n\tisObject,\n\tisFunction,\n\tisMap,\n\tparseBoolean,\n\textend,\n\tforEachOwnProperty,\n\tS,\n\tA,\n\tM,\n\tUUID,\n\tP\n};\n"],"sourceRoot":"/source/"}