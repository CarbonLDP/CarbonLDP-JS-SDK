{"version":3,"sources":["ContextDigester.ts"],"names":["ContainerType","DigestedContext","DigestedContext.constructor","DigestedDefinition","DigestedDefinition.constructor","URI","URI.constructor","URI.toString","Class","Class.constructor","Class.digestContext","Class.combineDigestedContexts","Class.digestSingleContext","Class.resolvePrefixedURIs","Class.resolvePrefixedURI"],"mappings":"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","file":"ContextDigester.js","sourcesContent":["/// <reference path=\"./../typings/tsd.d.ts\" />\n\nimport * as Errors from \"./Errors\";\nimport * as NS from \"./NS\";\nimport * as Pointer from \"./Pointer\";\nimport * as RDF from \"./RDF\";\nimport * as Utils from \"./Utils\";\n\nexport interface Context {\n\t\"@base\"?:string;\n\t\"@index\"?:Object;\n\t\"@language\"?:string;\n\t\"@reverse\"?:Object;\n\t\"@vocab\"?:string;\n\t[ name:string ]:(string | ContextDefinition);\n}\n\nexport interface ContextDefinition {\n\t\"@id\"?:string;\n\t\"@type\"?:string;\n\t\"@language\"?:string;\n\t\"@container\"?:string;\n}\n\nexport enum ContainerType {\n\tSET,\n\tLIST,\n\tLANGUAGE\n}\n\nexport class DigestedContext {\n\tbase:string;\n\tprefixes:Map<string, URI>;\n\tproperties:Map<string, DigestedDefinition>;\n\tprefixedURIs:Map<string, URI[]>;\n\n\tconstructor() {\n\t\tthis.base = \"\";\n\t\tthis.prefixes = new Map<string, URI>();\n\t\tthis.properties = new Map<string, DigestedDefinition>();\n\t\tthis.prefixedURIs = new Map<string, URI[]>();\n\t}\n}\n\nexport class DigestedDefinition {\n\turi:URI = null;\n\tliteral:boolean = null;\n\tliteralType:URI = null;\n\tlanguage:string = null;\n\tcontainerType:ContainerType = null;\n}\n\nexport class URI {\n\tstringValue:string;\n\n\tconstructor( stringValue:string ) {\n\t\tthis.stringValue = stringValue;\n\t}\n\n\ttoString():string {\n\t\treturn this.stringValue;\n\t}\n}\n\nexport class Class {\n\tstatic digestContext( contexts:Context[] ):DigestedContext;\n\tstatic digestContext( context:Context ):DigestedContext;\n\tstatic digestContext( contextOrContexts:any ):DigestedContext {\n\t\tif( ! Utils.isArray( contextOrContexts ) ) return Class.digestSingleContext( contextOrContexts );\n\n\t\tlet digestedContexts:DigestedContext[] = [];\n\t\tfor( let context of <Context[]> contextOrContexts ) {\n\t\t\tdigestedContexts.push( Class.digestSingleContext( context ) );\n\t\t}\n\n\t\treturn Class.combineDigestedContexts( digestedContexts );\n\t}\n\n\tstatic combineDigestedContexts( digestedContexts:DigestedContext[] ):DigestedContext {\n\t\tif( digestedContexts.length === 0 ) throw new Errors.IllegalArgumentError( \"At least one digestedContext needs to be specified.\" );\n\n\t\tlet combinedContext:DigestedContext = digestedContexts.shift();\n\n\t\tfor( let digestedContext of digestedContexts ) {\n\t\t\tUtils.M.extend( combinedContext.prefixes, digestedContext.prefixes );\n\t\t\tUtils.M.extend( combinedContext.prefixedURIs, digestedContext.prefixedURIs );\n\t\t\tUtils.M.extend( combinedContext.properties, digestedContext.properties );\n\t\t}\n\n\t\tClass.resolvePrefixedURIs( combinedContext );\n\n\t\treturn combinedContext;\n\t}\n\n\tprivate static digestSingleContext( context:Context ):DigestedContext {\n\t\tlet digestedContext:DigestedContext = new DigestedContext();\n\n\t\tfor( let propertyName in context ) {\n\t\t\tif( ! context.hasOwnProperty( propertyName ) ) continue;\n\n\t\t\tif( propertyName === \"@reverse\" ) continue;\n\t\t\tif( propertyName === \"@index\" ) continue;\n\t\t\tif( propertyName === \"@base\" ) continue;\n\t\t\tif( propertyName === \"@vocab\" ) continue;\n\n\t\t\tlet propertyValue:( string | ContextDefinition ) = context[ propertyName ];\n\n\t\t\tif( Utils.isString( propertyValue ) ) {\n\t\t\t\tif( RDF.URI.Util.isPrefixed( propertyName ) ) throw new Errors.IllegalArgumentError( \"A prefixed property cannot be equal to another URI.\" );\n\n\t\t\t\tlet uri:URI = new URI( <string> propertyValue );\n\t\t\t\tif( RDF.URI.Util.isPrefixed( uri.stringValue ) ) uri = Class.resolvePrefixedURI( uri, digestedContext );\n\t\t\t\tdigestedContext.prefixes.set( propertyName, uri );\n\t\t\t} else if( !! propertyValue && Utils.isObject( propertyValue ) ) {\n\t\t\t\tlet contextDefinition:ContextDefinition = <ContextDefinition> propertyValue;\n\t\t\t\tlet digestedDefinition:DigestedDefinition = new DigestedDefinition();\n\n\t\t\t\tif( \"@id\" in contextDefinition ) {\n\t\t\t\t\tif( RDF.URI.Util.isPrefixed( propertyName ) ) throw new Errors.IllegalArgumentError( \"A prefixed property cannot have assigned another URI.\" );\n\n\t\t\t\t\tif( ! Utils.isString( contextDefinition[ \"@id\" ] ) ) throw new Errors.IllegalArgumentError( \"@id needs to point to a string\" );\n\t\t\t\t\tdigestedDefinition.uri = Class.resolvePrefixedURI( new URI( contextDefinition[ \"@id\" ] ), digestedContext );\n\t\t\t\t} else if( RDF.URI.Util.isPrefixed( propertyName ) ) {\n\t\t\t\t\tdigestedDefinition.uri = Class.resolvePrefixedURI( new URI( propertyName ), digestedContext );\n\t\t\t\t} else {\n\t\t\t\t\t// TODO: Handle @vocab or @base case\n\t\t\t\t\tthrow new Errors.IllegalArgumentError( \"Every property definition needs to have a uri defined.\" );\n\t\t\t\t}\n\n\t\t\t\tif( \"@type\" in contextDefinition ) {\n\t\t\t\t\tif( ! Utils.isString( contextDefinition[ \"@type\" ] ) ) throw new Errors.IllegalArgumentError( \"@type needs to point to a string\" );\n\n\t\t\t\t\tif( contextDefinition[ \"@type\" ] === \"@id\" ) {\n\t\t\t\t\t\tdigestedDefinition.literal = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdigestedDefinition.literal = true;\n\t\t\t\t\t\tdigestedDefinition.literalType = Class.resolvePrefixedURI( new URI( contextDefinition[ \"@type\" ] ), digestedContext );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif( \"@language\" in contextDefinition ) {\n\t\t\t\t\tif( ! Utils.isString( contextDefinition[ \"@language\" ] ) ) throw new Errors.IllegalArgumentError( \"@language needs to point to a string\" );\n\t\t\t\t\tdigestedDefinition.language = contextDefinition[ \"@language\" ];\n\t\t\t\t}\n\n\t\t\t\tif( \"@container\" in contextDefinition ) {\n\t\t\t\t\tswitch( contextDefinition[ \"@container\" ] ) {\n\t\t\t\t\t\tcase \"@set\":\n\t\t\t\t\t\t\tdigestedDefinition.containerType = ContainerType.SET;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"@list\":\n\t\t\t\t\t\t\tdigestedDefinition.containerType = ContainerType.LIST;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"@language\":\n\t\t\t\t\t\t\tif( digestedDefinition.language !== null ) throw new Errors.IllegalArgumentError( \"@container cannot be set to @language when the property definition already contains an @language tag.\" );\n\t\t\t\t\t\t\tdigestedDefinition.containerType = ContainerType.LANGUAGE;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthrow new Errors.IllegalArgumentError( \"@container needs to be equal to '@list', '@set', or '@language'\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdigestedContext.properties.set( propertyName, digestedDefinition );\n\t\t\t} else {\n\t\t\t\tthrow new Errors.IllegalArgumentError( \"Context Properties can only have string values or object values.\" );\n\t\t\t}\n\t\t}\n\n\t\tClass.resolvePrefixedURIs( digestedContext );\n\n\t\treturn digestedContext;\n\t}\n\n\tprivate static resolvePrefixedURIs( digestedContext:DigestedContext ):DigestedContext {\n\t\tdigestedContext.prefixes.forEach( ( prefixValue:URI, prefixName:string ) => {\n\t\t\tif( ! digestedContext.prefixedURIs.has( prefixName ) ) return;\n\n\t\t\tlet prefixedURIs:URI[] = digestedContext.prefixedURIs.get( prefixName );\n\t\t\tfor( let prefixedURI of prefixedURIs ) {\n\t\t\t\tClass.resolvePrefixedURI( prefixedURI, digestedContext );\n\t\t\t}\n\n\t\t\tdigestedContext.prefixedURIs.delete( prefixName );\n\t\t} );\n\n\t\treturn digestedContext;\n\t}\n\n\tprivate static resolvePrefixedURI( uri:URI, digestedContext:DigestedContext ):URI {\n\t\tlet uriParts:string[] = uri.stringValue.split( \":\" );\n\t\tlet prefix:string = uriParts[ 0 ];\n\t\tlet slug:string = uriParts[ 1 ];\n\n\t\tif( digestedContext.prefixes.has( prefix ) ) {\n\t\t\turi.stringValue = digestedContext.prefixes.get( prefix ) + slug;\n\t\t} else {\n\t\t\tif( ! digestedContext.prefixedURIs.has( prefix ) ) digestedContext.prefixedURIs.set( prefix, [] );\n\t\t\tdigestedContext.prefixedURIs.get( prefix ).push( uri );\n\t\t}\n\n\t\treturn uri;\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}