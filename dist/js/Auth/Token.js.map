{"version":3,"sources":["Auth/Token.ts"],"names":["Factory","Factory.constructor","Factory.hasClassProperties","Factory.from","Factory.hasRDFClass","Factory.injectBehavior"],"mappings":";;;;;AAAA,IAAY,EAAE,WAAM,SAAS,CAAC,CAAA;AAC9B,IAAY,GAAG,WAAM,UAAU,CAAC,CAAA;AAChC,IAAY,KAAK,WAAM,YAAY,CAAC,CAAA;AAEvB,iBAAS,GAAU,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC;AAErC,kBAAU,GAA8C,KAAK,CAAC,CAAC,CAAC,IAAI,CAAE;IAClF,KAAK,EAAE;QACN,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,QAAQ;QAC/B,OAAO,EAAE,KAAK;QACd,SAAS,EAAE,IAAI;KACf;IACD,gBAAgB,EAAE;QACjB,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,cAAc;QACrC,OAAO,EAAE,KAAK;QACd,SAAS,EAAE,IAAI;KACf;CACD,CAAE,CAAC;AAOJ;IAA6BA,2BAAoBA;IAAjDA;QAA6BC,8BAAoBA;IAmCjDA,CAACA;IAlCOD,0BAAkBA,GAAzBA,UAA2BA,QAAuBA;QACjDE,MAAMA,CAACA,CACLA,KAAKA,CAACA,kBAAkBA,CAAEA,QAAQA,EAAEA,KAAKA,CAAEA;YAC3CA,KAAKA,CAACA,kBAAkBA,CAAEA,QAAQA,EAAEA,gBAAgBA,CAAEA,CACvDA,CAACA;IACHA,CAACA;IAIDF,sBAAIA,GAAJA,UAAMA,OAAWA;QAChBG,EAAEA,CAAAA,CAAEA,CAAEA,KAAKA,CAACA,OAAOA,CAAEA,OAAOA,CAAGA,CAACA;YAACA,MAAMA,CAACA,IAAIA,CAACA,UAAUA,CAAEA,OAAOA,CAAEA,CAACA;QAEnEA,GAAGA,CAACA,CAAEA,GAAGA,CAACA,CAACA,GAAUA,CAACA,EAAEA,QAAMA,GAAUA,OAAOA,CAACA,MAAMA,EAAEA,CAACA,GAAGA,QAAMA,EAAEA,CAACA,EAAGA,EAAGA,CAACA;YAC3EA,IAAIA,QAAQA,GAAmCA,OAAOA,CAAEA,CAACA,CAAEA,CAACA;YAC5DA,IAAIA,CAACA,cAAcA,CAAEA,QAAQA,CAAEA,CAACA;QACjCA,CAACA;QAEDA,MAAMA,CAACA,OAAOA,CAACA;IAChBA,CAACA;IAEDH,6BAAWA,GAAXA,UAAaA,QAA2BA;QACvCI,MAAMA,CAACA,QAAQA,CAACA,KAAKA,CAACA,OAAOA,CAAEA,iBAASA,CAAEA,KAAKA,CAACA,CAACA,CAACA;IACnDA,CAACA;IAESJ,gCAAcA,GAAxBA,UAA0BA,IAAWA;QACpCK,IAAIA,KAAKA,GAAiBA,IAAIA,CAACA;QAC/BA,gBAAKA,CAACA,cAAcA,YAAEA,IAAIA,CAAEA,CAACA;QAE7BA,EAAEA,CAAAA,CAAEA,OAAOA,CAACA,kBAAkBA,CAAEA,KAAKA,CAAGA,CAACA;YAACA,MAAMA,CAACA,KAAKA,CAACA;QAEvDA,GAAGA,CAACA,QAAQA,CAACA,OAAOA,CAACA,kBAAkBA,CAAEA,KAAKA,EAAEA,kBAAUA,CAAEA,CAACA;QAE7DA,MAAMA,CAACA,KAAKA,CAACA;IACdA,CAACA;IACFL,cAACA;AAADA,CAnCA,AAmCCA,EAnC4B,GAAG,CAAC,QAAQ,CAAC,OAAO,EAmChD;AAnCY,eAAO,UAmCnB,CAAA;AAEU,eAAO,GAAW,IAAI,OAAO,EAAE,CAAC","file":"Auth/Token.js","sourcesContent":["import * as NS from \"./../NS\";\nimport * as RDF from \"./../RDF\";\nimport * as Utils from \"./../Utils\";\n\nexport const RDF_CLASS:string = NS.CS.Class.Token;\n\nexport const DEFINITION:Map<string, RDF.PropertyDescription> = <any> Utils.M.from( {\n\t\"key\": {\n\t\t\"uri\": NS.CS.Predicate.tokenKey,\n\t\t\"multi\": false,\n\t\t\"literal\": true,\n\t},\n\t\"expirationTime\": {\n\t\t\"uri\": NS.CS.Predicate.expirationTime,\n\t\t\"multi\": false,\n\t\t\"literal\": true,\n\t},\n} );\n\nexport interface Class extends RDF.Resource.Class {\n\tkey:string;\n\texpirationTime:Date;\n}\n\nexport class Factory extends RDF.Resource.Factory {\n\tstatic hasClassProperties( resource:RDF.Node.Class ):boolean {\n\t\treturn (\n\t\t\t\tUtils.hasPropertyDefined( resource, \"key\" ) &&\n\t\t\t\tUtils.hasPropertyDefined( resource, \"expirationTime\" )\n\t\t);\n\t}\n\n\tfrom( object:Array<Object> ):Class[];\n\tfrom( object:Object ):Class;\n\tfrom( objects:any ):any {\n\t\tif( ! Utils.isArray( objects ) ) return this.singleFrom( objects );\n\n\t\tfor ( let i:number = 0, length:number = objects.length; i < length; i ++ ) {\n\t\t\tlet resource:RDF.Node.Class = <RDF.Node.Class> objects[ i ];\n\t\t\tthis.injectBehavior( resource );\n\t\t}\n\n\t\treturn objects;\n\t}\n\n\thasRDFClass( resource:RDF.Resource.Class ):boolean {\n\t\treturn resource.types.indexOf( RDF_CLASS ) !== -1;\n\t}\n\n\tprotected injectBehavior( node:Object ):Class {\n\t\tlet token:Class = <Class> node;\n\t\tsuper.injectBehavior( node );\n\n\t\tif( Factory.hasClassProperties( token ) ) return token;\n\n\t\tRDF.Resource.Factory.injectDescriptions( token, DEFINITION );\n\n\t\treturn token;\n\t}\n}\n\nexport let factory:Factory = new Factory();\n\nexport default Class;\n"],"sourceRoot":"/source/"}