{"version":3,"sources":["Auth/Token.ts"],"names":["Factory","Factory.constructor","Factory.hasClassProperties","Factory.decorate","Factory.hasRDFClass"],"mappings":"AAAA,IAAY,EAAE,WAAM,SAAS,CAAC,CAAA;AAE9B,IAAY,OAAO,WAAM,cAAc,CAAC,CAAA;AAGxC,IAAY,KAAK,WAAM,YAAY,CAAC,CAAA;AAEvB,iBAAS,GAAU,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC;AAErC,eAAO,GAAsB;IACzC,KAAK,EAAE;QACN,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,QAAQ;QAC/B,OAAO,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM;KAC/B;IACD,gBAAgB,EAAE;QACjB,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,cAAc;QACrC,OAAO,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ;KACjC;CACD,CAAC;AAOF;IAAAA;IA8BAC,CAACA;IA7BAD,oCAAkBA,GAAlBA,UAAoBA,MAAaA;QAChCE,MAAMA,CAACA,CACNA,KAAKA,CAACA,QAAQA,CAAEA,MAAMA,CAAEA;YAExBA,KAAKA,CAACA,kBAAkBA,CAAEA,MAAMA,EAAEA,KAAKA,CAAEA;YACzCA,KAAKA,CAACA,kBAAkBA,CAAEA,MAAMA,EAAEA,gBAAgBA,CAAEA,CACpDA,CAACA;IACHA,CAACA;IAEDF,0BAAQA,GAARA,UAA4BA,MAAQA;QACnCG,EAAEA,CAAAA,CAAEA,IAAIA,CAACA,kBAAkBA,CAAEA,MAAMA,CAAGA,CAACA;YAACA,MAAMA,CAAOA,MAAMA,CAACA;QAE5DA,MAAMA,CAAOA,MAAMA,CAACA;IACrBA,CAACA;IAIDH,6BAAWA,GAAXA,UAAaA,uBAA8BA;QAC1CI,IAAIA,KAAKA,GAAYA,EAAEA,CAACA;QACxBA,EAAEA,CAAAA,CAAEA,OAAOA,IAAIA,uBAAwBA,CAACA,CAACA,CAACA;YACzCA,KAAKA,GAAGA,uBAAuBA,CAAEA,OAAOA,CAAEA,CAACA;QAC5CA,CAACA;QAACA,IAAIA,CAACA,EAAEA,CAAAA,CAAEA,OAAOA,IAAIA,uBAAwBA,CAACA,CAACA,CAACA;YAChDA,yBAAyBA;YACzBA,IAAIA,QAAQA,GAAoCA,uBAAuBA,CAACA;YACxEA,KAAKA,GAAGA,OAAOA,CAACA,IAAIA,CAACA,MAAMA,CAAEA,QAAQA,CAACA,KAAKA,CAAEA,CAACA;QAC/CA,CAACA;QAEDA,MAAMA,CAACA,KAAKA,CAACA,OAAOA,CAAEA,iBAASA,CAAEA,KAAKA,CAACA,CAACA,CAACA;IAC1CA,CAACA;IACFJ,cAACA;AAADA,CA9BA,AA8BCA,IAAA;AA9BY,eAAO,UA8BnB,CAAA;AAEU,eAAO,GAAW,IAAI,OAAO,EAAE,CAAC","file":"Auth/Token.js","sourcesContent":["import * as NS from \"./../NS\";\nimport * as ObjectSchema from \"./../ObjectSchema\";\nimport * as Pointer from \"./../Pointer\";\nimport * as RDF from \"./../RDF\";\nimport SDKContext from \"./../SDKContext\";\nimport * as Utils from \"./../Utils\";\n\nexport const RDF_CLASS:string = NS.CS.Class.Token;\n\nexport const CONTEXT:ObjectSchema.Class = {\n\t\"key\": {\n\t\t\"@id\": NS.CS.Predicate.tokenKey,\n\t\t\"@type\": NS.XSD.DataType.string,\n\t},\n\t\"expirationTime\": {\n\t\t\"@id\": NS.CS.Predicate.expirationTime,\n\t\t\"@type\": NS.XSD.DataType.dateTime,\n\t},\n};\n\nexport interface Class extends Pointer.Class {\n\tkey:string;\n\texpirationTime:Date;\n}\n\nexport class Factory {\n\thasClassProperties( object:Object ):boolean {\n\t\treturn (\n\t\t\tUtils.isObject( object ) &&\n\n\t\t\tUtils.hasPropertyDefined( object, \"key\" ) &&\n\t\t\tUtils.hasPropertyDefined( object, \"expirationTime\" )\n\t\t);\n\t}\n\n\tdecorate<T extends Object>( object:T ):T & Class {\n\t\tif( this.hasClassProperties( object ) ) return <any> object;\n\n\t\treturn <any> object;\n\t}\n\n\thasRDFClass( pointer:Pointer.Class ):boolean;\n\thasRDFClass( expandedObject:Object ):boolean;\n\thasRDFClass( pointerOrExpandedObject:Object ):boolean {\n\t\tlet types:string[] = [];\n\t\tif( \"@type\" in pointerOrExpandedObject ) {\n\t\t\ttypes = pointerOrExpandedObject[ \"@type\" ];\n\t\t} else if( \"types\" in pointerOrExpandedObject ) {\n\t\t\t// TODO: Use proper class\n\t\t\tlet resource:{ types: Pointer.Class[] } = <any> pointerOrExpandedObject;\n\t\t\ttypes = Pointer.Util.getIDs( resource.types );\n\t\t}\n\n\t\treturn types.indexOf( RDF_CLASS ) !== -1;\n\t}\n}\n\nexport let factory:Factory = new Factory();\n\nexport default Class;\n"],"sourceRoot":"/source/"}