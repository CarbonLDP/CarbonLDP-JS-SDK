{"version":3,"sources":["Auth/BasicAuthenticator.ts"],"names":["Class","Class.constructor","Class.isAuthenticated","Class.authenticate","Class.addAuthentication","Class.clearAuthentication","Class.supports","Class.addBasicAuthenticationHeader"],"mappings":"AAAA,IAAY,IAAI,WAAM,WAAW,CAAC,CAAA;AAGlC,IAAY,MAAM,WAAM,aAAa,CAAC,CAAA;AACtC,yCAAqC,4BAA4B,CAAC,CAAA;AAOlE;IAAAA;IAmDAC,CAACA;IAhDAD,+BAAeA,GAAfA;QACCE,MAAMA,CAACA,IAAIA,CAACA,WAAWA,KAAKA,IAAIA,CAACA;IAClCA,CAACA;IAEDF,4BAAYA,GAAZA,UAAcA,mBAA4CA;QAA1DG,iBAaCA;QAZAA,EAAEA,CAAAA,CAAEA,mBAAmBA,KAAKA,IAAKA,CAACA;YAACA,MAAMA,IAAIA,MAAMA,CAACA,oBAAoBA,CAAEA,yCAAyCA,CAAEA,CAACA;QAEtHA,MAAMA,CAACA,IAAIA,OAAOA,CAAQA,UAAEA,OAAkBA,EAAEA,MAA4BA;YAC3EA,EAAEA,CAAAA,CAAEA,CAAEA,mBAAmBA,CAACA,QAASA,CAACA;gBAACA,MAAMA,IAAIA,MAAMA,CAACA,oBAAoBA,CAAEA,+BAA+BA,CAAEA,CAACA;YAC9GA,EAAEA,CAAAA,CAAEA,CAAEA,mBAAmBA,CAACA,QAASA,CAACA;gBAACA,MAAMA,IAAIA,MAAMA,CAACA,oBAAoBA,CAAEA,+BAA+BA,CAAEA,CAACA;YAE9GA,yDAAyDA;YAEzDA,KAAIA,CAACA,WAAWA,GAAGA,mBAAmBA,CAACA;YAEvCA,OAAOA,EAAEA,CAACA;QACXA,CAACA,CAACA,CAACA;IACJA,CAACA;IAEDH,iCAAiBA,GAAjBA,UAAmBA,cAAmCA;QACrDI,IAAIA,OAAOA,GAAkCA,cAAcA,CAACA,OAAOA,GAAGA,cAAcA,CAACA,OAAOA,GAAGA,cAAcA,CAACA,OAAOA,GAAGA,IAAIA,GAAGA,EAA6BA,CAACA;QAE7JA,IAAIA,CAACA,4BAA4BA,CAAEA,OAAOA,CAAEA,CAACA;QAE7CA,MAAMA,CAACA,cAAcA,CAACA;IACvBA,CAACA;IAEDJ,mCAAmBA,GAAnBA;QACCK,IAAIA,CAACA,WAAWA,GAAGA,IAAIA,CAACA;IACzBA,CAACA;IAEDL,wBAAQA,GAARA,UAAUA,mBAAuCA;QAChDM,MAAMA,CAACA,mBAAmBA,YAAYA,kCAAwBA,CAACA;IAChEA,CAACA;IAEON,4CAA4BA,GAApCA,UAAsCA,OAAsCA;QAC3EO,IAAIA,MAAwBA,CAACA;QAC7BA,EAAEA,CAACA,CAAEA,OAAOA,CAACA,GAAGA,CAAEA,eAAeA,CAAGA,CAACA,CAACA,CAACA;YACtCA,MAAMA,GAAGA,OAAOA,CAACA,GAAGA,CAAEA,eAAeA,CAAEA,CAACA;QACzCA,CAACA;QAACA,IAAIA,CAACA,CAACA;YACPA,MAAMA,GAAGA,IAAIA,IAAIA,CAACA,MAAMA,CAACA,KAAKA,EAAEA,CAACA;YACjCA,OAAOA,CAACA,GAAGA,CAAEA,eAAeA,EAAEA,MAAMA,CAAEA,CAACA;QACxCA,CAACA;QACDA,IAAIA,aAAaA,GAAUA,QAAQA,GAAGA,IAAIA,CAAEA,IAAIA,CAACA,WAAWA,CAACA,QAAQA,GAAGA,GAAGA,GAAGA,IAAIA,CAACA,WAAWA,CAACA,QAAQA,CAAEA,CAACA;QAC1GA,MAAMA,CAACA,MAAMA,CAACA,IAAIA,CAAEA,IAAIA,IAAIA,CAACA,MAAMA,CAACA,KAAKA,CAAEA,aAAaA,CAAEA,CAAEA,CAACA;QAE7DA,MAAMA,CAACA,OAAOA,CAACA;IAChBA,CAACA;IACFP,YAACA;AAADA,CAnDA,AAmDCA,IAAA;AAnDY,aAAK,QAmDjB,CAAA;AAED;kBAAe,KAAK,CAAC","file":"Auth/BasicAuthenticator.js","sourcesContent":["import * as HTTP from \"./../HTTP\";\nimport Authenticator from \"./Authenticator\";\nimport AuthenticationToken from \"./AuthenticationToken\";\nimport * as Errors from \"./../Errors\";\nimport UsernameAndPasswordToken from \"./UsernameAndPasswordToken\";\n\nexport interface Credentials {\n\tusername:string;\n\tpassword:string;\n}\n\nexport class Class implements Authenticator<UsernameAndPasswordToken> {\n\tprivate credentials:Credentials;\n\n\tisAuthenticated():boolean {\n\t\treturn this.credentials !== null;\n\t}\n\n\tauthenticate( authenticationToken:UsernameAndPasswordToken ):Promise<void>  {\n\t\tif( authenticationToken === null ) throw new Errors.IllegalArgumentError( \"The authenticationToken cannot be null.\" );\n\n\t\treturn new Promise<void>( ( resolve:() => void, reject:( error:any ) => void ) => {\n\t\t\tif( ! authenticationToken.username ) throw new Errors.IllegalArgumentError( \"The username cannot be empty.\" );\n\t\t\tif( ! authenticationToken.password ) throw new Errors.IllegalArgumentError( \"The password cannot be empty.\" );\n\n\t\t\t// TODO: Check that the username and password are correct\n\n\t\t\tthis.credentials = authenticationToken;\n\n\t\t\tresolve();\n\t\t});\n\t}\n\n\taddAuthentication( requestOptions:HTTP.Request.Options ):HTTP.Request.Options {\n\t\tlet headers:Map<string, HTTP.Header.Class> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, HTTP.Header.Class>();\n\n\t\tthis.addBasicAuthenticationHeader( headers );\n\n\t\treturn requestOptions;\n\t}\n\n\tclearAuthentication():void {\n\t\tthis.credentials = null;\n\t}\n\n\tsupports( authenticationToken:AuthenticationToken ):boolean {\n\t\treturn authenticationToken instanceof UsernameAndPasswordToken;\n\t}\n\n\tprivate addBasicAuthenticationHeader( headers:Map<string, HTTP.Header.Class> ):Map<string, HTTP.Header.Class> {\n\t\tlet header:HTTP.Header.Class;\n\t\tif ( headers.has( \"Authorization\" ) ) {\n\t\t\theader = headers.get( \"Authorization\" );\n\t\t} else {\n\t\t\theader = new HTTP.Header.Class();\n\t\t\theaders.set( \"Authorization\", header );\n\t\t}\n\t\tlet authorization:string = \"Basic \" + btoa( this.credentials.username + \":\" + this.credentials.password );\n\t\theader.values.push( new HTTP.Header.Value( authorization ) );\n\n\t\treturn headers;\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}