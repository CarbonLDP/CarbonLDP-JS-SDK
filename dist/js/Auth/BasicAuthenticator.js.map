{"version":3,"sources":["Auth/BasicAuthenticator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;YAQA;gBAAA;gBAmDA,CAAC;gBAhDA,+BAAe,GAAf;oBACC,MAAM,CAAC,CAAC,CAAE,IAAI,CAAC,WAAW,CAAC;gBAC5B,CAAC;gBAED,4BAAY,GAAZ,UAAc,mBAA4C;oBAA1D,iBAWC;oBAVA,EAAE,CAAA,CAAE,mBAAmB,KAAK,IAAK,CAAC;wBAAC,MAAM,IAAI,MAAM,CAAC,oBAAoB,CAAE,yCAAyC,CAAE,CAAC;oBAEtH,MAAM,CAAC,IAAI,OAAO,CAAwC,UAAE,OAA8B,EAAE,MAA4B;wBACvH,EAAE,CAAA,CAAE,CAAE,mBAAmB,CAAC,QAAS,CAAC;4BAAC,MAAM,IAAI,MAAM,CAAC,oBAAoB,CAAE,+BAA+B,CAAE,CAAC;wBAC9G,EAAE,CAAA,CAAE,CAAE,mBAAmB,CAAC,QAAS,CAAC;4BAAC,MAAM,IAAI,MAAM,CAAC,oBAAoB,CAAE,+BAA+B,CAAE,CAAC;wBAE9G,KAAI,CAAC,WAAW,GAAG,IAAI,8BAA8B,CAAC,KAAK,CAAE,mBAAmB,CAAC,QAAQ,EAAE,mBAAmB,CAAC,QAAQ,CAAE,CAAC;wBAE1H,OAAO,CAAE,KAAI,CAAC,WAAW,CAAE,CAAC;oBAC7B,CAAC,CAAC,CAAC;gBACJ,CAAC;gBAED,iCAAiB,GAAjB,UAAmB,cAAmC;oBACrD,EAAE,CAAA,CAAE,CAAE,IAAI,CAAC,eAAe,EAAG,CAAC;wBAAC,MAAM,IAAI,MAAM,CAAC,iBAAiB,CAAE,wCAAwC,CAAE,CAAC;oBAE9G,IAAI,OAAO,GAAkC,cAAc,CAAC,OAAO,GAAG,cAAc,CAAC,OAAO,GAAG,cAAc,CAAC,OAAO,GAAG,IAAI,GAAG,EAA6B,CAAC;oBAE7J,IAAI,CAAC,4BAA4B,CAAE,OAAO,CAAE,CAAC;oBAE7C,MAAM,CAAC,cAAc,CAAC;gBACvB,CAAC;gBAED,mCAAmB,GAAnB;oBACC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;gBACzB,CAAC;gBAED,wBAAQ,GAAR,UAAU,mBAAuC;oBAChD,MAAM,CAAC,mBAAmB,YAAY,kCAAwB,CAAC;gBAChE,CAAC;gBAEO,4CAA4B,GAApC,UAAsC,OAAsC;oBAC3E,IAAI,MAAwB,CAAC;oBAC7B,EAAE,CAAC,CAAE,OAAO,CAAC,GAAG,CAAE,eAAe,CAAG,CAAC,CAAC,CAAC;wBACtC,MAAM,GAAG,OAAO,CAAC,GAAG,CAAE,eAAe,CAAE,CAAC;oBACzC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACP,MAAM,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;wBACjC,OAAO,CAAC,GAAG,CAAE,eAAe,EAAE,MAAM,CAAE,CAAC;oBACxC,CAAC;oBACD,IAAI,aAAa,GAAU,QAAQ,GAAG,IAAI,CAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAE,CAAC;oBAC1G,MAAM,CAAC,MAAM,CAAC,IAAI,CAAE,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAE,aAAa,CAAE,CAAE,CAAC;oBAE7D,MAAM,CAAC,OAAO,CAAC;gBAChB,CAAC;gBACF,YAAC;YAAD,CAnDA,AAmDC,IAAA;YAnDD,yBAmDC,CAAA;YAED,oBAAe,KAAK,EAAC","file":"Auth/BasicAuthenticator.js","sourcesContent":["import * as HTTP from \"./../HTTP\";\nimport Authenticator from \"./Authenticator\";\nimport AuthenticationToken from \"./AuthenticationToken\";\nimport * as Errors from \"./../Errors\";\nimport UsernameAndPasswordToken from \"./UsernameAndPasswordToken\";\nimport * as UsernameAndPasswordCredentials from \"./UsernameAndPasswordCredentials\";\n\n\nexport class Class implements Authenticator<UsernameAndPasswordToken> {\n\tprivate credentials:UsernameAndPasswordCredentials.Class;\n\n\tisAuthenticated():boolean {\n\t\treturn !! this.credentials;\n\t}\n\n\tauthenticate( authenticationToken:UsernameAndPasswordToken ):Promise<UsernameAndPasswordCredentials.Class>  {\n\t\tif( authenticationToken === null ) throw new Errors.IllegalArgumentError( \"The authenticationToken cannot be null.\" );\n\n\t\treturn new Promise<UsernameAndPasswordCredentials.Class>( ( resolve:( result:any ) => void, reject:( error:any ) => void ) => {\n\t\t\tif( ! authenticationToken.username ) throw new Errors.IllegalArgumentError( \"The username cannot be empty.\" );\n\t\t\tif( ! authenticationToken.password ) throw new Errors.IllegalArgumentError( \"The password cannot be empty.\" );\n\n\t\t\tthis.credentials = new UsernameAndPasswordCredentials.Class( authenticationToken.username, authenticationToken.password );\n\n\t\t\tresolve( this.credentials );\n\t\t});\n\t}\n\n\taddAuthentication( requestOptions:HTTP.Request.Options ):HTTP.Request.Options {\n\t\tif( ! this.isAuthenticated() ) throw new Errors.IllegalStateError( \"The authenticator isn't authenticated.\" );\n\n\t\tlet headers:Map<string, HTTP.Header.Class> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, HTTP.Header.Class>();\n\n\t\tthis.addBasicAuthenticationHeader( headers );\n\n\t\treturn requestOptions;\n\t}\n\n\tclearAuthentication():void {\n\t\tthis.credentials = null;\n\t}\n\n\tsupports( authenticationToken:AuthenticationToken ):boolean {\n\t\treturn authenticationToken instanceof UsernameAndPasswordToken;\n\t}\n\n\tprivate addBasicAuthenticationHeader( headers:Map<string, HTTP.Header.Class> ):Map<string, HTTP.Header.Class> {\n\t\tlet header:HTTP.Header.Class;\n\t\tif ( headers.has( \"Authorization\" ) ) {\n\t\t\theader = headers.get( \"Authorization\" );\n\t\t} else {\n\t\t\theader = new HTTP.Header.Class();\n\t\t\theaders.set( \"Authorization\", header );\n\t\t}\n\t\tlet authorization:string = \"Basic \" + btoa( this.credentials.username + \":\" + this.credentials.password );\n\t\theader.values.push( new HTTP.Header.Value( authorization ) );\n\n\t\treturn headers;\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}