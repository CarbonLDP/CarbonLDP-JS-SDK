{"version":3,"sources":["Auth/BasicAuthenticator.ts"],"names":["Class","Class.constructor","Class.isAuthenticated","Class.authenticate","Class.addAuthentication","Class.clearAuthentication","Class.supports","Class.addBasicAuthenticationHeader"],"mappings":"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","file":"Auth/BasicAuthenticator.js","sourcesContent":["import * as HTTP from \"./../HTTP\";\nimport Authenticator from \"./Authenticator\";\nimport AuthenticationToken from \"./AuthenticationToken\";\nimport * as Errors from \"./../Errors\";\nimport UsernameAndPasswordToken from \"./UsernameAndPasswordToken\";\n\nexport interface Credentials {\n\tusername:string;\n\tpassword:string;\n}\n\nexport class Class implements Authenticator<UsernameAndPasswordToken> {\n\tprivate credentials:Credentials;\n\n\tisAuthenticated():boolean {\n\t\treturn !! this.credentials;\n\t}\n\n\tauthenticate( authenticationToken:UsernameAndPasswordToken ):Promise<void>  {\n\t\tif( authenticationToken === null ) throw new Errors.IllegalArgumentError( \"The authenticationToken cannot be null.\" );\n\n\t\treturn new Promise<void>( ( resolve:() => void, reject:( error:any ) => void ) => {\n\t\t\tif( ! authenticationToken.username ) throw new Errors.IllegalArgumentError( \"The username cannot be empty.\" );\n\t\t\tif( ! authenticationToken.password ) throw new Errors.IllegalArgumentError( \"The password cannot be empty.\" );\n\n\t\t\tthis.credentials = authenticationToken;\n\n\t\t\tresolve();\n\t\t});\n\t}\n\n\taddAuthentication( requestOptions:HTTP.Request.Options ):HTTP.Request.Options {\n\t\tif( ! this.isAuthenticated() ) throw new Errors.IllegalStateError( \"The authenticator isn't authenticated.\" );\n\n\t\tlet headers:Map<string, HTTP.Header.Class> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, HTTP.Header.Class>();\n\n\t\tthis.addBasicAuthenticationHeader( headers );\n\n\t\treturn requestOptions;\n\t}\n\n\tclearAuthentication():void {\n\t\tthis.credentials = null;\n\t}\n\n\tsupports( authenticationToken:AuthenticationToken ):boolean {\n\t\treturn authenticationToken instanceof UsernameAndPasswordToken;\n\t}\n\n\tprivate addBasicAuthenticationHeader( headers:Map<string, HTTP.Header.Class> ):Map<string, HTTP.Header.Class> {\n\t\tlet header:HTTP.Header.Class;\n\t\tif ( headers.has( \"Authorization\" ) ) {\n\t\t\theader = headers.get( \"Authorization\" );\n\t\t} else {\n\t\t\theader = new HTTP.Header.Class();\n\t\t\theaders.set( \"Authorization\", header );\n\t\t}\n\t\tlet authorization:string = \"Basic \" + btoa( this.credentials.username + \":\" + this.credentials.password );\n\t\theader.values.push( new HTTP.Header.Value( authorization ) );\n\n\t\treturn headers;\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}