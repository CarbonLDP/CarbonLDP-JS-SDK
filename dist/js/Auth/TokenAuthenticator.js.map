{"version":3,"sources":["Auth/TokenAuthenticator.ts"],"names":["Class","Class.constructor","Class.isAuthenticated","Class.authenticate","Class.addAuthentication","Class.clearAuthentication","Class.supports","Class.createToken","Class.addTokenAuthenticationHeader"],"mappings":"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","file":"Auth/TokenAuthenticator.js","sourcesContent":["import Context from \"./../Context\";\nimport * as Errors from \"./../Errors\";\nimport * as HTTP from \"./../HTTP\";\nimport * as NS from \"./../NS\";\nimport * as ObjectSchema from \"./../ObjectSchema\";\nimport * as RDF from \"./../RDF\";\nimport * as Utils from \"./../Utils\";\n\nimport Authenticator from \"./Authenticator\";\nimport AuthenticationToken from \"./AuthenticationToken\";\nimport BasicAuthenticator from \"./BasicAuthenticator\";\nimport UsernameAndPasswordToken from \"./UsernameAndPasswordToken\";\nimport * as Token from \"./Token\";\nimport * as TokenCredentials from \"./TokenCredentials\";\nimport * as Credentials from \"./Credentials\";\n\nexport class Class implements Authenticator<UsernameAndPasswordToken> {\n\tprivate static TOKEN_CONTAINER:string = \"auth-tokens/\";\n\n\tprivate context:Context;\n\tprivate basicAuthenticator:BasicAuthenticator;\n\tprivate credentials:TokenCredentials.Class;\n\n\tconstructor( context:Context ) {\n\t\tif( context === null ) throw new Errors.IllegalArgumentError( \"context cannot be null\" );\n\n\t\tthis.context = context;\n\t\tthis.basicAuthenticator = new BasicAuthenticator();\n\t}\n\n\tisAuthenticated():boolean {\n\t\treturn !! this.credentials && this.credentials.token.expirationTime > new Date();\n\t}\n\n\tauthenticate( authenticationToken:UsernameAndPasswordToken ):Promise<TokenCredentials.Class> {\n\t\treturn this.basicAuthenticator.authenticate( authenticationToken ).then(\n\t\t\t( credentials:Credentials.Class ):Promise<[ Token.Class, HTTP.Response.Class ]> => {\n\t\t\t\treturn this.createToken();\n\t\t\t}\n\t\t).then(\n\t\t\t( [ token, response ]:[ Token.Class, HTTP.Response.Class ] ):TokenCredentials.Class => {\n\t\t\t\tthis.credentials = new TokenCredentials.Class( token );\n\n\t\t\t\tthis.basicAuthenticator.clearAuthentication();\n\n\t\t\t\treturn this.credentials;\n\t\t\t}\n\t\t);\n\t}\n\n\taddAuthentication( requestOptions:HTTP.Request.Options ):HTTP.Request.Options {\n\t\tlet headers:Map<string, HTTP.Header.Class> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, HTTP.Header.Class>();\n\n\t\tthis.addTokenAuthenticationHeader( headers );\n\n\t\treturn requestOptions;\n\t}\n\n\tclearAuthentication():void {\n\t\tthis.credentials = null;\n\t}\n\n\tsupports( authenticationToken:AuthenticationToken ):boolean {\n\t\treturn authenticationToken instanceof UsernameAndPasswordToken;\n\t}\n\n\tprivate createToken():Promise<[ Token.Class, HTTP.Response.Class ]> {\n\t\tlet uri:string = this.context.resolve( Class.TOKEN_CONTAINER );\n\t\tlet requestOptions:HTTP.Request.Options = {};\n\n\t\tthis.basicAuthenticator.addAuthentication( requestOptions );\n\n\t\tHTTP.Request.Util.setAcceptHeader( \"application/ld+json\", requestOptions );\n\t\tHTTP.Request.Util.setPreferredInteractionModel( NS.LDP.Class.RDFSource, requestOptions );\n\n\t\treturn HTTP.Request.Service.post( uri, null, requestOptions, new HTTP.JSONLDParser.Class() ).then( ( [ expandedResult, response ]:[ Object, HTTP.Response.Class ] ) => {\n\t\t\tlet expandedNodes:RDF.Node.Class[] = RDF.Document.Util.getResources( expandedResult );\n\n\t\t\texpandedNodes = expandedNodes.filter( Token.Factory.hasRDFClass );\n\n\t\t\tif( expandedNodes.length === 0 ) throw new HTTP.Errors.BadResponseError( \"No '\" + Token.RDF_CLASS + \"' was returned.\", response );\n\t\t\tif( expandedNodes.length > 1 ) throw new HTTP.Errors.BadResponseError( \"Multiple '\" + Token.RDF_CLASS + \"' were returned. \", response );\n\n\t\t\tlet expandedToken:RDF.Node.Class = expandedNodes[ 0 ];\n\t\t\tlet token:Token.Class = Token.Factory.decorate( {} );\n\n\t\t\tlet digestedSchema:ObjectSchema.DigestedObjectSchema = this.context.documents.getSchemaFor( expandedToken );\n\n\t\t\tthis.context.documents.jsonldConverter.compact( expandedToken, token, digestedSchema, this.context.documents );\n\n\t\t\treturn [ token, response ];\n\t\t} );\n\t}\n\n\tprivate addTokenAuthenticationHeader( headers:Map<string, HTTP.Header.Class> ):Map<string, HTTP.Header.Class> {\n\t\tlet header:HTTP.Header.Class;\n\t\tif( headers.has( \"Authorization\" ) ) {\n\t\t\theader = headers.get( \"Authorization\" );\n\t\t} else {\n\t\t\theader = new HTTP.Header.Class();\n\t\t\theaders.set( \"Authorization\", header );\n\t\t}\n\t\tlet authorization:string = \"Token \" + this.credentials.token.key;\n\t\theader.values.push( new HTTP.Header.Value( authorization ) );\n\n\t\treturn headers;\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}