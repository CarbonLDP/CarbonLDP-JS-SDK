{"version":3,"sources":["Auth/TokenAuthenticator.ts"],"names":["Class","Class.constructor","Class.isAuthenticated","Class.authenticate","Class.addAuthentication","Class.clearAuthentication","Class.supports","Class.createToken","Class.addTokenAuthenticationHeader"],"mappings":"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","file":"Auth/TokenAuthenticator.js","sourcesContent":["import * as HTTP from \"./../HTTP\";\nimport * as Errors from \"./../Errors\";\nimport * as NS from \"./../NS\";\nimport Context from \"./../Context\";\nimport * as RDF from \"./../RDF\";\nimport * as Utils from \"./../Utils\";\n\nimport Authenticator from \"./Authenticator\";\nimport AuthenticationToken from \"./AuthenticationToken\";\nimport BasicAuthenticator from \"./BasicAuthenticator\";\nimport UsernameAndPasswordToken from \"./UsernameAndPasswordToken\";\nimport * as Token from \"./Token\";\n\nexport class Class implements Authenticator<UsernameAndPasswordToken> {\n\tprivate static TOKEN_CONTAINER:string = \"auth-tokens/\";\n\n\tprivate context:Context;\n\tprivate basicAuthenticator:BasicAuthenticator;\n\tprivate token:Token.Class;\n\n\tconstructor( context:Context ) {\n\t\tif( context === null ) throw new Errors.IllegalArgumentError( \"context cannot be null\" );\n\n\t\tthis.context = context;\n\t\tthis.basicAuthenticator = new BasicAuthenticator();\n\t}\n\n\tisAuthenticated():boolean {\n\t\treturn !! this.token && this.token.expirationTime > new Date();\n\t}\n\n\tauthenticate( authenticationToken:UsernameAndPasswordToken ):Promise<void> {\n\t\treturn this.basicAuthenticator.authenticate( authenticationToken ).then(\n\t\t\t():Promise<HTTP.ProcessedResponse<Token.Class>> => {\n\t\t\t\treturn this.createToken();\n\t\t\t}\n\t\t).then(\n\t\t\t( processedResponse:HTTP.ProcessedResponse<Token.Class> ):void => {\n\t\t\t\tthis.token = processedResponse.result;\n\t\t\t}\n\t\t);\n\t}\n\n\taddAuthentication( requestOptions:HTTP.Request.Options ):HTTP.Request.Options {\n\t\tlet headers:Map<string, HTTP.Header.Class> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, HTTP.Header.Class>();\n\n\t\tthis.addTokenAuthenticationHeader( headers );\n\n\t\treturn requestOptions;\n\t}\n\n\tclearAuthentication():void {\n\t\tthis.token = null;\n\t}\n\n\tsupports( authenticationToken:AuthenticationToken ):boolean {\n\t\treturn authenticationToken instanceof UsernameAndPasswordToken;\n\t}\n\n\tprivate createToken():Promise<HTTP.ProcessedResponse<Token.Class>> {\n\t\tlet uri:string = this.context.resolve( Class.TOKEN_CONTAINER );\n\t\tlet requestOptions:HTTP.Request.Options = {};\n\n\t\tthis.basicAuthenticator.addAuthentication( requestOptions );\n\n\t\tHTTP.Request.Util.setAcceptHeader( \"application/ld+json\", requestOptions );\n\t\tHTTP.Request.Util.setPreferredInteractionModel( NS.LDP.Class.RDFSource, requestOptions );\n\n\t\treturn HTTP.Request.Service.post( uri, null, requestOptions, new HTTP.JSONLDParser.Class() ).then( ( processedResponse:HTTP.ProcessedResponse<Object> ) => {\n\t\t\tlet nodes:RDF.Node.Class[] = RDF.Document.Util.getResources( processedResponse.result );\n\t\t\tlet resources:RDF.Resource.Class[] = RDF.Resource.factory.from( nodes );\n\n\t\t\tresources = resources.filter( Token.factory.hasRDFClass );\n\n\t\t\tif( resources.length === 0 ) throw new HTTP.Errors.BadResponseError( \"No '\" + Token.RDF_CLASS + \"' was returned.\", processedResponse.response );\n\t\t\tif( resources.length > 1 ) throw new HTTP.Errors.BadResponseError( \"Multiple '\" + Token.RDF_CLASS + \"' were returned. \", processedResponse.response );\n\n\t\t\treturn {\n\t\t\t\tresult: Token.factory.from( resources[ 0 ] ),\n\t\t\t\tresponse: processedResponse.response,\n\t\t\t};\n\t\t} );\n\t}\n\n\tprivate addTokenAuthenticationHeader( headers:Map<string, HTTP.Header.Class> ):Map<string, HTTP.Header.Class> {\n\t\tlet header:HTTP.Header.Class;\n\t\tif( headers.has( \"Authorization\" ) ) {\n\t\t\theader = headers.get( \"Authorization\" );\n\t\t} else {\n\t\t\theader = new HTTP.Header.Class();\n\t\t\theaders.set( \"Authorization\", header );\n\t\t}\n\t\tlet authorization:string = \"Token \" + this.token.key;\n\t\theader.values.push( new HTTP.Header.Value( authorization ) );\n\n\t\treturn headers;\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}