{"version":3,"sources":["Auth/TokenAuthenticator.ts"],"names":[],"mappings":"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","file":"Auth/TokenAuthenticator.js","sourcesContent":["import Context from \"./../Context\";\nimport * as Errors from \"./../Errors\";\nimport * as HTTP from \"./../HTTP\";\nimport * as NS from \"./../NS\";\nimport * as ObjectSchema from \"./../ObjectSchema\";\nimport * as RDF from \"./../RDF\";\nimport * as Utils from \"./../Utils\";\n\nimport Authenticator from \"./Authenticator\";\nimport AuthenticationToken from \"./AuthenticationToken\";\nimport BasicAuthenticator from \"./BasicAuthenticator\";\nimport UsernameAndPasswordToken from \"./UsernameAndPasswordToken\";\nimport * as Token from \"./Token\";\nimport * as TokenCredentials from \"./TokenCredentials\";\nimport * as Credentials from \"./Credentials\";\n\nexport class Class implements Authenticator<UsernameAndPasswordToken> {\n\tprivate static TOKEN_CONTAINER:string = \"auth-tokens/\";\n\n\tprivate context:Context;\n\tprivate basicAuthenticator:BasicAuthenticator;\n\tprivate credentials:TokenCredentials.Class;\n\n\tconstructor( context:Context ) {\n\t\tif( context === null ) throw new Errors.IllegalArgumentError( \"context cannot be null\" );\n\n\t\tthis.context = context;\n\t\tthis.basicAuthenticator = new BasicAuthenticator();\n\t}\n\n\tisAuthenticated():boolean {\n\t\treturn !! this.credentials && this.credentials.token.expirationTime > new Date();\n\t}\n\n\tauthenticate( authenticationToken:UsernameAndPasswordToken ):Promise<TokenCredentials.Class> {\n\t\treturn this.basicAuthenticator.authenticate( authenticationToken ).then(\n\t\t\t( credentials:Credentials.Class ):Promise<[ Token.Class, HTTP.Response.Class ]> => {\n\t\t\t\treturn this.createToken();\n\t\t\t}\n\t\t).then(\n\t\t\t( [ token, response ]:[ Token.Class, HTTP.Response.Class ] ):TokenCredentials.Class => {\n\t\t\t\tthis.credentials = new TokenCredentials.Class( token );\n\n\t\t\t\tthis.basicAuthenticator.clearAuthentication();\n\n\t\t\t\treturn this.credentials;\n\t\t\t}\n\t\t);\n\t}\n\n\taddAuthentication( requestOptions:HTTP.Request.Options ):HTTP.Request.Options {\n\t\tlet headers:Map<string, HTTP.Header.Class> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, HTTP.Header.Class>();\n\n\t\tthis.addTokenAuthenticationHeader( headers );\n\n\t\treturn requestOptions;\n\t}\n\n\tclearAuthentication():void {\n\t\tthis.credentials = null;\n\t}\n\n\tsupports( authenticationToken:AuthenticationToken ):boolean {\n\t\treturn authenticationToken instanceof UsernameAndPasswordToken;\n\t}\n\n\tprivate createToken():Promise<[ Token.Class, HTTP.Response.Class ]> {\n\t\tlet uri:string = this.context.resolve( Class.TOKEN_CONTAINER );\n\t\tlet requestOptions:HTTP.Request.Options = {};\n\n\t\tthis.basicAuthenticator.addAuthentication( requestOptions );\n\n\t\tHTTP.Request.Util.setAcceptHeader( \"application/ld+json\", requestOptions );\n\t\tHTTP.Request.Util.setPreferredInteractionModel( NS.LDP.Class.RDFSource, requestOptions );\n\n\t\treturn HTTP.Request.Service.post( uri, null, requestOptions, new HTTP.JSONLDParser.Class() ).then( ( [ expandedResult, response ]:[ Object, HTTP.Response.Class ] ) => {\n\t\t\tlet expandedNodes:RDF.Node.Class[] = RDF.Document.Util.getResources( expandedResult );\n\n\t\t\texpandedNodes = expandedNodes.filter( Token.Factory.hasRDFClass );\n\n\t\t\tif( expandedNodes.length === 0 ) throw new HTTP.Errors.BadResponseError( \"No '\" + Token.RDF_CLASS + \"' was returned.\", response );\n\t\t\tif( expandedNodes.length > 1 ) throw new HTTP.Errors.BadResponseError( \"Multiple '\" + Token.RDF_CLASS + \"' were returned. \", response );\n\n\t\t\tlet expandedToken:RDF.Node.Class = expandedNodes[ 0 ];\n\t\t\tlet token:Token.Class = Token.Factory.decorate( {} );\n\n\t\t\tlet digestedSchema:ObjectSchema.DigestedObjectSchema = this.context.documents.getSchemaFor( expandedToken );\n\n\t\t\tthis.context.documents.jsonldConverter.compact( expandedToken, token, digestedSchema, this.context.documents );\n\n\t\t\treturn [ token, response ];\n\t\t} );\n\t}\n\n\tprivate addTokenAuthenticationHeader( headers:Map<string, HTTP.Header.Class> ):Map<string, HTTP.Header.Class> {\n\t\tlet header:HTTP.Header.Class;\n\t\tif( headers.has( \"Authorization\" ) ) {\n\t\t\theader = headers.get( \"Authorization\" );\n\t\t} else {\n\t\t\theader = new HTTP.Header.Class();\n\t\t\theaders.set( \"Authorization\", header );\n\t\t}\n\t\tlet authorization:string = \"Token \" + this.credentials.token.key;\n\t\theader.values.push( new HTTP.Header.Value( authorization ) );\n\n\t\treturn headers;\n\t}\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}