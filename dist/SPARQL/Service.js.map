{"version":3,"sources":["SPARQL/Service.ts"],"names":[],"mappings":";;;;;;;;;AAAA,gDAAoC;AACpC,2CAIyB;AAEzB,qDAAoD;AAEpD,0CAA4C;AAM5C,uDAA4D;AAI5D;IAAA;IAqGA,CAAC;IAhGO,gCAAkB,GAAzB,UAA2B,GAAU,EAAE,QAAe,EAAE,OAA2B;QAA3B,wBAAA,EAAA,YAA2B;QAClF,OAAO,GAAG,MAAM,CAAC,MAAM,CAAE,OAAO,EAAE,aAAa,CAAC,eAAe,CAAE,CAAC;QAElE,sBAAY,CAAC,eAAe,CAAE,iCAAiC,EAAE,OAAO,CAAE,CAAC;QAC3E,sBAAY,CAAC,oBAAoB,CAAE,0BAA0B,EAAE,OAAO,CAAE,CAAC;QAEzE,MAAM,CAAC,wBAAc,CAAC,IAAI,CAAE,GAAG,EAAE,QAAQ,EAAE,OAAO,EAAE,aAAa,CAAC,cAAc,CAAE,CAAC;IACpF,CAAC;IAEM,6BAAe,GAAtB,UAAwB,GAAU,EAAE,QAAe,EAAE,OAA2B;QAA3B,wBAAA,EAAA,YAA2B;QAC/E,MAAM,CAAC,aAAa;aAClB,kBAAkB,CAAE,GAAG,EAAE,QAAQ,EAAE,OAAO,CAAE;aAC5C,IAAI,CAAyB,UAAE,EAAuD;gBAArD,kBAAU,EAAE,gBAAQ;YACrD,MAAM,CAAC,CAAE,UAAU,CAAC,OAAO,EAAE,QAAQ,CAAE,CAAC;QACzC,CAAC,CAAE,CAAC;IACN,CAAC;IAEM,mCAAqB,GAA5B,UAA8B,GAAU,EAAE,WAAkB,EAAE,OAA2B;QAA3B,wBAAA,EAAA,YAA2B;QACxF,OAAO,GAAG,MAAM,CAAC,MAAM,CAAE,OAAO,EAAE,aAAa,CAAC,eAAe,CAAE,CAAC;QAElE,sBAAY,CAAC,eAAe,CAAE,iCAAiC,EAAE,OAAO,CAAE,CAAC;QAC3E,sBAAY,CAAC,oBAAoB,CAAE,0BAA0B,EAAE,OAAO,CAAE,CAAC;QAEzE,MAAM,CAAC,wBAAc,CAAC,IAAI,CAAE,GAAG,EAAE,WAAW,EAAE,OAAO,EAAE,aAAa,CAAC,cAAc,CAAE,CAAC;IACvF,CAAC;IAEM,gCAAkB,GAAzB,UAA8B,GAAU,EAAE,WAAkB,EAAE,cAA6B,EAAE,OAA2B;QAA3B,wBAAA,EAAA,YAA2B;QACvH,MAAM,CAAC,aAAa;aAClB,qBAAqB,CAAE,GAAG,EAAE,WAAW,EAAE,OAAO,CAAE;aAClD,IAAI,CAAwC,UAAE,EAAuD;gBAArD,kBAAU,EAAE,gBAAQ;YACpE,IAAI,WAAW,GAA4B,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC;YACvE,IAAI,QAAQ,GAAO,EAAE,CAAC;YAEtB,GAAG,CAAA,CAAuB,UAAW,EAAX,2BAAW,EAAX,yBAAW,EAAX,IAAW;gBAAhC,IAAI,aAAa,oBAAA;gBACrB,IAAI,OAAO,GAAK,EAAO,CAAC;gBACxB,GAAG,CAAA,CAAE,IAAI,UAAU,IAAI,aAAc,CAAC,CAAC,CAAC;oBACvC,EAAE,CAAA,CAAE,CAAE,aAAa,CAAC,cAAc,CAAE,UAAU,CAAG,CAAC;wBAAC,QAAQ,CAAC;oBAE5D,IAAI,WAAW,GAA4B,aAAa,CAAE,UAAU,CAAE,CAAC;oBACvE,OAAO,CAAE,UAAU,CAAE,GAAG,aAAa,CAAC,uBAAuB,CAAE,WAAW,EAAE,cAAc,CAAE,CAAC;gBAC9F,CAAC;gBACD,QAAQ,CAAC,IAAI,CAAE,OAAO,CAAE,CAAC;aACzB;YAED,IAAI,OAAO,GAA0B;gBACpC,IAAI,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI;gBAC1B,QAAQ,EAAE,QAAQ;aAClB,CAAC;YACF,MAAM,CAAC,CAAE,OAAO,EAAE,QAAQ,CAAE,CAAC;QAC9B,CAAC,CAAE,CAAC;IACN,CAAC;IAEM,sCAAwB,GAA/B,UAAiC,GAAU,EAAE,cAAqB,EAAE,OAA2B;QAA3B,wBAAA,EAAA,YAA2B;QAC9F,OAAO,GAAG,MAAM,CAAC,MAAM,CAAE,OAAO,EAAE,aAAa,CAAC,eAAe,CAAE,CAAC;QAElE,EAAE,CAAA,CAAE,sBAAY,CAAC,SAAS,CAAE,QAAQ,EAAE,OAAO,CAAE,KAAK,SAAU,CAAC;YAAC,sBAAY,CAAC,eAAe,CAAE,qBAAqB,EAAE,OAAO,CAAE,CAAC;QAC/H,sBAAY,CAAC,oBAAoB,CAAE,0BAA0B,EAAE,OAAO,CAAE,CAAC;QAEzE,MAAM,CAAC,wBAAc,CAAC,IAAI,CAAE,GAAG,EAAE,cAAc,EAAE,OAAO,EAAE,aAAa,CAAC,aAAa,CAAE,CAAC;IACzF,CAAC;IAEM,qCAAuB,GAA9B,UAAgC,GAAU,EAAE,aAAoB,EAAE,OAA2B;QAA3B,wBAAA,EAAA,YAA2B;QAC5F,OAAO,GAAG,MAAM,CAAC,MAAM,CAAE,OAAO,EAAE,aAAa,CAAC,eAAe,CAAE,CAAC;QAElE,EAAE,CAAA,CAAE,sBAAY,CAAC,SAAS,CAAE,QAAQ,EAAE,OAAO,CAAE,KAAK,SAAU,CAAC;YAAC,sBAAY,CAAC,eAAe,CAAE,qBAAqB,EAAE,OAAO,CAAE,CAAC;QAC/H,sBAAY,CAAC,oBAAoB,CAAE,0BAA0B,EAAE,OAAO,CAAE,CAAC;QAEzE,MAAM,CAAC,wBAAc,CAAC,IAAI,CAAE,GAAG,EAAE,aAAa,EAAE,OAAO,EAAE,aAAa,CAAC,aAAa,CAAE,CAAC;IACxF,CAAC;IAEM,2BAAa,GAApB,UAAsB,GAAU,EAAE,WAAkB,EAAE,OAA2B;QAA3B,wBAAA,EAAA,YAA2B;QAChF,OAAO,GAAG,MAAM,CAAC,MAAM,CAAE,OAAO,EAAE,aAAa,CAAC,eAAe,CAAE,CAAC;QAElE,EAAE,CAAA,CAAE,sBAAY,CAAC,SAAS,CAAE,QAAQ,EAAE,OAAO,CAAE,KAAK,SAAU,CAAC;YAAC,sBAAY,CAAC,eAAe,CAAE,qBAAqB,EAAE,OAAO,CAAE,CAAC;QAC/H,sBAAY,CAAC,oBAAoB,CAAE,2BAA2B,EAAE,OAAO,CAAE,CAAC;QAE1E,MAAM,CAAC,wBAAc,CAAC,IAAI,CAAE,GAAG,EAAE,WAAW,EAAE,OAAO,CAAE,CAAC;IACzD,CAAC;IAEc,qCAAuB,GAAtC,UAAwC,kBAA2C,EAAE,cAA6B;QACjH,MAAM,CAAA,CAAE,kBAAkB,CAAC,IAAK,CAAC,CAAC,CAAC;YAClC,KAAK,KAAK;gBACT,MAAM,CAAC,cAAc,CAAC,UAAU,CAAE,kBAAkB,CAAC,KAAK,CAAE,CAAC;YAC9D,KAAK,OAAO;gBACX,MAAM,IAAI,MAAM,CAAC,mBAAmB,CAAE,mCAAmC,CAAE,CAAC;YAC7E,KAAK,SAAS;gBACb,EAAE,CAAA,CAAE,UAAU,IAAI,kBAAmB,CAAC,CAAC,CAAC;oBACvC,MAAM,CAAC,oBAAU,CAAC,KAAK,CAAE,kBAAkB,CAAC,KAAK,EAAE,kBAAkB,CAAC,QAAQ,CAAE,CAAC;gBAClF,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,MAAM,CAAC,oBAAU,CAAC,KAAK,CAAE,kBAAkB,CAAC,KAAK,CAAE,CAAC;gBACrD,CAAC;YACF;gBACC,MAAM,IAAI,MAAM,CAAC,oBAAoB,CAAE,6CAA6C,CAAE,CAAC;QACzF,CAAC;IACF,CAAC;IAlGc,6BAAe,GAAkB,EAAE,CAAC;IACpC,4BAAc,GAA0B,IAAI,yCAAsB,EAAE,CAAC;IACrE,2BAAa,GAAgB,IAAI,2BAAY,EAAE,CAAC;IAkGhE,oBAAC;CArGD,AAqGC,IAAA;AArGY,sCAAa","file":"Service.js","sourcesContent":["import * as Errors from \"../Errors\";\nimport {\n\tRequestOptions,\n\tRequestService,\n\tRequestUtils,\n} from \"../HTTP/Request\";\nimport { Response } from \"../HTTP/Response\";\nimport { StringParser } from \"../HTTP/StringParser\";\nimport { PointerLibrary } from \"../Pointer\";\nimport { RDFLiteral } from \"../RDF/Literal\";\nimport {\n\tSPARQLRawBindingObject,\n\tSPARQLRawBindingProperty,\n\tSPARQLRawResults,\n} from \"./RawResults\";\nimport { SPARQLRawResultsParser } from \"./RawResultsParser\";\nimport { SPARQLSelectResults } from \"./SelectResults\";\n\n\nexport class SPARQLService {\n\tprivate static DEFAULT_OPTIONS:RequestOptions = {};\n\tprivate static RESULTS_PARSER:SPARQLRawResultsParser = new SPARQLRawResultsParser();\n\tprivate static STRING_PARSER:StringParser = new StringParser();\n\n\tstatic executeRawASKQuery( url:string, askQuery:string, options:RequestOptions = {} ):Promise<[ SPARQLRawResults, Response ]> {\n\t\toptions = Object.assign( options, SPARQLService.DEFAULT_OPTIONS );\n\n\t\tRequestUtils.setAcceptHeader( \"application/sparql-results+json\", options );\n\t\tRequestUtils.setContentTypeHeader( \"application/sparql-query\", options );\n\n\t\treturn RequestService.post( url, askQuery, options, SPARQLService.RESULTS_PARSER );\n\t}\n\n\tstatic executeASKQuery( url:string, askQuery:string, options:RequestOptions = {} ):Promise<[ boolean, Response ]> {\n\t\treturn SPARQLService\n\t\t\t.executeRawASKQuery( url, askQuery, options )\n\t\t\t.then<[ boolean, Response ]>( ( [ rawResults, response ]:[ SPARQLRawResults, Response ] ) => {\n\t\t\t\treturn [ rawResults.boolean, response ];\n\t\t\t} );\n\t}\n\n\tstatic executeRawSELECTQuery( url:string, selectQuery:string, options:RequestOptions = {} ):Promise<[ SPARQLRawResults, Response ]> {\n\t\toptions = Object.assign( options, SPARQLService.DEFAULT_OPTIONS );\n\n\t\tRequestUtils.setAcceptHeader( \"application/sparql-results+json\", options );\n\t\tRequestUtils.setContentTypeHeader( \"application/sparql-query\", options );\n\n\t\treturn RequestService.post( url, selectQuery, options, SPARQLService.RESULTS_PARSER );\n\t}\n\n\tstatic executeSELECTQuery<T>( url:string, selectQuery:string, pointerLibrary:PointerLibrary, options:RequestOptions = {} ):Promise<[ SPARQLSelectResults<T>, Response ]> {\n\t\treturn SPARQLService\n\t\t\t.executeRawSELECTQuery( url, selectQuery, options )\n\t\t\t.then<[ SPARQLSelectResults<T>, Response ]>( ( [ rawResults, response ]:[ SPARQLRawResults, Response ] ) => {\n\t\t\t\tlet rawBindings:SPARQLRawBindingObject[] = rawResults.results.bindings;\n\t\t\t\tlet bindings:T[] = [];\n\n\t\t\t\tfor( let bindingColumn of rawBindings ) {\n\t\t\t\t\tlet binding:T = {} as T;\n\t\t\t\t\tfor( let bindingRow in bindingColumn ) {\n\t\t\t\t\t\tif( ! bindingColumn.hasOwnProperty( bindingRow ) ) continue;\n\n\t\t\t\t\t\tlet bindingCell:SPARQLRawBindingProperty = bindingColumn[ bindingRow ];\n\t\t\t\t\t\tbinding[ bindingRow ] = SPARQLService.parseRawBindingProperty( bindingCell, pointerLibrary );\n\t\t\t\t\t}\n\t\t\t\t\tbindings.push( binding );\n\t\t\t\t}\n\n\t\t\t\tlet results:SPARQLSelectResults<T> = {\n\t\t\t\t\tvars: rawResults.head.vars,\n\t\t\t\t\tbindings: bindings,\n\t\t\t\t};\n\t\t\t\treturn [ results, response ];\n\t\t\t} );\n\t}\n\n\tstatic executeRawCONSTRUCTQuery( url:string, constructQuery:string, options:RequestOptions = {} ):Promise<[ string, Response ]> {\n\t\toptions = Object.assign( options, SPARQLService.DEFAULT_OPTIONS );\n\n\t\tif( RequestUtils.getHeader( \"Accept\", options ) === undefined ) RequestUtils.setAcceptHeader( \"application/ld+json\", options );\n\t\tRequestUtils.setContentTypeHeader( \"application/sparql-query\", options );\n\n\t\treturn RequestService.post( url, constructQuery, options, SPARQLService.STRING_PARSER );\n\t}\n\n\tstatic executeRawDESCRIBEQuery( url:string, describeQuery:string, options:RequestOptions = {} ):Promise<[ string, Response ]> {\n\t\toptions = Object.assign( options, SPARQLService.DEFAULT_OPTIONS );\n\n\t\tif( RequestUtils.getHeader( \"Accept\", options ) === undefined ) RequestUtils.setAcceptHeader( \"application/ld+json\", options );\n\t\tRequestUtils.setContentTypeHeader( \"application/sparql-query\", options );\n\n\t\treturn RequestService.post( url, describeQuery, options, SPARQLService.STRING_PARSER );\n\t}\n\n\tstatic executeUPDATE( url:string, updateQuery:string, options:RequestOptions = {} ):Promise<Response> {\n\t\toptions = Object.assign( options, SPARQLService.DEFAULT_OPTIONS );\n\n\t\tif( RequestUtils.getHeader( \"Accept\", options ) === undefined ) RequestUtils.setAcceptHeader( \"application/ld+json\", options );\n\t\tRequestUtils.setContentTypeHeader( \"application/sparql-update\", options );\n\n\t\treturn RequestService.post( url, updateQuery, options );\n\t}\n\n\tprivate static parseRawBindingProperty( rawBindingProperty:SPARQLRawBindingProperty, pointerLibrary:PointerLibrary ):any {\n\t\tswitch( rawBindingProperty.type ) {\n\t\t\tcase \"uri\":\n\t\t\t\treturn pointerLibrary.getPointer( rawBindingProperty.value );\n\t\t\tcase \"bnode\":\n\t\t\t\tthrow new Errors.NotImplementedError( \"BNodes cannot be queried directly\" );\n\t\t\tcase \"literal\":\n\t\t\t\tif( \"datatype\" in rawBindingProperty ) {\n\t\t\t\t\treturn RDFLiteral.parse( rawBindingProperty.value, rawBindingProperty.datatype );\n\t\t\t\t} else {\n\t\t\t\t\treturn RDFLiteral.parse( rawBindingProperty.value );\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new Errors.IllegalArgumentError( \"The bindingProperty has an unsupported type\" );\n\t\t}\n\t}\n\n}\n"]}