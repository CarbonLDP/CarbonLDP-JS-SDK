{"version":3,"sources":["SPARQL/SPARQLDocument.ts"],"names":[],"mappings":"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","file":"SPARQLDocument.js","sourcesContent":["import { QueryClause } from \"sparqler/clauses\";\nimport { AbstractContext } from \"../AbstractContext\";\nimport { ModelDecorator } from \"../core\";\nimport { IllegalActionError } from \"../Errors\";\nimport {\n\tRequestOptions,\n\tRequestUtils\n} from \"../HTTP\";\nimport { DigestedObjectSchema } from \"../ObjectSchema\";\nimport { RegistryService } from \"../Registry\";\nimport { TransientResource } from \"../Resource\";\nimport {\n\tisObject,\n\tPickSelfProps,\n\tpromiseMethod,\n} from \"../Utils\";\nimport {\n\tFinishSPARQLSelect,\n\tSPARQLBuilder\n} from \"./Builder\";\nimport { SPARQLRawResults } from \"./RawResults\";\nimport { SPARQLSelectResults } from \"./SelectResults\";\nimport { SPARQLService } from \"./Service\";\n\n\nexport interface SPARQLDocument extends TransientResource {\n\t_registry:RegistryService<SPARQLDocument, AbstractContext<SPARQLDocument, any> | undefined> | undefined;\n\n\n\texecuteRawASKQuery( uri:string, askQuery:string, requestOptions?:RequestOptions ):Promise<SPARQLRawResults>;\n\texecuteRawASKQuery( askQuery:string, requestOptions?:RequestOptions ):Promise<SPARQLRawResults>;\n\n\texecuteASKQuery( uri:string, askQuery:string, requestOptions?:RequestOptions ):Promise<boolean>;\n\texecuteASKQuery( askQuery:string, requestOptions?:RequestOptions ):Promise<boolean>;\n\n\n\texecuteRawSELECTQuery( uri:string, selectQuery:string, requestOptions?:RequestOptions ):Promise<SPARQLRawResults>;\n\texecuteRawSELECTQuery( selectQuery:string, requestOptions?:RequestOptions ):Promise<SPARQLRawResults>;\n\n\texecuteSELECTQuery<T extends object>( uri:string, selectQuery:string, requestOptions?:RequestOptions ):Promise<SPARQLSelectResults<T>>;\n\texecuteSELECTQuery<T extends object>( selectQuery:string, requestOptions?:RequestOptions ):Promise<SPARQLSelectResults<T>>;\n\n\n\texecuteRawCONSTRUCTQuery( uri:string, constructQuery:string, requestOptions?:RequestOptions ):Promise<string>;\n\texecuteRawCONSTRUCTQuery( constructQuery:string, requestOptions?:RequestOptions ):Promise<string>;\n\n\n\texecuteRawDESCRIBEQuery( uri:string, describeQuery:string, requestOptions?:RequestOptions ):Promise<string>;\n\texecuteRawDESCRIBEQuery( describeQuery:string, requestOptions?:RequestOptions ):Promise<string>;\n\n\n\texecuteUPDATE( uri:string, update:string, requestOptions?:RequestOptions ):Promise<void>;\n\texecuteUPDATE( update:string, requestOptions?:RequestOptions ):Promise<void>;\n\n\tsparql( uri?:string ):QueryClause<FinishSPARQLSelect>;\n}\n\n\nfunction getRegistry( repository:SPARQLDocument ):RegistryService<SPARQLDocument, AbstractContext<SPARQLDocument> | undefined> {\n\tif( repository._registry ) return repository._registry;\n\tthrow new IllegalActionError( `\"${ repository.id }\" doesn't support SPARQL requests.` );\n}\n\nfunction parseParams( this:void, resource:SPARQLDocument, registry:RegistryService<SPARQLDocument, AbstractContext<SPARQLDocument> | undefined>, uriOrQuery:string, queryOrOptions?:string | RequestOptions, options:RequestOptions = {} ):{ url:string, query:string, options:RequestOptions } {\n\tlet iri:string | undefined;\n\tlet query:string = uriOrQuery;\n\n\tif( isObject( queryOrOptions ) ) {\n\t\toptions = queryOrOptions;\n\t} else if( queryOrOptions !== void 0 ) {\n\t\tquery = queryOrOptions;\n\t\tiri = uriOrQuery;\n\t}\n\n\n\tconst url:string = RequestUtils.getRequestURLFor( registry, resource, iri );\n\n\tif( registry._context && registry._context.auth )\n\t\tregistry._context.auth.addAuthentication( options );\n\n\treturn { url, query, options };\n}\n\nconst PROTOTYPE:PickSelfProps<SPARQLDocument, TransientResource, \"_registry\"> = {\n\t_registry: void 0,\n\n\n\texecuteRawASKQuery( this:SPARQLDocument, uriOrQuery:string, queryOrOptions?:string | RequestOptions, requestOptions?:RequestOptions ):Promise<SPARQLRawResults> {\n\t\treturn promiseMethod( () => {\n\t\t\tconst registry:RegistryService<SPARQLDocument, AbstractContext<SPARQLDocument> | undefined> = getRegistry( this );\n\t\t\tconst { url, query, options } = parseParams( this, registry, uriOrQuery, queryOrOptions, requestOptions );\n\n\t\t\treturn SPARQLService\n\t\t\t\t.executeRawASKQuery( url, query, options )\n\t\t\t\t.then( ( [ rawResults ] ) => rawResults )\n\t\t\t\t.catch( registry._parseErrorFromResponse.bind( this ) );\n\t\t} );\n\t},\n\n\texecuteASKQuery( this:SPARQLDocument, uriOrQuery:string, queryOrOptions?:string | RequestOptions, requestOptions?:RequestOptions ):Promise<boolean> {\n\t\treturn promiseMethod( () => {\n\t\t\tconst registry:RegistryService<SPARQLDocument, AbstractContext<SPARQLDocument> | undefined> = getRegistry( this );\n\t\t\tconst { url, query, options } = parseParams( this, registry, uriOrQuery, queryOrOptions, requestOptions );\n\n\t\t\treturn SPARQLService\n\t\t\t\t.executeASKQuery( url, query, options )\n\t\t\t\t.then( ( [ rawResults ] ) => rawResults )\n\t\t\t\t.catch( registry._parseErrorFromResponse.bind( this ) );\n\t\t} );\n\t},\n\n\n\texecuteRawSELECTQuery( this:SPARQLDocument, uriOrQuery:string, queryOrOptions?:string | RequestOptions, requestOptions?:RequestOptions ):Promise<SPARQLRawResults> {\n\t\treturn promiseMethod( () => {\n\t\t\tconst registry:RegistryService<SPARQLDocument, AbstractContext<SPARQLDocument> | undefined> = getRegistry( this );\n\t\t\tconst { url, query, options } = parseParams( this, registry, uriOrQuery, queryOrOptions, requestOptions );\n\n\t\t\treturn SPARQLService\n\t\t\t\t.executeRawSELECTQuery( url, query, options )\n\t\t\t\t.then( ( [ rawResults ] ) => rawResults )\n\t\t\t\t.catch( registry._parseErrorFromResponse.bind( this ) );\n\t\t} );\n\t},\n\n\texecuteSELECTQuery<T extends object>( this:SPARQLDocument, uriOrQuery:string, queryOrOptions?:string | RequestOptions, requestOptions?:RequestOptions ):Promise<SPARQLSelectResults<T>> {\n\t\treturn promiseMethod( () => {\n\t\t\tconst registry:RegistryService<SPARQLDocument, AbstractContext<SPARQLDocument> | undefined> = getRegistry( this );\n\t\t\tconst { url, query, options } = parseParams( this, registry, uriOrQuery, queryOrOptions, requestOptions );\n\n\t\t\treturn SPARQLService\n\t\t\t\t.executeSELECTQuery<T>( url, query, this._registry, options )\n\t\t\t\t.then( ( [ selectResults ] ) => selectResults )\n\t\t\t\t.catch( registry._parseErrorFromResponse.bind( this ) );\n\t\t} );\n\t},\n\n\n\texecuteRawCONSTRUCTQuery( this:SPARQLDocument, uriOrQuery:string, queryOrOptions?:string | RequestOptions, requestOptions?:RequestOptions ):Promise<string> {\n\t\treturn promiseMethod( () => {\n\t\t\tconst registry:RegistryService<SPARQLDocument, AbstractContext<SPARQLDocument> | undefined> = getRegistry( this );\n\t\t\tconst { url, query, options } = parseParams( this, registry, uriOrQuery, queryOrOptions, requestOptions );\n\n\t\t\treturn SPARQLService\n\t\t\t\t.executeRawCONSTRUCTQuery( url, query, options )\n\t\t\t\t.then( ( [ strConstruct ] ) => strConstruct )\n\t\t\t\t.catch( registry._parseErrorFromResponse.bind( this ) );\n\t\t} );\n\t},\n\n\n\texecuteRawDESCRIBEQuery( this:SPARQLDocument, uriOrQuery:string, queryOrOptions?:string | RequestOptions, requestOptions?:RequestOptions ):Promise<string> {\n\t\treturn promiseMethod( () => {\n\t\t\tconst registry:RegistryService<SPARQLDocument, AbstractContext<SPARQLDocument> | undefined> = getRegistry( this );\n\t\t\tconst { url, query, options } = parseParams( this, registry, uriOrQuery, queryOrOptions, requestOptions );\n\n\t\t\treturn SPARQLService\n\t\t\t\t.executeRawDESCRIBEQuery( url, query, options )\n\t\t\t\t.then( ( [ strDescribe ] ) => strDescribe )\n\t\t\t\t.catch( registry._parseErrorFromResponse.bind( this ) );\n\t\t} );\n\t},\n\n\n\texecuteUPDATE( this:SPARQLDocument, uriOrQuery:string, updateOrOptions?:string | RequestOptions, requestOptions?:RequestOptions ):Promise<void> {\n\t\treturn promiseMethod( () => {\n\t\t\tconst registry:RegistryService<SPARQLDocument, AbstractContext<SPARQLDocument> | undefined> = getRegistry( this );\n\t\t\tconst { url, query: update, options } = parseParams( this, registry, uriOrQuery, updateOrOptions, requestOptions );\n\n\t\t\treturn SPARQLService\n\t\t\t\t.executeUPDATE( url, update, options )\n\t\t\t\t.then( () => {} )\n\t\t\t\t.catch( registry._parseErrorFromResponse.bind( this ) );\n\t\t} );\n\t},\n\n\n\tsparql( this:SPARQLDocument, uri?:string ):QueryClause<FinishSPARQLSelect> {\n\t\tconst registry:RegistryService<SPARQLDocument, AbstractContext<SPARQLDocument> | undefined> = getRegistry( this );\n\t\tconst iri:string = RequestUtils.getRequestURLFor( registry, this, uri );\n\n\t\tconst schema:DigestedObjectSchema = registry.getGeneralSchema();\n\t\tlet builder:QueryClause<FinishSPARQLSelect> = new SPARQLBuilder( this, iri )\n\t\t\t.base( schema.base )\n\t\t\t.vocab( schema.vocab );\n\n\t\tschema.prefixes.forEach( ( name:string, prefix:string ) => {\n\t\t\tbuilder = builder.prefix( prefix, name );\n\t\t} );\n\n\t\treturn builder;\n\t},\n};\n\n\nexport interface SPARQLDocumentFactory {\n\tPROTOTYPE:PickSelfProps<SPARQLDocument, TransientResource, \"_registry\">;\n\n\tisDecorated( object:object ):object is SPARQLDocument;\n\n\tdecorate<T extends object>( object:T ):T & SPARQLDocument;\n}\n\nexport const SPARQLDocument:SPARQLDocumentFactory = {\n\tPROTOTYPE,\n\n\tisDecorated( object:object ):object is SPARQLDocument {\n\t\treturn isObject( object )\n\t\t\t&& ModelDecorator\n\t\t\t\t.hasPropertiesFrom( PROTOTYPE, object )\n\t\t\t;\n\t},\n\n\tdecorate<T extends object>( object:T ):T & SPARQLDocument {\n\t\tif( SPARQLDocument.isDecorated( object ) ) return object;\n\n\t\tconst resource:T & TransientResource = ModelDecorator\n\t\t\t.decorateMultiple( object, TransientResource );\n\n\t\treturn ModelDecorator\n\t\t\t.definePropertiesFrom( PROTOTYPE, resource );\n\t},\n};\n"]}