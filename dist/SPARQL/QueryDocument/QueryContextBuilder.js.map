{"version":3,"sources":["SPARQL/QueryDocument/QueryContextBuilder.ts"],"names":[],"mappings":"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","file":"QueryContextBuilder.js","sourcesContent":["import * as Context from \"../../Context\";\nimport { IllegalArgumentError } from \"../../Errors\";\nimport {\n\tDigestedObjectSchema,\n\tDigestedPropertyDefinition,\n} from \"../../ObjectSchema\";\nimport * as QueryContext from \"./QueryContext\";\nimport * as QueryProperty from \"./QueryProperty\";\nimport {\n\tgetLevelRegExp,\n\tgetParentPath,\n} from \"./Utils\";\n\nexport class Class extends QueryContext.Class {\n\n\tprivate _propertiesMap:Map<string, QueryProperty.Class>;\n\tprivate _schemas:DigestedObjectSchema[];\n\n\tconstructor( context?:Context.Class ) {\n\t\tsuper( context );\n\t\tthis._propertiesMap = new Map();\n\t}\n\n\thasProperty( name:string ):boolean {\n\t\treturn this._propertiesMap.has( name );\n\t}\n\n\thasProperties( name:string ):boolean {\n\t\tconst levelRegex:RegExp = getLevelRegExp( name );\n\t\treturn Array.from( this._propertiesMap.keys() )\n\t\t\t.some( propertyName => levelRegex.test( propertyName ) );\n\t}\n\n\taddProperty( name:string ):QueryProperty.Class {\n\t\tconst property:QueryProperty.Class = new QueryProperty.Class( this, name, );\n\t\tthis._propertiesMap.set( name, property );\n\t\treturn property;\n\t}\n\n\tgetProperty( name:string ):QueryProperty.Class {\n\t\treturn this._propertiesMap.get( name );\n\t}\n\n\tgetProperties( name:string ):QueryProperty.Class[] {\n\t\tconst levelRegex:RegExp = getLevelRegExp( name );\n\t\treturn Array.from( this._propertiesMap.entries() )\n\t\t\t.filter( ( [ propertyName ] ) => levelRegex.test( propertyName ) )\n\t\t\t.map( ( [ propertyName, property ] ) => property );\n\t}\n\n\tgetInheritTypeDefinition( existingSchema:DigestedObjectSchema, propertyName:string, propertyURI?:string ):DigestedPropertyDefinition {\n\t\tconst schemas:DigestedObjectSchema[] = [ existingSchema, ...this._getTypeSchemas() ];\n\n\t\tfor( const schema of schemas ) {\n\t\t\tif( ! schema.properties.has( propertyName ) ) continue;\n\t\t\tconst digestedProperty:DigestedPropertyDefinition = schema.properties.get( propertyName );\n\n\t\t\tif( propertyURI && digestedProperty.uri.stringValue !== propertyURI ) continue;\n\t\t\treturn digestedProperty;\n\t\t}\n\t}\n\n\tgetSchemaFor( object:object, path?:string ):DigestedObjectSchema {\n\t\tif( path === void 0 ) return super.getSchemaFor( object );\n\n\t\tconst property:QueryProperty.Class = this.getProperty( path );\n\t\tif( property ) {\n\t\t\tswitch( property.getType() ) {\n\t\t\t\tcase QueryProperty.PropertyType.PARTIAL:\n\t\t\t\t\treturn this.getProperty( path ).getSchema();\n\n\t\t\t\tcase QueryProperty.PropertyType.FULL:\n\t\t\t\tcase QueryProperty.PropertyType.ALL:\n\t\t\t\t\treturn super.getSchemaFor( object );\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new IllegalArgumentError( `Property \"${ path }\" is not a resource.` );\n\t\t\t}\n\t\t}\n\n\t\tconst parent:QueryProperty.Class = this.getProperty( getParentPath( path ) );\n\t\tif( ! parent || parent.getType() !== QueryProperty.PropertyType.FULL )\n\t\t\tthrow new IllegalArgumentError( `Schema path \"${ path }\" does not exists.` );\n\n\t\treturn super.getSchemaFor( object );\n\t}\n\n\tisPartial( path:string ):boolean {\n\t\tif( ! this.hasProperty( path ) ) return false;\n\n\t\treturn this\n\t\t\t.getProperty( path )\n\t\t\t.getType() === QueryProperty.PropertyType.PARTIAL\n\t\t\t;\n\t}\n\n\tprivate _getTypeSchemas():DigestedObjectSchema[] {\n\t\tif( this._schemas ) return this._schemas;\n\n\t\tconst schemasTypes:Set<string> = new Set();\n\t\t(function addSchemasTypes( context:Context.Class ):void {\n\t\t\tif( ! context ) return;\n\t\t\tArray.from( context[ \"typeObjectSchemaMap\" ].keys() ).forEach( schemasTypes.add, schemasTypes );\n\t\t\taddSchemasTypes( context.parentContext );\n\t\t})( this.context );\n\n\t\tthis._schemas = [];\n\t\tschemasTypes.forEach( type => this._schemas.push( this.context.getObjectSchema( type ) ) );\n\t\treturn this._schemas;\n\t}\n\n}\n\nexport default Class;\n"]}