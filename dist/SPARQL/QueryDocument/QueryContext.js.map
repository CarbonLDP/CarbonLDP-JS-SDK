{"version":3,"sources":["SPARQL/QueryDocument/QueryContext.ts"],"names":[],"mappings":"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","file":"QueryContext.js","sourcesContent":["import { isBNodeLabel, isPrefixed } from \"sparqler/iri\";\nimport { BlankNodeToken, IRIToken, PatternToken, PrefixedNameToken } from \"sparqler/tokens\";\n\nimport * as AbstractContext from \"../../AbstractContext\";\nimport { DigestedObjectSchema, DigestedPropertyDefinition, Util as SchemaUtils } from \"../../ObjectSchema\";\nimport * as QueryProperty from \"./QueryProperty\";\nimport * as QueryVariable from \"./QueryVariable\";\n\nexport class Class {\n\tprotected _context:AbstractContext.Class;\n\tget context():AbstractContext.Class { return this._context; }\n\n\tprotected _propertiesMap:Map<string, QueryProperty.Class>;\n\n\tprivate _variablesCounter:number;\n\tprivate _variablesMap:Map<string, QueryVariable.Class>;\n\n\tconstructor( context:AbstractContext.Class ) {\n\t\tthis._context = context;\n\t\tthis._propertiesMap = new Map();\n\n\t\tthis._variablesCounter = 0;\n\t\tthis._variablesMap = new Map();\n\t}\n\n\tgetVariable( name:string ):QueryVariable.Class {\n\t\tif( this._variablesMap.has( name ) ) return this._variablesMap.get( name );\n\n\t\tconst variable:QueryVariable.Class = new QueryVariable.Class( name, this._variablesCounter ++ );\n\t\tthis._variablesMap.set( name, variable );\n\t\treturn variable;\n\t}\n\n\thasProperties( propertyName:string ):boolean {\n\t\tpropertyName += \".\";\n\t\treturn Array.from( this._propertiesMap.keys() )\n\t\t\t.some( key => key.startsWith( propertyName ) );\n\t}\n\n\taddProperty( name:string, pattern:PatternToken ):QueryProperty.Class {\n\t\tconst property:QueryProperty.Class = new QueryProperty.Class( this, name, pattern );\n\t\tthis._propertiesMap.set( name, property );\n\t\treturn property;\n\t}\n\n\tgetProperty( name:string ):QueryProperty.Class {\n\t\tif( ! this._propertiesMap.has( name ) ) throw new Error( `The \"${ name }\" property was not declared.` );\n\t\treturn this._propertiesMap.get( name );\n\t}\n\n\tserializeLiteral( type:string, value:any ):string {\n\t\ttype = this.expandIRI( type );\n\n\t\tif( ! this._context.documents.jsonldConverter.literalSerializers.has( type ) ) return \"\" + value;\n\t\treturn this._context.documents.jsonldConverter.literalSerializers.get( type ).serialize( value );\n\t}\n\n\texpandIRI( iri:string ):string {\n\t\tconst vocab:string = this._context.hasSetting( \"vocabulary\" ) ? this._context.resolve( this._context.getSetting( \"vocabulary\" ) ) : void 0;\n\t\tiri = SchemaUtils.resolveURI( iri, this._context.getObjectSchema(), vocab );\n\n\t\tif( isPrefixed( iri ) ) throw new Error( `Prefix \"${ iri.split( \":\" )[ 0 ] }\" has not been declared.` );\n\t\treturn iri;\n\t}\n\n\tcompactIRI( iri:string ):IRIToken | PrefixedNameToken {\n\t\t// TODO: Implement correctly\n\t\treturn isPrefixed( iri ) ? new PrefixedNameToken( iri ) : new IRIToken( iri );\n\t}\n\n\tgetInheritTypeDefinition( propertyName:string, propertyURI?:string, context:AbstractContext.Class = this._context ):DigestedPropertyDefinition {\n\t\tif( context === null ) return null;\n\n\t\tconst typeSchemas:DigestedObjectSchema[] = Array.from( context[ \"typeObjectSchemaMap\" ].values() );\n\t\tfor( const schema of typeSchemas ) {\n\t\t\tif( ! schema.properties.has( propertyName ) ) continue;\n\t\t\tconst digestedProperty:DigestedPropertyDefinition = schema.properties.get( propertyName );\n\n\t\t\tif( propertyURI && digestedProperty.uri.stringValue !== propertyURI ) continue;\n\t\t\treturn digestedProperty;\n\t\t}\n\n\t\treturn this.getInheritTypeDefinition( propertyName, propertyURI, context.parentContext as AbstractContext.Class );\n\t}\n\n}\n\nexport default Class;\n"]}