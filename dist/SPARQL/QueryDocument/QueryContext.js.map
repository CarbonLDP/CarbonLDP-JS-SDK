{"version":3,"sources":["SPARQL/QueryDocument/QueryContext.ts"],"names":[],"mappings":"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","file":"QueryContext.js","sourcesContent":["import { isPrefixed } from \"sparqler/iri\";\nimport {\n\tIRIToken,\n\tPrefixedNameToken,\n\tPrefixToken\n} from \"sparqler/tokens\";\n\nimport { Context } from \"../../Context\";\nimport { IllegalArgumentError } from \"../../Errors/IllegalArgumentError\";\nimport {\n\tDigestedObjectSchema,\n\tObjectSchemaResolver,\n} from \"../../ObjectSchema\";\nimport * as QueryVariable from \"./QueryVariable\";\n\nexport class QueryContext implements ObjectSchemaResolver {\n\treadonly context?:Context;\n\n\tprivate _variablesCounter:number;\n\tprivate _variablesMap:Map<string, QueryVariable.Class>;\n\n\tprivate _prefixesMap:Map<string, PrefixToken>;\n\n\tconstructor( context?:Context ) {\n\t\tthis.context = context;\n\n\t\tthis._variablesCounter = 0;\n\t\tthis._variablesMap = new Map();\n\n\t\tthis._prefixesMap = new Map();\n\t}\n\n\tgetVariable( name:string ):QueryVariable.Class {\n\t\tif( this._variablesMap.has( name ) ) return this._variablesMap.get( name );\n\n\t\tconst variable:QueryVariable.Class = new QueryVariable.Class( name, this._variablesCounter ++ );\n\t\tthis._variablesMap.set( name, variable );\n\t\treturn variable;\n\t}\n\n\tserializeLiteral( type:string, value:any ):string {\n\t\tif( ! this.context || ! this.context.documents.jsonldConverter.literalSerializers.has( type ) ) return \"\" + value;\n\t\treturn this.context.documents.jsonldConverter.literalSerializers.get( type ).serialize( value );\n\t}\n\n\tcompactIRI( iri:string ):IRIToken | PrefixedNameToken {\n\t\tif( ! this.context ) {\n\t\t\tif( isPrefixed( iri ) ) return new PrefixedNameToken( iri );\n\t\t\treturn new IRIToken( iri );\n\t\t}\n\n\t\tconst schema:DigestedObjectSchema = this.context.getObjectSchema();\n\n\t\tlet namespace:string;\n\t\tlet localName:string;\n\t\tif( ! isPrefixed( iri ) ) {\n\t\t\tfor( const [ prefixName, prefixURI ] of Array.from( schema.prefixes.entries() ) ) {\n\t\t\t\tif( ! iri.startsWith( prefixURI ) ) continue;\n\t\t\t\tnamespace = prefixName;\n\t\t\t\tlocalName = iri.substr( prefixURI.length );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif( namespace === void 0 ) return new IRIToken( iri );\n\t\t}\n\n\t\tconst prefixedName:PrefixedNameToken = new PrefixedNameToken( namespace || iri, localName );\n\n\t\tnamespace = prefixedName.namespace;\n\t\tif( ! this._prefixesMap.has( namespace ) ) {\n\t\t\tif( ! schema.prefixes.has( namespace ) ) throw new IllegalArgumentError( `Prefix \"${ namespace }\" has not been declared.` );\n\t\t\tconst prefixIRI:IRIToken = new IRIToken( schema.prefixes.get( namespace ) );\n\t\t\tthis._prefixesMap.set( namespace, new PrefixToken( namespace, prefixIRI ) );\n\t\t}\n\n\t\treturn prefixedName;\n\t}\n\n\tgetPrologues():PrefixToken[] {\n\t\treturn Array.from( this._prefixesMap.values() );\n\t}\n\n\tgetGeneralSchema():DigestedObjectSchema {\n\t\tif( ! this.context ) return new DigestedObjectSchema();\n\t\treturn this.context.documents.getGeneralSchema();\n\t}\n\n\thasSchemaFor( object:object, path?:string ):boolean {\n\t\tif( ! this.context ) return false;\n\t\treturn this.context.documents.hasSchemaFor( object );\n\t}\n\n\tgetSchemaFor( object:object, path?:string ):DigestedObjectSchema {\n\t\tif( ! this.context ) return new DigestedObjectSchema();\n\t\treturn this.context.documents.getSchemaFor( object );\n\t}\n\n}\n\nexport default QueryContext;\n"]}