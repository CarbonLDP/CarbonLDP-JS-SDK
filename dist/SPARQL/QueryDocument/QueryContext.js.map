{"version":3,"sources":["SPARQL/QueryDocument/QueryContext.ts"],"names":[],"mappings":";;AAAA,oCAA0C;AAC1C,0CAAoG;AAGpG,mDAAqH;AACrH,+CAAiD;AACjD,+CAAiD;AAEjD;IAaC,eAAa,OAAqB;QACjC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;QAEhC,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;QAC3B,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,EAAE,CAAC;QAE/B,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC;IAC/B,CAAC;IAnBD,sBAAI,0BAAO;aAAX,cAA8B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;;;OAAA;IAqBrD,2BAAW,GAAX,UAAa,IAAW;QACvB,EAAE,CAAA,CAAE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAE,IAAI,CAAG,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAE,IAAI,CAAE,CAAC;QAE3E,IAAM,QAAQ,GAAuB,IAAI,aAAa,CAAC,KAAK,CAAE,IAAI,EAAE,IAAI,CAAC,iBAAiB,EAAG,CAAE,CAAC;QAChG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAE,IAAI,EAAE,QAAQ,CAAE,CAAC;QACzC,MAAM,CAAC,QAAQ,CAAC;IACjB,CAAC;IAED,2BAAW,GAAX,UAAa,IAAW;QACvB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAE,IAAI,CAAE,CAAC;IACxC,CAAC;IAED,6BAAa,GAAb,UAAe,IAAW;QACzB,IAAI,IAAI,GAAG,CAAC;QACZ,MAAM,CAAC,KAAK,CAAC,IAAI,CAAE,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAE;aAC7C,IAAI,CAAE,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,UAAU,CAAE,IAAI,CAAE,EAAtB,CAAsB,CAAE,CAAC;IACzC,CAAC;IAED,2BAAW,GAAX,UAAa,IAAW,EAAE,OAAqB;QAC9C,IAAM,QAAQ,GAAuB,IAAI,aAAa,CAAC,KAAK,CAAE,IAAI,EAAE,IAAI,EAAE,OAAO,CAAE,CAAC;QACpF,IAAI,CAAC,cAAc,CAAC,GAAG,CAAE,IAAI,EAAE,QAAQ,CAAE,CAAC;QAC1C,MAAM,CAAC,QAAQ,CAAC;IACjB,CAAC;IAED,2BAAW,GAAX,UAAa,IAAW;QACvB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAE,IAAI,CAAE,CAAC;IACxC,CAAC;IAED,6BAAa,GAAb,UAAe,aAAoB;QAClC,IAAM,UAAU,GAAU,IAAI,MAAM,CAAE,aAAa,CAAC,OAAO,CAAE,GAAG,EAAE,KAAK,CAAE,GAAG,WAAW,CAAE,CAAC;QAC1F,MAAM,CAAC,KAAK,CAAC,IAAI,CAAE,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAE;aAChD,MAAM,CAAE,UAAE,EAAQ;gBAAN,YAAI;YAAQ,OAAA,UAAU,CAAC,IAAI,CAAE,IAAI,CAAE;QAAvB,CAAuB,CAAE;aACjD,GAAG,CAAE,UAAE,EAAkB;gBAAhB,YAAI,EAAE,gBAAQ;YAAQ,OAAA,QAAQ;QAAR,CAAQ,CAAE,CAAC;IAC7C,CAAC;IAED,gCAAgB,GAAhB,UAAkB,IAAW,EAAE,KAAS;QACvC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAE,IAAI,CAAE,CAAC;QAE9B,EAAE,CAAA,CAAE,CAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,eAAe,CAAC,kBAAkB,CAAC,GAAG,CAAE,IAAI,CAAG,CAAC;YAAC,MAAM,CAAC,EAAE,GAAG,KAAK,CAAC;QACjG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,eAAe,CAAC,kBAAkB,CAAC,GAAG,CAAE,IAAI,CAAE,CAAC,SAAS,CAAE,KAAK,CAAE,CAAC;IAClG,CAAC;IAED,yBAAS,GAAT,UAAW,GAAU;QACpB,IAAM,KAAK,GAAU,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAE,YAAY,CAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAE,YAAY,CAAE,CAAE,GAAG,KAAK,CAAC,CAAC;QAC3I,GAAG,GAAG,mBAAW,CAAC,UAAU,CAAE,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE,EAAE,KAAK,CAAE,CAAC;QAE5E,EAAE,CAAA,CAAE,gBAAU,CAAE,GAAG,CAAG,CAAC;YAAC,MAAM,IAAI,KAAK,CAAE,cAAY,GAAG,CAAC,KAAK,CAAE,GAAG,CAAE,CAAE,CAAC,CAAE,8BAA2B,CAAE,CAAC;QACxG,MAAM,CAAC,GAAG,CAAC;IACZ,CAAC;IAED,0BAAU,GAAV,UAAY,GAAU;QACrB,IAAM,MAAM,GAAwB,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;QAEnE,IAAI,SAAgB,CAAC;QACrB,IAAI,SAAgB,CAAC;QACrB,EAAE,CAAA,CAAE,CAAE,gBAAU,CAAE,GAAG,CAAG,CAAC,CAAC,CAAC;YAC1B,GAAG,CAAA,CAAsD,UAAuC,EAAvC,KAAA,KAAK,CAAC,IAAI,CAAE,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAE,EAAvC,cAAuC,EAAvC,IAAuC;gBAArF,IAAA,WAA0C,EAAxC,kBAAU,EAAI,6BAAsB;gBAChD,EAAE,CAAA,CAAE,CAAE,GAAG,CAAC,UAAU,CAAE,SAAS,CAAG,CAAC;oBAAC,QAAQ,CAAC;gBAC7C,SAAS,GAAG,UAAU,CAAC;gBACvB,SAAS,GAAG,GAAG,CAAC,MAAM,CAAE,SAAS,CAAC,MAAM,CAAE,CAAC;gBAC3C,KAAK,CAAC;aACN;YACD,EAAE,CAAA,CAAE,SAAS,KAAK,KAAK,CAAE,CAAC;gBAAC,MAAM,CAAC,IAAI,iBAAQ,CAAE,GAAG,CAAE,CAAC;QACvD,CAAC;QAED,IAAM,YAAY,GAAqB,IAAI,0BAAiB,CAAE,SAAS,IAAI,GAAG,EAAE,SAAS,CAAE,CAAC;QAE5F,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC;QACnC,EAAE,CAAA,CAAE,CAAE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAE,SAAS,CAAG,CAAC,CAAC,CAAC;YAC3C,EAAE,CAAA,CAAE,CAAE,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAE,SAAS,CAAG,CAAC;gBAAC,MAAM,IAAI,KAAK,CAAE,cAAY,SAAS,8BAA2B,CAAE,CAAC;YAC7G,IAAM,SAAS,GAAY,IAAI,iBAAQ,CAAE,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAE,SAAS,CAAE,CAAC,WAAW,CAAE,CAAC;YACxF,IAAI,CAAC,YAAY,CAAC,GAAG,CAAE,SAAS,EAAE,IAAI,oBAAW,CAAE,SAAS,EAAE,SAAS,CAAE,CAAE,CAAC;QAC7E,CAAC;QAED,MAAM,CAAC,YAAY,CAAC;IACrB,CAAC;IAED,wCAAwB,GAAxB,UAA0B,YAAmB,EAAE,WAAmB,EAAE,cAAoE;QAApE,+BAAA,EAAA,iBAAsC,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;QACvI,IAAM,OAAO,IAA4B,cAAc,SAAK,IAAI,CAAC,eAAe,EAAE,CAAE,CAAC;QAErF,GAAG,CAAA,CAAkB,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;YAAvB,IAAM,MAAM,gBAAA;YAChB,EAAE,CAAA,CAAE,CAAE,MAAM,CAAC,UAAU,CAAC,GAAG,CAAE,YAAY,CAAG,CAAC;gBAAC,QAAQ,CAAC;YACvD,IAAM,gBAAgB,GAA8B,MAAM,CAAC,UAAU,CAAC,GAAG,CAAE,YAAY,CAAE,CAAC;YAE1F,EAAE,CAAA,CAAE,WAAW,IAAI,gBAAgB,CAAC,GAAG,CAAC,WAAW,KAAK,WAAY,CAAC;gBAAC,QAAQ,CAAC;YAC/E,MAAM,CAAC,gBAAgB,CAAC;SACxB;IACF,CAAC;IAED,gCAAgB,GAAhB;QACC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC;IAClD,CAAC;IAED,4BAAY,GAAZ,UAAc,MAAa,EAAE,IAAY;QACxC,EAAE,CAAA,CAAE,IAAI,KAAK,KAAK,CAAE,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,YAAY,CAAE,MAAM,CAAE,CAAC;QAE3E,IAAM,IAAI,GAAU,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC;QAC5D,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC;QAEnB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAE,IAAI,CAAE,CAAC,SAAS,EAAE,CAAC;IACpD,CAAC;IAED,4BAAY,GAAZ;QACC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAE,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAE,CAAC;IACjD,CAAC;IAEO,+BAAe,GAAvB;QAAA,iBAaC;QAZA,EAAE,CAAA,CAAE,IAAI,CAAC,QAAS,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QAEzC,IAAM,YAAY,GAAe,IAAI,GAAG,EAAE,CAAC;QAC3C,CAAC,yBAA0B,OAAqB;YAC/C,EAAE,CAAA,CAAE,CAAE,OAAQ,CAAC;gBAAC,MAAM,CAAC;YACvB,KAAK,CAAC,IAAI,CAAE,OAAO,CAAE,qBAAqB,CAAE,CAAC,IAAI,EAAE,CAAE,CAAC,OAAO,CAAE,YAAY,CAAC,GAAG,EAAE,YAAY,CAAE,CAAC;YAChG,eAAe,CAAE,OAAO,CAAC,aAAa,CAAE,CAAC;QAC1C,CAAC,CAAC,CAAE,IAAI,CAAC,OAAO,CAAE,CAAC;QAEnB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,YAAY,CAAC,OAAO,CAAE,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAE,KAAI,CAAC,OAAO,CAAC,eAAe,CAAE,IAAI,CAAE,CAAE,EAA1D,CAA0D,CAAE,CAAC;QAC3F,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC;IAEF,YAAC;AAAD,CAhJA,AAgJC,IAAA;AAhJY,sBAAK;AAkJlB,kBAAe,KAAK,CAAC","file":"QueryContext.js","sourcesContent":["import { isPrefixed } from \"sparqler/iri\";\nimport { BaseToken, IRIToken, PatternToken, PrefixedNameToken, PrefixToken } from \"sparqler/tokens\";\n\nimport * as Context from \"../../Context\";\nimport { DigestedObjectSchema, DigestedPropertyDefinition, Resolver, Util as SchemaUtils } from \"../../ObjectSchema\";\nimport * as QueryProperty from \"./QueryProperty\";\nimport * as QueryVariable from \"./QueryVariable\";\n\nexport class Class implements Resolver {\n\tprotected _context:Context.Class;\n\tget context():Context.Class { return this._context; }\n\n\tprotected _propertiesMap:Map<string, QueryProperty.Class>;\n\n\tprivate _variablesCounter:number;\n\tprivate _variablesMap:Map<string, QueryVariable.Class>;\n\n\tprivate _prefixesMap:Map<string, PrefixToken>;\n\n\tprivate _schemas:DigestedObjectSchema[];\n\n\tconstructor( context:Context.Class ) {\n\t\tthis._context = context;\n\t\tthis._propertiesMap = new Map();\n\n\t\tthis._variablesCounter = 0;\n\t\tthis._variablesMap = new Map();\n\n\t\tthis._prefixesMap = new Map();\n\t}\n\n\tgetVariable( name:string ):QueryVariable.Class {\n\t\tif( this._variablesMap.has( name ) ) return this._variablesMap.get( name );\n\n\t\tconst variable:QueryVariable.Class = new QueryVariable.Class( name, this._variablesCounter ++ );\n\t\tthis._variablesMap.set( name, variable );\n\t\treturn variable;\n\t}\n\n\thasProperty( name:string ):boolean {\n\t\treturn this._propertiesMap.has( name );\n\t}\n\n\thasProperties( name:string ):boolean {\n\t\tname += \".\";\n\t\treturn Array.from( this._propertiesMap.keys() )\n\t\t\t.some( key => key.startsWith( name ) );\n\t}\n\n\taddProperty( name:string, pattern?:PatternToken ):QueryProperty.Class {\n\t\tconst property:QueryProperty.Class = new QueryProperty.Class( this, name, pattern );\n\t\tthis._propertiesMap.set( name, property );\n\t\treturn property;\n\t}\n\n\tgetProperty( name:string ):QueryProperty.Class {\n\t\treturn this._propertiesMap.get( name );\n\t}\n\n\tgetProperties( propertyLevel:string ):QueryProperty.Class[] {\n\t\tconst levelRegex:RegExp = new RegExp( propertyLevel.replace( \".\", \"\\\\.\" ) + \"\\\\.[^.]+$\" );\n\t\treturn Array.from( this._propertiesMap.entries() )\n\t\t\t.filter( ( [ name ] ) => levelRegex.test( name ) )\n\t\t\t.map( ( [ name, property ] ) => property );\n\t}\n\n\tserializeLiteral( type:string, value:any ):string {\n\t\ttype = this.expandIRI( type );\n\n\t\tif( ! this._context.documents.jsonldConverter.literalSerializers.has( type ) ) return \"\" + value;\n\t\treturn this._context.documents.jsonldConverter.literalSerializers.get( type ).serialize( value );\n\t}\n\n\texpandIRI( iri:string ):string {\n\t\tconst vocab:string = this._context.hasSetting( \"vocabulary\" ) ? this._context.resolve( this._context.getSetting( \"vocabulary\" ) ) : void 0;\n\t\tiri = SchemaUtils.resolveURI( iri, this._context.getObjectSchema(), vocab );\n\n\t\tif( isPrefixed( iri ) ) throw new Error( `Prefix \"${ iri.split( \":\" )[ 0 ] }\" has not been declared.` );\n\t\treturn iri;\n\t}\n\n\tcompactIRI( iri:string ):IRIToken | PrefixedNameToken {\n\t\tconst schema:DigestedObjectSchema = this.context.getObjectSchema();\n\n\t\tlet namespace:string;\n\t\tlet localName:string;\n\t\tif( ! isPrefixed( iri ) ) {\n\t\t\tfor( const [ prefixName, { stringValue: prefixURI } ] of Array.from( schema.prefixes.entries() ) ) {\n\t\t\t\tif( ! iri.startsWith( prefixURI ) ) continue;\n\t\t\t\tnamespace = prefixName;\n\t\t\t\tlocalName = iri.substr( prefixURI.length );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif( namespace === void 0 ) return new IRIToken( iri );\n\t\t}\n\n\t\tconst prefixedName:PrefixedNameToken = new PrefixedNameToken( namespace || iri, localName );\n\n\t\tnamespace = prefixedName.namespace;\n\t\tif( ! this._prefixesMap.has( namespace ) ) {\n\t\t\tif( ! schema.prefixes.has( namespace ) ) throw new Error( `Prefix \"${ namespace }\" has not been declared.` );\n\t\t\tconst prefixIRI:IRIToken = new IRIToken( schema.prefixes.get( namespace ).stringValue );\n\t\t\tthis._prefixesMap.set( namespace, new PrefixToken( namespace, prefixIRI ) );\n\t\t}\n\n\t\treturn prefixedName;\n\t}\n\n\tgetInheritTypeDefinition( propertyName:string, propertyURI?:string, existingSchema:DigestedObjectSchema = this.context.getObjectSchema() ):DigestedPropertyDefinition {\n\t\tconst schemas:DigestedObjectSchema[] = [ existingSchema, ...this._getTypeSchemas() ];\n\n\t\tfor( const schema of schemas ) {\n\t\t\tif( ! schema.properties.has( propertyName ) ) continue;\n\t\t\tconst digestedProperty:DigestedPropertyDefinition = schema.properties.get( propertyName );\n\n\t\t\tif( propertyURI && digestedProperty.uri.stringValue !== propertyURI ) continue;\n\t\t\treturn digestedProperty;\n\t\t}\n\t}\n\n\tgetGeneralSchema():DigestedObjectSchema {\n\t\treturn this.context.documents.getGeneralSchema();\n\t}\n\n\tgetSchemaFor( object:object, path?:string ):DigestedObjectSchema {\n\t\tif( path === void 0 ) return this.context.documents.getSchemaFor( object );\n\n\t\tconst root:string = this._propertiesMap.keys().next().value;\n\t\tpath = root + path;\n\n\t\treturn this._propertiesMap.get( path ).getSchema();\n\t}\n\n\tgetPrologues():PrefixToken[] {\n\t\treturn Array.from( this._prefixesMap.values() );\n\t}\n\n\tprivate _getTypeSchemas():DigestedObjectSchema[] {\n\t\tif( this._schemas ) return this._schemas;\n\n\t\tconst schemasTypes:Set<string> = new Set();\n\t\t(function addSchemasTypes( context:Context.Class ):void {\n\t\t\tif( ! context ) return;\n\t\t\tArray.from( context[ \"typeObjectSchemaMap\" ].keys() ).forEach( schemasTypes.add, schemasTypes );\n\t\t\taddSchemasTypes( context.parentContext );\n\t\t})( this.context );\n\n\t\tthis._schemas = [];\n\t\tschemasTypes.forEach( type => this._schemas.push( this.context.getObjectSchema( type ) ) );\n\t\treturn this._schemas;\n\t}\n\n}\n\nexport default Class;\n"]}