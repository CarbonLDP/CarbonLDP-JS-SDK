{"version":3,"sources":["SPARQL/QueryDocument/QueryContextPartial.ts"],"names":[],"mappings":";;;;;;;;;;;;AAIA,+CAA8C;AAE9C;IAAyC,uCAAY;IAIpD,6BAAa,QAAiB,EAAE,OAAgB;QAAhD,YACC,kBAAO,OAAO,CAAE,SAEhB;QADA,KAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;;IAC3B,CAAC;IAED,0CAAY,GAAZ,UAAc,MAAa,EAAE,IAAY;QACxC,IAAI,IAAI,KAAK,KAAK,CAAC;YAAG,OAAO,iBAAM,YAAY,YAAE,MAAM,CAAE,CAAC;QAE1D,IAAM,KAAK,GAAY,IAAI,CAAC,KAAK,CAAE,KAAK,CAAE,CAAC,KAAK,CAAE,CAAC,CAAE,CAAC;QACtD,IAAI,aAAa,GAAY,IAAI,CAAC,SAAS,CAAC;QAC5C,OAAO,KAAK,CAAC,MAAM,EAAG;YACrB,IAAM,IAAI,GAAU,KAAK,CAAC,KAAK,EAAE,CAAC;YAClC,IAAM,MAAM,GAAS,KAAK,CAAC,OAAO,CAAE,aAAa,CAAE,IAAI,CAAE,CAAE,CAAC,CAAC;gBAC5D,aAAa,CAAE,IAAI,CAAE,CAAC,CAAC,CAAC,CAAE,aAAa,CAAE,IAAI,CAAE,CAAE,CAAC;YAEnD,aAAa,GAAG,MAAM,CAAC,IAAI,CAAE,UAAA,KAAK,IAAI,OAAA,KAAK,IAAI,kBAAkB,IAAI,KAAK,EAApC,CAAoC,CAAE,CAAC;YAC7E,IAAI,CAAE,aAAa;gBAAG,OAAO,iBAAM,YAAY,YAAE,MAAM,CAAE,CAAC;SAC1D;QAED,OAAO,aAAa,CAAC,gBAAgB,CAAC,MAAM,CAAC;IAC9C,CAAC;IACF,0BAAC;AAAD,CAzBA,AAyBC,CAzBwC,2BAAY,GAyBpD;AAzBY,kDAAmB","file":"QueryContextPartial.js","sourcesContent":["import { Context } from \"../../Context\";\nimport { DigestedObjectSchema } from \"../../ObjectSchema\";\nimport { Document } from \"../../Document\";\nimport { Resource } from \"../../Resource\";\nimport { QueryContext } from \"./QueryContext\";\n\nexport class QueryContextPartial extends QueryContext {\n\n\tprivate _document:Document;\n\n\tconstructor( document:Document, context?:Context ) {\n\t\tsuper( context );\n\t\tthis._document = document;\n\t}\n\n\tgetSchemaFor( object:object, path?:string ):DigestedObjectSchema {\n\t\tif( path === void 0 ) return super.getSchemaFor( object );\n\n\t\tconst parts:string[] = path.split( /\\./g ).slice( 1 );\n\t\tlet schemaLibrary:Resource = this._document;\n\t\twhile( parts.length ) {\n\t\t\tconst part:string = parts.shift();\n\t\t\tconst values:any[] = Array.isArray( schemaLibrary[ part ] ) ?\n\t\t\t\tschemaLibrary[ part ] : [ schemaLibrary[ part ] ];\n\n\t\t\tschemaLibrary = values.find( value => value && \"_partialMetadata\" in value );\n\t\t\tif( ! schemaLibrary ) return super.getSchemaFor( object );\n\t\t}\n\n\t\treturn schemaLibrary._partialMetadata.schema;\n\t}\n}\n"]}