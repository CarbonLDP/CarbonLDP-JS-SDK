{"version":3,"sources":["SPARQL/QueryDocument/Utils.ts"],"names":[],"mappings":";;AACA,0CAAuI;AAGvI,wBAAgC,QAAe;IAC9C,EAAE,CAAA,CAAE,QAAS,CAAC;QAAC,QAAQ,IAAI,GAAG,CAAC;IAC/B,IAAM,UAAU,GAAU,QAAQ,CAAC,OAAO,CAAE,KAAK,EAAE,KAAK,CAAE,CAAC;IAE3D,MAAM,CAAC,IAAI,MAAM,CAAE,MAAK,UAAU,WAAS,CAAE,CAAC;AAC/C,CAAC;AALD,wCAKC;AAED,+BAAuC,OAA0B,EAAE,YAAmB,EAAE,YAAmB,EAAE,kBAA6C;IACjJ,IAAA,4BAAG,EAAE,4CAAW,EAAE,4CAAW,CAAwB;IAE7D,IAAM,YAAY,GAAgC,OAAO,CAAC,UAAU,CAAE,GAAG,CAAC,WAAW,CAAE,CAAC;IAExF,IAAM,QAAQ,GAAiB,OAAO,CAAC,WAAW,CAAE,YAAY,CAAE,CAAC;IACnE,IAAM,cAAc,GAAiB,OAAO,CAAC,WAAW,CAAE,YAAY,CAAE,CAAC;IAEzE,IAAM,eAAe,GAAiB,IAAI,sBAAa,EAAE;SACvD,UAAU,CAAE,IAAI,qBAAY,CAAE,QAAQ,CAAE;SACvC,YAAY,CAAE,IAAI,uBAAc,CAAE,YAAY,CAAE;SAC/C,SAAS,CAAE,cAAc,CAAE,CAAE,CAAE,CAClC;IAED,EAAE,CAAA,CAAE,WAAW,KAAK,IAAK,CAAC;QAAC,eAAe;aACxC,UAAU,CAAE,IAAI,oBAAW,CAAE,eAAc,cAAc,aAAU,OAAO,CAAC,UAAU,CAAE,WAAW,CAAC,WAAW,CAAK,CAAE,CAAE,CAAC;IAC1H,EAAE,CAAA,CAAE,WAAW,KAAK,IAAK,CAAC;QAAC,eAAe;aACxC,UAAU,CAAE,IAAI,oBAAW,CAAE,kBAAiB,cAAc,OAAK,CAAE,CAAE,CAAC;IAExE,MAAM,CAAC,eAAe,CAAC;AACxB,CAAC;AApBD,sDAoBC","file":"Utils.js","sourcesContent":["import { DigestedPropertyDefinition } from \"../../ObjectSchema\";\nimport { FilterToken, IRIToken, OptionalToken, PredicateToken, PrefixedNameToken, SubjectToken, VariableToken } from \"sparqler/tokens\";\nimport * as QueryContext from \"./QueryContext\";\n\nexport function getLevelRegExp( property:string ):RegExp {\n\tif( property ) property += \".\";\n\tconst parsedName:string = property.replace( /\\./g, \"\\\\.\" );\n\n\treturn new RegExp( `^${ parsedName }[^.]+$` );\n}\n\nexport function createPropertyPattern( context:QueryContext.Class, resourceName:string, propertyName:string, propertyDefinition:DigestedPropertyDefinition ):OptionalToken {\n\tconst { uri, literalType, pointerType } = propertyDefinition;\n\n\tconst propertyPath:IRIToken | PrefixedNameToken = context.compactIRI( uri.stringValue );\n\n\tconst resource:VariableToken = context.getVariable( resourceName );\n\tconst propertyObject:VariableToken = context.getVariable( propertyName );\n\n\tconst propertyPattern:OptionalToken = new OptionalToken()\n\t\t.addPattern( new SubjectToken( resource )\n\t\t\t.addPredicate( new PredicateToken( propertyPath )\n\t\t\t\t.addObject( propertyObject ) ) )\n\t;\n\n\tif( literalType !== null ) propertyPattern\n\t\t.addPattern( new FilterToken( `datatype( ${ propertyObject } ) = ${ context.compactIRI( literalType.stringValue ) }` ) );\n\tif( pointerType !== null ) propertyPattern\n\t\t.addPattern( new FilterToken( `! isLiteral( ${ propertyObject } )` ) );\n\n\treturn propertyPattern;\n}\n"]}