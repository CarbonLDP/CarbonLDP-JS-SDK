{"version":3,"sources":["SPARQL/QueryDocument/Utils.ts"],"names":[],"mappings":";;AACA,0CAAiK;AAGjK,wBAAgC,QAAe;IAC9C,EAAE,CAAA,CAAE,QAAS,CAAC;QAAC,QAAQ,IAAI,GAAG,CAAC;IAC/B,IAAM,UAAU,GAAU,QAAQ,CAAC,OAAO,CAAE,KAAK,EAAE,KAAK,CAAE,CAAC;IAE3D,MAAM,CAAC,IAAI,MAAM,CAAE,MAAK,UAAU,WAAS,CAAE,CAAC;AAC/C,CAAC;AALD,wCAKC;AAED,gCAAwC,OAA0B,EAAE,YAAmB,EAAE,YAAmB,EAAE,kBAA6C;IAClJ,IAAA,4BAAG,EAAE,4CAAW,EAAE,4CAAW,CAAwB;IAE7D,IAAM,WAAW,GAAgC,OAAO,CAAC,UAAU,CAAE,GAAG,CAAC,WAAW,CAAE,CAAC;IAEvF,IAAM,QAAQ,GAAiB,OAAO,CAAC,WAAW,CAAE,YAAY,CAAE,CAAC;IACnE,IAAM,cAAc,GAAiB,OAAO,CAAC,WAAW,CAAE,YAAY,CAAE,CAAC;IAEzE,IAAM,gBAAgB,GAAkB,CAAE,IAAI,qBAAY,CAAE,QAAQ,CAAE;aACpE,YAAY,CAAE,IAAI,uBAAc,CAAE,WAAW,CAAE;aAC9C,SAAS,CAAE,cAAc,CAAE,CAAE;KAC/B,CAAC;IAEF,EAAE,CAAA,CAAE,WAAW,KAAK,IAAK,CAAC;QAAC,gBAAgB;aACzC,IAAI,CAAE,IAAI,oBAAW,CAAE,eAAc,cAAc,aAAU,OAAO,CAAC,UAAU,CAAE,WAAW,CAAC,WAAW,CAAK,CAAE,CAAE,CAAC;IACpH,EAAE,CAAA,CAAE,WAAW,KAAK,IAAK,CAAC;QAAC,gBAAgB;aACzC,IAAI,CAAE,IAAI,oBAAW,CAAE,kBAAiB,cAAc,OAAK,CAAE,CAAE,CAAC;IAElE,MAAM,CAAC,gBAAgB,CAAC;AACzB,CAAC;AAnBD,wDAmBC;AAED,4BAAoC,OAA0B,EAAE,YAAmB;IAClF,MAAM,CAAC,IAAI,sBAAa,EAAE;SACxB,UAAU,CAAE,IAAI,qBAAY,CAAE,OAAO,CAAC,WAAW,CAAE,YAAY,CAAE,CAAE;SAClE,YAAY,CAAE,IAAI,uBAAc,CAAE,GAAG,CAAE;SACtC,SAAS,CAAE,OAAO,CAAC,WAAW,CAAM,YAAY,WAAS,CAAE,CAAE,CAC9D,CACD,CAAC;AACJ,CAAC;AAPD,gDAOC;AAED,4BAAoC,OAA0B,EAAE,YAAmB;IAClF,MAAM,CAAC,IAAI,mBAAU,CAAE,OAAO,CAAC,WAAW,CAAE,YAAY,CAAE,CAAE;SAC1D,UAAU,CAAE,IAAI,qBAAY,CAAE,OAAO,CAAC,WAAW,CAAM,YAAY,cAAY,CAAE,CAAE;SAClF,YAAY,CAAE,IAAI,uBAAc,CAAE,OAAO,CAAC,WAAW,CAAM,YAAY,gBAAc,CAAE,CAAE;SACxF,SAAS,CAAE,OAAO,CAAC,WAAW,CAAM,YAAY,aAAW,CAAE,CAAE,CAAE,CACnE,CACA;AACH,CAAC;AAPD,gDAOC","file":"Utils.js","sourcesContent":["import { DigestedPropertyDefinition } from \"../../ObjectSchema\";\nimport { FilterToken, GraphToken, IRIToken, OptionalToken, PatternToken, PredicateToken, PrefixedNameToken, SubjectToken, VariableToken } from \"sparqler/tokens\";\nimport * as QueryContext from \"./QueryContext\";\n\nexport function getLevelRegExp( property:string ):RegExp {\n\tif( property ) property += \".\";\n\tconst parsedName:string = property.replace( /\\./g, \"\\\\.\" );\n\n\treturn new RegExp( `^${ parsedName }[^.]+$` );\n}\n\nexport function createPropertyPatterns( context:QueryContext.Class, resourcePath:string, propertyPath:string, propertyDefinition:DigestedPropertyDefinition ):PatternToken[] {\n\tconst { uri, literalType, pointerType } = propertyDefinition;\n\n\tconst propertyIRI:IRIToken | PrefixedNameToken = context.compactIRI( uri.stringValue );\n\n\tconst resource:VariableToken = context.getVariable( resourcePath );\n\tconst propertyObject:VariableToken = context.getVariable( propertyPath );\n\n\tconst propertyPatterns:PatternToken[] = [ new SubjectToken( resource )\n\t\t.addPredicate( new PredicateToken( propertyIRI )\n\t\t\t.addObject( propertyObject ) ),\n\t];\n\n\tif( literalType !== null ) propertyPatterns\n\t\t.push( new FilterToken( `datatype( ${ propertyObject } ) = ${ context.compactIRI( literalType.stringValue ) }` ) );\n\tif( pointerType !== null ) propertyPatterns\n\t\t.push( new FilterToken( `! isLiteral( ${ propertyObject } )` ) );\n\n\treturn propertyPatterns;\n}\n\nexport function createTypesPattern( context:QueryContext.Class, resourcePath:string ):PatternToken {\n\treturn new OptionalToken()\n\t\t.addPattern( new SubjectToken( context.getVariable( resourcePath ) )\n\t\t\t.addPredicate( new PredicateToken( \"a\" )\n\t\t\t\t.addObject( context.getVariable( `${ resourcePath }.types` ) )\n\t\t\t)\n\t\t);\n}\n\nexport function createGraphPattern( context:QueryContext.Class, resourcePath:string ):PatternToken {\n\treturn new GraphToken( context.getVariable( resourcePath ) )\n\t\t.addPattern( new SubjectToken( context.getVariable( `${ resourcePath }._subject` ) )\n\t\t\t.addPredicate( new PredicateToken( context.getVariable( `${ resourcePath }._predicate` ) )\n\t\t\t\t.addObject( context.getVariable( `${ resourcePath }._object` ) ) )\n\t\t)\n\t\t;\n}\n"]}