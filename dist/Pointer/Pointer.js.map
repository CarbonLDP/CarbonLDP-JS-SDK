{"version":3,"sources":["Pointer/Pointer.ts"],"names":[],"mappings":";;;;;;;;;AACA,8CAAkC;AAgCrB,QAAA,OAAO,GAAkB;IACrC,WAAW,EAAX,UAAa,MAAa;QACzB,OAAO,CACN,KAAK,CAAC,kBAAkB,CAAE,MAAM,EAAE,KAAK,CAAE;YACzC,KAAK,CAAC,kBAAkB,CAAE,MAAM,EAAE,IAAI,CAAE,CACxC,CAAC;IACH,CAAC;IAED,EAAE,EAAF,UAAI,KAAS;QACZ,OAAO,CACN,KAAK,CAAC,QAAQ,CAAE,KAAK,CAAE;YACvB,eAAO,CAAC,WAAW,CAAE,KAAK,CAAE,CAC5B,CAAC;IACH,CAAC;IAGD,MAAM,EAAN,UAA0B,IAAqB;QAC9C,IAAM,KAAK,GAAK,MAAM,CAAC,MAAM,CAAE,EAAE,EAAE,IAAI,CAAE,CAAC;QAC1C,OAAO,eAAO,CAAC,UAAU,CAAK,KAAK,CAAE,CAAC;IACvC,CAAC;IAED,UAAU,EAAV,UAA8B,MAAsB;QACnD,OAAO,eAAO,CAAC,QAAQ,CAAK,MAAM,CAAE,CAAC;IACtC,CAAC;IAED,QAAQ,EAAR,UAA4B,MAAQ;QACnC,IAAI,eAAO,CAAC,WAAW,CAAE,MAAM,CAAE;YAAG,OAAO,MAAM,CAAC;QAElD,IAAM,OAAO,GAAe,MAAqB,CAAC;QAClD,MAAM,CAAC,gBAAgB,CAAE,OAAO,EAAE;YACjC,WAAW,EAAE;gBACZ,QAAQ,EAAE,IAAI;gBACd,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,IAAI;aAClB;YAED,KAAK,EAAE;gBACN,QAAQ,EAAE,IAAI;gBACd,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,IAAI;gBAClB,KAAK,EAAE,OAAO,CAAC,EAAE,IAAI,EAAE;aACvB;YACD,IAAI,EAAE;gBACL,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,IAAI;gBAClB,GAAG,EAAH;oBACC,OAAO,IAAI,CAAC,GAAG,CAAC;gBACjB,CAAC;gBACD,GAAG,EAAH,UAAmB,KAAY;oBAC9B,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC;gBAClB,CAAC;aACD;SACD,CAAE,CAAC;QAEJ,OAAO,OAAO,CAAC;IAChB,CAAC;IAGD,QAAQ,EAAR,UAAU,QAAgB,EAAE,QAAgB;QAC3C,OAAO,QAAQ,CAAC,EAAE,KAAK,QAAQ,CAAC,EAAE,CAAC;IACpC,CAAC;IAED,MAAM,EAAN,UAAQ,QAAkB;QACzB,OAAO,QAAQ;aACb,GAAG,CAAE,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,EAAE,EAAV,CAAU,CAAE,CAC5B;IACH,CAAC;IAED,KAAK,EAAL,UAAO,YAA6B;QACnC,OAAO,KAAK,CAAC,QAAQ,CAAE,YAAY,CAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC;IACxE,CAAC;CACD,CAAC","file":"Pointer.js","sourcesContent":["import { Registry } from \"../Registry\";\nimport * as Utils from \"../Utils\";\nimport { BasePointer } from \"./BasePointer\";\n\n\nexport interface Pointer {\n\t_registry:Registry<Pointer> | undefined;\n\t_id:string;\n\n\tid:string;\n}\n\n\nexport interface PointerFactory {\n\tisDecorated( object:object ):object is Pointer;\n\n\tis( value:any ):value is Pointer;\n\n\n\tcreate<T extends object>( data?:T & BasePointer ):T & Pointer;\n\n\tcreateFrom<T extends object>( object:T & BasePointer ):T & Pointer;\n\n\tdecorate<T extends object>( object:T ):T & Pointer;\n\n\n\tareEqual( pointer1:Pointer, pointer2:Pointer ):boolean;\n\n\tgetIDs( pointers:Pointer[] ):string[];\n\n\tgetID( pointerOrIRI:Pointer | string ):string;\n}\n\nexport const Pointer:PointerFactory = {\n\tisDecorated( object:object ):object is Pointer {\n\t\treturn (\n\t\t\tUtils.hasPropertyDefined( object, \"_id\" ) &&\n\t\t\tUtils.hasPropertyDefined( object, \"id\" )\n\t\t);\n\t},\n\n\tis( value:any ):value is Pointer {\n\t\treturn (\n\t\t\tUtils.isObject( value ) &&\n\t\t\tPointer.isDecorated( value )\n\t\t);\n\t},\n\n\n\tcreate<T extends object>( data?:T & BasePointer ):T & Pointer {\n\t\tconst clone:T = Object.assign( {}, data );\n\t\treturn Pointer.createFrom<T>( clone );\n\t},\n\n\tcreateFrom<T extends object>( object:T & BasePointer ):T & Pointer {\n\t\treturn Pointer.decorate<T>( object );\n\t},\n\n\tdecorate<T extends object>( object:T ):T & Pointer {\n\t\tif( Pointer.isDecorated( object ) ) return object;\n\n\t\tconst pointer:T & Pointer = object as T & Pointer;\n\t\tObject.defineProperties( pointer, {\n\t\t\t\"_registry\": {\n\t\t\t\twritable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t},\n\n\t\t\t\"_id\": {\n\t\t\t\twritable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: pointer.id || \"\",\n\t\t\t},\n\t\t\t\"id\": {\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tget( this:Pointer ):string {\n\t\t\t\t\treturn this._id;\n\t\t\t\t},\n\t\t\t\tset( this:Pointer, value:string ):void {\n\t\t\t\t\tthis._id = value;\n\t\t\t\t},\n\t\t\t},\n\t\t} );\n\n\t\treturn pointer;\n\t},\n\n\n\tareEqual( pointer1:Pointer, pointer2:Pointer ):boolean {\n\t\treturn pointer1.id === pointer2.id;\n\t},\n\n\tgetIDs( pointers:Pointer[] ):string[] {\n\t\treturn pointers\n\t\t\t.map( pointer => pointer.id )\n\t\t\t;\n\t},\n\n\tgetID( pointerOrIRI:Pointer | string ):string {\n\t\treturn Utils.isString( pointerOrIRI ) ? pointerOrIRI : pointerOrIRI.id;\n\t},\n};\n\n"]}