{"version":3,"sources":["DocumentsRepository/Utils.ts"],"names":[],"mappings":";;AACA,uEAAsE;AACtE,gEAA+D;AAE/D,2CAAgD;AAChD,sDAAqD;AACrD,8CAA6C;AAG7C,kCAAiC;AAIjC,kCAAoC;AAGpC,iCAAyC,GAAU;IAClD,OAAO,OAAK,GAAG,wBAAqB,CAAC;AACtC,CAAC;AAFD,0DAEC;AAGD,yBAA+C,QAA0B,EAAE,GAAe,EAAE,IAAgB;IAC3G,IAAM,IAAI,GAAU,gBAAQ,CAAE,GAAG,CAAE,CAAC,CAAC;QACpC,SAAG,CAAC,OAAO,CAAE,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC;IAEjD,IAAM,KAAK,GAAS,CAAE,gBAAQ,CAAE,GAAG,CAAE,CAAC,CAAC;QACtC,KAAK,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC,CAAC;QACpB,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAE,IAAI,EAAE,CAAC,CAAE,CAAC;IAEvC,OAAO,EAAE,IAAI,MAAA,EAAE,KAAK,OAAA,EAAE,CAAC;AACxB,CAAC;AATD,0CASC;AAED,8BAAoD,QAA0B,EAAE,SAAgC,EAAE,IAAgB;IACjI,IAAM,SAAS,GAAqB,iBAAO,CAAC,EAAE,CAAE,SAAS,CAAE,CAAC,CAAC;QAC5D,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC;IAEtB,IAAM,KAAK,GAAS,CAAE,iBAAO,CAAC,EAAE,CAAE,SAAS,CAAE,CAAC,CAAC;QAC9C,KAAK,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC,CAAC;QACpB,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAE,IAAI,EAAE,CAAC,CAAE,CAAC;IAEvC,OAAO,EAAE,SAAS,WAAA,EAAE,KAAK,OAAA,EAAE,CAAC;AAC7B,CAAC;AATD,oDASC;AAGD,mCAAsD,QAA0B;IAC/E,OAAO,UAAE,KAAuB;QAC/B,IAAI,CAAE,CAAC,UAAU,IAAI,KAAK,CAAC;YAAG,OAAO,OAAO,CAAC,MAAM,CAAE,KAAK,CAAE,CAAC;QAC7D,IAAI,CAAE,KAAK,CAAC,QAAQ,CAAC,IAAI;YAAG,OAAO,OAAO,CAAC,MAAM,CAAE,KAAK,CAAE,CAAC;QAE3D,OAAO,IAAI,qBAAY,EAAE;aACvB,KAAK,CAAE,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAE;aAC5B,IAAI,CAAE,UAAE,SAAmB;YAC3B,IAAM,aAAa,GAAiB,6BAAa,CAAC,cAAc,CAAE,QAAQ,EAAE,SAAS,CAAE,CAAC;YAExF,IAAM,cAAc,GAAmB,aAAa;iBAClD,WAAW,CAAE,IAAI,CAAE;iBACnB,MAAM,CAAE,6BAAa,CAAC,EAAE,CAAE,CAAC;YAE7B,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC;gBAAG,OAAO,OAAO,CAAC,MAAM,CAAE,IAAI,2CAAoB,CAAE,0DAA0D,CAAE,CAAE,CAAC;YAClJ,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC;gBAAG,OAAO,OAAO,CAAC,MAAM,CAAE,IAAI,2CAAoB,CAAE,wDAAwD,CAAE,CAAE,CAAC;YAE9I,IAAM,aAAa,GAAiB,MAAM,CAAC,MAAM,CAAE,KAAK,EAAE,cAAc,CAAE,CAAC,CAAE,CAAE,CAAC;YAChF,KAAK,CAAC,OAAO,GAAG,6BAAa,CAAC,UAAU,CAAE,aAAa,CAAE,CAAC;YAE1D,OAAO,OAAO,CAAC,MAAM,CAAE,KAAK,CAAE,CAAC;QAChC,CAAC,EAAE;YACF,OAAO,OAAO,CAAC,MAAM,CAAE,KAAK,CAAE,CAAC;QAChC,CAAC,CAAE,CAAC;IACN,CAAC,CAAC;AACH,CAAC;AAzBD,8DAyBC","file":"Utils.js","sourcesContent":["import { DocumentsRegistry } from \"../DocumentsRegistry/DocumentsRegistry\";\nimport { IllegalArgumentError } from \"../Errors/IllegalArgumentError\";\nimport { FreeResources } from \"../FreeResources/FreeResources\";\nimport { HTTPError } from \"../HTTP/Errors/HTTPError\";\nimport { JSONLDParser } from \"../JSONLD/Parser\";\nimport { ErrorResponse } from \"../LDP/ErrorResponse\";\nimport { Pointer } from \"../Pointer/Pointer\";\nimport { RDFNode } from \"../RDF/Node\";\n\nimport { URI } from \"../RDF/URI\";\n\nimport { ResolvablePointer } from \"../Repository/ResolvablePointer\";\n\nimport { isString } from \"../Utils\";\n\n\nexport function _getNotInContextMessage( uri:string ):string {\n\treturn `\"${ uri }\" is out of scope.`;\n}\n\n\nexport function _parseURIParams<T>( this:void, resource:ResolvablePointer, uri?:string | T, args?:IArguments ):{ _uri:string, _args:any[] } {\n\tconst _uri:string = isString( uri ) ?\n\t\tURI.resolve( resource.$id, uri ) : resource.$id;\n\n\tconst _args:any[] = ! isString( uri ) ?\n\t\tArray.from( args ) :\n\t\tArray.prototype.slice.call( args, 1 );\n\n\treturn { _uri, _args };\n}\n\nexport function _parseResourceParams<T>( this:void, resource:ResolvablePointer, $resource?:ResolvablePointer | T, args?:IArguments ):{ _resource:ResolvablePointer, _args:any[] } {\n\tconst _resource:ResolvablePointer = Pointer.is( $resource ) ?\n\t\t$resource : resource;\n\n\tconst _args:any[] = ! Pointer.is( $resource ) ?\n\t\tArray.from( args ) :\n\t\tArray.prototype.slice.call( args, 1 );\n\n\treturn { _resource, _args };\n}\n\n\nexport function _getErrorResponseParserFn( this:void, registry:DocumentsRegistry ):( error:HTTPError | Error ) => Promise<never> {\n\treturn ( error:HTTPError | Error ) => {\n\t\tif( ! (\"response\" in error) ) return Promise.reject( error );\n\t\tif( ! error.response.data ) return Promise.reject( error );\n\n\t\treturn new JSONLDParser()\n\t\t\t.parse( error.response.data )\n\t\t\t.then( ( freeNodes:RDFNode[] ) => {\n\t\t\t\tconst freeResources:FreeResources = FreeResources.parseFreeNodes( registry, freeNodes );\n\n\t\t\t\tconst errorResponses:ErrorResponse[] = freeResources\n\t\t\t\t\t.getPointers( true )\n\t\t\t\t\t.filter( ErrorResponse.is );\n\n\t\t\t\tif( errorResponses.length === 0 ) return Promise.reject( new IllegalArgumentError( \"The response string does not contains a c:ErrorResponse.\" ) );\n\t\t\t\tif( errorResponses.length > 1 ) return Promise.reject( new IllegalArgumentError( \"The response string contains multiple c:ErrorResponse.\" ) );\n\n\t\t\t\tconst errorResponse:ErrorResponse = Object.assign( error, errorResponses[ 0 ] );\n\t\t\t\terror.message = ErrorResponse.getMessage( errorResponse );\n\n\t\t\t\treturn Promise.reject( error );\n\t\t\t}, () => {\n\t\t\t\treturn Promise.reject( error );\n\t\t\t} );\n\t};\n}\n"]}