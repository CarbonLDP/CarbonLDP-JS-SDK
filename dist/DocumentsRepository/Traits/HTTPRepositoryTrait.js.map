{"version":3,"sources":["DocumentsRepository/Traits/HTTPRepositoryTrait.ts"],"names":[],"mappings":"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","file":"HTTPRepositoryTrait.js","sourcesContent":["import { Context } from \"../../Context/Context\";\n\nimport { IllegalArgumentError } from \"../../Errors/IllegalArgumentError\";\n\nimport { BaseGeneralRepository } from \"../../GeneralRepository/BaseGeneralRepository\";\nimport { GeneralRepository } from \"../../GeneralRepository/GeneralRepository\";\n\nimport { HTTPError } from \"../../HTTP/Errors/HTTPError\";\nimport { GETOptions, RequestOptions, RequestService, RequestUtils } from \"../../HTTP/Request\";\nimport { Response } from \"../../HTTP/Response\";\n\nimport { ModelDecorator } from \"../../Model/ModelDecorator\";\nimport { ModelPrototype } from \"../../Model/ModelPrototype\";\n\nimport { RegisteredPointer } from \"../../Registry/RegisteredPointer\";\nimport { ResolvablePointer } from \"../../Repository/ResolvablePointer\";\n\n\nexport interface HTTPRepositoryTrait<MODEL extends ResolvablePointer = ResolvablePointer> extends GeneralRepository<MODEL> {\n\treadonly context:Context<MODEL & RegisteredPointer, MODEL>;\n\n\tget<T extends object>( uri:string, requestOptions?:GETOptions ):Promise<T & MODEL>;\n\tresolve<T extends object>( resource:MODEL, requestOptions?:RequestOptions ):Promise<T & MODEL>;\n\texists( uri:string, requestOptions?:RequestOptions ):Promise<boolean>;\n\n\trefresh<T extends object>( resource:MODEL, requestOptions?:RequestOptions ):Promise<T & MODEL>;\n\tsave<T extends object>( resource:MODEL, requestOptions?:RequestOptions ):Promise<T & MODEL>;\n\tsaveAndRefresh<T extends object>( resource:MODEL, requestOptions?:RequestOptions ):Promise<T & MODEL>;\n\n\tdelete( uri:string, requestOptions?:RequestOptions ):Promise<void>;\n\n\t_parseResponseData<T extends object>( response:Response, id:string ):Promise<T & MODEL>;\n}\n\n\nexport type OverriddenMembers =\n\t| \"get\"\n\t| \"resolve\"\n\t| \"exists\"\n\t| \"refresh\"\n\t| \"save\"\n\t| \"saveAndRefresh\"\n\t| \"delete\"\n\t;\n\n// FIXME: Use `unknown` for TS 3.0\nexport type GeneralRepositoryFactory =\n\t& ModelPrototype<HTTPRepositoryTrait, GeneralRepository, OverriddenMembers>\n\t& ModelDecorator<HTTPRepositoryTrait<any>, BaseGeneralRepository>\n\t;\n\nexport const HTTPRepositoryTrait:GeneralRepositoryFactory = {\n\tPROTOTYPE: {\n\t\tget<T extends object>( this:HTTPRepositoryTrait, uri:string, requestOptions?:GETOptions ):Promise<T & ResolvablePointer> {\n\t\t\tif( ! this.context.registry.inScope( uri, true ) ) return Promise.reject( new IllegalArgumentError( `\"${ uri }\" is out of scope.` ) );\n\t\t\tconst url:string = this.context.getObjectSchema().resolveURI( uri, { base: true } );\n\n\t\t\tif( this.context.registry.hasPointer( url, true ) ) {\n\t\t\t\tconst resource:ResolvablePointer = this.context.registry.getPointer( url, true );\n\t\t\t\tif( resource.$isResolved() ) {\n\t\t\t\t\tif( ! requestOptions.ensureLatest ) return Promise.resolve( resource as T & ResolvablePointer );\n\t\t\t\t\tRequestUtils.setIfNoneMatchHeader( resource.$eTag, requestOptions );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn RequestService\n\t\t\t\t.get( url, requestOptions )\n\t\t\t\t.then( ( response:Response ) => {\n\t\t\t\t\treturn this._parseResponseData<T>( response, url );\n\t\t\t\t} );\n\t\t},\n\n\t\tresolve<T extends object>( this:HTTPRepositoryTrait, resource:ResolvablePointer, requestOptions?:RequestOptions ):Promise<T & ResolvablePointer> {\n\t\t\treturn this.get<T>( resource.$id, requestOptions );\n\t\t},\n\n\t\texists( this:HTTPRepositoryTrait, uri:string, requestOptions?:RequestOptions ):Promise<boolean> {\n\t\t\tif( ! this.context.registry.inScope( uri, true ) ) return Promise.reject( new IllegalArgumentError( `\"${ uri }\" is out of scope.` ) );\n\t\t\tconst url:string = this.context.getObjectSchema().resolveURI( uri, { base: true } );\n\n\t\t\treturn RequestService\n\t\t\t\t.head( url, requestOptions )\n\t\t\t\t.then( () => true )\n\t\t\t\t.catch<boolean>( ( error:HTTPError | Error ) => {\n\t\t\t\t\tif( \"response\" in error && error.response.status === 404 ) return false;\n\t\t\t\t\treturn Promise.reject( error );\n\t\t\t\t} );\n\t\t},\n\n\n\t\trefresh<T extends object>( this:HTTPRepositoryTrait, resource:ResolvablePointer, requestOptions?:RequestOptions ):Promise<T & ResolvablePointer> {\n\t\t\tif( ! ResolvablePointer.is( resource ) ) return Promise.reject( new IllegalArgumentError( \"The resource isn't a resolvable pointer.\" ) );\n\n\t\t\tif( ! this.context.registry.inScope( resource.$id, true ) ) return Promise.reject( new IllegalArgumentError( `\"${ resource.$id }\" is out of scope.` ) );\n\t\t\tconst url:string = this.context.getObjectSchema().resolveURI( resource.$id, { base: true } );\n\n\t\t\treturn RequestService\n\t\t\t\t.get( url, requestOptions )\n\t\t\t\t.then<T & ResolvablePointer>( ( response:Response ) => {\n\t\t\t\t\treturn this._parseResponseData<T>( response, url );\n\t\t\t\t} )\n\t\t\t\t.catch<T & ResolvablePointer>( ( error:HTTPError | Error ) => {\n\t\t\t\t\tif( \"response\" in error && error.response.status === 304 ) return resource as T & ResolvablePointer;\n\t\t\t\t\treturn Promise.reject( error );\n\t\t\t\t} )\n\t\t\t\t;\n\t\t},\n\n\t\tsave<T extends object>( this:HTTPRepositoryTrait, resource:ResolvablePointer, requestOptions?:RequestOptions ):Promise<T & ResolvablePointer> {\n\t\t\tif( ! ResolvablePointer.is( resource ) ) return Promise.reject( new IllegalArgumentError( \"The resource isn't a resolvable pointer.\" ) );\n\n\t\t\tif( ! this.context.registry.inScope( resource.$id, true ) ) return Promise.reject( new IllegalArgumentError( `\"${ resource.$id }\" is out of scope.` ) );\n\t\t\tconst url:string = this.context.getObjectSchema().resolveURI( resource.$id, { base: true } );\n\n\t\t\tif( ! resource.$isDirty() ) return Promise.resolve( resource as T & ResolvablePointer );\n\n\t\t\tconst body:string = JSON.stringify( resource );\n\t\t\treturn RequestService\n\t\t\t\t.put( url, body, requestOptions )\n\t\t\t\t.then( () => resource as T & ResolvablePointer );\n\t\t},\n\n\t\tsaveAndRefresh<T extends object>( this:HTTPRepositoryTrait, resource:ResolvablePointer, requestOptions?:RequestOptions ):Promise<T & ResolvablePointer> {\n\t\t\treturn this\n\t\t\t\t.save<T>( resource, requestOptions )\n\t\t\t\t.then( () => this.refresh<T>( resource, requestOptions ) )\n\t\t\t\t;\n\t\t},\n\n\n\t\tdelete( this:HTTPRepositoryTrait, uri:string, requestOptions?:RequestOptions ):Promise<void> {\n\t\t\tif( ! this.context.registry.inScope( uri, true ) ) return Promise.reject( new IllegalArgumentError( `\"${ uri }\" is out of scope.` ) );\n\t\t\tconst url:string = this.context.getObjectSchema().resolveURI( uri, { base: true } );\n\n\t\t\treturn RequestService\n\t\t\t\t.delete( url, requestOptions )\n\t\t\t\t.then( () => {\n\t\t\t\t\tthis.context.registry.removePointer( url );\n\t\t\t\t} );\n\t\t},\n\n\n\t\tasync _parseResponseData<T extends object>( this:HTTPRepositoryTrait<T & ResolvablePointer>, response:Response, id:string ):Promise<T & ResolvablePointer> {\n\t\t\tconst resolvable:T & ResolvablePointer = this.context.registry\n\t\t\t\t.getPointer( id, true );\n\n\t\t\tresolvable.$eTag = response.getETag();\n\t\t\tresolvable.$_resolved = true;\n\n\t\t\treturn resolvable;\n\t\t},\n\t},\n\n\n\tisDecorated( object:object ):object is HTTPRepositoryTrait {\n\t\treturn ModelDecorator\n\t\t\t.hasPropertiesFrom( HTTPRepositoryTrait.PROTOTYPE, object )\n\t\t\t;\n\t},\n\n\tdecorate<T extends BaseGeneralRepository>( object:T ):T & HTTPRepositoryTrait {\n\t\tif( HTTPRepositoryTrait.isDecorated( object ) ) return;\n\n\t\tconst resource:T & GeneralRepository = ModelDecorator\n\t\t\t.decorateMultiple( object, GeneralRepository );\n\n\t\treturn ModelDecorator\n\t\t\t.definePropertiesFrom( HTTPRepositoryTrait.PROTOTYPE, resource );\n\t},\n};\n"]}