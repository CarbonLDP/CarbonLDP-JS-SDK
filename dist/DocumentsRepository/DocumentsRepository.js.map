{"version":3,"sources":["DocumentsRepository/DocumentsRepository.ts"],"names":[],"mappings":";;;;;;;;;;AAMA,0DAAyD;AAMzD,kCAAoC;AAIpC,sGAAqG;AACrG,gGAA+F;AAC/F,0FAAyF;AAiC5E,QAAA,mBAAmB,GAA8B;IAC7D,MAAM,EAAN,UAA0B,IAAgC;QACzD,OAAO,2BAAmB,CAAC,UAAU,cAAO,IAAW,EAAI,CAAC;IAC7D,CAAC;IAED,UAAU,EAAV,UAA8B,MAAkC;QAC/D,OAAO,+BAAc;aACnB,gBAAgB,CAAE,MAAM,EACxB,qEAAiC,EACjC,+DAA8B,EAC9B,2EAAoC,CACpC,CAAC;IACJ,CAAC;IAGD,EAAE,EAAF,UAAI,KAAS;QACZ,OAAO,gBAAQ,CAAE,KAAK,CAAE;eACpB,qEAAiC,CAAC,WAAW,CAAE,KAAK,CAAE;eACtD,+DAA8B,CAAC,WAAW,CAAE,KAAK,CAAE;eACnD,2EAAoC,CAAC,WAAW,CAAE,KAAK,CAAE,CAC3D;IACH,CAAC;CACD,CAAC","file":"DocumentsRepository.js","sourcesContent":["import { DocumentsContext } from \"../Context/DocumentsContext\";\n\nimport { Document } from \"../Document/Document\";\n\nimport { GETOptions, RequestOptions } from \"../HTTP/Request\";\n\nimport { ModelDecorator } from \"../Model/ModelDecorator\";\nimport { ModelFactory } from \"../Model/ModelFactory\";\nimport { ModelTypeGuard } from \"../Model/ModelTypeGuard\";\n\nimport { QueryDocumentBuilder } from \"../QueryDocuments/QueryDocumentBuilder\";\n\nimport { isObject } from \"../Utils\";\n\nimport { BaseDocumentsRepository } from \"./BaseDocumentsRepository\";\n\nimport { EventEmitterDocumentsRepositoryTrait } from \"./Traits/EventEmitterDocumentsRepositoryTrait\";\nimport { QueryableDocumentsRepositoryTrait } from \"./Traits/QueryableDocumentsRepositoryTrait\";\nimport { SPARQLDocumentsRepositoryTrait } from \"./Traits/SPARQLDocumentsRepositoryTrait\";\n\n\nexport interface DocumentsRepository extends QueryableDocumentsRepositoryTrait, SPARQLDocumentsRepositoryTrait, EventEmitterDocumentsRepositoryTrait {\n\t$context:DocumentsContext;\n\n\tget<T extends object>( uri:string, requestOptions?:GETOptions ):Promise<T & Document>;\n\tget<T extends object>( uri:string, queryBuilderFn:( queryBuilder:QueryDocumentBuilder ) => QueryDocumentBuilder ):Promise<T & Document>;\n\tget<T extends object>( uri:string, requestOptions:RequestOptions, queryBuilderFn:( queryBuilder:QueryDocumentBuilder ) => QueryDocumentBuilder ):Promise<T & Document>;\n\n\tresolve<T extends object>( document:Document, requestOptions?:GETOptions ):Promise<T & Document>;\n\tresolve<T extends object>( document:Document, queryBuilderFn:( queryBuilder:QueryDocumentBuilder ) => QueryDocumentBuilder ):Promise<T & Document>;\n\tresolve<T extends object>( document:Document, requestOptions:RequestOptions, queryBuilderFn?:( queryBuilder:QueryDocumentBuilder ) => QueryDocumentBuilder ):Promise<T & Document>;\n\n\texists( uri:string, requestOptions?:RequestOptions ):Promise<boolean>;\n\n\n\trefresh<T extends object>( document:Document, requestOptions?:RequestOptions ):Promise<T & Document>;\n\n\tsave<T extends object>( document:Document, requestOptions?:RequestOptions ):Promise<T & Document>;\n\n\tsaveAndRefresh<T extends object>( document:Document, requestOptions?:RequestOptions ):Promise<T & Document>;\n\n\n\tdelete( uri:string, requestOptions?:RequestOptions ):Promise<void>;\n}\n\n\nexport type DocumentsRepositoryFactory =\n\t& ModelFactory<DocumentsRepository, BaseDocumentsRepository>\n\t& ModelTypeGuard<DocumentsRepository>\n\t;\n\nexport const DocumentsRepository:DocumentsRepositoryFactory = {\n\tcreate<T extends object>( data:T & BaseDocumentsRepository ):T & DocumentsRepository {\n\t\treturn DocumentsRepository.createFrom( { ...data as any } );\n\t},\n\n\tcreateFrom<T extends object>( object:T & BaseDocumentsRepository ):T & DocumentsRepository {\n\t\treturn ModelDecorator\n\t\t\t.decorateMultiple( object,\n\t\t\t\tQueryableDocumentsRepositoryTrait,\n\t\t\t\tSPARQLDocumentsRepositoryTrait,\n\t\t\t\tEventEmitterDocumentsRepositoryTrait\n\t\t\t);\n\t},\n\n\n\tis( value:any ):value is DocumentsRepository {\n\t\treturn isObject( value )\n\t\t\t&& QueryableDocumentsRepositoryTrait.isDecorated( value )\n\t\t\t&& SPARQLDocumentsRepositoryTrait.isDecorated( value )\n\t\t\t&& EventEmitterDocumentsRepositoryTrait.isDecorated( value )\n\t\t\t;\n\t},\n};\n"]}