{"version":3,"sources":["LDPatch/Tokens.ts"],"names":[],"mappings":"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","file":"Tokens.js","sourcesContent":["import {\n\tBlankNodeToken,\n\tCollectionToken,\n\tIRIToken,\n\tPrefixedNameToken,\n\tSubjectToken,\n\tTokenNode,\n\tVariableOrIRI,\n} from \"sparqler/tokens\";\nimport { joinPatterns } from \"sparqler/tokens/utils\";\nimport { isNumber } from \"../Utils\";\n\nexport type StatementToken = AddToken | DeleteToken | UpdateListToken;\n\nexport class LDPatchToken implements TokenNode {\n\treadonly token:\"ldpatch\" = \"ldpatch\";\n\treadonly prologues:PrefixToken[];\n\treadonly statements:StatementToken[];\n\n\tconstructor() {\n\t\tthis.prologues = [];\n\t\tthis.statements = [];\n\t}\n\n\ttoString():string {\n\t\tconst tokens:TokenNode[] = [\n\t\t\t...this.prologues,\n\t\t\t...this.statements,\n\t\t];\n\n\t\treturn tokens.join( \" \" );\n\t}\n}\n\nexport class PrefixToken implements TokenNode {\n\treadonly token:\"prefix\" = \"prefix\";\n\treadonly namespace:string;\n\treadonly iri:IRIToken;\n\n\tconstructor( namespace:string, iri:IRIToken ) {\n\t\tthis.namespace = namespace;\n\t\tthis.iri = iri;\n\t}\n\n\ttoString():string {\n\t\treturn `@prefix ${ this.namespace }: ${ this.iri }.`;\n\t}\n}\n\nexport type TripleToken = SubjectToken;\n\nexport class AddToken implements TokenNode {\n\treadonly token:\"add\" = \"add\";\n\treadonly triples:TripleToken[];\n\n\tconstructor() {\n\t\tthis.triples = [];\n\t}\n\n\ttoString():string {\n\t\treturn `Add { ${ joinPatterns( this.triples ) } . }.`;\n\t}\n}\n\nexport class DeleteToken implements TokenNode {\n\treadonly token:\"delete\" = \"delete\";\n\treadonly triples:TripleToken[];\n\n\tconstructor() {\n\t\tthis.triples = [];\n\t}\n\n\ttoString():string {\n\t\treturn `Delete { ${ joinPatterns( this.triples ) } . }.`;\n\t}\n}\n\nexport class UpdateListToken implements TokenNode {\n\treadonly token:\"updateList\" = \"updateList\";\n\n\t// Extend LD Patch grammar allowing blank-nodes\n\treadonly subject:VariableOrIRI | BlankNodeToken;\n\treadonly predicate:IRIToken | PrefixedNameToken;\n\treadonly slice:SliceToken;\n\treadonly collection:CollectionToken;\n\n\tconstructor( subject:VariableOrIRI | BlankNodeToken, predicate:IRIToken | PrefixedNameToken, slice:SliceToken, collection:CollectionToken ) {\n\t\tthis.subject = subject;\n\t\tthis.predicate = predicate;\n\t\tthis.slice = slice;\n\t\tthis.collection = collection;\n\t}\n\n\ttoString():string {\n\t\treturn `UpdateList ${ this.subject } ${ this.predicate } ${ this.slice } ${ this.collection }.`;\n\t}\n}\n\nexport class SliceToken implements TokenNode {\n\treadonly token:\"slice\" = \"slice\";\n\treadonly minIndex?:number;\n\treadonly maxIndex?:number;\n\n\tconstructor( minIndex?:number, maxIndex?:number ) {\n\t\tif( isNumber( minIndex ) ) this.minIndex = minIndex;\n\t\tif( isNumber( maxIndex ) ) this.maxIndex = maxIndex;\n\t}\n\n\ttoString():string {\n\t\tlet buffer:string = \"..\";\n\t\tif( this.minIndex !== void 0 ) buffer = this.minIndex + buffer;\n\t\tif( this.maxIndex !== void 0 ) buffer = buffer + this.maxIndex;\n\n\t\treturn buffer;\n\t}\n}\n"]}