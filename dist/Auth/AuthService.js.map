{"version":3,"sources":["Auth/AuthService.ts"],"names":[],"mappings":"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","file":"AuthService.js","sourcesContent":["import { CarbonLDP } from \"../CarbonLDP\";\nimport { IllegalArgumentError } from \"../Errors\";\nimport { RequestOptions } from \"../HTTP\";\nimport * as Utils from \"../Utils\";\nimport { AbstractAuthenticator } from \"./AbstractAuthenticator\";\nimport { Authenticator } from \"./Authenticator\";\nimport { AuthMethod } from \"./AuthMethod\";\nimport { BasicAuthenticator } from \"./BasicAuthenticator\";\nimport { BasicCredentials } from \"./BasicCredentials\";\nimport { BasicToken } from \"./BasicToken\";\nimport { TokenAuthenticator } from \"./TokenAuthenticator\";\nimport {\n\tTokenCredentials,\n\tTokenCredentialsBase,\n} from \"./TokenCredentials\";\nimport { User } from \"./User\";\nimport { UsersEndpoint } from \"./UsersEndpoint\";\n\nexport class AuthService implements Authenticator<TokenCredentials> {\n\tpublic readonly users:UsersEndpoint;\n\n\tprotected readonly context:CarbonLDP;\n\tprotected readonly authenticators:{ [P in AuthMethod]:AbstractAuthenticator<any, any> };\n\tprotected authenticator:Authenticator<any>;\n\n\tprotected _authenticatedUser?:User;\n\tpublic get authenticatedUser():User | null {\n\t\tif( this._authenticatedUser ) return this._authenticatedUser;\n\t\treturn null;\n\t}\n\n\tconstructor( context:CarbonLDP ) {\n\t\tthis.context = context;\n\n\t\tconst usersIRI:string = context._resolvePath( \"users\" );\n\t\tthis.users = UsersEndpoint\n\t\t\t.decorate( context.registry.getPointer( usersIRI ) );\n\n\t\tthis.authenticators = {\n\t\t\t[ AuthMethod.BASIC ]: new BasicAuthenticator( this.context ),\n\t\t\t[ AuthMethod.TOKEN ]: new TokenAuthenticator( this.context ),\n\t\t};\n\t}\n\n\tisAuthenticated():boolean {\n\t\tif( ! this.authenticator ) return false;\n\t\treturn this.authenticator.isAuthenticated();\n\t}\n\n\tauthenticate( username:string, password:string ):Promise<TokenCredentials> {\n\t\treturn this.authenticateUsing( AuthMethod.TOKEN, username, password );\n\t}\n\n\tauthenticateUsing( method:AuthMethod.BASIC, username:string, password:string ):Promise<BasicCredentials>;\n\tauthenticateUsing( method:AuthMethod.TOKEN, username:string, password:string ):Promise<TokenCredentials>;\n\tauthenticateUsing( method:AuthMethod.TOKEN, token:TokenCredentialsBase ):Promise<TokenCredentials>;\n\tauthenticateUsing( method:AuthMethod, userOrCredentials:string | TokenCredentialsBase, password?:string ):Promise<BasicCredentials | TokenCredentials> {\n\t\tthis.clearAuthentication();\n\n\t\tconst authenticator:AbstractAuthenticator<any, any> = this.authenticators[ method ];\n\t\tif( ! authenticator ) return Promise.reject( new IllegalArgumentError( `Invalid authentication method \"${method}\".` ) );\n\n\n\t\tconst authenticationToken:BasicToken | TokenCredentialsBase | null = this\n\t\t\t._getAuthenticationToken( userOrCredentials, password );\n\t\tif( ! authenticationToken )\n\t\t\treturn Promise.reject( new IllegalArgumentError( \"Invalid authentication token.\" ) );\n\n\n\t\tlet credentials:BasicCredentials | TokenCredentials;\n\t\treturn authenticator\n\t\t\t.authenticate( authenticationToken )\n\t\t\t.then( ( _credentials ) => {\n\t\t\t\tcredentials = _credentials;\n\n\t\t\t\treturn authenticator\n\t\t\t\t\t.getAuthenticatedUser();\n\t\t\t} ).then( ( persistedUser:User ) => {\n\t\t\t\tthis._authenticatedUser = persistedUser;\n\t\t\t\tthis.authenticator = authenticator;\n\n\t\t\t\treturn credentials;\n\t\t\t} );\n\t}\n\n\taddAuthentication( requestOptions:RequestOptions ):RequestOptions {\n\t\tif( ! this.isAuthenticated() ) return;\n\t\treturn this.authenticator.addAuthentication( requestOptions );\n\t}\n\n\tclearAuthentication():void {\n\t\tif( ! this.authenticator ) return;\n\n\t\tthis.authenticator.clearAuthentication();\n\t\tthis.authenticator = null;\n\t\tthis._authenticatedUser = null;\n\t}\n\n\n\tprivate _getAuthenticationToken( userOrCredentials:string | TokenCredentialsBase, password?:string ):BasicToken | TokenCredentialsBase | null {\n\t\tif( Utils.isString( userOrCredentials ) )\n\t\t\treturn new BasicToken( userOrCredentials, password );\n\n\t\tif( TokenCredentialsBase.is( userOrCredentials ) )\n\t\t\treturn userOrCredentials;\n\n\t\treturn null;\n\t}\n}\n"]}