{"version":3,"sources":["Auth/PersistedRole.ts"],"names":[],"mappings":";AAKA,IAAY,IAAI,WAAM,QAAQ,CAAC,CAAA;AAE/B,IAAY,KAAK,WAAM,YAAY,CAAC,CAAA;AACpC,kCAA8B,6BAA6B,CAAC,CAAA;AAc5D;IAAA;IA2CA,CAAC;IAzCO,0BAAkB,GAAzB,UAA2B,MAAa;QACvC,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAE,MAAM,EAAE,QAAQ,CAAE;eAC/C,KAAK,CAAC,kBAAkB,CAAE,MAAM,EAAE,MAAM,CAAE;eAC1C,KAAK,CAAC,WAAW,CAAE,MAAM,EAAE,YAAY,CAAE;eACzC,KAAK,CAAC,WAAW,CAAE,MAAM,EAAE,WAAW,CAAE,CAC1C;IACH,CAAC;IAEM,UAAE,GAAT,UAAW,MAAa;QACvB,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAE,MAAM,CAAE;eACvC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAE,MAAM,CAAE,CAAC;IAC/B,CAAC;IAEM,gBAAQ,GAAf,UAAmC,MAAQ,EAAE,KAAiB;QAC7D,IAAI,IAAI,GAAmB,MAAM,CAAC;QAClC,EAAE,CAAC,CAAE,OAAO,CAAC,kBAAkB,CAAE,IAAI,CAAG,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAEtD,MAAM,CAAC,gBAAgB,CAAE,IAAI,EAAE;YAC9B,QAAQ,EAAE;gBACT,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,IAAI;gBAClB,KAAK,EAAE,KAAK;aACZ;YACD,YAAY,EAAE;gBACb,QAAQ,EAAE,IAAI;gBACd,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,IAAI;gBAClB,KAAK,EAAE,UAAU;aACjB;YACD,WAAW,EAAE;gBACZ,QAAQ,EAAE,IAAI;gBACd,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,IAAI;gBAClB,KAAK,EAAE,SAAS;aAChB;SACD,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAEF,cAAC;AAAD,CA3CA,AA2CC,IAAA;AA3CY,eAAO,UA2CnB,CAAA;AAGD,oBAAqB,cAAoC;IACxD,UAAU,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;IACxB,MAAM,CAAU,IAAK,CAAC,MAAM,CAAC,UAAU,CAAW,IAAK,CAAC,EAAE,EAAE,cAAc,CAAE,CAAC;AAC9E,CAAC;AAGD,mBAAoB,oCAAgE,EAAE,cAAoC;IACzH,UAAU,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;IACxB,MAAM,CAAU,IAAK,CAAC,MAAM,CAAC,SAAS,CAAW,IAAK,CAAC,EAAE,EAAE,oCAAoC,EAAE,cAAc,CAAE,CAAC;AACnH,CAAC;AAED;IACC,EAAE,CAAC,CAAC,CAAW,IAAK,CAAC,MAAO,CAAC;QAAC,MAAM,IAAI,2BAAiB,CAAE,qEAAqE,CAAE,CAAC;AACpI,CAAC","file":"Auth/PersistedRole.js","sourcesContent":["import * as HTTP from \"./../HTTP\";\nimport * as Errors from \"./../Errors\";\nimport * as PersistedDocument from \"./../PersistedDocument\";\nimport * as Pointer from \"./../Pointer\";\nimport * as RetrievalPreferences from \"./../RetrievalPreferences\";\nimport * as Role from \"./Role\";\nimport * as Roles from \"./Roles\";\nimport * as Utils from \"./../Utils\";\nimport IllegalStateError from \"../Errors/IllegalStateError\";\n\nexport interface Class extends PersistedDocument.Class {\n\t_roles:Roles.Class;\n\n\tname: string;\n\tagents?: Pointer.Class;\n\n\tlistAgents( requestOptions?:HTTP.Request.Options ):Promise<[ Pointer.Class[], HTTP.Response.Class ]>;\n\n\tgetAgents( requestOptions?:HTTP.Request.Options ):Promise<[ Pointer.Class[], HTTP.Response.Class ]>;\n\tgetAgents( retrievalPreferencesOrRequestOptions?:RetrievalPreferences.Class, requestOptions?:HTTP.Request.Options ):Promise<[ Pointer.Class[], HTTP.Response.Class ]>;\n}\n\nexport class Factory {\n\n\tstatic hasClassProperties( object:Object ):boolean {\n\t\treturn Utils.hasPropertyDefined( object, \"_roles\" ) \n\t\t\t&& Utils.hasPropertyDefined( object, \"name\" )\n\t\t\t&& Utils.hasFunction( object, \"listAgents\" )\n\t\t\t&& Utils.hasFunction( object, \"getAgents\" )\n\t\t\t;\n\t}\n\n\tstatic is( object:Object ):boolean {\n\t\treturn Factory.hasClassProperties( object )\n\t\t\t&& Role.Factory.is( object );\n\t}\n\n\tstatic decorate<T extends Object>( object:T, roles:Roles.Class ):T & Class {\n\t\tlet role:Class & T = <any> object;\n\t\tif ( Factory.hasClassProperties( role ) ) return role;\n\n\t\tObject.defineProperties( role, {\n\t\t\t\"_roles\": {\n\t\t\t\twritable: false,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: roles,\n\t\t\t},\n\t\t\t\"listAgents\": {\n\t\t\t\twritable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: listAgents,\n\t\t\t},\n\t\t\t\"getAgents\": {\n\t\t\t\twritable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: getAgents,\n\t\t\t},\n\t\t});\n\n\t\treturn role;\n\t}\n\n}\n\n\nfunction listAgents( requestOptions?:HTTP.Request.Options ):Promise<[ Pointer.Class[], HTTP.Response.Class ]> {\n\tcheckState.call( this );\n\treturn (<Class> this)._roles.listAgents( (<Class> this).id, requestOptions );\n}\n\nfunction getAgents( requestOptions?:HTTP.Request.Options ):Promise<[ Pointer.Class[], HTTP.Response.Class ]>;\nfunction getAgents( retrievalPreferencesOrRequestOptions?:RetrievalPreferences.Class, requestOptions?:HTTP.Request.Options ):Promise<[ Pointer.Class[], HTTP.Response.Class ]> {\n\tcheckState.call( this );\n\treturn (<Class> this)._roles.getAgents( (<Class> this).id, retrievalPreferencesOrRequestOptions, requestOptions );\n}\n\nfunction checkState():void {\n\tif (! (<Class> this)._roles ) throw new IllegalStateError( \"The context of the current role, does not support roles management.\" );\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}