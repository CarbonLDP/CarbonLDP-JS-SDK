{"version":3,"sources":["Auth/BasicAuthenticator.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,kCAAyC;AACzC,oCAAsC;AACtC,gCAAkC;AAClC,iDAA4C;AAC5C,iFAAmF;AAGnF;IAA2B,yBAAmF;IAA9G;;IAsBA,CAAC;IAlBA,4BAAY,GAAZ,UAAc,mBAAkD;QAAhE,iBAWC;QAVA,MAAM,CAAC,qBAAa,CAAE;YACrB,EAAE,CAAA,CAAE,mBAAmB,KAAK,IAAK,CAAC;gBAAC,MAAM,IAAI,MAAM,CAAC,oBAAoB,CAAE,yCAAyC,CAAE,CAAC;YAEtH,EAAE,CAAA,CAAE,CAAE,mBAAmB,CAAC,QAAS,CAAC;gBAAC,MAAM,IAAI,MAAM,CAAC,oBAAoB,CAAE,+BAA+B,CAAE,CAAC;YAC9G,EAAE,CAAA,CAAE,CAAE,mBAAmB,CAAC,QAAS,CAAC;gBAAC,MAAM,IAAI,MAAM,CAAC,oBAAoB,CAAE,+BAA+B,CAAE,CAAC;YAE9G,KAAI,CAAC,WAAW,GAAG,IAAI,8BAA8B,CAAC,KAAK,CAAE,mBAAmB,CAAC,QAAQ,EAAE,mBAAmB,CAAC,QAAQ,CAAE,CAAC;YAE1H,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC;QACzB,CAAC,CAAE,CAAC;IACL,CAAC;IAES,8BAAc,GAAxB;QACC,IAAI,aAAa,GAAU,QAAQ,GAAG,KAAK,CAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAE,CAAC;QAC3G,MAAM,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAE,aAAa,CAAE,CAAC;IAC/C,CAAC;IAEF,YAAC;AAAD,CAtBA,AAsBC,CAtB0B,uBAAa,GAsBvC;AAtBY,sBAAK;AAwBlB,eAAgB,GAAU;IACzB,MAAM,CAAC,CAAC,OAAO,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAE,GAAG,CAAE,CAAC,CAAC,CAAC,IAAI,MAAM,CAAE,GAAG,CAAE,CAAC,QAAQ,CAAE,QAAQ,CAAE,CAAC;AAC7F,CAAC;AAED,kBAAe,KAAK,CAAC","file":"BasicAuthenticator.js","sourcesContent":["import { promiseMethod } from \"../Utils\";\nimport * as Errors from \"./../Errors\";\nimport * as HTTP from \"./../HTTP\";\nimport Authenticator from \"./Authenticator\";\nimport * as UsernameAndPasswordCredentials from \"./UsernameAndPasswordCredentials\";\nimport * as UsernameAndPasswordToken from \"./UsernameAndPasswordToken\";\n\nexport class Class extends Authenticator<UsernameAndPasswordToken.Class, UsernameAndPasswordCredentials.Class> {\n\n\tprotected credentials:UsernameAndPasswordCredentials.Class;\n\n\tauthenticate( authenticationToken:UsernameAndPasswordToken.Class ):Promise<UsernameAndPasswordCredentials.Class> {\n\t\treturn promiseMethod( () => {\n\t\t\tif( authenticationToken === null ) throw new Errors.IllegalArgumentError( \"The authenticationToken cannot be null.\" );\n\n\t\t\tif( ! authenticationToken.username ) throw new Errors.IllegalArgumentError( \"The username cannot be empty.\" );\n\t\t\tif( ! authenticationToken.password ) throw new Errors.IllegalArgumentError( \"The password cannot be empty.\" );\n\n\t\t\tthis.credentials = new UsernameAndPasswordCredentials.Class( authenticationToken.username, authenticationToken.password );\n\n\t\t\treturn this.credentials;\n\t\t} );\n\t}\n\n\tprotected getHeaderValue():HTTP.Header.Value {\n\t\tlet authorization:string = \"Basic \" + toB64( this.credentials.username + \":\" + this.credentials.password );\n\t\treturn new HTTP.Header.Value( authorization );\n\t}\n\n}\n\nfunction toB64( str:string ):string {\n\treturn (typeof btoa !== \"undefined\") ? btoa( str ) : new Buffer( str ).toString( \"base64\" );\n}\n\nexport default Class;\n"]}