{"version":3,"sources":["Auth/BasicAuthenticator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,oCAAiD;AACjD,kCAAyC;AACzC,iDAAgD;AAChD,mEAAuD;AAGvD;IAAwC,sCAAuD;IAA/F;;IAqBA,CAAC;IAjBA,yCAAY,GAAZ,UAAc,mBAAoC;QAAlD,iBAWC;QAVA,MAAM,CAAC,qBAAa,CAAE;YACrB,EAAE,CAAA,CAAE,mBAAmB,KAAK,IAAK,CAAC;gBAAC,MAAM,IAAI,6BAAoB,CAAE,yCAAyC,CAAE,CAAC;YAE/G,EAAE,CAAA,CAAE,CAAE,mBAAmB,CAAC,QAAS,CAAC;gBAAC,MAAM,IAAI,6BAAoB,CAAE,+BAA+B,CAAE,CAAC;YACvG,EAAE,CAAA,CAAE,CAAE,mBAAmB,CAAC,QAAS,CAAC;gBAAC,MAAM,IAAI,6BAAoB,CAAE,+BAA+B,CAAE,CAAC;YAEvG,KAAI,CAAC,WAAW,GAAG,IAAI,gBAAgB,CAAC,KAAK,CAAE,mBAAmB,CAAC,QAAQ,EAAE,mBAAmB,CAAC,QAAQ,CAAE,CAAC;YAE5G,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC;QACzB,CAAC,CAAE,CAAC;IACL,CAAC;IAES,2CAAc,GAAxB;QACC,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAE,CAAC;IACxF,CAAC;IAEF,yBAAC;AAAD,CArBA,AAqBC,CArBuC,6BAAa,GAqBpD;AArBY,gDAAkB;AAuB/B,eAAgB,GAAU;IACzB,MAAM,CAAC,CAAC,OAAO,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAE,GAAG,CAAE,CAAC,CAAC,CAAC,IAAI,MAAM,CAAE,GAAG,CAAE,CAAC,QAAQ,CAAE,QAAQ,CAAE,CAAC;AAC7F,CAAC","file":"BasicAuthenticator.js","sourcesContent":["import { IllegalArgumentError } from \"../Errors\";\nimport { promiseMethod } from \"../Utils\";\nimport { Authenticator } from \"./Authenticator\";\nimport * as BasicCredentials from \"./BasicCredentials\";\nimport * as BasicToken from \"./BasicToken\";\n\nexport class BasicAuthenticator extends Authenticator<BasicToken.Class, BasicCredentials.Class> {\n\n\tprotected credentials:BasicCredentials.Class;\n\n\tauthenticate( authenticationToken:BasicToken.Class ):Promise<BasicCredentials.Class> {\n\t\treturn promiseMethod( () => {\n\t\t\tif( authenticationToken === null ) throw new IllegalArgumentError( \"The authenticationToken cannot be null.\" );\n\n\t\t\tif( ! authenticationToken.username ) throw new IllegalArgumentError( \"The username cannot be empty.\" );\n\t\t\tif( ! authenticationToken.password ) throw new IllegalArgumentError( \"The password cannot be empty.\" );\n\n\t\t\tthis.credentials = new BasicCredentials.Class( authenticationToken.username, authenticationToken.password );\n\n\t\t\treturn this.credentials;\n\t\t} );\n\t}\n\n\tprotected getHeaderValue():string {\n\t\treturn \"Basic \" + toB64( this.credentials.username + \":\" + this.credentials.password );\n\t}\n\n}\n\nfunction toB64( str:string ):string {\n\treturn (typeof btoa !== \"undefined\") ? btoa( str ) : new Buffer( str ).toString( \"base64\" );\n}\n"]}