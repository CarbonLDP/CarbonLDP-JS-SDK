{"version":3,"sources":["Auth/BasicAuthenticator.ts"],"names":[],"mappings":";AAAA,IAAY,IAAI,WAAM,WAAW,CAAC,CAAA;AAGlC,IAAY,MAAM,WAAM,aAAa,CAAC,CAAA;AACtC,yCAAqC,4BAA4B,CAAC,CAAA;AAClE,IAAY,8BAA8B,WAAM,kCAAkC,CAAC,CAAA;AAGnF;IAAA;IAmDA,CAAC;IAhDA,+BAAe,GAAf;QACC,MAAM,CAAC,CAAC,CAAE,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAED,4BAAY,GAAZ,UAAc,mBAA4C;QAA1D,iBAWC;QAVA,EAAE,CAAA,CAAE,mBAAmB,KAAK,IAAK,CAAC;YAAC,MAAM,IAAI,MAAM,CAAC,oBAAoB,CAAE,yCAAyC,CAAE,CAAC;QAEtH,MAAM,CAAC,IAAI,OAAO,CAAwC,UAAE,OAA8B,EAAE,MAA4B;YACvH,EAAE,CAAA,CAAE,CAAE,mBAAmB,CAAC,QAAS,CAAC;gBAAC,MAAM,IAAI,MAAM,CAAC,oBAAoB,CAAE,+BAA+B,CAAE,CAAC;YAC9G,EAAE,CAAA,CAAE,CAAE,mBAAmB,CAAC,QAAS,CAAC;gBAAC,MAAM,IAAI,MAAM,CAAC,oBAAoB,CAAE,+BAA+B,CAAE,CAAC;YAE9G,KAAI,CAAC,WAAW,GAAG,IAAI,8BAA8B,CAAC,KAAK,CAAE,mBAAmB,CAAC,QAAQ,EAAE,mBAAmB,CAAC,QAAQ,CAAE,CAAC;YAE1H,OAAO,CAAE,KAAI,CAAC,WAAW,CAAE,CAAC;QAC7B,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,iCAAiB,GAAjB,UAAmB,cAAmC;QACrD,EAAE,CAAA,CAAE,CAAE,IAAI,CAAC,eAAe,EAAG,CAAC;YAAC,MAAM,IAAI,MAAM,CAAC,iBAAiB,CAAE,wCAAwC,CAAE,CAAC;QAE9G,IAAI,OAAO,GAAkC,cAAc,CAAC,OAAO,GAAG,cAAc,CAAC,OAAO,GAAG,cAAc,CAAC,OAAO,GAAG,IAAI,GAAG,EAA6B,CAAC;QAE7J,IAAI,CAAC,4BAA4B,CAAE,OAAO,CAAE,CAAC;QAE7C,MAAM,CAAC,cAAc,CAAC;IACvB,CAAC;IAED,mCAAmB,GAAnB;QACC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IACzB,CAAC;IAED,wBAAQ,GAAR,UAAU,mBAAuC;QAChD,MAAM,CAAC,mBAAmB,YAAY,kCAAwB,CAAC;IAChE,CAAC;IAEO,4CAA4B,GAApC,UAAsC,OAAsC;QAC3E,IAAI,MAAwB,CAAC;QAC7B,EAAE,CAAC,CAAE,OAAO,CAAC,GAAG,CAAE,eAAe,CAAG,CAAC,CAAC,CAAC;YACtC,MAAM,GAAG,OAAO,CAAC,GAAG,CAAE,eAAe,CAAE,CAAC;QACzC,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,MAAM,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACjC,OAAO,CAAC,GAAG,CAAE,eAAe,EAAE,MAAM,CAAE,CAAC;QACxC,CAAC;QACD,IAAI,aAAa,GAAU,QAAQ,GAAG,KAAK,CAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAE,CAAC;QAC3G,MAAM,CAAC,MAAM,CAAC,IAAI,CAAE,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAE,aAAa,CAAE,CAAE,CAAC;QAE7D,MAAM,CAAC,OAAO,CAAC;IAChB,CAAC;IACF,YAAC;AAAD,CAnDA,AAmDC,IAAA;AAnDY,aAAK,QAmDjB,CAAA;AAED,eAAgB,GAAU;IACzB,MAAM,CAAE,CAAE,OAAO,IAAI,KAAK,WAAW,CAAE,GAAG,IAAI,CAAE,GAAG,CAAE,GAAG,IAAI,MAAM,CAAE,GAAG,CAAE,CAAC,QAAQ,CAAE,QAAQ,CAAE,CAAC;AAChG,CAAC;AAED;kBAAe,KAAK,CAAC","file":"Auth/BasicAuthenticator.js","sourcesContent":["import * as HTTP from \"./../HTTP\";\nimport Authenticator from \"./Authenticator\";\nimport AuthenticationToken from \"./AuthenticationToken\";\nimport * as Errors from \"./../Errors\";\nimport UsernameAndPasswordToken from \"./UsernameAndPasswordToken\";\nimport * as UsernameAndPasswordCredentials from \"./UsernameAndPasswordCredentials\";\n\n\nexport class Class implements Authenticator<UsernameAndPasswordToken> {\n\tprivate credentials:UsernameAndPasswordCredentials.Class;\n\n\tisAuthenticated():boolean {\n\t\treturn !! this.credentials;\n\t}\n\n\tauthenticate( authenticationToken:UsernameAndPasswordToken ):Promise<UsernameAndPasswordCredentials.Class>  {\n\t\tif( authenticationToken === null ) throw new Errors.IllegalArgumentError( \"The authenticationToken cannot be null.\" );\n\n\t\treturn new Promise<UsernameAndPasswordCredentials.Class>( ( resolve:( result:any ) => void, reject:( error:any ) => void ) => {\n\t\t\tif( ! authenticationToken.username ) throw new Errors.IllegalArgumentError( \"The username cannot be empty.\" );\n\t\t\tif( ! authenticationToken.password ) throw new Errors.IllegalArgumentError( \"The password cannot be empty.\" );\n\n\t\t\tthis.credentials = new UsernameAndPasswordCredentials.Class( authenticationToken.username, authenticationToken.password );\n\n\t\t\tresolve( this.credentials );\n\t\t});\n\t}\n\n\taddAuthentication( requestOptions:HTTP.Request.Options ):HTTP.Request.Options {\n\t\tif( ! this.isAuthenticated() ) throw new Errors.IllegalStateError( \"The authenticator isn't authenticated.\" );\n\n\t\tlet headers:Map<string, HTTP.Header.Class> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, HTTP.Header.Class>();\n\n\t\tthis.addBasicAuthenticationHeader( headers );\n\n\t\treturn requestOptions;\n\t}\n\n\tclearAuthentication():void {\n\t\tthis.credentials = null;\n\t}\n\n\tsupports( authenticationToken:AuthenticationToken ):boolean {\n\t\treturn authenticationToken instanceof UsernameAndPasswordToken;\n\t}\n\n\tprivate addBasicAuthenticationHeader( headers:Map<string, HTTP.Header.Class> ):Map<string, HTTP.Header.Class> {\n\t\tlet header:HTTP.Header.Class;\n\t\tif ( headers.has( \"authorization\" ) ) {\n\t\t\theader = headers.get( \"authorization\" );\n\t\t} else {\n\t\t\theader = new HTTP.Header.Class();\n\t\t\theaders.set( \"authorization\", header );\n\t\t}\n\t\tlet authorization:string = \"Basic \" + toB64( this.credentials.username + \":\" + this.credentials.password );\n\t\theader.values.push( new HTTP.Header.Value( authorization ) );\n\n\t\treturn headers;\n\t}\n}\n\nfunction toB64( str:string ):string {\n\treturn  ( typeof btoa !== \"undefined\" ) ? btoa( str ) : new Buffer( str ).toString( \"base64\" );\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}