{"version":3,"sources":["Auth/Role.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,wCAAuC;AAEvC,yCAAwC;AACxC,2CAA0C;AAyB1C,IAAM,MAAM,GAAgB;IAC3B,MAAM,EAAE;QACP,KAAK,EAAE,OAAE,CAAC,IAAI;QACd,OAAO,EAAE,SAAG,CAAC,MAAM;KACnB;IACD,aAAa,EAAE;QACd,KAAK,EAAE,OAAE,CAAC,WAAW;QACrB,OAAO,EAAE,SAAG,CAAC,MAAM;KACnB;IACD,QAAQ,EAAE;QACT,KAAK,EAAE,OAAE,CAAC,MAAM;QAChB,OAAO,EAAE,KAAK;KACd;IACD,UAAU,EAAE;QACX,KAAK,EAAE,OAAE,CAAC,KAAK;QACf,OAAO,EAAE,KAAK;QACd,YAAY,EAAE,MAAM;KACpB;IACD,OAAO,EAAE;QACR,KAAK,EAAE,OAAE,CAAC,IAAI;QACd,OAAO,EAAE,KAAK;QACd,YAAY,EAAE,MAAM;KACpB;CACD,CAAC;AAEW,QAAA,IAAI,GAAe;IAC/B,IAAI,EAAE,OAAE,CAAC,IAAI;IACb,MAAM,QAAA;IAEN,EAAE,EAAF,UAAI,KAAS;QACZ,MAAM,CAAC,mBAAQ,CAAC,EAAE,CAAE,KAAK,CAAE;eACvB,KAAK,CAAC,cAAc,CAAE,MAAM,CAAE,CAChC;IACH,CAAC;IAED,MAAM,EAAN,UAAQ,IAAa;QACpB,MAAM,CAAC,YAAI,CAAC,UAAU,cAAO,IAAI,EAAI,CAAC;IACvC,CAAC;IAED,UAAU,EAAV,UAAgC,MAAQ;QACvC,IAAM,IAAI,GAAY,mBAAQ,CAAC,WAAW,CAAE,MAAM,CAAE,CAAC,CAAC;YACrD,MAAM,CAAC,CAAC,CAAC,mBAAQ,CAAC,UAAU,CAAE,MAAM,CAAE,CAAC;QAExC,IAAI,CAAC,OAAO,CAAE,YAAI,CAAC,IAAI,CAAE,CAAC;QAE1B,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;CAED,CAAC","file":"Role.js","sourcesContent":["import { Document } from \"../Document\";\nimport { ObjectSchema } from \"../ObjectSchema\";\nimport { CS } from \"../Vocabularies/CS\";\nimport { XSD } from \"../Vocabularies/XSD\";\n\nexport interface RoleBase {\n\tname:string;\n\tdescription?:string;\n}\n\n\nexport interface Role extends Document {\n\tname:string;\n\tdescription?:string;\n}\n\n\nexport interface RoleFactory {\n\tTYPE:CS[ \"Role\" ];\n\tSCHEMA:ObjectSchema;\n\n\tis( value:any ):value is Role;\n\n\tcreate( data:RoleBase ):Role;\n\n\tcreateFrom<T extends RoleBase>( object:T ):Role;\n}\n\nconst SCHEMA:ObjectSchema = {\n\t\"name\": {\n\t\t\"@id\": CS.name,\n\t\t\"@type\": XSD.string,\n\t},\n\t\"description\": {\n\t\t\"@id\": CS.description,\n\t\t\"@type\": XSD.string,\n\t},\n\t\"parent\": {\n\t\t\"@id\": CS.parent,\n\t\t\"@type\": \"@id\",\n\t},\n\t\"children\": {\n\t\t\"@id\": CS.child,\n\t\t\"@type\": \"@id\",\n\t\t\"@container\": \"@set\",\n\t},\n\t\"users\": {\n\t\t\"@id\": CS.user,\n\t\t\"@type\": \"@id\",\n\t\t\"@container\": \"@set\",\n\t},\n};\n\nexport const Role:RoleFactory = {\n\tTYPE: CS.Role,\n\tSCHEMA,\n\n\tis( value:any ):value is Role {\n\t\treturn Document.is( value )\n\t\t\t&& value.hasOwnProperty( \"name\" )\n\t\t\t;\n\t},\n\n\tcreate( data:RoleBase ):Role {\n\t\treturn Role.createFrom( { ...data } );\n\t},\n\n\tcreateFrom<T extends RoleBase>( object:T ):T & Role {\n\t\tconst role:T & Role = Document.isDecorated( object ) ?\n\t\t\tobject : Document.createFrom( object );\n\n\t\trole.addType( Role.TYPE );\n\n\t\treturn role;\n\t},\n\n};\n"]}