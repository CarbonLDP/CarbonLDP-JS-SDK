{"version":3,"sources":["Auth/ACL/ACL.ts"],"names":[],"mappings":";;;;;;;;;AAEA,2CAA0C;AAI1C,iDAAqC;AACrC,mDAAwC;AAExC,+CAA8C;AA8DjC,QAAA,GAAG,GAAc;IAC7B,IAAI,EAAE,iBAAE,CAAC,iBAAiB;IAC1B,MAAM,EAAE;QACP,SAAS,EAAE;YACV,KAAK,EAAE,iBAAE,CAAC,kBAAkB;YAC5B,OAAO,EAAE,KAAK;YACd,YAAY,EAAE,MAAM;SACpB;QACD,UAAU,EAAE;YACX,KAAK,EAAE,iBAAE,CAAC,QAAQ;YAClB,OAAO,EAAE,KAAK;SACd;QACD,oBAAoB,EAAE;YACrB,KAAK,EAAE,iBAAE,CAAC,gBAAgB;YAC1B,OAAO,EAAE,KAAK;YACd,YAAY,EAAE,MAAM;SACpB;KACD;IAGD,WAAW,EAAX,UAAa,MAAa;QACzB,OAAO,KAAK,CAAC,kBAAkB,CAAE,MAAM,EAAE,UAAU,CAAE;eACjD,MAAM,CAAE,eAAe,CAAE,KAAK,YAAY,CAC5C;IACH,CAAC;IAED,QAAQ,EAAR,UAA4B,MAAQ,EAAE,SAAmB;QACxD,IAAI,WAAG,CAAC,WAAW,CAAE,MAAM,CAAE;YAAG,OAAO,MAAM,CAAC;QAE9C,2BAAY,CAAC,QAAQ,CAAE,MAAM,CAAE,CAAC;QAChC,mBAAQ,CAAC,QAAQ,CAAE,MAAM,EAAE,SAAS,CAAE,CAAC;QAEvC,IAAM,GAAG,GAAW,MAAiB,CAAC;QACtC,MAAM,CAAC,gBAAgB,CAAE,GAAG,EAAE;YAC7B,eAAe,EAAE;gBAChB,QAAQ,EAAE,IAAI;gBACd,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,IAAI;gBAClB,KAAK,EAAE,YAAY;aACnB;SACD,CAAE,CAAC;QAIJ,IAAI,gBAAgB,GAAuB,UAAE,GAAG;YAC/C,IAAI,CAAE,GAAG,CAAC,QAAQ;gBAAG,GAAG,CAAC,eAAe,CAAE,GAAG,CAAE,CAAC;YAChD,OAAO,CAAE,CAAE,GAAG,CAAC,QAAQ,CAAC;QACzB,CAAC,CAAC;QACF,IAAI,GAAG,CAAC,OAAO;YAAG,GAAG,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,CAAE,gBAAgB,CAAE,CAAC;QACvE,IAAI,GAAG,CAAC,kBAAkB;YAAG,GAAG,CAAC,kBAAkB,GAAG,GAAG,CAAC,kBAAkB,CAAC,MAAM,CAAE,gBAAgB,CAAE,CAAC;QAGxG,OAAO,GAAG,CAAC;IACZ,CAAC;CACD,CAAC;AAEF,sBAAiC,OAAwB;IACxD,OAAO,KAAK,CAAC,QAAQ,CAAE,OAAO,CAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAE,OAAO,CAAE,CAAC;AACzE,CAAC","file":"ACL.js","sourcesContent":["import { ModelDecorator } from \"../../core/ModelDecorator\";\nimport { ModelSchema } from \"../../core/ModelSchema\";\nimport { Document } from \"../../Document\";\nimport { Documents } from \"../../Documents\";\nimport { ObjectSchema } from \"../../ObjectSchema\";\nimport { Pointer } from \"../../Pointer\";\nimport * as Utils from \"../../Utils\";\nimport { CS } from \"../../Vocabularies\";\nimport { ACE } from \"../ACE\";\nimport { TransientACL } from \"./TransientACL\";\n\n\nexport interface ACL extends Document {\n\taccessTo:Pointer;\n\tentries?:ACE[];\n\tinheritableEntries?:ACE[];\n\n\t_parsePointer( element:string | Pointer ):Pointer;\n\n\tgrant( subject:string | Pointer, subjectClass:string | Pointer, permission:string | Pointer ):void;\n\n\tgrant( subject:string | Pointer, subjectClass:string | Pointer, permissions:(string | Pointer)[] ):void;\n\n\tgrant( subjects:(string | Pointer)[], subjectClass:string | Pointer, permission:string | Pointer ):void;\n\n\tgrant( subjects:(string | Pointer)[], subjectClass:string | Pointer, permissions:(string | Pointer)[] ):void;\n\n\tdeny( subject:string | Pointer, subjectClass:string | Pointer, permission:string | Pointer ):void;\n\n\tdeny( subject:string | Pointer, subjectClass:string | Pointer, permissions:(string | Pointer)[] ):void;\n\n\tdeny( subjects:(string | Pointer)[], subjectClass:string | Pointer, permission:string | Pointer ):void;\n\n\tdeny( subjects:(string | Pointer)[], subjectClass:string | Pointer, permissions:(string | Pointer)[] ):void;\n\n\tconfigureChildInheritance( granting:boolean, subject:string | Pointer, subjectClass:string | Pointer, permission:string | Pointer ):void;\n\n\tconfigureChildInheritance( granting:boolean, subject:string | Pointer, subjectClass:string | Pointer, permissions:(string | Pointer)[] ):void;\n\n\tconfigureChildInheritance( granting:boolean, subjects:(string | Pointer)[], subjectClass:string | Pointer, permission:string | Pointer ):void;\n\n\tconfigureChildInheritance( granting:boolean, subjects:(string | Pointer)[], subjectClass:string | Pointer, permissions:(string | Pointer)[] ):void;\n\n\tgrants( subject:string | Pointer, permission:string | Pointer ):boolean;\n\n\tdenies( subject:string | Pointer, permission:string | Pointer ):boolean;\n\n\tgetChildInheritance( subject:string | Pointer, permissions:string | Pointer ):boolean;\n\n\tremove( subject:string | Pointer, permission:string | Pointer ):void;\n\n\tremove( subject:string | Pointer, permissions:(string | Pointer)[] ):void;\n\n\tremoveChildInheritance( subject:string | Pointer, permission:string | Pointer ):void;\n\n\tremoveChildInheritance( subject:string | Pointer, permissions:(string | Pointer)[] ):void;\n}\n\n\nexport interface ACLFactory extends ModelDecorator<ACL>, ModelSchema {\n\tTYPE:CS[ \"AccessControlList\" ];\n\tSCHEMA:ObjectSchema;\n\n\n\tisDecorated( object:object ):object is ACL;\n\n\n\tdecorate<T extends object>( object:T, documents:Documents ):T & ACL;\n}\n\n\nexport const ACL:ACLFactory = {\n\tTYPE: CS.AccessControlList,\n\tSCHEMA: {\n\t\t\"entries\": {\n\t\t\t\"@id\": CS.accessControlEntry,\n\t\t\t\"@type\": \"@id\",\n\t\t\t\"@container\": \"@set\",\n\t\t},\n\t\t\"accessTo\": {\n\t\t\t\"@id\": CS.accessTo,\n\t\t\t\"@type\": \"@id\",\n\t\t},\n\t\t\"inheritableEntries\": {\n\t\t\t\"@id\": CS.inheritableEntry,\n\t\t\t\"@type\": \"@id\",\n\t\t\t\"@container\": \"@set\",\n\t\t},\n\t},\n\n\n\tisDecorated( object:object ):object is ACL {\n\t\treturn Utils.hasPropertyDefined( object, \"accessTo\" )\n\t\t\t&& object[ \"_parsePointer\" ] === parsePointer\n\t\t\t;\n\t},\n\n\tdecorate<T extends object>( object:T, documents:Documents ):T & ACL {\n\t\tif( ACL.isDecorated( object ) ) return object;\n\n\t\tTransientACL.decorate( object );\n\t\tDocument.decorate( object, documents );\n\n\t\tconst acl:T & ACL = object as T & ACL;\n\t\tObject.defineProperties( acl, {\n\t\t\t\"_parsePointer\": {\n\t\t\t\twritable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: parsePointer,\n\t\t\t},\n\t\t} );\n\n\t\t// Check consistency in ACE\n\t\t// TODO: Possible removal when resolved: CarbonLDP/public-carbonldp-platform#2\n\t\tlet removeInvalidACE:( ace:ACE ) => void = ( ace ) => {\n\t\t\tif( ! ace.subjects ) acl._removeFragment( ace );\n\t\t\treturn ! ! ace.subjects;\n\t\t};\n\t\tif( acl.entries ) acl.entries = acl.entries.filter( removeInvalidACE );\n\t\tif( acl.inheritableEntries ) acl.inheritableEntries = acl.inheritableEntries.filter( removeInvalidACE );\n\n\n\t\treturn acl;\n\t},\n};\n\nfunction parsePointer( this:ACL, element:string | Pointer ):Pointer {\n\treturn Utils.isObject( element ) ? element : this.getPointer( element );\n}\n"]}