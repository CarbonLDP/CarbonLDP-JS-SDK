{"version":3,"sources":["Auth/TokenCredentials.ts"],"names":[],"mappings":";;AAAA,8BAA0C;AAE1C,kCAGkB;AAClB,yCAAwC;AACxC,2CAA0C;AAY7B,QAAA,oBAAoB,GAA+B;IAC/D,EAAE,EAAF,UAAI,KAAS;QACZ,MAAM,CAAC,gBAAQ,CAAE,KAAK,CAAE;eACpB,KAAK,CAAC,cAAc,CAAE,OAAO,CAAE;eAC/B,KAAK,CAAC,cAAc,CAAE,WAAW,CAAE,CACrC;IACH,CAAC;CACD,CAAC;AAkBF,IAAM,MAAM,GAAgB;IAC3B,OAAO,EAAE;QACR,KAAK,EAAE,OAAE,CAAC,KAAK;QACf,OAAO,EAAE,SAAG,CAAC,MAAM;KACnB;IACD,WAAW,EAAE;QACZ,KAAK,EAAE,OAAE,CAAC,SAAS;QACnB,OAAO,EAAE,SAAG,CAAC,QAAQ;KACrB;CACD,CAAC;AAEW,QAAA,gBAAgB,GAA2B;IACvD,IAAI,EAAE,OAAE,CAAC,gBAAgB;IACzB,MAAM,QAAA;IAEN,EAAE,EAAF,UAAI,KAAS;QACZ,MAAM,CAAC,sBAAgB,CAAC,EAAE,CAAE,KAAK,CAAE;eAC/B,KAAK,CAAC,OAAO,CAAE,wBAAgB,CAAC,IAAI,CAAE,CACxC;IACH,CAAC;IAED,UAAU,EAAV,UAA4C,MAAQ;QACnD,IAAM,WAAW,GAAwB,sBAAgB,CAAC,UAAU,CAAE,MAAM,CAAE,CAAC;QAC/E,WAAW,CAAC,OAAO,CAAE,wBAAgB,CAAC,IAAI,CAAE,CAAC;QAE7C,EAAE,CAAA,CAAE,gBAAQ,CAAE,WAAW,CAAC,SAAS,CAAG,CAAC;YACtC,WAAW,CAAC,SAAS,GAAG,IAAI,IAAI,CAAE,WAAW,CAAC,SAAS,CAAE,CAAC;QAE3D,MAAM,CAAC,WAAmC,CAAC;IAC5C,CAAC;CACD,CAAC","file":"TokenCredentials.js","sourcesContent":["import { VolatileResource } from \"../LDP\";\nimport { ObjectSchema } from \"../ObjectSchema\";\nimport {\n\tisObject,\n\tisString,\n} from \"../Utils\";\nimport { CS } from \"../Vocabularies/CS\";\nimport { XSD } from \"../Vocabularies/XSD\";\n\n\nexport interface TokenCredentialsBase {\n\ttoken:string;\n\texpiresOn:string | Date;\n}\n\nexport interface TokenCredentialsBaseFactory {\n\tis( value:any ):value is TokenCredentialsBase;\n}\n\nexport const TokenCredentialsBase:TokenCredentialsBaseFactory = {\n\tis( value:any ):value is TokenCredentialsBase {\n\t\treturn isObject( value )\n\t\t\t&& value.hasOwnProperty( \"token\" )\n\t\t\t&& value.hasOwnProperty( \"expiresOn\" )\n\t\t\t;\n\t},\n};\n\n\nexport interface TokenCredentials extends VolatileResource {\n\ttoken:string;\n\texpiresOn:Date;\n}\n\n\nexport interface TokenCredentialsFactory {\n\tTYPE:CS[ \"TokenCredentials\" ];\n\tSCHEMA:ObjectSchema;\n\n\tis( value:any ):value is TokenCredentials;\n\n\tcreateFrom<T extends TokenCredentialsBase>( object:T ):T & TokenCredentials;\n}\n\nconst SCHEMA:ObjectSchema = {\n\t\"token\": {\n\t\t\"@id\": CS.token,\n\t\t\"@type\": XSD.string,\n\t},\n\t\"expiresOn\": {\n\t\t\"@id\": CS.expiresOn,\n\t\t\"@type\": XSD.dateTime,\n\t},\n};\n\nexport const TokenCredentials:TokenCredentialsFactory = {\n\tTYPE: CS.TokenCredentials,\n\tSCHEMA,\n\n\tis( value:any ):value is TokenCredentials {\n\t\treturn VolatileResource.is( value )\n\t\t\t&& value.hasType( TokenCredentials.TYPE )\n\t\t\t;\n\t},\n\n\tcreateFrom<T extends TokenCredentialsBase>( object:T ):T & TokenCredentials {\n\t\tconst credentials:T & VolatileResource = VolatileResource.createFrom( object );\n\t\tcredentials.addType( TokenCredentials.TYPE );\n\n\t\tif( isString( credentials.expiresOn ) )\n\t\t\tcredentials.expiresOn = new Date( credentials.expiresOn );\n\n\t\treturn credentials as T & TokenCredentials;\n\t},\n};\n"]}