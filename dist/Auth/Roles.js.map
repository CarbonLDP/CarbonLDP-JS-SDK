{"version":3,"sources":["Auth/Roles.ts"],"names":[],"mappings":"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","file":"Auth/Roles.js","sourcesContent":["import Context from \"./../Context\";\nimport * as Errors from \"./../Errors\";\nimport * as Pointer from \"./../Pointer\";\nimport * as HTTP from \"./../HTTP\";\nimport * as Role from \"./Role\";\nimport * as PersistedRole from \"./PersistedRole\";\nimport * as RetrievalPreferences from \"./../RetrievalPreferences\";\nimport * as SPARQL from \"./../SPARQL\";\nimport * as URI from \"./../RDF/URI\";\nimport * as Utils from \"./../Utils\";\n\nexport abstract class Class {\n\tprivate context:Context;\n\n\tconstructor( context:Context ) {\n\t\tthis.context = context;\n\t}\n\n\tcreateChild( parentRole:string | Pointer.Class, role:Role.Class, requestOptions?:HTTP.Request.Options ):Promise<[ Pointer.Class, [ HTTP.Response.Class, HTTP.Response.Class ] ]>;\n\tcreateChild( parentRole:string | Pointer.Class, role:Role.Class, slug?:string, requestOptions?:HTTP.Request.Options ):Promise<[ Pointer.Class, [ HTTP.Response.Class, HTTP.Response.Class ] ]>;\n\tcreateChild( parentRole:string | Pointer.Class, role:Role.Class, slugOrRequestOptions?:any, requestOptions?:HTTP.Request.Options ):Promise<[ Pointer.Class, [ HTTP.Response.Class, HTTP.Response.Class ] ]> {\n\t\tlet parentURI:string = Utils.isString( parentRole ) ? <string> parentRole : ( <Pointer.Class> parentRole).id;\n\t\tlet slug:string = Utils.isString( slugOrRequestOptions ) ? slugOrRequestOptions : null;\n\t\trequestOptions = HTTP.Request.Util.isOptions( slugOrRequestOptions ) ? slugOrRequestOptions : requestOptions;\n\n\t\tlet containerURI:string;\n\t\tlet rolePointer:Pointer.Class;\n\t\tlet responseCreated:HTTP.Response.Class;\n\t\treturn this.resolveURI( \"\" ).then( ( uri:string ) => {\n\t\t\tcontainerURI = uri;\n\n\t\t\tparentURI =  URI.Util.resolve( containerURI, parentURI );\n\t\t\tif ( ! URI.Util.isBaseOf( containerURI, parentURI ) ) throw new Errors.IllegalArgumentError( \"The parent role provided is not a valid role of the current context.\" );\n\t\t\treturn this.context.documents.exists( parentURI );\n\n\t\t}).then( ( [ exists, response ]:[ boolean, HTTP.Response.Class ] ) => {\n\t\t\tif ( ! exists ) throw new Errors.IllegalArgumentError( \"The parent role provided does not exist.\" );\n\t\t\treturn slug ? this.context.documents.createChild( containerURI, slug, role, requestOptions ) : this.context.documents.createChild( containerURI, role, requestOptions );\n\n\t\t}).then( ( [ newRole, response ]:[ Pointer.Class, HTTP.Response.Class] ) => {\n\t\t\trolePointer = newRole;\n\t\t\tresponseCreated = response;\n\t\t\treturn this.context.documents.addMember( parentURI, newRole );\n\n\t\t}).then( ( response ) => {\n\t\t\treturn [ rolePointer, [ responseCreated, response ] ];\n\t\t});\n\t}\n\n\tget( roleURI:string, requestOptions?:HTTP.Request.Options ):Promise<[ PersistedRole.Class, HTTP.Response.Class ]> {\n\t\treturn this.resolveURI( roleURI ).then( ( uri:string ) => {\n\t\t\treturn this.context.documents.get( uri, requestOptions );\n\t\t});\n\t}\n\n\tlistAgents( roleURI:string, requestOptions?:HTTP.Request.Options ):Promise<[ Pointer.Class[], HTTP.Response.Class ]> {\n\t\treturn this.getAgentsAccessPoint( roleURI).then( ( agentsAccessPoint:Pointer.Class ) => {\n\t\t\treturn this.context.documents.listMembers( agentsAccessPoint.id, requestOptions );\n\t\t});\n\t}\n\n\tgetAgents( roleURI:string, requestOptions?:HTTP.Request.Options ):Promise<[ Pointer.Class[], HTTP.Response.Class ]>;\n\tgetAgents( roleURI:string, retrievalPreferences?:RetrievalPreferences.Class, requestOptions?:HTTP.Request.Options ):Promise<[ Pointer.Class[], HTTP.Response.Class ]>;\n\tgetAgents( roleURI:string, retrievalPreferencesOrRequestOptions?:RetrievalPreferences.Class, requestOptions?:HTTP.Request.Options ):Promise<[ Pointer.Class[], HTTP.Response.Class ]> {\n\t\treturn this.getAgentsAccessPoint( roleURI).then( ( agentsAccessPoint:Pointer.Class ) => {\n\t\t\treturn this.context.documents.getMembers( agentsAccessPoint.id, retrievalPreferencesOrRequestOptions, requestOptions );\n\t\t}); \n\t}\n\n\taddAgent( roleURI:string, agent:Pointer.Class | string, requestOptions?:HTTP.Request.Options ):Promise<HTTP.Response.Class> {\n\t\treturn this.addAgents( roleURI, [ agent ], requestOptions );\n\t}\n\n\taddAgents( roleURI:string, agents:(Pointer.Class | string)[], requestOptions?:HTTP.Request.Options ):Promise<HTTP.Response.Class> {\n\t\treturn this.getAgentsAccessPoint( roleURI).then( ( agentsAccessPoint:Pointer.Class ) => {\n\t\t\treturn this.context.documents.addMembers( agentsAccessPoint.id, agents, requestOptions );\n\t\t});\n\t}\n\n\tprivate resolveURI( agentURI:string ):Promise<string> {\n\t\treturn new Promise<string>( ( resolve:( uri:string ) => void ) => {\n\t\t\tlet containerURI:string = this.context.resolve( this.getContainerURI() );\n\t\t\tlet uri:string = URI.Util.resolve( containerURI, agentURI );\n\n\t\t\tif ( ! URI.Util.isBaseOf( containerURI, uri ) ) throw new Errors.IllegalArgumentError( \"The URI provided is not a valid role of the current context.\" );\n\n\t\t\tresolve( uri );\n\t\t});\n\t}\n\n\tprivate getAgentsAccessPoint( roleURI:string ):Promise<Pointer.Class> {\n\t\treturn this.resolveURI( roleURI ).then( ( uri:string ) => {\n\t\t\treturn this.context.documents.executeSELECTQuery( uri, ` select distinct ?agentsAccessPoint where {\n\t\t\t\t<${ uri }> <https://carbonldp.com/ns/v1/platform#accessPoint> ?agentsAccessPoint .\n\t\t\t\t?agentsAccessPoint <http://www.w3.org/ns/ldp#hasMemberRelation> <https://carbonldp.com/ns/v1/security#agent> .\n\t\t\t}` );\n\t\t}).then( ( [ selectResults, response ]:[ SPARQL.SELECTResults.Class, HTTP.Response.Class ] ) => {\n\t\t\treturn <Pointer.Class> selectResults.bindings[ 0 ][ \"agentsAccessPoint\" ];\n\t\t});\n\t}\n\n\tprivate getContainerURI():string {\n\t\tif ( ! this.context.hasSetting( \"platform.roles.container\" ) ) throw new Errors.IllegalStateError( \"The roles container setting hasn't been declared.\" );\n\t\treturn this.context.getSetting( \"platform.roles.container\" );\n\t}\n\n}\n\nexport default Class;\n"],"sourceRoot":"/source/"}