{"version":3,"sources":["Auth/Roles.ts"],"names":[],"mappings":"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","file":"Roles.js","sourcesContent":["import Context from \"./../Context\";\nimport * as Errors from \"./../Errors\";\nimport * as HTTP from \"./../HTTP\";\nimport * as PersistedDocument from \"./../PersistedDocument\";\nimport * as PersistedProtectedDocument from \"./../PersistedProtectedDocument\";\nimport * as Pointer from \"./../Pointer\";\nimport * as URI from \"./../RDF/URI\";\nimport * as RetrievalPreferences from \"./../RetrievalPreferences\";\nimport * as SPARQL from \"./../SPARQL\";\nimport * as Utils from \"./../Utils\";\nimport * as PersistedRole from \"./PersistedRole\";\nimport * as PersistedUser from \"./PersistedUser\";\nimport * as Role from \"./Role\";\n\nexport class Class {\n\tprivate context:Context;\n\n\tconstructor( context:Context ) {\n\t\tthis.context = context;\n\t}\n\n\t// TODO: Requests must return all the responses made\n\tcreateChild<T extends Role.Class>( parentRole:string | Pointer.Class, role:T, requestOptions?:HTTP.Request.Options ):Promise<[ T & PersistedRole.Class, HTTP.Response.Class ]>;\n\tcreateChild<T extends Role.Class>( parentRole:string | Pointer.Class, role:T, slug?:string, requestOptions?:HTTP.Request.Options ):Promise<[ T & PersistedRole.Class, HTTP.Response.Class ]>;\n\tcreateChild<T extends Role.Class>( parentRole:string | Pointer.Class, role:T, slugOrRequestOptions?:any, requestOptions?:HTTP.Request.Options ):Promise<[ T & PersistedRole.Class, HTTP.Response.Class ]> {\n\t\tlet parentURI:string = Utils.isString( parentRole ) ? <string> parentRole : ( <Pointer.Class> parentRole).id;\n\t\tlet slug:string = Utils.isString( slugOrRequestOptions ) ? slugOrRequestOptions : null;\n\t\trequestOptions = HTTP.Request.Util.isOptions( slugOrRequestOptions ) ? slugOrRequestOptions : requestOptions;\n\n\t\tlet containerURI:string;\n\t\tlet persistedRole:T & PersistedRole.Class;\n\t\tlet responseCreated:HTTP.Response.Class;\n\t\treturn this.resolveURI( \"\" ).then( ( uri:string ) => {\n\t\t\tcontainerURI = uri;\n\n\t\t\tparentURI = URI.Util.resolve( containerURI, parentURI );\n\t\t\tif( ! URI.Util.isBaseOf( containerURI, parentURI ) ) throw new Errors.IllegalArgumentError( \"The parent role provided is not a valid role of the current context.\" );\n\t\t\treturn this.context.documents.exists( parentURI );\n\n\t\t} ).then( ( [ exists, response ]:[ boolean, HTTP.Response.Class ] ) => {\n\t\t\tif( ! exists ) throw new Errors.IllegalArgumentError( \"The parent role provided does not exist.\" );\n\t\t\treturn this.context.documents.createChild<T>( containerURI, role, slug, requestOptions );\n\n\t\t} ).then( ( [ newRole, response ]:[ T & PersistedDocument.Class, HTTP.Response.Class] ) => {\n\t\t\tresponseCreated = response;\n\t\t\tpersistedRole = PersistedRole.Factory.decorate( newRole, this );\n\t\t\treturn this.context.documents.addMember( parentURI, newRole );\n\n\t\t} ).then( ( response ) => {\n\t\t\treturn [ persistedRole, responseCreated ];\n\t\t} );\n\t}\n\n\tget<T>( roleURI:string, requestOptions?:HTTP.Request.Options ):Promise<[ T & PersistedRole.Class, HTTP.Response.Class ]> {\n\t\treturn this.resolveURI( roleURI ).then( ( uri:string ) => {\n\t\t\treturn this.context.documents.get<T & PersistedRole.Class>( uri, requestOptions );\n\t\t} );\n\t}\n\n\tlistUsers( roleURI:string, requestOptions?:HTTP.Request.Options ):Promise<[ PersistedProtectedDocument.Class[], HTTP.Response.Class ]> {\n\t\treturn this.getUsersAccessPoint( roleURI ).then( ( usersAccessPoint:Pointer.Class ) => {\n\t\t\treturn this.context.documents.listMembers( usersAccessPoint.id, requestOptions );\n\t\t} ).then( ( [ users, response ]:[ PersistedDocument.Class[], HTTP.Response.Class ] ) => {\n\t\t\treturn [ users.map( user => PersistedProtectedDocument.Factory.decorate( user ) ), response ];\n\t\t} );\n\t}\n\n\tgetUsers<T>( roleURI:string, requestOptions?:HTTP.Request.Options ):Promise<[ (T & PersistedUser.Class)[], HTTP.Response.Class ]>;\n\tgetUsers<T>( roleURI:string, retrievalPreferences?:RetrievalPreferences.Class, requestOptions?:HTTP.Request.Options ):Promise<[ (T & PersistedUser.Class)[], HTTP.Response.Class ]>;\n\tgetUsers<T>( roleURI:string, retrievalPreferencesOrRequestOptions?:RetrievalPreferences.Class, requestOptions?:HTTP.Request.Options ):Promise<[ (T & PersistedUser.Class)[], HTTP.Response.Class ]> {\n\t\treturn this.getUsersAccessPoint( roleURI ).then( ( usersAccessPoint:Pointer.Class ) => {\n\t\t\treturn this.context.documents.getMembers<T>( usersAccessPoint.id, retrievalPreferencesOrRequestOptions, requestOptions );\n\t\t} );\n\t}\n\n\taddUser( roleURI:string, user:Pointer.Class | string, requestOptions?:HTTP.Request.Options ):Promise<HTTP.Response.Class> {\n\t\treturn this.addUsers( roleURI, [ user ], requestOptions );\n\t}\n\n\taddUsers( roleURI:string, users:(Pointer.Class | string)[], requestOptions?:HTTP.Request.Options ):Promise<HTTP.Response.Class> {\n\t\treturn this.getUsersAccessPoint( roleURI ).then( ( usersAccessPoint:Pointer.Class ) => {\n\t\t\treturn this.context.documents.addMembers( usersAccessPoint.id, users, requestOptions );\n\t\t} );\n\t}\n\n\tremoveUser( roleURI:string, user:Pointer.Class | string, requestOptions?:HTTP.Request.Options ):Promise<HTTP.Response.Class> {\n\t\treturn this.removeUsers( roleURI, [ user ], requestOptions );\n\t}\n\n\tremoveUsers( roleURI:string, users:(Pointer.Class | string)[], requestOptions?:HTTP.Request.Options ):Promise<HTTP.Response.Class> {\n\t\treturn this.getUsersAccessPoint( roleURI ).then( ( usersAccessPoint:Pointer.Class ) => {\n\t\t\treturn this.context.documents.removeMembers( usersAccessPoint.id, users, requestOptions );\n\t\t} );\n\t}\n\n\tprivate resolveURI( userURI:string ):Promise<string> {\n\t\treturn new Promise<string>( ( resolve:( uri:string ) => void ) => {\n\t\t\tlet containerURI:string = this.context.resolve( this.getContainerURI() );\n\t\t\tlet uri:string = URI.Util.resolve( containerURI, userURI );\n\n\t\t\tif( ! URI.Util.isBaseOf( containerURI, uri ) ) throw new Errors.IllegalArgumentError( \"The URI provided is not a valid role of the current context.\" );\n\n\t\t\tresolve( uri );\n\t\t} );\n\t}\n\n\t// TODO: Optimize\n\tprivate getUsersAccessPoint( roleURI:string ):Promise<Pointer.Class> {\n\t\treturn this.resolveURI( roleURI ).then( ( uri:string ) => {\n\t\t\treturn this.context.documents.executeSELECTQuery( uri, `select distinct ?usersAccessPoint where {\n\t\t\t\t<${ uri }> <https://carbonldp.com/ns/v1/platform#accessPoint> ?usersAccessPoint .\n\t\t\t\t?usersAccessPoint <http://www.w3.org/ns/ldp#hasMemberRelation> <https://carbonldp.com/ns/v1/security#user> .\n\t\t\t}` );\n\t\t} ).then( ( [ selectResults, response ]:[ SPARQL.SELECTResults.Class, HTTP.Response.Class ] ) => {\n\t\t\treturn <Pointer.Class> selectResults.bindings[ 0 ][ \"usersAccessPoint\" ];\n\t\t} );\n\t}\n\n\tprivate getContainerURI():string {\n\t\tif( ! this.context.hasSetting( \"system.roles.container\" ) ) throw new Errors.IllegalStateError( \"The roles container setting hasn't been declared.\" );\n\t\treturn this.context.getSetting( \"system.roles.container\" );\n\t}\n\n}\n\nexport default Class;\n"]}