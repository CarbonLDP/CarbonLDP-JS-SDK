{"version":3,"sources":["Auth/Roles.ts"],"names":[],"mappings":"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","file":"Roles.js","sourcesContent":["import { Context } from \"../Context\";\nimport * as Errors from \"../Errors\";\nimport {\n\tRequestOptions,\n\tRequestUtils,\n} from \"../HTTP/Request\";\nimport { Response } from \"../HTTP/Response\";\nimport { PersistedDocument } from \"../PersistedDocument\";\nimport { Pointer } from \"../Pointer\";\nimport { URI } from \"../RDF/URI\";\nimport * as SPARQL from \"./../SPARQL\";\nimport * as Utils from \"./../Utils\";\nimport * as PersistedRole from \"./PersistedRole\";\nimport * as PersistedUser from \"./PersistedUser\";\nimport * as Role from \"./Role\";\n\nexport class Class {\n\tprivate context:Context;\n\n\tconstructor( context:Context ) {\n\t\tthis.context = context;\n\t}\n\n\t// TODO: Requests must return all the responses made\n\tcreateChild<T extends object>( parentRole:string | Pointer, role:T & Role.Class, requestOptions?:RequestOptions ):Promise<[ T & PersistedRole.Class, Response ]>;\n\tcreateChild<T extends object>( parentRole:string | Pointer, role:T & Role.Class, slug?:string, requestOptions?:RequestOptions ):Promise<[ T & PersistedRole.Class, Response ]>;\n\tcreateChild<T extends object>( parentRole:string | Pointer, role:T & Role.Class, slugOrRequestOptions?:any, requestOptions?:RequestOptions ):Promise<[ T & PersistedRole.Class, Response ]> {\n\t\tlet parentURI:string = Utils.isString( parentRole ) ? parentRole : parentRole.id;\n\t\tlet slug:string = Utils.isString( slugOrRequestOptions ) ? slugOrRequestOptions : null;\n\t\trequestOptions = RequestUtils.isOptions( slugOrRequestOptions ) ? slugOrRequestOptions : requestOptions;\n\n\t\tlet containerURI:string;\n\t\tlet persistedRole:T & PersistedRole.Class;\n\t\tlet responseCreated:Response;\n\t\treturn Utils.promiseMethod( () => {\n\t\t\tcontainerURI = this.getContainerURI();\n\n\t\t\tparentURI = URI.resolve( containerURI, parentURI );\n\t\t\tif( ! URI.isBaseOf( containerURI, parentURI ) ) throw new Errors.IllegalArgumentError( \"The parent role provided is not a valid role.\" );\n\t\t\treturn this.context.documents.exists( parentURI );\n\n\t\t} ).then( ( [ exists, response ]:[ boolean, Response ] ) => {\n\t\t\tif( ! exists ) throw new Errors.IllegalArgumentError( \"The parent role provided doesn't exist.\" );\n\t\t\treturn this.context.documents.createChild<T>( containerURI, role, slug, requestOptions );\n\n\t\t} ).then( ( [ newRole, response ]:[ T & PersistedDocument, Response ] ) => {\n\t\t\tresponseCreated = response;\n\t\t\tpersistedRole = PersistedRole.Factory.decorate( newRole, this.context.documents );\n\t\t\treturn this.context.documents.addMember( parentURI, newRole );\n\n\t\t} ).then<[ T & PersistedRole.Class, Response ]>( ( response ) => {\n\t\t\treturn [ persistedRole, responseCreated ];\n\t\t} );\n\t}\n\n\tget<T>( roleURI:string, requestOptions?:RequestOptions ):Promise<[ T & PersistedRole.Class, Response ]> {\n\t\treturn Utils.promiseMethod( () => {\n\t\t\treturn this.context.documents.get<T & PersistedRole.Class>( this.resolveURI( roleURI ), requestOptions );\n\t\t} );\n\t}\n\n\tgetUsers<T>( roleURI:string, requestOptions?:RequestOptions ):Promise<[ (T & PersistedUser.Class)[], Response ]>;\n\tgetUsers<T>( roleURI:string, retrievalPreferencesOrRequestOptions?:any, requestOptions?:RequestOptions ):Promise<[ (T & PersistedUser.Class)[], Response ]> {\n\t\t// TODO: Implement in milestone:Security\n\t\tthrow new Errors.NotImplementedError( \"To be re-implemented in milestone:Security\" );\n\t}\n\n\taddUser( roleURI:string, user:Pointer | string, requestOptions?:RequestOptions ):Promise<Response> {\n\t\treturn this.addUsers( roleURI, [ user ], requestOptions );\n\t}\n\n\taddUsers( roleURI:string, users:(Pointer | string)[], requestOptions?:RequestOptions ):Promise<Response> {\n\t\treturn this.getUsersAccessPoint( roleURI ).then( ( accessPoint:Pointer ) => {\n\t\t\treturn this.context.documents.addMembers( accessPoint.id, users, requestOptions );\n\t\t} );\n\t}\n\n\tremoveUser( roleURI:string, user:Pointer | string, requestOptions?:RequestOptions ):Promise<Response> {\n\t\treturn this.removeUsers( roleURI, [ user ], requestOptions );\n\t}\n\n\tremoveUsers( roleURI:string, users:(Pointer | string)[], requestOptions?:RequestOptions ):Promise<Response> {\n\t\treturn this.getUsersAccessPoint( roleURI ).then( ( accessPoint:Pointer ) => {\n\t\t\treturn this.context.documents.removeMembers( accessPoint.id, users, requestOptions );\n\t\t} );\n\t}\n\n\tprivate resolveURI( relativeURI:string ):string {\n\t\tconst rolesContainer:string = this.getContainerURI();\n\t\tconst absoluteRoleURI:string = URI.resolve( rolesContainer, relativeURI );\n\t\tif( ! absoluteRoleURI.startsWith( rolesContainer ) ) throw new Errors.IllegalArgumentError( `The provided URI \"${ relativeURI }\" isn't a valid Carbon LDP role.` );\n\n\t\treturn absoluteRoleURI;\n\t}\n\n\t// TODO: Optimize\n\tprivate getUsersAccessPoint( roleURI:string ):Promise<Pointer> {\n\t\ttype AccessPointResult = { accessPoint:Pointer };\n\n\t\treturn Utils.promiseMethod( () => {\n\t\t\tconst uri:string = this.resolveURI( roleURI );\n\t\t\treturn this.context.documents.executeSELECTQuery( uri, `PREFIX:<https://carbonldp.com/ns/v1/>SELECT DISTINCT?accessPoint{<${ uri }>:platform#accessPoint?accessPoint.?accessPoint<http://www.w3.org/ns/ldp#hasMemberRelation>:security#user}` );\n\t\t} ).then( ( [ selectResults, response ]:[ SPARQL.SPARQLSelectResults<AccessPointResult>, Response ] ) => {\n\t\t\treturn selectResults.bindings[ 0 ].accessPoint;\n\t\t} );\n\t}\n\n\tprivate getContainerURI():string {\n\t\treturn this.context._resolvePath( \"system.roles\" );\n\t}\n\n}\n\nexport default Class;\n"]}