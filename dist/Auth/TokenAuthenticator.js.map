{"version":3,"sources":["Auth/TokenAuthenticator.ts"],"names":[],"mappings":"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","file":"TokenAuthenticator.js","sourcesContent":["import Context from \"./../Context\";\nimport * as Errors from \"./../Errors\";\nimport * as FreeResources from \"./../FreeResources\";\nimport * as HTTP from \"./../HTTP\";\nimport * as JSONLD from \"./../JSONLD\";\nimport * as LDP from \"./../LDP\";\nimport * as NS from \"./../NS\";\nimport * as PersistedDocument from \"./../PersistedDocument\";\nimport * as RDF from \"./../RDF\";\nimport * as Resource from \"./../Resource\";\nimport Authenticator from \"./Authenticator\";\nimport BasicAuthenticator from \"./BasicAuthenticator\";\nimport UsernameAndPasswordToken from \"./UsernameAndPasswordToken\";\nimport * as Token from \"./Token\";\nimport * as Utils from \"./../Utils\";\n\nexport class Class implements Authenticator<UsernameAndPasswordToken> {\n\tprivate static TOKEN_CONTAINER:string = \"auth-tokens/\";\n\n\tprivate context:Context;\n\tprivate basicAuthenticator:BasicAuthenticator;\n\tprivate _credentials:Token.Class;\n\n\tconstructor( context:Context ) {\n\t\tif( context === null ) throw new Errors.IllegalArgumentError( \"context cannot be null\" );\n\n\t\tthis.context = context;\n\t\tthis.basicAuthenticator = new BasicAuthenticator();\n\t}\n\n\tisAuthenticated():boolean {\n\t\treturn ! ! this._credentials && this._credentials.expirationTime > new Date();\n\t}\n\n\tauthenticate( authenticationToken:UsernameAndPasswordToken ):Promise<Token.Class>;\n\tauthenticate( credentials:Token.Class ):Promise<Token.Class>;\n\tauthenticate( authenticationOrCredentials:any ):Promise<Token.Class> {\n\t\tif( authenticationOrCredentials instanceof UsernameAndPasswordToken ) return this.basicAuthenticator.authenticate( authenticationOrCredentials ).then( () => {\n\t\t\treturn this.createToken();\n\t\t} ).then( ( [ token, response ]:[ Token.Class, HTTP.Response.Class ] ):Token.Class => {\n\t\t\tthis.basicAuthenticator.clearAuthentication();\n\t\t\tthis._credentials = token;\n\t\t\treturn token;\n\t\t} );\n\n\t\tlet credentials:Token.Class = <Token.Class> authenticationOrCredentials;\n\t\tif( Utils.isString( credentials.expirationTime ) ) authenticationOrCredentials.expirationTime = new Date( <any> credentials.expirationTime );\n\t\tif( credentials.expirationTime <= new Date() ) return Promise.reject<any>( new Errors.IllegalArgumentError( \"The token provided in not valid.\" ) );\n\n\t\tthis._credentials = credentials;\n\t\treturn Promise.resolve( credentials );\n\t}\n\n\taddAuthentication( requestOptions:HTTP.Request.Options ):HTTP.Request.Options {\n\t\tlet headers:Map<string, HTTP.Header.Class> = requestOptions.headers ? requestOptions.headers : requestOptions.headers = new Map<string, HTTP.Header.Class>();\n\n\t\tthis.addTokenAuthenticationHeader( headers );\n\n\t\treturn requestOptions;\n\t}\n\n\tclearAuthentication():void {\n\t\tthis._credentials = null;\n\t}\n\n\tprivate createToken():Promise<[ Token.Class, HTTP.Response.Class ]> {\n\t\tlet uri:string = this.context.resolve( Class.TOKEN_CONTAINER );\n\t\tlet requestOptions:HTTP.Request.Options = {};\n\n\t\tthis.basicAuthenticator.addAuthentication( requestOptions );\n\n\t\tHTTP.Request.Util.setAcceptHeader( \"application/ld+json\", requestOptions );\n\t\tHTTP.Request.Util.setPreferredInteractionModel( NS.LDP.Class.RDFSource, requestOptions );\n\n\t\treturn HTTP.Request.Service.post( uri, null, requestOptions, new JSONLD.Parser.Class() ).then( ( [ expandedResult, response ]:[ any, HTTP.Response.Class ] ) => {\n\t\t\tlet freeNodes:RDF.Node.Class[] = RDF.Node.Util.getFreeNodes( expandedResult );\n\n\t\t\tlet freeResources:FreeResources.Class = this.context.documents._getFreeResources( freeNodes );\n\t\t\tlet tokenResources:Token.Class[] = <Token.Class[]> freeResources.getResources().filter( resource => Resource.Util.hasType( resource, Token.RDF_CLASS ) );\n\n\t\t\tif( tokenResources.length === 0 ) throw new HTTP.Errors.BadResponseError( \"No '\" + Token.RDF_CLASS + \"' was returned.\", response );\n\t\t\tif( tokenResources.length > 1 ) throw new HTTP.Errors.BadResponseError( \"Multiple '\" + Token.RDF_CLASS + \"' were returned. \", response );\n\t\t\tlet token:Token.Class = tokenResources[ 0 ];\n\n\t\t\tlet agentDocuments:RDF.Document.Class[] = RDF.Document.Util.getDocuments( expandedResult ).filter( rdfDocument => rdfDocument[ \"@id\" ] === token.agent.id );\n\t\t\tagentDocuments.forEach( document => this.context.documents._getPersistedDocument( document, response ) );\n\n\t\t\tlet responseMetadata:LDP.ResponseMetadata.Class = <LDP.ResponseMetadata.Class> freeResources.getResources().find( resource => Resource.Util.hasType( resource, LDP.ResponseMetadata.RDF_CLASS ) );\n\n\t\t\tif( ! ! responseMetadata ) responseMetadata.resourcesMetadata.forEach( ( resourceMetadata:LDP.ResourceMetadata.Class ) => {\n\t\t\t\t(<PersistedDocument.Class> resourceMetadata.resource)._etag = resourceMetadata.eTag;\n\t\t\t} );\n\n\t\t\treturn [ token, response ] as [ Token.Class, HTTP.Response.Class ];\n\t\t} );\n\t}\n\n\tprivate addTokenAuthenticationHeader( headers:Map<string, HTTP.Header.Class> ):void {\n\t\tif( headers.has( \"authorization\" ) ) return;\n\n\t\tlet header:HTTP.Header.Class = new HTTP.Header.Class();\n\t\theaders.set( \"authorization\", header );\n\n\t\tlet authorization:string = \"Token \" + this._credentials.key;\n\t\theader.values.push( new HTTP.Header.Value( authorization ) );\n\t}\n}\n\nexport default Class;\n"]}