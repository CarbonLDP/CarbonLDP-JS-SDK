{"version":3,"sources":["Auth/TokenAuthenticator.ts"],"names":[],"mappings":"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","file":"TokenAuthenticator.js","sourcesContent":["import { IllegalArgumentError } from \"../Errors\";\nimport { RequestUtils } from \"../HTTP\";\nimport { BadResponseError } from \"../HTTP/Errors\";\nimport { Header } from \"../HTTP/Header\";\nimport { RequestOptions } from \"../HTTP/Request\";\nimport { Response } from \"../HTTP/Response\";\nimport { ResponseMetadata } from \"../LDP\";\nimport { RDFNode } from \"../RDF\";\nimport { FreeResources } from \"../FreeResources\";\nimport { promiseMethod } from \"../Utils\";\nimport { CS } from \"../Vocabularies\";\nimport { AbstractAuthenticator } from \"./AbstractAuthenticator\";\nimport { AuthenticatedUserInformationAccessor } from \"./AuthenticatedUserInformationAccessor\";\nimport { BasicAuthenticator } from \"./BasicAuthenticator\";\nimport { BasicToken } from \"./BasicToken\";\nimport {\n\tTokenCredentials,\n\tTokenCredentialsBase,\n} from \"./TokenCredentials\";\n\n\nexport class TokenAuthenticator extends AbstractAuthenticator<BasicToken, TokenCredentials> {\n\n\tprotected _credentials:TokenCredentials;\n\n\tisAuthenticated():boolean {\n\t\treturn super.isAuthenticated() && this._credentials.expires > new Date();\n\t}\n\n\tauthenticate( tokenOrCredentials:BasicToken | TokenCredentialsBase ):Promise<TokenCredentials> {\n\t\tif( TokenCredentialsBase.is( tokenOrCredentials ) )\n\t\t\treturn this._parseCredentialsBase( tokenOrCredentials );\n\n\t\treturn this._getCredentials( tokenOrCredentials );\n\t}\n\n\tprotected _getHeaderValue():string {\n\t\treturn \"Bearer \" + this._credentials.token;\n\t}\n\n\tprotected _parseCredentialsBase( credentialsBase:TokenCredentialsBase ):Promise<TokenCredentials> {\n\t\treturn promiseMethod( () => {\n\t\t\tconst credentials:TokenCredentials = TokenCredentials.createFrom( credentialsBase );\n\n\t\t\tif( credentials.expires <= new Date() ) throw new IllegalArgumentError( \"The token has already expired.\" );\n\n\t\t\treturn this._credentials = credentials;\n\t\t} );\n\t}\n\n\tprotected _getCredentials( token:BasicToken ):Promise<TokenCredentials> {\n\t\tconst basicAuthenticator:BasicAuthenticator = new BasicAuthenticator( this.context );\n\t\treturn basicAuthenticator\n\t\t\t.authenticate( token )\n\t\t\t.then( () => {\n\t\t\t\tconst requestOptions:RequestOptions = {};\n\t\t\t\tbasicAuthenticator.addAuthentication( requestOptions );\n\n\t\t\t\tRequestUtils.setRetrievalPreferences( { include: [ CS.PreferAuthToken ] }, requestOptions );\n\n\t\t\t\treturn this.getAuthenticatedUser( requestOptions );\n\t\t\t} )\n\t\t\t.then( () => {\n\t\t\t\treturn this._credentials;\n\t\t\t} );\n\t}\n\n\tprotected _parseRDFMetadata( rdfData:object[], response:Response, requestOptions:RequestOptions ):AuthenticatedUserInformationAccessor {\n\t\tconst accessor:AuthenticatedUserInformationAccessor = super._parseRDFMetadata( rdfData, response );\n\n\t\tconst authTokenPrefer:string = `include=\"${ CS.PreferAuthToken }\"`;\n\n\t\tconst prefer:Header = requestOptions.headers && requestOptions.headers.get( \"prefer\" );\n\t\tif( ! prefer || ! prefer.hasValue( authTokenPrefer ) ) return accessor;\n\n\t\tconst preference:Header = response.getHeader( \"preference-applied\" );\n\t\tif( ! preference || ! preference.hasValue( authTokenPrefer ) )\n\t\t\tthrow new BadResponseError( `Preference \"${ authTokenPrefer }\" was not applied.`, response );\n\n\t\tthis._parseRDFCredentials( rdfData, response );\n\n\t\treturn accessor;\n\t}\n\n\tprotected _parseRDFCredentials( rdfData:object[], response:Response ):TokenCredentials {\n\t\tconst freeNodes:RDFNode[] = RDFNode.getFreeNodes( rdfData );\n\n\t\tconst freeResources:FreeResources = this.context.registry\n\t\t\t._parseFreeNodes( freeNodes );\n\n\t\tconst responseMetadata:ResponseMetadata = freeResources.getPointers()\n\t\t\t.find( ResponseMetadata.is );\n\t\tif( ! responseMetadata ) throw new BadResponseError( `No \"${ ResponseMetadata.TYPE }\" was returned.`, response );\n\n\t\tconst tokenCredentials:TokenCredentials = responseMetadata.authToken;\n\t\tif( ! tokenCredentials ) throw new BadResponseError( `No \"${ TokenCredentials.TYPE }\" was returned.`, response );\n\n\t\treturn this._credentials = tokenCredentials;\n\t}\n\n}\n"]}