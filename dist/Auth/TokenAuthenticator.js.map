{"version":3,"sources":["Auth/TokenAuthenticator.ts"],"names":[],"mappings":"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","file":"TokenAuthenticator.js","sourcesContent":["import * as Context from \"../Context\";\nimport * as Errors from \"./../Errors\";\nimport * as FreeResources from \"./../FreeResources\";\nimport * as HTTP from \"./../HTTP\";\nimport * as JSONLD from \"./../JSONLD\";\nimport * as LDP from \"./../LDP\";\nimport * as NS from \"./../NS\";\nimport * as PersistedDocument from \"./../PersistedDocument\";\nimport * as RDF from \"./../RDF\";\nimport * as Resource from \"./../Resource\";\nimport * as Utils from \"./../Utils\";\nimport Authenticator from \"./Authenticator\";\nimport BasicAuthenticator from \"./BasicAuthenticator\";\nimport * as TokenCredentials from \"./TokenCredentials\";\nimport * as UsernameAndPasswordToken from \"./UsernameAndPasswordToken\";\n\nexport const TOKEN_CONTAINER:string = \"auth-tokens/\";\n\nexport class Class extends Authenticator<UsernameAndPasswordToken.Class, TokenCredentials.Class> {\n\n\tprotected context:Context.Class;\n\tprotected credentials:TokenCredentials.Class;\n\n\tconstructor( context:Context.Class ) {\n\t\tsuper();\n\t\tthis.context = context;\n\t}\n\n\tisAuthenticated():boolean {\n\t\treturn super.isAuthenticated() && this.credentials.expirationTime > new Date();\n\t}\n\n\tauthenticate( tokenOrCredentials:UsernameAndPasswordToken.Class | TokenCredentials.Class ):Promise<TokenCredentials.Class> {\n\t\treturn this\n\t\t\t.getCredentials( tokenOrCredentials )\n\t\t\t.then( ( credentials:TokenCredentials.Class ) => {\n\t\t\t\tif( Utils.isString( credentials.expirationTime ) ) credentials.expirationTime = new Date( credentials.expirationTime );\n\t\t\t\tif( credentials.expirationTime <= new Date() ) throw new Errors.IllegalArgumentError( \"The token has already expired.\" );\n\n\t\t\t\treturn this.credentials = credentials;\n\t\t\t} );\n\t}\n\n\tprotected getHeaderValue():HTTP.Header.Value {\n\t\treturn new HTTP.Header.Value( \"Token \" + this.credentials.key );\n\t}\n\n\tprivate getCredentials( tokenOrCredentials:UsernameAndPasswordToken.Class | TokenCredentials.Class ):Promise<TokenCredentials.Class> {\n\t\tif( TokenCredentials.Factory.hasClassProperties( tokenOrCredentials ) ) return Promise.resolve( tokenOrCredentials );\n\n\t\tconst basicAuthenticator:BasicAuthenticator = new BasicAuthenticator();\n\t\treturn basicAuthenticator\n\t\t\t.authenticate( tokenOrCredentials )\n\t\t\t.then( () => {\n\t\t\t\tconst requestOptions:HTTP.Request.Options = {};\n\t\t\t\tbasicAuthenticator.addAuthentication( requestOptions );\n\t\t\t\tHTTP.Request.Util.setAcceptHeader( \"application/ld+json\", requestOptions );\n\t\t\t\tHTTP.Request.Util.setPreferredInteractionModel( NS.LDP.Class.RDFSource, requestOptions );\n\n\t\t\t\tconst tokensURI:string = this.context.auth._resolveSecurityURL( TOKEN_CONTAINER );\n\t\t\t\treturn HTTP.Request.Service.post( tokensURI, null, requestOptions, new JSONLD.Parser.Class() );\n\t\t\t} )\n\t\t\t.then( ( [ expandedResult, response ]:[ any, HTTP.Response.Class ] ) => {\n\t\t\t\tconst freeNodes:RDF.Node.Class[] = RDF.Node.Util.getFreeNodes( expandedResult );\n\n\t\t\t\tconst freeResources:FreeResources.Class = this.context.documents._getFreeResources( freeNodes );\n\t\t\t\tconst tokenResources:TokenCredentials.Class[] = <TokenCredentials.Class[]> freeResources.getResources().filter( resource => Resource.Util.hasType( resource, TokenCredentials.RDF_CLASS ) );\n\n\t\t\t\tif( tokenResources.length === 0 ) throw new HTTP.Errors.BadResponseError( \"No '\" + TokenCredentials.RDF_CLASS + \"' was returned.\", response );\n\t\t\t\tif( tokenResources.length > 1 ) throw new HTTP.Errors.BadResponseError( \"Multiple '\" + TokenCredentials.RDF_CLASS + \"' were returned. \", response );\n\t\t\t\tconst token:TokenCredentials.Class = tokenResources[ 0 ];\n\n\t\t\t\tconst userDocuments:RDF.Document.Class[] = RDF.Document.Util.getDocuments( expandedResult ).filter( rdfDocument => rdfDocument[ \"@id\" ] === token.user.id );\n\t\t\t\tuserDocuments.forEach( document => this.context.documents._getPersistedDocument( document, response ) );\n\n\t\t\t\tconst responseMetadata:LDP.ResponseMetadata.Class = <LDP.ResponseMetadata.Class> freeResources\n\t\t\t\t\t.getResources()\n\t\t\t\t\t.find( LDP.ResponseMetadata.Factory.is );\n\n\t\t\t\tif( responseMetadata ) responseMetadata\n\t\t\t\t\t.documentsMetadata\n\t\t\t\t\t.forEach( documentMetadata => {\n\t\t\t\t\t\tconst document:PersistedDocument.Class = documentMetadata.relatedDocument as PersistedDocument.Class;\n\t\t\t\t\t\tdocument._etag = documentMetadata.eTag;\n\t\t\t\t\t} );\n\n\t\t\t\treturn token;\n\t\t\t} )\n\t\t\t.catch( error => this.context.documents._parseErrorResponse( error ) );\n\t}\n\n}\n\nexport default Class;\n"]}