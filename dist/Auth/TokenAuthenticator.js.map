{"version":3,"sources":["Auth/TokenAuthenticator.ts"],"names":[],"mappings":"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","file":"TokenAuthenticator.js","sourcesContent":["import { Context } from \"../Context\";\nimport * as Errors from \"../Errors\";\nimport { FreeResources } from \"../FreeResources\";\nimport { BadResponseError } from \"../HTTP/Errors\";\nimport {\n\tRequestOptions,\n\tRequestService,\n\tRequestUtils,\n} from \"../HTTP/Request\";\nimport { Response } from \"../HTTP/Response\";\nimport { JSONLDParser } from \"../JSONLD\";\nimport { ResponseMetadata } from \"../LDP/ResponseMetadata\";\nimport { PersistedDocument } from \"../PersistedDocument\";\nimport { RDFDocument } from \"../RDF/Document\";\nimport { RDFNode } from \"../RDF/Node\";\nimport { LDP } from \"../Vocabularies/LDP\";\nimport * as Utils from \"./../Utils\";\nimport { Authenticator } from \"./Authenticator\";\nimport { BasicAuthenticator } from \"./BasicAuthenticator\";\nimport * as TokenCredentials from \"./TokenCredentials\";\nimport { UsernameAndPasswordToken } from \"./UsernameAndPasswordToken\";\n\nexport const TOKEN_CONTAINER:string = \"auth-tokens/\";\n\nexport class Class extends Authenticator<UsernameAndPasswordToken, TokenCredentials.Class> {\n\n\tprotected context:Context;\n\tprotected credentials:TokenCredentials.Class;\n\n\tconstructor( context:Context ) {\n\t\tsuper( context );\n\t\tthis.context = context;\n\t}\n\n\tisAuthenticated():boolean {\n\t\treturn super.isAuthenticated() && this.credentials.expirationTime > new Date();\n\t}\n\n\tauthenticate( tokenOrCredentials:UsernameAndPasswordToken | TokenCredentials.Class ):Promise<TokenCredentials.Class> {\n\t\treturn this\n\t\t\t.getCredentials( tokenOrCredentials )\n\t\t\t.then( ( credentials:TokenCredentials.Class ) => {\n\t\t\t\tif( Utils.isString( credentials.expirationTime ) ) credentials.expirationTime = new Date( credentials.expirationTime );\n\t\t\t\tif( credentials.expirationTime <= new Date() ) throw new Errors.IllegalArgumentError( \"The token has already expired.\" );\n\n\t\t\t\treturn this.credentials = credentials;\n\t\t\t} );\n\t}\n\n\tprotected _getHeaderValue():string {\n\t\treturn \"Token \" + this.credentials.key;\n\t}\n\n\tprivate getCredentials( tokenOrCredentials:UsernameAndPasswordToken | TokenCredentials.Class ):Promise<TokenCredentials.Class> {\n\t\tif( TokenCredentials.Factory.hasClassProperties( tokenOrCredentials ) ) return Promise.resolve( tokenOrCredentials );\n\n\t\tconst basicAuthenticator:BasicAuthenticator = new BasicAuthenticator();\n\t\treturn basicAuthenticator\n\t\t\t.authenticate( tokenOrCredentials )\n\t\t\t.then( () => {\n\t\t\t\tconst requestOptions:RequestOptions = {};\n\t\t\t\tbasicAuthenticator.addAuthentication( requestOptions );\n\t\t\t\tRequestUtils.setAcceptHeader( \"application/ld+json\", requestOptions );\n\t\t\t\tRequestUtils.setPreferredInteractionModel( LDP.RDFSource, requestOptions );\n\n\t\t\t\tconst tokensURI:string = this.context._resolvePath( \"system.security\" ) + TOKEN_CONTAINER;\n\t\t\t\treturn RequestService.post( tokensURI, null, requestOptions, new JSONLDParser() );\n\t\t\t} )\n\t\t\t.then( ( [ expandedResult, response ]:[ any, Response ] ) => {\n\t\t\t\tconst freeNodes:RDFNode[] = RDFNode.getFreeNodes( expandedResult );\n\n\t\t\t\tconst freeResources:FreeResources = this.context.documents._getFreeResources( freeNodes );\n\t\t\t\tconst tokenResources:TokenCredentials.Class[] = <TokenCredentials.Class[]> freeResources.getResources().filter( resource => resource.hasType( TokenCredentials.RDF_CLASS ) );\n\n\t\t\t\tif( tokenResources.length === 0 ) throw new BadResponseError( \"No '\" + TokenCredentials.RDF_CLASS + \"' was returned.\", response );\n\t\t\t\tif( tokenResources.length > 1 ) throw new BadResponseError( \"Multiple '\" + TokenCredentials.RDF_CLASS + \"' were returned. \", response );\n\t\t\t\tconst token:TokenCredentials.Class = tokenResources[ 0 ];\n\n\t\t\t\tconst userDocuments:RDFDocument[] = RDFDocument.getDocuments( expandedResult ).filter( rdfDocument => rdfDocument[ \"@id\" ] === token.user.id );\n\t\t\t\tuserDocuments.forEach( document => this.context.documents._getPersistedDocument( document, response ) );\n\n\t\t\t\tconst responseMetadata:ResponseMetadata = <ResponseMetadata> freeResources\n\t\t\t\t\t.getResources()\n\t\t\t\t\t.find( ResponseMetadata.is );\n\n\t\t\t\tif( responseMetadata ) responseMetadata\n\t\t\t\t\t.documentsMetadata\n\t\t\t\t\t.forEach( documentMetadata => {\n\t\t\t\t\t\tconst document:PersistedDocument = documentMetadata.relatedDocument as PersistedDocument;\n\t\t\t\t\t\tdocument._eTag = documentMetadata.eTag;\n\t\t\t\t\t} );\n\n\t\t\t\treturn token;\n\t\t\t} )\n\t\t\t.catch( error => this.context.documents._parseErrorResponse( error ) );\n\t}\n\n}\n\nexport default Class;\n"]}