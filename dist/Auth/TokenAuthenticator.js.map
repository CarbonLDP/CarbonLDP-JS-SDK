{"version":3,"sources":["Auth/TokenAuthenticator.ts"],"names":[],"mappings":"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","file":"TokenAuthenticator.js","sourcesContent":["import * as Errors from \"../Errors\";\nimport { FreeResources } from \"../FreeResources\";\nimport { RequestUtils } from \"../HTTP\";\nimport { BadResponseError } from \"../HTTP/Errors\";\nimport { Header } from \"../HTTP/Header\";\nimport { RequestOptions } from \"../HTTP/Request\";\nimport { Response } from \"../HTTP/Response\";\nimport { ResponseMetadata } from \"../LDP\";\nimport { RDFNode } from \"../RDF/Node\";\nimport { promiseMethod } from \"../Utils\";\nimport { CS } from \"../Vocabularies\";\nimport * as Utils from \"./../Utils\";\nimport { Authenticator } from \"./Authenticator\";\nimport { BasicAuthenticator } from \"./BasicAuthenticator\";\nimport * as TokenCredentials from \"./TokenCredentials\";\nimport { UserMetadata } from \"./UserMetadata\";\nimport { UsernameAndPasswordToken } from \"./UsernameAndPasswordToken\";\n\n\nexport class TokenAuthenticator extends Authenticator<UsernameAndPasswordToken, TokenCredentials.Class> {\n\n\tprotected credentials:TokenCredentials.Class;\n\n\tisAuthenticated():boolean {\n\t\treturn super.isAuthenticated() && this.credentials.expirationTime > new Date();\n\t}\n\n\tauthenticate( tokenOrCredentials:UsernameAndPasswordToken | TokenCredentials.Class ):Promise<TokenCredentials.Class> {\n\t\tif( TokenCredentials.Factory.hasClassProperties( tokenOrCredentials ) )\n\t\t\treturn this._parseRawCredentials( tokenOrCredentials );\n\n\t\treturn this._getCredentials( tokenOrCredentials );\n\t}\n\n\tprotected _getHeaderValue():string {\n\t\treturn \"Token \" + this.credentials.key;\n\t}\n\n\tprotected _parseRawCredentials( credentials:TokenCredentials.Class ):Promise<TokenCredentials.Class> {\n\t\treturn promiseMethod( () => {\n\t\t\tif( Utils.isString( credentials.expirationTime ) ) credentials.expirationTime = new Date( credentials.expirationTime );\n\t\t\tif( credentials.expirationTime <= new Date() ) throw new Errors.IllegalArgumentError( \"The token has already expired.\" );\n\n\t\t\treturn this.credentials = credentials;\n\t\t} );\n\t}\n\n\tprotected _getCredentials( token:UsernameAndPasswordToken ):Promise<TokenCredentials.Class> {\n\t\tconst basicAuthenticator:BasicAuthenticator = new BasicAuthenticator( this.context );\n\t\treturn basicAuthenticator\n\t\t\t.authenticate( token )\n\t\t\t.then( () => {\n\t\t\t\tconst requestOptions:RequestOptions = {};\n\t\t\t\tbasicAuthenticator.addAuthentication( requestOptions );\n\n\t\t\t\tRequestUtils.setRetrievalPreferences( { include: [ CS.PreferAuthToken ] }, requestOptions, false );\n\n\t\t\t\treturn this.getAuthenticatedUser( requestOptions );\n\t\t\t} )\n\t\t\t.then( () => {\n\t\t\t\treturn this.credentials;\n\t\t\t} );\n\t}\n\n\tprotected _parseRDFMetadata( rdfData:object[], response:Response ):UserMetadata {\n\t\tconst preferenceHeader:Header = response.getHeader( \"Preference-Applied\" );\n\t\tif( preferenceHeader && preferenceHeader.hasValue( CS.PreferAuthToken ) )\n\t\t\tthis._parseRDFCredentials( rdfData, response );\n\n\t\treturn super._parseRDFMetadata( rdfData, response );\n\t}\n\n\tprotected _parseRDFCredentials( rdfData:object[], response:Response ):TokenCredentials.Class {\n\t\tconst freeNodes:RDFNode[] = RDFNode.getFreeNodes( rdfData );\n\n\t\tconst freeResources:FreeResources = this.context.documents\n\t\t\t._getFreeResources( freeNodes );\n\n\t\tconst responseMetadata:ResponseMetadata = freeResources\n\t\t\t.getResources()\n\t\t\t.find( ResponseMetadata.is );\n\t\tif( ! responseMetadata ) throw new BadResponseError( `No \"${ ResponseMetadata.TYPE }\" was returned.`, response );\n\n\t\tconst tokenCredentials:TokenCredentials.Class = responseMetadata.authToken;\n\t\tif( ! tokenCredentials ) throw new BadResponseError( `No \"${ TokenCredentials.RDF_CLASS }\" was returned.`, response );\n\n\t\treturn this.credentials = tokenCredentials;\n\t}\n\n}\n"]}