{"version":3,"sources":["Auth/Authenticator.ts"],"names":[],"mappings":";;AAAA,oCAA8C;AAC9C,yCAAwC;AAGxC;IAAA;IA+BA,CAAC;IA3BA,+BAAe,GAAf;QACC,MAAM,CAAC,CAAE,CAAE,IAAI,CAAC,WAAW,CAAC;IAC7B,CAAC;IAID,mCAAmB,GAAnB;QACC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IACzB,CAAC;IAED,iCAAiB,GAAjB,UAAmB,cAA6B;QAC/C,EAAE,CAAA,CAAE,CAAE,IAAI,CAAC,eAAe,EAAG,CAAC;YAAC,MAAM,IAAI,0BAAiB,CAAE,wCAAwC,CAAE,CAAC;QAEvG,IAAM,OAAO,GAAuB,cAAc,CAAC,OAAO,CAAC,CAAC;YAC3D,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,cAAc,CAAC,OAAO,GAAG,IAAI,GAAG,EAAkB,CAAC;QAE7E,EAAE,CAAA,CAAE,OAAO,CAAC,GAAG,CAAE,eAAe,CAAG,CAAC;YAAC,MAAM,CAAC,cAAc,CAAC;QAE3D,IAAM,MAAM,GAAU,IAAI,eAAM,EAAE,CAAC;QACnC,OAAO,CAAC,GAAG,CAAE,eAAe,EAAE,MAAM,CAAE,CAAC;QAEvC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAE,IAAI,CAAC,cAAc,EAAE,CAAE,CAAC;QAE5C,MAAM,CAAC,cAAc,CAAC;IACvB,CAAC;IAGF,YAAC;AAAD,CA/BA,AA+BC,IAAA;AA/BqB,sBAAK;AAiC3B,kBAAe,KAAK,CAAC","file":"Authenticator.js","sourcesContent":["import { IllegalStateError } from \"../Errors\";\nimport { Header } from \"../HTTP/Header\";\nimport { RequestOptions } from \"../HTTP/Request\";\n\nexport abstract class Class<T extends object, W extends object> {\n\n\tprotected abstract credentials:W;\n\n\tisAuthenticated():boolean {\n\t\treturn ! ! this.credentials;\n\t}\n\n\tabstract authenticate( authenticationToken:T ):Promise<W>;\n\n\tclearAuthentication():void {\n\t\tthis.credentials = null;\n\t}\n\n\taddAuthentication( requestOptions:RequestOptions ):RequestOptions {\n\t\tif( ! this.isAuthenticated() ) throw new IllegalStateError( \"The authenticator isn't authenticated.\" );\n\n\t\tconst headers:Map<string, Header> = requestOptions.headers ?\n\t\t\trequestOptions.headers : requestOptions.headers = new Map<string, Header>();\n\n\t\tif( headers.has( \"authorization\" ) ) return requestOptions;\n\n\t\tconst header:Header = new Header();\n\t\theaders.set( \"authorization\", header );\n\n\t\theader.values.push( this.getHeaderValue() );\n\n\t\treturn requestOptions;\n\t}\n\n\tprotected abstract getHeaderValue():string;\n}\n\nexport default Class;\n"]}