{"version":3,"sources":["Auth/User.ts"],"names":[],"mappings":";;AAAA,wCAA0C;AAC1C,yEAAoE;AACpE,4BAA8B;AAE9B,kCAAoC;AAEvB,QAAA,SAAS,GAAU,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC;AAEpC,QAAA,MAAM,GAAsB;IACxC,MAAM,EAAE;QACP,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,KAAK;QAC5B,OAAO,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM;KAC/B;IACD,OAAO,EAAE;QACR,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK;QAC/B,OAAO,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM;KAC/B;IACD,UAAU,EAAE;QACX,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,QAAQ;QAC/B,OAAO,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM;KAC/B;IACD,SAAS,EAAE;QACV,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,OAAO;QAC9B,OAAO,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO;KAChC;CACD,CAAC;AAQF;IAAA;IAoCA,CAAC;IAnCO,0BAAkB,GAAzB,UAA2B,MAAa;QACvC,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAE,MAAM,EAAE,MAAM,CAAE;eAC7C,KAAK,CAAC,kBAAkB,CAAE,MAAM,EAAE,OAAO,CAAE;eAC3C,KAAK,CAAC,kBAAkB,CAAE,MAAM,EAAE,UAAU,CAAE,CAChD;IACH,CAAC;IAEM,UAAE,GAAT,UAAW,MAAa;QACvB,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAE,MAAM,CAAE;eACvC,QAAQ,CAAC,OAAO,CAAC,kBAAkB,CAAE,MAAM,CAAE;eAC3B,MAAO,CAAC,OAAO,CAAE,iBAAS,CAAE,CAChD;IACH,CAAC;IAEM,cAAM,GAAb,UAAe,IAAW,EAAE,KAAY,EAAE,QAAe;QACxD,MAAM,CAAC,OAAO,CAAC,UAAU,CAAU,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAE,CAAC;IAChE,CAAC;IAEM,kBAAU,GAAjB,UAAqC,MAAQ,EAAE,IAAW,EAAE,KAAY,EAAE,QAAe;QACxF,EAAE,CAAA,CAAE,CAAE,QAAQ,CAAC,OAAO,CAAC,kBAAkB,CAAE,MAAM,CAAG,CAAC;YACpD,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAE,MAAM,CAAE,CAAC;QAEhD,EAAE,CAAA,CAAE,CAAE,IAAK,CAAC;YAAC,MAAM,IAAI,8BAAoB,CAAE,2BAA2B,CAAE,CAAC;QAC3E,EAAE,CAAA,CAAE,CAAE,KAAM,CAAC;YAAC,MAAM,IAAI,8BAAoB,CAAE,4BAA4B,CAAE,CAAC;QAC7E,EAAE,CAAA,CAAE,CAAE,QAAS,CAAC;YAAC,MAAM,IAAI,8BAAoB,CAAE,+BAA+B,CAAE,CAAC;QAEnF,IAAI,GAAG,GAAyB,MAAM,CAAC;QACvC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;QAChB,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC;QAClB,GAAG,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACxB,GAAG,CAAC,KAAK,CAAC,IAAI,CAAE,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAE,CAAC;QAEnC,MAAM,CAAC,GAAG,CAAC;IACZ,CAAC;IAEF,cAAC;AAAD,CApCA,AAoCC,IAAA;AApCY,0BAAO","file":"User.js","sourcesContent":["import * as Document from \"./../Document\";\nimport IllegalArgumentError from \"./../Errors/IllegalArgumentError\";\nimport * as NS from \"./../NS\";\nimport * as ObjectSchema from \"./../ObjectSchema\";\nimport * as Utils from \"./../Utils\";\n\nexport const RDF_CLASS:string = NS.CS.Class.User;\n\nexport const SCHEMA:ObjectSchema.Class = {\n\t\"name\": {\n\t\t\"@id\": NS.CS.Predicate.namae,\n\t\t\"@type\": NS.XSD.DataType.string,\n\t},\n\t\"email\": {\n\t\t\"@id\": NS.VCARD.Predicate.email,\n\t\t\"@type\": NS.XSD.DataType.string,\n\t},\n\t\"password\": {\n\t\t\"@id\": NS.CS.Predicate.password,\n\t\t\"@type\": NS.XSD.DataType.string,\n\t},\n\t\"enabled\": {\n\t\t\"@id\": NS.CS.Predicate.enabled,\n\t\t\"@type\": NS.XSD.DataType.boolean,\n\t},\n};\n\nexport interface Class extends Document.Class {\n\tname:string;\n\temail:string;\n\tpassword:string;\n}\n\nexport class Factory {\n\tstatic hasClassProperties( object:Object ):boolean {\n\t\treturn Utils.hasPropertyDefined( object, \"name\" )\n\t\t\t&& Utils.hasPropertyDefined( object, \"email\" )\n\t\t\t&& Utils.hasPropertyDefined( object, \"password\" )\n\t\t\t;\n\t}\n\n\tstatic is( object:Object ):boolean {\n\t\treturn Factory.hasClassProperties( object )\n\t\t\t&& Document.Factory.hasClassProperties( object )\n\t\t\t&& (<Document.Class> object).hasType( RDF_CLASS )\n\t\t\t;\n\t}\n\n\tstatic create( name:string, email:string, password:string ):Class {\n\t\treturn Factory.createFrom<Object>( {}, name, email, password );\n\t}\n\n\tstatic createFrom<T extends Object>( object:T, name:string, email:string, password:string ):T & Class {\n\t\tif( ! Document.Factory.hasClassProperties( object ) )\n\t\t\tobject = Document.Factory.createFrom( object );\n\n\t\tif( ! name ) throw new IllegalArgumentError( \"The name cannot be empty.\" );\n\t\tif( ! email ) throw new IllegalArgumentError( \"The email cannot be empty.\" );\n\t\tif( ! password ) throw new IllegalArgumentError( \"The password cannot be empty.\" );\n\n\t\tlet app:T & Class = <T & Class> object;\n\t\tapp.name = name;\n\t\tapp.email = email;\n\t\tapp.password = password;\n\t\tapp.types.push( NS.CS.Class.User );\n\n\t\treturn app;\n\t}\n\n}\n\nexport default Class;\n"]}