{"version":3,"sources":["Auth/ACE/TransientACE.ts"],"names":[],"mappings":";;AACA,2CAAmD;AAEnD,mDAAwC;AAuB3B,QAAA,YAAY,GAAuB;IAC/C,IAAI,EAAE,iBAAE,CAAC,kBAAkB;IAE3B,EAAE,EAAF,UAAI,KAAS;QACZ,MAAM,CAAC,4BAAiB,CAAC,EAAE,CAAE,KAAK,CAAE;eAChC,KAAK,CAAC,cAAc,CAAE,UAAU,CAAE;eAClC,KAAK,CAAC,cAAc,CAAE,aAAa,CAAE;eACrC,KAAK,CAAC,cAAc,CAAE,UAAU,CAAE;eAClC,KAAK,CAAC,cAAc,CAAE,eAAe,CAAE,CACzC;IACH,CAAC;IAED,MAAM,EAAN,UAA0B,IAAgB;QACzC,IAAM,IAAI,GAAe,MAAM,CAAC,MAAM,CAAE,EAAE,EAAE,IAAI,CAAE,CAAC;QACnD,MAAM,CAAC,oBAAY,CAAC,UAAU,CAAE,IAAI,CAAE,CAAC;IACxC,CAAC;IAED,UAAU,EAAV,UAA8B,MAAkB;QAC/C,4BAAiB,CAAC,QAAQ,CAAE,MAAM,CAAE,CAAC;QAErC,IAAM,GAAG,GAAoB,MAA0B,CAAC;QACxD,GAAG,CAAC,OAAO,CAAE,oBAAY,CAAC,IAAI,CAAE,CAAC;QAEjC,MAAM,CAAC,GAAG,CAAC;IACZ,CAAC;CAED,CAAC","file":"TransientACE.js","sourcesContent":["import { ModelFactory } from \"../../core/ModelFactory\";\nimport { TransientFragment } from \"../../Fragment\";\nimport { Pointer } from \"../../Pointer\";\nimport { CS } from \"../../Vocabularies\";\nimport { BaseACE } from \"./BaseACE\";\n\n\nexport interface TransientACE extends TransientFragment {\n\tgranting:boolean;\n\tpermissions:Pointer[];\n\tsubjects:Pointer[];\n\tsubjectsClass:Pointer;\n}\n\n\nexport interface TransientACEFactory extends ModelFactory<TransientACE> {\n\tTYPE:CS[ \"AccessControlEntry\" ];\n\n\tis( value:any ):value is TransientACE;\n\n\n\tcreate<T extends object>( data:T & BaseACE ):T & TransientACE;\n\n\tcreateFrom<T extends object>( object:T & BaseACE ):T & TransientACE;\n}\n\nexport const TransientACE:TransientACEFactory = {\n\tTYPE: CS.AccessControlEntry,\n\n\tis( value:any ):value is TransientACE {\n\t\treturn TransientFragment.is( value )\n\t\t\t&& value.hasOwnProperty( \"granting\" )\n\t\t\t&& value.hasOwnProperty( \"permissions\" )\n\t\t\t&& value.hasOwnProperty( \"subjects\" )\n\t\t\t&& value.hasOwnProperty( \"subjectsClass\" )\n\t\t\t;\n\t},\n\n\tcreate<T extends object>( data:T & BaseACE ):T & TransientACE {\n\t\tconst copy:T & BaseACE = Object.assign( {}, data );\n\t\treturn TransientACE.createFrom( copy );\n\t},\n\n\tcreateFrom<T extends object>( object:T & BaseACE ):T & TransientACE {\n\t\tTransientFragment.decorate( object );\n\n\t\tconst ace:T & TransientACE = object as T & TransientACE;\n\t\tace.addType( TransientACE.TYPE );\n\n\t\treturn ace;\n\t},\n\n};\n"]}