{"version":3,"sources":["Carbon.ts"],"names":[],"mappings":";;;;;;AACA,qBAAiB,QAAQ,CAAC,CAAA;AAC1B,IAAY,IAAI,WAAM,QAAQ,CAAC,CAAA;AAC/B,gCAA4B,mBAAmB,CAAC,CAAA;AAChD,IAAY,QAAQ,WAAM,YAAY,CAAC,CAAA;AACvC,0BAAsB,aAAa,CAAC,CAAA;AACpC,IAAY,IAAI,WAAM,QAAQ,CAAC,CAAA;AAC/B,IAAY,GAAG,WAAM,OAAO,CAAC,CAAA;AAC7B,yBAA4B,YAAY,CAAC,CAAA;AACzC,IAAY,KAAK,WAAM,SAAS,CAAC,CAAA;AAEjC;IAAqB,0BAAe;IAkBnC,gBAAa,QAAa;QACzB,iBAAO,CAAC;QAER,QAAQ,GAAG,QAAQ,GAAG,QAAQ,GAAG,kBAAe,CAAC;QAEjD,KAAK,CAAC,CAAC,CAAC,MAAM,CAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAE,QAAQ,CAAE,CAAE,CAAC;QAE1D,IAAI,CAAC,IAAI,GAAG,IAAI,cAAI,CAAE,IAAI,CAAE,CAAC;IAC9B,CAAC;IAbD,sBAAW,iBAAO;aAAlB,cAA8B,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;;;OAAA;IAetD,wBAAO,GAAP,UAAS,GAAU;QAClB,EAAE,CAAC,CAAE,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAE,GAAG,CAAG,CAAC;YAAC,MAAM,CAAC,GAAG,CAAC;QAEjD,IAAI,QAAQ,GAAU,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAE,UAAU,CAAE,GAAG,UAAU,GAAG,SAAS,CAAC;QAC/E,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAE,QAAQ,CAAE,GAAG,GAAG,GAAG,IAAI,CAAC,UAAU,CAAE,oBAAoB,CAAE,CAAC;QAC1F,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAE,QAAQ,EAAE,GAAG,CAAE,CAAC;IAC9C,CAAC;IAED,kCAAiB,GAAjB;QACC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAE,MAAM,CAAE,CAAC,IAAI,CACvC,UAAE,EAAiE;gBAA/D,mBAAW,EAAE,gBAAQ;YACxB,MAAM,CAAO,WAAW,CAAC;QAC1B,CAAC,CACD,CAAC;IACH,CAAC;IAvCM,WAAI,GAAe,cAAI,CAAC;IACxB,WAAI,GAAe,IAAI,CAAC;IACxB,eAAQ,GAAmB,QAAQ,CAAC;IACpC,gBAAS,GAAoB,mBAAS,CAAC;IACvC,WAAI,GAAe,IAAI,CAAC;IACxB,UAAG,GAAc,GAAG,CAAC;IACrB,YAAK,GAAgB,KAAK,CAAC;IAkCnC,aAAC;AAAD,CA3CA,AA2CC,CA3CoB,yBAAe,GA2CnC;AAED;kBAAe,MAAM,CAAC","file":"Carbon.js","sourcesContent":["import * as APIDescription from \"./APIDescription\";\nimport Apps from \"./Apps\";\nimport * as Auth from \"./Auth\";\nimport AbstractContext from \"./AbstractContext\";\nimport * as Document from \"./Document\";\nimport Documents from \"./Documents\";\nimport * as HTTP from \"./HTTP\";\nimport * as RDF from \"./RDF\";\nimport defaultSettings from \"./settings\";\nimport * as Utils from \"./Utils\";\n\nclass Carbon extends AbstractContext {\n\n\t/* tslint:disable: variable-name */\n\tstatic Apps:typeof Apps = Apps;\n\tstatic Auth:typeof Auth = Auth;\n\tstatic Document:typeof Document = Document;\n\tstatic Documents:typeof Documents = Documents;\n\tstatic HTTP:typeof HTTP = HTTP;\n\tstatic RDF:typeof RDF = RDF;\n\tstatic Utils:typeof Utils = Utils;\n\t/* tslint:enable: variable-name */\n\n\t// TODO: Get package.json version directly\n\tstatic get version():string { return \"0.17.4-ALPHA\"; }\n\n\tapps:Apps;\n\n\t// TODO: Define settings type\n\tconstructor( settings?:any ) {\n\t\tsuper();\n\n\t\tsettings = settings ? settings : defaultSettings;\n\n\t\tUtils.M.extend( this.settings, Utils.M.from( settings ) );\n\n\t\tthis.apps = new Apps( this );\n\t}\n\n\tresolve( uri:string ):string {\n\t\tif ( RDF.URI.Util.isAbsolute( uri ) ) return uri;\n\n\t\tlet finalURI:string = this.settings.get( \"http.ssl\" ) ? \"https://\" : \"http://\";\n\t\tfinalURI += this.settings.get( \"domain\" ) + \"/\" + this.getSetting( \"platform.container\" );\n\t\treturn RDF.URI.Util.resolve( finalURI, uri );\n\t}\n\n\tgetAPIDescription():Promise<APIDescription.Class> {\n\t\treturn this.documents.get( \"api/\" ).then(\n\t\t\t( [ description, response ]:[ Document.Class, HTTP.Response.Class ] ) => {\n\t\t\t\treturn <any> description;\n\t\t\t}\n\t\t);\n\t}\n}\n\nexport default Carbon;\n"],"sourceRoot":"/source/"}