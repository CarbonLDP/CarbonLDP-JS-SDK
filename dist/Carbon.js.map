{"version":3,"sources":["Carbon.ts"],"names":[],"mappings":"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","file":"Carbon.js","sourcesContent":["import { hasProtocol } from \"sparqler/iri\";\nimport * as AbstractContext from \"./AbstractContext\";\nimport * as AccessPoint from \"./AccessPoint\";\nimport * as Auth from \"./Auth\";\nimport * as Document from \"./Document\";\nimport * as Documents from \"./Documents\";\nimport * as Errors from \"./Errors\";\nimport * as Fragment from \"./Fragment\";\nimport * as HTTP from \"./HTTP\";\nimport * as JSONLD from \"./JSONLD\";\nimport * as LDP from \"./LDP\";\nimport * as LDPatch from \"./LDPatch\";\nimport * as Messaging from \"./Messaging\";\nimport * as NamedFragment from \"./NamedFragment\";\nimport * as NS from \"./NS\";\nimport * as ObjectSchema from \"./ObjectSchema\";\nimport * as PersistedDocument from \"./PersistedDocument\";\nimport * as PersistedFragment from \"./PersistedFragment\";\nimport * as PersistedNamedFragment from \"./PersistedNamedFragment\";\nimport * as PersistedResource from \"./PersistedResource\";\nimport * as Pointer from \"./Pointer\";\nimport * as RDF from \"./RDF\";\nimport * as Resource from \"./Resource\";\nimport * as SDKContext from \"./SDKContext\";\nimport * as Settings from \"./Settings\";\nimport * as SHACL from \"./SHACL\";\nimport * as SPARQL from \"./SPARQL\";\nimport * as System from \"./System\";\nimport * as Utils from \"./Utils\";\n\nexport class Class extends AbstractContext.Class {\n\n\t/* tslint:disable: variable-name */\n\tstatic AccessPoint:typeof AccessPoint = AccessPoint;\n\tstatic Auth:typeof Auth = Auth;\n\tstatic Document:typeof Document = Document;\n\tstatic Documents:typeof Documents = Documents;\n\tstatic Errors:typeof Errors = Errors;\n\tstatic Fragment:typeof Fragment = Fragment;\n\tstatic HTTP:typeof HTTP = HTTP;\n\tstatic JSONLD:typeof JSONLD = JSONLD;\n\tstatic LDP:typeof LDP = LDP;\n\tstatic LDPatch:typeof LDPatch = LDPatch;\n\tstatic Messaging:typeof Messaging = Messaging;\n\tstatic NamedFragment:typeof NamedFragment = NamedFragment;\n\tstatic NS:typeof NS = NS;\n\tstatic ObjectSchema:typeof ObjectSchema = ObjectSchema;\n\tstatic PersistedDocument:typeof PersistedDocument = PersistedDocument;\n\tstatic PersistedFragment:typeof PersistedFragment = PersistedFragment;\n\tstatic PersistedNamedFragment:typeof PersistedNamedFragment = PersistedNamedFragment;\n\tstatic PersistedResource:typeof PersistedResource = PersistedResource;\n\tstatic Pointer:typeof Pointer = Pointer;\n\tstatic RDF:typeof RDF = RDF;\n\tstatic Resource:typeof Resource = Resource;\n\tstatic SDKContext:typeof SDKContext = SDKContext;\n\tstatic Settings:typeof Settings = Settings;\n\tstatic SHACL:typeof SHACL = SHACL;\n\tstatic SPARQL:typeof SPARQL = SPARQL;\n\tstatic System:typeof System = System;\n\tstatic Utils:typeof Utils = Utils;\n\n\t/* tslint:enable: variable-name */\n\n\tstatic get version():string { return \"1.0.0-alpha.11\"; }\n\n\t// noinspection JSMethodCanBeStatic\n\tget version():string { return Class.version; }\n\n\tprotected _baseURI:string;\n\tprotected settings:Settings.ContextSettings = {\n\t\tvocabulary: \"vocabulary/#\",\n\t\tpaths: {\n\t\t\tsystem: {\n\t\t\t\tslug: \".system/\",\n\t\t\t\tpaths: {\n\t\t\t\t\tplatform: \"platform/\",\n\t\t\t\t\tinstance: \"instance/\",\n\t\t\t\t\tcredentials: \"credentials/\",\n\t\t\t\t\tusers: \"users/\",\n\t\t\t\t\troles: \"roles/\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t};\n\n\tmessaging:Messaging.Service.Class;\n\n\tconstructor( url:string );\n\tconstructor( settings:Settings.Class );\n\tconstructor( urlOrSettings:string | Settings.Class ) {\n\t\tsuper();\n\n\t\tif( Utils.isString( urlOrSettings ) ) {\n\t\t\tif( ! RDF.URI.Util.hasProtocol( urlOrSettings ) ) throw new Errors.IllegalArgumentError( `The URL must contain a valid protocol: \"http://\", \"https://\".` );\n\t\t\tthis._baseURI = urlOrSettings;\n\n\t\t} else {\n\t\t\tif( ! Utils.isString( urlOrSettings.host ) ) throw new Errors.IllegalArgumentError( `The settings object must contains a valid host string.` );\n\t\t\tif( hasProtocol( urlOrSettings.host ) ) throw new Errors.IllegalArgumentError( `The host must not contain a protocol.` );\n\t\t\tif( urlOrSettings.host.includes( \":\" ) ) throw new Errors.IllegalArgumentError( `The host must not contain a port.` );\n\n\t\t\tthis._baseURI = `${ urlOrSettings.ssl === false ? \"http://\" : \"https://\" }${ urlOrSettings.host }`;\n\n\t\t\tif( Utils.isNumber( urlOrSettings.port ) ) {\n\t\t\t\tif( this._baseURI.endsWith( \"/\" ) ) this._baseURI = this._baseURI.slice( 0, - 1 );\n\t\t\t\tthis._baseURI += `:${ urlOrSettings.port }`;\n\t\t\t}\n\n\t\t\turlOrSettings.ssl = urlOrSettings.host = urlOrSettings.port = null;\n\t\t\tthis.settings = Utils.O.extend( this.settings, urlOrSettings, { objects: true } );\n\t\t}\n\n\t\tif( ! this._baseURI.endsWith( \"/\" ) ) this._baseURI = this._baseURI + \"/\";\n\n\t\tthis.messaging = new Messaging.Service.Class( this );\n\t}\n\n\t/**\n\t * Retrieves the Metadata related to the CarbonLDP Platform.\n\t */\n\tgetPlatformMetadata():Promise<System.PlatformMetadata.Class> {\n\t\treturn this.getDocumentMetadata<System.PlatformMetadata.Class>( \"system.platform.metadata\" );\n\t}\n\n\t/**\n\t * Retrieves the Metadata related to your instance of the Carbon LDP Platform.\n\t */\n\tgetInstanceMetadata():Promise<System.InstanceMetadata.Class> {\n\t\treturn this.getDocumentMetadata<System.InstanceMetadata.Class>( \"system.instance.metadata\" );\n\t}\n\n\tprivate getDocumentMetadata<T extends object>( metadataSetting:\"system.platform.metadata\" | \"system.instance.metadata\" ):Promise<T> {\n\t\tif( ! this.hasSetting( metadataSetting ) )\n\t\t\treturn Promise.reject( new Errors.IllegalStateError( `The \"${ metadataSetting }\" setting hasn't been defined.` ) );\n\n\t\treturn Promise.resolve()\n\t\t\t.then( () => this.resolveSystemURI( this.getSetting( metadataSetting ) ) )\n\t\t\t.then( metadataURI => this.documents.get<T>( metadataURI ) )\n\t\t\t.then( ( [ metadataDocument ] ) => metadataDocument );\n\t}\n}\n\nexport default Class;\n"]}