{"version":3,"sources":["Repository/Repository.ts"],"names":[],"mappings":";;AAAA,qEAAoE;AAEpE,0DAAyD;AAsBzD;IACC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAE,IAAI,yCAAmB,CAAE,+DAA+D,CAAE,CAAE,CAAC;AACrH,CAAC;AAQY,QAAA,UAAU,GAAqB;IAC3C,SAAS,EAAE;QACV,GAAG,EAAE,qBAAqB;QAC1B,OAAO,EAAE,qBAAqB;QAC9B,MAAM,EAAE,qBAAqB;QAE7B,OAAO,EAAE,qBAAqB;QAC9B,IAAI,EAAE,qBAAqB;QAC3B,cAAc,EAAE,qBAAqB;QAErC,MAAM,EAAE,qBAAqB;KAC7B;IAGD,WAAW,EAAX,UAAa,MAAa;QACzB,MAAM,CAAC,+BAAc;aACnB,iBAAiB,CAAE,kBAAU,CAAC,SAAS,EAAE,MAAM,CAAE,CACjD;IACH,CAAC;IAED,QAAQ,EAAR,UAAoC,MAAQ;QAC3C,EAAE,CAAA,CAAE,kBAAU,CAAC,WAAW,CAAE,MAAM,CAAG,CAAC;YAAC,MAAM,CAAC;QAE9C,MAAM,CAAC,+BAAc;aACnB,oBAAoB,CAAE,kBAAU,CAAC,SAAS,EAAE,MAAM,CAAE,CAAC;IACxD,CAAC;CACD,CAAC","file":"Repository.js","sourcesContent":["import { NotImplementedError } from \"../Errors/NotImplementedError\";\n\nimport { ModelDecorator } from \"../Model/ModelDecorator\";\nimport { ModelPrototype } from \"../Model/ModelPrototype\";\n\nimport { ObjectSchemaResolver } from \"../ObjectSchema/ObjectSchemaResolver\";\n\nimport { BaseRepository } from \"./BaseRepository\";\nimport { ResolvablePointer } from \"./ResolvablePointer\";\n\n\nexport interface Repository<MODEL extends ResolvablePointer = ResolvablePointer> {\n\tget( uri:string, ...params:any[] ):Promise<MODEL>;\n\tresolve( resource:MODEL, ...params:any[] ):Promise<MODEL>;\n\texists( uri:string, ...params:any[] ):Promise<boolean>;\n\n\trefresh( resource:MODEL, ...params:any[] ):Promise<MODEL>;\n\tsave( resource:MODEL, ...params:any[] ):Promise<MODEL>;\n\tsaveAndRefresh( resource:MODEL, ...params:any[] ):Promise<MODEL>;\n\n\tdelete( uri:string, ...params:any[] ):Promise<void>;\n}\n\n\nfunction __throwNotImplemented():Promise<never> {\n\treturn Promise.reject( new NotImplementedError( \"Must be implemented for a specific repository implementation.\" ) );\n}\n\n// TODO: Use `unknown`\nexport type RepositoryFactory =\n\t& ModelPrototype<Repository, BaseRepository & ObjectSchemaResolver>\n\t& ModelDecorator<Repository<any>, BaseRepository>\n\t;\n\nexport const Repository:RepositoryFactory = {\n\tPROTOTYPE: {\n\t\tget: __throwNotImplemented,\n\t\tresolve: __throwNotImplemented,\n\t\texists: __throwNotImplemented,\n\n\t\trefresh: __throwNotImplemented,\n\t\tsave: __throwNotImplemented,\n\t\tsaveAndRefresh: __throwNotImplemented,\n\n\t\tdelete: __throwNotImplemented,\n\t},\n\n\n\tisDecorated( object:object ):object is Repository {\n\t\treturn ModelDecorator\n\t\t\t.hasPropertiesFrom( Repository.PROTOTYPE, object )\n\t\t\t;\n\t},\n\n\tdecorate<T extends BaseRepository>( object:T ):T & Repository {\n\t\tif( Repository.isDecorated( object ) ) return;\n\n\t\treturn ModelDecorator\n\t\t\t.definePropertiesFrom( Repository.PROTOTYPE, object );\n\t},\n};\n"]}