{"version":3,"sources":["Repository/Repository.ts"],"names":[],"mappings":";;AAAA,qEAAoE;AAEpE,0DAAyD;AAsBzD;IACC,OAAO,OAAO,CAAC,MAAM,CAAE,IAAI,yCAAmB,CAAE,+DAA+D,CAAE,CAAE,CAAC;AACrH,CAAC;AAQY,QAAA,UAAU,GAAqB;IAC3C,SAAS,EAAE;QACV,IAAI,EAAE,qBAAqB;QAC3B,QAAQ,EAAE,qBAAqB;QAC/B,OAAO,EAAE,qBAAqB;QAE9B,QAAQ,EAAE,qBAAqB;QAC/B,KAAK,EAAE,qBAAqB;QAC5B,eAAe,EAAE,qBAAqB;QAEtC,OAAO,EAAE,qBAAqB;KAC9B;IAGD,WAAW,EAAX,UAAa,MAAa;QACzB,OAAO,+BAAc;aACnB,iBAAiB,CAAE,kBAAU,CAAC,SAAS,EAAE,MAAM,CAAE,CACjD;IACH,CAAC;IAED,QAAQ,EAAR,UAAoC,MAAQ;QAC3C,IAAI,kBAAU,CAAC,WAAW,CAAE,MAAM,CAAE;YAAG,OAAO;QAE9C,OAAO,+BAAc;aACnB,oBAAoB,CAAE,kBAAU,CAAC,SAAS,EAAE,MAAM,CAAE,CAAC;IACxD,CAAC;CACD,CAAC","file":"Repository.js","sourcesContent":["import { NotImplementedError } from \"../Errors/NotImplementedError\";\n\nimport { ModelDecorator } from \"../Model/ModelDecorator\";\nimport { ModelPrototype } from \"../Model/ModelPrototype\";\n\nimport { ObjectSchemaResolver } from \"../ObjectSchema/ObjectSchemaResolver\";\n\nimport { BaseRepository } from \"./BaseRepository\";\nimport { ResolvablePointer } from \"./ResolvablePointer\";\n\n\nexport interface Repository<MODEL extends ResolvablePointer = ResolvablePointer> {\n\t$get( uri:string, ...params:any[] ):Promise<MODEL>;\n\t$resolve( resource:MODEL, ...params:any[] ):Promise<MODEL>;\n\t$exists( uri:string, ...params:any[] ):Promise<boolean>;\n\n\t$refresh( resource:MODEL, ...params:any[] ):Promise<MODEL>;\n\t$save( resource:MODEL, ...params:any[] ):Promise<MODEL>;\n\t$saveAndRefresh( resource:MODEL, ...params:any[] ):Promise<MODEL>;\n\n\t$delete( uri:string, ...params:any[] ):Promise<void>;\n}\n\n\nfunction __throwNotImplemented():Promise<never> {\n\treturn Promise.reject( new NotImplementedError( \"Must be implemented for a specific repository implementation.\" ) );\n}\n\n// TODO: Use `unknown`\nexport type RepositoryFactory =\n\t& ModelPrototype<Repository, BaseRepository & ObjectSchemaResolver>\n\t& ModelDecorator<Repository<any>, BaseRepository>\n\t;\n\nexport const Repository:RepositoryFactory = {\n\tPROTOTYPE: {\n\t\t$get: __throwNotImplemented,\n\t\t$resolve: __throwNotImplemented,\n\t\t$exists: __throwNotImplemented,\n\n\t\t$refresh: __throwNotImplemented,\n\t\t$save: __throwNotImplemented,\n\t\t$saveAndRefresh: __throwNotImplemented,\n\n\t\t$delete: __throwNotImplemented,\n\t},\n\n\n\tisDecorated( object:object ):object is Repository {\n\t\treturn ModelDecorator\n\t\t\t.hasPropertiesFrom( Repository.PROTOTYPE, object )\n\t\t\t;\n\t},\n\n\tdecorate<T extends BaseRepository>( object:T ):T & Repository {\n\t\tif( Repository.isDecorated( object ) ) return;\n\n\t\treturn ModelDecorator\n\t\t\t.definePropertiesFrom( Repository.PROTOTYPE, object );\n\t},\n};\n"]}