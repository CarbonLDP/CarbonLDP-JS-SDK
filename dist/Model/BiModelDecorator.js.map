{"version":3,"sources":["Model/BiModelDecorator.ts"],"names":[],"mappings":";;AAAA,8CAA6C;AAE7C,mDAAyE;AAW5D,QAAA,gBAAgB,GAAyB;IACrD,iBAAiB,EAAjB,UAAmB,SAAgB,EAAE,MAAa;QACjD,OAAO,+BAAc,CAAC,iBAAiB,CAAE,SAAS,EAAE,MAAM,CAAE,CAAC;IAC9D,CAAC;IAED,oBAAoB,EAApB,UAA0D,SAAW,EAAE,MAAQ;QAC9E,IAAI,KAAK,IAAI,MAAM;YAAG,iBAAO;iBAC3B,QAAQ,CAAE,MAAM,CAAE,CAAC;QAErB,OAAO,+BAAc;aACnB,oBAAoB,CAAE,SAAS,EAAE,MAAM,CAAE,CAAC;IAC7C,CAAC;IAED,gBAAgB,EAAE,+BAAc,CAAC,gBAAgB;CACjD,CAAC","file":"BiModelDecorator.js","sourcesContent":["import { Pointer } from \"../Pointer/Pointer\";\n\nimport { ModelDecorator, ModelDecoratorFactory } from \"./ModelDecorator\";\n\n\nexport interface BiModelDecorator<MODEL extends object, $MODEL extends Pointer, BASE extends object, $BASE extends Pointer> extends ModelDecorator<MODEL, BASE> {\n\tisDecorated( object:object ):object is MODEL;\n\tisDecorated( object:Pointer ):object is $MODEL;\n\n\tdecorate<T extends object>( object:T & BASE ):T & MODEL;\n\tdecorate<T extends object>( object:T & $BASE ):T & $MODEL;\n}\n\nexport const BiModelDecorator:ModelDecoratorFactory = {\n\thasPropertiesFrom( prototype:object, object:object ):boolean {\n\t\treturn ModelDecorator.hasPropertiesFrom( prototype, object );\n\t},\n\n\tdefinePropertiesFrom<P extends object, O extends object>( prototype:P, object:O ):O & P {\n\t\tif( \"$id\" in object ) Pointer\n\t\t\t.decorate( object );\n\n\t\treturn ModelDecorator\n\t\t\t.definePropertiesFrom( prototype, object );\n\t},\n\n\tdecorateMultiple: ModelDecorator.decorateMultiple,\n};\n"]}