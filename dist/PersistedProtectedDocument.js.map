{"version":3,"sources":["PersistedProtectedDocument.ts"],"names":[],"mappings":";;AAAA,0CAQyB;AAKzB,yBAA2B;AAC3B,uDAAyD;AAEzD,+BAAiC;AAQjC;IAAA;IAgCA,CAAC;IA9BO,0BAAkB,GAAzB,UAA2B,MAAa;QACvC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAE,MAAM,CAAE;eAC3B,KAAK,CAAC,WAAW,CAAE,MAAM,EAAE,QAAQ,CAAE,CACvC;IACH,CAAC;IAEM,UAAE,GAAT,UAAW,MAAa;QACvB,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAE,MAAM,CAAE;eACvC,iBAAiB,CAAC,OAAO,CAAC,EAAE,CAAE,MAAM,CAAE,CACxC;IACH,CAAC;IAEM,gBAAQ,GAAf,UAAmC,QAAU,EAAE,SAAyB;QACvE,IAAM,0BAA0B,GAAa,QAAqB,CAAC;QAEnE,EAAE,CAAA,CAAE,OAAO,CAAC,kBAAkB,CAAE,QAAQ,CAAG,CAAC;YAAC,MAAM,CAAC,0BAA0B,CAAC;QAC/E,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAE,QAAQ,EAAE,SAAS,CAAE,CAAC;QAE1D,MAAM,CAAC,gBAAgB,CAAE,0BAA0B,EAAE;YACpD,QAAQ,EAAE;gBACT,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,IAAI;gBAClB,KAAK,EAAE,MAAM;aACb;SACD,CAAE,CAAC;QAEJ,MAAM,CAAC,0BAA0B,CAAC;IACnC,CAAC;IAEF,cAAC;AAAD,CAhCA,AAgCC,IAAA;AAhCY,0BAAO;AAkCpB,gBAA6B,cAAwC;IAAxC,+BAAA,EAAA,mBAAwC;IACpE,EAAE,CAAA,CAAE,IAAI,CAAC,UAAU,EAAG,CAAC;QAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAE,IAAI,CAAC,iBAAiB,CAAC,EAAE,EAAE,cAAc,CAAE,CAAC;IAEhG,IAAM,WAAW,GAAiB,IAAI,sBAAa,CAAE,GAAG,CAAE,CAAC;IAE3D,IAAM,SAAS,GAAgB,IAAI,qBAAY,CAAE,IAAI,iBAAQ,CAAE,IAAI,CAAC,EAAE,CAAE,CAAE;SACxE,YAAY,CAAE,IAAI,uBAAc,CAAE,IAAI,iBAAQ,CAAE,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,iBAAiB,CAAE,CAAE;SACpF,SAAS,CAAE,WAAW,CAAE,CAAE,CAAC;IAE9B,IAAM,UAAU,GAAgB,IAAI,qBAAY,CAAE,IAAI,sBAAa,CAAE,GAAG,CAAE,CAAE;SAC1E,YAAY,CAAE,IAAI,uBAAc,CAAE,IAAI,sBAAa,CAAE,GAAG,CAAE,CAAE;SAC3D,SAAS,CAAE,IAAI,sBAAa,CAAE,GAAG,CAAE,CAAE,CAAE,CAAC;IAE3C,IAAM,KAAK,GAAc,IAAI,mBAAU,CAAE,IAAI,uBAAc,EAAE;SAC3D,SAAS,CAAE,UAAU,CAAE;SACvB,UAAU,CAAE,SAAS,CAAE;SACvB,UAAU,CAAE,IAAI,mBAAU,CAAE,WAAW,CAAE;SACxC,UAAU,CAAE,UAAU,CAAE,CACzB,CACD,CAAC;IAEF,MAAM,CAAC,IAAI,CAAC,UAAU;SACpB,sBAAsB,CAA2B,IAAI,CAAC,EAAE,EAAE,cAAc,EAAE,KAAK,CAAE;SACjF,IAAI,CAAoD,UAAE,EAAuB;YAArB,iBAAS,EAAE,gBAAQ;QAC/E,MAAM,CAAC,CAAE,SAAS,CAAE,CAAC,CAAE,EAAE,QAAQ,CAAE,CAAC;IACrC,CAAC,CAAE,CAAC;AACN,CAAC","file":"PersistedProtectedDocument.js","sourcesContent":["import {\n\tConstructToken,\n\tGraphToken,\n\tIRIToken,\n\tPredicateToken,\n\tQueryToken,\n\tSubjectToken,\n\tVariableToken,\n} from \"sparqler/tokens\";\n\nimport * as Auth from \"./Auth\";\nimport * as Documents from \"./Documents\";\nimport * as HTTP from \"./HTTP\";\nimport * as NS from \"./NS\";\nimport * as PersistedDocument from \"./PersistedDocument\";\nimport * as Pointer from \"./Pointer\";\nimport * as Utils from \"./Utils\";\n\nexport interface Class extends PersistedDocument.Class {\n\taccessControlList?:Pointer.Class;\n\n\tgetACL( requestOptions?:HTTP.Request.Options ):Promise<[ Auth.PersistedACL.Class, HTTP.Response.Class ]>;\n}\n\nexport class Factory {\n\n\tstatic hasClassProperties( object:Object ):boolean {\n\t\treturn Utils.isObject( object )\n\t\t\t&& Utils.hasFunction( object, \"getACL\" )\n\t\t\t;\n\t}\n\n\tstatic is( object:Object ):boolean {\n\t\treturn Factory.hasClassProperties( object )\n\t\t\t&& PersistedDocument.Factory.is( object )\n\t\t\t;\n\t}\n\n\tstatic decorate<T extends object>( document:T, documents:Documents.Class ):T & Class {\n\t\tconst persistedProtectedDocument:T & Class = document as T & Class;\n\n\t\tif( Factory.hasClassProperties( document ) ) return persistedProtectedDocument;\n\t\tPersistedDocument.Factory.decorate( document, documents );\n\n\t\tObject.defineProperties( persistedProtectedDocument, {\n\t\t\t\"getACL\": {\n\t\t\t\twritable: false,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: getACL,\n\t\t\t},\n\t\t} );\n\n\t\treturn persistedProtectedDocument;\n\t}\n\n}\n\nfunction getACL( this:Class, requestOptions:HTTP.Request.Options = {} ):Promise<[ Auth.PersistedACL.Class, HTTP.Response.Class ]> {\n\tif( this.isResolved() ) return this._documents.get( this.accessControlList.id, requestOptions );\n\n\tconst aclGraphVar:VariableToken = new VariableToken( \"g\" );\n\n\tconst aclGetter:SubjectToken = new SubjectToken( new IRIToken( this.id ) )\n\t\t.addPredicate( new PredicateToken( new IRIToken( NS.CS.Predicate.accessControlList ) )\n\t\t\t.addObject( aclGraphVar ) );\n\n\tconst aclContent:SubjectToken = new SubjectToken( new VariableToken( \"s\" ) )\n\t\t.addPredicate( new PredicateToken( new VariableToken( \"p\" ) )\n\t\t\t.addObject( new VariableToken( \"o\" ) ) );\n\n\tconst query:QueryToken = new QueryToken( new ConstructToken()\n\t\t.addTriple( aclContent )\n\t\t.addPattern( aclGetter )\n\t\t.addPattern( new GraphToken( aclGraphVar )\n\t\t\t.addPattern( aclContent )\n\t\t)\n\t);\n\n\treturn this._documents\n\t\t._getConstructDocuments<Auth.PersistedACL.Class>( this.id, requestOptions, query )\n\t\t.then<[ Auth.PersistedACL.Class, HTTP.Response.Class ]>( ( [ documents, response ] ) => {\n\t\t\treturn [ documents[ 0 ], response ];\n\t\t} );\n}\n\nexport default Class;\n"]}