{"version":3,"sources":["PersistedProtectedDocument.ts"],"names":[],"mappings":";;;;;;;;;AAAA,kCAAiC;AAGjC,wCAAiD;AAGjD,yDAAwD;AAGxD,6CAAiC;AACjC,wCAAuC;AAQvC;IAAA;IAgCA,CAAC;IA9BO,0BAAkB,GAAzB,UAA2B,MAAa;QACvC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAE,MAAM,CAAE;eAC3B,KAAK,CAAC,WAAW,CAAE,MAAM,EAAE,QAAQ,CAAE,CACvC;IACH,CAAC;IAEM,UAAE,GAAT,UAAW,MAAa;QACvB,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAE,MAAM,CAAE;eACvC,qCAAiB,CAAC,EAAE,CAAE,MAAM,CAAE,CAChC;IACH,CAAC;IAEM,gBAAQ,GAAf,UAAmC,QAAU,EAAE,SAAmB;QACjE,IAAM,0BAA0B,GAAa,QAAqB,CAAC;QAEnE,EAAE,CAAA,CAAE,OAAO,CAAC,kBAAkB,CAAE,QAAQ,CAAG,CAAC;YAAC,MAAM,CAAC,0BAA0B,CAAC;QAC/E,qCAAiB,CAAC,QAAQ,CAAE,QAAQ,EAAE,SAAS,CAAE,CAAC;QAElD,MAAM,CAAC,gBAAgB,CAAE,0BAA0B,EAAE;YACpD,QAAQ,EAAE;gBACT,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,IAAI;gBAClB,KAAK,EAAE,MAAM;aACb;SACD,CAAE,CAAC;QAEJ,MAAM,CAAC,0BAA0B,CAAC;IACnC,CAAC;IAEF,cAAC;AAAD,CAhCA,AAgCC,IAAA;AAhCY,0BAAO;AAsCpB,gBAAiB,cAA8B;IAC9C,IAAI,iBAAiB,GAAiB,IAAI,CAAC;IAE3C,IAAI,UAA2B,CAAC;IAEhC,EAAE,CAAA,CAAE,iBAAiB,CAAC,UAAU,EAAG,CAAC,CAAC,CAAC;QACrC,UAAU,GAAG,OAAO,CAAC,OAAO,CAAE,iBAAiB,CAAC,iBAAiB,CAAE,CAAC;IACrE,CAAC;IAAC,IAAI,CAAC,CAAC;QACP,UAAU,GAAG,iBAAiB,CAAC,kBAAkB,CAAa,iCACzD,iBAAiB,CAAC,EAAE,WAAQ,OAAE,CAAC,iBAAiB,mBACnD,CAAE,CAAC,IAAI,CAAE,UAAE,EAAkD;gBAAhD,eAAO;YACrB,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAE,CAAC,CAAE,CAAC,GAAG,CAAC;QAClC,CAAC,CAAE,CAAC;IACL,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,IAAI,CAAE,UAAE,GAAW;QACpC,MAAM,CAAC,iBAAiB,CAAC,UAAU,CAAC,GAAG,CAAE,GAAG,CAAC,EAAE,EAAE,cAAc,CAAE,CAAC;IACnE,CAAC,CAAE,CAAC,IAAI,CAA8B,UAAE,EAA4C;YAA1C,WAAG,EAAE,gBAAQ;QACtD,EAAE,CAAA,CAAE,CAAE,GAAG,CAAC,OAAO,CAAE,SAAG,CAAC,IAAI,CAAG,CAAC;YAAC,MAAM,IAAI,yBAAgB,CAAE,sCAAqC,SAAG,CAAC,IAAI,aAAW,EAAE,QAAQ,CAAE,CAAC;QACjI,MAAM,CAAC,CAAE,GAAG,EAAE,QAAQ,CAAE,CAAC;IAC1B,CAAC,CAAE,CAAC;AACL,CAAC","file":"PersistedProtectedDocument.js","sourcesContent":["import { ACL } from \"./Auth/ACL\";\nimport { PersistedACL } from \"./Auth/PersistedACL\";\nimport { Documents } from \"./Documents\";\nimport { BadResponseError } from \"./HTTP/Errors\";\nimport { RequestOptions } from \"./HTTP/Request\";\nimport { Response } from \"./HTTP/Response\";\nimport { PersistedDocument } from \"./PersistedDocument\";\nimport { Pointer } from \"./Pointer\";\nimport SELECTResults from \"./SPARQL/SelectResults\";\nimport * as Utils from \"./Utils\";\nimport { CS } from \"./Vocabularies/CS\";\n\nexport interface Class extends PersistedDocument {\n\taccessControlList?:Pointer;\n\n\tgetACL( requestOptions?:RequestOptions ):Promise<[ PersistedACL, Response ]>;\n}\n\nexport class Factory {\n\n\tstatic hasClassProperties( object:Object ):boolean {\n\t\treturn Utils.isObject( object )\n\t\t\t&& Utils.hasFunction( object, \"getACL\" )\n\t\t\t;\n\t}\n\n\tstatic is( object:Object ):boolean {\n\t\treturn Factory.hasClassProperties( object )\n\t\t\t&& PersistedDocument.is( object )\n\t\t\t;\n\t}\n\n\tstatic decorate<T extends object>( document:T, documents:Documents ):T & Class {\n\t\tconst persistedProtectedDocument:T & Class = document as T & Class;\n\n\t\tif( Factory.hasClassProperties( document ) ) return persistedProtectedDocument;\n\t\tPersistedDocument.decorate( document, documents );\n\n\t\tObject.defineProperties( persistedProtectedDocument, {\n\t\t\t\"getACL\": {\n\t\t\t\twritable: false,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: getACL,\n\t\t\t},\n\t\t} );\n\n\t\treturn persistedProtectedDocument;\n\t}\n\n}\n\ninterface ACLResult {\n\tacl:Pointer;\n}\n\nfunction getACL( requestOptions?:RequestOptions ):Promise<[ PersistedACL, Response ]> {\n\tlet protectedDocument:Class = <Class> this;\n\n\tlet aclPromise:Promise<Pointer>;\n\n\tif( protectedDocument.isResolved() ) {\n\t\taclPromise = Promise.resolve( protectedDocument.accessControlList );\n\t} else {\n\t\taclPromise = protectedDocument.executeSELECTQuery<ACLResult>( `SELECT ?acl WHERE {\n\t\t\t<${ protectedDocument.id }> <${ CS.accessControlList }> ?acl.\n\t\t}` ).then( ( [ results ]:[ SELECTResults<ACLResult>, Response ] ) => {\n\t\t\treturn results.bindings[ 0 ].acl;\n\t\t} );\n\t}\n\n\treturn aclPromise.then( ( acl:Pointer ) => {\n\t\treturn protectedDocument._documents.get( acl.id, requestOptions );\n\t} ).then<[ PersistedACL, Response ]>( ( [ acl, response ]:[ PersistedACL, Response ] ) => {\n\t\tif( ! acl.hasType( ACL.TYPE ) ) throw new BadResponseError( `The response does not contains a ${ ACL.TYPE } object.`, response );\n\t\treturn [ acl, response ];\n\t} );\n}\n\nexport default Class;\n"]}