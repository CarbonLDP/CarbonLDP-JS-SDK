{"version":3,"sources":["PersistedProtectedDocument.ts"],"names":[],"mappings":";;AAAA,6BAA+B;AAC/B,6BAA+B;AAC/B,yBAA2B;AAC3B,uDAAyD;AAGzD,qCAAuC;AAEvC,+BAAiC;AAQjC;IAAA;IAgCA,CAAC;IA9BO,0BAAkB,GAAzB,UAA2B,MAAa;QACvC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAE,MAAM,CAAE;eAC3B,KAAK,CAAC,WAAW,CAAE,MAAM,EAAE,QAAQ,CAAE,CACvC;IACH,CAAC;IAEM,UAAE,GAAT,UAAW,MAAa;QACvB,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAE,MAAM,CAAE;eACvC,iBAAiB,CAAC,OAAO,CAAC,EAAE,CAAE,MAAM,CAAE,CACxC;IACH,CAAC;IAEM,gBAAQ,GAAf,UAAmC,QAAU,EAAE,SAAyB;QACvE,IAAM,0BAA0B,GAAa,QAAqB,CAAC;QAEnE,EAAE,CAAA,CAAE,OAAO,CAAC,kBAAkB,CAAE,QAAQ,CAAG,CAAC;YAAC,MAAM,CAAC,0BAA0B,CAAC;QAC/E,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAE,QAAQ,EAAE,SAAS,CAAE,CAAC;QAE1D,MAAM,CAAC,gBAAgB,CAAE,0BAA0B,EAAE;YACpD,QAAQ,EAAE;gBACT,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,IAAI;gBAClB,KAAK,EAAE,MAAM;aACb;SACD,CAAE,CAAC;QAEJ,MAAM,CAAC,0BAA0B,CAAC;IACnC,CAAC;IAEF,cAAC;AAAD,CAhCA,AAgCC,IAAA;AAhCY,0BAAO;AAkCpB,gBAAiB,cAAoC;IACpD,IAAI,iBAAiB,GAAiB,IAAI,CAAC;IAE3C,IAAI,UAAiC,CAAC;IAEtC,EAAE,CAAC,CAAE,iBAAiB,CAAC,UAAU,EAAG,CAAC,CAAC,CAAC;QACtC,UAAU,GAAG,OAAO,CAAC,OAAO,CAAE,iBAAiB,CAAC,iBAAiB,CAAE,CAAC;IACrE,CAAC;IAAC,IAAI,CAAC,CAAC;QACP,UAAU,GAAG,iBAAiB,CAAC,kBAAkB,CAAE,iCAC9C,iBAAiB,CAAC,EAAE,WAAQ,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,iBAAiB,mBAChE,CAAE,CAAC,IAAI,CAAE,UAAE,EAA4D;gBAA1D,eAAO,EAAE,gBAAQ;YAC/B,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAE,CAAC,CAAE,CAAE,KAAK,CAAmB,CAAC;QACxD,CAAC,CAAE,CAAC;IACL,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,IAAI,CAAE,UAAE,GAAiB;QAC1C,MAAM,CAAC,iBAAiB,CAAC,UAAU,CAAC,GAAG,CAAE,GAAG,CAAC,EAAE,EAAE,cAAc,CAAE,CAAC;IACnE,CAAC,CAAE,CAAC,IAAI,CAAE,UAAE,EAAkE;YAAhE,WAAG,EAAE,gBAAQ;QAC1B,EAAE,CAAA,CAAE,CAAE,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAE,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,SAAS,CAAG,CAAC;YAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAE,sCAAqC,IAAI,CAAC,GAAG,CAAC,SAAS,aAAW,EAAE,QAAQ,CAAE,CAAC;QAChL,MAAM,CAAC,CAAE,GAAG,EAAE,QAAQ,CAAE,CAAC;IAC1B,CAAC,CAAE,CAAC;AACL,CAAC","file":"PersistedProtectedDocument.js","sourcesContent":["import * as HTTP from \"./HTTP\";\nimport * as Auth from \"./Auth\";\nimport * as NS from \"./NS\";\nimport * as PersistedDocument from \"./PersistedDocument\";\nimport * as Documents from \"./Documents\";\nimport * as Pointer from \"./Pointer\";\nimport * as Resource from \"./Resource\";\nimport SELECTResults from \"./SPARQL/SELECTResults\";\nimport * as Utils from \"./Utils\";\n\nexport interface Class extends PersistedDocument.Class {\n\taccessControlList?:Pointer.Class;\n\n\tgetACL( requestOptions?:HTTP.Request.Options ):Promise<[ Auth.PersistedACL.Class, HTTP.Response.Class ]>;\n}\n\nexport class Factory {\n\n\tstatic hasClassProperties( object:Object ):boolean {\n\t\treturn Utils.isObject( object )\n\t\t\t&& Utils.hasFunction( object, \"getACL\" )\n\t\t\t;\n\t}\n\n\tstatic is( object:Object ):boolean {\n\t\treturn Factory.hasClassProperties( object )\n\t\t\t&& PersistedDocument.Factory.is( object )\n\t\t\t;\n\t}\n\n\tstatic decorate<T extends object>( document:T, documents:Documents.Class ):T & Class {\n\t\tconst persistedProtectedDocument:T & Class = document as T & Class;\n\n\t\tif( Factory.hasClassProperties( document ) ) return persistedProtectedDocument;\n\t\tPersistedDocument.Factory.decorate( document, documents );\n\n\t\tObject.defineProperties( persistedProtectedDocument, {\n\t\t\t\"getACL\": {\n\t\t\t\twritable: false,\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: getACL,\n\t\t\t},\n\t\t} );\n\n\t\treturn persistedProtectedDocument;\n\t}\n\n}\n\nfunction getACL( requestOptions?:HTTP.Request.Options ):Promise<[ Auth.PersistedACL.Class, HTTP.Response.Class ]> {\n\tlet protectedDocument:Class = <Class> this;\n\n\tlet aclPromise:Promise<Pointer.Class>;\n\n\tif ( protectedDocument.isResolved() ) {\n\t\taclPromise = Promise.resolve( protectedDocument.accessControlList );\n\t} else {\n\t\taclPromise = protectedDocument.executeSELECTQuery( `SELECT ?acl WHERE {\n\t\t\t<${ protectedDocument.id }> <${ NS.CS.Predicate.accessControlList }> ?acl.\n\t\t}` ).then( ( [ results, response ]:[ SELECTResults, HTTP.Response.Class ] ) => {\n\t\t\treturn results.bindings[ 0 ][ \"acl\" ] as Pointer.Class;\n\t\t} );\n\t}\n\n\treturn aclPromise.then( ( acl:Pointer.Class ) => {\n\t\treturn protectedDocument._documents.get( acl.id, requestOptions );\n\t} ).then( ( [ acl, response ]:[ Auth.PersistedACL.Class, HTTP.Response.Class ] ) => {\n\t\tif( ! Resource.Util.hasType( acl, Auth.ACL.RDF_CLASS ) ) throw new HTTP.Errors.BadResponseError( `The response does not contains a ${ Auth.ACL.RDF_CLASS } object.`, response );\n\t\treturn [ acl, response ];\n\t} );\n}\n\nexport default Class;\n"]}