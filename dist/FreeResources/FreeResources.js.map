{"version":3,"sources":["FreeResources/FreeResources.ts"],"names":[],"mappings":";;AAIA,0DAAyD;AAUzD,kCAAiC;AAGjC,iDAAgD;AAEhD,iDAAgD;AAmCnC,QAAA,aAAa,GAAwB;IACjD,SAAS,EAAE;QACV,SAAS,EAAE,KAAK,CAAC;QAEjB,YAAY,EAAZ,UAAkC,EAAS;YAC1C,IAAI,SAAG,CAAC,SAAS,CAAE,EAAE,CAAE;gBAAG,OAAO,EAAE,CAAC;YACpC,OAAO,mBAAQ,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAE,IAAI,EAAE,EAAE,CAAE,CAAC;QACzD,CAAC;QAED,YAAY,EAAZ,UAAoD,IAAyB;YAC5E,IAAI,CAAE,IAAI,CAAC,GAAG;gBAAG,IAAI,CAAC,GAAG,GAAG,SAAG,CAAC,eAAe,EAAE,CAAC;YAClD,OAAO,mBAAQ,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAE,IAAI,EAAE,IAAI,CAAE,CAAC;QAC3D,CAAC;QAGD,MAAM,EAAN,UAA4B,YAA8B;YACzD,OAAO,IAAI;iBACT,YAAY,CAAE,IAAI,CAAE;iBACpB,GAAG,CAAE,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,MAAM,CAAE,YAAY,CAAE,EAA/B,CAA+B,CAAE,CAClD;QACH,CAAC;KACD;IAGD,EAAE,EAAF,UAAI,KAAS;QACZ,OAAO,mBAAQ,CAAC,WAAW,CAAE,KAAK,CAAE;eAChC,qBAAa,CAAC,WAAW,CAAE,KAAK,CAAE,CACpC;IACH,CAAC;IAED,WAAW,EAAX,UAAa,MAAa;QACzB,OAAO,+BAAc;aACnB,iBAAiB,CAAE,qBAAa,CAAC,SAAS,EAAE,MAAM,CAAE,CAAC;IACxD,CAAC;IAGD,MAAM,EAAN,UAA0B,IAA0B;QACnD,IAAM,IAAI,GAAyB,MAAM,CAAC,MAAM,CAAE,EAAE,EAAE,IAAI,CAAE,CAAC;QAC7D,OAAO,qBAAa,CAAC,UAAU,CAAE,IAAI,CAAE,CAAC;IACzC,CAAC;IAED,UAAU,EAAV,UAA8B,MAA4B;QACzD,OAAO,qBAAa,CAAC,QAAQ,CAAE,MAAM,CAAE,CAAC;IACzC,CAAC;IAED,QAAQ,EAAR,UAAuC,MAAQ;QAC9C,IAAI,qBAAa,CAAC,WAAW,CAAE,MAAM,CAAE;YAAG,OAAO,MAAM,CAAC;QAExD,IAAM,IAAI,GAA8B,MAAM,CAAC,MAAM,CAA+C,MAAM,EAAE;YAC3G,iBAAiB,EAAE,mBAAQ;SAC3B,CAAE,CAAC;QAEJ,IAAM,QAAQ,GAA0B,+BAAc;aACpD,gBAAgB,CAAE,IAAI,EAAE,mBAAQ,CAAE,CAAC;QAErC,OAAO,+BAAc;aACnB,oBAAoB,CAAE,qBAAa,CAAC,SAAS,EAAE,QAAQ,CAAE,CAAC;IAC7D,CAAC;IAGD,cAAc,EAAd,UAA2B,QAA6B,EAAE,SAAmB;QAC5E,IAAM,aAAa,GAAiB,qBAAa;aAC/C,UAAU,CAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAE,CAAC;QAExC,SAAS;aACP,OAAO,CAAE,UAAA,IAAI;YACb,IAAM,cAAc,GAAwB,QAAQ,CAAC,YAAY,CAAE,IAAI,CAAE,CAAC;YAE1E,IAAM,MAAM,GAAU,aAAa,CAAC,WAAW,CAAE,IAAI,CAAE,KAAK,CAAE,EAAE,IAAI,CAAE,CAAC;YACvE,QAAQ,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAE,IAAI,EAAE,MAAM,EAAE,cAAc,EAAE,aAAa,CAAE,CAAC;QAC1F,CAAC,CAAE,CAAC;QAEL,OAAO,aAAa,CAAC;IACtB,CAAC;CACD,CAAC","file":"FreeResources.js","sourcesContent":["import { Context } from \"../Context/Context\";\n\nimport { GeneralRegistry } from \"../GeneralRegistry/GeneralRegistry\";\n\nimport { ModelDecorator } from \"../Model/ModelDecorator\";\nimport { ModelFactory } from \"../Model/ModelFactory\";\nimport { ModelPrototype } from \"../Model/ModelPrototype\";\nimport { ModelTypeGuard } from \"../Model/ModelTypeGuard\";\n\nimport { DigestedObjectSchema } from \"../ObjectSchema/DigestedObjectSchema\";\n\nimport { Pointer } from \"../Pointer/Pointer\";\n\nimport { RDFNode } from \"../RDF/Node\";\nimport { URI } from \"../RDF/URI\";\n\nimport { BaseRegistry } from \"../Registry/BaseRegistry\";\nimport { Registry } from \"../Registry/Registry\";\n\nimport { Resource } from \"../Resource/Resource\";\n\nimport { BaseFreeResources } from \"./BaseFreeResources\";\n\n\nexport interface FreeResources extends Registry<Resource> {\n\t$registry:GeneralRegistry<any>;\n\n\t$_getLocalID( id:string ):string;\n\n\t$_addPointer<T extends object>( base:T & Partial<Pointer> ):T & Resource;\n\n\n\ttoJSON( contextOrKey?:Context | string ):RDFNode[];\n}\n\n\nexport type OverriddenMembers =\n\t| \"$registry\"\n\t| \"$_getLocalID\"\n\t| \"$_addPointer\"\n\t;\n\nexport interface FreeResourcesUtils {\n\tparseFreeNodes( registry:GeneralRegistry<any>, freeNodes:RDFNode[] ):FreeResources;\n}\n\nexport type FreeResourcesFactory =\n\t& ModelPrototype<FreeResources, Registry, OverriddenMembers>\n\t& ModelDecorator<FreeResources, BaseFreeResources>\n\t& ModelTypeGuard<FreeResources>\n\t& ModelFactory<FreeResources, BaseFreeResources>\n\t& FreeResourcesUtils\n\t;\n\nexport const FreeResources:FreeResourcesFactory = {\n\tPROTOTYPE: {\n\t\t$registry: void 0,\n\n\t\t$_getLocalID( this:FreeResources, id:string ):string {\n\t\t\tif( URI.isBNodeID( id ) ) return id;\n\t\t\treturn Registry.PROTOTYPE.$_getLocalID.call( this, id );\n\t\t},\n\n\t\t$_addPointer<T extends object>( this:FreeResources, base:T & Partial<Pointer> ):T & Resource {\n\t\t\tif( ! base.$id ) base.$id = URI.generateBNodeID();\n\t\t\treturn Registry.PROTOTYPE.$_addPointer.call( this, base );\n\t\t},\n\n\n\t\ttoJSON( this:FreeResources, contextOrKey?:Context | string ):RDFNode[] {\n\t\t\treturn this\n\t\t\t\t.$getPointers( true )\n\t\t\t\t.map( resource => resource.toJSON( contextOrKey ) )\n\t\t\t\t;\n\t\t},\n\t},\n\n\n\tis( value:any ):value is FreeResources {\n\t\treturn Registry.isDecorated( value )\n\t\t\t&& FreeResources.isDecorated( value )\n\t\t\t;\n\t},\n\n\tisDecorated( object:object ):object is FreeResources {\n\t\treturn ModelDecorator\n\t\t\t.hasPropertiesFrom( FreeResources.PROTOTYPE, object );\n\t},\n\n\n\tcreate<T extends object>( data:T & BaseFreeResources ):T & FreeResources {\n\t\tconst copy:T & BaseFreeResources = Object.assign( {}, data );\n\t\treturn FreeResources.createFrom( copy );\n\t},\n\n\tcreateFrom<T extends object>( object:T & BaseFreeResources ):T & FreeResources {\n\t\treturn FreeResources.decorate( object );\n\t},\n\n\tdecorate<T extends BaseFreeResources>( object:T ):T & FreeResources {\n\t\tif( FreeResources.isDecorated( object ) ) return object;\n\n\t\tconst base:T & BaseRegistry<Resource> = Object.assign<T, Pick<FreeResources, \"$__modelDecorator\">>( object, {\n\t\t\t$__modelDecorator: Resource,\n\t\t} );\n\n\t\tconst resource:T & Registry<Resource> = ModelDecorator\n\t\t\t.decorateMultiple( base, Registry );\n\n\t\treturn ModelDecorator\n\t\t\t.definePropertiesFrom( FreeResources.PROTOTYPE, resource );\n\t},\n\n\n\tparseFreeNodes( this:void, registry:GeneralRegistry<any>, freeNodes:RDFNode[] ):FreeResources {\n\t\tconst freeResources:FreeResources = FreeResources\n\t\t\t.createFrom( { $registry: registry } );\n\n\t\tfreeNodes\n\t\t\t.forEach( node => {\n\t\t\t\tconst digestedSchema:DigestedObjectSchema = registry.getSchemaFor( node );\n\n\t\t\t\tconst target:object = freeResources.$getPointer( node[ \"@id\" ], true );\n\t\t\t\tregistry.$context.jsonldConverter.compact( node, target, digestedSchema, freeResources );\n\t\t\t} );\n\n\t\treturn freeResources;\n\t},\n};\n\n"]}