{
	"modules": [
		{
			"suiteType": "module",
			"name": "AccessPoint",
			"description": null,
			"path": "carbonldp/AccessPoint",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "AccessPoint",
					"description": "Interface that represents a persisted Carbon LDP AccessPoint.",
					"generics": null,
					"path": "CarbonLDP.AccessPoint",
					"super-classes": [
						{
							"name": "CarbonLDP.TransientAccessPoint"
						},
						{
							"name": "CarbonLDP.Document"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "hasMemberRelation",
							"type": "CarbonLDP.Pointer",
							"description": "The member relation of the access point manages.",
							"optional": false
						},
						{
							"access": null,
							"name": "insertedContentRelation",
							"type": "CarbonLDP.Pointer",
							"description": "The inserted content relation of the access point.",
							"optional": false
						},
						{
							"access": null,
							"name": "isMemberOfRelation",
							"type": "CarbonLDP.Pointer",
							"description": "The inverted relation of the access point.",
							"optional": false
						},
						{
							"access": null,
							"name": "membershipResource",
							"type": "CarbonLDP.Document",
							"description": "The membership resource the access point belongs to.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "AccessPointFactory",
					"description": "Interface with the factory, decorate and utils methods of a `CarbonLDP.AccessPointFactory` object.",
					"generics": null,
					"path": "CarbonLDP.AccessPointFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.TransientAccessPointFactory"
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "is",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns true if the object provided is considered a `CarbonLDP.AccessPoint` object",
									"arguments": [
										{
											"name": "value",
											"type": "any"
										}
									],
									"returns": {
										"type": "value is CarbonLDP.AccessPoint"
									}
								}
							],
							"returns": {
								"type": "value is CarbonLDP.AccessPoint"
							},
							"should-exists": true,
							"should-be a TransientAccessPoint": true,
							"should-be a Document": true,
							"should-return true when all assertions": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "BaseAccessPoint",
					"description": "Interface that represents the basic properties to construct a `CarbonLDP.TransientAccessPoint`.",
					"generics": null,
					"path": "CarbonLDP.BaseAccessPoint",
					"properties": [
						{
							"access": null,
							"name": "hasMemberRelation",
							"type": "string | CarbonLDP.Pointer",
							"description": "The string URI or pointer URI that represents the member relation that the access point will manage.",
							"optional": false
						},
						{
							"access": null,
							"name": "insertedContentRelation",
							"type": "string | CarbonLDP.Pointer",
							"description": "The string URI or pointer URI that represents the inserted content relation of the access point.",
							"optional": true
						},
						{
							"access": null,
							"name": "isMemberOfRelation",
							"type": "string | CarbonLDP.Pointer",
							"description": "The string URI or pointer URI that represents the inverted relation that the access point will create.",
							"optional": true
						},
						{
							"access": null,
							"name": "membershipResource",
							"type": "CarbonLDP.Pointer",
							"description": "Pointer to the parent resource the access point will manage the determined member relation.",
							"optional": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "TransientAccessPoint",
					"description": "Interface that represents the document of an in-memory access point.",
					"generics": null,
					"path": "CarbonLDP.TransientAccessPoint",
					"super-classes": [
						{
							"name": "CarbonLDP.LDP.TransientDirectContainer"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "hasMemberRelation",
							"type": "CarbonLDP.Pointer",
							"description": "Pointer that represents the member relation that the access point will manage.",
							"optional": false
						},
						{
							"access": null,
							"name": "insertedContentRelation",
							"type": "CarbonLDP.Pointer",
							"description": "Pointer that represents the inserted content relation of the access point.",
							"optional": true
						},
						{
							"access": null,
							"name": "isMemberOfRelation",
							"type": "CarbonLDP.Pointer",
							"description": "Pointer that represents the inverted relation that the access point will create.",
							"optional": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "TransientAccessPointFactory",
					"description": "Interface with the factory, decorate and utils methods of a `CarbonLDP.TransientAccessPointFactory` object.",
					"generics": null,
					"path": "CarbonLDP.TransientAccessPointFactory",
					"properties": [
						{
							"access": null,
							"name": "TYPE",
							"type": "CarbonLDP.Vocabularies.C.AccessPoint",
							"description": null,
							"optional": false
						}
					],
					"methods": [
						{
							"name": "create",
							"signatures": [
								{
									"access": null,
									"name": "create",
									"generics": [
										"T extends object"
									],
									"description": "Creates a `CarbonLDP.TransientAccessPoint` object with the parameters specified.",
									"arguments": [
										{
											"name": "data",
											"type": "T & CarbonLDP.BaseAccessPoint",
											"description": "Data necessary to create an access point."
										}
									],
									"returns": {
										"type": "CarbonLDP.TransientAccessPoint"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "CarbonLDP.TransientAccessPoint"
							}
						},
						{
							"name": "createFrom",
							"signatures": [
								{
									"access": null,
									"name": "createFrom",
									"generics": [
										"T extends object"
									],
									"description": "Creates a `CarbonLDP.TransientAccessPoint` object from the object and parameters specified.",
									"arguments": [
										{
											"name": "object",
											"type": "T & CarbonLDP.BaseAccessPoint",
											"description": "Object that will be converted into an AccessPoint."
										}
									],
									"returns": {
										"type": "T & CarbonLDP.TransientAccessPoint"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "T & CarbonLDP.TransientAccessPoint"
							}
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "is",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns true if the object provided is considered a `CarbonLDP.TransientAccessPoint` object",
									"arguments": [
										{
											"name": "value",
											"type": "any"
										}
									],
									"returns": {
										"type": "value is CarbonLDP.TransientAccessPoint"
									}
								}
							],
							"returns": {
								"type": "value is CarbonLDP.TransientAccessPoint"
							},
							"should-exists": true,
							"should-be a TransientDirectContainer": true,
							"should-return true when all assertions": true
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "AccessPoint",
						"type": "CarbonLDP.AccessPointFactory",
						"description": "Constant that implements the `CarbonLDP.AccessPointFactory` interface.",
						"optional": null,
						"should-exists": true
					},
					{
						"access": "static",
						"name": "TransientAccessPoint",
						"type": "CarbonLDP.TransientAccessPointFactory",
						"description": "Constant that implements the `CarbonLDP.TransientAccessPointFactory` interface.",
						"optional": null
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "CarbonLDP",
			"description": null,
			"path": "carbonldp/CarbonLDP",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "CarbonLDP",
					"description": "The main class of the SDK, which contains all the references of the modules used in the the SDK.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.DocumentsContext"
						}
					],
					"properties": {
						"static": [
							{
								"access": "static",
								"name": "version",
								"type": "string",
								"description": "Returns the version of the SDK.",
								"optional": null
							}
						],
						"instance": [
							{
								"access": "instance",
								"name": "baseURI",
								"type": "string",
								"description": "Returns the URI of your Carbon LDP.",
								"optional": null
							},
							{
								"access": "instance",
								"name": "documents",
								"type": "CarbonLDP.Document",
								"description": "Representation of the root document of the platform instance.",
								"optional": null
							},
							{
								"access": "instance",
								"name": "registry",
								"type": "CarbonLDP.DocumentsRegistry",
								"description": "Registry that stores the documents of a Carbon LDP instance.",
								"optional": null
							},
							{
								"access": "instance",
								"name": "version",
								"type": "string",
								"description": "Returns the version of the SDK.",
								"optional": null
							}
						]
					},
					"reexports": [
						{
							"access": "static",
							"name": "AbstractContext",
							"originalLocation": "CarbonLDP.AbstractContext"
						},
						{
							"access": "static",
							"name": "AccessPoint",
							"originalLocation": "carbonldp/AccessPoint#AccessPoint"
						},
						{
							"access": "static",
							"name": "ContainerType",
							"originalLocation": "CarbonLDP.ContainerType"
						},
						{
							"access": "static",
							"name": "DigestedObjectSchema",
							"originalLocation": "CarbonLDP.DigestedObjectSchema"
						},
						{
							"access": "static",
							"name": "DigestedObjectSchemaProperty",
							"originalLocation": "CarbonLDP.DigestedObjectSchemaProperty"
						},
						{
							"access": "static",
							"name": "Document",
							"originalLocation": "carbonldp/Document#Document"
						},
						{
							"access": "static",
							"name": "Errors",
							"originalLocation": "carbonldp/Errors"
						},
						{
							"access": "static",
							"name": "Fragment",
							"originalLocation": "carbonldp/Fragment#Fragment"
						},
						{
							"access": "static",
							"name": "FreeResources",
							"originalLocation": "carbonldp/FreeResources#FreeResources"
						},
						{
							"access": "static",
							"name": "GlobalContext",
							"originalLocation": "CarbonLDP.GlobalContext"
						},
						{
							"access": "static",
							"name": "HTTP",
							"originalLocation": "carbonldp/HTTP"
						},
						{
							"access": "static",
							"name": "JSONLD",
							"originalLocation": "carbonldp/JSONLD"
						},
						{
							"access": "static",
							"name": "LDP",
							"originalLocation": "carbonldp/LDP"
						},
						{
							"access": "static",
							"name": "LDPatch",
							"originalLocation": "carbonldp/LDPatch"
						},
						{
							"access": "static",
							"name": "Messaging",
							"originalLocation": "carbonldp/Messaging"
						},
						{
							"access": "static",
							"name": "ObjectSchemaDigester",
							"originalLocation": "CarbonLDP.ObjectSchemaDigester"
						},
						{
							"access": "static",
							"name": "ObjectSchemaUtils",
							"originalLocation": "CarbonLDP.ObjectSchemaUtils"
						},
						{
							"access": "static",
							"name": "Pointer",
							"originalLocation": "carbonldp/Pointer#Pointer"
						},
						{
							"access": "static",
							"name": "PointerType",
							"originalLocation": "CarbonLDP.PointerType"
						},
						{
							"access": "static",
							"name": "RDF",
							"originalLocation": "carbonldp/RDF"
						},
						{
							"access": "static",
							"name": "Resource",
							"originalLocation": "carbonldp/Resource#Resource"
						},
						{
							"access": "static",
							"name": "SHACL",
							"originalLocation": "carbonldp/SHACL"
						},
						{
							"access": "static",
							"name": "SPARQL",
							"originalLocation": "carbonldp/SPARQL"
						},
						{
							"access": "static",
							"name": "System",
							"originalLocation": "carbonldp/System"
						},
						{
							"access": "static",
							"name": "TransientAccessPoint",
							"originalLocation": "carbonldp/AccessPoint#TransientAccessPoint"
						},
						{
							"access": "static",
							"name": "TransientFragment",
							"originalLocation": "carbonldp/Fragment#TransientFragment"
						},
						{
							"access": "static",
							"name": "Utils",
							"originalLocation": "carbonldp/Utils"
						},
						{
							"access": "static",
							"name": "Vocabularies",
							"originalLocation": "carbonldp/Vocabularies"
						}
					],
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"signatures": [
							{
								"generics": null,
								"description": null,
								"arguments": [
									{
										"name": "url",
										"type": "string",
										"description": "The URL where the platform instance is located on."
									}
								],
								"returns": {
									"type": "void"
								}
							},
							{
								"generics": null,
								"description": null,
								"arguments": [
									{
										"name": "settings",
										"type": "CarbonLDP.SettingsCarbonSettings",
										"description": "A settings object to fully configure the Carbon instance."
									}
								],
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"should-exists": true,
						"should-be instantiable": true,
						"should-initialize documents root document": true,
						"should-throw error when URL has not protocol": true,
						"should-throw error when URL has invalid protocol": true,
						"should-assign the URL as the base URI with slash at the end": true,
						"should-throw error when invalid host property": true,
						"should-throw error when invalid host with protocol": true,
						"should-throw error when invalid host with port": true,
						"should-create base URI with settings host": true,
						"should-create base URI with settings host and ssl": true,
						"should-create base URI with settings host and port": true,
						"should-create base URI with settings host, ssl and port": true,
						"should-have the default settings when url provided": true,
						"should-merge when settings provided": true,
						"should-retrieve the version form the class": true
					},
					"methods": {
						"instance": [
							{
								"access": "instance",
								"suiteType": "method",
								"name": "getPlatformMetadata",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Retrieves the Metadata related to the Carbon LDP Platform.",
										"arguments": null,
										"returns": {
											"type": "Promise<CarbonLDP.System.PlatformMetadata>"
										}
									}
								],
								"returns": {
									"type": "Promise<CarbonLDP.System.PlatformMetadata>"
								},
								"should-exists": true,
								"should-ask for `system.platform` path": true,
								"should-retrieve a PlatformMetadata object": true
							},
							{
								"access": "instance",
								"suiteType": "method",
								"name": "resolve",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Resolve the URI provided in the scope your Carbon LDP Platform instance.",
										"arguments": [
											{
												"name": "relativeURI",
												"type": "string",
												"description": "Relative URI to be resolved."
											}
										],
										"returns": {
											"type": "string",
											"description": "The absolute URI that has been resolved."
										}
									}
								],
								"returns": {
									"type": "string",
									"description": "The absolute URI that has been resolved."
								},
								"should-exists": true,
								"should-resolve relative URIs": true,
								"should-not resolve absolute URIs": true
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "CarbonLDPSettings",
			"description": null,
			"path": "carbonldp/CarbonLDPSettings",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "CarbonLDPSettings",
					"description": "Interface of the possible settings used by the Carbon class.",
					"generics": null,
					"path": "CarbonLDP.CarbonLDPSettings",
					"super-classes": [
						{
							"name": "CarbonLDP.DocumentsContextSettings"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "host",
							"type": "string",
							"description": "The host of the platform to connect to.",
							"optional": false
						},
						{
							"access": null,
							"name": "post",
							"type": "number",
							"description": "The optional port of the host to connect to.",
							"optional": true
						},
						{
							"access": null,
							"name": "ssl",
							"type": "boolean",
							"description": "Flag that indicates is the server is under a secure connection or not.\nBy default it will be set to true, making the host to be resolved as `https://`",
							"optional": true
						}
					]
				}
			]
		},
		{
			"suiteType": "module",
			"name": "Context",
			"description": null,
			"path": "carbonldp/Context",
			"classes": [
				{
					"suiteType": "class",
					"name": "AbstractContext",
					"description": "Abstract class for defining contexts.",
					"generics": [
						"M extends CarbonLP.Pointer",
						"P extends CarbonLP.AbstractContext<any, any>"
					],
					"interfaces": [
						"CarbonLDP.Context"
					],
					"path": "CarbonLDP.AbstractContext",
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "baseURI",
								"type": "string",
								"description": "The base URI of the context.\nTo be defined by the subclass.",
								"optional": null
							},
							{
								"access": "instance",
								"name": "parentContext",
								"type": "P",
								"description": "The parent context provided in the constructor.\nEmpty if not provided in constructor",
								"optional": null
							},
							{
								"access": "instance",
								"name": "registry",
								"type": "CarbonLDP.AbstractRegistry<M, CarbonLDP.AbstractContext<M, P>>",
								"description": "Registry that stores the pointers of the current in accordance to the its base URI.\nTo be defined by the subclass.",
								"optional": null
							}
						]
					},
					"should-exists": true,
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"signatures": [
							{
								"generics": null,
								"description": null,
								"arguments": [
									{
										"name": "parentContext",
										"type": "P",
										"optional": true
									}
								],
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"sub-class should be an instance": true,
						"should-not have a parentContext": true,
						"should-assign parent context if provided": true
					},
					"methods": {
						"instance": [
							{
								"access": "instance",
								"suiteType": "method",
								"name": "clearObjectSchema",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Remove the schema of the type specified, or the general schema if no type is provided.",
										"arguments": [
											{
												"name": "type",
												"type": "string",
												"optional": true,
												"description": "The URI of the type to remove its schema."
											}
										],
										"returns": {
											"type": "void"
										}
									}
								],
								"returns": {
									"type": "void"
								},
								"should-exists": true,
								"should-remove absolute typed schema": true,
								"should-remove prefixed typed schema": true,
								"should-remove relative typed schema with vocab set": true,
								"should-clean general object schema": true
							},
							{
								"access": "instance",
								"suiteType": "method",
								"name": "extendObjectSchema",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Extends the schema for a specified type of Resource.\nIf a schema for the type exists in the parent context, this is duplicated for the actual context, but only the first time this schema is extended.",
										"arguments": [
											{
												"name": "type",
												"type": "string",
												"description": "The URI of the type to extends its schema."
											},
											{
												"name": "objectSchema",
												"type": "CarbonLDP.DigestedObjectSchema",
												"description": "The new schema that will extends the previous one."
											}
										],
										"returns": {
											"type": "void"
										}
									},
									{
										"generics": null,
										"description": "Extends the general schema of the current context.\nIf a general schema exists in the parent context, this is duplicated for the current context, but only the first time the schema is extended.",
										"arguments": [
											{
												"name": "objectSchema",
												"type": "CarbonLDP.DigestedObjectSchema",
												"description": "The new schema that will extends the previous one."
											}
										],
										"returns": {
											"type": "void"
										}
									}
								],
								"returns": {
									"type": "void"
								},
								"should-exists": true,
								"should-add when absolute type schema does not exists": true,
								"should-add when prefixed type schema does not exists": true,
								"should-add when relative type schema does not exists and vocab is set": true,
								"should-merge when type schema exists": true,
								"should-add absolute model schema when does not exists": true,
								"should-add prefixed model schema when does not exists": true,
								"should-add relative model schema when does not exists and vocab is set": true,
								"should-merge with general schema": true,
								"should-merge with parent schema when no local schema": true,
								"should-not affect merge to parent schema when no local schema": true,
								"should-merge general schema and model schema": true
							},
							{
								"access": "instance",
								"suiteType": "method",
								"name": "getObjectSchema",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Returns the ObjectSchema for the specified type",
										"arguments": [
											{
												"name": "type",
												"type": "string",
												"optional": true,
												"description": "The URI of the type to look for its schema."
											}
										],
										"returns": {
											"type": "CarbonLDP.DigestedObjectSchema",
											"description": "The specified schema to look for. If no schema was found `null` will be returned."
										}
									},
									{
										"generics": null,
										"description": "Returns the general object schema of the context.",
										"arguments": null,
										"returns": {
											"type": "CarbonLDP.DigestedObjectSchema",
											"description": "The general schema of the context."
										}
									}
								],
								"returns": {
									"type": "CarbonLDP.DigestedObjectSchema",
									"description": "The specified schema to look for. If no schema was found `null` will be returned."
								},
								"should-exists": true,
								"should-throw error when not existing schema in schema maps": true,
								"should-return schema with absolute type": true,
								"should-return schema when prefixed type with defined prefix in general": true,
								"should-return schema when relative and default vocab schema": true,
								"should-return general schema with base": true,
								"should-not replace base in general schema when already set": true,
								"should-return general schema with vocab when setting set": true,
								"should-not replace vocab in general schema when already set and setting set": true
							},
							{
								"access": "instance",
								"suiteType": "method",
								"name": "hasObjectSchema",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Returns true if there is an ObjectSchema for the specified type.",
										"arguments": [
											{
												"name": "type",
												"type": "string",
												"description": "The URI of the type to look for its schema."
											}
										],
										"returns": {
											"type": "boolean"
										}
									}
								],
								"returns": {
									"type": "boolean"
								},
								"should-exists": true,
								"should-return false when not existing schema in schema maps": true,
								"should-return true when schema with absolute type": true,
								"should-return true when prefixed type with defined prefix in general": true,
								"should-return true when relative and default vocab schema": true
							},
							{
								"access": "instance",
								"suiteType": "method",
								"name": "resolve",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Abstract method that returns an absolute URI in accordance to the context scope.",
										"arguments": [
											{
												"name": "relativeURI",
												"type": "string"
											}
										],
										"returns": {
											"type": "string"
										}
									}
								],
								"returns": {
									"type": "string"
								},
								"should-exists": true,
								"should-return same string when baseURI undefined": true,
								"should-resolve from the baseURI defined": true,
								"should-return same IRI when absolute and baseURI defined": true
							}
						]
					}
				},
				{
					"suiteType": "class",
					"name": "GlobalContext",
					"description": "Base class of every Context in the SDK.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.GlobalContext",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.AbstractContext<Pointer, undefined>"
						}
					],
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "baseURI",
								"type": "\"\"",
								"description": "An empty string since this context accepts any resource to be stored.",
								"optional": null
							},
							{
								"access": "instance",
								"name": "parentContext",
								"type": "undefined",
								"description": "Undefined since the singleton `CarbonLDP.GlobalContext#instance` is used as a parent context for every CarbonLDP context.",
								"optional": null
							},
							{
								"access": "instance",
								"name": "registry",
								"type": "CarbonLDP.PointerRegistry",
								"description": "Registry that stores simple pointers for any resource.\nThis resources cannot be resolved since the GlobalContext does not have a repository.",
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "instance",
								"type": "CarbonLDP.GlobalContext",
								"description": "The singleton for the GlobalContext. This is used as the parent context for every CarbonLDP instance.",
								"optional": null,
								"should-has default decorators": true
							}
						]
					}
				}
			],
			"is-defined": true,
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "Context",
					"description": "Interface that every context in the SDK implements.",
					"generics": null,
					"path": "CarbonLDP.Context",
					"properties": [
						{
							"access": null,
							"name": "parentContext",
							"type": "CarbonLDP.Context",
							"description": "The parent context of the current context. It will be `null` when the context has no parent.",
							"optional": false
						},
						{
							"access": null,
							"name": "registry",
							"type": "CarbonLDP.Registry",
							"description": "The registry the context stores its resources.",
							"optional": false
						}
					],
					"methods": [
						{
							"name": "_resolvePath",
							"signatures": [
								{
									"access": null,
									"name": "_resolvePath",
									"generics": null,
									"description": "Resolves the path provided into an URL using the `path` settings of the context.",
									"arguments": [
										{
											"name": "path",
											"type": "string",
											"description": "The dot notation string that refers the path declared in the settings of the context."
										}
									],
									"returns": {
										"type": "string",
										"description": "The absolute URI of the path provided."
									},
									"optional": false
								}
							],
							"returns": {
								"type": "string",
								"description": "The absolute URI of the path provided."
							}
						},
						{
							"name": "clearObjectSchema",
							"signatures": [
								{
									"access": null,
									"name": "clearObjectSchema",
									"generics": null,
									"description": "Remove the schema of the type specified, or the general schema if no type is provided.",
									"arguments": [
										{
											"name": "type",
											"type": "string",
											"optional": true,
											"description": "The URI of the type to remove its schema."
										}
									],
									"returns": {
										"type": "void"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "void"
							}
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "extendObjectSchema",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Extends the schema for a specified type of Resource.\nIf a schema for the type exists in the parent context, this is duplicated for the actual context, but only the first time this schema is extended.",
									"arguments": [
										{
											"name": "type",
											"type": "string",
											"description": "The URI of the type to extends its schema."
										},
										{
											"name": "objectSchema",
											"type": "CarbonLDP.DigestedObjectSchema",
											"description": "The new schema that will extends the previous one."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Extends the general schema of the current context.\nIf a general schema exists in the parent context, this is duplicated for the current context, but only the first time the schema is extended.",
									"arguments": [
										{
											"name": "objectSchema",
											"type": "CarbonLDP.DigestedObjectSchema",
											"description": "The new schema that will extends the previous one."
										}
									],
									"returns": {
										"type": "void"
									}
								}
							],
							"returns": {
								"type": "void"
							}
						},
						{
							"name": "getBaseURI",
							"signatures": [
								{
									"access": null,
									"name": "getBaseURI",
									"generics": null,
									"description": "Returns the base URI of the current context.",
									"arguments": [],
									"returns": {
										"type": "string",
										"description": "The base URI of the context."
									},
									"optional": false
								}
							],
							"returns": {
								"type": "string",
								"description": "The base URI of the context."
							}
						},
						{
							"name": "getObjectSchema",
							"signatures": [
								{
									"access": null,
									"name": "getObjectSchema",
									"generics": null,
									"description": "Returns the ObjectSchema for the specified type. If no type is specified, the general object schema of the context should be returned.",
									"arguments": [
										{
											"name": "type",
											"type": "string",
											"optional": true,
											"description": "The URI of the type to look for its schema."
										}
									],
									"returns": {
										"type": "CarbonLDP.DigestedObjectSchema",
										"description": "The specified schema to look for."
									},
									"optional": false
								}
							],
							"returns": {
								"type": "CarbonLDP.DigestedObjectSchema",
								"description": "The specified schema to look for."
							}
						},
						{
							"name": "hasObjectSchema",
							"signatures": [
								{
									"access": null,
									"name": "hasObjectSchema",
									"generics": null,
									"description": "Returns true if there is an ObjectSchema for the specified type.",
									"arguments": [
										{
											"name": "type",
											"type": "string",
											"description": "The URI of the type to look for its schema."
										}
									],
									"returns": {
										"type": "boolean"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "boolean"
							}
						},
						{
							"name": "resolve",
							"signatures": [
								{
									"access": null,
									"name": "resolve",
									"generics": null,
									"description": "Resolves the relative URI provided in accordance to the base URI of the context.",
									"arguments": [
										{
											"name": "relativeURI",
											"type": "string",
											"description": "The relative URI to be resolved."
										}
									],
									"returns": {
										"type": "string",
										"description": "The resolved absolute URI from the relative provided."
									},
									"optional": false
								}
							],
							"returns": {
								"type": "string",
								"description": "The resolved absolute URI from the relative provided."
							}
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "ContextSettings",
					"description": "Interface of the possible settings of a Context.",
					"generics": null,
					"path": "CarbonLDP.ContextSettings",
					"should-exists": true,
					"properties": [
						{
							"access": null,
							"name": "vocabulary",
							"type": "string",
							"description": "Optional default vocabulary to use as in the general schema of the context.",
							"optional": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "DocumentPaths",
					"description": "Interface that describe the paths inside a respective document",
					"generics": null,
					"path": "CarbonLDP.DocumentPaths",
					"should-exists": true,
					"properties": [
						{
							"access": null,
							"name": "paths",
							"type": "CarbonLDP.Paths",
							"description": null,
							"optional": true
						},
						{
							"access": null,
							"name": "slug",
							"type": "string",
							"description": null,
							"optional": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "DocumentsContext",
					"description": "Context that manages the `CarbonLDP.Documents` objects.",
					"generics": null,
					"path": "CarbonLDP.DocumentsContext",
					"properties": [
						{
							"messaging": {
								"access": "instance",
								"name": "messaging",
								"type": "CarbonLDP.Messaging.MessagingService",
								"description": "Service that contains the RAW methods to manage the messaging/real-time features.",
								"optional": null
							}
						}
					],
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"signatures": [
							{
								"generics": null,
								"description": null,
								"arguments": [
									{
										"name": "url",
										"type": "string",
										"description": "The base URL of the context."
									},
									{
										"name": "settings",
										"type": "CarbonLDP.ContextSettings",
										"optional": true,
										"description": "Customizable settings of the context"
									}
								],
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"should-be instantiable": true,
						"should-initialize CarbonLDP.registry": true,
						"should-initialize CarbonLDP.repository": true,
						"should-initialize CarbonLDP.messaging": true
					},
					"methods": [
						{
							"_resolvePath": {
								"access": "instance",
								"suiteType": "method",
								"name": "_resolvePath",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Resolves the path provided into an URL using the `path` settings of the context.",
										"arguments": [
											{
												"name": "path",
												"type": "string",
												"description": "The dot notation string that refers the path declared in the settings of the context."
											}
										],
										"returns": {
											"type": "string",
											"description": "The absolute URI of the path provided."
										}
									}
								],
								"returns": {
									"type": "string",
									"description": "The absolute URI of the path provided."
								},
								"should-exists": true,
								"should-throw error when no settings": true,
								"should-throw error when no settings paths": true,
								"should-throw error when path not found in first level": true,
								"should-throw error when path not found in second level string": true,
								"should-throw error when path not found in parent level object without paths": true,
								"should-throw error when path not found in parent level object with empty paths": true,
								"should-throw error when path not found in parent level object with not target path": true,
								"should-throw error when no slug in parent level object": true,
								"should-throw error when no slug in target level object": true,
								"should-resolve first level path string": true,
								"should-resolve first level path object": true,
								"should-resolve second level path string": true,
								"should-resolve second level path object": true
							}
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "DocumentsContextSettings",
					"description": "Interface of the possible settings of a DocumentsContext.",
					"generics": null,
					"path": "CarbonLDP.DocumentsContextSettings",
					"should-exists": true,
					"super-classes": [
						{
							"name": "CarbonLDP.ContextSettings"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "paths",
							"type": "CarbonLDP.Paths",
							"description": null,
							"optional": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "Paths",
					"description": "Interface that describe the key path key and its respective URI slug of another `CarbonLDP.DocumentPaths` of a child document.",
					"generics": null,
					"path": "CarbonLDP.Paths",
					"properties": [
						{
							"access": null,
							"name": "[ document:string ]",
							"type": "string | CarbonLDP.DocumentPaths",
							"description": null,
							"optional": false
						}
					]
				}
			]
		},
		{
			"suiteType": "module",
			"name": "Document",
			"description": null,
			"path": "carbonldp/Document",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "BaseDocument",
					"description": "Interface with the base properties of a document.",
					"generics": null,
					"path": "CarbonLDP.BaseDocument",
					"super-classes": [
						{
							"name": "CarbonLDP.BaseResource"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "defaultInteractionModel",
							"type": "CarbonLDP.Pointer | string",
							"description": "A Pointer URI representing the default interaction model of the document when persisted.",
							"optional": true
						},
						{
							"access": null,
							"name": "hasMemberRelation",
							"type": "CarbonLDP.Pointer | string",
							"description": "A Pointer with the member of relation of the document.",
							"optional": true
						},
						{
							"access": null,
							"name": "insertedContentRelation",
							"type": "CarbonLDP.Pointer | string",
							"description": "Pointer that represents the inserted content relation of the document.",
							"optional": true
						},
						{
							"access": null,
							"name": "isMemberOfRelation",
							"type": "CarbonLDP.Pointer | string",
							"description": "A Pointer with the inverted relation the document will have.",
							"optional": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "Document",
					"description": "Interface that represents a c:Document of a Carbon LDP instance.",
					"generics": null,
					"path": "CarbonLDP.Document",
					"super-classes": [
						{
							"name": "CarbonLDP.Document.Traits.QueryableDocumentTrait"
						},
						{
							"name": "CarbonLDP.Document.Traits.SPARQLDocumentTrait"
						},
						{
							"name": "CarbonLDP.Document.Traits.EventEmitterDocumentTrait"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "__modelDecorator",
							"type": "CarbonLDP.Model.ModelDecorator<CarbonLDP.Fragment>",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "__resourcesMap",
							"type": "Map<string, CarbonLDP.Fragment>",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "__savedFragments",
							"type": "CarbonLDP.Fragment[]",
							"description": "Array with a copy of every fragment that that is currently persisted in the server.",
							"optional": false
						},
						{
							"access": null,
							"name": "accessPoints",
							"type": "CarbonLDP.Document[]",
							"description": "Array with the access points of the document.",
							"optional": true
						},
						{
							"access": null,
							"name": "contains",
							"type": "CarbonLDP.Document",
							"description": "Array with the children of the document.",
							"optional": true
						},
						{
							"access": null,
							"name": "created",
							"type": "Date",
							"description": "The time when the document was persisted.",
							"optional": true
						},
						{
							"access": null,
							"name": "defaultInteractionModel",
							"type": "CarbonLDP.Pointer",
							"description": "A Pointer representing the default interaction model of the document.",
							"optional": true
						},
						{
							"access": null,
							"name": "hasMemberRelation",
							"type": "CarbonLDP.Pointer",
							"description": "A Pointer with the inverted relation the document.",
							"optional": true
						},
						{
							"access": null,
							"name": "isMemberOfRelation",
							"type": "CarbonLDP.Pointer",
							"description": "A Pointer with the member of relation of the document.",
							"optional": true
						},
						{
							"access": null,
							"name": "modified",
							"type": "Date",
							"description": "The last time the document was saved.",
							"optional": true
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "$_syncSavedFragments",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Set all the current fragments in the document as fragments that has been saved in the server.",
									"arguments": null,
									"returns": {
										"type": "void"
									}
								}
							],
							"returns": {
								"type": "void"
							},
							"should-exists": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$createFragment",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T"
									],
									"description": "Creates a `CarbonLDP.Fragment` from the object provided and the id if specified.",
									"arguments": [
										{
											"name": "object",
											"type": "T"
										},
										{
											"name": "id",
											"type": "string",
											"optional": true
										}
									],
									"returns": {
										"type": "T & CarbonLDP.Fragment"
									}
								},
								{
									"generics": null,
									"description": "Creates an empty `CarbonLDP.Fragment` with the id specified.",
									"arguments": [
										{
											"name": "id",
											"type": "string"
										}
									],
									"returns": {
										"type": "CarbonLDP.Fragment"
									}
								}
							],
							"returns": {
								"type": "T & CarbonLDP.Fragment"
							},
							"should-exists": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$get",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the specified properties and sub-properties of the document specified by the function provided.",
									"arguments": [
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentBuilder",
											"description": "Function that receives a the builder that helps you to construct the retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the entire current document or just the selected properties and sub-properties of a query builder function provided.",
									"arguments": [
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.GETOptions",
											"optional": true,
											"description": "Customizable options for the request."
										},
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentBuilder",
											"optional": true,
											"description": "Function that receives a the builder that helps you to construct the retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the specified properties and sub-properties of the URI specified by the function provided.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to query."
										},
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentBuilder",
											"description": "Function that receives a the builder that helps you to construct the retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the entire specified document or just the selected properties and sub-properties of a query builder function provided.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to query."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.GETOptions",
											"optional": true,
											"description": "Customizable options for the request."
										},
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentBuilder",
											"optional": true,
											"description": "Function that receives a the builder that helps you to construct the retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								}
							],
							"returns": {
								"type": "Promise<T & CarbonLDP.Document>"
							}
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$getFragment",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T"
									],
									"description": null,
									"arguments": null,
									"returns": {
										"type": "T & CarbonLDP.Fragment"
									}
								}
							],
							"returns": {
								"type": "T & CarbonLDP.Fragment"
							},
							"should-exists": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$getFragments",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns an array with all the fragments in the Document.",
									"arguments": null,
									"returns": {
										"type": "CarbonLDP.Fragment[]"
									}
								}
							],
							"returns": {
								"type": "CarbonLDP.Fragment[]"
							},
							"should-exists": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$refresh",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Refresh the full or partial document.",
									"arguments": [
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & this>"
									}
								}
							],
							"returns": {
								"type": "Promise<T & this>"
							}
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$removeFragment",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Remove the fragment referenced by the `CarbonLDP.Fragment` provided from the Document.",
									"arguments": [
										{
											"name": "fragment",
											"type": "CarbonLDP.Fragment"
										}
									],
									"returns": {
										"type": "boolean"
									}
								},
								{
									"generics": null,
									"description": "Remove the fragment referenced by the Slug provided from the Document.",
									"arguments": [
										{
											"name": "slug",
											"type": "string"
										}
									],
									"returns": {
										"type": "boolean"
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"should-exists": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$resolve",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Resolves the specified properties and sub-properties of the current document.",
									"arguments": [
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentBuilder",
											"description": "Function that receives a the builder that helps you to construct the retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Resolves the specified properties and sub-properties of the current document.",
									"arguments": [
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.GETOptions",
											"optional": true,
											"description": "Customizable options for the request."
										},
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentBuilder",
											"optional": true,
											"description": "Function that receives a the builder that helps you to construct the retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								}
							],
							"returns": {
								"type": "Promise<T & CarbonLDP.Document>"
							}
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$save",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Save the full or partial changes of the document.",
									"arguments": [
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & this>"
									}
								}
							],
							"returns": {
								"type": "Promise<T & this>"
							}
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$saveAndRefresh",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Save the full or partial changes of the document and refreshes with the latest changes from the server of the full of partial data of the document.",
									"arguments": [
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & this>"
									}
								}
							],
							"returns": {
								"type": "Promise<T & this>"
							}
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "getPointer",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "id",
											"type": "string",
											"description": "ID to return its pointer representation."
										}
									],
									"returns": {
										"type": "CarbonLDP.RegisteredPointer"
									}
								},
								{
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "id",
											"type": "string",
											"description": "ID to check its existence."
										},
										{
											"name": "local",
											"type": "true",
											"description": "Flag to ignore hierarchy and only return pointers from the current registry."
										}
									],
									"returns": {
										"type": "CarbonLDP.Fragment"
									}
								}
							],
							"returns": {
								"type": "CarbonLDP.RegisteredPointer"
							},
							"should-exists": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "getPointers",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns all the pointers stored the registry hierarchy.",
									"arguments": null,
									"returns": {
										"type": "CarbonLDP.RegisteredPointer[]"
									}
								},
								{
									"generics": null,
									"description": "Returns all the pointers stored in the current registry.",
									"arguments": [
										{
											"name": "local",
											"type": "true",
											"description": "Flag to ignore hierarchy and only return pointers from the current registry."
										}
									],
									"returns": {
										"type": "CarbonLDP.Fragment[]"
									}
								}
							],
							"returns": {
								"type": "CarbonLDP.RegisteredPointer[]"
							},
							"should-exists": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "DocumentFactory",
					"description": "Interface with factory, decorate and utils methods for `CarbonLDP.Document` objects.",
					"generics": null,
					"path": "CarbonLDP.DocumentFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelSchema<CarbonLDP.Vocabularies.C.Document>"
						},
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.Document, CarbonLDP.Document.Traits.SPARQLDocumentTrait & CarbonLDP.Document.Traits.EventEmitterDocumentTrait & CarbonLDP.Document.Traits.QueryableDocumentTrait, \"$_syncSnapshot\" | \"$isDirty\" | \"$revert\">"
						},
						{
							"name": "CarbonLDP.Model.ModelDecorator<CarbonLDP.Document, CarbonLDP.BaseResolvableDocument>"
						},
						{
							"name": "CarbonLDP.Model.ModelTypeGuard<CarbonLDP.Document>"
						},
						{
							"name": "CarbonLDP.Model.ModelFactory<CarbonLDP.TransientDocument, CarbonLDP.BaseDocument>"
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "TransientDocument",
					"description": "Interface that represents an in-memory Carbon LDP Document.",
					"generics": null,
					"path": "CarbonLDP.TransientDocument",
					"super-classes": [
						{
							"name": "CarbonLDP.Resource"
						},
						{
							"name": "CarbonLDP.$Registry<CarbonLDP.TransientFragment>"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "defaultInteractionModel",
							"type": "CarbonLDP.Pointer",
							"description": "A Pointer URI representing the default interaction model of the document when persisted.",
							"optional": true
						},
						{
							"access": null,
							"name": "hasMemberRelation",
							"type": "CarbonLDP.Pointer",
							"description": "A Pointer with the member of relation of the document.",
							"optional": true
						},
						{
							"access": null,
							"name": "insertedContentRelation",
							"type": "CarbonLDP.Pointer",
							"description": "Pointer that represents the inserted content relation of the document.",
							"optional": true
						},
						{
							"access": null,
							"name": "isMemberOfRelation",
							"type": "CarbonLDP.Pointer",
							"description": "A Pointer with the inverted relation the document will have.",
							"optional": true
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "$_normalize",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Search over the document for normal objects to convert into fragments, and unused fragments to eliminate.",
									"arguments": null,
									"returns": {
										"type": "void"
									}
								}
							],
							"returns": {
								"type": "void"
							},
							"should-exists": true,
							"should-remove blank nodes not referenced from the main document": true,
							"should-remove blank nodes not referenced from the fragments": true,
							"should-maintain named fragments not referenced from the main document": true,
							"should-maintain named fragments not referenced from the fragments": true,
							"should-convert without problems in cyclical referenced fragments": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$createFragment",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T"
									],
									"description": "Creates a `CarbonLDP.TransientFragment` from the object provided and the id if specified.",
									"arguments": [
										{
											"name": "object",
											"type": "T"
										},
										{
											"name": "id",
											"type": "string",
											"optional": true
										}
									],
									"returns": {
										"type": "T & CarbonLDP.TransientFragment"
									}
								},
								{
									"generics": null,
									"description": "Creates an empty `CarbonLDP.TransientFragment` with the id specified.",
									"arguments": [
										{
											"name": "id",
											"type": "string"
										}
									],
									"returns": {
										"type": "CarbonLDP.TransientFragment"
									}
								}
							],
							"returns": {
								"type": "T & CarbonLDP.TransientFragment"
							},
							"should-exists": true,
							"should-create named fragment when object and slug label provided": true,
							"should-create named fragment when only slug label provided": true,
							"should-create named fragment when object and absolute IRI provided": true,
							"should-create named fragment when only absolute IRI provided": true,
							"should-create blank node when no label provided": true,
							"should-create blank node when object and blank node label provided": true,
							"should-create blank node when only blank node label provided": true,
							"should-convert nested objects when object provided": true,
							"should-convert nested-nested objects when object provided": true,
							"should-throw error when only absolute IRI has not document $id as base": true,
							"should-throw error when object and absolute IRI has not document $id as base": true,
							"should-throw error when object but slug label is already used": true,
							"should-throw error when only slug label is already used": true,
							"should-throw error when object but absolute IRI provided is already used": true,
							"should-throw error when only absolute IRI provided is already used": true,
							"should-throw error when object but blank node label is used": true,
							"should-throw error when only blank node label is used": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$getFragment",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T"
									],
									"description": "Returns the fragment referenced by the ID provided.\nReturns `null` if no fragment exists in the Document.",
									"arguments": [
										{
											"name": "id",
											"type": "string"
										}
									],
									"returns": {
										"type": "T & CarbonLDP.TransientFragment"
									}
								}
							],
							"returns": {
								"type": "T & CarbonLDP.TransientFragment"
							},
							"should-exists": true,
							"should-throw error when IRI of the document": true,
							"should-throw error when another absolute IRIs": true,
							"should-return null when relative fragment label and not exits": true,
							"should-return fragment when relative fragment label and exits": true,
							"should-return null when absolute fragment label and not exits": true,
							"should-return fragment when absolute fragment label and exits": true,
							"should-return null when label and not exits": true,
							"should-return fragment when label and exits": true,
							"should-return null when blank node label and not exists": true,
							"should-return true when blank node label and exits": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$getFragments",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns an array with all the fragments in the Document.",
									"arguments": null,
									"returns": {
										"type": "CarbonLDP.TransientFragment[]"
									}
								}
							],
							"returns": {
								"type": "CarbonLDP.TransientFragment[]"
							},
							"should-exists": true,
							"should-return empty array when no fragments": true,
							"should-return array with all fragments": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$hasFragment",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns true if the Document has the fragment referenced by the ID provided.",
									"arguments": [
										{
											"name": "id",
											"type": "string"
										}
									],
									"returns": {
										"type": "boolean"
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"should-exists": true,
							"should-return false when IRI of the document": true,
							"should-return false when relative IRIs": true,
							"should-return false when another absolute IRIs": true,
							"should-return false when relative fragment label and not exits": true,
							"should-return true when relative fragment label and exits": true,
							"should-return false when absolute fragment label and not exits": true,
							"should-return true when absolute fragment label and exits": true,
							"should-return true when label and not exits": true,
							"should-return true when label and exits": true,
							"should-return false when blank node label and not exists": true,
							"should-be true when blank node label and exits": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$removeFragment",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Remove the fragment referenced by the `CarbonLDP.TransientFragment` provided from the Document.",
									"arguments": [
										{
											"name": "fragment",
											"type": "CarbonLDP.TransientFragment"
										}
									],
									"returns": {
										"type": "boolean"
									}
								},
								{
									"generics": null,
									"description": "Remove the fragment referenced by the Slug provided from the Document.",
									"arguments": [
										{
											"name": "slug",
											"type": "string"
										}
									],
									"returns": {
										"type": "boolean"
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"should-exists": true,
							"should-remove providing a named fragment": true,
							"should-remove providing a blank node": true,
							"should-remove providing a fragment label": true,
							"should-remove providing a fragment slug label": true,
							"should-remove providing an absolute fragment IRI": true,
							"should-remove providing a blank node label": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "toJSON",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns a JSON-LD Document using the data available from the $registry of the document.",
									"arguments": null,
									"returns": {
										"type": "CarbonLDP.RDF.RDFDocument"
									}
								},
								{
									"generics": null,
									"description": "Returns a JSON-LD Document using the data context provided.",
									"arguments": [
										{
											"name": "context",
											"type": "CarbonLDP.Context"
										}
									],
									"returns": {
										"type": "CarbonLDP.RDF.RDFDocument"
									}
								}
							],
							"returns": {
								"type": "CarbonLDP.RDF.RDFDocument"
							},
							"should-exists": true,
							"should-expand empty when no assigned registry": true,
							"should-expand with the assigned registry": true,
							"should-expand with the provided context": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "TransientDocumentFactory",
					"description": "Interface with the factory, decorate and utils for `CarbonLDP.TransientDocument` objects.",
					"generics": null,
					"path": "CarbonLDP.TransientDocumentFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.TransientDocument, CarbonLDP.Resource & CarbonLDP.$Registry, \"$registry\" | \"_getLocalID\" | \"getPointer\" | \"toJSON\">"
						},
						{
							"name": "CarbonLDP.Model.ModelDecorator<CarbonLDP.TransientDocument, CarbonLDP.BaseDocument>"
						},
						{
							"name": "CarbonLDP.Model.ModelFactoryOptional<CarbonLDP.TransientDocument, CarbonLDP.BaseDocument>"
						},
						{
							"name": "CarbonLDP.Model.ModelTypeGuard<CarbonLDP.TransientDocument>"
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "Document",
						"type": "CarbonLDP.DocumentFactory",
						"description": "Constant that implements the `CarbonLDP.DocumentFactory` interface.",
						"optional": null
					},
					{
						"access": "static",
						"name": "TransientDocument",
						"type": "CarbonLDP.TransientDocumentFactory",
						"description": "Constant that implements the `CarbonLDP.TransientDocumentFactory` interface.",
						"optional": null,
						"should-exists": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "EventEmitterDocumentTrait",
			"description": null,
			"path": "carbonldp/Document/Traits/EventEmitterDocumentTrait",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "EventEmitterDocumentTrait",
					"description": "Documents repository with the implementation for event subscriptions.",
					"generics": null,
					"path": "CarbonLDP.Document.Traits.EventEmitterDocumentTrait",
					"super-classes": [
						{
							"name": "CarbonLDP.TransientDocument"
						},
						{
							"name": "CarbonLDP.ResolvablePointer"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "$repository",
							"type": "CarbonLDP.DocumentsRepository.Trait.EventEmitterDocumentsRepositoryTrait",
							"description": null,
							"optional": false
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "$off",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Remove a subscription that contains the document event and onEvent callback provided.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.CHILD_CREATED",
											"description": "The event of the subscription to remove."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.ChildCreatedEvent ) => void",
											"description": "The onEvent callback of the subscription to be removed.\nIt must be the same call back provided in the `on` methods."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the error thrown trying to remove the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Remove the subscription specified by the uri pattern, event and onEvent callback provided.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.CHILD_CREATED",
											"description": "The event of the subscription to remove."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to unsubscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.ChildCreatedEvent ) => void",
											"description": "The onEvent callback of the subscription to be removed.\nIt must be the same call back provided in the `on` methods."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the error thrown trying to remove the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Remove a subscription that contains the document event and onEvent callback provided.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.ACCESS_POINT_CREATED",
											"description": "The event of the subscription to remove."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.AccessPointCreated ) => void",
											"description": "The onEvent callback of the subscription to be removed.\nIt must be the same call back provided in the `on` methods."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the error thrown trying to remove the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Remove the subscription specified by the uri pattern, event and onEvent callback provided.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.ACCESS_POINT_CREATED",
											"description": "The event of the subscription to remove."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to unsubscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.AccessPointCreated ) => void",
											"description": "The onEvent callback of the subscription to be removed.\nIt must be the same call back provided in the `on` methods."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the error thrown trying to remove the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Remove a subscription that contains the document event and onEvent callback provided.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.DOCUMENT_MODIFIED",
											"description": "The event of the subscription to remove."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentModifiedEvent ) => void",
											"description": "The onEvent callback of the subscription to be removed.\nIt must be the same call back provided in the `on` methods."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the error thrown trying to remove the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Remove the subscription specified by the uri pattern, event and onEvent callback provided.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.DOCUMENT_MODIFIED",
											"description": "The event of the subscription to remove."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to unsubscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentModifiedEvent ) => void",
											"description": "The onEvent callback of the subscription to be removed.\nIt must be the same call back provided in the `on` methods."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the error thrown trying to remove the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Remove a subscription that contains the document event and onEvent callback provided.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.DOCUMENT_DELETED",
											"description": "The event of the subscription to remove."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentDeletedEvent ) => void",
											"description": "The onEvent callback of the subscription to be removed.\nIt must be the same call back provided in the `on` methods."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the error thrown trying to remove the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Remove the subscription specified by the uri pattern, event and onEvent callback provided.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.DOCUMENT_DELETED",
											"description": "The event of the subscription to remove."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to unsubscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentDeletedEvent ) => void",
											"description": "The onEvent callback of the subscription to be removed.\nIt must be the same call back provided in the `on` methods."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the error thrown trying to remove the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Remove a subscription that contains the document event and onEvent callback provided.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.MEMBER_ADDED",
											"description": "The event of the subscription to remove."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberAddedEvent ) => void",
											"description": "The onEvent callback of the subscription to be removed.\nIt must be the same call back provided in the `on` methods."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the error thrown trying to remove the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Remove the subscription specified by the uri pattern, event and onEvent callback provided.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.MEMBER_ADDED",
											"description": "The event of the subscription to remove."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to unsubscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberAddedEvent ) => void",
											"description": "The onEvent callback of the subscription to be removed.\nIt must be the same call back provided in the `on` methods."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the error thrown trying to remove the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Remove a subscription that contains the document event and onEvent callback provided.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.MEMBER_REMOVED",
											"description": "The event of the subscription to remove."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberRemovedEvent ) => void",
											"description": "The onEvent callback of the subscription to be removed.\nIt must be the same call back provided in the `on` methods."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the error thrown trying to remove the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Remove the subscription specified by the uri pattern, event and onEvent callback provided.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.MEMBER_REMOVED",
											"description": "The event of the subscription to remove."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to unsubscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberRemovedEvent ) => void",
											"description": "The onEvent callback of the subscription to be removed.\nIt must be the same call back provided in the `on` methods."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the error thrown trying to remove the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Remove a subscription that contains the document event and onEvent callback provided.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event | string",
											"description": "The event of the subscription to remove."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.EventMessage ) => void",
											"description": "The onEvent callback of the subscription to be removed.\nIt must be the same call back provided in the `on` methods."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the error thrown trying to remove the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Remove the subscription specified by the uri pattern, event and onEvent callback provided.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event | string",
											"description": "The event of the subscription to remove."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to unsubscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.EventMessage ) => void",
											"description": "The onEvent callback of the subscription to be removed.\nIt must be the same call back provided in the `on` methods."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the error thrown trying to remove the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								}
							],
							"returns": {
								"type": "void"
							},
							"should-exists": true,
							"should-call repository with resource $id when no pattern": true,
							"should-call repository with absolute pattern": true,
							"should-call repository with resolved relative pattern": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$on",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Subscribe to the specified document event notifications.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.CHILD_CREATED",
											"description": "The event to subscribe for its notifications."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.ChildCreatedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the specified uri pattern event notifications.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.CHILD_CREATED",
											"description": "The event to subscribe for its notifications."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.ChildCreatedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the specified document event notifications.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.ACCESS_POINT_CREATED",
											"description": "The event to subscribe for its notifications."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.AccessPointCreated ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the specified uri pattern event notifications.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.ACCESS_POINT_CREATED",
											"description": "The event to subscribe for its notifications."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.AccessPointCreated ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the specified document event notifications.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.DOCUMENT_MODIFIED",
											"description": "The event to subscribe for its notifications."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentModifiedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the specified uri pattern event notifications.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.DOCUMENT_MODIFIED",
											"description": "The event to subscribe for its notifications."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentModifiedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the specified document event notifications.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.DOCUMENT_DELETED",
											"description": "The event to subscribe for its notifications."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentDeletedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the specified uri pattern event notifications.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.DOCUMENT_DELETED",
											"description": "The event to subscribe for its notifications."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentDeletedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the specified document event notifications.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.MEMBER_ADDED",
											"description": "The event to subscribe for its notifications."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberAddedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the specified uri pattern event notifications.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.MEMBER_ADDED",
											"description": "The event to subscribe for its notifications."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberAddedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the specified document event notifications.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.MEMBER_REMOVED",
											"description": "The event to subscribe for its notifications."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberRemovedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the specified uri pattern event notifications.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.MEMBER_REMOVED",
											"description": "The event to subscribe for its notifications."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberRemovedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the specified document event notifications.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event | string",
											"description": "The event to subscribe for its notifications."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.EventMessage ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the specified uri pattern event notifications.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event | string",
											"description": "The event to subscribe for its notifications."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.EventMessage ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								}
							],
							"returns": {
								"type": "void"
							},
							"should-exists": true,
							"should-call repository with resource $id when no pattern": true,
							"should-call repository with absolute pattern": true,
							"should-call repository with resolved relative pattern": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$onChildCreated",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Subscribe to the `CarbonLDP.Messaging.Event.CHILD_CREATED` event notifications for the document.",
									"arguments": [
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.ChildCreatedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback thar receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the `CarbonLDP.Messaging.Event.CHILD_CREATED` event notifications for the uri pattern specified.",
									"arguments": [
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.ChildCreatedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback thar receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								}
							],
							"returns": {
								"type": "void"
							},
							"should-exists": true,
							"should-call repository with resource $id when no pattern": true,
							"should-call repository with absolute pattern": true,
							"should-call repository with resolved relative pattern": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$onDocumentDeleted",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Subscribe to the `CarbonLDP.Messaging.Event.DOCUMENT_DELETED` event notifications for the document.",
									"arguments": [
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentDeletedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback thar receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the `CarbonLDP.Messaging.Event.DOCUMENT_DELETED` event notifications for the uri pattern specified.",
									"arguments": [
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentDeletedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback thar receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								}
							],
							"returns": {
								"type": "void"
							},
							"should-exists": true,
							"should-call repository with resource $id when no pattern": true,
							"should-call repository with absolute pattern": true,
							"should-call repository with resolved relative pattern": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$onDocumentModified",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Subscribe to the `CarbonLDP.Messaging.Event.DOCUMENT_MODIFIED` event notifications for the document.",
									"arguments": [
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentModifiedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback thar receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the `CarbonLDP.Messaging.Event.DOCUMENT_MODIFIED` event notifications for the uri pattern specified.",
									"arguments": [
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentModifiedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback thar receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								}
							],
							"returns": {
								"type": "void"
							},
							"should-exists": true,
							"should-call repository with resource $id when no pattern": true,
							"should-call repository with absolute pattern": true,
							"should-call repository with resolved relative pattern": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$onMemberAdded",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Subscribe to the `CarbonLDP.Messaging.Event.MEMBER_ADDED` event notifications for the document.",
									"arguments": [
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberAddedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback thar receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the `CarbonLDP.Messaging.Event.MEMBER_ADDED` event notifications for the uri pattern specified.",
									"arguments": [
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberAddedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback thar receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								}
							],
							"returns": {
								"type": "void"
							},
							"should-exists": true,
							"should-call repository with resource $id when no pattern": true,
							"should-call repository with absolute pattern": true,
							"should-call repository with resolved relative pattern": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$onMemberRemoved",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Subscribe to the `CarbonLDP.Messaging.Event.MEMBER_REMOVED` event notifications for the document.",
									"arguments": [
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberRemovedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback thar receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the `CarbonLDP.Messaging.Event.MEMBER_REMOVED` event notifications for the uri pattern specified.",
									"arguments": [
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberRemovedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback thar receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								}
							],
							"returns": {
								"type": "void"
							},
							"should-exists": true,
							"should-call repository with resource $id when no pattern": true,
							"should-call repository with absolute pattern": true,
							"should-call repository with resolved relative pattern": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$one",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Subscribe to only one notification to the document event provided",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.CHILD_CREATED",
											"description": "The event to subscribe for one notification."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.ChildCreatedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to only one notification to the uri pattern and event provided",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.CHILD_CREATED",
											"description": "The event to subscribe for one notification."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.ChildCreatedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to only one notification to the document event provided",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.ACCESS_POINT_CREATED",
											"description": "The event to subscribe for one notification."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.AccessPointCreated ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to only one notification to the uri pattern and event provided",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.ACCESS_POINT_CREATED",
											"description": "The event to subscribe for one notification."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.AccessPointCreated ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to only one notification to the document event provided",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.DOCUMENT_MODIFIED",
											"description": "The event to subscribe for one notification."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentModifiedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to only one notification to the uri pattern and event provided",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.DOCUMENT_MODIFIED",
											"description": "The event to subscribe for one notification."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentModifiedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to only one notification to the document event provided",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.DOCUMENT_DELETED",
											"description": "The event to subscribe for one notification."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentDeletedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to only one notification to the uri pattern and event provided",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.DOCUMENT_DELETED",
											"description": "The event to subscribe for one notification."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentDeletedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to only one notification to the document event provided",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.MEMBER_ADDED",
											"description": "The event to subscribe for one notification."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberAddedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to only one notification to the uri pattern and event provided",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.MEMBER_ADDED",
											"description": "The event to subscribe for one notification."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberAddedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to only one notification to the document event provided",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.MEMBER_REMOVED",
											"description": "The event to subscribe for one notification."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberRemovedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to only one notification to the uri pattern and event provided",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.MEMBER_REMOVED",
											"description": "The event to subscribe for one notification."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberRemovedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to only one notification to the document event provided",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event | string",
											"description": "The event to subscribe for one notification."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.EventMessage ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to only one notification to the uri pattern and event provided",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event | string",
											"description": "The event to subscribe for one notification."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.EventMessage ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								}
							],
							"returns": {
								"type": "void"
							},
							"should-exists": true,
							"should-call repository with resource $id when no pattern": true,
							"should-call repository with absolute pattern": true,
							"should-call repository with resolved relative pattern": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "EventEmitterDocumentTraitFactory",
					"description": "Interface with the decoration, factory and utils for `CarbonLDP.Document.Traits.EventEmitterDocumentTrait` objects.",
					"generics": null,
					"path": "CarbonLDP.Documents.Traits.EventEmitterDocumentTraitFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.Document.Traits.EventEmitterDocumentTrait, CarbonLDP.TransientDocument, CarbonLDP.ResolvablePointer"
						},
						{
							"name": "CarbonLDP.Model.ModelDecorator<CarbonLDP.Document.Traits.EventEmitterDocumentTrait<any>, CarbonLDP.Document.Traits.BaseEventEmitterDocumentTrait>"
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "EventEmitterDocumentTrait",
						"type": "CarbonLDP.Documents.Traits.EventEmitterDocumentTraitFactory",
						"description": null,
						"optional": null,
						"should-exists": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "LDPDocumentTrait",
			"description": null,
			"path": "carbonldp/Document/Traits/LDPDocumentTrait",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "LDPDocumentTrait",
					"description": "Documents repository with the implementation for event subscriptions.",
					"generics": null,
					"path": "CarbonLDP.Document.Traits.LDPDocumentTrait",
					"super-classes": [
						{
							"name": "CarbonLDP.TransientDocument"
						},
						{
							"name": "CarbonLDP.ResolvablePointer"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "$repository",
							"type": "CarbonLDP.DocumentsRepository.Trait.LDPDocumentsRepositoryTrait",
							"description": null,
							"optional": false
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "$addMember",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Adds the provided resource as member of the current document.",
									"arguments": [
										{
											"name": "member",
											"type": "CarbonLDP.Pointer | string",
											"description": "URI or Pointer to add as a member."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<void>"
									}
								},
								{
									"generics": null,
									"description": "Adds the provided resource as member of the specified document.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document to add the specified member."
										},
										{
											"name": "member",
											"type": "CarbonLDP.Pointer | string",
											"description": "URI or Pointer to add as a member."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<void>"
									}
								}
							],
							"returns": {
								"type": "Promise<void>"
							},
							"should-exists": true,
							"should-call repository with $id when string member": true,
							"should-call repository with $id when pointer member": true,
							"should-call repository with $id when string member and options": true,
							"should-call repository with $id when pointer member and options": true,
							"should-call repository with absolute URI when string member": true,
							"should-call repository with absolute URI when pointer member": true,
							"should-call repository with absolute URI when string member and options": true,
							"should-call repository with absolute URI when pointer member and options": true,
							"should-call repository with resolved relative URI when string member": true,
							"should-call repository with resolved relative URI when pointer member": true,
							"should-call repository with resolved relative URI when string member and options": true,
							"should-call repository with resolved relative URI when pointer member and options": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$addMembers",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Adds the provided resources as members of the current document.",
									"arguments": [
										{
											"name": "member",
											"type": "CarbonLDP.Pointer | string",
											"description": "URI or Pointer to add as a member."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<void>"
									}
								},
								{
									"generics": null,
									"description": "Adds the provided resources as members of the specified document.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document to add the specified member."
										},
										{
											"name": "member",
											"type": "CarbonLDP.Pointer | string",
											"description": "URI or Pointer to add as a member."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<void>"
									}
								}
							],
							"returns": {
								"type": "Promise<void>"
							},
							"should-exists": true,
							"should-call repository with $id when string member": true,
							"should-call repository with $id when pointer member": true,
							"should-call repository with $id when pointer & string member": true,
							"should-call repository with $id when string member and options": true,
							"should-call repository with $id when pointer member and options": true,
							"should-call repository with $id when pointer & string member and options": true,
							"should-call repository with absolute URI when string member": true,
							"should-call repository with absolute URI when pointer member": true,
							"should-call repository with absolute URI when pointer & string member": true,
							"should-call repository with absolute URI when string member and options": true,
							"should-call repository with absolute URI when pointer member and options": true,
							"should-call repository with resolved relative URI when string member": true,
							"should-call repository with resolved relative URI when pointer member": true,
							"should-call repository with resolved relative URI when string member and options": true,
							"should-call repository with resolved relative URI when pointer member and options": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$create",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists the object as a child of the current document.",
									"arguments": [
										{
											"name": "child",
											"type": "T",
											"description": "The object from where to create the child."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists the object with the slug specified as a child of the current document.",
									"arguments": [
										{
											"name": "child",
											"type": "T",
											"description": "The object from where to create the child."
										},
										{
											"name": "slug",
											"type": "string",
											"description": "The slug that will be used in the child URI."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists multiple objects as children of the current document.",
									"arguments": [
										{
											"name": "children",
											"type": "T[]",
											"description": "An array with the objects to be persisted as the new children."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for every the request."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>",
										"description": "Promise that contains the new UNRESOLVED persisted children."
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists multiple objects as children of the current document.",
									"arguments": [
										{
											"name": "children",
											"type": "T[]",
											"description": "An array with the objects to be persisted as the new children."
										},
										{
											"name": "slugs",
											"type": "string[]",
											"description": "Array with the slugs that corresponds to each object in `object` parameter, in the order in which they were defined. If an element in the array is undefined or null, the slug will be generated by the platform."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for every the request."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>",
										"description": "Promise that contains the new UNRESOLVED persisted children."
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists the object as a child of the uri specified.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document where to create the child."
										},
										{
											"name": "child",
											"type": "T",
											"description": "The object from where to create the child."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists the object with the slug specified as a child of the uri specified.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document where to create the child."
										},
										{
											"name": "child",
											"type": "T",
											"description": "The object from where to create the child."
										},
										{
											"name": "slug",
											"type": "string",
											"description": "The slug that will be used in the child URI."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists multiple objects as children of the uri specified.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document where to create the child."
										},
										{
											"name": "children",
											"type": "T[]",
											"description": "An array with the objects to be persisted as the new children."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for every the request."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>",
										"description": "Promise that contains the new UNRESOLVED persisted children."
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists multiple objects as children of the uri specified.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document where to create the child."
										},
										{
											"name": "children",
											"type": "T[]",
											"description": "An array with the objects to be persisted as the new children."
										},
										{
											"name": "slugs",
											"type": "string[]",
											"description": "Array with the slugs that corresponds to each object in `object` parameter, in the order in which they were defined. If an element in the array is undefined or null, the slug will be generated by the platform."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for every the request."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>",
										"description": "Promise that contains the new UNRESOLVED persisted children."
									}
								}
							],
							"returns": {
								"type": "Promise<T & CarbonLDP.Document>"
							},
							"should-exists": true,
							"should-call repository with $id when multiple child": true,
							"should-call repository with $id when multiple child and options": true,
							"should-call repository with $id when multiple child and slugs": true,
							"should-call repository with $id when multiple child, slugs and options": true,
							"should-call repository with $id when single child": true,
							"should-call repository with $id when single child and options": true,
							"should-call repository with $id when single child and slug": true,
							"should-call repository with $id when single child, slug and options": true,
							"should-call repository absolute URI when multiple child": true,
							"should-call repository absolute URI when multiple child and options": true,
							"should-call repository absolute URI when multiple child and slugs": true,
							"should-call repository absolute URI when multiple child, slugs and options": true,
							"should-call repository absolute URI when single child": true,
							"should-call repository absolute URI when single child and options": true,
							"should-call repository absolute URI when single child and slug": true,
							"should-call repository absolute URI when single child, slug and options": true,
							"should-call repository resolved relative URI when multiple child": true,
							"should-call repository resolved relative URI when multiple child and options": true,
							"should-call repository resolved relative URI when multiple child and slugs": true,
							"should-call repository resolved relative URI when multiple child, slugs and options": true,
							"should-call repository resolved relative URI when single child": true,
							"should-call repository resolved relative URI when single child and options": true,
							"should-call repository resolved relative URI when single child and slug": true,
							"should-call repository resolved relative URI when single child, slug and options": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$createAndRetrieve",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists the object as a child of the current document and retrieves the updated data from the server.",
									"arguments": [
										{
											"name": "child",
											"type": "T",
											"description": "The object from where to create the child."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists the object with the slug specified as a child of the current document and retrieves the updated data from the server.",
									"arguments": [
										{
											"name": "child",
											"type": "T",
											"description": "The object from where to create the child."
										},
										{
											"name": "slug",
											"type": "string",
											"description": "The slug that will be used in the child URI."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists multiple objects as children of the current document and retrieves the updated data from the server.",
									"arguments": [
										{
											"name": "children",
											"type": "T[]",
											"description": "An array with the objects to be persisted as the new children."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for every the request."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>",
										"description": "Promise that contains the new UNRESOLVED persisted children."
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists multiple objects as children of the current document and retrieves the updated data from the server.",
									"arguments": [
										{
											"name": "children",
											"type": "T[]",
											"description": "An array with the objects to be persisted as the new children."
										},
										{
											"name": "slugs",
											"type": "string[]",
											"description": "Array with the slugs that corresponds to each object in `object` parameter, in the order in which they were defined. If an element in the array is undefined or null, the slug will be generated by the platform."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for every the request."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>",
										"description": "Promise that contains the new UNRESOLVED persisted children."
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists the object as a child of the uri specified and retrieves the updates data from the server.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document where to create the child."
										},
										{
											"name": "child",
											"type": "T",
											"description": "The object from where to create the child."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists the object with the slug specified as a child of the uri specified and retrieves the updates data from the server.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document where to create the child."
										},
										{
											"name": "child",
											"type": "T",
											"description": "The object from where to create the child."
										},
										{
											"name": "slug",
											"type": "string",
											"description": "The slug that will be used in the child URI."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists multiple objects as children of the uri specified and retrieves the updates data from the server.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document where to create the child."
										},
										{
											"name": "children",
											"type": "T[]",
											"description": "An array with the objects to be persisted as the new children."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for every the request."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>",
										"description": "Promise that contains the new UNRESOLVED persisted children."
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists multiple objects as children of the uri specified and retrieves the updates data from the server.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document where to create the child."
										},
										{
											"name": "children",
											"type": "T[]",
											"description": "An array with the objects to be persisted as the new children."
										},
										{
											"name": "slugs",
											"type": "string[]",
											"description": "Array with the slugs that corresponds to each object in `object` parameter, in the order in which they were defined. If an element in the array is undefined or null, the slug will be generated by the platform."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for every the request."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>",
										"description": "Promise that contains the new UNRESOLVED persisted children."
									}
								}
							],
							"returns": {
								"type": "Promise<T & CarbonLDP.Document>"
							},
							"should-exists": true,
							"should-call repository with $id when multiple child": true,
							"should-call repository with $id when multiple child and options": true,
							"should-call repository with $id when multiple child and slugs": true,
							"should-call repository with $id when multiple child, slugs and options": true,
							"should-call repository with $id when single child": true,
							"should-call repository with $id when single child and options": true,
							"should-call repository with $id when single child and slug": true,
							"should-call repository with $id when single child, slug and options": true,
							"should-call repository absolute URI when multiple child": true,
							"should-call repository absolute URI when multiple child and options": true,
							"should-call repository absolute URI when multiple child and slugs": true,
							"should-call repository absolute URI when multiple child, slugs and options": true,
							"should-call repository absolute URI when single child": true,
							"should-call repository absolute URI when single child and options": true,
							"should-call repository absolute URI when single child and slug": true,
							"should-call repository absolute URI when single child, slug and options": true,
							"should-call repository resolved relative URI when multiple child": true,
							"should-call repository resolved relative URI when multiple child and options": true,
							"should-call repository resolved relative URI when multiple child and slugs": true,
							"should-call repository resolved relative URI when multiple child, slugs and options": true,
							"should-call repository resolved relative URI when single child": true,
							"should-call repository resolved relative URI when single child and options": true,
							"should-call repository resolved relative URI when single child and slug": true,
							"should-call repository resolved relative URI when single child, slug and options": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$removeMember",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Removes the provided resource as member of the current document.",
									"arguments": [
										{
											"name": "member",
											"type": "CarbonLDP.Pointer | string",
											"description": "URI or Pointer to remove as a member."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<void>"
									}
								},
								{
									"generics": null,
									"description": "Removes the provided resource as member of the specified document.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document to remove the specified member."
										},
										{
											"name": "member",
											"type": "CarbonLDP.Pointer | string",
											"description": "URI or Pointer to remove as a member."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<void>"
									}
								}
							],
							"returns": {
								"type": "Promise<void>"
							},
							"should-exists": true,
							"should-call repository with $id when string member": true,
							"should-call repository with $id when pointer member": true,
							"should-call repository with $id when string member and options": true,
							"should-call repository with $id when pointer member and options": true,
							"should-call repository with absolute URI when string member": true,
							"should-call repository with absolute URI when pointer member": true,
							"should-call repository with absolute URI when string member and options": true,
							"should-call repository with absolute URI when pointer member and options": true,
							"should-call repository with resolved relative URI when string member": true,
							"should-call repository with resolved relative URI when pointer member": true,
							"should-call repository with resolved relative URI when string member and options": true,
							"should-call repository with resolved relative URI when pointer member and options": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$removeMembers",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Removes the provided resources as members of the current document.",
									"arguments": [
										{
											"name": "member",
											"type": "CarbonLDP.Pointer | string",
											"description": "URI or Pointer to remove as a member."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<void>"
									}
								},
								{
									"generics": null,
									"description": "Removes the provided resources as members of the specified document.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document to remove the specified member."
										},
										{
											"name": "member",
											"type": "CarbonLDP.Pointer | string",
											"description": "URI or Pointer to remove as a member."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<void>"
									}
								}
							],
							"returns": {
								"type": "Promise<void>"
							},
							"should-exists": true,
							"should-call repository with $id when string member": true,
							"should-call repository with $id when pointer member": true,
							"should-call repository with $id when pointer & string member": true,
							"should-call repository with $id when string member and options": true,
							"should-call repository with $id when pointer member and options": true,
							"should-call repository with $id when pointer & string member and options": true,
							"should-call repository with $id when no member": true,
							"should-call repository with $id when options": true,
							"should-call repository with absolute URI when string member": true,
							"should-call repository with absolute URI when pointer member": true,
							"should-call repository with absolute URI when pointer & string member": true,
							"should-call repository with absolute URI when string member and options": true,
							"should-call repository with absolute URI when pointer member and options": true,
							"should-call repository with absolute URI when no member": true,
							"should-call repository with absolute URI when options": true,
							"should-call repository with resolved relative URI when string member": true,
							"should-call repository with resolved relative URI when pointer member": true,
							"should-call repository with resolved relative URI when string member and options": true,
							"should-call repository with resolved relative URI when pointer member and options": true,
							"should-call repository with resolved relative URI when no member": true,
							"should-call repository with resolved relative URI when options": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "LDPDocumentTraitFactory",
					"description": "Interface with the decoration, factory and utils for `CarbonLDP.Document.Traits.LDPDocumentTrait` objects.",
					"generics": null,
					"path": "CarbonLDP.Document.Traits.LDPDocumentTraitFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.Document.Traits.LDPDocumentTrait, CarbonLDP.TransientDocument, CarbonLDP.ResolvablePointer"
						},
						{
							"name": "CarbonLDP.Model.ModelDecorator<CarbonLDP.Document.Traits.LDPDocumentTrait<any>, CarbonLDP.Document.Traits.BaseLDPDocumentTrait>"
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "LDPDocumentTrait",
						"type": "CarbonLDP.Document.Traits.LDPDocumentTraitFactory",
						"description": null,
						"optional": null,
						"should-exists": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "QueryableDocumentTrait",
			"description": null,
			"path": "carbonldp/Document/Traits/QueryableDocumentTrait",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "QueryableDocumentTrait",
					"description": "Documents repository with the implementation for event subscriptions.",
					"generics": null,
					"path": "CarbonLDP.Document.Traits.QueryableDocumentTrait",
					"super-classes": [
						{
							"name": "CarbonLDP.Document.Traits.LDPDocumentTrait"
						},
						{
							"name": "CarbonLDP.QueryDocuments.QueryablePointer"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "$repository",
							"type": "CarbonLDP.DocumentsRepository.Trait.QueryableDocumentsRepositoryTrait",
							"description": null,
							"optional": false
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "$getChildren",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the children of the current document, building a query on which one is able to specify the properties to be retrieve and sub-documents' properties and on and on.",
									"arguments": [
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"description": "Customizable options for the request."
										},
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentsBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentsBuilder",
											"optional": true,
											"description": "Function that receives a the builder that helps you to construct the children retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the children of the current document, building a query on which one is able to specify the properties to be retrieve and sub-documents' properties and on and on.",
									"arguments": [
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentsBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentsBuilder",
											"optional": true,
											"description": "Function that receives a the builder that helps you to construct the children retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the children of the specified URI, building a query on which one is able to specify the properties to be retrieve and sub-documents' properties and on and on.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to query."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"description": "Customizable options for the request."
										},
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentsBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentsBuilder",
											"optional": true,
											"description": "Function that receives a the builder that helps you to construct the children retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the children of the specified URI, building a query on which one is able to specify the properties to be retrieve and sub-documents' properties and on and on.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to query."
										},
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentsBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentsBuilder",
											"optional": true,
											"description": "Function that receives a the builder that helps you to construct the children retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>"
									}
								}
							],
							"returns": {
								"type": "Promise<(T & CarbonLDP.Document)[]>"
							},
							"should-exists": true,
							"should-call repository with $id when empty": true,
							"should-call repository with $id when options": true,
							"should-call repository with $id when query": true,
							"should-call repository with $id when options and query": true,
							"should-call repository with absolute URI when empty": true,
							"should-call repository with absolute URI when options": true,
							"should-call repository with absolute URI when query": true,
							"should-call repository with absolute URI when options and query": true,
							"should-call repository with resoled relative URI when empty": true,
							"should-call repository with resoled relative URI when options": true,
							"should-call repository with resoled relative URI when query": true,
							"should-call repository with resoled relative URI when options and query": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$getMembers",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the members of the current document, building a query on which one is able to specify the properties to be retrieve and sub-documents' properties and on and on.",
									"arguments": [
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"description": "Customizable options for the request."
										},
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentsBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentsBuilder",
											"optional": true,
											"description": "Function that receives a the builder that helps you to construct the members retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the members of the current document, building a query on which one is able to specify the properties to be retrieve and sub-documents' properties and on and on.",
									"arguments": [
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentsBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentsBuilder",
											"optional": true,
											"description": "Function that receives a the builder that helps you to construct the members retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the members of the specified URI, building a query on which one is able to specify the properties to be retrieve and sub-documents' properties and on and on.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to query."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"description": "Customizable options for the request."
										},
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentsBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentsBuilder",
											"optional": true,
											"description": "Function that receives a the builder that helps you to construct the members retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the members of the specified URI, building a query on which one is able to specify the properties to be retrieve and sub-documents' properties and on and on.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to query."
										},
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentsBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentsBuilder",
											"optional": true,
											"description": "Function that receives a the builder that helps you to construct the members retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>"
									}
								}
							],
							"returns": {
								"type": "Promise<(T & CarbonLDP.Document)[]>"
							},
							"should-exists": true,
							"should-call repository with $id when empty": true,
							"should-call repository with $id when options": true,
							"should-call repository with $id when query": true,
							"should-call repository with $id when options and query": true,
							"should-call repository with absolute URI when empty": true,
							"should-call repository with absolute URI when options": true,
							"should-call repository with absolute URI when query": true,
							"should-call repository with absolute URI when options and query": true,
							"should-call repository with resoled relative URI when empty": true,
							"should-call repository with resoled relative URI when options": true,
							"should-call repository with resoled relative URI when query": true,
							"should-call repository with resoled relative URI when options and query": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$listChildren",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the empty children of the current document",
									"arguments": [
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the empty children of the specified URI.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to query."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>"
									}
								}
							],
							"returns": {
								"type": "Promise<(T & CarbonLDP.Document)[]>"
							},
							"should-exists": true,
							"should-call repository with $id when empty": true,
							"should-call repository with $id when options": true,
							"should-call repository with absolute URI when empty": true,
							"should-call repository with absolute URI when options": true,
							"should-call repository with resoled relative URI when empty": true,
							"should-call repository with resoled relative URI when options": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$listMembers",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the empty members of the current document",
									"arguments": [
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the empty members of the specified URI.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to query."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>"
									}
								}
							],
							"returns": {
								"type": "Promise<(T & CarbonLDP.Document)[]>"
							},
							"should-exists": true,
							"should-call repository with $id when empty": true,
							"should-call repository with $id when options": true,
							"should-call repository with absolute URI when empty": true,
							"should-call repository with absolute URI when options": true,
							"should-call repository with resoled relative URI when empty": true,
							"should-call repository with resoled relative URI when options": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "QueryableDocumentTraitFactory",
					"description": "Interface with the decoration, factory and utils for `CarbonLDP.Document.Traits.QueryableDocumentTrait` objects.",
					"generics": null,
					"path": "CarbonLDP.Document.Traits.QueryableDocumentTraitFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.Document.Traits.QueryableDocumentTrait, CarbonLDP.Document.Traits.LDPDocumentTrait, CarbonLDP.QueryDocuments.QueryablePointer"
						},
						{
							"name": "CarbonLDP.Model.ModelDecorator<CarbonLDP.Document.Traits.QueryableDocumentTrait<any>, CarbonLDP.Document.Traits.BaseQueryableDocumentTrait>"
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "QueryableDocumentTrait",
						"type": "CarbonLDP.Document.Traits.QueryableDocumentTraitFactory",
						"description": null,
						"optional": null,
						"should-exists": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "SPARQLDocumentTrait",
			"description": null,
			"path": "carbonldp/Document/Traits/SPARQLDocumentTrait",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "SPARQLDocumentTrait",
					"description": "Documents repository with the implementation for event subscriptions.",
					"generics": null,
					"path": "CarbonLDP.Document.Traits.SPARQLDocumentTrait",
					"super-classes": [
						{
							"name": "CarbonLDP.TransientDocument"
						},
						{
							"name": "CarbonLDP.ResolvablePointer"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "$repository",
							"type": "CarbonLDP.DocumentsRepository.Trait.SPARQLDocumentsRepositoryTrait",
							"description": null,
							"optional": false
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "$executeASKQuery",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Executes an ASK query on a document and returns the response of the query in form of a boolean.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document that works as a SPARQL endpoint where to execute the SPARQL query."
										},
										{
											"name": "askQuery",
											"type": "string",
											"description": "ASK query to execute in the selected endpoint."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<boolean>"
									}
								},
								{
									"generics": null,
									"description": "Executes an ASK query on the current document and returns the response of the query in form of a boolean.",
									"arguments": [
										{
											"name": "askQuery",
											"type": "string",
											"description": "ASK query to execute in the selected endpoint."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<boolean>"
									}
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							},
							"should-exists": true,
							"should-call repository with $id when no URI and no options": true,
							"should-call repository with $id when no URI and custom options": true,
							"should-call repository with absolute URI and no options": true,
							"should-call repository with absolute URI and custom options": true,
							"should-call repository with resolved relative URI and no options": true,
							"should-call repository with resolved relative URI and custom options": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$executeSELECTQuery",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Executes a SELECT query on a document and returns a parsed response object.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document that works as a SPARQL endpoint where to execute the SPARQL query."
										},
										{
											"name": "selectQuery",
											"type": "string",
											"description": "SELECT query to execute in the selected endpoint."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<CarbonLDP.SPARQL.SPARQLSelectResults<T>>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Executes a SELECT query on the current document and returns a parsed response object.",
									"arguments": [
										{
											"name": "selectQuery",
											"type": "string",
											"description": "SELECT query to execute in the selected endpoint."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<CarbonLDP.SPARQL.SPARQLSelectResults<T>>"
									}
								}
							],
							"returns": {
								"type": "Promise<CarbonLDP.SPARQL.SPARQLSelectResults<T>>"
							},
							"should-exists": true,
							"should-call repository with $id when no URI and no options": true,
							"should-call repository with $id when no URI and custom options": true,
							"should-call repository with absolute URI and no options": true,
							"should-call repository with absolute URI and custom options": true,
							"should-call repository with resolved relative URI and no options": true,
							"should-call repository with resolved relative URI and custom options": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$executeUPDATE",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Executes a DESCRIBE query on a document and returns a string with the resulting model.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document that works as a SPARQL endpoint where to execute the SPARQL query."
										},
										{
											"name": "update",
											"type": "string",
											"description": "UPDATE query to execute in the selected endpoint."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<void>"
									}
								},
								{
									"generics": null,
									"description": "Executes a DESCRIBE query on the current document and returns a string with the resulting model.",
									"arguments": [
										{
											"name": "update",
											"type": "string",
											"description": "UPDATE query to execute in the selected endpoint."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<void>"
									}
								}
							],
							"returns": {
								"type": "Promise<void>"
							},
							"should-exists": true,
							"should-call repository with $id when no URI and no options": true,
							"should-call repository with $id when no URI and custom options": true,
							"should-call repository with absolute URI and no options": true,
							"should-call repository with absolute URI and custom options": true,
							"should-call repository with resolved relative URI and no options": true,
							"should-call repository with resolved relative URI and custom options": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$sparql",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Method that creates an instance of SPARQLER for the specified document, or the current document if no URI is provided.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"optional": true,
											"description": "URI of the document where to execute the SPARQL query."
										}
									],
									"returns": {
										"type": "SPARQLER/Clauses/QueryClause<CarbonLDP.SPARQL.Builder.FinishSPARQLSelect>"
									}
								}
							],
							"returns": {
								"type": "SPARQLER/Clauses/QueryClause<CarbonLDP.SPARQL.Builder.FinishSPARQLSelect>"
							},
							"should-exists": true,
							"should-call repository with $id when no URI": true,
							"should-call repository with absolute URI": true,
							"should-call repository with resolved relative URI": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "SPARQLDocumentTraitFactory",
					"description": "Interface with the decoration, factory and utils for `CarbonLDP.Document.Traits.SPARQLDocumentTrait` objects.",
					"generics": null,
					"path": "CarbonLDP.Document.Traits.SPARQLDocumentTraitFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.Document.Traits.SPARQLDocumentTrait, CarbonLDP.TransientDocument, CarbonLDP.ResolvablePointer"
						},
						{
							"name": "CarbonLDP.Model.ModelDecorator<CarbonLDP.Document.Traits.SPARQLDocumentTrait<any>, CarbonLDP.Document.Traits.BaseSPARQLDocumentTrait>"
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "SPARQLDocumentTrait",
						"type": "CarbonLDP.Document.Traits.SPARQLDocumentTraitFactory",
						"description": null,
						"optional": null,
						"should-exists": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "DocumentsRegistry",
			"description": null,
			"path": "carbonldp/DocumentsRegistry",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "BaseDocumentsRegistry",
					"description": "Base data for the DocumentsRegistry.",
					"generics": null,
					"path": "CarbonLDP.BaseDocumentsRegistry",
					"properties": [
						{
							"access": null,
							"name": "$context",
							"type": "CarbonLDP.DocumentsContext",
							"description": null,
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "DocumentsRegistry",
					"description": "Registry that stores Document object.",
					"generics": null,
					"path": "CarbonLDP.DocumentsRegistry",
					"super-classes": [
						{
							"name": "CarbonLDP.GeneralRegistry"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "context",
							"type": "CarbonLDP.DocumentsContext",
							"description": null,
							"optional": false
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "registry",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "id",
											"type": "string",
											"description": "ID of the document to be registered in the registry."
										}
									],
									"returns": {
										"type": "CarbonLDP.Document"
									}
								}
							],
							"returns": {
								"type": "CarbonLDP.Document"
							},
							"should-exists": true,
							"should-call .getPointer with local": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "DocumentsRegistryFactory",
					"description": "Interface with the decoration, factory and utils for `CarbonLDP.DocumentsRegistry` objects.",
					"generics": null,
					"path": "CarbonLDP.DocumentsRegistryFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.DocumentsRegistry, CarbonLDP.GeneralRegistry>"
						},
						{
							"name": "CarbonLDP.Model.ModelDecorator<CarbonLDP.DocumentsRegistry, CarbonLDP.BaseDocumentsRegistry>"
						},
						{
							"name": "CarbonLDP.Model.ModelFactory<CarbonLDP.DocumentsRegistry, CarbonLDP.BaseDocumentsRegistry>"
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "DocumentsRegistry",
						"type": "CarbonLDP.DocumentsRegistryFactory",
						"description": null,
						"optional": null,
						"should-exists": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "DocumentsRepository",
			"description": null,
			"path": "carbonldp/DocumentsRepository",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "DocumentsRepository",
					"description": "Documents repository.",
					"generics": null,
					"path": "CarbonLDP.DocumentsRepository",
					"super-classes": [
						{
							"name": "CarbonLDP.DocumentsRepository.Trait.QueryableDocumentsRepositoryTrait"
						},
						{
							"name": "CarbonLDP.DocumentsRepository.Trait.SPARQLDocumentsRepositoryTrait"
						},
						{
							"name": "CarbonLDP.DocumentsRepository.Trait.EventEmitterDocumentsRepositoryTrait"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "context",
							"type": "CarbonLDP.DocumentsContext",
							"description": null,
							"optional": false
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "delete",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Delete the resource referred by the URI provided from the server.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The resource to be deleted."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<void>"
									}
								}
							],
							"returns": {
								"type": "Promise<void>"
							}
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "exists",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI to verify if its existence."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<boolean>"
									}
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							},
							"should-exists": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "get",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the entire specified document.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to retrieve."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.GETOptions",
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the specified properties and sub-properties of the URI specified by the function provided.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to query."
										},
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentBuilder",
											"description": "Function that receives a the builder that helps you to construct the retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the selected properties and sub-properties of a query builder function provided.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to query."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										},
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentBuilder",
											"optional": true,
											"description": "Function that receives a the builder that helps you to construct the retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								}
							],
							"returns": {
								"type": "Promise<T & CarbonLDP.Document>"
							},
							"should-exists": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "refresh",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Refresh the full or partial document.",
									"arguments": [
										{
											"name": "document",
											"type": "CarbonLDP.Document",
											"description": "The document to be refreshed."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								}
							],
							"returns": {
								"type": "Promise<T & CarbonLDP.Document>"
							},
							"should-exists": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "resolve",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Resolves the entire specified document.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to retrieve."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.GETOptions",
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Resolves the specified properties and sub-properties of the URI specified by the function provided.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to query."
										},
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentBuilder",
											"description": "Function that receives a the builder that helps you to construct the retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Resolves the selected properties and sub-properties of a query builder function provided.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to query."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										},
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentBuilder",
											"optional": true,
											"description": "Function that receives a the builder that helps you to construct the retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								}
							],
							"returns": {
								"type": "Promise<T & CarbonLDP.Document>"
							},
							"should-exists": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "save",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Send the changes of the document.",
									"arguments": [
										{
											"name": "document",
											"type": "CarbonLDP.Document",
											"description": "The document to be saved."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								}
							],
							"returns": {
								"type": "Promise<T & CarbonLDP.Document>"
							}
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "saveAndRefresh",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Send the changes of the document and retrieves the updated data from the server.",
									"arguments": [
										{
											"name": "document",
											"type": "CarbonLDP.Document",
											"description": "The document to be saved."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								}
							],
							"returns": {
								"type": "Promise<T & CarbonLDP.Document>"
							}
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "DocumentsRepositoryFactory",
					"description": "Interface with the decoration, factory and utils for `CarbonLDP.DocumentsRepository` objects.",
					"generics": null,
					"path": "CarbonLDP.DocumentsRepositoryFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelFactory<CarbonLDP.DocumentsRepository<any>, CarbonLDP.BaseDocumentsRepository>"
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "DocumentsRepository",
						"type": "CarbonLDP.DocumentsRepositoryFactory",
						"description": null,
						"optional": null,
						"should-exists": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "EventEmitterDocumentsRepositoryTrait",
			"description": null,
			"path": "carbonldp/DocumentsRepository/Traits/EventEmitterDocumentsRepositoryTrait",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "EventEmitterDocumentsRepositoryTrait",
					"description": "Documents repository with the implementation for event subscriptions.",
					"generics": null,
					"path": "CarbonLDP.DocumentsRepository.Traits.EventEmitterDocumentsRepositoryTrait",
					"super-classes": [
						{
							"name": "CarbonLDP.GeneralRepository<CarbonLDP.Document>"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "context",
							"type": "CarbonLDP.DocumentsContext",
							"description": null,
							"optional": false
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "off",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Remove the subscription specified by the uri pattern, event and onEvent callback provided.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.CHILD_CREATED",
											"description": "The event of the subscription to remove."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to unsubscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.ChildCreatedEvent ) => void",
											"description": "The onEvent callback of the subscription to be removed.\nIt must be the same call back provided in the `on` methods."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the error thrown trying to remove the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Remove the subscription specified by the uri pattern, event and onEvent callback provided.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.DOCUMENT_MODIFIED",
											"description": "The event of the subscription to remove."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to unsubscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentModifiedEvent ) => void",
											"description": "The onEvent callback of the subscription to be removed.\nIt must be the same call back provided in the `on` methods."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the error thrown trying to remove the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Remove the subscription specified by the uri pattern, event and onEvent callback provided.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.DOCUMENT_DELETED",
											"description": "The event of the subscription to remove."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to unsubscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentDeletedEvent ) => void",
											"description": "The onEvent callback of the subscription to be removed.\nIt must be the same call back provided in the `on` methods."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the error thrown trying to remove the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Remove the subscription specified by the uri pattern, event and onEvent callback provided.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.MEMBER_ADDED",
											"description": "The event of the subscription to remove."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to unsubscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberAddedEvent ) => void",
											"description": "The onEvent callback of the subscription to be removed.\nIt must be the same call back provided in the `on` methods."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the error thrown trying to remove the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Remove the subscription specified by the uri pattern, event and onEvent callback provided.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.MEMBER_REMOVED",
											"description": "The event of the subscription to remove."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to unsubscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberRemovedEvent ) => void",
											"description": "The onEvent callback of the subscription to be removed.\nIt must be the same call back provided in the `on` methods."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the error thrown trying to remove the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Remove the subscription specified by the uri pattern, event and onEvent callback provided.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event | string",
											"description": "The event of the subscription to remove."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to unsubscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.EventMessage ) => void",
											"description": "The onEvent callback of the subscription to be removed.\nIt must be the same call back provided in the `on` methods."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the error thrown trying to remove the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								}
							],
							"returns": {
								"type": "void"
							},
							"should-exists": true,
							"should-unsubscribe with the Messaging Service for relative uriPattern": true,
							"should-unsubscribe with the Messaging Service for absolute uriPattern": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "on",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Subscribe to the specified uri pattern event notifications.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.CHILD_CREATED",
											"description": "The event to subscribe for its notifications."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.ChildCreatedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the specified uri pattern event notifications.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.DOCUMENT_MODIFIED",
											"description": "The event to subscribe for its notifications."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentModifiedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the specified uri pattern event notifications.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.DOCUMENT_DELETED",
											"description": "The event to subscribe for its notifications."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentDeletedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the specified uri pattern event notifications.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.MEMBER_ADDED",
											"description": "The event to subscribe for its notifications."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberAddedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the specified uri pattern event notifications.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.MEMBER_REMOVED",
											"description": "The event to subscribe for its notifications."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberRemovedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to the specified uri pattern event notifications.",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event | string",
											"description": "The event to subscribe for its notifications."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.EventMessage ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								}
							],
							"returns": {
								"type": "void"
							},
							"should-exists": true,
							"should-subscribe with the Messaging Service for relative uriPattern": true,
							"should-subscribe with the Messaging Service for absolute uriPattern": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "onChildCreated",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Subscribe to the `CarbonLDP.Messaging.Event.CHILD_CREATED` event notifications for the uri pattern specified.",
									"arguments": [
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.ChildCreatedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback thar receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								}
							],
							"returns": {
								"type": "void"
							},
							"should-exists": true,
							"should-should call .on": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "onDocumentDeleted",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Subscribe to the `CarbonLDP.Messaging.Event.DOCUMENT_DELETED` event notifications for the uri pattern specified.",
									"arguments": [
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentDeletedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback thar receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								}
							],
							"returns": {
								"type": "void"
							},
							"should-exists": true,
							"should-should call .on": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "onDocumentModified",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Subscribe to the `CarbonLDP.Messaging.Event.DOCUMENT_MODIFIED` event notifications for the uri pattern specified.",
									"arguments": [
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentModifiedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback thar receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								}
							],
							"returns": {
								"type": "void"
							},
							"should-exists": true,
							"should-should call .on": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "onMemberAdded",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Subscribe to the `CarbonLDP.Messaging.Event.MEMBER_ADDED` event notifications for the uri pattern specified.",
									"arguments": [
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberAddedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback thar receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								}
							],
							"returns": {
								"type": "void"
							},
							"should-exists": true,
							"should-should call .on": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "onMemberRemoved",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Subscribe to the `CarbonLDP.Messaging.Event.MEMBER_REMOVED` event notifications for the uri pattern specified.",
									"arguments": [
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberRemovedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback thar receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								}
							],
							"returns": {
								"type": "void"
							},
							"should-exists": true,
							"should-should call .on": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "one",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Subscribe to only one notification to the uri pattern and event provided",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.CHILD_CREATED",
											"description": "The event to subscribe for one notification."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.ChildCreatedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to only one notification to the uri pattern and event provided",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.DOCUMENT_MODIFIED",
											"description": "The event to subscribe for one notification."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentModifiedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to only one notification to the uri pattern and event provided",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.DOCUMENT_DELETED",
											"description": "The event to subscribe for one notification."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.DocumentDeletedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to only one notification to the uri pattern and event provided",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.MEMBER_ADDED",
											"description": "The event to subscribe for one notification."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberAddedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to only one notification to the uri pattern and event provided",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event.MEMBER_REMOVED",
											"description": "The event to subscribe for one notification."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.MemberRemovedEvent ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								},
								{
									"generics": null,
									"description": "Subscribe to only one notification to the uri pattern and event provided",
									"arguments": [
										{
											"name": "event",
											"type": "CarbonLDP.Messaging.Event | string",
											"description": "The event to subscribe for one notification."
										},
										{
											"name": "uriPattern",
											"type": "string",
											"description": "URI and/or pattern of the resource(s) to subscribe for."
										},
										{
											"name": "onEvent",
											"type": "( message:CarbonLDP.Messaging.EventMessage ) => void",
											"description": "Callback that receives the data message from the notification event."
										},
										{
											"name": "onError",
											"type": "( error:Error ) => void",
											"description": "Callback that receives the errors thrown by the subscription."
										}
									],
									"returns": {
										"type": "void"
									}
								}
							],
							"returns": {
								"type": "void"
							},
							"should-exists": true,
							"should-subscribe with the Messaging Service for relative uriPattern": true,
							"should-subscribe with the Messaging Service for absolute uriPattern": true,
							"should-call user onEvent after message": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "EventEmitterDocumentsRepositoryTraitFactory",
					"description": "Interface with the decoration, factory and utils for `CarbonLDP.DocumentsRepository.Traits.EventEmitterDocumentsRepositoryTrait` objects.",
					"generics": null,
					"path": "CarbonLDP.DocumentsRepository.Traits.EventEmitterDocumentsRepositoryTraitFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.DocumentsRepository.Traits.EventEmitterDocumentsRepositoryTrait, CarbonLDP.GeneralRepository<CarbonLDP.Document>"
						},
						{
							"name": "CarbonLDP.Model.ModelDecorator<CarbonLDP.DocumentsRepository.Traits.EventEmitterDocumentsRepositoryTrait<any>, CarbonLDP.BaseDocumentsRepository>"
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "EventEmitterDocumentsRepositoryTrait",
						"type": "CarbonLDP.DocumentsRepository.Traits.EventEmitterDocumentsRepositoryTraitFactory",
						"description": null,
						"optional": null,
						"should-exists": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "HTTPRepositoryTrait",
			"description": null,
			"path": "carbonldp/DocumentsRepository/Traits/HTTPRepositoryTrait",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "HTTPRepositoryTrait",
					"description": "Repository trait with general HTTP requests",
					"generics": [
						"MODEL extends ResolvablePointer = ResolvablePointer"
					],
					"path": "CarbonLDP.DocumentsRepository.Traits.HTTPRepositoryTrait",
					"properties": [
						{
							"access": null,
							"name": "$context",
							"type": "CarbonLDP.Context<MODEL & RegisteredPointer, MODEL>",
							"description": null,
							"optional": false
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "HTTPRepositoryTrait",
						"type": "CarbonLDP.DocumentsRepository.Traits.HTTPRepositoryTraitFactory",
						"description": null,
						"optional": null,
						"should-exists": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "LDPDocumentsRepositoryTrait",
			"description": null,
			"path": "carbonldp/DocumentsRepository/Traits/LDPDocumentsRepositoryTrait",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "LDPDocumentsRepositoryTrait",
					"description": "Documents repository with the implementation for sparql queries.",
					"generics": null,
					"path": "CarbonLDP.DocumentsRepository.Traits.LDPDocumentsRepositoryTrait",
					"super-classes": [
						{
							"name": "CarbonLDP.GeneralRepository<CarbonLDP.Document>"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "$context",
							"type": "CarbonLDP.DocumentsContext",
							"description": null,
							"optional": false
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "addMember",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Adds the provided resource as member of the specified document.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document to add the specified member."
										},
										{
											"name": "member",
											"type": "CarbonLDP.Pointer | string",
											"description": "URI or Pointer to add as a member."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<void>"
									}
								}
							],
							"returns": {
								"type": "Promise<void>"
							},
							"should-exists": true,
							"should-request the URI provided": true,
							"should-request relative URI provided": true,
							"should-request resolved prefixed name provided": true,
							"should-throw error when URI outside context scope": true,
							"should-throw error when URI is BNode label": true,
							"should-throw error when URI is Named Fragment label": true,
							"should-throw error when URI is unresolved prefixed name": true,
							"should-send add action when relative member": true,
							"should-send add action when absolute member": true,
							"should-send add action when Pointer member": true,
							"should-send basic request headers": true,
							"should-add custom headers": true,
							"should-parse ErrorResponse into error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "addMembers",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Adds the provided resources as members of the specified document.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document to add the specified member."
										},
										{
											"name": "member",
											"type": "CarbonLDP.Pointer | string",
											"description": "URI or Pointer to add as a member."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<void>"
									}
								}
							],
							"returns": {
								"type": "Promise<void>"
							},
							"should-exists": true,
							"should-request the URI provided": true,
							"should-request relative URI provided": true,
							"should-request resolved prefixed name provided": true,
							"should-throw error when URI outside context scope": true,
							"should-throw error when URI is BNode label": true,
							"should-throw error when URI is Named Fragment label": true,
							"should-throw error when URI is a unresolved prefixed name": true,
							"should-send add action when absolute member": true,
							"should-send add action when relative member": true,
							"should-send add action when Pointer member": true,
							"should-send add action when Pointer & string member": true,
							"should-send basic request headers": true,
							"should-add custom headers": true,
							"should-parse ErrorResponse into error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "create",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists the object as a child of the uri specified.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document where to create the child."
										},
										{
											"name": "child",
											"type": "T",
											"description": "The object from where to create the child."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists the object with the slug specified as a child of the uri specified.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document where to create the child."
										},
										{
											"name": "child",
											"type": "T",
											"description": "The object from where to create the child."
										},
										{
											"name": "slug",
											"type": "string",
											"description": "The slug that will be used in the child URI."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists multiple objects as children of the uri specified.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document where to create the child."
										},
										{
											"name": "children",
											"type": "T[]",
											"description": "An array with the objects to be persisted as the new children."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for every the request."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>",
										"description": "Promise that contains the new UNRESOLVED persisted children."
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists multiple objects as children of the uri specified.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document where to create the child."
										},
										{
											"name": "children",
											"type": "T[]",
											"description": "An array with the objects to be persisted as the new children."
										},
										{
											"name": "slugs",
											"type": "string[]",
											"description": "Array with the slugs that corresponds to each object in `object` parameter, in the order in which they were defined. If an element in the array is undefined or null, the slug will be generated by the platform."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for every the request."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>",
										"description": "Promise that contains the new UNRESOLVED persisted children."
									}
								}
							],
							"returns": {
								"type": "Promise<T & CarbonLDP.Document>"
							},
							"should-exists": true,
							"should-request from URI": true,
							"should-request from relative URI": true,
							"should-request from resolved prefixed name": true,
							"should-throw error when URI outside context scope": true,
							"should-throw error when URI is BNode label": true,
							"should-throw error when URI is Named Fragment label": true,
							"should-throw error when unresolved prefixed name": true,
							"should-send basic request headers in single child": true,
							"should-send basic request headers in multiple child": true,
							"should-add custom headers in single child": true,
							"should-send custom request headers in multiple children": true,
							"should-add slug header when single child": true,
							"should-add slug header when multiple child": true,
							"should-add slug header if defined when multiple child": true,
							"should-not add slug header when multiple but less slugs than children": true,
							"should-send converted JSONLD when single child": true,
							"should-send converted JSONLD when multiple children": true,
							"should-return same child object reference": true,
							"should-return same children object references": true,
							"should-have stored the child in the registry": true,
							"should-have stored the children in the registry": true,
							"should-throw error if child is already persisted": true,
							"should-throw error if any children is already persisted": true,
							"should-throw error if child already being persisted": true,
							"should-be able to resend child after a failed request": true,
							"should-add unresolved data to the child": true,
							"should-add unresolved data to the children": true,
							"should-update blank nodes when response metadata returned": true,
							"should-parse ErrorResponse into error when single child": true,
							"should-parse ErrorResponse into error when multiple child": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "createAndRetrieve",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists the object as a child of the uri specified and retrieves the updates data from the server.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document where to create the child."
										},
										{
											"name": "child",
											"type": "T",
											"description": "The object from where to create the child."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists the object with the slug specified as a child of the uri specified and retrieves the updates data from the server.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document where to create the child."
										},
										{
											"name": "child",
											"type": "T",
											"description": "The object from where to create the child."
										},
										{
											"name": "slug",
											"type": "string",
											"description": "The slug that will be used in the child URI."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists multiple objects as children of the uri specified and retrieves the updates data from the server.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document where to create the child."
										},
										{
											"name": "children",
											"type": "T[]",
											"description": "An array with the objects to be persisted as the new children."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for every the request."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>",
										"description": "Promise that contains the new UNRESOLVED persisted children."
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Persists multiple objects as children of the uri specified and retrieves the updates data from the server.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document where to create the child."
										},
										{
											"name": "children",
											"type": "T[]",
											"description": "An array with the objects to be persisted as the new children."
										},
										{
											"name": "slugs",
											"type": "string[]",
											"description": "Array with the slugs that corresponds to each object in `object` parameter, in the order in which they were defined. If an element in the array is undefined or null, the slug will be generated by the platform."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for every the request."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>",
										"description": "Promise that contains the new UNRESOLVED persisted children."
									}
								}
							],
							"returns": {
								"type": "Promise<T & CarbonLDP.Document>"
							},
							"should-exists": true,
							"should-request from URI": true,
							"should-request from relative URI": true,
							"should-request from resolved prefixed name": true,
							"should-throw error when from URI outside context scope": true,
							"should-throw error when from URI is BNode label": true,
							"should-throw error when from URI is Named Fragment label": true,
							"should-throw error when unresolved prefixed name": true,
							"should-send basic request headers in single child": true,
							"should-send basic request headers in multiple child": true,
							"should-add custom headers in single child": true,
							"should-send basic request headers in multiple children": true,
							"should-add slug header when single child": true,
							"should-add slug header when multiple child": true,
							"should-not add slug header when multiple but less slugs than children": true,
							"should-send converted JSONLD when single child": true,
							"should-send converted JSONLD when multiple children": true,
							"should-return same child object reference": true,
							"should-return same children object references": true,
							"should-have stored the child in the registry": true,
							"should-have stored the children in the registry": true,
							"should-throw error if child is already persisted": true,
							"should-throw error if any children is already persisted": true,
							"should-throw error if child already being persisted": true,
							"should-be able to resend child after a failed request": true,
							"should-add resolved data to the child": true,
							"should-add resolved data to the children": true,
							"should-update the child data": true,
							"should-update the children data": true,
							"should-update blank nodes when response metadata returned": true,
							"should-parse ErrorResponse into error when single child": true,
							"should-parse ErrorResponse into error when multiple child": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "delete",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Delete the resource referred by the URI provided from the server.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The resource to be deleted."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<void>"
									}
								}
							],
							"returns": {
								"type": "Promise<void>"
							},
							"should-exists": true,
							"should-request from URI": true,
							"should-request from relative URI": true,
							"should-throw error when from URI is BNode label": true,
							"should-throw error when from URI is Named Fragment label": true,
							"should-throw error when unresolved prefixed name": true,
							"should-send basic request headers": true,
							"should-add custom headers": true,
							"should-remove pointer whe URI provided": true,
							"should-parse ErrorResponse into error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "exists",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI to verify if its existence."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<boolean>"
									}
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							},
							"should-exists": true,
							"should-request the URI provided": true,
							"should-request relative URI provided": true,
							"should-request resolved prefixed name provided": true,
							"should-throw error when from URI outside context scope": true,
							"should-throw error when from URI is BNode label": true,
							"should-throw error when from URI is Named Fragment label": true,
							"should-throw error when unresolved prefixed name": true,
							"should-send basic request headers": true,
							"should-add custom headers": true,
							"should-return true if request success": true,
							"should-return false if request 404": true,
							"should-parse ErrorResponse into error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "get",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": null,
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the resource to retrieve."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.GETOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								}
							],
							"returns": {
								"type": "Promise<T & CarbonLDP.Document>"
							},
							"should-exists": true,
							"should-request the URI provided": true,
							"should-request relative URI provided": true,
							"should-request resolved prefixed name provided": true,
							"should-throw error when from URI outside context scope": true,
							"should-throw error when from URI is BNode label": true,
							"should-throw error when from URI is Named Fragment label": true,
							"should-throw error when unresolved prefixed name": true,
							"should-send basic request headers": true,
							"should-add custom headers": true,
							"should-return resource requested": true,
							"should-return resource requested when in registry but not resolved": true,
							"should-return registered when already resolved": true,
							"should-return request when already resolved but ensureLatest set": true,
							"should-return resource from content-location header": true,
							"should-return parsed data": true,
							"should-store returned data in the registry": true,
							"should-add resolved values": true,
							"should-parse ErrorResponse into error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "refresh",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Update the document with the latest changes from the server.",
									"arguments": [
										{
											"name": "document",
											"type": "CarbonLDP.Document",
											"description": "The document to be refreshed."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								}
							],
							"returns": {
								"type": "Promise<T & CarbonLDP.Document>"
							},
							"should-exists": true,
							"should-throw error when ID is outside context scope": true,
							"should-throw error when ID is BNode label": true,
							"should-throw error when ID is Named Fragment label": true,
							"should-throw error when ID is unresolved prefixed name": true,
							"should-return same if no-modified received": true,
							"should-send basic request headers": true,
							"should-add custom headers in single child": true,
							"should-update document": true,
							"should-update data": true,
							"should-update blank nodes when response metadata returned": true,
							"should-parse ErrorResponse into error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "removeMember",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Removes the provided resource as member of the specified document.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document to remove the specified member."
										},
										{
											"name": "member",
											"type": "CarbonLDP.Pointer | string",
											"description": "URI or Pointer to remove as a member."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<void>"
									}
								}
							],
							"returns": {
								"type": "Promise<void>"
							},
							"should-exists": true,
							"should-request the URI provided": true,
							"should-request relative URI provided": true,
							"should-request resolved prefixed name provided": true,
							"should-throw error when URI outside context scope": true,
							"should-throw error when URI is BNode label": true,
							"should-throw error when URI is Named Fragment label": true,
							"should-throw error when URI is unresolved prefixed name": true,
							"should-send add action when relative member": true,
							"should-send add action when absolute member": true,
							"should-send add action when Pointer member": true,
							"should-send basic request headers": true,
							"should-add custom headers": true,
							"should-parse ErrorResponse into error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "removeMembers",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Removes the provided resources as members of the specified document. If no members provided, all the available members will be removed.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document to remove the specified member."
										},
										{
											"name": "members",
											"type": "(CarbonLDP.Pointer | string)[]",
											"optional": true,
											"description": "URIs or Pointers to remove as a members."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<void>"
									}
								}
							],
							"returns": {
								"type": "Promise<void>"
							},
							"should-exists": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "resolve",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": null,
									"arguments": [
										{
											"name": "document",
											"type": "CarbonLDP.Document",
											"description": "The document to be resolved."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.GETOptions",
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								}
							],
							"returns": {
								"type": "Promise<T & CarbonLDP.Document>"
							},
							"should-exists": true,
							"should-request to document $id": true,
							"should-send basic request headers": true,
							"should-add custom headers": true,
							"should-return resource requested": true,
							"should-return registered when already resolved": true,
							"should-return requested when already resolved but ensureLatest set": true,
							"should-return parsed data": true,
							"should-store returned data in the registry": true,
							"should-add BasePersistedDocument values": true,
							"should-parse ErrorResponse into error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "save",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Send the changes of the document to the server.",
									"arguments": [
										{
											"name": "document",
											"type": "CarbonLDP.Document",
											"description": "The document to be saved."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								}
							],
							"returns": {
								"type": "Promise<T & CarbonLDP.Document>"
							},
							"should-exists": true,
							"should-throw error when ID is outside context scope": true,
							"should-throw error when ID is BNode label": true,
							"should-throw error when ID is Named Fragment label": true,
							"should-throw error when ID is unresolved prefixed name": true,
							"should-return document if no dirty": true,
							"should-send PATCH when dirty": true,
							"should-send basic request headers": true,
							"should-add custom headers in single child": true,
							"should-send update patch": true,
							"should-update blank nodes when response metadata returned": true,
							"should-parse ErrorResponse into error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "saveAndRefresh",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Send the changes of the document and retrieves the updated data from the server.",
									"arguments": [
										{
											"name": "document",
											"type": "CarbonLDP.Document",
											"description": "The document to be saved."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								}
							],
							"returns": {
								"type": "Promise<T & CarbonLDP.Document>"
							},
							"should-exists": true,
							"should-throw error when ID is outside context scope": true,
							"should-throw error when ID is BNode label": true,
							"should-throw error when ID is Named Fragment label": true,
							"should-throw error when ID is unresolved prefixed name": true,
							"should-return if no dirty": true,
							"should-send PATCH to when dirty": true,
							"should-send basic request headers": true,
							"should-add custom headers in single child": true,
							"should-send update patch": true,
							"should-update from representation": true,
							"should-update data": true,
							"should-update blank nodes when response metadata returned": true,
							"should-parse ErrorResponse into error": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "LDPDocumentsRepositoryTraitFactory",
					"description": "Interface with the decoration, factory and utils for `CarbonLDP.DocumentsRepository.Traits.LDPDocumentsRepositoryTrait` objects.",
					"generics": null,
					"path": "CarbonLDP.DocumentsRepository.Traits.LDPDocumentsRepositoryTraitFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.DocumentsRepository.Traits.LDPDocumentsRepositoryTrait, CarbonLDP.GeneralRepository<CarbonLDP.Document>"
						},
						{
							"name": "CarbonLDP.Model.ModelDecorator<CarbonLDP.DocumentsRepository.Traits.LDPDocumentsRepositoryTrait<any>, CarbonLDP.BaseDocumentsRepository>"
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "LDPDocumentsRepositoryTrait",
						"type": "CarbonLDP.DocumentsRepository.Traits.LDPDocumentsRepositoryTraitFactory",
						"description": null,
						"optional": null,
						"should-exists": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "QueryableDocumentsRepositoryTrait",
			"description": null,
			"path": "carbonldp/DocumentsRepository/Traits/QueryableDocumentsRepositoryTrait",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "QueryableDocumentsRepositoryTrait",
					"description": "Documents repository with the implementation for sparql queries.",
					"generics": null,
					"path": "CarbonLDP.DocumentsRepository.Traits.QueryableDocumentsRepositoryTrait",
					"super-classes": [
						{
							"name": "CarbonLDP.GeneralRepository<CarbonLDP.Document>"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "context",
							"type": "CarbonLDP.DocumentsContext",
							"description": null,
							"optional": false
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "get",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the entire specified document.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to retrieve."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.GETOptions",
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the specified properties and sub-properties of the URI specified by the function provided.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to query."
										},
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentBuilder",
											"description": "Function that receives a the builder that helps you to construct the retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the selected properties and sub-properties of a query builder function provided.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to query."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										},
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentBuilder",
											"optional": true,
											"description": "Function that receives a the builder that helps you to construct the retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								}
							],
							"returns": {
								"type": "Promise<T & CarbonLDP.Document>"
							},
							"should-exists": true,
							"should-request the URI provided": true,
							"should-request relative URI provided": true,
							"should-request resolved prefixed name provided": true,
							"should-throw error when from URI outside context scope": true,
							"should-throw error when from URI is BNode label": true,
							"should-throw error when from URI is Named Fragment label": true,
							"should-throw error when unresolved prefixed name": true,
							"should-send basic request headers": true,
							"should-add custom headers": true,
							"should-send CONSTRUCT query": true,
							"should-return queried document": true,
							"should-return queried document with partial relations": true,
							"should-add persisted document data": true,
							"should-add persisted data at the partial relations": true,
							"should-add partial metadata data": true,
							"should-add partial metadata at the partial relations": true,
							"should-merge query results": true,
							"should-merge partial metadata": true,
							"should-call LDPDocumentsRepositoryTrait when URI": true,
							"should-call LDPDocumentsRepositoryTrait when URI and options": true,
							"should-ensure latest when is partial and no builder function": true,
							"should-ensure latest when URI is partial and no builder function, with options": true,
							"should-parse ErrorResponse into error": true,
							"should-send CONSTRUCT query with virtual property": true,
							"should-return queried document with local virtual property": true,
							"should-return queried document with external virtual property": true,
							"should-add partial metadata data with local virtual property": true,
							"should-add partial metadata data with external virtual property": true,
							"should-query metadata when partial and entire requested": true,
							"should-remove virtual property when partial and entire requested": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "getChildren",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the children of the specified URI, building a query on which one is able to specify the properties to be retrieve and sub-documents' properties and on and on.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to query."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"description": "Customizable options for the request."
										},
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentsBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentsBuilder",
											"optional": true,
											"description": "Function that receives a the builder that helps you to construct the children retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the children of the specified URI, building a query on which one is able to specify the properties to be retrieve and sub-documents' properties and on and on.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to query."
										},
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentsBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentsBuilder",
											"optional": true,
											"description": "Function that receives a the builder that helps you to construct the children retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>"
									}
								}
							],
							"returns": {
								"type": "Promise<(T & CarbonLDP.Document)[]>"
							},
							"should-exists": true,
							"should-request the URI provided": true,
							"should-request relative URI provided": true,
							"should-request resolved prefixed name provided": true,
							"should-throw error when from URI outside context scope": true,
							"should-throw error when from URI is BNode label": true,
							"should-throw error when from URI is Named Fragment label": true,
							"should-throw error when unresolved prefixed name": true,
							"should-send basic request headers": true,
							"should-add custom headers": true,
							"should-send partial CONSTRUCT query": true,
							"should-send full CONSTRUCT query": true,
							"should-send filtered .ALL CONSTRUCT query": true,
							"should-send filtered without optional CONSTRUCT": true,
							"should-order returned children": true,
							"should-return full children": true,
							"should-return .ALL children": true,
							"should-return partial children": true,
							"should-return partial children with partial relations": true,
							"should-parse ErrorResponse into error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "getMembers",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the members of the specified URI, building a query on which one is able to specify the properties to be retrieve and sub-documents' properties and on and on.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to query."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"description": "Customizable options for the request."
										},
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentsBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentsBuilder",
											"optional": true,
											"description": "Function that receives a the builder that helps you to construct the members retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the members of the specified URI, building a query on which one is able to specify the properties to be retrieve and sub-documents' properties and on and on.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to query."
										},
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentsBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentsBuilder",
											"optional": true,
											"description": "Function that receives a the builder that helps you to construct the members retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>"
									}
								}
							],
							"returns": {
								"type": "Promise<(T & CarbonLDP.Document)[]>"
							},
							"should-exists": true,
							"should-request the URI provided": true,
							"should-request relative URI provided": true,
							"should-request resolved prefixed name provided": true,
							"should-throw error when from URI outside context scope": true,
							"should-throw error when from URI is BNode label": true,
							"should-throw error when from URI is Named Fragment label": true,
							"should-throw error when unresolved prefixed name": true,
							"should-send basic request headers": true,
							"should-add custom headers": true,
							"should-send partial CONSTRUCT query": true,
							"should-send full CONSTRUCT query": true,
							"should-send filtered .ALL CONSTRUCT query": true,
							"should-send filtered without optional CONSTRUCT query": true,
							"should-order returned members": true,
							"should-return full members": true,
							"should-return .ALL members": true,
							"should-return partial members": true,
							"should-return partial members with partial relations": true,
							"should-parse ErrorResponse into error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "listChildren",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the empty children of the specified URI.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to query."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>"
									}
								}
							],
							"returns": {
								"type": "Promise<(T & CarbonLDP.Document)[]>"
							},
							"should-exists": true,
							"should-request the URI provided": true,
							"should-request relative URI provided": true,
							"should-request resolved prefixed name provided": true,
							"should-throw error when from URI outside context scope": true,
							"should-throw error when from URI is BNode label": true,
							"should-throw error when from URI is Named Fragment label": true,
							"should-throw error when unresolved prefixed name": true,
							"should-send basic request headers": true,
							"should-add custom headers": true,
							"should-send partial CONSTRUCT query": true,
							"should-return documents": true,
							"should-NOT return partial documents": true,
							"should-parse ErrorResponse into error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "listMembers",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Retrieves the empty members of the specified URI.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to query."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<(T & CarbonLDP.Document)[]>"
									}
								}
							],
							"returns": {
								"type": "Promise<(T & CarbonLDP.Document)[]>"
							},
							"should-exists": true,
							"should-request the URI provided": true,
							"should-request relative URI provided": true,
							"should-request resolved prefixed name provided": true,
							"should-throw error when from URI outside context scope": true,
							"should-throw error when from URI is BNode label": true,
							"should-throw error when from URI is Named Fragment label": true,
							"should-throw error when unresolved prefixed name": true,
							"should-send basic request headers": true,
							"should-add custom headers": true,
							"should-send partial CONSTRUCT query": true,
							"should-return documents": true,
							"should-NOT return partial documents": true,
							"should-parse ErrorResponse into error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "refresh",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Refresh the full or partial document.",
									"arguments": [
										{
											"name": "document",
											"type": "CarbonLDP.Document",
											"description": "The document to be refreshed."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								}
							],
							"returns": {
								"type": "Promise<T & CarbonLDP.Document>"
							},
							"should-exists": true,
							"should-request document ID": true,
							"should-send basic request headers": true,
							"should-add custom headers": true,
							"should-send refresh CONSTRUCT query": true,
							"should-send refresh CONSTRUCT query when document is .ALL": true,
							"should-refresh from returned data": true,
							"should-update persisted document data": true,
							"should-assign new eTag when locally outdated": true,
							"should-call LDPDocumentsRepositoryTrait when full": true,
							"should-call LDPDocumentsRepositoryTrait when full and options": true,
							"should-parse ErrorResponse into error": true,
							"should-send CONSTRUCT query with virtual property": true,
							"should-return queried document with virtual property": true,
							"should-maintain partial metadata data with local virtual property": true,
							"should-remove virtual property when no in new data": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "resolve",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Resolves the entire specified document.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to retrieve."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.GETOptions",
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Resolves the specified properties and sub-properties of the URI specified by the function provided.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to query."
										},
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentBuilder",
											"description": "Function that receives a the builder that helps you to construct the retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								},
								{
									"generics": [
										"T extends object"
									],
									"description": "Resolves the selected properties and sub-properties of a query builder function provided.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "The URI of the document to query."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										},
										{
											"name": "queryBuilderFn",
											"type": "( queryBuilder:CarbonLDP.QueryDocuments.QueryDocumentBuilder ) => CarbonLDP.QueryDocuments.QueryDocumentBuilder",
											"optional": true,
											"description": "Function that receives a the builder that helps you to construct the retrieval query.\nThe same builder must be returned."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								}
							],
							"returns": {
								"type": "Promise<T & CarbonLDP.Document>"
							},
							"should-exists": true,
							"should-send basic request headers": true,
							"should-add custom headers": true,
							"should-send CONSTRUCT query": true,
							"should-add TYPES at CONSTRUCT when available": true,
							"should-return queried document": true,
							"should-return queried document with partial relations": true,
							"should-add persisted document data": true,
							"should-add persisted data at the partial relations": true,
							"should-add partial metadata data": true,
							"should-add partial metadata at the partial relations": true,
							"should-merge query results": true,
							"should-merge partial metadata": true,
							"should-call LDPDocumentsRepositoryTrait when nothing": true,
							"should-call LDPDocumentsRepositoryTrait when options": true,
							"should-ensure latest when current is partial and no builder function": true,
							"should-ensure latest when current is partial and no builder function, with options": true,
							"should-parse ErrorResponse into error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "saveAndRefresh",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Send the changes of the document and retrieves the updated data from the server.",
									"arguments": [
										{
											"name": "document",
											"type": "CarbonLDP.Document",
											"description": "The document to be saved."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<T & CarbonLDP.Document>"
									}
								}
							],
							"returns": {
								"type": "Promise<T & CarbonLDP.Document>"
							},
							"should-exists": true,
							"should-throw error when self ID is outside context scope": true,
							"should-throw error when self ID is BNode label": true,
							"should-throw error when self ID is Named Fragment label": true,
							"should-throw error when self ID is unresolved prefixed name": true,
							"should-only refresh when NO dirty": true,
							"should-send PATCH to self when dirty": true,
							"should-throw error when locally outdated": true,
							"should-send basic request headers": true,
							"should-add custom headers in single self child": true,
							"should-send LD-PATCH": true,
							"should-send refresh CONSTRUCT query": true,
							"should-update resolvable data": true,
							"should-call LDPDocumentsRepositoryTrait when full": true,
							"should-call LDPDocumentsRepositoryTrait when full and options": true,
							"should-parse ErrorResponse into error": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "QueryableDocumentsRepositoryTraitFactory",
					"description": "Interface with the decoration, factory and utils for `CarbonLDP.DocumentsRepository.Traits.QueryableDocumentsRepositoryTrait` objects.",
					"generics": null,
					"path": "CarbonLDP.DocumentsRepository.Traits.QueryableDocumentsRepositoryTraitFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.DocumentsRepository.Traits.QueryableDocumentsRepositoryTrait, CarbonLDP.DocumentsRepository.Traits.LDPDocumentsRepositoryTrait, \"get\" | \"resolve\" | \"refresh\" | \"saveAndRefresh\">"
						},
						{
							"name": "CarbonLDP.Model.ModelDecorator<CarbonLDP.DocumentsRepository.Traits.QueryableDocumentsRepositoryTrait<any>, CarbonLDP.BaseDocumentsRepository>"
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "QueryableDocumentsRepositoryTrait",
						"type": "CarbonLDP.DocumentsRepository.Traits.QueryableDocumentsRepositoryTraitFactory",
						"description": null,
						"optional": null,
						"should-exists": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "SPARQLDocumentsRepositoryTrait",
			"description": null,
			"path": "carbonldp/DocumentsRepository/Traits/SPARQLDocumentsRepositoryTrait",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "SPARQLDocumentsRepositoryTrait",
					"description": "Documents repository with the implementation for sparql queries.",
					"generics": null,
					"path": "CarbonLDP.DocumentsRepository.Traits.SPARQLDocumentsRepositoryTrait",
					"super-classes": [
						{
							"name": "CarbonLDP.GeneralRepository<CarbonLDP.Document>"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "context",
							"type": "CarbonLDP.DocumentsContext",
							"description": null,
							"optional": false
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "executeASKQuery",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Executes an ASK query on a document and returns the response of the query in form of a boolean.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document that works as a SPARQL endpoint where to execute the SPARQL query."
										},
										{
											"name": "askQuery",
											"type": "string",
											"description": "ASK query to execute in the selected endpoint."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<boolean>"
									}
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							},
							"should-exists": true,
							"should-request from URI provided": true,
							"should-resolve relative URI": true,
							"should-resolve prefixed name": true,
							"should-reject promise if URI is not in the context base": true,
							"should-reject promise if prefixed URI cannot be resolved": true,
							"should-pass the query": true,
							"should-pass the options": true,
							"should-parse ErrorResponse into error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "executeSELECTQuery",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Executes a SELECT query on a document and returns a parsed response object.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document that works as a SPARQL endpoint where to execute the SPARQL query."
										},
										{
											"name": "selectQuery",
											"type": "string",
											"description": "SELECT query to execute in the selected endpoint."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<CarbonLDP.SPARQL.SPARQLSelectResults<T>>"
									}
								}
							],
							"returns": {
								"type": "Promise<CarbonLDP.SPARQL.SPARQLSelectResults<T>>"
							},
							"should-exists": true,
							"should-request from URI provided": true,
							"should-resolve relative URI": true,
							"should-resolve prefixed name": true,
							"should-reject promise if URI is not in the context base": true,
							"should-reject promise if prefixed URI cannot be resolved": true,
							"should-pass the query": true,
							"should-pass the options": true,
							"should-parse ErrorResponse into error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "executeUPDATE",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Executes a DESCRIBE query on a document and returns a string with the resulting model.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document that works as a SPARQL endpoint where to execute the SPARQL query."
										},
										{
											"name": "update",
											"type": "string",
											"description": "UPDATE query to execute in the selected endpoint."
										},
										{
											"name": "requestOptions",
											"type": "CarbonLDP.HTTP.RequestOptions",
											"optional": true,
											"description": "Customizable options for the request."
										}
									],
									"returns": {
										"type": "Promise<void>"
									}
								}
							],
							"returns": {
								"type": "Promise<void>"
							},
							"should-exists": true,
							"should-request from URI provided": true,
							"should-resolve relative URI": true,
							"should-resolve prefixed name": true,
							"should-reject promise if URI is not in the context base": true,
							"should-reject promise if prefixed URI cannot be resolved": true,
							"should-pass the update": true,
							"should-pass the options": true,
							"should-parse ErrorResponse into error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "sparql",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Method that creates an instance of SPARQLER for the specified document URI.",
									"arguments": [
										{
											"name": "uri",
											"type": "string",
											"description": "URI of the document where to execute the SPARQL query."
										}
									],
									"returns": {
										"type": "SPARQLER/Clauses/QueryClause<CarbonLDP.SPARQL.Builder.FinishSPARQLSelect>"
									}
								}
							],
							"returns": {
								"type": "SPARQLER/Clauses/QueryClause<CarbonLDP.SPARQL.Builder.FinishSPARQLSelect>"
							},
							"should-exists": true,
							"should-return a QueryClause": true,
							"should-add schema base": true,
							"should-add used prefixes": true,
							"should-return object to execute SELECT": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "SPARQLDocumentsRepositoryTraitFactory",
					"description": "Interface with the decoration, factory and utils for `CarbonLDP.DocumentsRepository.Traits.SPARQLDocumentsRepositoryTrait` objects.",
					"generics": null,
					"path": "CarbonLDP.DocumentsRepository.Traits.SPARQLDocumentsRepositoryTraitFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.DocumentsRepository.Traits.SPARQLDocumentsRepositoryTrait, CarbonLDP.GeneralRepository<CarbonLDP.Document>"
						},
						{
							"name": "CarbonLDP.Model.ModelDecorator<CarbonLDP.DocumentsRepository.Traits.SPARQLDocumentsRepositoryTrait<any>, CarbonLDP.BaseDocumentsRepository>"
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "SPARQLDocumentsRepositoryTrait",
						"type": "CarbonLDP.DocumentsRepository.Traits.SPARQLDocumentsRepositoryTraitFactory",
						"description": null,
						"optional": null,
						"should-exists": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "Errors",
			"description": null,
			"path": "carbonldp/Errors",
			"is-defined": true,
			"reexports": [
				{
					"access": "static",
					"name": "AbstractError",
					"originalLocation": "CarbonLDP.Errors.AbstractError"
				},
				{
					"access": "static",
					"name": "IDAlreadyInUseError",
					"originalLocation": "CarbonLDP.Errors.IDAlreadyInUseError"
				},
				{
					"access": "static",
					"name": "IllegalActionError",
					"originalLocation": "CarbonLDP.Errors.IllegalActionError"
				},
				{
					"access": "static",
					"name": "IllegalArgumentError",
					"originalLocation": "CarbonLDP.Errors.IllegalArgumentError"
				},
				{
					"access": "static",
					"name": "IllegalStateError",
					"originalLocation": "CarbonLDP.Errors.IllegalStateError"
				},
				{
					"access": "static",
					"name": "InvalidJSONLDSyntaxError",
					"originalLocation": "CarbonLDP.Errors.InvalidJSONLDSyntaxError"
				},
				{
					"access": "static",
					"name": "NotImplementedError",
					"originalLocation": "CarbonLDP.Errors.NotImplementedError"
				}
			]
		},
		{
			"suiteType": "module",
			"name": "AbstractError",
			"description": null,
			"path": "carbonldp/Errors/AbstractError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "AbstractError",
					"description": "Class that works as template for the custom errors in the SDK.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.Errors.AbstractError",
					"is-defined": true,
					"constructors": {
						"signatures": [
							{
								"access": "static",
								"description": null,
								"arguments": [
									{
										"name": "message",
										"type": "string"
									}
								]
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "message",
								"type": "string",
								"description": null,
								"optional": null
							},
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "IDAlreadyInUseError",
			"description": null,
			"path": "carbonldp/Errors/IDAlreadyInUseError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "IDAlreadyInUseError",
					"description": "Error class to indicate that an identifier (ID) is already in use.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.Errors.IDAlreadyInUseError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.Errors.AbstractError.AbstractError"
						}
					],
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "IllegalActionError",
			"description": null,
			"path": "carbonldp/Errors/IllegalActionError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "IllegalActionError",
					"description": "Error class to indicate that an action not allowed was attempted.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.Errors.IllegalActionError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.Errors.AbstractError.AbstractError"
						}
					],
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "IllegalArgumentError",
			"description": null,
			"path": "carbonldp/Errors/IllegalArgumentError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "IllegalArgumentError",
					"description": "Error class to indicate that a different argument than the expected was provided.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.Errors.IllegalArgumentError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.Errors.AbstractError.AbstractError"
						}
					],
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "IllegalStateError",
			"description": null,
			"path": "carbonldp/Errors/IllegalStateError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "IllegalStateError",
					"description": "Error class to indicate that a task can't be completed because of the lack of pre-required configuration or execution of previous tasks.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.Errors.IllegalStateError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.Errors.AbstractError.AbstractError"
						}
					],
					"constructors": {
						"signatures": [
							{
								"access": "static",
								"description": null,
								"arguments": [
									{
										"name": "message",
										"type": "string",
										"optional": true
									}
								]
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "InvalidJSONLDSyntaxError",
			"description": null,
			"path": "carbonldp/Errors/InvalidJSONLDSyntaxError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "InvalidJSONLDSyntaxError",
					"description": "Error class to indicate that there an invalid syntax in a JSON-LD object.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.Errors.InvalidJSONLDSyntaxError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.Errors.AbstractError.AbstractError"
						}
					],
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "NotImplementedError",
			"description": null,
			"path": "carbonldp/Errors/NotImplementedError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "NotImplementedError",
					"description": "Error class to indicate that an action is not yet implemented.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.Errors.NotImplementedError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.Errors.AbstractError.AbstractError"
						}
					],
					"constructors": {
						"signatures": [
							{
								"access": "static",
								"description": null,
								"arguments": [
									{
										"name": "message",
										"type": "string",
										"optional": true
									}
								]
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "Fragment",
			"description": null,
			"path": "carbonldp/Fragment",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "BaseResolvableFragment",
					"description": "Interface with the base properties for the creation of a Fragment.",
					"generics": null,
					"path": "CarbonLDP.BaseResolvableFragment",
					"super-classes": [
						{
							"name": "CarbonLDP.BaseTransientFragment"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "$registry",
							"type": "CarbonLDP.Document",
							"description": null,
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "BaseTransientFragment",
					"description": "Interface with the base properties of a fragment.",
					"generics": null,
					"path": "CarbonLDP.BaseTransientFragment",
					"properties": [
						{
							"access": null,
							"name": "$registry",
							"type": "CarbonLDP.TransientDocument",
							"description": "The transient document the transient fragment belongs to.",
							"optional": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "Fragment",
					"description": "Interface that represents a persisted fragment of a persisted document.",
					"generics": null,
					"path": "CarbonLDP.Fragment",
					"super-classes": [
						{
							"name": "CarbonLDP.TransientFragment"
						},
						{
							"name": "CarbonLDP.QueryDocuments.QueryablePointer"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "$document",
							"type": "CarbonLDP.Document",
							"description": "The document where the fragment belongs to.",
							"optional": false
						},
						{
							"access": null,
							"name": "$registry",
							"type": "CarbonLDP.Document",
							"description": "The registry where the fragment belongs to.",
							"optional": true
						},
						{
							"access": null,
							"name": "$repository",
							"type": "CarbonLDP.Document",
							"description": "The repository associated where the fragment can be resolved with.",
							"optional": false,
							"should-assign the $registry ": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "FragmentFactory",
					"description": "Interface with the factory, decorate and utils methods of a `CarbonLDP.Fragment` object.",
					"generics": null,
					"path": "CarbonLDP.FragmentFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.Fragment, CarbonLDP.TransientFragment & CarbonLDP.QueryDocuments.QueryablePointer>"
						},
						{
							"name": "CarbonLDP.Model.ModelDecorator<CarbonLDP.Fragment, CarbonLDP.BaseResolvableFragment>"
						},
						{
							"name": "CarbonLDP.Model.ModelFactory<CarbonLDP.Fragment, CarbonLDP.BaseResolvableFragment>"
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "TransientFragment",
					"description": "Interface of an in-memory fragment of a document.",
					"generics": null,
					"path": "CarbonLDP.TransientFragment",
					"properties": [
						{
							"access": null,
							"name": "$document",
							"type": "CarbonLDP.TransientDocument",
							"description": "The transient document where the transient fragment belongs to.",
							"optional": false,
							"should-assign the $registry ": true
						},
						{
							"access": null,
							"name": "$registry",
							"type": "CarbonLDP.TransientDocument",
							"description": "The registry where the transient fragment belongs to.",
							"optional": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "TransientFragmentFactory",
					"description": "Interface with the factory, decorate and utils methods of a `CarbonLDP.TransientFragment` object.",
					"generics": null,
					"path": "CarbonLDP.TransientFragmentFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.TransientFragment, CarbonLDP.Resource>"
						},
						{
							"name": "CarbonLDP.Model.ModelDecorator<CarbonLDP.TransientFragment, CarbonLDP.BaseTransientFragment>"
						},
						{
							"name": "CarbonLDP.Model.ModelTypeGuard<CarbonLDP.TransientFragment>"
						},
						{
							"name": "CarbonLDP.Model.ModelFactory<CarbonLDP.TransientFragment, CarbonLDP.BaseTransientFragment>"
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "Fragment",
						"type": "CarbonLDP.FragmentFactory",
						"description": "Constant that implements the `CarbonLDP.FragmentFactory` interface.",
						"optional": null,
						"is-defined": true
					},
					{
						"access": "static",
						"name": "TransientFragment",
						"type": "CarbonLDP.TransientFragmentFactory",
						"description": "Constant that implements the `CarbonLDP.TransientFragmentFactory` interface",
						"optional": null
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "FreeResources",
			"description": null,
			"path": "carbonldp/FreeResources",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "BaseFreeResources",
					"description": "Interface for the basic properties to create a free resources container.",
					"generics": null,
					"path": "CarbonLDP.BaseFreeResources",
					"properties": [
						{
							"access": null,
							"name": "registry",
							"type": "CarbonLDP.GeneralRegistry<any>",
							"description": "The registry where the FreeResources scope is in.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "FreeResources",
					"description": "Interface that represents a set of free resources.",
					"generics": null,
					"path": "CarbonLDP.FreeResources",
					"super-classes": [
						{
							"name": "CarbonLDP.Registry<CarbonLDP.TransientResource>"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "registry",
							"type": "CarbonLDP.GeneralRegistry<any>",
							"description": "The registry where the FreeResources scope is in.",
							"optional": false
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "toJSON",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns a JSON-LD Node array using the data available from the registry of the current container.",
									"arguments": null,
									"returns": {
										"type": "CarbonLDP.RDF.RDFNode[]"
									}
								},
								{
									"generics": null,
									"description": "Returns a JSON-LD Node array using the data of context provided.",
									"arguments": [
										{
											"name": "context",
											"type": "CarbonLDP.Context"
										}
									],
									"returns": {
										"type": "CarbonLDP.RDF.RDFNode[]"
									}
								}
							],
							"returns": {
								"type": "CarbonLDP.RDF.RDFNode[]"
							},
							"should-exists": true,
							"should-expand resource with schema in context": true,
							"should-expand resource with provided context": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "FreeResourcesFactory",
					"description": "Interfaces with the factory, decorate and utils methods of a `CarbonLDP.FreeResources` object.",
					"generics": null,
					"path": "CarbonLDP.FreeResourcesFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.FreeResources, Registry, \"registry\" | \"_getLocalID\" | \"_addPointer\">"
						},
						{
							"name": "CarbonLDP.Model.ModelDecorator<CarbonLDP.FreeResources, CarbonLDP.BaseFreeResources>"
						},
						{
							"name": "CarbonLDP.Model.ModelTypeGuard<CarbonLDP.FreeResources>"
						},
						{
							"name": "CarbonLDP.Model.ModelFactory<CarbonLDP.FreeResources, CarbonLDP.BaseFreeResources>"
						},
						{
							"name": "CarbonLDP.FreeResourcesUtils"
						}
					],
					"FreeResources.create": true,
					"FreeResources.createFrom": true
				},
				{
					"suiteType": "interface",
					"name": "FreeResourcesUtils",
					"description": "Utils for `CarbonLDP.FreeResources` objects.",
					"generics": null,
					"path": "CarbonLDP.FreeResourcesUtils",
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "parseFreeNodes",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "registry",
											"type": "CarbonLDP.GeneralRegistry<any>"
										},
										{
											"name": "freeNodes",
											"type": "CarbonLDP.RDF.RDFNode[]"
										}
									],
									"returns": {
										"type": "CarbonLDP.FreeResources"
									}
								}
							],
							"returns": {
								"type": "CarbonLDP.FreeResources"
							},
							"should-exists": true,
							"should-return FreeResources object": true,
							"should-compact nodes provided": true
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "FreeResources",
						"type": "CarbonLDP.FreeResourcesFactory",
						"description": "Constant that implements the `CarbonLDP.FreeResourcesFactory` interface.",
						"optional": null,
						"is-defined": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "GeneralRegistry",
			"description": null,
			"path": "carbonldp/GeneralRegistry",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "GeneralRegistry",
					"description": "Registry used by the context.",
					"generics": [
						"M extends RegisteredPointer = RegisteredPointer"
					],
					"path": "CarbonLDP.GeneralRegistry",
					"super-classes": [
						{
							"name": "CarbonLDP.Registry<M>"
						},
						{
							"name": "CarbonLDP.ObjectSchemaResolver"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "__modelDecorators",
							"type": "Map<string, CarbonLDP.TypedModelDecorator>",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "context",
							"type": "CarbonLDP.Context",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "registry",
							"type": "CarbonLDP.GeneralRegistry<any> | undefined",
							"description": null,
							"optional": false,
							"should-return undefined when no paren context": true
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "addDecorator",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "decorator",
											"type": "TypedModelDecorator"
										}
									],
									"returns": {
										"type": "this"
									}
								}
							],
							"returns": {
								"type": "this"
							},
							"should-exists": true,
							"should-add decorator to the map": true,
							"should-replace decorator to the map": true,
							"should-return self": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "decorate",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "object",
											"type": "{ types?:string[] }"
										}
									],
									"returns": {
										"type": "void"
									}
								}
							],
							"returns": {
								"type": "void"
							},
							"should-exists": true,
							"should-call no decorate if no types": true,
							"should-call decorator with types": true,
							"should-ignore if no types with decorator": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "GeneralRegistryFactory",
					"description": "Interface with the decoration, factory and utils for `CarbonLDP.GeneralRegistry` objects.",
					"generics": null,
					"path": "CarbonLDP.GeneralRegistryFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.GeneralRegistry, CarbonLDP.Registry & CarbonLDP.ObjectSchemaResolver>"
						},
						{
							"name": "CarbonLDP.Model.ModelDecorator<CarbonLDP.GeneralRegistry<any>, CarbonLDP.BaseGeneralRegistry>"
						},
						{
							"name": "CarbonLDP.Model.ModelFactory<CarbonLDP.GeneralRegistry<any>, CarbonLDP.BaseGeneralRegistry>"
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "GeneralRegistry",
						"type": "CarbonLDP.GeneralRegistryFactory",
						"description": null,
						"optional": null,
						"should-exists": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "GeneralRepository",
			"description": null,
			"path": "carbonldp/GeneralRepository",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "GeneralRepository",
					"description": "Repository used by a context.",
					"generics": [
						"MODEL extends ResolvablePointer = ResolvablePointer"
					],
					"path": "CarbonLDP.GeneralRepository",
					"super-classes": [
						{
							"name": "CarbonLDP.Repository<MODEL>"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "context",
							"type": "CarbonLDP.Context<MODEL & CarbonLDP.RegisteredPointer, MODEL>",
							"description": null,
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "GeneralRepositoryFactory",
					"description": "Interface with the decoration, factory and utils for `CarbonLDP.GeneralRepository` objects.",
					"generics": null,
					"path": "CarbonLDP.GeneralRepositoryFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.GeneralRepository, CarbonLDP.Repository & CarbonLDP.ObjectSchemaResolver>"
						},
						{
							"name": "CarbonLDP.Model.ModelDecorator<CarbonLDP.GeneralRepository<any>, CarbonLDP.BaseGeneralRepository>"
						},
						{
							"name": "CarbonLDP.Model.ModelFactory<CarbonLDP.GeneralRepository<any>, CarbonLDP.BaseGeneralRepository>"
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "GeneralRepository",
						"type": "CarbonLDP.GeneralRepositoryFactory",
						"description": null,
						"optional": null,
						"should-exists": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "HTTP",
			"description": null,
			"path": "carbonldp/HTTP",
			"is-defined": true,
			"reexports": [
				{
					"access": "static",
					"name": "Errors",
					"originalLocation": "carbonldp/HTTP/Errors"
				},
				{
					"access": "static",
					"name": "GETOptions",
					"originalLocation": "CarbonLDP.HTTP.GETOptions"
				},
				{
					"access": "static",
					"name": "Header",
					"originalLocation": "CarbonLDP.HTTP.Header"
				},
				{
					"access": "static",
					"name": "HTTPMethod",
					"originalLocation": "CarbonLDP.HTTP.HTTPMethod"
				},
				{
					"access": "static",
					"name": "JSONParser",
					"originalLocation": "CarbonLDP.HTTP.JSONParser"
				},
				{
					"access": "static",
					"name": "Parser",
					"originalLocation": "CarbonLDP.HTTP.Parser"
				},
				{
					"access": "static",
					"name": "RequestOptions",
					"originalLocation": "CarbonLDP.HTTP.RequestOptions"
				},
				{
					"access": "static",
					"name": "RequestService",
					"originalLocation": "CarbonLDP.HTTP.RequestService"
				},
				{
					"access": "static",
					"name": "RequestUtils",
					"originalLocation": "CarbonLDP.HTTP.RequestUtils"
				},
				{
					"access": "static",
					"name": "Response",
					"originalLocation": "CarbonLDP.HTTP.Response"
				},
				{
					"access": "static",
					"name": "RetrievalPreferences",
					"originalLocation": "CarbonLDP.HTTP.RetrievalPreferences"
				},
				{
					"access": "static",
					"name": "StatusCode",
					"originalLocation": "CarbonLDP.HTTP.StatusCode"
				},
				{
					"access": "static",
					"name": "StringParser",
					"originalLocation": "CarbonLDP.HTTP.StringParser"
				}
			]
		},
		{
			"suiteType": "module",
			"name": "Errors",
			"description": null,
			"path": "carbonldp/HTTP/Errors",
			"is-defined": true,
			"reexports": [
				{
					"access": "static",
					"name": "BadGatewayError",
					"originalLocation": "CarbonLDP.HTTP.Errors.BadGatewayError"
				},
				{
					"access": "static",
					"name": "BadRequestError",
					"originalLocation": "CarbonLDP.HTTP.Errors.BadRequestError"
				},
				{
					"access": "static",
					"name": "BadResponseError",
					"originalLocation": "CarbonLDP.HTTP.Errors.BadResponseError"
				},
				{
					"access": "static",
					"name": "ConflictError",
					"originalLocation": "CarbonLDP.HTTP.Errors.ConflictError"
				},
				{
					"access": "static",
					"name": "ForbiddenError",
					"originalLocation": "CarbonLDP.HTTP.Errors.ForbiddenError"
				},
				{
					"access": "static",
					"name": "GatewayTimeoutError",
					"originalLocation": "CarbonLDP.HTTP.Errors.GatewayTimeoutError"
				},
				{
					"access": "static",
					"name": "HTTPError",
					"originalLocation": "CarbonLDP.HTTP.Errors.HTTPError"
				},
				{
					"access": "static",
					"name": "HTTPVersionNotSupportedError",
					"originalLocation": "CarbonLDP.HTTP.Errors.HTTPVersionNotSupportedError"
				},
				{
					"access": "static",
					"name": "InternalServerErrorError",
					"originalLocation": "CarbonLDP.HTTP.Errors.InternalServerErrorError"
				},
				{
					"access": "static",
					"name": "MethodNotAllowedError",
					"originalLocation": "CarbonLDP.HTTP.Errors.MethodNotAllowedError"
				},
				{
					"access": "static",
					"name": "NotAcceptableError",
					"originalLocation": "CarbonLDP.HTTP.Errors.NotAcceptableError"
				},
				{
					"access": "static",
					"name": "NotFoundError",
					"originalLocation": "CarbonLDP.HTTP.Errors.NotFoundError"
				},
				{
					"access": "static",
					"name": "NotImplementedError",
					"originalLocation": "CarbonLDP.HTTP.Errors.NotImplementedError"
				},
				{
					"access": "static",
					"name": "PreconditionFailedError",
					"originalLocation": "CarbonLDP.HTTP.Errors.PreconditionFailedError"
				},
				{
					"access": "static",
					"name": "PreconditionRequiredError",
					"originalLocation": "CarbonLDP.HTTP.Errors.PreconditionRequiredError"
				},
				{
					"access": "static",
					"name": "RequestEntityTooLargeError",
					"originalLocation": "CarbonLDP.HTTP.Errors.RequestEntityTooLargeError"
				},
				{
					"access": "static",
					"name": "RequestHeaderFieldsTooLargeError",
					"originalLocation": "CarbonLDP.HTTP.Errors.RequestHeaderFieldsTooLargeError"
				},
				{
					"access": "static",
					"name": "RequestURITooLongError",
					"originalLocation": "CarbonLDP.HTTP.Errors.RequestURITooLongError"
				},
				{
					"access": "static",
					"name": "ServiceUnavailableError",
					"originalLocation": "CarbonLDP.HTTP.Errors.ServiceUnavailableError"
				},
				{
					"access": "static",
					"name": "TooManyRequestsError",
					"originalLocation": "CarbonLDP.HTTP.Errors.TooManyRequestsError"
				},
				{
					"access": "static",
					"name": "UnauthorizedError",
					"originalLocation": "CarbonLDP.HTTP.Errors.UnauthorizedError"
				},
				{
					"access": "static",
					"name": "UnknownError",
					"originalLocation": "CarbonLDP.HTTP.Errors.UnknownError"
				},
				{
					"access": "static",
					"name": "UnsupportedMediaTypeError",
					"originalLocation": "CarbonLDP.HTTP.Errors.UnsupportedMediaTypeError"
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "statusCodeMap",
						"type": "Map<number, typeof CarbonLDP.HTTP.Errors.HTTPError>",
						"description": "Map where all the HTTP Status Codes used in the SDK are assigned to their specific error class.",
						"optional": null
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "BadRequestError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/ClientErrors/BadRequestError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "BadRequestError",
					"description": "Error class to indicate that a malformed request has been sent.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.BadRequestError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.HTTP.Errors.HTTPError"
						}
					],
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "ConflictError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/ClientErrors/ConflictError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "ConflictError",
					"description": "Error class to indicate that the request could not be processed because of a conflict, such as an ID conflict.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.ConflictError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.HTTP.Errors.HTTPError"
						}
					],
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "ForbiddenError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/ClientErrors/ForbiddenError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "ForbiddenError",
					"description": "Error class to indicate that the current user doesn't have permissions to fulfill the request.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.ForbiddenError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.HTTP.Errors.HTTPError"
						}
					],
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "MethodNotAllowedError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/ClientErrors/MethodNotAllowedError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "MethodNotAllowedError",
					"description": "Error class to indicate that the method used in the request is not allowed for that URI.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.MethodNotAllowedError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.HTTP.Errors.HTTPError"
						}
					],
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "NotAcceptableError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/ClientErrors/NotAcceptableError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "NotAcceptableError",
					"description": "Error class to indicate that the server cannot respond with the data type specified by the accept header of the request.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.NotAcceptableError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.HTTP.Errors.HTTPError"
						}
					],
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "NotFoundError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/ClientErrors/NotFoundError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "NotFoundError",
					"description": "Error class to indicate that the resource was not found.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.NotFoundError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.HTTP.Errors.HTTPError"
						}
					],
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "PreconditionFailedError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/ClientErrors/PreconditionFailedError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "PreconditionFailedError",
					"description": "Error class to indicate that the precondition header was resolved to false.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.PreconditionFailedError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.HTTP.Errors.HTTPError"
						}
					],
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "PreconditionRequiredError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/ClientErrors/PreconditionRequiredError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "PreconditionRequiredError",
					"description": "Error class to indicate that the request is missing a precondition header.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.PreconditionRequiredError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.HTTP.Errors.HTTPError"
						}
					],
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "RequestEntityTooLargeError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/ClientErrors/RequestEntityTooLargeError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "RequestEntityTooLargeError",
					"description": "Error class to indicate that the request entity is larger than the server is able to process.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.RequestEntityTooLargeError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.HTTP.Errors.HTTPError"
						}
					],
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "RequestHeaderFieldsTooLargeError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/ClientErrors/RequestHeaderFieldsTooLargeError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "RequestHeaderFieldsTooLargeError",
					"description": "Error class to indicate that the server is not able to process the request because its header fields are too large.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.RequestHeaderFieldsTooLargeError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.HTTP.Errors.HTTPError"
						}
					],
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "RequestURITooLongError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/ClientErrors/RequestURITooLongError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "RequestURITooLongError",
					"description": "Error class to indicate that the server is not able to process the request because the URI is too long.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.RequestURITooLongError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.HTTP.Errors.HTTPError"
						}
					],
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "TooManyRequestsError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/ClientErrors/TooManyRequestsError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "TooManyRequestsError",
					"description": "Error class to indicate that the current user has sent too many request in a given amount of time.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.TooManyRequestsError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.HTTP.Errors.HTTPError"
						}
					],
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "UnauthorizedError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/ClientErrors/UnauthorizedError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "UnauthorizedError",
					"description": "Error class to indicate that authentication is required or has failed.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.UnauthorizedError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.HTTP.Errors.HTTPError"
						}
					],
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "UnsupportedMediaTypeError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/ClientErrors/UnsupportedMediaTypeError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "UnsupportedMediaTypeError",
					"description": "Error class to indicate that the request has a media-type not supported by the server.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.UnsupportedMediaTypeError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.HTTP.Errors.HTTPError"
						}
					],
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "HTTPError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/HTTPError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "HTTPError",
					"description": "Generic error class that defines any type of HTTP Error used in the SDK.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.HTTPError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.Errors.AbstractError.AbstractError"
						}
					],
					"constructors": {
						"signatures": [
							{
								"access": "static",
								"description": null,
								"arguments": [
									{
										"name": "message",
										"type": "string"
									},
									{
										"name": "response",
										"type": "CarbonLDP.HTTP.Response"
									}
								]
							}
						]
					},
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							},
							{
								"access": "instance",
								"name": "response",
								"type": "number",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "BadGatewayError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/ServerErrors/BadGatewayError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "BadGatewayError",
					"description": "Error class to indicate that the server was acting as a gateway or proxy and received an invalid response from the upstream server.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.BadGatewayError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.HTTP.Errors.HTTPError"
						}
					],
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "BadResponseError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/ServerErrors/BadResponseError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "BadResponseError",
					"description": "Error class to indicate that the response obtained isn't the expected or can't be interpreted.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.BadResponseError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.HTTP.Errors.HTTPError"
						}
					],
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "GatewayTimeoutError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/ServerErrors/GatewayTimeoutError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "GatewayTimeoutError",
					"description": "Error class to indicate that the server, while acting as a gateway or proxy, did not receive a timely response from the upstream server.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.GatewayTimeoutError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.HTTP.Errors.HTTPError"
						}
					],
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "HTTPVersionNotSupportedError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/ServerErrors/HTTPVersionNotSupportedError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "HTTPVersionNotSupportedError",
					"description": "Error class to indicate that the server doesn't support the HTTP protocol version used in the request.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.HTTPVersionNotSupportedError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.HTTP.Errors.HTTPError"
						}
					],
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "InternalServerErrorError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/ServerErrors/InternalServerErrorError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "InternalServerErrorError",
					"description": "Error class to indicate that the server encountered an unexpected condition. This generic error is given when no other specific error is suitable.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.InternalServerErrorError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.HTTP.Errors.HTTPError"
						}
					],
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "NotImplementedError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/ServerErrors/NotImplementedError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "NotImplementedError",
					"description": "Error class to indicate that the server doesn't have the ability to fulfill the request yet.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.NotImplementedError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.HTTP.Errors.HTTPError"
						}
					],
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "ServiceUnavailableError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/ServerErrors/ServiceUnavailableError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "ServiceUnavailableError",
					"description": "Error class to indicate that the server is currently unavailable (because it's overloaded or down for maintenance).",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.ServiceUnavailableError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.HTTP.Errors.HTTPError"
						}
					],
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "UnknownError",
			"description": null,
			"path": "carbonldp/HTTP/Errors/UnknownError",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "UnknownError",
					"description": "Error class that defines any error that could not be identified.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Errors.UnknownError",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.HTTP.Errors.HTTPError"
						}
					],
					"methods": {
						"instance": [
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": null,
								"optional": null
							}
						],
						"static": [
							{
								"access": "static",
								"name": "statusCode",
								"type": "number",
								"description": null,
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "HTTPMethod",
			"description": null,
			"path": "carbonldp/HTTP/HTTPMethod",
			"is-defined": true,
			"enums": [
				{
					"suiteType": "enum",
					"name": "HTTPMethod",
					"description": "Enum with the HTTP/1.1 methods.",
					"path": "CarbonLDP.HTTP.HTTPMethod",
					"is-defined": true,
					"enumerals": [
						{
							"name": "OPTIONS",
							"description": "Enum that identifies the OPTIONS HTTP/1.1 method, which allows the client to determine the options and/or requirements associated with a resource, or the capabilities of a server, without implying a resource action or initiating a resource retrieval."
						},
						{
							"name": "HEAD",
							"description": "Enum that identifies the HEAD HTTP/1.1 method, which returns only the headers of a GET HTTP request."
						},
						{
							"name": "GET",
							"description": "Enum that identifies the GET HTTP/1.1 method, which returns whatever information is identified by the request URI."
						},
						{
							"name": "POST",
							"description": "Enum that identifies the POST HTTP/1.1 method, which requests to the server to create a new entity."
						},
						{
							"name": "PUT",
							"description": "Enum that identifies the PUT HTTP/1.1 method, which allows you to replace an entirely entity, or to send a signal to a resource."
						},
						{
							"name": "PATCH",
							"description": "Enum that identifies the PATCH HTTP/1.1 method, which allows you to update specified fields of an entity."
						},
						{
							"name": "DELETE",
							"description": "Enum that identifies the DELETE HTTP/1.1 method, which allows you to request the deletion of a resource identified by the request URI."
						}
					]
				}
			]
		},
		{
			"suiteType": "module",
			"name": "Header",
			"description": null,
			"path": "carbonldp/HTTP/Header",
			"classes": [
				{
					"suiteType": "class",
					"name": "Header",
					"description": "Class to manage the values in an HTTP header.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Header",
					"is-defined": true,
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"signatures": [
							{
								"generics": null,
								"description": null,
								"arguments": [
									{
										"name": "values",
										"type": "string | string[]",
										"optional": true
									}
								],
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"should-accept empty params": true,
						"should-initialize empty values": true,
						"should-accept values string": true,
						"should-initialize values from string": true,
						"should-accept values array": true,
						"should-initialize values from array": true
					},
					"methods": {
						"instance": [
							{
								"access": "instance",
								"suiteType": "method",
								"name": "hasValue",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Returns true if the values array contains the provided value.",
										"arguments": [
											{
												"name": "value",
												"type": "string"
											}
										],
										"returns": {
											"type": "boolean"
										}
									}
								],
								"returns": {
									"type": "boolean"
								},
								"should-exists": true,
								"should-return true if has the value": true,
								"should-return false if has NOT the value": true
							},
							{
								"name": "toString",
								"signatures": [
									{
										"access": "instance",
										"name": "toString",
										"generics": null,
										"description": null,
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						],
						"static": [
							{
								"name": "parseHeaders",
								"signatures": [
									{
										"access": "static",
										"name": "parseHeaders",
										"generics": null,
										"description": "Returns a Map object which relates all header names with a `CarbonLDP.HTTP.Header` object containing their values.",
										"arguments": [
											{
												"name": "headersString",
												"type": "string"
											}
										],
										"returns": {
											"type": "Map <string, CarbonLDP.HTTP.Header>"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "Map <string, CarbonLDP.HTTP.Header>"
								}
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "values",
								"type": "string[]",
								"description": "Array that contains each value of the header.",
								"optional": null
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "JSONParser",
			"description": null,
			"path": "carbonldp/HTTP/JSONParser",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "JSONParser",
					"description": "Wrapper class for the native `JSON.parse()` function using the `Promise` pattern.",
					"generics": null,
					"interfaces": [
						"CarbonLDP.HTTP.Parser<object>"
					],
					"path": "CarbonLDP.HTTP.JSONParser",
					"is-defined": true,
					"methods": {
						"instance": [
							{
								"name": "parse",
								"signatures": [
									{
										"access": "instance",
										"name": "parse",
										"generics": null,
										"description": null,
										"arguments": [
											{
												"name": "body",
												"type": "string",
												"description": "A JSON string to parse."
											}
										],
										"returns": {
											"type": "Promise<object>"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "Promise<object>"
								}
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "Parser",
			"description": null,
			"path": "carbonldp/HTTP/Parser",
			"is-defined": true,
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "Parser",
					"description": "Interface that represents a what a parser must contains to be used when converting the response of a request.",
					"generics": [
						"T"
					],
					"path": "CarbonLDP.HTTP.Parser",
					"methods": [
						{
							"name": "parse",
							"signatures": [
								{
									"access": null,
									"name": "parse",
									"generics": null,
									"description": "Method that parse the provided string to an specified T element.",
									"arguments": [
										{
											"name": "body",
											"type": "string",
											"description": "The string to parse."
										}
									],
									"returns": {
										"type": "Promise<T>",
										"description": "Promise that contains the parsed T element if the process success."
									},
									"optional": false
								}
							],
							"returns": {
								"type": "Promise<T>",
								"description": "Promise that contains the parsed T element if the process success."
							}
						}
					]
				}
			]
		},
		{
			"suiteType": "module",
			"name": "Request",
			"description": null,
			"path": "carbonldp/HTTP/Request",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "RequestOptions",
					"description": "Customizable options that can change the behaviour of the request.",
					"generics": null,
					"path": "CarbonLDP.HTTP.RequestOptions",
					"properties": [
						{
							"access": null,
							"name": "headers",
							"type": "Map<string, CarbonLDP.HTTP.Header>",
							"description": "Map that contains the references to the headers to include in the request.",
							"optional": true
						},
						{
							"access": null,
							"name": "sendCredentialsOnCORS",
							"type": "boolean",
							"description": "Flag that enables Cross-Origin Resource Sharing (CORS).",
							"optional": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "RetrievalPreferences",
					"description": "Object used at `CarbonLDP.HTTP.RequestUtils#setRetrievalPreferences()` method, which specifies the behaviour of the of the requested document as a ldp:container.",
					"generics": null,
					"path": "CarbonLDP.HTTP.RetrievalPreferences",
					"properties": [
						{
							"access": null,
							"name": "include",
							"type": "string[]",
							"description": "Prefer URIs that indicates some specific information should be returned in the request's response.",
							"optional": true
						},
						{
							"access": null,
							"name": "omit",
							"type": "string[]",
							"description": "Prefer URIs that indicates some specific information should NOT be included in the request's response.",
							"optional": true
						}
					]
				}
			],
			"classes": [
				{
					"suiteType": "class",
					"name": "RequestService",
					"description": "Class with functions to easily manage HTTP requests.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.RequestService",
					"is-defined": true,
					"methods": {
						"static": [
							{
								"access": "static",
								"suiteType": "method",
								"name": "delete",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Simple delete request.",
										"arguments": [
											{
												"name": "url",
												"type": "string"
											},
											{
												"name": "body",
												"type": "string"
											},
											{
												"name": "options",
												"type": "object",
												"optional": true,
												"defaultValue": "{ sendCredentialsOnCORS: true }"
											}
										],
										"returns": {
											"type": "Promise<CarbonLDP.HTTP.Response>"
										}
									},
									{
										"generics": null,
										"description": "Delete request with specified response parser.",
										"arguments": [
											{
												"name": "url",
												"type": "string"
											},
											{
												"name": "options",
												"type": "object",
												"optional": true,
												"defaultValue": "{ sendCredentialsOnCORS: true }"
											},
											{
												"name": "parser",
												"type": "CarbonLDP.HTTP.Parser<T>",
												"optional": true
											}
										],
										"returns": {
											"type": "Promise<CarbonLDP.HTTP.Response>"
										}
									},
									{
										"generics": null,
										"description": "Simple delete request.",
										"arguments": [
											{
												"name": "url",
												"type": "string"
											},
											{
												"name": "options",
												"type": "object",
												"optional": true,
												"defaultValue": "{ sendCredentialsOnCORS: true }"
											}
										],
										"returns": {
											"type": "Promise<CarbonLDP.HTTP.Response>"
										}
									},
									{
										"generics": null,
										"description": "Delete request with specified response parser.",
										"arguments": [
											{
												"name": "url",
												"type": "string"
											},
											{
												"name": "options",
												"type": "object",
												"optional": true,
												"defaultValue": "{ sendCredentialsOnCORS: true }"
											},
											{
												"name": "parser",
												"type": "CarbonLDP.HTTP.Parser<T>",
												"optional": true
											}
										],
										"returns": {
											"type": "Promise<CarbonLDP.HTTP.Response>"
										}
									}
								],
								"returns": {
									"type": "Promise<CarbonLDP.HTTP.Response>"
								}
							},
							{
								"access": "static",
								"suiteType": "method",
								"name": "get",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Simple get request.",
										"arguments": [
											{
												"name": "url",
												"type": "string"
											},
											{
												"name": "options",
												"type": "object",
												"optional": true,
												"defaultValue": "{ sendCredentialsOnCORS: true }"
											}
										],
										"returns": {
											"type": "Promise<CarbonLDP.HTTP.Response>"
										}
									},
									{
										"generics": null,
										"description": "Get request with specified response parser.",
										"arguments": [
											{
												"name": "url",
												"type": "string"
											},
											{
												"name": "options",
												"type": "object",
												"optional": true,
												"defaultValue": "{ sendCredentialsOnCORS: true }"
											},
											{
												"name": "parser",
												"type": "CarbonLDP.HTTP.Parser<T>",
												"optional": true
											}
										],
										"returns": {
											"type": "Promise<[Object, CarbonLDP.HTTP.Response]>"
										}
									}
								],
								"returns": {
									"type": "Promise<CarbonLDP.HTTP.Response>"
								}
							},
							{
								"name": "head",
								"signatures": [
									{
										"access": "static",
										"name": "head",
										"generics": null,
										"description": null,
										"arguments": [
											{
												"name": "url",
												"type": "string"
											},
											{
												"name": "options",
												"type": "object",
												"optional": true,
												"defaultValue": "{ sendCredentialsOnCORS: true }"
											}
										],
										"returns": {
											"type": "Promise<CarbonLDP.HTTP.Response>"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "Promise<CarbonLDP.HTTP.Response>"
								}
							},
							{
								"name": "options",
								"signatures": [
									{
										"access": "static",
										"name": "options",
										"generics": null,
										"description": null,
										"arguments": [
											{
												"name": "url",
												"type": "string"
											},
											{
												"name": "options",
												"type": "object",
												"optional": true,
												"defaultValue": "{ sendCredentialsOnCORS: true }"
											}
										],
										"returns": {
											"type": "Promise<CarbonLDP.HTTP.Response>"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "Promise<CarbonLDP.HTTP.Response>"
								}
							},
							{
								"access": "static",
								"suiteType": "method",
								"name": "patch",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Simple patch request.",
										"arguments": [
											{
												"name": "url",
												"type": "string"
											},
											{
												"name": "body",
												"type": "string"
											},
											{
												"name": "options",
												"type": "object",
												"optional": true,
												"defaultValue": "{ sendCredentialsOnCORS: true }"
											}
										],
										"returns": {
											"type": "Promise<CarbonLDP.HTTP.Response>"
										}
									},
									{
										"generics": null,
										"description": "Patch request with specified response parser.",
										"arguments": [
											{
												"name": "url",
												"type": "string"
											},
											{
												"name": "options",
												"type": "object",
												"optional": true,
												"defaultValue": "{ sendCredentialsOnCORS: true }"
											},
											{
												"name": "parser",
												"type": "CarbonLDP.HTTP.Parser<T>",
												"optional": true
											}
										],
										"returns": {
											"type": "Promise<CarbonLDP.HTTP.Response>"
										}
									}
								],
								"returns": {
									"type": "Promise<CarbonLDP.HTTP.Response>"
								}
							},
							{
								"access": "static",
								"suiteType": "method",
								"name": "post",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Simple post request.",
										"arguments": [
											{
												"name": "url",
												"type": "string"
											},
											{
												"name": "body",
												"type": "string"
											},
											{
												"name": "options",
												"type": "object",
												"optional": true,
												"defaultValue": "{ sendCredentialsOnCORS: true }"
											}
										],
										"returns": {
											"type": "Promise<CarbonLDP.HTTP.Response>"
										}
									},
									{
										"generics": null,
										"description": "Post request with specified response parser.",
										"arguments": [
											{
												"name": "url",
												"type": "string"
											},
											{
												"name": "options",
												"type": "object",
												"optional": true,
												"defaultValue": "{ sendCredentialsOnCORS: true }"
											},
											{
												"name": "parser",
												"type": "CarbonLDP.HTTP.Parser<T>",
												"optional": true
											}
										],
										"returns": {
											"type": "Promise<CarbonLDP.HTTP.Response>"
										}
									}
								],
								"returns": {
									"type": "Promise<CarbonLDP.HTTP.Response>"
								}
							},
							{
								"access": "static",
								"suiteType": "method",
								"name": "put",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Simple put request.",
										"arguments": [
											{
												"name": "url",
												"type": "string"
											},
											{
												"name": "body",
												"type": "string"
											},
											{
												"name": "options",
												"type": "object",
												"optional": true,
												"defaultValue": "{ sendCredentialsOnCORS: true }"
											}
										],
										"returns": {
											"type": "Promise<CarbonLDP.HTTP.Response>"
										}
									},
									{
										"generics": null,
										"description": "Put request with specified response parser.",
										"arguments": [
											{
												"name": "url",
												"type": "string"
											},
											{
												"name": "options",
												"type": "object",
												"optional": true,
												"defaultValue": "{ sendCredentialsOnCORS: true }"
											},
											{
												"name": "parser",
												"type": "CarbonLDP.HTTP.Parser<T>",
												"optional": true
											}
										],
										"returns": {
											"type": "Promise<CarbonLDP.HTTP.Response>"
										}
									}
								],
								"returns": {
									"type": "Promise<CarbonLDP.HTTP.Response>"
								}
							},
							{
								"access": "static",
								"suiteType": "method",
								"name": "send",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Generic send method, to be used by the others methods in the class.",
										"arguments": [
											{
												"name": "url",
												"type": "string"
											},
											{
												"name": "body",
												"type": "string"
											},
											{
												"name": "options",
												"type": "object"
											}
										],
										"returns": {
											"type": "Promise<CarbonLDP.HTTP.Response>"
										}
									}
								],
								"returns": {
									"type": "Promise<CarbonLDP.HTTP.Response>"
								},
								"should-exists": true
							}
						]
					}
				},
				{
					"suiteType": "class",
					"name": "RequestUtils",
					"description": "Class with useful functions to manage the options object of a request.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.RequestUtils",
					"is-defined": true,
					"methods": {
						"static": [
							{
								"name": "getHeader",
								"signatures": [
									{
										"access": "static",
										"name": "getHeader",
										"generics": null,
										"description": "Returns the header object of a header-name inside an options object request. Returns `undefined` if the header doesn't exists. If `initialize` flag is provided with true, an empty header will be created even if it already exits.",
										"arguments": [
											{
												"name": "headerName",
												"type": "string"
											},
											{
												"name": "requestOptions",
												"type": "CarbonLDP.HTTP.RequestOptions"
											},
											{
												"name": "initialize",
												"type": "boolean",
												"optional": true,
												"defaultValue": "false"
											}
										],
										"returns": {
											"type": "CarbonLDP.HTTP.Header"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "CarbonLDP.HTTP.Header"
								}
							},
							{
								"name": "isOptions",
								"signatures": [
									{
										"access": "static",
										"name": "isOptions",
										"generics": null,
										"description": "Returns `true` if the object provided has at least a property of a `CarbonLDP.HTTP.Request.Option` object.",
										"arguments": [
											{
												"name": "object",
												"type": "Object",
												"description": "The object to evaluate."
											}
										],
										"returns": {
											"type": "boolean"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "boolean"
								}
							},
							{
								"name": "setAcceptHeader",
								"signatures": [
									{
										"access": "static",
										"name": "setAcceptHeader",
										"generics": null,
										"description": "Set an Accept header in an options object request.",
										"arguments": [
											{
												"name": "accept",
												"type": "string"
											},
											{
												"name": "requestOptions",
												"type": "CarbonLDP.HTTP.RequestOptions"
											}
										],
										"returns": {
											"type": "CarbonLDP.HTTP.RequestOptions"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "CarbonLDP.HTTP.RequestOptions"
								}
							},
							{
								"name": "setContentTypeHeader",
								"signatures": [
									{
										"access": "static",
										"name": "setContentTypeHeader",
										"generics": null,
										"description": "Set a Content-Type header in an options object request.",
										"arguments": [
											{
												"name": "contentType",
												"type": "string"
											},
											{
												"name": "requestOptions",
												"type": "CarbonLDP.HTTP.RequestOptions"
											}
										],
										"returns": {
											"type": "CarbonLDP.HTTP.RequestOptions"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "CarbonLDP.HTTP.RequestOptions"
								}
							},
							{
								"name": "setIfMatchHeader",
								"signatures": [
									{
										"access": "static",
										"name": "setIfMatchHeader",
										"generics": null,
										"description": "Set an If-Match header in an options object request.",
										"arguments": [
											{
												"name": "eTag",
												"type": "string"
											},
											{
												"name": "requestOptions",
												"type": "CarbonLDP.HTTP.RequestOptions"
											}
										],
										"returns": {
											"type": "CarbonLDP.HTTP.RequestOptions"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "CarbonLDP.HTTP.RequestOptions"
								}
							},
							{
								"name": "setIfNoneMatchHeader",
								"signatures": [
									{
										"access": "static",
										"name": "setIfNoneMatchHeader",
										"generics": null,
										"description": "Set an If-None-Match header in an options object request.",
										"arguments": [
											{
												"name": "eTag",
												"type": "string"
											},
											{
												"name": "requestOptions",
												"type": "CarbonLDP.HTTP.RequestOptions"
											}
										],
										"returns": {
											"type": "Object"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "Object"
								}
							},
							{
								"name": "setPreferredInteractionModel",
								"signatures": [
									{
										"access": "static",
										"name": "setPreferredInteractionModel",
										"generics": null,
										"description": "Set a Prefer header with `rel=interaction-model` in an options object request.",
										"arguments": [
											{
												"name": "interactionModelURI",
												"type": "string"
											},
											{
												"name": "requestOptions",
												"type": "CarbonLDP.HTTP.RequestOptions"
											}
										],
										"returns": {
											"type": "CarbonLDP.HTTP.RequestOptions"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "CarbonLDP.HTTP.RequestOptions"
								}
							},
							{
								"name": "setPreferredRetrieval",
								"signatures": [
									{
										"access": "static",
										"name": "setPreferredRetrieval",
										"generics": null,
										"description": "Set a Prefer header which indicates to the platform to type of retrieval to make.",
										"arguments": [
											{
												"name": "retrievalType",
												"type": "\"representation\" | \"minimal\"",
												"description": "If \"representation\" is chosen the platform must retrieve the entire resource; otherwise when \"minimal\" is sent the minimal data will be returned generally an empty one."
											},
											{
												"name": "requestOptions",
												"type": "CarbonLDP.HTTP.RequestOptions"
											}
										],
										"returns": {
											"type": "CarbonLDP.HTTP.RequestOptions"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "CarbonLDP.HTTP.RequestOptions"
								}
							},
							{
								"name": "setRetrievalPreferences",
								"signatures": [
									{
										"access": "static",
										"name": "setRetrievalPreferences",
										"generics": null,
										"description": "Set a Prefer header with `return=representation` in an options object request.",
										"arguments": [
											{
												"name": "preference",
												"type": "CarbonLDP.HTTP.RetrievalPreferences"
											},
											{
												"name": "requestOptions",
												"type": "CarbonLDP.HTTP.RequestOptions"
											}
										],
										"returns": {
											"type": "CarbonLDP.HTTP.RequestOptions"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "CarbonLDP.HTTP.RequestOptions"
								}
							},
							{
								"name": "setSlug",
								"signatures": [
									{
										"access": "static",
										"name": "setSlug",
										"generics": null,
										"description": "Set a Slug header in an options object request.",
										"arguments": [
											{
												"name": "slug",
												"type": "string"
											},
											{
												"name": "requestOptions",
												"type": "CarbonLDP.HTTP.RequestOptions"
											}
										],
										"returns": {
											"type": "CarbonLDP.HTTP.RequestOptions"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "CarbonLDP.HTTP.RequestOptions"
								}
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "Response",
			"description": null,
			"path": "carbonldp/HTTP/Response",
			"classes": [
				{
					"suiteType": "class",
					"name": "Response",
					"description": "Class that represents an HTTP Response.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.HTTP.Response",
					"is-defined": true,
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"signatures": [
							{
								"generics": null,
								"description": "Signature that only works in a web browser.",
								"arguments": [
									{
										"name": "request",
										"type": "XMLHttpRequest"
									}
								],
								"returns": {
									"type": "void"
								}
							},
							{
								"generics": null,
								"description": "Signature that only works in Node.js.",
								"arguments": [
									{
										"name": "request",
										"type": "ClientRequest"
									},
									{
										"name": "data",
										"type": "string"
									},
									{
										"name": "response",
										"type": "IncomingMessage"
									}
								],
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						}
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "data",
								"type": "string",
								"description": "The raw body returned by the request.",
								"optional": null
							},
							{
								"access": "instance",
								"name": "headers",
								"type": "Map<string, CarbonLDP.HTTP.Header>",
								"description": "A map object containing the headers returned by the request.",
								"optional": null
							},
							{
								"access": "instance",
								"name": "request",
								"type": "XMLHttpRequest | ClientRequest",
								"description": "The XMLHttpRequest object that was provided in the constructor when working in a Browser, or the ClientRequest object when working with Node.js.",
								"optional": null
							},
							{
								"access": "instance",
								"name": "status",
								"type": "number",
								"description": "The status code returned by the request.",
								"optional": null
							}
						]
					},
					"methods": {
						"instance": [
							{
								"name": "getETag",
								"signatures": [
									{
										"access": "instance",
										"name": "getETag",
										"generics": null,
										"description": "Return the ETag header of a `CarbonLDP.HTTP.Response` object. Returns null if no ETag exists.",
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							},
							{
								"name": "getHeader",
								"signatures": [
									{
										"access": "instance",
										"name": "getHeader",
										"generics": null,
										"description": "Return the Header object referred by the name specified.",
										"arguments": [
											{
												"name": "name",
												"type": "string"
											}
										],
										"returns": {
											"type": "CarbonLDP.HTTP.Header"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "CarbonLDP.HTTP.Header"
								}
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "StatusCode",
			"description": null,
			"path": "carbonldp/HTTP/StatusCode",
			"is-defined": true,
			"enums": [
				{
					"suiteType": "enum",
					"name": "StatusCode",
					"description": "Enum with the HTTP/1.1 status codes.",
					"path": "CarbonLDP.HTTP.StatusCode",
					"is-defined": true,
					"enumerals": [
						{
							"name": "CONTINUE",
							"description": "Enum that identifies the HTTP/1.1 100 status code."
						},
						{
							"name": "SWITCHING_PROTOCOLS",
							"description": "Enum that identifies the HTTP/1.1 101 status code."
						},
						{
							"name": "OK",
							"description": "Enum that identifies the HTTP/1.1 200 status code."
						},
						{
							"name": "CREATED",
							"description": "Enum that identifies the HTTP/1.1 201 status code."
						},
						{
							"name": "ACCEPTED",
							"description": "Enum that identifies the HTTP/1.1 202 status code."
						},
						{
							"name": "NON_AUTHORITATIVE_INFORMATION",
							"description": "Enum that identifies the HTTP/1.1 203 status code."
						},
						{
							"name": "NO_CONTENT",
							"description": "Enum that identifies the HTTP/1.1 204 status code."
						},
						{
							"name": "RESET_CONTENT",
							"description": "Enum that identifies the HTTP/1.1 205 status code."
						},
						{
							"name": "PARTIAL_CONTENT",
							"description": "Enum that identifies the HTTP/1.1 206 status code."
						},
						{
							"name": "MULTIPLE_CHOICES",
							"description": "Enum that identifies the HTTP/1.1 300 status code."
						},
						{
							"name": "MOVED_PERMANENTLY",
							"description": "Enum that identifies the HTTP/1.1 301 status code."
						},
						{
							"name": "FOUND",
							"description": "Enum that identifies the HTTP/1.1 302 status code."
						},
						{
							"name": "SEE_OTHER",
							"description": "Enum that identifies the HTTP/1.1 303 status code."
						},
						{
							"name": "NOT_MODIFIED",
							"description": "Enum that identifies the HTTP/1.1 304 status code."
						},
						{
							"name": "USE_PROXY",
							"description": "Enum that identifies the HTTP/1.1 305 status code."
						},
						{
							"name": "TEMPORARY_REDIRECT",
							"description": "Enum that identifies the HTTP/1.1 307 status code."
						},
						{
							"name": "BAD_REQUEST",
							"description": "Enum that identifies the HTTP/1.1 400 status code."
						},
						{
							"name": "UNAUTHORIZED",
							"description": "Enum that identifies the HTTP/1.1 401 status code."
						},
						{
							"name": "PAYMENT_REQUIRED",
							"description": "Enum that identifies the HTTP/1.1 402 status code."
						},
						{
							"name": "FORBIDDEN",
							"description": "Enum that identifies the HTTP/1.1 403 status code."
						},
						{
							"name": "NOT_FOUND",
							"description": "Enum that identifies the HTTP/1.1 404 status code."
						},
						{
							"name": "METHOD_NOT_ALLOWED",
							"description": "Enum that identifies the HTTP/1.1 405 status code."
						},
						{
							"name": "NOT_ACCEPTABLE",
							"description": "Enum that identifies the HTTP/1.1 406 status code."
						},
						{
							"name": "PROXY_AUTHENTICATION_REQUIRED",
							"description": "Enum that identifies the HTTP/1.1 407 status code."
						},
						{
							"name": "REQUEST_TIME_OUT",
							"description": "Enum that identifies the HTTP/1.1 408 status code."
						},
						{
							"name": "CONFLICT",
							"description": "Enum that identifies the HTTP/1.1 409 status code."
						},
						{
							"name": "GONE",
							"description": "Enum that identifies the HTTP/1.1 410 status code."
						},
						{
							"name": "LENGTH_REQUIRED",
							"description": "Enum that identifies the HTTP/1.1 411 status code."
						},
						{
							"name": "PRECONDITION_FAILED",
							"description": "Enum that identifies the HTTP/1.1 412 status code."
						},
						{
							"name": "REQUEST_ENTITY_TOO_LARGE",
							"description": "Enum that identifies the HTTP/1.1 413 status code."
						},
						{
							"name": "REQUEST_URI_TOO_LARGE",
							"description": "Enum that identifies the HTTP/1.1 414 status code."
						},
						{
							"name": "UNSUPPORTED_MEDIA_TYPE",
							"description": "Enum that identifies the HTTP/1.1 415 status code."
						},
						{
							"name": "REQUESTED_RANGE_NOT_SATISFIABLE",
							"description": "Enum that identifies the HTTP/1.1 416 status code."
						},
						{
							"name": "EXPECTATION_FAILED",
							"description": "Enum that identifies the HTTP/1.1 417 status code."
						},
						{
							"name": "INTERNAL_SERVER_ERROR",
							"description": "Enum that identifies the HTTP/1.1 500 status code."
						},
						{
							"name": "NOT_IMPLEMENTED",
							"description": "Enum that identifies the HTTP/1.1 501 status code."
						},
						{
							"name": "BAD_GATEWAY",
							"description": "Enum that identifies the HTTP/1.1 502 status code."
						},
						{
							"name": "SERVICE_UNAVAILABLE",
							"description": "Enum that identifies the HTTP/1.1 503 status code."
						},
						{
							"name": "GATEWAY_TIME_OUT",
							"description": "Enum that identifies the HTTP/1.1 504 status code."
						},
						{
							"name": "HTTP_VERSION_NOT_SUPPORTED",
							"description": "Enum that identifies the HTTP/1.1 505 status code."
						}
					]
				}
			]
		},
		{
			"suiteType": "module",
			"name": "StringParser",
			"description": null,
			"path": "carbonldp/HTTP/StringParser",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "StringParser",
					"description": "Parses the body of a `CarbonLDP.HTTP.Response` and returns a string.",
					"generics": null,
					"interfaces": [
						"CarbonLDP.HTTP.Parser<string>"
					],
					"path": "CarbonLDP.HTTP.StringParser",
					"methods": {
						"instance": [
							{
								"name": "parse",
								"signatures": [
									{
										"access": "instance",
										"name": "parse",
										"generics": null,
										"description": "Gets a string and returns a Promise with the same string.",
										"arguments": [
											{
												"name": "body",
												"type": "string"
											}
										],
										"returns": {
											"type": "Promise<string>"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "Promise<string>"
								}
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "JSONLD",
			"description": null,
			"path": "carbonldp/JSONLD",
			"is-defined": true,
			"reexports": [
				{
					"access": "static",
					"name": "JSONLDConverter",
					"originalLocation": "CarbonLDP.JSONLD.JSONLDConverter"
				},
				{
					"access": "static",
					"name": "JSONLDParser",
					"originalLocation": "CarbonLDP.JSONLD.JSONLDParser"
				},
				{
					"access": "static",
					"name": "JSONLDProcessor",
					"originalLocation": "CarbonLDP.JSONLD.JSONLDProcessor"
				}
			]
		},
		{
			"suiteType": "module",
			"name": "JSONLDConverter",
			"description": null,
			"path": "carbonldp/JSONLD/JSONLDConverter",
			"classes": [
				{
					"suiteType": "class",
					"name": "JSONLDConverter",
					"description": "Class that have methods for convert expanded JSON-LD objects to compacted Carbon SDK Resources and vice versa.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.JSONLD.JSONLDConverter",
					"is-defined": true,
					"constructors": {
						"signatures": [
							{
								"access": "static",
								"description": null,
								"arguments": [
									{
										"name": "literalSerializers",
										"type": "Map<string, CarbonLDP.RDF.Literal.Serializer>",
										"optional": true,
										"description": "A Map object with the data type serializers that the converter will only be able to handle."
									}
								]
							}
						]
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "literalSerializers",
								"type": "Map<string, CarbonLDP.RDF.Literal.Serializer>",
								"description": "A Map object with data-type/serializer pairs for stringify the data of a SDK Resource when expanding it.",
								"optional": null
							}
						]
					},
					"methods": {
						"instance": [
							{
								"access": "instance",
								"suiteType": "method",
								"name": "compact",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Assign the data of the expanded JSON-LD object, to the target object in a friendly mode, ie. without the JSON-LD Syntax Tokens and parsed values, in accordance to the schema provided.",
										"arguments": [
											{
												"name": "expandedObject",
												"type": "Object",
												"description": "The JSON-LD object to compact."
											},
											{
												"name": "targetObject",
												"type": "Object",
												"description": "The target object where will be added the data of the expanded object."
											},
											{
												"name": "digestedSchema",
												"type": "CarbonLDP.DigestedObjectSchema",
												"description": "The schema that describes how compact the expanded object."
											},
											{
												"name": "pointerLibrary",
												"type": "CarbonLDP.PointerLibrary",
												"description": "An object from where one can obtain pointers to SDK Resources."
											}
										],
										"returns": {
											"type": "Object",
											"description": "The compacted target object."
										}
									}
								],
								"returns": {
									"type": "Object",
									"description": "The compacted target object."
								}
							},
							{
								"access": "instance",
								"suiteType": "method",
								"name": "expand",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Creates a expanded JSON-LD object from the compacted object in accordance to the schema provided.",
										"arguments": [
											{
												"name": "compactedObject",
												"type": "Object",
												"description": "The compacted object to generate its expanded JSON-LD object."
											},
											{
												"name": "digestedSchema",
												"type": "CarbonLDP.DigestedObjectSchema",
												"description": "The schema that describes how construct the expanded object."
											}
										],
										"returns": {
											"type": "Object",
											"description": "The expanded JSON-LD object generated."
										}
									}
								],
								"returns": {
									"type": "Object",
									"description": "The expanded JSON-LD object generated."
								}
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "JSONLDParser",
			"description": null,
			"path": "carbonldp/JSONLD/JSONLDParser",
			"classes": [
				{
					"suiteType": "class",
					"name": "JSONLDParser",
					"description": "Class to parse strings to valid JSONLD objects.",
					"generics": null,
					"interfaces": [
						"CarbonLDP.HTTP.Parser<object[]>"
					],
					"path": "CarbonLDP.JSONLD.JSONLDParser",
					"is-defined": true,
					"methods": {
						"instance": [
							{
								"name": "parse",
								"signatures": [
									{
										"access": "instance",
										"name": "parse",
										"generics": null,
										"description": "Parse the string provided using the `CarbonLDP.JSONLD.JSONLDProcessor#expand()` method.",
										"arguments": [
											{
												"name": "body",
												"type": "string",
												"description": "A JSON-LD string to parse."
											}
										],
										"returns": {
											"type": "Promise<object[]>",
											"description": "Promise that contains the parsed JSONLD object. If error occurs a `CarbonLDP.Errors.InvalidJSONLDSyntaxError` will be thrown."
										},
										"optional": null
									}
								],
								"returns": {
									"type": "Promise<object[]>",
									"description": "Promise that contains the parsed JSONLD object. If error occurs a `CarbonLDP.Errors.InvalidJSONLDSyntaxError` will be thrown."
								}
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "JSONLDProcessor",
			"description": null,
			"path": "carbonldp/JSONLD/JSONLDProcessor",
			"classes": [
				{
					"suiteType": "class",
					"name": "JSONLDProcessor",
					"description": "Class that contains methods that can process JSON-LD objects.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.JSONLD.JSONLDProcessor",
					"is-defined": true,
					"methods": {
						"static": [
							{
								"name": "expand",
								"signatures": [
									{
										"access": "static",
										"name": "expand",
										"generics": null,
										"description": "Static method that expand a compacted JSON-LD object.",
										"arguments": [
											{
												"name": "input",
												"type": "object",
												"description": "The compacted JSON-LD object to expand."
											}
										],
										"returns": {
											"type": "Promise<object[]>"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "Promise<object[]>"
								}
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "QueryResultCompacter",
			"description": null,
			"path": "carbonldp/JSONLD/QueryResultCompacter",
			"classes": [
				{
					"suiteType": "class",
					"name": "QueryResultCompacter",
					"description": "Class for compacting a set of RDF resources in level of relations",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.JSONLD.QueryResultCompacter",
					"should-exists": true,
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"signatures": [
							{
								"generics": null,
								"description": null,
								"arguments": [
									{
										"name": "registry",
										"type": "CarbonLDP.Registry<CarbonLDP.Document, any>"
									},
									{
										"name": "queryContainer",
										"type": "CarbonLDP.QueryDocuments.QueryContainer"
									}
								],
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"should-be instantiable": true
					},
					"methods": {
						"instance": [
							{
								"access": "instance",
								"suiteType": "method",
								"name": "compactDocuments",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": [
											"T extends object"
										],
										"description": null,
										"arguments": [
											{
												"name": "rdfDocuments",
												"type": "CarbonLDP.RDF.RDFDocument[]"
											},
											{
												"name": "targetDocuments",
												"type": "string[]"
											}
										],
										"returns": {
											"type": "(T & CarbonLDP.Document)[]"
										}
									}
								],
								"returns": {
									"type": "(T & CarbonLDP.Document)[]"
								},
								"should-exists": true,
								"should-add metadata of one level property": true,
								"should-merge metadata level schema from related to each other": true,
								"should-compact a resource with a fragment": true,
								"should-compact every level from related to each other": true,
								"should-compact same related document": true
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "LDP",
			"description": null,
			"path": "carbonldp/LDP",
			"is-defined": true,
			"reexports": [
				{
					"access": "static",
					"name": "DirectContainerFactory",
					"originalLocation": "CarbonLDP.LDP.DirectContainerFactory"
				},
				{
					"access": "static",
					"name": "DocumentMetadata",
					"originalLocation": "CarbonLDP.LDP.DocumentMetadata"
				},
				{
					"access": "static",
					"name": "DocumentMetadataFactory",
					"originalLocation": "CarbonLDP.LDP.DocumentMetadataFactory"
				},
				{
					"access": "static",
					"name": "Error",
					"originalLocation": "CarbonLDP.LDP.Error"
				},
				{
					"access": "static",
					"name": "ErrorFactory",
					"originalLocation": "CarbonLDP.LDP.ErrorFactory"
				},
				{
					"access": "static",
					"name": "ErrorResponse",
					"originalLocation": "CarbonLDP.LDP.ErrorResponse"
				},
				{
					"access": "static",
					"name": "ErrorResponseFactory",
					"originalLocation": "CarbonLDP.LDP.ErrorResponseFactory"
				},
				{
					"access": "static",
					"name": "Map",
					"originalLocation": "CarbonLDP.LDP.Map"
				},
				{
					"access": "static",
					"name": "MapEntry",
					"originalLocation": "CarbonLDP.LDP.MapEntry"
				},
				{
					"access": "static",
					"name": "MapEntryFactory",
					"originalLocation": "CarbonLDP.LDP.MapEntryFactory"
				},
				{
					"access": "static",
					"name": "MapFactory",
					"originalLocation": "CarbonLDP.LDP.MapFactory"
				},
				{
					"access": "static",
					"name": "ResponseMetadata",
					"originalLocation": "CarbonLDP.LDP.ResponseMetadata"
				},
				{
					"access": "static",
					"name": "ResponseMetadataFactory",
					"originalLocation": "CarbonLDP.LDP.ResponseMetadataFactory"
				},
				{
					"access": "static",
					"name": "TransientDirectContainer",
					"originalLocation": "CarbonLDP.LDP.TransientDirectContainer"
				},
				{
					"access": "static",
					"name": "ValidationError",
					"originalLocation": "CarbonLDP.LDP.ValidationError"
				},
				{
					"access": "static",
					"name": "ValidationErrorFactory",
					"originalLocation": "CarbonLDP.LDP.ValidationErrorFactory"
				},
				{
					"access": "static",
					"name": "VolatileResource",
					"originalLocation": "CarbonLDP.LDP.VolatileResource"
				},
				{
					"access": "static",
					"name": "VolatileResourceFactory",
					"originalLocation": "CarbonLDP.LDP.VolatileResourceFactory"
				}
			]
		},
		{
			"suiteType": "module",
			"name": "DirectContainer",
			"description": null,
			"path": "carbonldp/LDP/DirectContainer",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "BaseDirectContainer",
					"description": "Interface with the base properties for a direct container.",
					"generics": null,
					"path": "CarbonLDP.LDP.BaseDirectContainer",
					"super-classes": [
						{
							"name": "CarbonLDP.BaseDocument"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "hasMembershipRelation",
							"type": "CarbonLDP.Pointer",
							"description": "Pointer that reference to the property the direct container manages.",
							"optional": false
						},
						{
							"access": null,
							"name": "membershipResource",
							"type": "CarbonLDP.Pointer",
							"description": "Pointer that references the document that the direct container belongs to.",
							"optional": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "DirectContainerFactory",
					"description": "Interface with the factory, utils for `CarbonLDP.LDP.DirectContainer` objects.",
					"generics": null,
					"path": "CarbonLDP.LDP.DirectContainerFactory",
					"properties": [
						{
							"access": null,
							"name": "TYPE",
							"type": "CarbonLDP.Vocabularies.C.DirectContainer",
							"description": null,
							"optional": false,
							"should-be ldp:DirectContainer": true
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "create",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Creates a `CarbonLDP.LDP.TransientDirectContainer` object with the parameters specified.",
									"arguments": [
										{
											"name": "data",
											"type": "T & carbonLDP.LDP.BaseDirectContainer",
											"description": "Data for creating a direct container."
										}
									],
									"returns": {
										"type": "T & CarbonLDP.LDP.TransientDirectContainer"
									}
								}
							],
							"returns": {
								"type": "T & CarbonLDP.LDP.TransientDirectContainer"
							},
							"should-exists": true,
							"should-be TransientDirectContainer.create": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "createFrom",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Creates a `CarbonLDP.LDP.TransientDirectContainer` object with the object provided and the parameters specified.",
									"arguments": [
										{
											"name": "object",
											"type": "T & CarbonLDP.LDP.BaseDirectContainer",
											"description": "Object to be converted into a direct container."
										}
									],
									"returns": {
										"type": "T & CarbonLDP.LDP.TransientDirectContainer"
									}
								}
							],
							"returns": {
								"type": "T & CarbonLDP.LDP.TransientDirectContainer"
							},
							"should-exists": true,
							"should-be TransientDirectContainer.createFrom": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "is",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns true if the object provided is considered a `CarbonLDP.LDP.DirectContainer` object.",
									"arguments": [
										{
											"name": "value",
											"type": "any"
										}
									],
									"returns": {
										"type": "value is CarbonLDP.LDP.DirectContainer"
									}
								}
							],
							"returns": {
								"type": "value is CarbonLDP.LDP.DirectContainer"
							},
							"should-exists": true,
							"should-be a TransientDirectContainer": true,
							"should-be a Document": true,
							"should-return true when all assertions true": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "TransientDirectContainer",
					"description": "Interface that represents an `ldp:DirectContainer`.",
					"generics": null,
					"path": "CarbonLDP.LDP.TransientDirectContainer",
					"super-classes": [
						{
							"name": "CarbonLDP.TransientDocument"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "hasMembershipRelation",
							"type": "CarbonLDP.Pointer",
							"description": "Pointer that reference to the property the direct container manages.",
							"optional": false
						},
						{
							"access": null,
							"name": "membershipResource",
							"type": "CarbonLDP.Pointer",
							"description": "Pointer that references the document that the direct container belongs to.",
							"optional": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "TransientDirectContainerFactory",
					"description": "Interface with the factory, decorate and utils methods of a `CarbonLDP.LDP.TransientDirectContainer`",
					"generics": null,
					"path": "CarbonLDP.LDP.TransientDirectContainerFactory",
					"properties": [
						{
							"access": null,
							"name": "TYPE",
							"type": "CarbonLDP.Vocabularies.C.DirectContainer",
							"description": null,
							"optional": false
						}
					],
					"methods": [
						{
							"name": "create",
							"signatures": [
								{
									"access": null,
									"name": "create",
									"generics": [
										"T extends object"
									],
									"description": "Creates a `CarbonLDP.LDP.TransientDirectContainer` object with the parameters specified.",
									"arguments": [
										{
											"name": "data",
											"type": "T & carbonLDP.LDP.BaseDirectContainer",
											"description": "Data for creating a direct container."
										}
									],
									"returns": {
										"type": "T & CarbonLDP.LDP.TransientDirectContainer"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "T & CarbonLDP.LDP.TransientDirectContainer"
							}
						},
						{
							"name": "createFrom",
							"signatures": [
								{
									"access": null,
									"name": "createFrom",
									"generics": [
										"T extends object"
									],
									"description": "Creates a `CarbonLDP.LDP.TransientDirectContainer` object with the object provided and the parameters specified.",
									"arguments": [
										{
											"name": "object",
											"type": "T & CarbonLDP.LDP.BaseDirectContainer",
											"description": "Object to be converted into a direct container."
										}
									],
									"returns": {
										"type": "T & CarbonLDP.LDP.TransientDirectContainer"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "T & CarbonLDP.LDP.TransientDirectContainer"
							}
						},
						{
							"name": "is",
							"signatures": [
								{
									"access": null,
									"name": "is",
									"generics": null,
									"description": "Returns true if the object provided is considered a `CarbonLDP.LDP.TransientDirectContainer` object.",
									"arguments": [
										{
											"name": "value",
											"type": "any"
										}
									],
									"returns": {
										"type": "value is CarbonLDP.LDP.TransientDirectContainer"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "value is CarbonLDP.LDP.TransientDirectContainer"
							}
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "DirectContainer",
						"type": "CarbonLDP.LDP.DirectContainerFactory",
						"description": null,
						"optional": null,
						"should-exists": true
					},
					{
						"access": "static",
						"name": "TransientDirectContainer",
						"type": "CarbonLDP.LDP.TransientDirectContainerFactory",
						"description": "Constant that implements the `CarbonLDP.LDP.TransientDirectContainerFactory` interface.",
						"optional": null
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "DocumentMetadata",
			"description": null,
			"path": "carbonldp/LDP/DocumentMetadata",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "DocumentMetadata",
					"description": "Interface that represents a free node resource that contains dynamic information about an specific resource.",
					"generics": null,
					"path": "CarbonLDP.LDP.DocumentMetadata",
					"super-classes": [
						{
							"name": "CarbonLDP.LDP.VolatileResource"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "bNodesMap",
							"type": "CarbonLDP.LDP.Map<CarbonLDP.Pointer, CarbonLDP.Pointer>",
							"description": "A `c:Map` object that contains the changes of persisted BNode IDs.",
							"optional": false
						},
						{
							"access": null,
							"name": "relatedDocument",
							"type": "CarbonLDP.Pointer",
							"description": "Reference to the resource the metadata information refers to.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "DocumentMetadataFactory",
					"description": "Interface with the factory, decorate and utils methods for `CarbonLDP.LDP.DocumentMetadata` objects.",
					"generics": null,
					"path": "CarbonLDP.LDP.DocumentMetadataFactory",
					"properties": [
						{
							"access": null,
							"name": "SCHEMA",
							"type": "CarbonLDP.ObjectSchema",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "TYPE",
							"type": "string",
							"description": null,
							"optional": false
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "DocumentMetadata",
						"type": "CarbonLDP.LDP.DocumentMetadataFactory",
						"description": null,
						"optional": null,
						"DocumentMetadata.SCHEMA": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "Error",
			"description": null,
			"path": "carbonldp/LDP/Error",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "Error",
					"description": "Interface that represents an error occurred in the server.",
					"generics": null,
					"path": "CarbonLDP.LDP.Error",
					"super-classes": [
						{
							"name": "CarbonLDP.TransientResource"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "errorCode",
							"type": "string",
							"description": "An specific code that indicates the type of error the current object is.",
							"optional": false
						},
						{
							"access": null,
							"name": "errorMessage",
							"type": "string",
							"description": "Message that explains the error occurred in the server.",
							"optional": false
						},
						{
							"access": null,
							"name": "errorParameters",
							"type": "CarbonLDP.LDP.Map<string, any>",
							"description": "Map that contains the specific elements that make the error been thrown.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "ErrorFactory",
					"description": "Interface with the factory, decorate and utils function for `CarbonLDP.LDP.Error` objects.",
					"generics": null,
					"path": "CarbonLDP.LDP.ErrorFactory",
					"properties": [
						{
							"access": null,
							"name": "SCHEMA",
							"type": "CarbonLDP.ObjectSchema",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "TYPE",
							"type": "string",
							"description": null,
							"optional": false
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "CarbonError",
						"type": "CarbonLDP.LDP.ErrorFactory",
						"description": null,
						"optional": null,
						"CarbonError.SCHEMA": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "ErrorResponse",
			"description": null,
			"path": "carbonldp/LDP/ErrorResponse",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "ErrorResponse",
					"description": "Interface that its used to represents part of an error (or multiple of them) thrown by the server.",
					"generics": null,
					"path": "CarbonLDP.LDP.ErrorResponse",
					"super-classes": [
						{
							"name": "CarbonLDP.TransientResource"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "errors",
							"type": "CarbonLDP.LDP.Error[]",
							"description": "Array that list the error occurred in the server.",
							"optional": false
						},
						{
							"access": null,
							"name": "requestID",
							"type": "string",
							"description": "An ID that identifies the request which cause the error.",
							"optional": false
						},
						{
							"access": null,
							"name": "statusCode",
							"type": "number",
							"description": "The HTTP status code that represents all the errors occurred.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "ErrorResponseFactory",
					"description": "Interface with the factory, decorate and utils methods for `CarbonLDP.LDP.ErrorResponse` objects.",
					"generics": null,
					"path": "CarbonLDP.LDP.ErrorResponseFactory",
					"properties": [
						{
							"access": null,
							"name": "SCHEMA",
							"type": "CarbonLDP.ObjectSchema",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "TYPE",
							"type": "string",
							"description": null,
							"optional": false
						}
					],
					"methods": [
						{
							"name": "getMessage",
							"signatures": [
								{
									"access": null,
									"name": "getMessage",
									"generics": null,
									"description": "Returns a string with the message of all the errors in the ErrorResponse.",
									"arguments": [
										{
											"name": "errorResponse",
											"type": "CarbonLDP.LDP.ErrorResponse",
											"description": "The ErrorResponse object to obtain the message from."
										}
									],
									"returns": {
										"type": "string"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "string"
							}
						}
					]
				}
			],
			"classes": [
				{
					"suiteType": "class",
					"name": "ErrorResponseFactory",
					"description": "Useful functions for managing `CarbonLDP.LDP.ErrorResponse` objects.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.LDP.ErrorResponseFactory",
					"should-exist": true,
					"ErrorResponse.TYPE": true,
					"ErrorResponse.SCHEMA": true,
					"ErrorResponse.getMessage": true
				}
			]
		},
		{
			"suiteType": "module",
			"name": "Map",
			"description": null,
			"path": "carbonldp/LDP/Map",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "Map",
					"description": "Interface that contains a set entries with a close relation in the form of a key/value pair.",
					"generics": [
						"K",
						"V"
					],
					"path": "CarbonLDP.LDP.Map",
					"super-classes": [
						{
							"name": "CarbonLDP.TransientResource"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "entries",
							"type": "CarbonLDP.LDP.MapEntry<K,V>[]",
							"description": "An array of entries' pair relations.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "MapFactory",
					"description": "Interface with the factory, decorate and utils methods for `CarbonLDP.LDP.Map` objects.",
					"generics": null,
					"path": "CarbonLDP.LDP.MapFactory",
					"properties": [
						{
							"access": null,
							"name": "SCHEMA",
							"type": "CarbonLDP.ObjectSchema",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "TYPE",
							"type": "string",
							"description": null,
							"optional": false
						}
					],
					"methods": [
						{
							"name": "is",
							"signatures": [
								{
									"access": null,
									"name": "is",
									"generics": null,
									"description": "Return true if the object provided is considered a `CarbonLDP.LDP.Map` object.",
									"arguments": [
										{
											"name": "object",
											"type": "object",
											"description": "Object to check"
										}
									],
									"returns": {
										"type": "object is CarbonLDP.LDP.Map<any, any>"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "object is CarbonLDP.LDP.Map<any, any>"
							}
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "CarbonMap",
						"type": "CarbonLDP.LDP.MapFactory",
						"description": null,
						"optional": null,
						"CarbonMap.is": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "MapEntry",
			"description": null,
			"path": "carbonldp/LDP/MapEntry",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "MapEntry",
					"description": "Entries of the `CarbonLDP.LDP.Map` with the key/value pair.",
					"generics": [
						"K",
						"V"
					],
					"path": "CarbonLDP.LDP.MapEntry",
					"super-classes": [
						{
							"name": "CarbonLDP.Resource"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "entryKey",
							"type": "K",
							"description": "The key element of the entry's pair.",
							"optional": false
						},
						{
							"access": null,
							"name": "entryValue",
							"type": "V",
							"description": "The value element of the entry's pair.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "MapEntryFactory",
					"description": "Interface with the factory, decorate and utils methods for `CarbonLDP.LDP.MapEntry` objects",
					"generics": null,
					"path": "CarbonLDP.LDP.MapEntryFactory",
					"properties": [
						{
							"access": null,
							"name": "SCHEMA",
							"type": "CarbonLDP.ObjectSchema",
							"description": null,
							"optional": false
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "CarbonMapEntry",
						"type": "CarbonLDP.LDP.MapEntryFactory",
						"description": null,
						"optional": null,
						"CarbonMapEntry.SCHEMA": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "ResponseMetadata",
			"description": null,
			"path": "carbonldp/LDP/ResponseMetadata",
			"is-defined": true,
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "ResponseMetadata",
					"description": "Interface that represents the main resource of a set of metadata resources, which references everyone resource related to an specific dynamic response of tha server.",
					"generics": null,
					"path": "CarbonLDP.LDP.ResponseMetadata",
					"super-classes": [
						{
							"name": "CarbonLDP.LDP.VolatileResource"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "documentsMetadata",
							"type": "CarbonLDP.LDP.DocumentMetadata[]",
							"description": "An array with all the metadata resources of the dynamic response.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "ResponseMetadataFactory",
					"description": "Interface with the factory, decorate and utils methods for `CarbonLDP.LDP.ResponseMetadata` objects.",
					"generics": null,
					"path": "CarbonLDP.LDP.ResponseMetadataFactory",
					"properties": [
						{
							"access": null,
							"name": "SCHEMA",
							"type": "CarbonLDP.ObjectSchema",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "TYPE",
							"type": "string",
							"description": null,
							"optional": false
						}
					],
					"methods": [
						{
							"name": "is",
							"signatures": [
								{
									"access": null,
									"name": "is",
									"generics": null,
									"description": "Return true if the object provided is considered a `CarbonLDP.LDP.ResponseMetadata` object.",
									"arguments": [
										{
											"name": "object",
											"type": "object",
											"description": "Object to check"
										}
									],
									"returns": {
										"type": "object is CarbonLDP.LDP.ResponseMetadata"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "object is CarbonLDP.LDP.ResponseMetadata"
							}
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "ResponseMetadata",
						"type": "CarbonLDP.LDP.ResponseMetadataFactory",
						"description": null,
						"optional": null,
						"ResponseMetadata.is": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "ValidationError",
			"description": null,
			"path": "carbonldp/LDP/ValidationError",
			"should-exists": true,
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "ValidationError",
					"description": "Interface that contains the properties that describe how the validation failed.",
					"generics": null,
					"path": "CarbonLDP.LDP.ValidationError",
					"super-classes": [
						{
							"name": "CarbonLDP.TransientResource"
						}
					],
					"should-exists": true,
					"properties": [
						{
							"access": null,
							"name": "errorDetails",
							"type": "CarbonLDP.Pointer",
							"description": "Pointer with the error details of how the validation failed.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "ValidationErrorFactory",
					"description": "Interface with the factory, decorate and utils methods for `CarbonLDP.LDP.ValidationError` objects.",
					"generics": null,
					"path": "CarbonLDP.LDP.ValidationErrorFactory",
					"properties": [
						{
							"access": null,
							"name": "SCHEMA",
							"type": "CarbonLDP.ObjectSchema",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "TYPE",
							"type": "string",
							"description": null,
							"optional": false
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "ValidationError",
						"type": "CarbonLDP.LDP.ValidationErrorFactory",
						"description": null,
						"optional": null,
						"ValidationError.SCHEMA": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "VolatileResource",
			"description": null,
			"path": "carbonldp/LDP/VolatileResource",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "VolatileResource",
					"description": "Interface that represents a free resource, i.e. a dynamic generated resource that does not have a persisted form.",
					"generics": null,
					"path": "CarbonLDP.LDP.VolatileResource",
					"super-classes": [
						{
							"name": "CarbonLDP.Resource"
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "VolatileResourceFactory",
					"description": "Interface with the factory, decorate an utils methods for `CarbonLDP.LDP.VolatileResource` objects.",
					"generics": null,
					"path": "CarbonLDP.LDP.VolatileResourceFactory",
					"properties": [
						{
							"access": null,
							"name": "TYPE",
							"type": "string",
							"description": null,
							"optional": false
						}
					],
					"methods": [
						{
							"name": "create",
							"signatures": [
								{
									"access": null,
									"name": "create",
									"generics": null,
									"description": null,
									"arguments": [],
									"returns": {
										"type": "void"
									},
									"optional": false,
									"should-return different reference": true
								}
							],
							"returns": {
								"type": "void"
							}
						},
						{
							"name": "createFrom",
							"signatures": [
								{
									"access": null,
									"name": "createFrom",
									"generics": null,
									"description": null,
									"arguments": [],
									"returns": {
										"type": "void"
									},
									"optional": false,
									"should-return same reference": true
								}
							],
							"returns": {
								"type": "void"
							}
						},
						{
							"name": "is",
							"signatures": [
								{
									"access": null,
									"name": "is",
									"generics": null,
									"description": null,
									"arguments": [],
									"returns": {
										"type": "void"
									},
									"optional": false,
									"should-return true when all assertions": true
								}
							],
							"returns": {
								"type": "void"
							}
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "VolatileResource",
						"type": "CarbonLDP.LDP.VolatileResourceFactory",
						"description": "Constant that implements the `CarbonLDP.LDP.VolatileResourceFactory` interface.",
						"optional": null,
						"VolatileResource.SCHEMA": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "LDPatch",
			"description": null,
			"path": "carbonldp/LDPatch",
			"should-exists": true,
			"reexports": [
				{
					"access": "static",
					"name": "AddToken",
					"originalLocation": "CarbonLDP.LDPatch.AddToken"
				},
				{
					"access": "static",
					"name": "DeleteToken",
					"originalLocation": "CarbonLDP.LDPatch.DeleteToken"
				},
				{
					"access": "instance",
					"name": "DeltaCreator",
					"originalLocation": "CarbonLDP.LDPatch.DeltaCreator"
				},
				{
					"access": "static",
					"name": "LDPatchToken",
					"originalLocation": "CarbonLDP.LDPatch.LDPatchToken"
				},
				{
					"access": "static",
					"name": "PrefixToken",
					"originalLocation": "CarbonLDP.LDPatch.PrefixToken"
				},
				{
					"access": "static",
					"name": "SliceToken",
					"originalLocation": "CarbonLDP.LDPatch.SliceToken"
				},
				{
					"access": "static",
					"name": "StatementToken",
					"originalLocation": "CarbonLDP.LDPatch.StatementToken"
				},
				{
					"access": "static",
					"name": "TripleToken",
					"originalLocation": "CarbonLDP.LDPatch.TripleToken"
				},
				{
					"access": "static",
					"name": "UpdateListToken",
					"originalLocation": "CarbonLDP.LDPatch.UpdateListToken"
				}
			]
		},
		{
			"suiteType": "module",
			"name": "DeltaCreator",
			"description": null,
			"path": "carbonldp/LDPatch/DeltaCreator",
			"classes": [
				{
					"suiteType": "class",
					"name": "DeltaCreator",
					"description": "Creator of LDPatch deltas",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.LDPatch.DeltaCreator",
					"should-exists": true,
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"signatures": [
							{
								"generics": null,
								"description": null,
								"arguments": [
									{
										"name": "context",
										"type": "CarbonLDP.Context"
									}
								],
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"should-exists": true,
						"should-initialize the LD Patch add token": true,
						"should-initialize the LD Patch delete token": true,
						"should-initialize the LD Patch update lists tokens": true
					},
					"methods": {
						"instance": [
							{
								"access": "instance",
								"suiteType": "method",
								"name": "addResource",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Creates and adds the delta to the patch, of the provided old and new resource.",
										"arguments": [
											{
												"name": "schema",
												"type": "CarbonLDP.DigestedObjectSchema",
												"description": "The schema of the resource to create its delta."
											},
											{
												"name": "previousResource",
												"type": "CarbonLDP.TransientResource",
												"description": "The old representation of the resource to create the delta."
											},
											{
												"name": "currentResource",
												"type": "CarbonLDP.TransientResource",
												"description": "The current representation of the resource to create the delta."
											}
										],
										"returns": {
											"type": "void"
										}
									}
								],
								"returns": {
									"type": "void"
								},
								"should-exists": true,
								"should-append multiple resources changes": true,
								"should-ignore ID when only in current": true,
								"should-ignore ID when only in previous": true
							},
							{
								"access": "instance",
								"suiteType": "method",
								"name": "getPatch",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Returns the LD Patch string of the resources provided in `addResource` method.",
										"arguments": null,
										"returns": {
											"type": "string"
										}
									}
								],
								"returns": {
									"type": "string"
								},
								"should-exists": true,
								"should-return LD Patch string": true
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "Tokens",
			"description": null,
			"path": "carbonldp/LDPatch/Tokens",
			"should-exists": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "AddToken",
					"description": "LD Patch add action.",
					"generics": null,
					"interfaces": [
						"sparqler/tokens/TokenNode"
					],
					"path": "CarbonLDP.LDPatch.AddToken",
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "token",
								"type": "add",
								"description": null,
								"optional": null
							},
							{
								"access": "instance",
								"name": "triples",
								"type": "sparqler/tokens/SubjectToken[]",
								"description": null,
								"optional": null
							}
						]
					},
					"should-exists": true,
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"signatures": [
							{
								"generics": null,
								"description": null,
								"arguments": null,
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"should-exists": true,
						"should-initialize triples": true,
						"should-set token name as `add`": true
					},
					"methods": {
						"instance": []
					}
				},
				{
					"suiteType": "class",
					"name": "DeleteToken",
					"description": "LD Patch delete action.",
					"generics": null,
					"interfaces": [
						"sparqler/tokens/TokenNode"
					],
					"path": "CarbonLDP.LDPatch.DeleteToken",
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "token",
								"type": "delete",
								"description": null,
								"optional": null
							},
							{
								"access": "instance",
								"name": "triples",
								"type": "sparqler/tokens/SubjectToken[]",
								"description": null,
								"optional": null
							}
						]
					},
					"should-exists": true,
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"signatures": [
							{
								"generics": null,
								"description": null,
								"arguments": null,
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"should-exists": true,
						"should-initialize triples": true,
						"should-set token name as `delete`": true
					},
					"methods": {
						"instance": []
					}
				},
				{
					"suiteType": "class",
					"name": "LDPatchToken",
					"description": "An LD Patch expression.",
					"generics": null,
					"interfaces": [
						"sparqler/tokens/TokenNode"
					],
					"path": "CarbonLDP.LDPatch.LDPatchToken",
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "prologues",
								"type": "CarbonLDP.LDPatch.PrefixToken[]",
								"description": null,
								"optional": null
							},
							{
								"access": "instance",
								"name": "statements",
								"type": "CarbonLDP.LDPatch.StatementToken[]",
								"description": null,
								"optional": null
							},
							{
								"access": "instance",
								"name": "token",
								"type": "ldpatch",
								"description": null,
								"optional": null
							}
						]
					},
					"should-exists": true,
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"signatures": [
							{
								"generics": null,
								"description": null,
								"arguments": null,
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"should-exists": true,
						"should-initialize prologues": true,
						"should-initialize statements": true,
						"should-set token name as `ldpatch`": true
					},
					"methods": {
						"instance": []
					}
				},
				{
					"suiteType": "class",
					"name": "PrefixToken",
					"description": "LD Patch add action.",
					"generics": null,
					"interfaces": [
						"sparqler/tokens/TokenNode"
					],
					"path": "CarbonLDP.LDPatch.PrefixToken",
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "iri",
								"type": "sparqler/tokens/IRIRefToken",
								"description": null,
								"optional": null
							},
							{
								"access": "instance",
								"name": "namespace",
								"type": "string",
								"description": null,
								"optional": null
							},
							{
								"access": "instance",
								"name": "token",
								"type": "prefix",
								"description": null,
								"optional": null
							}
						]
					},
					"should-exists": true,
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"signatures": [
							{
								"generics": null,
								"description": null,
								"arguments": [
									{
										"name": "namespace",
										"type": "string",
										"description": "The namespace of the LD Patch prefix."
									},
									{
										"name": "iri",
										"type": "sparqler/tokens/IRIRefToken",
										"description": "The IRI of the LD Patch prefix."
									}
								],
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"should-exists": true,
						"should-initialize prefix namespace": true,
						"should-initialize iri": true,
						"should-set token name as `prefix`": true
					},
					"methods": {
						"instance": []
					}
				},
				{
					"suiteType": "class",
					"name": "SliceToken",
					"description": "LD Patch list slice expression token.",
					"generics": null,
					"interfaces": [
						"sparqler/tokens/TokenNode"
					],
					"path": "CarbonLDP.LDPatch.SliceToken",
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "maxIndex",
								"type": "number",
								"description": null,
								"optional": null
							},
							{
								"access": "instance",
								"name": "minIndex",
								"type": "number",
								"description": null,
								"optional": null
							},
							{
								"access": "instance",
								"name": "token",
								"type": "slice",
								"description": null,
								"optional": null
							}
						]
					},
					"should-exists": true,
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"signatures": [
							{
								"generics": null,
								"description": null,
								"arguments": [
									{
										"name": "minIndex",
										"type": "number",
										"optional": true,
										"description": "The minimum index of the list's range to update."
									},
									{
										"name": "maxIndex",
										"type": "number",
										"optional": true,
										"description": "The maximum index of the list's range to update."
									}
								],
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"should-exists": true,
						"should-store indexes": true,
						"should-ignore minIndex when null": true,
						"should-ignore minIndex when undefined": true,
						"should-ignore maxIndex when null": true,
						"should-ignore maxIndex when undefined": true,
						"should-set token name as `slice`": true
					},
					"methods": {
						"instance": []
					}
				},
				{
					"suiteType": "class",
					"name": "UpdateListToken",
					"description": "LD Patch update list action.",
					"generics": null,
					"interfaces": [
						"sparqler/tokens/TokenNode"
					],
					"path": "CarbonLDP.LDPatch.UpdateListToken",
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "collection",
								"type": "sparqler/tokens/CollectionToken",
								"description": null,
								"optional": null
							},
							{
								"access": "instance",
								"name": "predicate",
								"type": "sparqler/tokens/IRIRefToken | sparqler/tokens/PrefixedNameToken",
								"description": null,
								"optional": null
							},
							{
								"access": "instance",
								"name": "slice",
								"type": "CarbonLDP.LDPatch.SliceToken",
								"description": null,
								"optional": null
							},
							{
								"access": "instance",
								"name": "subject",
								"type": "sparqler/tokens/VariableORIRI | sparqler/tokens/BlankNodeToken",
								"description": null,
								"optional": null
							},
							{
								"access": "instance",
								"name": "token",
								"type": "updateList",
								"description": null,
								"optional": null
							}
						]
					},
					"should-exists": true,
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"signatures": [
							{
								"generics": null,
								"description": null,
								"arguments": [
									{
										"name": "subject",
										"type": "sparqler/tokens/VariableORIRI | sparqler/tokens/BlankNodeToken",
										"description": "The subject that contains the list to update."
									},
									{
										"name": "predicate",
										"type": "sparqler/tokens/IRIRefToken | sparqler/tokens/PrefixedNameToken",
										"description": "The predicate relation to the list to update."
									},
									{
										"name": "slice",
										"type": "CarbonLDP.LDPatch.SliceToken",
										"description": "The slice that specifies the index of the elements in the list that will be replaced."
									},
									{
										"name": "collection",
										"type": "sparqler/tokens/CollectionToken",
										"description": "The collection to replace the selected elements by the slice token."
									}
								],
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"should-exists": true,
						"should-set token name as `updateList`": true
					},
					"methods": {
						"instance": []
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "AddMemberAction",
			"description": null,
			"path": "carbonldp/Members/AddMemberAction",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "AddMemberAction",
					"description": "Interface that represents an object to be sent in a request that add members to a container.",
					"generics": null,
					"path": "CarbonLDP.Members.AddMemberAction",
					"super-classes": [
						{
							"name": "CarbonLDP.TransientResource"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "targetMembers",
							"type": "CarbonLDP.Pointer[]",
							"description": "Array with the members to be added to the container.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "AddMemberActionFactory",
					"description": "Interface with the factory, decorate and utils methods of `CarbonLDP.Members.AddMemberAction` objects",
					"generics": null,
					"path": "CarbonLDP.Members.AddMemberActionFactory",
					"properties": [
						{
							"access": null,
							"name": "SCHEMA",
							"type": "CarbonLDP.ObjectSchema",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "TYPE",
							"type": "string",
							"description": null,
							"optional": false
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "create",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Creates `CarbonLDP.Members.AddMemberAction` resource for the specified targetMembers.",
									"arguments": [
										{
											"name": "data",
											"type": "T & CarbonLDP.Members.BaseAddMemberAction",
											"description": "Data to be used in the creation of an add member action."
										}
									],
									"returns": {
										"type": "CarbonLDP.Members.AddMemberAction"
									}
								}
							],
							"returns": {
								"type": "CarbonLDP.Members.AddMemberAction"
							},
							"should-exists": true,
							"should-return an AddMemberAction": true,
							"should-add type c:AddMemberAction": true,
							"should-maintain targetMembers": true,
							"should-return different reference": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "createFrom",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Creates `CarbonLDP.Members.AddMemberAction` resource for the specified targetMembers.",
									"arguments": [
										{
											"name": "object",
											"type": "T & CarbonLDP.Members.BaseAddMemberAction",
											"description": "Object to be converted into an add member action."
										}
									],
									"returns": {
										"type": "CarbonLDP.Members.AddMemberAction"
									}
								}
							],
							"returns": {
								"type": "CarbonLDP.Members.AddMemberAction"
							},
							"should-exists": true,
							"should-return an AddMemberAction": true,
							"should-add type c:AddMemberAction": true,
							"should-maintain targetMembers": true,
							"should-return same reference": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "is",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns true if the object is considered a `CarbonLDP.Members.AddMemberAction` object.",
									"arguments": [
										{
											"name": "value",
											"type": "any"
										}
									],
									"returns": {
										"type": "value is CarbonLDP.Members.AddMemberAction"
									}
								}
							],
							"returns": {
								"type": "value is CarbonLDP.Members.AddMemberAction"
							},
							"should-exists": true,
							"should-be a TransientResource": true,
							"should-have type c:AddMemberAction": true,
							"should-return true when all assertions": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "BaseAddMemberAction",
					"description": "Interface that represents an object to be sent in a request that add members to a container.",
					"generics": null,
					"path": "CarbonLDP.Members.BaseAddMemberAction",
					"properties": [
						{
							"access": null,
							"name": "targetMembers",
							"type": "CarbonLDP.Pointer[]",
							"description": "The target members to add in a `addMember` request.",
							"optional": false
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "AddMemberAction",
						"type": "CarbonLDP.Members.AddMemberActionFactory",
						"description": "Constant that implements the `CarbonLDP.Members.AddMemberActionFactory` instance.",
						"optional": null,
						"AddMemberAction.SCHEMA": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "RemoveMemberAction",
			"description": null,
			"path": "carbonldp/Members/RemoveMemberAction",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "BaseRemoveMemberAction",
					"description": "Interface that represents an object to be sent in a request that add members to a container.",
					"generics": null,
					"path": "CarbonLDP.Members.BaseRemoveMemberAction",
					"properties": [
						{
							"access": null,
							"name": "targetMembers",
							"type": "CarbonLDP.Pointer[]",
							"description": "The target members to remove in a `removeMember` request.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "RemoveMemberAction",
					"description": "Interface that represents an object to be sent in a request that removes specific members to a container.",
					"generics": null,
					"path": "CarbonLDP.Members.RemoveMemberAction",
					"super-classes": [
						{
							"name": "CarbonLDP.TransientResource"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "targetMembers",
							"type": "CarbonLDP.Pointer[]",
							"description": "Array with the members to be removed from the container.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "RemoveMemberActionFactory",
					"description": "Interface with the factory, decorate and utils methods for `CarbonLDP.Members.RemoveMemberAction`",
					"generics": null,
					"path": "CarbonLDP.Members.RemoveMemberActionFactory",
					"properties": [
						{
							"TYPE": {
								"access": "static",
								"name": "TYPE",
								"type": "string",
								"description": null,
								"optional": null
							},
							"SCHEMA": {
								"access": "static",
								"name": "SCHEMA",
								"type": "CarbonLDP.ObjectSchema",
								"description": null,
								"optional": null
							}
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "create",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Creates `CarbonLDP.Members.RemoveMemberAction` resource for the specified targetMembers.",
									"arguments": [
										{
											"name": "data",
											"type": "T & CarbonLDP.Members.BaseRemoveMemberAction",
											"description": "Data to be used in the creation of an remove member action."
										}
									],
									"returns": {
										"type": "CarbonLDP.Members.RemoveMemberAction"
									}
								}
							],
							"returns": {
								"type": "CarbonLDP.Members.RemoveMemberAction"
							},
							"should-exists": true,
							"should-return an RemoveMemberAction": true,
							"should-add type c:RemoveMemberAction": true,
							"should-maintain targetMembers": true,
							"should-return different reference": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "createFrom",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Creates `CarbonLDP.Members.RemoveMemberAction` resource for the specified targetMembers.",
									"arguments": [
										{
											"name": "object",
											"type": "T & CarbonLDP.Members.BaseRemoveMemberAction",
											"description": "Object to be converted into an remove member action."
										}
									],
									"returns": {
										"type": "CarbonLDP.Members.RemoveMemberAction"
									}
								}
							],
							"returns": {
								"type": "CarbonLDP.Members.RemoveMemberAction"
							},
							"should-exists": true,
							"should-return an RemoveMemberAction": true,
							"should-add type c:RemoveMemberAction": true,
							"should-maintain targetMembers": true,
							"should-return same reference": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "is",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns true if the object is considered a `CarbonLDP.Members.RemoveMemberAction` object.",
									"arguments": [
										{
											"name": "value",
											"type": "any"
										}
									],
									"returns": {
										"type": "value is CarbonLDP.Members.RemoveMemberAction"
									}
								}
							],
							"returns": {
								"type": "value is CarbonLDP.Members.RemoveMemberAction"
							},
							"should-exists": true,
							"should-be a TransientResource": true,
							"should-have type c:RemoveMemberAction": true,
							"should-return true when all assertions": true
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "RemoveMemberAction",
						"type": "CarbonLDP.Members.RemoveMemberActionFactory",
						"description": "Constant that implements the `CarbonLDP.Members.RemoveMemberActionFactory` interface.",
						"optional": null,
						"RemoveMemberAction.SCHEMA": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "Messaging",
			"description": null,
			"path": "carbonldp/Messaging",
			"is-defined": true,
			"reexports": [
				{
					"access": "static",
					"name": "ChildCreated",
					"originalLocation": "CarbonLDP.Messaging.ChildCreatedEvent"
				},
				{
					"access": "static",
					"name": "ChildCreatedFactory",
					"originalLocation": "CarbonLDP.Messaging.ChildCreatedEventFactory"
				},
				{
					"access": "static",
					"name": "createDestination",
					"originalLocation": "carbonldp/Messaging/Utils#createDestination"
				},
				{
					"access": "static",
					"name": "DocumentCreatedDetailsFactory",
					"originalLocation": "CarbonLDP.Messaging.DocumentCreatedEventDetailsFactory"
				},
				{
					"access": "static",
					"name": "DocumentDeleted",
					"originalLocation": "CarbonLDP.Messaging.DocumentDeletedEvent"
				},
				{
					"access": "static",
					"name": "DocumentDeletedFactory",
					"originalLocation": "CarbonLDP.Messaging.DocumentDeletedEventFactory"
				},
				{
					"access": "static",
					"name": "DocumentModified",
					"originalLocation": "CarbonLDP.Messaging.DocumentModifiedEvent"
				},
				{
					"access": "static",
					"name": "DocumentModifiedFactory",
					"originalLocation": "CarbonLDP.Messaging.DocumentModifiedEventFactory"
				},
				{
					"access": "static",
					"name": "Event",
					"originalLocation": "CarbonLDP.Messaging.Event"
				},
				{
					"access": "static",
					"name": "EventMessage",
					"originalLocation": "CarbonLDP.Messaging.EventMessage"
				},
				{
					"access": "static",
					"name": "EventMessageFactory",
					"originalLocation": "CarbonLDP.Messaging.EventMessageFactory"
				},
				{
					"access": "static",
					"name": "MemberAdded",
					"originalLocation": "CarbonLDP.Messaging.MemberAddedEvent"
				},
				{
					"access": "static",
					"name": "MemberAddedDetails",
					"originalLocation": "CarbonLDP.Messaging.MemberAddedEventDetails"
				},
				{
					"access": "static",
					"name": "MemberAddedDetailsFactory",
					"originalLocation": "CarbonLDP.Messaging.MemberAddedEventDetailsFactory"
				},
				{
					"access": "static",
					"name": "MemberAddedFactory",
					"originalLocation": "CarbonLDP.Messaging.MemberAddedEventFactory"
				},
				{
					"access": "static",
					"name": "MemberDetails",
					"originalLocation": "CarbonLDP.Messaging.MemberEventDetails"
				},
				{
					"access": "static",
					"name": "MemberDetailsFactory",
					"originalLocation": "CarbonLDP.Messaging.MemberEventDetailsFactory"
				},
				{
					"access": "static",
					"name": "MemberRemoved",
					"originalLocation": "CarbonLDP.Messaging.MemberRemovedEvent"
				},
				{
					"access": "static",
					"name": "MemberRemovedDetails",
					"originalLocation": "CarbonLDP.Messaging.MemberRemovedEventDetails"
				},
				{
					"access": "static",
					"name": "MemberRemovedDetailsFactory",
					"originalLocation": "CarbonLDP.Messaging.MemberRemovedEventDetailsFactory"
				},
				{
					"access": "static",
					"name": "MemberRemovedFactory",
					"originalLocation": "CarbonLDP.Messaging.MemberRemovedEventFactory"
				},
				{
					"access": "static",
					"name": "MessagingOptions",
					"originalLocation": "CarbonLDP.Messaging.MessagingOptions"
				},
				{
					"access": "static",
					"name": "MessagingService",
					"originalLocation": "CarbonLDP.Messaging.MessagingService"
				},
				{
					"access": "static",
					"name": "parseURIPattern",
					"originalLocation": "carbonldp/Messaging/Utils#parseURIPattern"
				},
				{
					"access": "static",
					"name": "validateEventType",
					"originalLocation": "carbonldp/Messaging/Utils#validateEventType"
				}
			]
		},
		{
			"suiteType": "module",
			"name": "ChildCreatedEvent",
			"description": null,
			"path": "carbonldp/Messaging/ChildCreatedEvent",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "ChildCreatedEvent",
					"description": "Interface with the base properties of the data received in any document created event.",
					"generics": null,
					"path": "CarbonLDP.Messaging.ChildCreatedEvent",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.Messaging.EventMessage"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "details",
							"type": "CarbonLDP.Messaging.DocumentCreatedEventDetails",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "target",
							"type": "CarbonLDP.Document",
							"description": null,
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "ChildCreatedEventFactory",
					"description": "Interface with the factory, decorate and utils for `CarbonLDP.Messaging.ChildCreatedEvent` objects.",
					"generics": null,
					"path": "CarbonLDP.Messaging.ChildCreatedEventFactory",
					"properties": [
						{
							"access": null,
							"name": "SCHEMA",
							"type": "CarbonLDP.ObjectSchema",
							"description": null,
							"optional": false
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "ChildCreatedEvent",
						"type": "CarbonLDP.Messaging.ChildCreatedEventFactory",
						"description": null,
						"optional": null,
						"ChildCreatedEvent.SCHEMA": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "DocumentCreatedEventDetails",
			"description": null,
			"path": "carbonldp/Messaging/DocumentCreatedEventDetails",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "DocumentCreatedEventDetails",
					"description": "Interface with the properties of the details in a document created event.",
					"generics": null,
					"path": "CarbonLDP.Messaging.DocumentCreatedEventDetails",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.TransientResource"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "createdDocuments",
							"type": "CarbonLDP.Document[]",
							"description": null,
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "DocumentCreatedEventDetailsFactory",
					"description": "Interface with the factory, decorate and utils for `CarbonLDP.Messaging.DocumentCreatedEventDetails` objects.",
					"generics": null,
					"path": "CarbonLDP.Messaging.DocumentCreatedEventDetailsFactory",
					"properties": [
						{
							"access": null,
							"name": "SCHEMA",
							"type": "CarbonLDP.ObjectSchema",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "TYPE",
							"type": "string",
							"description": null,
							"optional": false
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "DocumentCreatedEventDetails",
						"type": "CarbonLDP.Messaging.DocumentCreatedEventDetailsFactory",
						"description": null,
						"optional": null,
						"DocumentCreatedEventDetails.SCHEMA": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "DocumentDeletedEvent",
			"description": null,
			"path": "carbonldp/Messaging/DocumentDeletedEvent",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "DocumentDeletedEvent",
					"description": "Interface with the properties of the data received in a document deleted event.",
					"generics": null,
					"path": "CarbonLDP.Messaging.DocumentDeletedEvent",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.Messaging.EventMessage"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "target",
							"type": "CarbonLDP.Document",
							"description": null,
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "DocumentDeletedEventFactory",
					"description": "Interface with the factory, decorate and utils for `CarbonLDP.Messaging.DocumentDeletedEvent` objects.",
					"generics": null,
					"path": "CarbonLDP.Messaging.DocumentDeletedEventFactory",
					"properties": [
						{
							"TYPE": {
								"access": "static",
								"name": "TYPE",
								"type": "string",
								"description": null,
								"optional": null
							},
							"SCHEMA": {
								"access": "static",
								"name": "SCHEMA",
								"type": "CarbonLDP.ObjectSchema",
								"description": null,
								"optional": null
							}
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "DocumentDeletedEvent",
						"type": "CarbonLDP.Messaging.DocumentDeletedEventFactory",
						"description": null,
						"optional": null,
						"DocumentDeletedEvent.SCHEMA": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "DocumentModifiedEvent",
			"description": null,
			"path": "carbonldp/Messaging/DocumentModifiedEvent",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "DocumentModifiedEvent",
					"description": "Interface with the properties of the data received in a document modified event.",
					"generics": null,
					"path": "CarbonLDP.Messaging.DocumentModifiedEvent",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.Messaging.EventMessage"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "target",
							"type": "CarbonLDP.Document",
							"description": null,
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "DocumentModifiedEventFactory",
					"description": "Interface with the factory, decorate and utils for `CarbonLDP.Messaging.DocumentModifiedEvent` objects.",
					"generics": null,
					"path": "CarbonLDP.Messaging.DocumentModifiedEventFactory",
					"properties": [
						{
							"access": null,
							"name": "SCHEMA",
							"type": "CarbonLDP.ObjectSchema",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "TYPE",
							"type": "string",
							"description": null,
							"optional": false
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "DocumentModifiedEvent",
						"type": "CarbonLDP.Messaging.DocumentModifiedEventFactory",
						"description": null,
						"optional": null,
						"DocumentModifiedEvent.SCHEMA": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "Event",
			"description": null,
			"path": "carbonldp/Messaging/Event",
			"is-defined": true,
			"enums": [
				{
					"suiteType": "enum",
					"name": "Event",
					"description": null,
					"path": "CarbonLDP.Messaging.Event",
					"is-defined": true,
					"enumerals": [
						{
							"name": "CHILD_CREATED",
							"description": null
						},
						{
							"name": "DOCUMENT_MODIFIED",
							"description": null
						},
						{
							"name": "DOCUMENT_DELETED",
							"description": null
						},
						{
							"name": "MEMBER_ADDED",
							"description": null
						},
						{
							"name": "MEMBER_REMOVED",
							"description": null
						}
					]
				}
			]
		},
		{
			"suiteType": "module",
			"name": "EventMessage",
			"description": null,
			"path": "carbonldp/Messaging/EventMessage",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "EventMessage",
					"description": "Interface with the base properties of the data received in a subscription event.",
					"generics": null,
					"path": "CarbonLDP.Messaging.EventMessage",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.TransientResource"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "target",
							"type": "CarbonLDP.Document",
							"description": null,
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "EventMessageFactory",
					"description": "Interface with the factory, decorate and utils elements for `CarbonLDP.Messaging.EventMessage` objects.",
					"generics": null,
					"path": "CarbonLDP.Messaging.EventMessageFactory",
					"properties": [
						{
							"access": null,
							"name": "SCHEMA",
							"type": "CarbonLDP.ObjectSchema",
							"description": null,
							"optional": false
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "is",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns true if the object is considered a `CarbonLDP.Messaging.EventMessage` interface.",
									"arguments": [
										{
											"name": "value",
											"type": "any",
											"description": "The value to be tested."
										}
									],
									"returns": {
										"type": "value is CarbonLDP.Messaging.EventMessage"
									}
								}
							],
							"returns": {
								"type": "value is CarbonLDP.Messaging.EventMessage"
							}
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "EventMessage",
						"type": "CarbonLDP.Messaging.EventMessageFactory",
						"description": null,
						"optional": null
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "MemberAddedEvent",
			"description": null,
			"path": "carbonldp/Messaging/MemberAddedEvent",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "MemberAddedEvent",
					"description": "Interface with the properties of the data received in a member added event.",
					"generics": null,
					"path": "CarbonLDP.Messaging.MemberAddedEvent",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.Messaging.EventMessage"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "details",
							"type": "CarbonLDP.Messaging.MemberAddedEventDetails",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "target",
							"type": "CarbonLDP.Document",
							"description": null,
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "MemberAddedEventFactory",
					"description": "Interface with the factory, decorator and utils for `CarbonLDP.Messaging.MemberAddedEvent` objects.",
					"generics": null,
					"path": "CarbonLDP.Messaging.MemberAddedEventFactory",
					"properties": [
						{
							"access": null,
							"name": "SCHEMA",
							"type": "CarbonLDP.ObjectSchema",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "TYPE",
							"type": "string",
							"description": null,
							"optional": false
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "MemberAddedEvent",
						"type": "CarbonLDP.Messaging.MemberAddedEventFactory",
						"description": null,
						"optional": null,
						"MemberAddedEvent.SCHEMA": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "MemberAddedEventDetails",
			"description": null,
			"path": "carbonldp/Messaging/MemberAddedEventDetails",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "MemberAddedEventDetails",
					"description": "Interface with the properties of the details in a member added event.",
					"generics": null,
					"path": "CarbonLDP.Messaging.MemberAddedEventDetails",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.Messaging.MemberEventDetails"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "members",
							"type": "CarbonLDP.Document[]",
							"description": null,
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "MemberAddedEventDetailsFactory",
					"description": "Interface with the factory, decorator and utils for `CarbonLDP.Messaging.MemberAddedEventDetails` objects.",
					"generics": null,
					"path": "CarbonLDP.Messaging.MemberAddedEventDetailsFactory",
					"properties": [
						{
							"TYPE": {
								"access": "static",
								"name": "TYPE",
								"type": "string",
								"description": null,
								"optional": null
							},
							"SCHEMA": {
								"access": "static",
								"name": "SCHEMA",
								"type": "CarbonLDP.ObjectSchema",
								"description": null,
								"optional": null
							}
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "MemberAddedEventDetails",
						"type": "CarbonLDP.Messaging.MemberAddedEventDetailsFactory",
						"description": null,
						"optional": null,
						"MemberAddedEventDetails.SCHEMA": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "MemberEventDetails",
			"description": null,
			"path": "carbonldp/Messaging/MemberEventDetails",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "MemberEventDetails",
					"description": "Interface with the base properties of the details in a member related event.",
					"generics": null,
					"path": "CarbonLDP.Messaging.MemberEventDetails",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.TransientResource"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "members",
							"type": "CarbonLDP.Document[]",
							"description": null,
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "MemberEventDetailsFactory",
					"description": "Interface with the factory, decorate and utils for `CarbonLDP.Messaging.MemberEventDetails` objects.",
					"generics": null,
					"path": "CarbonLDP.Messaging.MemberEventDetailsFactory",
					"properties": [
						{
							"access": null,
							"name": "SCHEMA",
							"type": "CarbonLDP.ObjectSchema",
							"description": null,
							"optional": false
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "MemberEventDetails",
						"type": "CarbonLDP.Messaging.MemberEventDetailsFactory",
						"description": null,
						"optional": null,
						"MemberEventDetails.SCHEMA": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "MemberRemovedEvent",
			"description": null,
			"path": "carbonldp/Messaging/MemberRemovedEvent",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "MemberRemovedEvent",
					"description": "Interface with the properties of the data received in a member removed event.",
					"generics": null,
					"path": "CarbonLDP.Messaging.MemberRemovedEvent",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.Messaging.EventMessage"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "details",
							"type": "CarbonLDP.Messaging.MemberRemovedEventDetails",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "target",
							"type": "CarbonLDP.Document",
							"description": null,
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "MemberRemovedEventFactory",
					"description": "Interface with the factory, decorate and utils for `CarbonLDP.Messaging.MemberRemovedEvent` objects.",
					"generics": null,
					"path": "CarbonLDP.Messaging.MemberRemovedEventFactory",
					"properties": [
						{
							"access": null,
							"name": "SCHEMA",
							"type": "CarbonLDP.ObjectSchema",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "TYPE",
							"type": "string",
							"description": null,
							"optional": false
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "MemberRemovedEvent",
						"type": "CarbonLDP.Messaging.MemberRemovedEventFactory",
						"description": null,
						"optional": null,
						"MemberRemovedEvent.SCHEMA": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "MemberRemovedEventDetails",
			"description": null,
			"path": "carbonldp/Messaging/MemberRemovedEventDetails",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "MemberRemovedEventDetails",
					"description": "Interface with the properties of the details in a member removed event.",
					"generics": null,
					"path": "CarbonLDP.Messaging.MemberRemovedEventDetails",
					"is-defined": true,
					"super-classes": [
						{
							"name": "CarbonLDP.Messaging.MemberEventDetails"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "members",
							"type": "CarbonLDP.Document[]",
							"description": null,
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "MemberRemovedEventDetailsFactory",
					"description": "Interface with the factory, decorate and utils for `CarbonLDP.Messaging.MemberRemovedEventDetails` objects.",
					"generics": null,
					"path": "CarbonLDP.Messaging.MemberRemovedEventDetailsFactory",
					"properties": [
						{
							"access": null,
							"name": "SCHEMA",
							"type": "CarbonLDP.ObjectSchema",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "TYPE",
							"type": "string",
							"description": null,
							"optional": false
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "MemberRemovedEventDetails",
						"type": "CarbonLDP.Messaging.MemberRemovedEventDetailsFactory",
						"description": null,
						"optional": null,
						"MemberRemovedEventDetails.SCHEMA": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "MessagingOptions",
			"description": null,
			"path": "carbonldp/Messaging/MessagingOptions",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "MessagingOptions",
					"description": "Options to configure the messaging service",
					"generics": null,
					"path": "CarbonLDP.Messaging.MessagingOptions",
					"is-defined": true,
					"properties": [
						{
							"access": null,
							"name": "maxReconnectAttempts",
							"type": "number",
							"description": "The maximum numbers of reconnect attempts. Set to `null` of you don't want to set a limit.",
							"optional": true
						},
						{
							"access": null,
							"name": "reconnectDelay",
							"type": "number",
							"description": "The milliseconds of wait to the next reconnecting attempt.",
							"optional": true
						}
					]
				}
			]
		},
		{
			"suiteType": "module",
			"name": "MessagingService",
			"description": null,
			"path": "carbonldp/Messaging/MessagingService",
			"should-exists": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "MessagingService",
					"description": "Class that manages the messaging client, connecting and subscriptions.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.Messaging.MessagingService",
					"is-defined": true,
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"signatures": [
							{
								"generics": null,
								"description": null,
								"arguments": [
									{
										"name": "context",
										"type": "CarbonLDP.DocumentsContext"
									}
								],
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"should-be instantiable": true,
						"should-initialize options with the default options": true,
						"should-initialize subscriptions queue": true
					},
					"methods": {
						"instance": [
							{
								"access": "instance",
								"suiteType": "method",
								"name": "connect",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Connect to the Platform messaging broker. Is the Service is already connected, an error will be thrown.",
										"arguments": [
											{
												"name": "onConnect",
												"type": "() => void",
												"optional": true,
												"description": "Callback to be invoked when the client has established a connection. It will be invoked again when a reconnection has been executed."
											},
											{
												"name": "onError",
												"type": "( error:Error ) => void",
												"optional": true,
												"description": "Callback to be invoked when a error has occurred in the connection or server. If none is provided, the errors will be broadcasted to every connected subscription."
											}
										],
										"returns": {
											"type": "void"
										}
									}
								],
								"returns": {
									"type": "void"
								},
								"should-exists": true,
								"should-call the reconnect method": true,
								"should-initialize the subscription map": true,
								"should-reset the subscription map": true,
								"should-initialize the connection/reconnection attempts counter": true,
								"should-reset the connection/reconnection attempts counter": true,
								"should-throw an error when service is already connected": true
							},
							{
								"access": "instance",
								"suiteType": "method",
								"name": "reconnect",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Reconnect the service to the Platform broker. If the service is already connected, it will be closed and opened again.",
										"arguments": [
											{
												"name": "onConnect",
												"type": "() => void",
												"optional": true,
												"description": "Callback to be invoked when the client has established a connection. It will be invoked again when a reconnection has been executed."
											},
											{
												"name": "onError",
												"type": "( error:Error ) => void",
												"optional": true,
												"description": "Callback to be invoked when a error has occurred in the connection or server. If none is provided, the errors will be broadcasted to every connected subscription."
											}
										],
										"returns": {
											"type": "void"
										}
									}
								],
								"returns": {
									"type": "void"
								},
								"should-exists": true,
								"should-not change the subscription map": true,
								"should-connect to the broker": true,
								"should-be able to reconnect automatically": true,
								"should-still reconnect on maxReconnectAttempts": true,
								"should-throw error if surpassed the maxReconnectAttempts": true,
								"should-disconnect if already connected": true
							},
							{
								"access": "instance",
								"suiteType": "method",
								"name": "setOptions",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Update the messaging service options. If any property is no defined the default is used:\n\n```typescript\n{\n\tmaxReconnectAttempts: 10,\n\treconnectDelay: 1000\n}\n```.",
										"arguments": [
											{
												"name": "options",
												"type": "CarbonLDP.Messaging.MessagingOptions",
												"description": "The options to be updated"
											}
										],
										"returns": {
											"type": "void"
										}
									}
								],
								"returns": {
									"type": "void"
								},
								"should-exists": true,
								"should-use DEFAULT_OPTIONS for undefined properties": true
							},
							{
								"access": "instance",
								"suiteType": "method",
								"name": "subscribe",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Subscribe to an event described by the destination provided.",
										"arguments": [
											{
												"name": "destination",
												"type": "string",
												"description": "The destination of the event to subscribe for."
											},
											{
												"name": "onEvent",
												"type": "( message:CarbonLDP.Messaging.EventMessage ) => void",
												"optional": true,
												"description": "Callback to be invoked in every notification event and will be provided with the data message of the event."
											},
											{
												"name": "onError",
												"type": "( error:Error ) => void",
												"optional": true,
												"description": "Callback to be invoked when a error has occurred in the subscription."
											}
										],
										"returns": {
											"type": "void"
										}
									}
								],
								"returns": {
									"type": "void"
								},
								"should-exists": true,
								"should-be able to subscribe and parse its data": true,
								"should-be able add subscriptions in queue until connection is established": true,
								"should-receive broadcasted errors": true
							},
							{
								"access": "instance",
								"suiteType": "method",
								"name": "unsubscribe",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Remove the subscription set for the specific destination and onEvent callback.",
										"arguments": [
											{
												"name": "destination",
												"type": "string",
												"description": "The destination of the subscription to be removed."
											},
											{
												"name": "onEvent",
												"type": "( message:CarbonLDP.Messaging.EventMessage ) => void",
												"optional": true,
												"description": "Callback of the subscription to be be removed."
											}
										],
										"returns": {
											"type": "void"
										}
									}
								],
								"returns": {
									"type": "void"
								},
								"should-exists": true,
								"should-remove the matched subscription": true
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "Utils",
			"description": null,
			"path": "carbonldp/Messaging/Utils",
			"should-exists": true,
			"methods": {
				"static": [
					{
						"access": "static",
						"suiteType": "method",
						"name": "_createDestination",
						"description": null,
						"optional": null,
						"signatures": [
							{
								"generics": null,
								"description": "Create a 'topic' destination using the event and the URI pattern provided. This pattern is parsed with the `carbonldp/Messaging/Utils#parseURIPattern` method.\nIf invalid event of URI is given an error will be thrown.",
								"arguments": [
									{
										"name": "event",
										"type": "string",
										"description": "The event of the destination messaging notification."
									},
									{
										"name": "uriPattern",
										"type": "string",
										"description": "The URI pattern of the destination messaging notification."
									},
									{
										"name": "baseURI",
										"type": "string",
										"description": "The base URI where the URI of the pattern belongs to."
									}
								],
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"should-exists": true,
						"should-call the validation of event": true,
						"should-create a AMQP topic destination": true
					},
					{
						"access": "static",
						"suiteType": "method",
						"name": "_parseURIPattern",
						"description": null,
						"optional": null,
						"signatures": [
							{
								"generics": null,
								"description": "Parse the provided URI pattern that follows a more glob-like syntax to the AMQP path syntax.",
								"arguments": [
									{
										"name": "uriPattern",
										"type": "string",
										"description": "The URI pattern to be transformed."
									},
									{
										"name": "baseURI",
										"type": "string",
										"description": "The base URI where the URI of the patten belongs to. This is used to obtain the the relative path that AMQP requires."
									}
								],
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"should-exists": true,
						"should-throw error when uriPattern does not resolves to the baseURI provided": true,
						"should-not throw error when parameters are relative": true,
						"should-return empty string when root uriParameter is provided": true,
						"should-remove '/' character at the end and the beginning of the pattern": true,
						"should-remove the baseURI from the URIPattern": true,
						"should-convert URIs to AMQP paths": true,
						"should-convert '**' expansion path to AMQP '#'": true,
						"should-replace dots characters ('.') into '^'": true,
						"should-encode the other special characters": true
					},
					{
						"access": "static",
						"suiteType": "method",
						"name": "_validaEventType",
						"description": null,
						"optional": null,
						"signatures": [
							{
								"generics": null,
								"description": "Test if the provided string is a valid Messaging event. If don't an error will be thrown.",
								"arguments": [
									{
										"name": "event",
										"type": "string",
										"description": "The event to be evaluated."
									}
								],
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"should-exists": true,
						"should-accept all events `*.*` event": true,
						"should-accept `child.created` event variations": true,
						"should-accept `access-point.created` event variations": true,
						"should-accept `document.modified` event variations": true,
						"should-accept `document.deleted` event variations": true,
						"should-accept `member.added` event variations": true,
						"should-accept `member.removed` event variations": true,
						"should-throw error if invalid event is provided": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "Model",
			"description": null,
			"path": "carbonldp/Model",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "ModelDecorator",
					"description": "Interface with the standard methods of a model decoration.",
					"generics": [
						"MODEL extends object",
						"BASE extends object = object"
					],
					"path": "CarbonLDP.Model.ModelDecorator",
					"methods": [
						{
							"name": "decorate",
							"signatures": [
								{
									"access": null,
									"name": "decorate",
									"generics": [
										"W extends BASE"
									],
									"description": null,
									"arguments": [
										{
											"name": "object",
											"type": "W"
										}
									],
									"returns": {
										"type": "W & MODEL"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "W & MODEL"
							}
						},
						{
							"name": "isDecorated",
							"signatures": [
								{
									"access": null,
									"name": "isDecorated",
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "object",
											"type": "object"
										}
									],
									"returns": {
										"type": "object is MODEL"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "object is MODEL"
							}
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "ModelFactory",
					"description": "Interface with the standard methods for a model creation.",
					"generics": [
						"MODEL extends object",
						"BASE extends object = object"
					],
					"path": "CarbonLDP.Model.ModelFactory",
					"methods": [
						{
							"name": "create",
							"signatures": [
								{
									"access": null,
									"name": "create",
									"generics": [
										"W extends object"
									],
									"description": null,
									"arguments": [
										{
											"name": "data",
											"type": "W & BASE"
										}
									],
									"returns": {
										"type": "W & MODEL"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "W & MODEL"
							}
						},
						{
							"name": "createFrom",
							"signatures": [
								{
									"access": null,
									"name": "createFrom",
									"generics": [
										"W extends object"
									],
									"description": null,
									"arguments": [
										{
											"name": "object",
											"type": "W & BASE"
										}
									],
									"returns": {
										"type": "W & MODEL"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "W & MODEL"
							}
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "ModelFactoryOptional",
					"description": "Interface with the methods for a model creation with an optional base data.",
					"generics": [
						"MODEL extends object",
						"BASE extends object = object"
					],
					"path": "CarbonLDP.Model.ModelFactoryOptional",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelFactory<MODEL, BASE>"
						}
					],
					"methods": [
						{
							"name": "create",
							"signatures": [
								{
									"access": null,
									"name": "create",
									"generics": [
										"W extends object"
									],
									"description": null,
									"arguments": [
										{
											"name": "data",
											"type": "W & BASE",
											"optional": true
										}
									],
									"returns": {
										"type": "W & MODEL"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "W & MODEL"
							}
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "ModelPrototype",
					"description": "Interface with the property for describing a model prototype.\nThe first generic specified the interface of the model; the second can be interfaces that the model is extending so the prototype has not to re-implements that methods; and the third one are the names of the methods the prototype must override/re-implement.",
					"generics": [
						"MODEL extends object",
						"EXTENDED extends object = {}",
						"OVERRIDDEN extends keyof MODEL = never"
					],
					"path": "CarbonLDP.Model.ModelPrototype",
					"properties": [
						{
							"access": null,
							"name": "PROTOTYPE",
							"type": "Pick<MODEL, Exclude<keyof MODEL, keyof EXTENDED> | OVERRIDDEN>",
							"description": "The object containing the prototype to be decorated for the model.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "ModelSchema",
					"description": "Interface that defined the TYPE and SCHEMA properties for a Persisted Model.",
					"generics": [
						"TYPE extends string = string"
					],
					"path": "CarbonLDP.Model.ModelSchema",
					"properties": [
						{
							"access": null,
							"name": "SCHEMA",
							"type": "CarbonLDP.ObjectSchema",
							"description": "The schema the document interface is related to.",
							"optional": true
						},
						{
							"access": null,
							"name": "TYPE",
							"type": "TYPE",
							"description": "The type the document interface is related to.",
							"optional": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "ModelTypeGuard",
					"description": "Interface that contains the method to assert a value as an specific model.",
					"generics": [
						"MODEL extends object"
					],
					"path": "CarbonLDP.Model.ModelTypeGuard",
					"methods": [
						{
							"name": "is",
							"signatures": [
								{
									"access": null,
									"name": "is",
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "value",
											"type": "value"
										}
									],
									"returns": {
										"type": "value is MODEL"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "value is MODEL"
							}
						}
					]
				}
			]
		},
		{
			"suiteType": "module",
			"name": "ObjectSchema",
			"description": null,
			"path": "carbonldp/ObjectSchema",
			"enums": [
				{
					"suiteType": "enum",
					"name": "ContainerType",
					"description": "Enum for the types that a container can be.",
					"path": "CarbonLDP.ContainerType",
					"is-defined": true,
					"enumerals": [
						{
							"name": "SET",
							"description": null
						},
						{
							"name": "LIST",
							"description": null
						},
						{
							"name": "LANGUAGE",
							"description": null
						}
					]
				}
			],
			"classes": [
				{
					"suiteType": "class",
					"name": "DigestedObjectSchema",
					"description": "Class of a standardized Schema that is used for the SDK for compact and expand JSON-LD objects and Carbon Resources.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.DigestedObjectSchema",
					"should-exists": true,
					"should-be instantiable": true,
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "base",
								"type": "string",
								"description": "The base URI of the schema.",
								"optional": null
							},
							{
								"access": "instance",
								"name": "language",
								"type": "string",
								"description": "The default language of the string properties.",
								"optional": null
							},
							{
								"access": "instance",
								"name": "prefixes",
								"type": "Map<string, string>",
								"description": "Map that contains the prefixes of absolutes URIs.",
								"optional": null
							},
							{
								"access": "instance",
								"name": "properties",
								"type": "Map<string, CarbonLDP.DigestedObjectSchemaProperty>",
								"description": "Map that contains the definitions of the properties in the schema.",
								"optional": null
							},
							{
								"access": "instance",
								"name": "vocab",
								"type": "string",
								"description": "URI that will be used to resolve properties URIs that aren't defined in the schema.",
								"optional": null
							}
						]
					},
					"methods": {
						"instance": [
							{
								"access": "instance",
								"suiteType": "method",
								"name": "resolveURI",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Tries to resolve a non absolute URI using the schema and the configuration provided.",
										"arguments": [
											{
												"name": "uri",
												"type": "string",
												"description": "The URI to ve resolved."
											},
											{
												"name": "schema",
												"type": "CarbonLDP.DigestedObjectSchema",
												"description": "The schema where to find the prefixes or the default vocabulary to utilize."
											},
											{
												"name": "relativeTo",
												"type": "{ vocab?:boolean, base?:boolean }",
												"optional": true,
												"description": "An additional configuration object to specify the resolution mode of a relative URI, where the vocab takes priority before the base."
											}
										],
										"returns": {
											"type": "string",
											"description": "The resolved absolute URI."
										}
									}
								],
								"returns": {
									"type": "string",
									"description": "The resolved absolute URI."
								},
								"should-exists": true,
								"should-not alter absolute uris": true,
								"should-not alter blank node labels": true,
								"should-resolve relative with vocab schema": true,
								"should-resolve relative with base schema": true,
								"should-resolve relative with vocab schema before base": true,
								"should-resolve relative with base schema when no vocab": true,
								"should-resolve prefixed name from prefixes": true,
								"should-resolve prefixed name from properties' @id": true,
								"should-resolve recursive prefixed name": true,
								"should-relative from prefix": true
							}
						]
					}
				},
				{
					"suiteType": "class",
					"name": "DigestedObjectSchemaProperty",
					"description": "Class for standardized object properties of a schema.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.DigestedObjectSchemaProperty",
					"is-defined": true,
					"should-be instantiable": true,
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "containerType",
								"type": "CarbonLDP.ContainerType",
								"description": "The type of container the property is. It's `null` if the property is no container type.",
								"optional": null
							},
							{
								"access": "instance",
								"name": "language",
								"type": "string",
								"description": "The language the property is in.",
								"optional": null
							},
							{
								"access": "instance",
								"name": "literal",
								"type": "boolean",
								"description": "Indicates if the property is a literal or not.",
								"optional": null
							},
							{
								"access": "instance",
								"name": "literalType",
								"type": "string",
								"description": "The type of literal the property is. It's `null` if the property is not a literal.",
								"optional": null
							},
							{
								"access": "instance",
								"name": "uri",
								"type": "string",
								"description": "The absolute URI that represents the property",
								"optional": null
							}
						]
					}
				},
				{
					"suiteType": "class",
					"name": "ObjectSchemaDigester",
					"description": "Class with functions to standardize a JSON-LD Context Schema.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.ObjectSchemaDigester",
					"methods": {
						"static": [
							{
								"access": "static",
								"suiteType": "method",
								"name": "combineDigestedObjectSchemas",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Combine several standardized schemas into one.",
										"arguments": [
											{
												"name": "digestedSchemas",
												"type": "CarbonLDP.DigestedObjectSchema[]"
											}
										],
										"returns": {
											"type": "CarbonLDP.DigestedObjectSchema"
										}
									}
								],
								"returns": {
									"type": "CarbonLDP.DigestedObjectSchema"
								},
								"should-exists": true,
								"should-return new schema reference": true,
								"should-keep last set vocab": true,
								"should-keep last set base": true,
								"should-keep last set language": true,
								"should-combine prefixes": true,
								"should-keep last same prefix": true,
								"should-combine properties": true,
								"should-keep last same property": true
							},
							{
								"access": "static",
								"suiteType": "method",
								"name": "digestProperty",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Process an schema property definition before using it.",
										"arguments": [
											{
												"name": "name",
												"type": "string"
											},
											{
												"name": "definition",
												"type": "CarbonLDP.ObjectSchemaProperty"
											}
										],
										"returns": {
											"type": "CarbonLDP.DigestedObjectSchemaProperty"
										}
									}
								],
								"returns": {
									"type": "CarbonLDP.DigestedObjectSchemaProperty"
								},
								"should-exists": true,
								"should-digest @id": true,
								"should-digest name when @id": true,
								"should-digest @type when string": true,
								"should-digest @type when @id": true,
								"should-digest @type when @vocab": true,
								"should-digest @language": true,
								"should-digest @container when @set": true,
								"should-digest @container when @list": true,
								"should-digest @container when @language": true
							},
							{
								"access": "static",
								"suiteType": "method",
								"name": "digestSchema",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Processes a schema to standardize it before using it.",
										"arguments": [
											{
												"name": "schema",
												"type": "CarbonLDP.ObjectSchema"
											}
										],
										"returns": {
											"type": "CarbonLDP.DigestedObjectSchema"
										}
									},
									{
										"generics": null,
										"description": "Processes several schemas to standardize and combine them before using them.",
										"arguments": [
											{
												"name": "schemas",
												"type": "Array<CarbonLDP.ObjectSchema>"
											}
										],
										"returns": {
											"type": "CarbonLDP.DigestedObjectSchema"
										}
									}
								],
								"returns": {
									"type": "CarbonLDP.DigestedObjectSchema"
								},
								"should-exists": true,
								"should-digest @vocab": true,
								"should-digest @base": true,
								"should-digest @language": true,
								"should-digest prefixes": true,
								"should-digest properties": true,
								"should-keep last set @vocab": true,
								"should-keep last set @base": true,
								"should-keep last set @language": true,
								"should-combine prefixes": true,
								"should-keep last same prefix": true,
								"should-combine properties": true,
								"should-keep last same property": true
							}
						]
					}
				},
				{
					"suiteType": "class",
					"name": "ObjectSchemaUtils",
					"description": "Class with useful functions that use schemas.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.ObjectSchemaUtils",
					"is-defined": true
				}
			],
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "ObjectSchema",
					"description": "Interface that represents an schema based in the [JSONLD contexts](https://www.w3.org/TR/json-ld/#the-context). This is used to convert from the JSONLD stored in the server to the Documents used in the SDK and vice versa.",
					"generics": null,
					"path": "CarbonLDP.ObjectSchema",
					"properties": [
						{
							"access": null,
							"name": "@base",
							"type": "string",
							"description": "An absolute URI that is used to resolve relative URIs. If it's set to `null`, will invalidate a previous `@base` value.",
							"optional": true
						},
						{
							"access": null,
							"name": "@index",
							"type": "object",
							"description": "[Not Supported] This element is ignored.",
							"optional": true
						},
						{
							"access": null,
							"name": "@language",
							"type": "string",
							"description": "The default language of the string properties.",
							"optional": true
						},
						{
							"access": null,
							"name": "@reverse",
							"type": "object",
							"description": "[Not Supported] This element is ignored.",
							"optional": true
						},
						{
							"access": null,
							"name": "@vocab",
							"type": "string",
							"description": "An absolute URI that is used to as the common prefix for all the relative properties. If it's set to `null`, will invalidate a previous `@vocab` value.",
							"optional": true
						},
						{
							"access": null,
							"name": "[ name:string ]",
							"type": "(string | CarbonLDP.ObjectSchemaProperty)",
							"description": "This index can be interpreted in two forms:\n- As a prefix: When the value is as string. The name is taken a a prefix and the string value must be an absolute URI.\n- As a property: When the value is of type `CarbonLDP.ObjectSchemaProperty`. The name is taken as the name of the property.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "ObjectSchemaProperty",
					"description": "Interface that defines the property of a schema.",
					"generics": null,
					"path": "CarbonLDP.ObjectSchemaProperty",
					"properties": [
						{
							"access": null,
							"name": "@container",
							"type": "string",
							"description": "If the property is multiple it can be of tree types:\n- `@set`: An unsorted array of elements.\n- `@list`: An sorted array of elements\n- `@language`: An string property with multiple languages.",
							"optional": true
						},
						{
							"access": null,
							"name": "@id",
							"type": "string",
							"description": "The absolute URI of the property in the JSONLD which is mapped to the key name where this definition was referred.",
							"optional": true
						},
						{
							"access": null,
							"name": "@language",
							"type": "string",
							"description": "The language of the property.",
							"optional": true
						},
						{
							"access": null,
							"name": "@type",
							"type": "string",
							"description": "If the property is a literal, this specifies its XSD type.",
							"optional": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "ObjectSchemaResolver",
					"description": "Interface that defines the methods needed for an element that can provide object schemas.",
					"generics": null,
					"path": "CarbonLDP.ObjectSchemaResolver",
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "getGeneralSchema",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns the general object schema that applies to all the objects.",
									"arguments": null,
									"returns": {
										"type": "CarbonLDP.DigestedObjectSchema"
									}
								}
							],
							"returns": {
								"type": "CarbonLDP.DigestedObjectSchema"
							},
							"should-exists": true,
							"should-return empty when no context": true,
							"should-get general schema from context": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "getSchemaFor",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns the specific object schema that applies to the object provided.",
									"arguments": [
										{
											"name": "object",
											"type": "object",
											"description": "The object to look for its schema."
										}
									],
									"returns": {
										"type": "CarbonLDP.DigestedObjectSchema"
									}
								}
							],
							"returns": {
								"type": "CarbonLDP.DigestedObjectSchema"
							},
							"should-exists": true,
							"should-return get schemas from @type": true,
							"should-return get schemas from types": true,
							"should-return c:Document schema when document URI in @id": true,
							"should-return c:Document schema when document URI in id": true,
							"should-not return c:Document schema when fragment in @id": true,
							"should-not return c:Document schema when fragment in id": true,
							"should-not return c:Document schema when bNode label in @id": true,
							"should-not return c:Document schema when bNode label in id": true,
							"should-return combined schemas with the general when Node": true,
							"should-return combined schemas with the general when Resource": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "hasSchemaFor",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns true if the object provided has an specific schema for.",
									"arguments": [
										{
											"name": "object",
											"type": "object",
											"description": "The object to look for if it has an schema."
										}
									],
									"returns": {
										"type": "boolean"
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"should-exists": true,
							"should-return true when no path provided": true,
							"should-return false when path provided": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "ObjectSchemaResolverFactory",
					"description": "Interface with the factory and utils for `CarbonLDP.ObjectSchemaResolver` objects.",
					"generics": null,
					"path": "CarbonLDP.ObjectSchemaResolverFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.ObjectSchemaResolver>"
						},
						{
							"name": "CarbonLDP.Model.ModelDecorator<CarbonLDP.ObjectSchemaResolver>"
						}
					]
				}
			],
			"properties": {
				"instance": [
					{
						"access": "instance",
						"name": "ObjectSchemaResolver",
						"type": "CarbonLDP.ObjectSchemaResolverFactory",
						"description": null,
						"optional": null,
						"should-exists": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "Pointer",
			"description": null,
			"path": "carbonldp/Pointer",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "$PointerLibrary",
					"description": "Interface that represents resources that can manage pointers.",
					"generics": null,
					"path": "CarbonLDP.$PointerLibrary",
					"methods": [
						{
							"name": "$getPointer",
							"signatures": [
								{
									"access": null,
									"name": "$getPointer",
									"generics": null,
									"description": "Returns the pointer referenced by the URI provided. If none exists, an empty pointer should be created.",
									"arguments": [
										{
											"name": "id",
											"type": "string"
										}
									],
									"returns": {
										"type": "boolean"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "boolean"
							}
						},
						{
							"name": "4hasPointer",
							"signatures": [
								{
									"access": null,
									"name": "4hasPointer",
									"generics": null,
									"description": "Returns true if the object that implements this interface has a pointer referenced by the URI provided.",
									"arguments": [
										{
											"name": "id",
											"type": "string"
										}
									],
									"returns": {
										"type": "boolean"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "boolean"
							}
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "$PointerValidator",
					"description": "Interface that represents resources that can validate pointers.",
					"generics": null,
					"path": "CarbonLDP.$PointerValidator",
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "$inScope",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns true if the pointer provided is in the scope of the object that implements this interface.",
									"arguments": [
										{
											"name": "pointer",
											"type": "CarbonLDP.Pointer"
										}
									],
									"returns": {
										"type": "boolean"
									}
								},
								{
									"generics": null,
									"description": "Returns true if the URI provided is in the scope of the object that implements this interface.",
									"arguments": [
										{
											"name": "id",
											"type": "string"
										}
									],
									"returns": {
										"type": "boolean"
									}
								}
							],
							"returns": {
								"type": "boolean"
							}
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "BasePointer",
					"description": "Interface with the base properties for a `CarbonLDP.Pointer`.",
					"generics": null,
					"path": "CarbonLDP.BasePointer",
					"properties": [
						{
							"access": null,
							"name": "$id",
							"type": "string",
							"description": "The URI that identifies the pointer.",
							"optional": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "Pointer",
					"description": "Interface that represents any element that can be referenced by an URI.",
					"generics": null,
					"path": "CarbonLDP.Pointer",
					"properties": [
						{
							"access": null,
							"name": "$id",
							"type": "string",
							"description": "The URI that identifies the pointer.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "PointerFactory",
					"description": "Interface with the factory, decorate, and utils methods of a `CarbonLDP.Pointer` object.",
					"generics": null,
					"path": "CarbonLDP.PointerFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.Pointer>"
						},
						{
							"name": "CarbonLDP.Model.ModelDecorator<CarbonLDP.Pointer, CarbonLDP.BasePointer>"
						},
						{
							"name": "CarbonLDP.Model.ModelTypeGuard<CarbonLDP.Pointer>"
						},
						{
							"name": "CarbonLDP.Model.ModelFactory<CarbonLDP.Pointer, CarbonLDP.BasePointer>"
						}
					],
					"methods": [
						{
							"name": "areEqual",
							"signatures": [
								{
									"access": null,
									"name": "areEqual",
									"generics": null,
									"description": "Check of the objects refer to the same resource by its ID.",
									"arguments": [
										{
											"name": "pointer1",
											"type": "CarbonLDP.Pointer"
										},
										{
											"name": "pointer2",
											"type": "CarbonLDP.Pointer"
										}
									],
									"returns": {
										"type": "boolean"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "boolean"
							}
						},
						{
							"name": "create",
							"signatures": [
								{
									"access": null,
									"name": "create",
									"generics": [
										"T extends object"
									],
									"description": "Creates a Pointer object with the ID provided.",
									"arguments": [
										{
											"name": "data",
											"type": "T & CarbonLDP.BasePointer",
											"optional": true
										}
									],
									"returns": {
										"type": "T & CarbonLDP.Pointer"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "T & CarbonLDP.Pointer"
							}
						},
						{
							"name": "getIDs",
							"signatures": [
								{
									"access": null,
									"name": "getIDs",
									"generics": null,
									"description": "Extracts the IDs of all the pointers provided.",
									"arguments": [
										{
											"name": "pointers",
											"type": "CarbonLDP.Pointer[]",
											"description": "The array of Pointers to obtain their IDs."
										}
									],
									"returns": {
										"type": "string[]"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "string[]"
							}
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "PointerLibrary",
					"description": "Interface that represents resources that can manage pointers.",
					"generics": null,
					"path": "CarbonLDP.PointerLibrary",
					"methods": [
						{
							"name": "getPointer",
							"signatures": [
								{
									"access": null,
									"name": "getPointer",
									"generics": null,
									"description": "Returns the pointer referenced by the URI provided. If none exists, an empty pointer should be created.",
									"arguments": [
										{
											"name": "id",
											"type": "string"
										}
									],
									"returns": {
										"type": "boolean"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "boolean"
							}
						},
						{
							"name": "hasPointer",
							"signatures": [
								{
									"access": null,
									"name": "hasPointer",
									"generics": null,
									"description": "Returns true if the object that implements this interface has a pointer referenced by the URI provided.",
									"arguments": [
										{
											"name": "id",
											"type": "string"
										}
									],
									"returns": {
										"type": "boolean"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "boolean"
							}
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "PointerValidator",
					"description": "Interface that represents resources that can validate pointers.",
					"generics": null,
					"path": "CarbonLDP.PointerValidator",
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "inScope",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns true if the pointer provided is in the scope of the object that implements this interface.",
									"arguments": [
										{
											"name": "pointer",
											"type": "CarbonLDP.Pointer"
										}
									],
									"returns": {
										"type": "boolean"
									}
								},
								{
									"generics": null,
									"description": "Returns true if the URI provided is in the scope of the object that implements this interface.",
									"arguments": [
										{
											"name": "id",
											"type": "string"
										}
									],
									"returns": {
										"type": "boolean"
									}
								}
							],
							"returns": {
								"type": "boolean"
							}
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "Pointer",
						"type": "CarbonLDP.PointerFactory",
						"description": "Constant that implements the `CarbonLDP.PointerFactory` interface.",
						"optional": null
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "QueryDocuments",
			"description": null,
			"path": "carbonldp/QueryDocuments",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "QueryablePointer",
					"description": "Interface that describes extra properties for a pointer that can be queried.",
					"generics": null,
					"path": "CarbonLDP.QueryDocuments.QueryablePointer",
					"super-classes": [
						{
							"name": "CarbonLDP.QueryDocuments.QueryablePointer"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "_queryableMetadata",
							"type": "CarbonLDP.QueryDocuments.QueryableProperty | undefined",
							"description": "Metadata for documents that are partial documents.",
							"optional": false
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "isQueried",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns true if the resource is a partial representation of the one stored in Carbon LDP.",
									"arguments": null,
									"returns": {
										"type": "boolean"
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"should-exists": true,
							"should-return false when no _queryableMetadata": true,
							"should-return true when _queryableMetadata set": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "QueryablePointerFactory",
					"description": "Interface with the factory, decorate and utils of a `CarbonLDP.QueryDocuments.QueryablePointer` object.",
					"generics": null,
					"path": "CarbonLDP.QueryDocuments.QueryablePointerFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.QueryDocuments.QueryablePointer, CarbonLDP.BaseResolvablePointer>"
						},
						{
							"name": "CarbonLDP.Model.ModelDecorator<CarbonLDP.QueryDocuments.QueryablePointer, CarbonLDP.BaseResolvablePointer>"
						},
						{
							"name": "CarbonLDP.Model.ModelTypeGuard<CarbonLDP.QueryDocuments.QueryablePointer>"
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "QueryablePointer",
						"type": "CarbonLDP.QueryDocuments.QueryablePointerFactory",
						"description": null,
						"optional": null,
						"should-exists": true
					}
				]
			},
			"should-exists": true,
			"reexports": [
				{
					"access": "instance",
					"name": "QueryContainer",
					"originalLocation": "CarbonLDP.QueryDocuments.QueryContainer"
				},
				{
					"access": "instance",
					"name": "QueryDocumentBuilder",
					"originalLocation": "CarbonLDP.QueryDocuments.QueryDocumentBuilder"
				},
				{
					"access": "instance",
					"name": "QueryDocumentContainer",
					"originalLocation": "CarbonLDP.QueryDocuments.QueryContainer"
				},
				{
					"access": "instance",
					"name": "QueryDocumentsBuilder",
					"originalLocation": "CarbonLDP.QueryDocuments.QueryDocumentsBuilder"
				},
				{
					"access": "instance",
					"name": "QueryDocumentsOrder",
					"originalLocation": "CarbonLDP.QueryDocuments.QueryDocumentsOrder"
				},
				{
					"access": "instance",
					"name": "QueryMetadata",
					"originalLocation": "CarbonLDP.QueryDocuments.QueryMetadata"
				},
				{
					"access": "instance",
					"name": "QueryObject",
					"originalLocation": "CarbonLDP.QueryDocuments.QueryObject"
				},
				{
					"access": "instance",
					"name": "QueryProperty",
					"originalLocation": "CarbonLDP.QueryDocuments.QueryProperty"
				},
				{
					"access": "instance",
					"name": "QueryPropertyType",
					"originalLocation": "CarbonLDP.QueryDocuments.QueryPropertyType"
				},
				{
					"access": "instance",
					"name": "QuerySchema",
					"originalLocation": "CarbonLDP.QueryDocuments.QuerySchema"
				},
				{
					"access": "instance",
					"name": "QuerySchemaProperty",
					"originalLocation": "CarbonLDP.QueryDocuments.QuerySchemaProperty"
				},
				{
					"access": "instance",
					"name": "QueryValue",
					"originalLocation": "CarbonLDP.QueryDocuments.QueryValue"
				},
				{
					"access": "instance",
					"name": "QueryVariable",
					"originalLocation": "CarbonLDP.QueryDocuments.QueryVariable"
				}
			]
		},
		{
			"suiteType": "module",
			"name": "QueryContainer",
			"description": null,
			"path": "carbonldp/QueryDocuments/QueryContainer",
			"classes": [
				{
					"suiteType": "class",
					"name": "QueryContainer",
					"description": "Container for prefix iri.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.QueryDocuments.QueryContainer",
					"should-exists": true,
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"signatures": [
							{
								"generics": null,
								"description": "Class that helps the builders of a query document with the shared data.",
								"arguments": [
									{
										"name": "schema",
										"type": "CarbonLDP.DigestedObjectSchema"
									}
								],
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"should-be instantiable": true
					},
					"super-classes": [
						{
							"name": "sparqler/patterns/FluentPathContainer"
						}
					],
					"methods": {
						"instance": [
							{
								"access": "instance",
								"suiteType": "method",
								"name": "compactIRI",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Returns a IRI token of the string provided,but if the IRI can be converted in a prefixed name the corresponding token will be returned.",
										"arguments": [
											{
												"name": "iri",
												"type": "string",
												"description": "The iri to be compacted and tokenized"
											}
										],
										"returns": {
											"type": "sparqler/tokens/IRIToken"
										}
									}
								],
								"returns": {
									"type": "sparqler/tokens/IRIToken"
								},
								"should-exists": true,
								"should-throw error if no prefix declared when prefixedName": true,
								"should-return IRI when absolute and no prefix match": true,
								"should-return PrefixedName when absolute and prefix match": true,
								"should-return PrefixedName when prefixed": true
							},
							{
								"access": "instance",
								"suiteType": "method",
								"name": "getVariable",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Returns a variable object with the name specified.\nIf a variable with the same name has already been created this will be returned.",
										"arguments": [
											{
												"name": "name",
												"type": "string"
											}
										],
										"returns": {
											"type": "CarbonLDP.QueryDocuments.QueryVariable"
										}
									}
								],
								"returns": {
									"type": "CarbonLDP.QueryDocuments.QueryVariable"
								},
								"should-exists": true,
								"should-return a QueryVariable": true,
								"should-return variable with the existing name": true,
								"should-init with zero index": true,
								"should-increase index": true
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "QueryDocumentBuilder",
			"description": null,
			"path": "carbonldp/QueryDocuments/QueryDocumentBuilder",
			"classes": [
				{
					"suiteType": "class",
					"name": "QueryDocumentBuilder",
					"description": "Class with the helpers and properties for construct a query document",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.QueryDocuments.QueryDocumentBuilder",
					"should-exists": true,
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"should-exists": true,
						"should-set the document property": true
					},
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "all",
								"type": "Readonly<{}>",
								"description": "Property to describe the fetching of the entire resource properties.",
								"optional": null,
								"should-be the same for every builder": true
							},
							{
								"access": "instance",
								"name": "inherit",
								"type": "Readonly<{}>",
								"description": "Property to make a descriptive inheritance os a query property definition.",
								"optional": null,
								"should-be the same for every builder": true
							}
						]
					},
					"methods": {
						"instance": [
							{
								"access": "instance",
								"suiteType": "method",
								"name": "object",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Wraps a pointer or URi to be used correctly in the query filters and values.",
										"arguments": [
											{
												"name": "value",
												"type": "CarbonLDP.Pointer | string",
												"description": "Pointer or URI to be converted in a safe to use in query object."
											}
										],
										"returns": {
											"type": "CarbonLDP.QueryDocuments.QueryObject"
										}
									}
								],
								"returns": {
									"type": "CarbonLDP.QueryDocuments.QueryObject"
								},
								"should-exists": true,
								"should-create a QueryObject with the name provided": true,
								"should-return a QueryObject": true
							},
							{
								"access": "instance",
								"suiteType": "method",
								"name": "properties",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Method that allows to specify the property to be retrieved the the target document",
										"arguments": [
											{
												"name": "propertiesSchema",
												"type": "CarbonLDP.QueryDocuments.QuerySchema",
												"description": "Similar as an schema object, but this specifies the properties to be retrieved."
											}
										],
										"returns": {
											"type": "this"
										}
									}
								],
								"returns": {
									"type": "this"
								},
								"should-exists": true,
								"should-create property with default data": true,
								"should-create property with general inherit data": true,
								"should-create property with extended general inherit data": true,
								"should-create property with typed inherit data": true,
								"should-create property with typed local data": true,
								"should-create property with inline data": true
							},
							{
								"access": "instance",
								"suiteType": "method",
								"name": "property",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Returns the property specified by the name provided.\nIf no name is provided, the property where the query belongs to is returned. In case the the main query, it will be the target document(s).",
										"arguments": [
											{
												"name": "name",
												"type": "string",
												"optional": true,
												"description": "Optional name of the property to look for."
											}
										],
										"returns": {
											"type": "CarbonLDP.QueryDocuments.QueryVariable"
										}
									}
								],
								"returns": {
									"type": "CarbonLDP.QueryDocuments.QueryVariable"
								},
								"should-exists": true,
								"should-call the `getProperty` of the QueryProperty": true,
								"should-be able to look in all the properties tree": true,
								"should-throw error when the property does not exists": true,
								"should-return self property's identifier when no path": true,
								"should-return property's variable with one level path": true,
								"should-return property's variable with three path": true,
								"should-return first property's variable from three path base property": true,
								"should-return second path property's variable from three path base property": true,
								"should-return second full path property's variable from three path base property": true
							},
							{
								"access": "instance",
								"suiteType": "method",
								"name": "value",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Wraps a basic value to be used correctly in the query filters and values.",
										"arguments": [
											{
												"name": "value",
												"type": "string | number | boolean | Date",
												"description": "Value to be converted in a safe to use in query object."
											}
										],
										"returns": {
											"type": "CarbonLDP.QueryDocuments.QueryValue"
										}
									}
								],
								"returns": {
									"type": "CarbonLDP.QueryDocuments.QueryValue"
								},
								"should-exists": true,
								"should-create a QueryValue with the name provided": true,
								"should-return a QueryValue": true
							},
							{
								"access": "instance",
								"suiteType": "method",
								"name": "withType",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Specified a type the target document(s) hasand also uses its schema (if exits) from where to inherit the specification of the properties defined in the query",
										"arguments": [
											{
												"name": "type",
												"type": "string",
												"description": "The type of the target and schema"
											}
										],
										"returns": {
											"type": "this"
										}
									}
								],
								"returns": {
									"type": "this"
								},
								"should-exists": true,
								"should-throw error when properties already used": true,
								"should-add the type to the property": true,
								"should-return to itself": true
							}
						]
					}
				},
				{
					"suiteType": "class",
					"name": "SubQueryDocumentsBuilder",
					"description": "Class with the helpers and properties for construct a query document",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.QueryDocuments.SubQueryDocumentsBuilder",
					"should-exists": true,
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"should-exists": true
					},
					"super-classes": [
						{
							"name": "CarbonLDP.QueryDocuments.QueryDocumentBuilder"
						}
					],
					"methods": {
						"instance": [
							{
								"access": "instance",
								"suiteType": "method",
								"name": "filter",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Adds an filter that affects all the query, not only possible indicated properties values.",
										"arguments": [
											{
												"name": "constraint",
												"type": "string",
												"description": "RAW constrain of the filter to make."
											}
										],
										"returns": {
											"type": "this"
										}
									}
								],
								"returns": {
									"type": "this"
								},
								"should-exists": true,
								"should-add the filter to the base property from base builder": true,
								"should-add the filter to the property in one level builder": true,
								"should-add the filter to the property in level three builder": true
							},
							{
								"access": "instance",
								"suiteType": "method",
								"name": "values",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Adds a filter to the specific values of the property where the query is been applied.\nNOTE: Using this function makes all the properties in the path of the one's applied, will be obligatory to exists.",
										"arguments": [
											{
												"name": "...values",
												"type": "(CarbonLDP.QueryDocuments.QueryValue | CarbonLDP.QueryDocuments.QueryObject)[]",
												"description": "Values the property must have so that the document would be returned."
											}
										],
										"returns": {
											"type": "this"
										}
									}
								],
								"returns": {
									"type": "this"
								},
								"should-exists": true,
								"should-add values to the property": true,
								"should-append values to the property": true,
								"should-throw error if blank node is provided": true
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "QueryDocumentContainer",
			"description": null,
			"path": "carbonldp/QueryDocuments/QueryDocumentContainer",
			"classes": [
				{
					"suiteType": "class",
					"name": "QueryContainer",
					"description": "Class with the shared status and data of the query.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.QueryDocuments.QueryContainer",
					"should-exists": true,
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"signatures": [
							{
								"generics": null,
								"description": "Class that helps the builders of a query document with the shared data.",
								"arguments": [
									{
										"name": "context",
										"type": "CarbonLDP.AbstractContext<any, any, any>",
										"description": "The carbon context from where the query belongs to."
									},
									{
										"name": "propertyData",
										"type": "{ name:string, uri:string }"
									}
								],
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"should-be instantiable": true,
						"should-init property": true
					},
					"methods": {
						"instance": [
							{
								"access": "instance",
								"suiteType": "method",
								"name": "serializeLiteral",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Serialize the value with the literalSerializer specified by the type provided if exists.",
										"arguments": [
											{
												"name": "type",
												"type": "string",
												"description": "The type to the literalSerializer to use."
											},
											{
												"name": "value",
												"type": "any",
												"description": "The value to be serialized"
											}
										],
										"returns": {
											"type": "string"
										}
									}
								],
								"returns": {
									"type": "string"
								},
								"should-exists": true,
								"should-use the literal serializers of carbon": true,
								"should-get the correct literal serializer": true
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "QueryDocumentsBuilder",
			"description": null,
			"path": "carbonldp/QueryDocuments/QueryDocumentsBuilder",
			"classes": [
				{
					"suiteType": "class",
					"name": "QueryDocumentsBuilder",
					"description": "Class with the helpers and properties for construct a query document",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.QueryDocuments.QueryDocumentsBuilder",
					"should-exists": true,
					"super-classes": [
						{
							"name": "CarbonLDP.QueryDocuments.SubQueryDocumentsBuilder"
						}
					],
					"methods": {
						"instance": [
							{
								"access": "instance",
								"suiteType": "method",
								"name": "limit",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Limit the target results to be returned by the number specified.",
										"arguments": [
											{
												"name": "limit",
												"type": "number",
												"description": "The maximum number of targeted results."
											}
										],
										"returns": {
											"type": "this"
										}
									}
								],
								"returns": {
									"type": "this"
								},
								"should-exists": true,
								"should-return itself": true,
								"should-store limit in base property": true
							},
							{
								"access": "instance",
								"suiteType": "method",
								"name": "offset",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Set an offset in the target results to be returned.",
										"arguments": [
											{
												"name": "offset",
												"type": "number",
												"description": "The offset number to be applied to the targeted results."
											}
										],
										"returns": {
											"type": "this"
										}
									}
								],
								"returns": {
									"type": "this"
								},
								"should-exists": true,
								"should-return itself": true,
								"should-store offset in base property": true
							},
							{
								"access": "instance",
								"suiteType": "method",
								"name": "orderBy",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Makes the target documents of the query to return ordered by the property specified.\nIf no order flow is specified, the default behaviour of SPARQL ordering is used (ascending order).",
										"arguments": [
											{
												"name": "property",
												"type": "string",
												"description": "The property name from which the results will be ordered."
											},
											{
												"name": "flow",
												"type": "\"ASC\" | \"DESC\" | \"ascending\" | \"descending\"",
												"description": "The specific order flow of the query."
											}
										],
										"returns": {
											"type": "this"
										}
									}
								],
								"returns": {
									"type": "this"
								},
								"should-exists": true,
								"should-return itself": true,
								"should-add the path to base property": true,
								"should-add flow to base property when ASC": true,
								"should-add flow to base property when ascending": true,
								"should-add flow to base property when DESC": true,
								"should-add flow to base property when descending": true
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "QueryDocumentsOrder",
			"description": null,
			"path": "carbonldp/QueryDocuments/QueryDocumentsOrder",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "QueryDocumentsOrder",
					"description": "Interface that specifies the data of the order wanted fot the result query.",
					"generics": null,
					"path": "CarbonLDP.SPARQLER.QueryDocument.QueryDocumentsOrder",
					"properties": [
						{
							"access": null,
							"name": "flow",
							"type": "\"ASC\" | \"DESC\"",
							"description": "The flow of the order wanted.",
							"optional": true
						},
						{
							"access": null,
							"name": "path",
							"type": "string",
							"description": "The path to the property that specifies the order of the query.",
							"optional": false
						}
					]
				}
			]
		},
		{
			"suiteType": "module",
			"name": "QueryMetadata",
			"description": null,
			"path": "carbonldp/QueryDocuments/QueryMetadata",
			"should-exists": true,
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "QueryMetadata",
					"description": "Interface of the volatile resource created by the SDK in the partial query request.",
					"generics": null,
					"path": "CarbonLDP.QueryDocuments.QueryMetadata",
					"should-exists": true,
					"properties": [
						{
							"access": null,
							"name": "targets",
							"type": "CarbonLDP.QueryDocuments.QueryablePointer[]",
							"description": "The pointers to one of the targeted resources requested in the partial query.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "QueryMetadataFactory",
					"description": "Interface with the factory, decorate and utils methods for `CarbonLDP.QueryDocuments.QueryMetadata` objects.",
					"generics": null,
					"path": "CarbonLDP.QueryDocuments.QueryMetadataFactory",
					"properties": [
						{
							"access": null,
							"name": "SCHEMA",
							"type": "CarbonLDP.ObjectSchema",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "TYPE",
							"type": "string",
							"description": null,
							"optional": false
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "is",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Asserts if the provided object can be defined as a QueryMetadata resource.",
									"arguments": [
										{
											"name": "value",
											"type": "any",
											"description": "The value to check."
										}
									],
									"returns": {
										"type": "value is CarbonLDP.QueryDocuments.QueryMetadata"
									}
								}
							],
							"returns": {
								"type": "value is CarbonLDP.QueryDocuments.QueryMetadata"
							}
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "QueryMetadata",
						"type": "CarbonLDP.QueryDocuments.QueryMetadataFactory",
						"description": null,
						"optional": null
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "QueryObject",
			"description": null,
			"path": "carbonldp/QueryDocuments/QueryObject",
			"classes": [
				{
					"suiteType": "class",
					"name": "QueryObject",
					"description": "Class that represents any resource.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.QueryDocuments.QueryObject",
					"should-exists": true,
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"signatures": [
							{
								"generics": null,
								"description": "Creates an object for the specified object resource.",
								"arguments": [
									{
										"name": "queryContainer",
										"type": "CarbonLDP.QueryDocuments.QueryContainer"
									},
									{
										"name": "id",
										"type": "string",
										"description": "The ID to be converted in a safe to use object in the query statements."
									}
								],
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"should-exists": true,
						"should-create an IRI token": true,
						"should-create an PrefixedName token": true,
						"should-create an BlankNodeToken token": true,
						"should-call the compactIRI": true,
						"should-no call the compactIRI when blank node": true
					},
					"methods": {
						"instance": [
							{
								"access": "instance",
								"suiteType": "method",
								"name": "getToken",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Returns the SPARQL token of the object.",
										"arguments": null,
										"returns": {
											"type": "sparqler/tokens/IRIToken | sparqler/tokens/BlankNodeToken | sparqler/tokens/PrefixedNameToken"
										}
									}
								],
								"returns": {
									"type": "sparqler/tokens/IRIToken | sparqler/tokens/BlankNodeToken | sparqler/tokens/PrefixedNameToken"
								},
								"should-exists": true,
								"should-return the token created": true
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "QueryProperty",
			"description": null,
			"path": "carbonldp/QueryDocuments/QueryProperty",
			"classes": [
				{
					"suiteType": "class",
					"name": "QueryProperty",
					"description": "Class that represents a property in the query",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.QueryDocuments.QueryProperty",
					"should-exists": true,
					"properties": {
						"instance": [
							{
								"access": "instance",
								"name": "name",
								"type": "string",
								"description": "The name of the query property.",
								"optional": null
							},
							{
								"access": "instance",
								"name": "variable",
								"type": "CarbonLDP.QueryDocuments.QueryVariable",
								"description": "The variable that represents the property in the query.",
								"optional": null
							}
						]
					},
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"signatures": [
							{
								"generics": null,
								"description": "Creates a query property for the specified name.\nBy default the property will be optional, i.e. the patterns returned will be wrapped by an optional token.",
								"arguments": [
									{
										"name": "context",
										"type": "CarbonLDP.QueryDocuments.QueryContext",
										"description": "The context of the query where the property is been used."
									},
									{
										"name": "name",
										"type": "string",
										"description": "The name of the property."
									}
								],
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"should-exists": true,
						"should-create full name with no parent": true,
						"should-create full name with parent": true,
						"should-create full name with parent with parent": true,
						"should-create an variable token": true
					},
					"methods": {
						"instance": [
							{
								"access": "instance",
								"suiteType": "method",
								"name": "getSchemaFor",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Returns the specific schema for the property objects that was created query definition.",
										"arguments": null,
										"returns": {
											"type": "CarbonLDP.DigestedObjectSchema"
										}
									}
								],
								"returns": {
									"type": "CarbonLDP.DigestedObjectSchema"
								},
								"should-exists": true,
								"should-return empty schema when no properties": true,
								"should-return schema from sub-properties": true
							},
							{
								"access": "instance",
								"suiteType": "method",
								"name": "getSearchPatterns",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Returns the pattern to be used in the query that specifies the property and its elements\nIf the property is optional the patterns will be wrapped in an optional SPARQL token.",
										"arguments": null,
										"returns": {
											"type": "sparqler/tokens/PatternToken[]"
										}
									}
								],
								"returns": {
									"type": "sparqler/tokens/PatternToken[]"
								},
								"should-exists": true,
								"should-return the patterns as optional": true,
								"should-return the patterns when obligatory": true
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "QueryPropertyType",
			"description": null,
			"path": "carbonldp/QueryDocuments/QueryPropertyType",
			"enums": [
				{
					"suiteType": "enum",
					"name": "QueryPropertyType",
					"description": "Enum fot the type of data expected to return for a property.",
					"path": "CarbonLDP.QueryDocuments.QueryPropertyType",
					"should-exists": true,
					"enumerals": [
						{
							"name": "FULL",
							"description": "The property is expected to point to a fulled resolved document"
						},
						{
							"name": "PARTIAL",
							"description": "The property is expected to point to a partial resource (document/fragment)."
						},
						{
							"name": "ALL",
							"description": "The property is expected to point to a resource with all is properties but without related fragments resolved."
						},
						{
							"name": "EMPTY",
							"description": "The property point to a literal, or its known."
						}
					]
				}
			]
		},
		{
			"suiteType": "module",
			"name": "QuerySchema",
			"description": null,
			"path": "carbonldp/QueryDocuments/QuerySchema",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "QuerySchema",
					"description": "Interface that describes an object that contains the data to to use in a partial query creation.",
					"generics": null,
					"path": "CarbonLDP.QueryDocuments.QuerySchema",
					"should-exists": true,
					"properties": [
						{
							"access": null,
							"name": "[ propertyName:string ]",
							"type": "CarbonLDP.QueryDocuments.QuerySchemaProperty | string",
							"description": "An entry that describes a property to retrieve with the name specified and the assigned property schema.\nIf a string is provided this will be interpreted as the URI of the property.",
							"optional": false
						}
					]
				}
			]
		},
		{
			"suiteType": "module",
			"name": "QuerySchemaProperty",
			"description": null,
			"path": "carbonldp/QueryDocuments/QuerySchemaProperty",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "QuerySchemaProperty",
					"description": "Interface that describes an property to retrieve in a partial query creation.",
					"generics": null,
					"path": "CarbonLDP.QueryDocuments.QuerySchemaProperty",
					"should-exists": true,
					"properties": [
						{
							"access": null,
							"name": "@container",
							"type": "@set | @list | @language",
							"description": "The container type the property will be interpreted to have.\n- `@set`: An unordered array of elements- `@list`: An ordered array of elements.- `@language`: An object map with the language as key and the string content as the value.",
							"optional": true
						},
						{
							"access": null,
							"name": "@id",
							"type": "string",
							"description": "The URI that the actual property has in the platform.",
							"optional": true
						},
						{
							"access": null,
							"name": "@language",
							"type": "string",
							"description": "The only specific language of a string primitive to be retrieved.",
							"optional": true
						},
						{
							"access": null,
							"name": "@type",
							"type": "@id | string",
							"description": "The type of property.\nIf `@id` is used, it will represent a Pointer.\nFor an literal it will generally expect the absolute XSD type URI, but a relative one can also be assigned. e.g. `string` will be interpreted as `http://www.w3.org/2001/XMLSchema#string`.",
							"optional": true
						},
						{
							"access": null,
							"name": "path",
							"type": "( path:sparqler/patterns/PathBuilder ) => sparqler/patterns/Path",
							"description": "Function to build a path to specify an property that may point to data from another document.",
							"optional": true
						},
						{
							"access": null,
							"name": "query",
							"type": "( queryBuilder:CarbonLDP.QueryDocuments.SubQueryBuilder ) => CarbonLDP.QueryDocuments.SubQueryBuilder",
							"description": "Function to build a query to specify sub-properties or when retrieving multiple resources to filter the resources.",
							"optional": true
						}
					]
				}
			]
		},
		{
			"suiteType": "module",
			"name": "QueryValue",
			"description": null,
			"path": "carbonldp/QueryDocuments/QueryValue",
			"classes": [
				{
					"suiteType": "class",
					"name": "QueryValue",
					"description": "Class that represents a property in the query",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.QueryDocuments.QueryValue",
					"should-exists": true,
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"signatures": [
							{
								"generics": null,
								"description": "Creates a value wrapper for the specified value.",
								"arguments": [
									{
										"name": "queryContainer",
										"type": "CarbonLDP.QueryDocuments.QueryContainer"
									},
									{
										"name": "value",
										"type": "string | number | boolean | Date",
										"description": "The value to be converted and wrapped fot the ready to use in the query statements."
									}
								],
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"should-exists": true,
						"should-create a literal token when string": true,
						"should-create a literal token when number": true,
						"should-create a literal token when boolean": true,
						"should-create a literal token using withType when Date": true
					},
					"methods": {
						"instance": [
							{
								"access": "instance",
								"suiteType": "method",
								"name": "getToken",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Returns the SPARQL token of the value.",
										"arguments": null,
										"returns": {
											"type": "sparqler/tokens/LiteralToken"
										}
									}
								],
								"returns": {
									"type": "sparqler/tokens/LiteralToken"
								},
								"should-exists": true,
								"should-return the token created": true
							},
							{
								"access": "instance",
								"suiteType": "method",
								"name": "withLanguage",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Sets an specific language to the query value.",
										"arguments": [
											{
												"name": "language",
												"type": "string",
												"description": "The language to be assigned to the string literal value."
											}
										],
										"returns": {
											"type": "this"
										}
									}
								],
								"returns": {
									"type": "this"
								},
								"should-exists": true,
								"should-call the literal setLanguage": true
							},
							{
								"access": "instance",
								"suiteType": "method",
								"name": "withType",
								"description": null,
								"optional": null,
								"signatures": [
									{
										"generics": null,
										"description": "Sets an specific type to the query value.\nIf the value is not string this will be serialized by the `CarbonLDP.QueryDocuments.QueryContext.serializeLiteral()` method.",
										"arguments": [
											{
												"name": "type",
												"type": "string",
												"description": "The type to be assigned to the literal value."
											}
										],
										"returns": {
											"type": "this"
										}
									}
								],
								"returns": {
									"type": "this"
								},
								"should-exists": true,
								"should-accept relative XSD type": true,
								"should-create a serialize and add the type": true,
								"should-return the object": true,
								"should-throw error when type without serializer": true
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "QueryVariable",
			"description": null,
			"path": "carbonldp/QueryDocuments/QueryVariable",
			"should-exists": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "QueryVariable",
					"description": "Class that represents a property in the query",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.QueryDocuments.QueryVariable",
					"should-exists": true,
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"signatures": [
							{
								"generics": null,
								"description": null,
								"arguments": [
									{
										"name": "name",
										"type": "string",
										"description": "The name of the variable.\nTries to sanitize the unknown characters."
									}
								],
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"should-exists": true,
						"should-extends a VariableToken": true,
						"should-normalize name when prefixedName is provided": true,
						"should-normalize name when sub-property name is provided": true
					},
					"super-classes": [
						{
							"name": "SPARQL/tokens/VariableToken"
						}
					],
					"methods": {
						"instance": []
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "Utils",
			"description": null,
			"path": "carbonldp/QueryDocuments/Utils",
			"should-exists": true,
			"methods": {
				"instance": [
					{
						"access": "instance",
						"suiteType": "method",
						"name": "_areDifferentType",
						"description": null,
						"optional": null,
						"signatures": [
							{
								"generics": null,
								"description": "Returns true if the two elements provided can be classified as different type, simulating basic comparision in the SPARQL language",
								"arguments": [
									{
										"name": "a",
										"type": "any",
										"description": "The first element to check against."
									},
									{
										"name": "b",
										"type": "any",
										"description": "The second element to check against."
									}
								],
								"returns": {
									"type": "boolean"
								}
							}
						],
						"returns": {
							"type": "boolean"
						},
						"should-exists": true,
						"should-return true when number and string": true,
						"should-return true when number and boolean": true,
						"should-return true when number and object": true,
						"should-return true when string and boolean": true,
						"should-return true when string and object": true,
						"should-return true when boolean and object": true,
						"should-return false when both number": true,
						"should-return false when both string": true,
						"should-return false when both boolean": true,
						"should-return false when both object": true,
						"should-return true when object & Date": true,
						"should-return false when both Date": true
					},
					{
						"access": "instance",
						"suiteType": "method",
						"name": "_getPathProperty",
						"description": null,
						"optional": null,
						"signatures": [
							{
								"generics": null,
								"description": "Search and returns the property value indicated by the specified path inside the element provided.",
								"arguments": [
									{
										"name": "element",
										"type": "any",
										"description": "The element where to find the desired property."
									},
									{
										"name": "path",
										"type": "string",
										"description": "The path in the element to the desired property."
									}
								],
								"returns": {
									"type": "any"
								}
							}
						],
						"returns": {
							"type": "any"
						},
						"should-exists": true,
						"should-return element when empty path": true,
						"should-return undefined when undefined element": true,
						"should-return the property specified by one level path": true,
						"should-return undefined when no property by one level path": true,
						"should-return the property specified by two level path": true,
						"should-return undefined when no property by two level path": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "RDF",
			"description": null,
			"path": "carbonldp/RDF",
			"is-defined": true,
			"reexports": [
				{
					"access": "static",
					"name": "RDFDocument",
					"originalLocation": "CarbonLDP.RDF.RDFDocument"
				},
				{
					"access": "static",
					"name": "RDFDocumentFactory",
					"originalLocation": "CarbonLDP.RDF.RDFDocumentFactory"
				},
				{
					"access": "static",
					"name": "RDFList",
					"originalLocation": "CarbonLDP.RDF.RDFList"
				},
				{
					"access": "static",
					"name": "RDFListFactory",
					"originalLocation": "CarbonLDP.RDF.RDFListFactory"
				},
				{
					"access": "static",
					"name": "RDFLiteral",
					"originalLocation": "carbonldp/RDF/RDFLiteral"
				},
				{
					"access": "static",
					"name": "RDFLiteralFactory",
					"originalLocation": "CarbonLDP.RDF.RDFLiteralFactory"
				},
				{
					"access": "static",
					"name": "RDFNode",
					"originalLocation": "CarbonLDP.RDF.RDFNode"
				},
				{
					"access": "static",
					"name": "RDFNodeFactory",
					"originalLocation": "CarbonLDP.RDF.RDFNodeFactory"
				},
				{
					"access": "static",
					"name": "RDFNodePropertyValue",
					"originalLocation": "CarbonLDP.RDF.RDFNodePropertyValue"
				},
				{
					"access": "static",
					"name": "RDFValue",
					"originalLocation": "CarbonLDP.RDF.RDFValue"
				},
				{
					"access": "static",
					"name": "RDFValueFactory",
					"originalLocation": "CarbonLDP.RDF.RDFValueFactory"
				},
				{
					"access": "static",
					"name": "Serializer",
					"originalLocation": "CarbonLDP.RDF.Literal.Serializer"
				},
				{
					"access": "static",
					"name": "Serializers",
					"originalLocation": "carbonldp/RDF/Serializers"
				},
				{
					"access": "static",
					"name": "URI",
					"originalLocation": "CarbonLDP.RDF.URI"
				},
				{
					"access": "static",
					"name": "URIFactory",
					"originalLocation": "CarbonLDP.RDF.URIFactory"
				}
			]
		},
		{
			"suiteType": "module",
			"name": "Document",
			"description": null,
			"path": "carbonldp/RDF/Document",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "RDFDocument",
					"description": "Interface that represents an RDF Document.",
					"generics": null,
					"path": "CarbonLDP.RDF.RDFDocument",
					"properties": [
						{
							"access": null,
							"name": "@graph",
							"type": "CarbonLDP.RDF.RDFNode[]",
							"description": "The graph content of the current document.",
							"optional": false
						},
						{
							"access": null,
							"name": "@id",
							"type": "string",
							"description": "The ID URI of the current document.",
							"optional": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "RDFDocumentFactory",
					"description": "Interface with the factory and utils for `CarbonLDP.RDF.RDFDocument` objects.",
					"generics": null,
					"path": "CarbonLDP.RDF.RDFDocumentFactory",
					"methods": [
						{
							"name": "create",
							"signatures": [
								{
									"access": null,
									"name": "create",
									"generics": null,
									"description": "Returns a `CarbonLDP.RDF.RDFDocument` object created with the parameters provided.",
									"arguments": [
										{
											"name": "resources",
											"type": "CarbonLDP.RDF.RDFNode[]"
										},
										{
											"name": "uri",
											"type": "string",
											"optional": true
										}
									],
									"returns": {
										"type": "CarbonLDP.RDF.RDFDocument"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "CarbonLDP.RDF.RDFDocument"
							}
						},
						{
							"name": "getDocumentResources",
							"signatures": [
								{
									"access": null,
									"name": "getDocumentResources",
									"generics": null,
									"description": "Returns all the resources that are the document resource from an RDF document or an array of RDF nodes.",
									"arguments": [
										{
											"name": "document",
											"type": "CarbonLDP.RDF.RDFDocument | CarbonLDP.RDF.RDFNode[]"
										}
									],
									"returns": {
										"type": "CarbonLDP.RDF.RDFNode[]"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "CarbonLDP.RDF.RDFNode[]"
							}
						},
						{
							"name": "getDocuments",
							"signatures": [
								{
									"access": null,
									"name": "getDocuments",
									"generics": null,
									"description": "Returns the objects that represents an RDF Document of an array of RDF like objects.",
									"arguments": [
										{
											"name": "objects",
											"type": "object | object[]"
										}
									],
									"returns": {
										"type": "CarbonLDP.RDF.RDFDocument[]"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "CarbonLDP.RDF.RDFDocument[]"
							}
						},
						{
							"name": "getFreeNodes",
							"signatures": [
								{
									"access": null,
									"name": "getFreeNodes",
									"generics": null,
									"description": "Returns an array with the nodes that are neither a Document nor are contained inside a one.",
									"arguments": [
										{
											"name": "objects",
											"type": "objects[]",
											"description": "The object to evaluate for its free nodes."
										}
									],
									"returns": {
										"type": "CarbonLDP.RDF.RDFNode[]"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "CarbonLDP.RDF.RDFNode[]"
							}
						},
						{
							"name": "getNamedFragmentResources",
							"signatures": [
								{
									"access": null,
									"name": "getNamedFragmentResources",
									"generics": null,
									"description": "Returns all the resources that refers to named fragments from a RDF document or an array of RDF nodes. If documentResource is provided, it will return the fragments of the specified document resource.",
									"arguments": [
										{
											"name": "document",
											"type": "CarbonLDP.RDF.RDFDocument | CarbonLDP.RDF.RDFNode[]"
										},
										{
											"name": "documentResource",
											"type": "string | CarbonLDP.RDF.RDFNode",
											"optional": true
										}
									],
									"returns": {
										"type": "CarbonLDP.RDF.RDFNode[]"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "CarbonLDP.RDF.RDFNode[]"
							}
						},
						{
							"name": "getResources",
							"signatures": [
								{
									"access": null,
									"name": "getResources",
									"generics": null,
									"description": "Returns all the resources that not are RDF Documents from the array of RDF like objects provided.",
									"arguments": [
										{
											"name": "objects",
											"type": "object | object[]"
										}
									],
									"returns": {
										"type": "CarbonLDP.RDF.RDFNode"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "CarbonLDP.RDF.RDFNode"
							}
						},
						{
							"name": "is",
							"signatures": [
								{
									"access": null,
									"name": "is",
									"generics": null,
									"description": "Returns true if the object is a `CarbonLDP.RDF.RDFDocument` object.",
									"arguments": [
										{
											"name": "value",
											"type": "any"
										}
									],
									"returns": {
										"type": "value is CarbonLDP.RDF.RDFDocument"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "value is CarbonLDP.RDF.RDFDocument"
							}
						},
						{
							"getBNodeResources": {
								"name": "getBNodeResources",
								"signatures": [
									{
										"access": "static",
										"name": "getBNodeResources",
										"generics": null,
										"description": "Returns all the resources that refers to the blank nodes from an RDF document or an array of RDF nodes.",
										"arguments": [
											{
												"name": "document",
												"type": "CarbonLDP.RDF.RDFDocument | CarbonLDP.RDF.RDFNode[]"
											}
										],
										"returns": {
											"type": "CarbonLDP.RDF.RDFNode[]"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "CarbonLDP.RDF.RDFNode[]"
								}
							}
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "RDFDocument",
						"type": "CarbonLDP.RDF.RDFDocumentFactory",
						"description": null,
						"optional": null,
						"RDFDocument.getBNodeResources": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "List",
			"description": null,
			"path": "carbonldp/RDF/List",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "RDFList",
					"description": "Interface that represents an RDF List.",
					"generics": null,
					"path": "CarbonLDP.RDF.RDFList",
					"properties": [
						{
							"access": null,
							"name": "@list",
							"type": "CarbonLDP.RDF.RDFValue[]",
							"description": "Array if the elements in the list.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "RDFListFactory",
					"description": "Interface with the factory and utils for `CarbonLDP.RDF.RDFList` objects.",
					"generics": null,
					"path": "CarbonLDP.RDF.RDFListFactory",
					"methods": [
						{
							"name": "is",
							"signatures": [
								{
									"access": null,
									"name": "is",
									"generics": null,
									"description": "Returns true if the object provided is considered a `CarbonLDP.RDF.RDFList` object.",
									"arguments": [
										{
											"name": "value",
											"type": "any"
										}
									],
									"returns": {
										"type": "value is CarbonLDP.RDF.RDFList"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "value is CarbonLDP.RDF.RDFList"
							}
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "RDFList",
						"type": "CarbonLDP.RDF.RDFListFactory",
						"description": null,
						"optional": null,
						"RDFList.is": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "Literal",
			"description": null,
			"path": "carbonldp/RDF/Literal",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "RDFLiteral",
					"description": "Interface that represents an RDF Literal Value.",
					"generics": null,
					"path": "CarbonLDP.RDF.RDFLiteral",
					"properties": [
						{
							"access": null,
							"name": "@type",
							"type": "string",
							"description": "The URI of the XSD type of the literal.",
							"optional": true
						},
						{
							"access": null,
							"name": "@value",
							"type": "string",
							"description": "The actual string value if the literal.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "RDFLiteralFactory",
					"description": "Interface with the factory and utils for `CarbonLDP.RDF.RDFLiteral` objects.",
					"generics": null,
					"path": "CarbonLDP.RDF.RDFLiteralFactory",
					"methods": [
						{
							"name": "from",
							"signatures": [
								{
									"access": null,
									"name": "from",
									"generics": null,
									"description": "Convert the value provided to a `CarbonLDP.RDF.RDFLiteral` object.",
									"arguments": [],
									"returns": {
										"type": "void"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "void"
							}
						},
						{
							"name": "hasType",
							"signatures": [
								{
									"access": null,
									"name": "hasType",
									"generics": null,
									"description": "Returns true if the Literal has the type specified.",
									"arguments": [
										{
											"name": "value",
											"type": "CarbonLDP.RDF.RDFLiteral"
										},
										{
											"name": "type",
											"type": "string"
										}
									],
									"returns": {
										"type": "boolean"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "boolean"
							}
						},
						{
							"name": "is",
							"signatures": [
								{
									"access": null,
									"name": "is",
									"generics": null,
									"description": "Returns true if the object provided is considered a `CarbonLDP.RDF.RDFLiteral` object.",
									"arguments": [
										{
											"name": "value",
											"type": "any"
										}
									],
									"returns": {
										"type": "value is CarbonLDP.RDF.RDFLiteral"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "value is CarbonLDP.RDF.RDFLiteral"
							}
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "parse",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Parse the Literal object to the respective JavaScript type.\nReturns `null` if the Literal can't be parsed.",
									"arguments": [
										{
											"name": "literal",
											"type": "CarbonLDP.RDF.RDFLiteral"
										}
									],
									"returns": {
										"type": "any"
									}
								},
								{
									"generics": null,
									"description": "Parse the value string into the respective type specified. If no type provided, the same string will be returned.",
									"arguments": [
										{
											"name": "value",
											"type": "string"
										},
										{
											"name": "type",
											"type": "string",
											"optional": true
										}
									],
									"returns": {
										"type": "any"
									}
								}
							],
							"returns": {
								"type": "any"
							}
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "RDFLiteral",
						"type": "CarbonLDP.RDF.RDFLiteralFactory",
						"description": null,
						"optional": null,
						"RDFLiteral.hasType": true
					}
				]
			},
			"reexports": [
				{
					"access": "static",
					"name": "Serializer",
					"originalLocation": "CarbonLDP.RDF.Literal.Serializer"
				},
				{
					"access": "static",
					"name": "Serializers",
					"originalLocation": "carbonldp/RDF/Literal/Serializers"
				}
			]
		},
		{
			"suiteType": "module",
			"name": "Serializer",
			"description": null,
			"path": "carbonldp/RDF/Literal/Serializer",
			"is-defined": true,
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "Serializer",
					"description": "Interface that serializer classes must implement.",
					"generics": null,
					"path": "CarbonLDP.RDF.Literal.Serializer",
					"super-classes": [
						{
							"name": "CarbonLDP.TransientResource"
						}
					],
					"methods": [
						{
							"name": "serialize",
							"signatures": [
								{
									"access": null,
									"name": "serialize",
									"generics": null,
									"description": "Method that serialize the provided element into a string value.",
									"arguments": [
										{
											"name": "value",
											"type": "any",
											"description": "Value to be serialized."
										}
									],
									"returns": {
										"type": "string",
										"description": "The string value of the provided element. This value is the one to be saved in the server, when a document contains a property with its type related to this serializer; view the `CarbonLDP.JSONLD.Converter.literalSerializers` property."
									},
									"optional": false
								}
							],
							"returns": {
								"type": "string",
								"description": "The string value of the provided element. This value is the one to be saved in the server, when a document contains a property with its type related to this serializer; view the `CarbonLDP.JSONLD.Converter.literalSerializers` property."
							}
						}
					]
				}
			]
		},
		{
			"suiteType": "module",
			"name": "Serializers",
			"description": null,
			"path": "carbonldp/RDF/Literal/Serializers",
			"is-defined": true,
			"reexports": [
				{
					"access": "static",
					"name": "booleanSerializer",
					"originalLocation": "carbonldp/RDF/Literal/Serializers/XSD#booleanSerializer"
				},
				{
					"access": "static",
					"name": "BooleanSerializer",
					"originalLocation": "CarbonLDP.RDF.Literal.Serializers.BooleanSerializer"
				},
				{
					"access": "static",
					"name": "dateSerializer",
					"originalLocation": "carbonldp/RDF/Literal/Serializers/XSD#dateSerializer"
				},
				{
					"access": "static",
					"name": "DateSerializer",
					"originalLocation": "CarbonLDP.RDF.Literal.Serializers.DateSerializer"
				},
				{
					"access": "static",
					"name": "dateTimeSerializer",
					"originalLocation": "carbonldp/RDF/Literal/Serializers/XSD#dateTimeSerializer"
				},
				{
					"access": "static",
					"name": "DateTimeSerializer",
					"originalLocation": "CarbonLDP.RDF.Literal.Serializers.DateTimeSerializer"
				},
				{
					"access": "static",
					"name": "floatSerializer",
					"originalLocation": "carbonldp/RDF/Literal/Serializers/XSD#floatSerializer"
				},
				{
					"access": "static",
					"name": "FloatSerializer",
					"originalLocation": "CarbonLDP.RDF.Literal.Serializers.FloatSerializer"
				},
				{
					"access": "static",
					"name": "integerSerializer",
					"originalLocation": "carbonldp/RDF/Literal/Serializers/XSD#integerSerializer"
				},
				{
					"access": "static",
					"name": "IntegerSerializer",
					"originalLocation": "CarbonLDP.RDF.Literal.Serializers.IntegerSerializer"
				},
				{
					"access": "static",
					"name": "longSerializer",
					"originalLocation": "carbonldp/RDF/Literal/Serializers/XSD#longSerializer"
				},
				{
					"access": "static",
					"name": "LongSerializer",
					"originalLocation": "CarbonLDP.RDF.Literal.Serializers.LongSerializer"
				},
				{
					"access": "static",
					"name": "stringSerializer",
					"originalLocation": "carbonldp/RDF/Literal/Serializers/XSD#stringSerializer"
				},
				{
					"access": "static",
					"name": "StringSerializer",
					"originalLocation": "CarbonLDP.RDF.Literal.Serializers.StringSerializer"
				},
				{
					"access": "static",
					"name": "timeSerializer",
					"originalLocation": "carbonldp/RDF/Literal/Serializers/XSD#timeSerializer"
				},
				{
					"access": "static",
					"name": "TimeSerializer",
					"originalLocation": "CarbonLDP.RDF.Literal.Serializers.TimeSerializer"
				},
				{
					"access": "static",
					"name": "unsignedIntegerSerializer",
					"originalLocation": "carbonldp/RDF/Literal/Serializers/XSD#unsignedIntegerSerializer"
				},
				{
					"access": "static",
					"name": "UnsignedIntegerSerializer",
					"originalLocation": "CarbonLDP.RDF.Literal.Serializers.UnsignedIntegerSerializer"
				},
				{
					"access": "static",
					"name": "unsignedLongSerializer",
					"originalLocation": "carbonldp/RDF/Literal/Serializers/XSD#unsignedLongSerializer"
				},
				{
					"access": "static",
					"name": "UnsignedLongSerializer",
					"originalLocation": "CarbonLDP.RDF.Literal.Serializers.UnsignedLongSerializer"
				}
			]
		},
		{
			"suiteType": "module",
			"name": "XSD",
			"description": null,
			"path": "carbonldp/RDF/Literal/Serializers/XSD",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "BooleanSerializer",
					"description": "Class that can serialize any variable to a string literal representation its truth value.\nInstead of instantiating this class, use the already exposed instance `carbonldp/RDF/Literal/Serializes/XSD#booleanSerializer`.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.RDF.Literal.Serializers.BooleanSerializer",
					"is-defined": true,
					"methods": {
						"instance": [
							{
								"name": "serialize",
								"signatures": [
									{
										"access": "instance",
										"name": "serialize",
										"generics": null,
										"description": "Returns a string representing the truth value from the variable provided.",
										"arguments": [
											{
												"name": "value",
												"type": "any"
											}
										],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					}
				},
				{
					"suiteType": "class",
					"name": "DateSerializer",
					"description": "Class that can serialize a Date object into a string literal with format `YYYY-MM-DD`.\nInstead of instantiating this class, use the already exposed instance `carbonldp/RDF/Literal/Serializes/XSD#dateSerializer`.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.RDF.Literal.Serializers.DateSerializer",
					"is-defined": true,
					"methods": {
						"instance": [
							{
								"name": "serialize",
								"signatures": [
									{
										"access": "instance",
										"name": "serialize",
										"generics": null,
										"description": "Returns the string with format `YYYY-MM-DD`, of the Date object",
										"arguments": [
											{
												"name": "value",
												"type": "any"
											}
										],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					}
				},
				{
					"suiteType": "class",
					"name": "DateTimeSerializer",
					"description": "Class that can serialize a Date object into a string ISO literal.\nInstead of instantiating this class, use the already exposed instance `carbonldp/RDF/Literal/Serializes/XSD#dateTimeSerializer`.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.RDF.Literal.Serializers.DateTimeSerializer",
					"is-defined": true,
					"methods": {
						"instance": [
							{
								"name": "serialize",
								"signatures": [
									{
										"access": "instance",
										"name": "serialize",
										"generics": null,
										"description": "Returns the simplified extended ISO format (ISO 8601) of the Date object.",
										"arguments": [
											{
												"name": "value",
												"type": "any"
											}
										],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					}
				},
				{
					"suiteType": "class",
					"name": "FloatSerializer",
					"description": "Class that can serialize any Number value to a string literal of float.\nInstead of instantiating this class, use the already exposed instance `carbonldp/RDF/Literal/Serializes/XSD#floatSerializer`.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.RDF.Literal.Serializers.FloatSerializer",
					"is-defined": true,
					"methods": {
						"instance": [
							{
								"name": "serialize",
								"signatures": [
									{
										"access": "instance",
										"name": "serialize",
										"generics": null,
										"description": "Returns a string representing a float from the Number provided.",
										"arguments": [
											{
												"name": "value",
												"type": "any"
											}
										],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					}
				},
				{
					"suiteType": "class",
					"name": "IntegerSerializer",
					"description": "Class that can serialize any Number value to a string literal of an integer.\nInstead of instantiating this class, use the already exposed instance `carbonldp/RDF/Literal/Serializes/XSD#integerSerializer`.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.RDF.Literal.Serializers.IntegerSerializer",
					"is-defined": true,
					"should-overflow if larger than 2^32 - 1": true,
					"methods": {
						"instance": [
							{
								"name": "serialize",
								"signatures": [
									{
										"access": "instance",
										"name": "serialize",
										"generics": null,
										"description": "Returns a string representing a integer from the Number provided.",
										"arguments": [
											{
												"name": "value",
												"type": "any"
											}
										],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					}
				},
				{
					"suiteType": "class",
					"name": "StringSerializer",
					"description": "Class that can serialize any variable to a string literal representation its truth value.\nInstead of instantiating this class, use the already exposed instance `carbonldp/RDF/Literal/Serializes/XSD#stringSerializer`.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.RDF.Literal.Serializers.StringSerializer",
					"is-defined": true,
					"methods": {
						"instance": [
							{
								"name": "serialize",
								"signatures": [
									{
										"access": "instance",
										"name": "serialize",
										"generics": null,
										"description": "Returns a string representing the truth value from the variable provided.",
										"arguments": [
											{
												"name": "value",
												"type": "any"
											}
										],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					}
				},
				{
					"suiteType": "class",
					"name": "TimeSerializer",
					"description": "Class that can serialize a Date object into a literal string with format `HH:mm:ss.sssZ`.\nInstead of instantiating this class, use the already exposed instance `carbonldp/RDF/Literal/Serializes/XSD#timeSerializer`.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.RDF.Literal.Serializers.TimeSerializer",
					"is-defined": true,
					"methods": {
						"instance": [
							{
								"name": "serialize",
								"signatures": [
									{
										"access": "instance",
										"name": "serialize",
										"generics": null,
										"description": "Returns a string representing the Date object with format `HH:mm:ss.sssZ`.",
										"arguments": [
											{
												"name": "value",
												"type": "any"
											}
										],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					}
				},
				{
					"suiteType": "class",
					"name": "UnsignedIntegerSerializer",
					"description": "Class that can serialize any Number value to a string literal of an unsigned integer.\nInstead of instantiating this class, use the already exposed instance `carbonldp/RDF/Literal/Serializes/XSD#unsignedIntegerSerializer`.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.RDF.Literal.Serializers.UnsignedIntegerSerializer",
					"is-defined": true,
					"methods": {
						"instance": [
							{
								"name": "serialize",
								"signatures": [
									{
										"access": "instance",
										"name": "serialize",
										"generics": null,
										"description": "Returns a string representing an unsigned integer from the Number provided.",
										"arguments": [
											{
												"name": "value",
												"type": "any"
											}
										],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					}
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "booleanSerializer",
						"type": "CarbonLDP.RDF.Literal.Serializers.BooleanSerializer",
						"description": "The already exposed instance of the class `CarbonLDP.RDF.Literal.Serializers.BooleanSerializer`",
						"optional": null
					},
					{
						"access": "static",
						"name": "dateSerializer",
						"type": "CarbonLDP.RDF.Literal.Serializers.DateSerializer",
						"description": "The already exposed instance of the class `CarbonLDP.RDF.Literal.Serializers.DateSerializer`.",
						"optional": null
					},
					{
						"access": "static",
						"name": "dateTimeSerializer",
						"type": "CarbonLDP.RDF.Literal.Serializers.DateTimeSerializer",
						"description": "The already exposed instance of the class `CarbonLDP.RDF.Literal.Serializers.DateTimeSerializer`.",
						"optional": null
					},
					{
						"access": "static",
						"name": "floatSerializer",
						"type": "CarbonLDP.RDF.Literal.Serializers.FloatSerializer",
						"description": "The already exposed instance of the class `CarbonLDP.RDF.Literal.Serializers.FloatSerializer`.",
						"optional": null
					},
					{
						"access": "static",
						"name": "integerSerializer",
						"type": "CarbonLDP.RDF.Literal.Serializers.IntegerSerializer",
						"description": "The already exposed instance of the class `CarbonLDP.RDF.Literal.Serializers.IntegerSerializer`.",
						"optional": null
					},
					{
						"access": "static",
						"name": "stringSerializer",
						"type": "CarbonLDP.RDF.Literal.Serializers.StringSerializer",
						"description": "The already exposed instance of the class `CarbonLDP.RDF.Literal.Serializers.StringSerializer`.",
						"optional": null
					},
					{
						"access": "static",
						"name": "timeSerializer",
						"type": "CarbonLDP.RDF.Literal.Serializers.TimeSerializer",
						"description": "The already exposed instance of the class `CarbonLDP.RDF.Literal.Serializers.TimeSerializer`.",
						"optional": null
					},
					{
						"access": "static",
						"name": "unsignedIntegerSerializer",
						"type": "CarbonLDP.RDF.Literal.Serializers.UnsignedIntegerSerializer",
						"description": "The already exposed instance of the class `CarbonLDP.RDF.Literal.Serializers.UnsignedIntegerSerializer`.",
						"optional": null
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "Node",
			"description": null,
			"path": "carbonldp/RDF/Node",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "RDFNode",
					"description": "Interface that represents an RDF Node.",
					"generics": null,
					"path": "CarbonLDP.RDF.RDFNode",
					"properties": [
						{
							"access": null,
							"name": "@id",
							"type": "string",
							"description": "The ID URI of the current node.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "RDFNodeFactory",
					"description": "Interface with the factory and utils for `CarbonLDP.RDF.RDFNode` objects.",
					"generics": null,
					"path": "CarbonLDP.RDF.RDFNodeFactory",
					"methods": [
						{
							"name": "areEqual",
							"signatures": [
								{
									"access": null,
									"name": "areEqual",
									"generics": null,
									"description": "Returns true if the objects represent the same resource.",
									"arguments": [
										{
											"name": "node1",
											"type": "CarbonLDP.RDF.RDFNode"
										},
										{
											"name": "node2",
											"type": "CarbonLDP.RDF.RDFNode"
										}
									],
									"returns": {
										"type": "boolean"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "boolean"
							}
						},
						{
							"name": "create",
							"signatures": [
								{
									"access": null,
									"name": "create",
									"generics": null,
									"description": "Creates a `CarbonLDP.RDF.RDFNode` object with the URI provided.",
									"arguments": [
										{
											"name": "uri",
											"type": "string"
										}
									],
									"returns": {
										"type": "CarbonLDP.RDF.RDFNode"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "CarbonLDP.RDF.RDFNode"
							}
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "getID",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns the `@id` of the node.",
									"arguments": [
										{
											"name": "node",
											"type": "CarbonLDP.RDF.RDFNode"
										}
									],
									"returns": {
										"type": "string"
									}
								}
							],
							"returns": {
								"type": "string"
							},
							"should-exists": true,
							"should-return the @id of the node": true
						},
						{
							"name": "getList",
							"signatures": [
								{
									"access": null,
									"name": "getList",
									"generics": null,
									"description": "Returns the List object from the provided property of an expanded JSON-LD object.\nReturns `undefined` if no List object is found.",
									"arguments": [
										{
											"name": "expandedValues",
											"type": "string | (string | CarbonLDP.RDF.RDFNode | CarbonLDP.RDF.RDFList | CarbonLDP.RDF.RDFValue | CarbonLDP.RDF.RDFLiteral)[]"
										}
									],
									"returns": {
										"type": "CarbonLDP.RDF.RDFList"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "CarbonLDP.RDF.RDFList"
							}
						},
						{
							"name": "getPropertyLanguageMap",
							"signatures": [
								{
									"access": null,
									"name": "getPropertyLanguageMap",
									"generics": null,
									"description": "Returns an object associating the language with the parsed string literal.\nReturns an empty object if it is not a property with language.",
									"arguments": [
										{
											"name": "expandedValues",
											"type": "string | (string | CarbonLDP.RDF.RDFNode | CarbonLDP.RDF.RDFList | CarbonLDP.RDF.RDFValue | CarbonLDP.RDF.RDFLiteral)[]"
										},
										{
											"name": "pointerLibrary",
											"type": "CarbonLDP.PointerLibrary"
										}
									],
									"returns": {
										"type": "object"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "object"
							}
						},
						{
							"name": "getPropertyLiterals",
							"signatures": [
								{
									"access": null,
									"name": "getPropertyLiterals",
									"generics": null,
									"description": "Returns the property array with the parsed Literals.\nReturns `undefined` if it cannot be parsed.",
									"arguments": [
										{
											"name": "expandedValues",
											"type": "string | (string | CarbonLDP.RDF.RDFNode | CarbonLDP.RDF.RDFList | CarbonLDP.RDF.RDFValue | CarbonLDP.RDF.RDFLiteral)[]"
										},
										{
											"name": "propertyURI",
											"type": "string"
										},
										{
											"name": "literalType",
											"type": "string"
										}
									],
									"returns": {
										"type": "any[]"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "any[]"
							}
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "getRelativeID",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns the relative `@id` of the node when it is a fragment node.",
									"arguments": [
										{
											"name": "node",
											"type": "CarbonLDP.RDF.RDFNode"
										}
									],
									"returns": {
										"type": "string"
									}
								}
							],
							"returns": {
								"type": "string"
							},
							"should-exists": true,
							"should-return the fragment when resource is a named fragment": true,
							"should-return bNode label when resource is bNode": true
						},
						{
							"name": "getTypes",
							"signatures": [
								{
									"access": null,
									"name": "getTypes",
									"generics": null,
									"description": "Returns an array with the types of the Node provided.",
									"arguments": [
										{
											"name": "object",
											"type": "CarbonLDP.RDF.RDFNode",
											"description": "The Node to evaluate."
										}
									],
									"returns": {
										"type": "string[]"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "string[]"
							}
						},
						{
							"name": "hasType",
							"signatures": [
								{
									"access": null,
									"name": "hasType",
									"generics": null,
									"description": "Returns true if the Node provided has the specified type.",
									"arguments": [
										{
											"name": "object",
											"type": "CarbonLDP.RDF.RDFNode",
											"description": "The Node to evaluate."
										},
										{
											"name": "type",
											"type": "string",
											"description": "The type to look for it existence."
										}
									],
									"returns": {
										"type": "boolean"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "boolean"
							}
						},
						{
							"name": "is",
							"signatures": [
								{
									"access": null,
									"name": "is",
									"generics": null,
									"description": "Returns true if the object provided is considered a `CarbonLDP.RDF.RDFNode` object.",
									"arguments": [
										{
											"name": "value",
											"type": "any"
										}
									],
									"returns": {
										"type": "value is CarbonLDP.RDF.RDFNode"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "value is CarbonLDP.RDF.RDFNode"
							}
						},
						{
							"name": "isFragment",
							"signatures": [
								{
									"access": null,
									"name": "isFragment",
									"generics": null,
									"description": "Returns true if the node has a fragment `@id`, i.e. a named fragment or a blank node label.",
									"arguments": [
										{
											"name": "node",
											"type": "CarbonLDP.RDF.RDFNode"
										}
									],
									"returns": {
										"type": "boolean"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "boolean"
							}
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "RDFNode",
						"type": "CarbonLDP.RDF.RDFNodeFactory",
						"description": null,
						"optional": null,
						"RDFNode.getPropertyLanguageMap": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "URI",
			"description": null,
			"path": "carbonldp/RDF/URI",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "URIFactory",
					"description": "Interface with the utils for URI strings.",
					"generics": null,
					"path": "CarbonLDP.RDF.URIFactory",
					"methods": [
						{
							"name": "generateBNodeID",
							"signatures": [
								{
									"access": null,
									"name": "generateBNodeID",
									"generics": null,
									"description": "Returns an ID for a BlankNode using an universally unique identifier (UUID).",
									"arguments": [],
									"returns": {
										"type": "void"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "void"
							}
						},
						{
							"name": "getDocumentURI",
							"signatures": [
								{
									"access": null,
									"name": "getDocumentURI",
									"generics": null,
									"description": "Returns the URI that just reference to the Document of the URI provided.",
									"arguments": [
										{
											"name": "uri",
											"type": "string"
										}
									],
									"returns": {
										"type": "void"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "void"
							}
						},
						{
							"name": "getFragment",
							"signatures": [
								{
									"access": null,
									"name": "getFragment",
									"generics": null,
									"description": "Returns the name of the fragment in the URI provided. If no fragment exists in the URI, null will be returned.",
									"arguments": [
										{
											"name": "uri",
											"type": "string"
										}
									],
									"returns": {
										"type": "string"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "string"
							}
						},
						{
							"name": "getParameters",
							"signatures": [
								{
									"access": null,
									"name": "getParameters",
									"generics": null,
									"description": "Returns the query parameters of the URI provided in form of a Map.",
									"arguments": [
										{
											"name": "uri",
											"type": "string"
										}
									],
									"returns": {
										"type": "Map<string, string | string[]>"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "Map<string, string | string[]>"
							}
						},
						{
							"name": "getRelativeURI",
							"signatures": [
								{
									"access": null,
									"name": "getRelativeURI",
									"generics": null,
									"description": "Returns the relative URI from a base URI provided.",
									"arguments": [
										{
											"name": "absoluteURI",
											"type": "string"
										},
										{
											"name": "base",
											"type": "string"
										}
									],
									"returns": {
										"type": "string"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "string"
							}
						},
						{
							"name": "getSlug",
							"signatures": [
								{
									"access": null,
									"name": "getSlug",
									"generics": null,
									"description": "Returns the slug of the URI. It takes an ending slash as part as the slug.",
									"arguments": [
										{
											"name": "uri",
											"type": "string"
										}
									],
									"returns": {
										"type": "string"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "string"
							}
						},
						{
							"name": "hasFragment",
							"signatures": [
								{
									"access": null,
									"name": "hasFragment",
									"generics": null,
									"description": "Returns true if the URI provided contains a fragment.",
									"arguments": [
										{
											"name": "uri",
											"type": "string"
										}
									],
									"returns": {
										"type": "boolean"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "boolean"
							}
						},
						{
							"name": "hasProtocol",
							"signatures": [
								{
									"access": null,
									"name": "hasProtocol",
									"generics": null,
									"description": "Returns true if the URI provided has a protocol.",
									"arguments": [
										{
											"name": "uri",
											"type": "string"
										}
									],
									"returns": {
										"type": "boolean"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "boolean"
							}
						},
						{
							"name": "hasQuery",
							"signatures": [
								{
									"access": null,
									"name": "hasQuery",
									"generics": null,
									"description": "Returns true if the URI provided contains query parameters.",
									"arguments": [
										{
											"name": "uri",
											"type": "string"
										}
									],
									"returns": {
										"type": "boolean"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "boolean"
							}
						},
						{
							"name": "isAbsolute",
							"signatures": [
								{
									"access": null,
									"name": "isAbsolute",
									"generics": null,
									"description": "Returns true if the URI provided is absolute.",
									"arguments": [
										{
											"name": "uri",
											"type": "string"
										}
									],
									"returns": {
										"type": "boolean"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "boolean"
							}
						},
						{
							"name": "isBNodeID",
							"signatures": [
								{
									"access": null,
									"name": "isBNodeID",
									"generics": null,
									"description": "Returns true if the URI provided reference to a BlankNode.",
									"arguments": [
										{
											"name": "uri",
											"type": "string"
										}
									],
									"returns": {
										"type": "boolean"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "boolean"
							}
						},
						{
							"name": "isBaseOf",
							"signatures": [
								{
									"access": null,
									"name": "isBaseOf",
									"generics": null,
									"description": "Return true if the first URI is parent of the second URI provided.",
									"arguments": [
										{
											"name": "baseURI",
											"type": "string"
										},
										{
											"name": "uri",
											"type": "string"
										}
									],
									"returns": {
										"type": "boolean"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "boolean"
							}
						},
						{
							"name": "isFragmentOf",
							"signatures": [
								{
									"access": null,
									"name": "isFragmentOf",
									"generics": null,
									"description": "Returns true if the first URI is a fragment od the second URI provided.",
									"arguments": [
										{
											"name": "fragmentURI",
											"type": "string"
										},
										{
											"name": "uri",
											"type": "string"
										}
									],
									"returns": {
										"type": "boolean"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "boolean"
							}
						},
						{
							"name": "isPrefixed",
							"signatures": [
								{
									"access": null,
									"name": "isPrefixed",
									"generics": null,
									"description": "Returns true if the URI provided has a prefix.",
									"arguments": [
										{
											"name": "uri",
											"type": "string"
										}
									],
									"returns": {
										"type": "boolean"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "boolean"
							}
						},
						{
							"name": "isRelative",
							"signatures": [
								{
									"access": null,
									"name": "isRelative",
									"generics": null,
									"description": "Returns true if the URI provided is relative.",
									"arguments": [
										{
											"name": "uri",
											"type": "string"
										}
									],
									"returns": {
										"type": "boolean"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "boolean"
							}
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "prefix",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Replace a base of a URI with the prefix provided. If the prefix can not be resolved, the URI provided will be returned.",
									"arguments": [
										{
											"name": "uri",
											"type": "string"
										},
										{
											"name": "prefix",
											"type": "string"
										},
										{
											"name": "prefixURI",
											"type": "string"
										}
									],
									"returns": {
										"type": "string"
									}
								},
								{
									"generics": null,
									"description": "Replace the base of a URI with a prefix in accordance with the ObjectSchema provided. If the prefix can not be resolved, the URI provided will be returned.",
									"arguments": [
										{
											"name": "uri",
											"type": "string"
										},
										{
											"name": "objectSchema",
											"type": "CarbonLDP.DigestedObjectSchema"
										}
									],
									"returns": {
										"type": "string"
									}
								}
							],
							"returns": {
								"type": "string"
							}
						},
						{
							"name": "removeProtocol",
							"signatures": [
								{
									"access": null,
									"name": "removeProtocol",
									"generics": null,
									"description": "Removes the protocol of the URI provided",
									"arguments": [
										{
											"name": "uri",
											"type": "string"
										}
									],
									"returns": {
										"type": "string"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "string"
							}
						},
						{
							"name": "resolve",
							"signatures": [
								{
									"access": null,
									"name": "resolve",
									"generics": null,
									"description": "Return a URI formed from a parent URI and a relative child URI.",
									"arguments": [
										{
											"name": "parentURI",
											"type": "string"
										},
										{
											"name": "childURI",
											"type": "string"
										}
									],
									"returns": {
										"type": "string"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "string"
							}
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "URI",
						"type": "CarbonLDP.RDF.URIFactory",
						"description": "Constant that implements the `CarbonLDP.RDF.URIFactory` interface.",
						"optional": null
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "Value",
			"description": null,
			"path": "carbonldp/RDF/Value",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "RDFValue",
					"description": "Interface that represents an RDF Value.",
					"generics": null,
					"path": "CarbonLDP.RDF.RDFValue",
					"properties": [
						{
							"access": null,
							"name": "@id",
							"type": "string",
							"description": "The ID URI of the current value.",
							"optional": true
						},
						{
							"access": null,
							"name": "@type",
							"type": "string",
							"description": "The URI if the XSD type of the possible value.",
							"optional": true
						},
						{
							"access": null,
							"name": "@value",
							"type": "string",
							"description": "The possible string value if the current object value.",
							"optional": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "RDFValueFactory",
					"description": "Interface with the utils for `CarbonLDP.RDF.RDFValue` objects.",
					"generics": null,
					"path": "CarbonLDP.RDF.RDFValueFactory",
					"methods": [
						{
							"name": "parse",
							"signatures": [
								{
									"access": null,
									"name": "parse",
									"generics": null,
									"description": "Returns the parsed object from an Literal, Node, or List.\nReturns null if it cannot be parsed",
									"arguments": [
										{
											"name": "pointerLibrary",
											"type": "CarbonLDP.PointerLibrary"
										},
										{
											"name": "value",
											"type": "CarbonLDP.RDF.RDFLiteral | CarbonLDP.RDF.RDFNode | CarbonLDP.RDF.RDFList | CarbonLDP.RDF.RDFValue | string"
										}
									],
									"returns": {
										"type": "any"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "any"
							}
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "RDFValue",
						"type": "CarbonLDP.RDF.RDFValueFactory",
						"description": "Class with useful functions to manage `CarbonLDP.RDF.RDFValue` objects.",
						"optional": null,
						"RDFValue.parse": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "Registry",
			"description": null,
			"path": "carbonldp/Registry",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "$Registry",
					"description": "Interface with the base methods of a general registry pointer based, that stores and manages an specific type of resources.",
					"generics": [
						"M extends RegisteredPointer = RegisteredPointer"
					],
					"path": "CarbonLDP.$Registry",
					"properties": [
						{
							"access": null,
							"name": "$__modelDecorator",
							"type": "CarbonLDP.Model.ModelDecorator<M, CarbonLDP.Registry.BaseRegisteredPointer>",
							"description": "Decorator object to personalize the pointers of the registry.",
							"optional": false
						},
						{
							"access": null,
							"name": "$__resourcesMap",
							"type": "Map<string, M>",
							"description": "Map where the resources of the registry are stored.",
							"optional": false
						},
						{
							"access": null,
							"name": "$registry",
							"type": "CarbonLDP.Registry<any> | CarbonLDP.$Registry<any> | undefined",
							"description": "Possible parent registry of the registry.",
							"optional": false
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "$_addPointer",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Adds the provided object as a resource of the registry.",
									"arguments": [
										{
											"name": "pointer",
											"type": "T & Pointer",
											"description": "The base object to be added as a resource of the registry."
										}
									],
									"returns": {
										"type": "T & M"
									}
								}
							],
							"returns": {
								"type": "T & M"
							},
							"should-throw error if no ID in the base object": true,
							"should-throw error when ID out of scope": true,
							"should-throw error when ID already taken": true,
							"should-return the same object reference": true,
							"should-return the resource type": true,
							"should-assign resource.$registry as itself": true,
							"should-store resource in the _resourcesMap": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$_getLocalID",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns the local identifier for the ID provided.\nThrows and error if the ID cannot be converted into a local one.",
									"arguments": [
										{
											"name": "id",
											"type": "string",
											"description": "The ID to be converted."
										}
									],
									"returns": {
										"type": "string"
									}
								}
							],
							"returns": {
								"type": "string"
							},
							"should-exists": true,
							"should-return same id": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$getPointer",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns the resource identified by the provided ID from the first existence in the registry hierarchy.\nIf non exists, a pointer is created in the first register where the ID in scope of.\n\nA error is thrown when no pointer could be returned or created in any registry.",
									"arguments": [
										{
											"name": "id",
											"type": "string",
											"description": "ID to return its pointer representation."
										}
									],
									"returns": {
										"type": "CarbonLDP.RegisteredPointer"
									}
								},
								{
									"generics": null,
									"description": "Returns the resource identified by the provided ID from the current registry.\nIf non exists, a resource is created from the current registry model.\n\nA error is thrown when no pointer could be returned or created.",
									"arguments": [
										{
											"name": "id",
											"type": "string",
											"description": "ID to check its existence."
										},
										{
											"name": "local",
											"type": "true",
											"description": "Flag to ignore hierarchy and only return pointers from the current registry."
										}
									],
									"returns": {
										"type": "M"
									}
								}
							],
							"returns": {
								"type": "CarbonLDP.RegisteredPointer"
							},
							"should-exists": true,
							"should-throw error when not in scope & has no parent": true,
							"should-return new resource when in scope but not exists & has no parent": true,
							"should-return local resource when in scope and exists & has no parent": true,
							"should-throw error when not in scope & has no parent & local flag is set": true,
							"should-return new resource when in scope but not exists & has no parent & local flag is set ": true,
							"should-return local resource when in scope and exists & has no parent & local flag is set ": true,
							"should-throw error when not in scope & not in parent": true,
							"should-return parent resource when not in scope & in parent": true,
							"should-throw error when not in scope & not in parent & local flag is set": true,
							"should-throw error when not in scope & in parent & local flag is set": true,
							"should-return new local resource when in scope and not exists & not in parent & local flag is set": true,
							"should-return parent resource when in scope and not exists & in parent": true,
							"should-return local resource when in scope and exists & in parent": true,
							"should-return new resource in scope and not exists & not in parent & local flag is set": true,
							"should-return new resource when in scope and not exists & in parent & local flag is set": true,
							"should-return local resource when in scope and exists & in parent & local flag is set": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$getPointers",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns all the pointers stored the registry hierarchy.",
									"arguments": null,
									"returns": {
										"type": "CarbonLDP.RegisteredPointer[]"
									}
								},
								{
									"generics": null,
									"description": "Returns all the pointers stored in the current registry.",
									"arguments": [
										{
											"name": "local",
											"type": "true",
											"description": "Flag to ignore hierarchy and only return pointers from the current registry."
										}
									],
									"returns": {
										"type": "M[]"
									}
								}
							],
							"returns": {
								"type": "CarbonLDP.RegisteredPointer[]"
							},
							"should-exists": true,
							"should-return local resources when locals & has no parent": true,
							"should-return empty resources no locals & has no parent & local flag is set ": true,
							"should-return local resources when locals & has no parent & local flag is set ": true,
							"should-return parent resources when no locals & in parent": true,
							"should-return empty when no locals & not in parent & local flag is set": true,
							"should-return empty when no locals & in parent & local flag is set": true,
							"should-return local and parent resources when locals & in parent": true,
							"should-return empty resources when no locals & not in parent & local flag is set": true,
							"should-return empty resources when no locals & in parent & local flag is set": true,
							"should-return local resources when locals & in parent & local flag is set": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$hasPointer",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns true if a resource identified by the provided ID exists in the registry hierarchy.",
									"arguments": [
										{
											"name": "id",
											"type": "string",
											"description": "ID to check its existence."
										}
									],
									"returns": {
										"type": "boolean"
									}
								},
								{
									"generics": null,
									"description": "Returns true if a resource identified by the provided ID exists in the registry hierarchy.",
									"arguments": [
										{
											"name": "id",
											"type": "string",
											"description": "ID to check its existence."
										},
										{
											"name": "local",
											"type": "true",
											"description": "Flag to ignore hierarchy and only check in the current registry."
										}
									],
									"returns": {
										"type": "boolean"
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"should-exists": true,
							"should-return false when not in scope & has no parent": true,
							"should-return false when in scope but not exists & has no parent": true,
							"should-return true when in scope and exists & has no parent": true,
							"should-return false when not in scope & has no parent & local flag is set": true,
							"should-return false when in scope but not exists & has no parent & local flag is set ": true,
							"should-return true when in scope and exists & has no parent & local flag is set ": true,
							"should-return false when not in scope & not in parent": true,
							"should-return true when not in scope & in parent": true,
							"should-return false when not in scope & not in parent & local flag is set": true,
							"should-return false when not in scope & in parent & local flag is set": true,
							"should-return false when in scope and not exists & not in parent & local flag is set": true,
							"should-return true when in scope and not exists & in parent": true,
							"should-return true when in scope and exists & in parent": true,
							"should-return false when in scope and not exists & in parent & local flag is set": true,
							"should-return true when in scope and exists & in parent & local flag is set": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$inScope",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Return if the provided ID string or pointer can be stored in any of the registry hierarchy.",
									"arguments": [
										{
											"name": "idOrPointer",
											"type": "string | CarbonLDP.Pointer",
											"description": "The id or pointer to be checked."
										}
									],
									"returns": {
										"type": "boolean"
									}
								},
								{
									"generics": null,
									"description": "Return if the provided ID string or pointer can be only stored in the current registry.",
									"arguments": [
										{
											"name": "idOrPointer",
											"type": "string | CarbonLDP.Pointer",
											"description": "The id or pointer to be checked."
										},
										{
											"name": "local",
											"type": "true",
											"description": "Flag to ignore hierarchy and only check in the current registry."
										}
									],
									"returns": {
										"type": "boolean"
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"should-exists": true,
							"should-call _getLocalID when string": true,
							"should-call _getLocalID when RegisteredPointer": true,
							"should-return true if string can be converted to local": true,
							"should-return true if RegisteredPointer.$id can be converted to local": true,
							"should-return true if string can be converted by parent registry": true,
							"should-return true if RegisteredPointer.$id can be converted by parent registry": true,
							"should-return false if string can't be converted & has no parent": true,
							"should-return false if RegisteredPointer.$id can't be converted & has no parent": true,
							"should-return false if string can't be converted by parent": true,
							"should-return false if RegisteredPointer.$id can't be converted by parent": true,
							"should-return false if string can be converted by parent registry but local flag set": true,
							"should-return false if RegisteredPointer.$id can be converted by parent registry but local flag set": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$removePointer",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Removes the resource identified by the provided string ID or RegisteredPointer.$id, from the first occurrence in the registry hierarchy.\nReturns true if the resource could be removed, false otherwise.",
									"arguments": [
										{
											"name": "idOrPointer",
											"type": "string | CarbonLDP.Pointer",
											"description": "ID or Pointer to be removed."
										}
									],
									"returns": {
										"type": "boolean"
									}
								},
								{
									"generics": null,
									"description": "Removes the resource identified by the provided string ID or RegisteredPointer.$id, from the current registry.\nReturns true if the resource could be removed, false otherwise.",
									"arguments": [
										{
											"name": "idOrPointer",
											"type": "string | CarbonLDP.Pointer",
											"description": "ID or Pointer to be removed."
										},
										{
											"name": "local",
											"type": "true",
											"description": "Flag to ignore hierarchy and only remove from the current registry."
										}
									],
									"returns": {
										"type": "boolean"
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"should-exists": true,
							"should-return false when not in scope & has no parent": true,
							"should-return false when in scope but not exists & has no parent": true,
							"should-return true when in scope and exists & has no parent": true,
							"should-return false when not in scope & has no parent & local flag is set": true,
							"should-return false when in scope but not exists & has no parent & local flag is set ": true,
							"should-return true when in scope and exists & has no parent & local flag is set ": true,
							"should-return false when not in scope & not in parent": true,
							"should-return true when not in scope & in parent": true,
							"should-return false when not in scope & not in parent & local flag is set": true,
							"should-return false when not in scope & in parent & local flag is set": true,
							"should-return false when in scope and not exists & not in parent & local flag is set": true,
							"should-return true when in scope and not exists & in parent": true,
							"should-return true when in scope and exists & in parent": true,
							"should-return false when in scope and not exists & in parent & local flag is set": true,
							"should-return true when in scope and exists & in parent & local flag is set": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "Registry",
					"description": "Interface with the base methods of a general registry, that stores and manages an specific type of resources.",
					"generics": [
						"M extends RegisteredPointer = RegisteredPointer"
					],
					"path": "CarbonLDP.Registry",
					"properties": [
						{
							"access": null,
							"name": "__modelDecorator",
							"type": "CarbonLDP.Model.ModelDecorator<M, CarbonLDP.Registry.BaseRegisteredPointer>",
							"description": "Decorator object to personalize the pointers of the registry.",
							"optional": false
						},
						{
							"access": null,
							"name": "__resourcesMap",
							"type": "Map<string, M>",
							"description": "Map where the resources of the registry are stored.",
							"optional": false
						},
						{
							"access": null,
							"name": "registry",
							"type": "CarbonLDP.Registry<any> | CarbonLDP.$Registry<any> | undefined",
							"description": "Possible parent registry of the registry.",
							"optional": false
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "_addPointer",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": "Adds the provided object as a resource of the registry.",
									"arguments": [
										{
											"name": "pointer",
											"type": "T & Pointer",
											"description": "The base object to be added as a resource of the registry."
										}
									],
									"returns": {
										"type": "T & M"
									}
								}
							],
							"returns": {
								"type": "T & M"
							},
							"should-throw error if no ID in the base object": true,
							"should-throw error when ID out of scope": true,
							"should-throw error when ID already taken": true,
							"should-return the same object reference": true,
							"should-return the resource type": true,
							"should-assign resource.$registry as itself": true,
							"should-store resource in the _resourcesMap": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "_getLocalID",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns the local identifier for the ID provided.\nThrows and error if the ID cannot be converted into a local one.",
									"arguments": [
										{
											"name": "id",
											"type": "string",
											"description": "The ID to be converted."
										}
									],
									"returns": {
										"type": "string"
									}
								}
							],
							"returns": {
								"type": "string"
							},
							"should-exists": true,
							"should-return same id": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "getPointer",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns the resource identified by the provided ID from the first existence in the registry hierarchy.\nIf non exists, a pointer is created in the first register where the ID in scope of.\n\nA error is thrown when no pointer could be returned or created in any registry.",
									"arguments": [
										{
											"name": "id",
											"type": "string",
											"description": "ID to return its pointer representation."
										}
									],
									"returns": {
										"type": "CarbonLDP.RegisteredPointer"
									}
								},
								{
									"generics": null,
									"description": "Returns the resource identified by the provided ID from the current registry.\nIf non exists, a resource is created from the current registry model.\n\nA error is thrown when no pointer could be returned or created.",
									"arguments": [
										{
											"name": "id",
											"type": "string",
											"description": "ID to check its existence."
										},
										{
											"name": "local",
											"type": "true",
											"description": "Flag to ignore hierarchy and only return pointers from the current registry."
										}
									],
									"returns": {
										"type": "M"
									}
								}
							],
							"returns": {
								"type": "CarbonLDP.RegisteredPointer"
							},
							"should-exists": true,
							"should-throw error when not in scope & has no parent": true,
							"should-return new resource when in scope but not exists & has no parent": true,
							"should-return local resource when in scope and exists & has no parent": true,
							"should-throw error when not in scope & has no parent & local flag is set": true,
							"should-return new resource when in scope but not exists & has no parent & local flag is set ": true,
							"should-return local resource when in scope and exists & has no parent & local flag is set ": true,
							"should-throw error when not in scope & not in parent": true,
							"should-return parent resource when not in scope & in parent": true,
							"should-throw error when not in scope & not in parent & local flag is set": true,
							"should-throw error when not in scope & in parent & local flag is set": true,
							"should-return new local resource when in scope and not exists & not in parent & local flag is set": true,
							"should-return parent resource when in scope and not exists & in parent": true,
							"should-return local resource when in scope and exists & in parent": true,
							"should-return new resource in scope and not exists & not in parent & local flag is set": true,
							"should-return new resource when in scope and not exists & in parent & local flag is set": true,
							"should-return local resource when in scope and exists & in parent & local flag is set": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "getPointers",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns all the pointers stored the registry hierarchy.",
									"arguments": null,
									"returns": {
										"type": "CarbonLDP.RegisteredPointer[]"
									}
								},
								{
									"generics": null,
									"description": "Returns all the pointers stored in the current registry.",
									"arguments": [
										{
											"name": "local",
											"type": "true",
											"description": "Flag to ignore hierarchy and only return pointers from the current registry."
										}
									],
									"returns": {
										"type": "M[]"
									}
								}
							],
							"returns": {
								"type": "CarbonLDP.RegisteredPointer[]"
							},
							"should-exists": true,
							"should-return local resources when locals & has no parent": true,
							"should-return empty resources no locals & has no parent & local flag is set ": true,
							"should-return local resources when locals & has no parent & local flag is set ": true,
							"should-return parent resources when no locals & in parent": true,
							"should-return empty when no locals & not in parent & local flag is set": true,
							"should-return empty when no locals & in parent & local flag is set": true,
							"should-return local and parent resources when locals & in parent": true,
							"should-return empty resources when no locals & not in parent & local flag is set": true,
							"should-return empty resources when no locals & in parent & local flag is set": true,
							"should-return local resources when locals & in parent & local flag is set": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "hasPointer",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns true if a resource identified by the provided ID exists in the registry hierarchy.",
									"arguments": [
										{
											"name": "id",
											"type": "string",
											"description": "ID to check its existence."
										}
									],
									"returns": {
										"type": "boolean"
									}
								},
								{
									"generics": null,
									"description": "Returns true if a resource identified by the provided ID exists in the registry hierarchy.",
									"arguments": [
										{
											"name": "id",
											"type": "string",
											"description": "ID to check its existence."
										},
										{
											"name": "local",
											"type": "true",
											"description": "Flag to ignore hierarchy and only check in the current registry."
										}
									],
									"returns": {
										"type": "boolean"
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"should-exists": true,
							"should-return false when not in scope & has no parent": true,
							"should-return false when in scope but not exists & has no parent": true,
							"should-return true when in scope and exists & has no parent": true,
							"should-return false when not in scope & has no parent & local flag is set": true,
							"should-return false when in scope but not exists & has no parent & local flag is set ": true,
							"should-return true when in scope and exists & has no parent & local flag is set ": true,
							"should-return false when not in scope & not in parent": true,
							"should-return true when not in scope & in parent": true,
							"should-return false when not in scope & not in parent & local flag is set": true,
							"should-return false when not in scope & in parent & local flag is set": true,
							"should-return false when in scope and not exists & not in parent & local flag is set": true,
							"should-return true when in scope and not exists & in parent": true,
							"should-return true when in scope and exists & in parent": true,
							"should-return false when in scope and not exists & in parent & local flag is set": true,
							"should-return true when in scope and exists & in parent & local flag is set": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "inScope",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Return if the provided ID string or pointer can be stored in any of the registry hierarchy.",
									"arguments": [
										{
											"name": "idOrPointer",
											"type": "string | CarbonLDP.Pointer",
											"description": "The id or pointer to be checked."
										}
									],
									"returns": {
										"type": "boolean"
									}
								},
								{
									"generics": null,
									"description": "Return if the provided ID string or pointer can be only stored in the current registry.",
									"arguments": [
										{
											"name": "idOrPointer",
											"type": "string | CarbonLDP.Pointer",
											"description": "The id or pointer to be checked."
										},
										{
											"name": "local",
											"type": "true",
											"description": "Flag to ignore hierarchy and only check in the current registry."
										}
									],
									"returns": {
										"type": "boolean"
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"should-exists": true,
							"should-call _getLocalID when string": true,
							"should-call _getLocalID when RegisteredPointer": true,
							"should-return true if string can be converted to local": true,
							"should-return true if RegisteredPointer.$id can be converted to local": true,
							"should-return true if string can be converted by parent registry": true,
							"should-return true if RegisteredPointer.$id can be converted by parent registry": true,
							"should-return false if string can't be converted & has no parent": true,
							"should-return false if RegisteredPointer.$id can't be converted & has no parent": true,
							"should-return false if string can't be converted by parent": true,
							"should-return false if RegisteredPointer.$id can't be converted by parent": true,
							"should-return false if string can be converted by parent registry but local flag set": true,
							"should-return false if RegisteredPointer.$id can be converted by parent registry but local flag set": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "removePointer",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Removes the resource identified by the provided string ID or RegisteredPointer.$id, from the first occurrence in the registry hierarchy.\nReturns true if the resource could be removed, false otherwise.",
									"arguments": [
										{
											"name": "idOrPointer",
											"type": "string | CarbonLDP.Pointer",
											"description": "ID or Pointer to be removed."
										}
									],
									"returns": {
										"type": "boolean"
									}
								},
								{
									"generics": null,
									"description": "Removes the resource identified by the provided string ID or RegisteredPointer.$id, from the current registry.\nReturns true if the resource could be removed, false otherwise.",
									"arguments": [
										{
											"name": "idOrPointer",
											"type": "string | CarbonLDP.Pointer",
											"description": "ID or Pointer to be removed."
										},
										{
											"name": "local",
											"type": "true",
											"description": "Flag to ignore hierarchy and only remove from the current registry."
										}
									],
									"returns": {
										"type": "boolean"
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"should-exists": true,
							"should-return false when not in scope & has no parent": true,
							"should-return false when in scope but not exists & has no parent": true,
							"should-return true when in scope and exists & has no parent": true,
							"should-return false when not in scope & has no parent & local flag is set": true,
							"should-return false when in scope but not exists & has no parent & local flag is set ": true,
							"should-return true when in scope and exists & has no parent & local flag is set ": true,
							"should-return false when not in scope & not in parent": true,
							"should-return true when not in scope & in parent": true,
							"should-return false when not in scope & not in parent & local flag is set": true,
							"should-return false when not in scope & in parent & local flag is set": true,
							"should-return false when in scope and not exists & not in parent & local flag is set": true,
							"should-return true when in scope and not exists & in parent": true,
							"should-return true when in scope and exists & in parent": true,
							"should-return false when in scope and not exists & in parent & local flag is set": true,
							"should-return true when in scope and exists & in parent & local flag is set": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "RegistryFactory",
					"description": "Interface with the factory and utils for `CarbonLDP.Registry` objects.",
					"generics": null,
					"path": "CarbonLDP.RegistryFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.Registry>"
						},
						{
							"name": "CarbonLDP.Model.BiModelDecorator<CarbonLDP.Registry<any>, CarbonLDP.$Registry<any>, CarbonLDP.BaseRegistry, CarbonLDP.$BaseRegistry>"
						}
					]
				}
			],
			"properties": {
				"instance": [
					{
						"access": "instance",
						"name": "Registry",
						"type": "CarbonLDP.RegistryFactory",
						"description": null,
						"optional": null,
						"should-exists": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "Repository",
			"description": null,
			"path": "carbonldp/Repository",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "$Repository",
					"description": "Interface that describes a generic repository with pointer base.",
					"generics": [
						"MODEL extends ResolvablePointer = ResolvablePointer"
					],
					"path": "CarbonLDP.$Repository",
					"super-classes": [
						{
							"name": "CarbonLDP.Pointer"
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "$delete",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "uri",
											"type": "string"
										},
										{
											"name": "...params",
											"type": "any[]"
										}
									],
									"returns": {
										"type": "Promise<MODEL>"
									}
								}
							],
							"returns": {
								"type": "Promise<MODEL>"
							},
							"should-exists": true,
							"should-throw not implemented error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$exists",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "uri",
											"type": "string"
										},
										{
											"name": "...params",
											"type": "any[]"
										}
									],
									"returns": {
										"type": "Promise<MODEL>"
									}
								}
							],
							"returns": {
								"type": "Promise<MODEL>"
							},
							"should-exists": true,
							"should-throw not implemented error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$get",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "uri",
											"type": "string"
										},
										{
											"name": "...params",
											"type": "any[]"
										}
									],
									"returns": {
										"type": "Promise<MODEL>"
									}
								}
							],
							"returns": {
								"type": "Promise<MODEL>"
							},
							"should-exists": true,
							"should-throw not implemented error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$refresh",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "resource",
											"type": "MODEL"
										},
										{
											"name": "...params",
											"type": "any[]"
										}
									],
									"returns": {
										"type": "Promise<MODEL>"
									}
								}
							],
							"returns": {
								"type": "Promise<MODEL>"
							},
							"should-exists": true,
							"should-throw not implemented error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$resolve",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "resource",
											"type": "MODEL"
										},
										{
											"name": "...params",
											"type": "any[]"
										}
									],
									"returns": {
										"type": "Promise<MODEL>"
									}
								}
							],
							"returns": {
								"type": "Promise<MODEL>"
							},
							"should-exists": true,
							"should-throw not implemented error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$save",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "resource",
											"type": "MODEL"
										},
										{
											"name": "...params",
											"type": "any[]"
										}
									],
									"returns": {
										"type": "Promise<MODEL>"
									}
								}
							],
							"returns": {
								"type": "Promise<MODEL>"
							},
							"should-exists": true,
							"should-throw not implemented error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$saveAndRefresh",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "resource",
											"type": "MODEL"
										},
										{
											"name": "...params",
											"type": "any[]"
										}
									],
									"returns": {
										"type": "Promise<MODEL>"
									}
								}
							],
							"returns": {
								"type": "Promise<MODEL>"
							},
							"should-exists": true,
							"should-throw not implemented error": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "Repository",
					"description": "Interface that describes a generic repository.",
					"generics": [
						"MODEL extends ResolvablePointer = ResolvablePointer"
					],
					"path": "CarbonLDP.Repository",
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "delete",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "uri",
											"type": "string"
										},
										{
											"name": "...params",
											"type": "any[]"
										}
									],
									"returns": {
										"type": "Promise<MODEL>"
									}
								}
							],
							"returns": {
								"type": "Promise<MODEL>"
							},
							"should-exists": true,
							"should-throw not implemented error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "exists",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "uri",
											"type": "string"
										},
										{
											"name": "...params",
											"type": "any[]"
										}
									],
									"returns": {
										"type": "Promise<MODEL>"
									}
								}
							],
							"returns": {
								"type": "Promise<MODEL>"
							},
							"should-exists": true,
							"should-throw not implemented error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "get",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "uri",
											"type": "string"
										},
										{
											"name": "...params",
											"type": "any[]"
										}
									],
									"returns": {
										"type": "Promise<MODEL>"
									}
								}
							],
							"returns": {
								"type": "Promise<MODEL>"
							},
							"should-exists": true,
							"should-throw not implemented error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "refresh",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "resource",
											"type": "MODEL"
										},
										{
											"name": "...params",
											"type": "any[]"
										}
									],
									"returns": {
										"type": "Promise<MODEL>"
									}
								}
							],
							"returns": {
								"type": "Promise<MODEL>"
							},
							"should-exists": true,
							"should-throw not implemented error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "resolve",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "resource",
											"type": "MODEL"
										},
										{
											"name": "...params",
											"type": "any[]"
										}
									],
									"returns": {
										"type": "Promise<MODEL>"
									}
								}
							],
							"returns": {
								"type": "Promise<MODEL>"
							},
							"should-exists": true,
							"should-throw not implemented error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "save",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "resource",
											"type": "MODEL"
										},
										{
											"name": "...params",
											"type": "any[]"
										}
									],
									"returns": {
										"type": "Promise<MODEL>"
									}
								}
							],
							"returns": {
								"type": "Promise<MODEL>"
							},
							"should-exists": true,
							"should-throw not implemented error": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "saveAndRefresh",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": [
										{
											"name": "resource",
											"type": "MODEL"
										},
										{
											"name": "...params",
											"type": "any[]"
										}
									],
									"returns": {
										"type": "Promise<MODEL>"
									}
								}
							],
							"returns": {
								"type": "Promise<MODEL>"
							},
							"should-exists": true,
							"should-throw not implemented error": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "RepositoryFactory",
					"description": "Interface with the factory and utils for `CarbonLDP.Repository` objects.",
					"generics": null,
					"path": "CarbonLDP.RepositoryFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.Repository>"
						},
						{
							"name": "CarbonLDP.Model.BiModelDecorator<CarbonLDP.Repository, CarbonLDP.BaseRepository, CarbonLDP.$Repository, CarbonLDP.$BaseRepository>"
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "ResolvablePointer",
					"description": "Interface that describes the basic methods of any resolvable pointer.",
					"generics": null,
					"path": "CarbonLDP.ResolvablePointer",
					"properties": [
						{
							"access": null,
							"name": "$_resolved",
							"type": "boolean | undefined",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "$_snapshot",
							"type": "object",
							"description": "The shallow copy of the pointer, which is used to track its changes.",
							"optional": false
						},
						{
							"access": null,
							"name": "$eTag",
							"type": "string | undefined",
							"description": "The identifier that describes the state of the last data retrieved for the current pointer.",
							"optional": false
						},
						{
							"access": null,
							"name": "$repository",
							"type": "CarbonLDP.Repository",
							"description": "The repository associated which the pointer can be resolved with.",
							"optional": false
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "$_syncSnapshot",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Updates the snapshot with the data of the resource.",
									"arguments": null,
									"returns": {
										"type": "void"
									}
								}
							],
							"returns": {
								"type": "void"
							},
							"should-exists": true,
							"should-not alter previous snapshot": true,
							"should-not assign itself as snapshot": true,
							"should-sync new property": true,
							"should-sync types (non-enumerable)": true,
							"should-not sync ID": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$delete",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$exists",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$get",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$isDirty",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Returns true if the resource presents differences from its snapshot.",
									"arguments": null,
									"returns": {
										"type": "boolean"
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"should-exists": true,
							"should-return false if synced": true,
							"should-return true if new property": true,
							"should-return true if deleted property": true,
							"should-return true if null property": true,
							"should-return true if altered property": true,
							"should-return true if new type": true,
							"should-return true if deleted type": true,
							"should-return false even if ID changed": true,
							"should-return false if related resource content altered": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$isResolved",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": null,
									"returns": {
										"type": "boolean"
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"should-exists": true,
							"should-return false when _resolved undefined": true,
							"should-return false when _resolved false": true,
							"should-return true when _resolved true": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$refresh",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$resolve",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$revert",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": "Revert the changes made to the resource into the state of the snapshot.",
									"arguments": null,
									"returns": {
										"type": "void"
									}
								}
							],
							"returns": {
								"type": "void"
							},
							"should-exists": true,
							"should-revert change in property": true,
							"should-revert add deleted property": true,
							"should-revert add null-ed property": true,
							"should-revert remove new property": true,
							"should-remove new type": true,
							"should-add deleted type": true,
							"should-not revert changed ID": true,
							"should-revert related resource content altered": true
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$save",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"suiteType": "method",
							"name": "$saveAndRefresh",
							"description": null,
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "ResolvablePointerFactory",
					"description": "Interface with the factory, decorate and utils of a `CarbonLDP.ResolvablePointer` object.",
					"generics": null,
					"path": "CarbonLDP.ResolvablePointerFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.ResolvablePointer, CarbonLDP.Pointer>"
						},
						{
							"name": "CarbonLDP.Model.ModelDecorator<CarbonLDP.ResolvablePointer, CarbonLDP.BaseResolvablePointer>"
						},
						{
							"name": "CarbonLDP.Model.ModelTypeGuard<CarbonLDP.ResolvablePointer>"
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "Repository",
						"type": "CarbonLDP.RepositoryFactory",
						"description": null,
						"optional": null,
						"should-exists": true
					},
					{
						"access": "static",
						"name": "ResolvablePointer",
						"type": "CarbonLDP.ResolvablePointerFactory",
						"description": null,
						"optional": null,
						"should-exists": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "Resource",
			"description": null,
			"path": "carbonldp/Resource",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "BaseResource",
					"description": "Interface with the base properties for a `CarbonLDP.Resource`.",
					"generics": null,
					"path": "CarbonLDP.BaseResource",
					"super-classes": [
						{
							"name": "CarbonLDP.BasePointer"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "types",
							"type": "string[]",
							"description": "Array of `types` the resource has.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "Resource",
					"description": "Interface that represents a persisted blank node of a persisted document.",
					"generics": null,
					"path": "CarbonLDP.Resource",
					"super-classes": [
						{
							"name": "CarbonLDP.RegisteredPointer"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "$registry",
							"type": "CarbonLDP.Registry<CarbonLDP.RegisteredPointer> | undefined",
							"description": "Associated registry where the current resource may be stored.",
							"optional": false
						},
						{
							"access": null,
							"name": "$slug",
							"type": "string",
							"description": "Slug if the URI of the resource. Depending of the URI type would be returned:\n1. For blank nodes the same $id of the resource would be returned\n2. For named fragments, the content after the `#` symbol would be returned\n3. For documents, it's the last part URI e.g. `https://example.com/resource-1/` => `resource-1`",
							"optional": false
						},
						{
							"access": null,
							"name": "types",
							"type": "string",
							"description": "An array with the types of the resource.",
							"optional": false
						}
					],
					"methods": [
						{
							"name": "$addType",
							"signatures": [
								{
									"access": null,
									"name": "$addType",
									"generics": null,
									"description": "Adds a type to the current resource.",
									"arguments": [
										{
											"name": "type",
											"type": "string",
											"description": "The type to be added."
										}
									],
									"returns": {
										"type": "void"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "void"
							}
						},
						{
							"name": "$hasType",
							"signatures": [
								{
									"access": null,
									"name": "$hasType",
									"generics": null,
									"description": "Returns true if the current resource contains the type specified.",
									"arguments": [
										{
											"name": "type",
											"type": "string",
											"description": "The type to look for."
										}
									],
									"returns": {
										"type": "void"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "void"
							}
						},
						{
							"name": "$removeType",
							"signatures": [
								{
									"access": null,
									"name": "$removeType",
									"generics": null,
									"description": "Remove the type specified from the current resource.",
									"arguments": [
										{
											"name": "type",
											"type": "string",
											"description": "The type to be removed."
										}
									],
									"returns": {
										"type": "void"
									},
									"optional": false
								}
							],
							"returns": {
								"type": "void"
							}
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "ResourceFactory",
					"description": "Interface with the factory, decorate and utils methods of a `CarbonLDP.Resource` object.",
					"generics": null,
					"path": "CarbonLDP.ResourceFactory",
					"super-classes": [
						{
							"name": "CarbonLDP.Model.ModelPrototype<CarbonLDP.Resource, CarbonLDP.Pointer>"
						},
						{
							"name": "CarbonLDP.Model.ModelDecorator<CarbonLDP.Resource, CarbonLDP.BaseResource>"
						},
						{
							"name": "CarbonLDP.Model.ModelTypeGuard<CarbonLDP.Resource>"
						},
						{
							"name": "CarbonLDP.Model.ModelFactoryOptional<CarbonLDP.Resource, CarbonLDP.BaseResource>"
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "Resource",
						"type": "CarbonLDP.ResourceFactory",
						"description": "Constant that implements the `CarbonLDP.ResourceFactory` interface.",
						"optional": null
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "SHACL",
			"description": null,
			"path": "carbonldp/SHACL",
			"should-exists": true,
			"reexports": [
				{
					"access": "static",
					"name": "ValidationReport",
					"originalLocation": "carbonldp/SHACL/ValidationReport"
				},
				{
					"access": "static",
					"name": "ValidationReportFactory",
					"originalLocation": "carbonldp/SHACL/ValidationReportFactory"
				},
				{
					"access": "static",
					"name": "ValidationResult",
					"originalLocation": "carbonldp/SHACL/ValidationResult"
				},
				{
					"access": "static",
					"name": "ValidationResultFactory",
					"originalLocation": "carbonldp/SHACL/ValidationResultFactory"
				}
			]
		},
		{
			"suiteType": "module",
			"name": "ValidationReport",
			"description": null,
			"path": "carbonldp/SHACL/ValidationReport",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "ValidationReport",
					"description": "Interface that represents the results of a validation process.",
					"generics": null,
					"path": "CarbonLDP.SHACL.ValidationReport",
					"should-exists": true,
					"properties": [
						{
							"access": null,
							"name": "conforms",
							"type": "boolean",
							"description": "Indicates if the validation conforms the given shape. If that's the case, no results data will be returned.",
							"optional": false
						},
						{
							"access": null,
							"name": "results",
							"type": "CarbonLDP.SHACL.ValidationResult[]",
							"description": "The results of a failure validation process.",
							"optional": false
						},
						{
							"access": null,
							"name": "shapesGraphWellFormed",
							"type": "CarbonLDP.SHACL.ValidationResult",
							"description": "The shapesGraphWellFormed of a failure validation process.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "ValidationReportFactory",
					"description": "Interface with the factory, decorate and utils methods for `CarbonLDP.SHACL.ValidationReport` objects.",
					"generics": null,
					"path": "CarbonLDP.SHACL.ValidationReport.ValidationReportFactory",
					"properties": [
						{
							"access": null,
							"name": "SCHEMA",
							"type": "CarbonLDP.ObjectSchema",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "TYPE",
							"type": "string",
							"description": null,
							"optional": false
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "ValidationReport",
						"type": "CarbonLDP.SHACL.ValidationReport.ValidationReportFactory",
						"description": null,
						"optional": null,
						"ValidationReport.SCHEMA": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "ValidationResult",
			"description": null,
			"path": "carbonldp/SHACL/ValidationResult",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "ValidationResult",
					"description": "Interface of a result that reports individual SHACL validation failure.",
					"generics": null,
					"path": "CarbonLDP.SHACL.ValidationResult",
					"should-exists": true,
					"super-classes": [
						{
							"name": "CarbonLDP.TransientResource"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "detail",
							"type": "CarbonLDP.Pointer",
							"description": "Pointer to the possible parent wih one or more SHACL results.",
							"optional": true
						},
						{
							"access": null,
							"name": "focusNode",
							"type": "CarbonLDP.Pointer",
							"description": "The focus node that has caused the result.",
							"optional": false
						},
						{
							"access": null,
							"name": "resultMessage",
							"type": "string",
							"description": "The message string taken from the SHACL shape message property.",
							"optional": true
						},
						{
							"access": null,
							"name": "resultPath",
							"type": "CarbonLDP.Pointer",
							"description": "The SHACL shape property path that where tested.",
							"optional": true
						},
						{
							"access": null,
							"name": "resultSeverity",
							"type": "CarbonLDP.Pointer",
							"description": "The severity described by the SHACL shape severity property.",
							"optional": true
						},
						{
							"access": null,
							"name": "sourceShape",
							"type": "CarbonLDP.Pointer",
							"description": "Pointer to the source SHACL shape used in the validation.",
							"optional": true
						},
						{
							"access": null,
							"name": "value",
							"type": "any",
							"description": "The value of the previous SHACL property path that raised the validation violation.",
							"optional": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "ValidationResultFactory",
					"description": "Interface with the factory, decorate and utils elements for `CarbonLDP.SHACL.ValidationResult` objects.",
					"generics": null,
					"path": "CarbonLDP.SHACL.ValidationResult.ValidationResultFactory",
					"properties": [
						{
							"access": null,
							"name": "SCHEMA",
							"type": "CarbonLDP.ObjectSchema",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "TYPE",
							"type": "string",
							"description": null,
							"optional": false
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "ValidationResult",
						"type": "CarbonLDP.SHACL.ValidationResult.ValidationResultFactory",
						"description": null,
						"optional": null,
						"ValidationResult.SCHEMA": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "SPARQL",
			"description": null,
			"path": "carbonldp/SPARQL",
			"is-defined": true,
			"reexports": [
				{
					"access": "static",
					"name": "FinishSPARQLSelect",
					"originalLocation": "CarbonLDP.SPARQL.FinishSPARQLSelect"
				},
				{
					"access": "static",
					"name": "SPARQLBindingObject",
					"originalLocation": "CarbonLDP.SPARQL.SPARQLBindingObject"
				},
				{
					"access": "static",
					"name": "SPARQLBuilder",
					"originalLocation": "CarbonLDP.SPARQL.SPARQLBuilder"
				},
				{
					"access": "static",
					"name": "SPARQLRawBindingObject",
					"originalLocation": "CarbonLDP.SPARQL.SPARQLRawBindingObject"
				},
				{
					"access": "static",
					"name": "SPARQLRawBindingProperty",
					"originalLocation": "CarbonLDP.SPARQL.SPARQLRawBindingProperty"
				},
				{
					"access": "static",
					"name": "SPARQLRawResults",
					"originalLocation": "CarbonLDP.SPARQL.SPARQLRawResults"
				},
				{
					"access": "static",
					"name": "SPARQLRawResultsParser",
					"originalLocation": "CarbonLDP.SPARQL.SPARQLRawResultsParser"
				},
				{
					"access": "static",
					"name": "SPARQLSelectResults",
					"originalLocation": "CarbonLDP.SPARQL.SPARQLSelectResults"
				},
				{
					"access": "static",
					"name": "SPARQLService",
					"originalLocation": "CarbonLDP.SPARQL.SPARQLService"
				}
			]
		},
		{
			"suiteType": "module",
			"name": "RawResults",
			"description": null,
			"path": "carbonldp/SPARQL/RawResults",
			"is-defined": true,
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "SPARQLRawBindingObject",
					"description": "Interface that represents the raw response of a SPARQL query.",
					"generics": null,
					"path": "CarbonLDP.SPARQL.SPARQLRawBindingObject",
					"properties": [
						{
							"access": null,
							"name": "[ name:string ]",
							"type": "CarbonLDP.SPARQL.SPARQLRawBindingProperty",
							"description": "An entry of every `vars` requested as the `name` variable, containing the binding property with its value.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "SPARQLRawBindingProperty",
					"description": "Interface that represents every entry of a `CarbonLDP.SPARQL.SPARQLRawBindingObject`.",
					"generics": null,
					"path": "CarbonLDP.SPARQL.SPARQLRawBindingProperty",
					"properties": [
						{
							"access": null,
							"name": "datatype",
							"type": "string",
							"description": "The URI of the type of the binding property. This is only present when the property is of type `literal`.",
							"optional": true
						},
						{
							"access": null,
							"name": "type",
							"type": "string",
							"description": "The type of binding property, it could be `uri`, `literal` or `bnode`.",
							"optional": false
						},
						{
							"access": null,
							"name": "value",
							"type": "string",
							"description": "The string value of binding property.",
							"optional": false
						},
						{
							"access": null,
							"name": "xml:lang",
							"type": "string",
							"description": "If the property is a `literal` and of data type `xsd:string`, this property indicates if it has an specific language.",
							"optional": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "SPARQLRawResults",
					"description": "Interface that represents the raw response of a SPARQL query.",
					"generics": null,
					"path": "CarbonLDP.SPARQL.SPARQLRawResults",
					"properties": [
						{
							"access": null,
							"name": "boolean",
							"type": "boolean",
							"description": "The result of an `ASK` query.",
							"optional": true
						},
						{
							"access": null,
							"name": "head",
							"type": "{ \"vars\"?:string[], \"links\"?:string[] }",
							"description": "Contains an array `vars` with the possible elements inside the results bindings properties. Can also contains an array `link`, that contains URI to further information about the results.",
							"optional": false
						},
						{
							"access": null,
							"name": "results",
							"type": "{ \"bindings\":CarbonLDP.SPARQL.SPARQLRawBindingObject[] }",
							"description": "The results of a `SELECT` query.",
							"optional": true
						}
					]
				}
			]
		},
		{
			"suiteType": "module",
			"name": "RawResultsParser",
			"description": null,
			"path": "carbonldp/SPARQL/RawResultsParser",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "SPARQLRawResultsParser",
					"description": "Class to parse SPARQL Query result to a `CarbonLDP.SPARQL.SPARQLRawResults` object.",
					"generics": null,
					"interfaces": [
						"CarbonLDP.HTTP.Parser<CarbonLDP.SPARQL.SPARQLRawResults>"
					],
					"path": "CarbonLDP.SPARQL.SPARQLRawResultsParser",
					"is-defined": true,
					"methods": {
						"instance": [
							{
								"name": "parse",
								"signatures": [
									{
										"access": "instance",
										"name": "parse",
										"generics": null,
										"description": "Parse the SPARQL Query string result to a `CarbonLDP.SPARQL.SPARQLRawResults` object.",
										"arguments": [
											{
												"name": "input",
												"type": "string"
											}
										],
										"returns": {
											"type": "Promise<CarbonLDP.SPARQL.SPARQLRawResults>"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "Promise<CarbonLDP.SPARQL.SPARQLRawResults>"
								}
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "SPARQLBuilder",
			"description": "Module that reexports the customized SPARQLER class.",
			"path": "carbonldp/SPARQL/SPARQLBuilder",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "FinishSPARQLAsk",
					"description": "Clause that extends the query builder allowing to execute the request for the built query.",
					"generics": null,
					"path": "CarbonLDP.SPARQL.FinishSPARQLAsk",
					"super-classes": [
						{
							"name": "SPARQL/clauses/FinishClause"
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "execute",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": null,
									"description": null,
									"arguments": null,
									"returns": {
										"type": "Promise<boolean>"
									}
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							},
							"should-exists": true
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "FinishSPARQLSelect",
					"description": "Clause that extends the query builder allowing to execute the request for the built query.",
					"generics": null,
					"path": "CarbonLDP.SPARQL.FinishSPARQLSelect",
					"super-classes": [
						{
							"name": "SPARQL/clauses/FinishClause"
						}
					],
					"methods": [
						{
							"access": null,
							"suiteType": "method",
							"name": "execute",
							"description": null,
							"optional": false,
							"signatures": [
								{
									"generics": [
										"T extends object"
									],
									"description": null,
									"arguments": null,
									"returns": {
										"type": "Promise<CarbonLDP.SPARAL.SPARQLSelectResults>"
									}
								}
							],
							"returns": {
								"type": "Promise<CarbonLDP.SPARAL.SPARQLSelectResults>"
							},
							"should-exists": true
						}
					]
				}
			],
			"classes": [
				{
					"suiteType": "class",
					"name": "SPARQLBuilder",
					"description": "Customized SPARQLER class to be used by the SDK",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.SPARQL.SPARQLBuilder",
					"constructors": {
						"suiteType": "constructor",
						"description": null,
						"signatures": [
							{
								"generics": null,
								"description": null,
								"arguments": [
									{
										"name": "repository",
										"type": "CarbonLDP.DocumentsRepository.Traits.SPARQLDocumentsRepositoryTrait",
										"description": "The repository where the builder is been constructed from."
									},
									{
										"name": "entryPoint",
										"type": "string",
										"description": "The entry point URI where the query can be executed from."
									}
								],
								"returns": {
									"type": "void"
								}
							}
						],
						"returns": {
							"type": "void"
						},
						"should-be instantiable": true,
						"should-extend FinishClause with the FinishSPARQLSelect": true,
						"should-call executeSELECTQuery when execute": true,
						"should-extend FinishClause with the FinishSPARQLAsk": true,
						"should-call executeASKQuery when execute": true
					},
					"super-classes": [
						{
							"name": "SPARQLER/SPARQLER"
						}
					]
				}
			]
		},
		{
			"suiteType": "module",
			"name": "SPARQLService",
			"description": null,
			"path": "carbonldp/SPARQL/SPARQLService",
			"is-defined": true,
			"classes": [
				{
					"suiteType": "class",
					"name": "SPARQLService",
					"description": "Executes SPARQL queries and updates.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.SPARQL.SPARQLService",
					"is-defined": true,
					"methods": {
						"static": [
							{
								"name": "executeASKQuery",
								"signatures": [
									{
										"access": "static",
										"name": "executeASKQuery",
										"generics": null,
										"description": "Executes an ASK Query and returns a boolean.",
										"arguments": [
											{
												"name": "url",
												"type": "string"
											},
											{
												"name": "askQuery",
												"type": "string"
											},
											{
												"name": "requestOptions",
												"type": "CarbonLDP.HTTP.RequestOptions",
												"optional": true
											}
										],
										"returns": {
											"type": "Promise<[ boolean, CarbonLDP.HTTP.Response ]>"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "Promise<[ boolean, CarbonLDP.HTTP.Response ]>"
								}
							},
							{
								"name": "executeRawASKQuery",
								"signatures": [
									{
										"access": "static",
										"name": "executeRawASKQuery",
										"generics": null,
										"description": "Executes an ASK Query and returns a raw application/sparql-results+json object.",
										"arguments": [
											{
												"name": "url",
												"type": "string"
											},
											{
												"name": "askQuery",
												"type": "string"
											},
											{
												"name": "requestOptions",
												"type": "CarbonLDP.HTTP.RequestOptions",
												"optional": true
											}
										],
										"returns": {
											"type": "Promise<[ CarbonLDP.SPARQL.SPARQLRawResults, CarbonLDP.HTTP.Response ]>"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "Promise<[ CarbonLDP.SPARQL.SPARQLRawResults, CarbonLDP.HTTP.Response ]>"
								}
							},
							{
								"name": "executeRawCONSTRUCTQuery",
								"signatures": [
									{
										"access": "static",
										"name": "executeRawCONSTRUCTQuery",
										"generics": null,
										"description": "Executes a CONSTRUCT Query and returns a string with the resulting model.",
										"arguments": [
											{
												"name": "url",
												"type": "string"
											},
											{
												"name": "constructQuery",
												"type": "string"
											},
											{
												"name": "requestOptions",
												"type": "CarbonLDP.HTTP.RequestOptions",
												"optional": true
											}
										],
										"returns": {
											"type": "Promise<[ string, CarbonLDP.HTTP.Response ]>"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "Promise<[ string, CarbonLDP.HTTP.Response ]>"
								}
							},
							{
								"name": "executeRawDESCRIBEQuery",
								"signatures": [
									{
										"access": "static",
										"name": "executeRawDESCRIBEQuery",
										"generics": null,
										"description": "Executes a DESCRIBE Query and returns a string with the resulting model.",
										"arguments": [
											{
												"name": "url",
												"type": "string"
											},
											{
												"name": "describeQuery",
												"type": "string"
											},
											{
												"name": "requestOptions",
												"type": "CarbonLDP.HTTP.RequestOptions",
												"optional": true
											}
										],
										"returns": {
											"type": "Promise<[ string, CarbonLDP.HTTP.Response ]>"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "Promise<[ string, CarbonLDP.HTTP.Response ]>"
								}
							},
							{
								"name": "executeRawSELECTQuery",
								"signatures": [
									{
										"access": "static",
										"name": "executeRawSELECTQuery",
										"generics": null,
										"description": "Executes a SELECT Query and returns a raw application/sparql-results+json object.",
										"arguments": [
											{
												"name": "url",
												"type": "string"
											},
											{
												"name": "selectQuery",
												"type": "string"
											},
											{
												"name": "requestOptions",
												"type": "CarbonLDP.HTTP.RequestOptions",
												"optional": true
											}
										],
										"returns": {
											"type": "Promise<[ CarbonLDP.SPARQL.SPARQLRawResults, CarbonLDP.HTTP.Response ]>"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "Promise<[ CarbonLDP.SPARQL.SPARQLRawResults, CarbonLDP.HTTP.Response ]>"
								}
							},
							{
								"name": "executeSELECTQuery",
								"signatures": [
									{
										"access": "static",
										"name": "executeSELECTQuery",
										"generics": [
											"T"
										],
										"description": "Executes a SELECT Query and parses the results.",
										"arguments": [
											{
												"name": "url",
												"type": "string"
											},
											{
												"name": "selectQuery",
												"type": "string"
											},
											{
												"name": "pointerLibrary",
												"type": "CarbonLDP.PointerLibrary"
											},
											{
												"name": "requestOptions",
												"type": "CarbonLDP.HTTP.RequestOptions",
												"optional": true
											}
										],
										"returns": {
											"type": "Promise<[ CarbonLDP.SPARQL.SPARQLSelectResults<T>, CarbonLDP.HTTP.Response ]>"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "Promise<[ CarbonLDP.SPARQL.SPARQLSelectResults<T>, CarbonLDP.HTTP.Response ]>"
								}
							},
							{
								"name": "executeUPDATE",
								"signatures": [
									{
										"access": "static",
										"name": "executeUPDATE",
										"generics": null,
										"description": "Executes an UPDATE query.",
										"arguments": [
											{
												"name": "url",
												"type": "string"
											},
											{
												"name": "update",
												"type": "string"
											},
											{
												"name": "requestOptions",
												"type": "CarbonLDP.HTTP.RequestOptions",
												"optional": true
											}
										],
										"returns": {
											"type": "Promise<CarbonLDP.HTTP.Response>"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "Promise<CarbonLDP.HTTP.Response>"
								}
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "SelectResults",
			"description": null,
			"path": "carbonldp/SPARQL/SelectResults",
			"is-defined": true,
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "SPARQLBindingObject",
					"description": "Interface that represents an entry of a element asked for in the SELECT query.",
					"generics": null,
					"path": "CarbonLDP.SPARQL.SPARQLBindingObject",
					"properties": [
						{
							"access": null,
							"name": "[ binding:string ]",
							"type": "string | number | boolean | Date | CarbonLDP.Pointer",
							"description": "An entry peer every `vars` selected for, which contains the parsed value requested. This elements can be from every literal type (`String`, `Number`, `Date`, etc.), to a `CarbonLDP.Pointer` if it is an URI.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "SPARQLSelectResults",
					"description": "Interface that represents a parsed response of a SELECT SPARQL query.",
					"generics": [
						"T = CarbonLDP.SPARQL.SPARQLBindingObject"
					],
					"path": "CarbonLDP.SPARQL.SPARQLSelectResults",
					"properties": [
						{
							"access": null,
							"name": "bindings",
							"type": "T[]",
							"description": "Array with the entries of the parsed elements asked in the query.",
							"optional": false
						},
						{
							"access": null,
							"name": "vars",
							"type": "string[]",
							"description": "Array of strings that contains the names of the elements asked in the query.",
							"optional": false
						}
					]
				}
			]
		},
		{
			"suiteType": "module",
			"name": "System",
			"description": null,
			"path": "carbonldp/System",
			"should-exists": true,
			"reexports": [
				{
					"access": "instance",
					"name": "PlatformInstance",
					"originalLocation": "CarbonLDP.System.PlatformInstance"
				},
				{
					"access": "instance",
					"name": "PlatformMetadata",
					"originalLocation": "CarbonLDP.System.PlatformMetadata"
				},
				{
					"access": "instance",
					"name": "PlatformMetadataFactory",
					"originalLocation": "CarbonLDP.System.PlatformMetadataFactory"
				}
			]
		},
		{
			"suiteType": "module",
			"name": "PlatformInstance",
			"description": null,
			"path": "carbonldp/System/PlatformInstance",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "PlatformInstance",
					"description": "Interface that represents the actual data a platform instance.",
					"generics": null,
					"path": "CarbonLDP.System.PlatformInstance",
					"super-classes": [
						{
							"name": "CarbonLDP.LDP.VolatileResource"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "buildDate",
							"type": "Date",
							"description": "The time the platform was built.",
							"optional": false
						},
						{
							"access": null,
							"name": "version",
							"type": "string",
							"description": "The version of your platform instance.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "PlatformInstanceFactory",
					"description": "Interface with the factory for `CarbonLDP.System.PlatformInstance` objects.",
					"generics": null,
					"path": "CarbonLDP.System.PlatformInstanceFactory",
					"properties": [
						{
							"access": null,
							"name": "SCHEMA",
							"type": "CarbonLDP.ObjectSchema.ObjectSchema",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "TYPE",
							"type": "string",
							"description": null,
							"optional": false
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "PlatformInstance",
						"type": "CarbonLDP.System.PlatformInstance",
						"description": null,
						"optional": null
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "PlatformMetadata",
			"description": null,
			"path": "carbonldp/System/PlatformMetadata",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "PlatformMetadata",
					"description": "Interface that represents the document with the data of the Carbon LDP Platform instance.",
					"generics": null,
					"path": "CarbonLDP.System.PlatformMetadata",
					"super-classes": [
						{
							"name": "CarbonLDP.Document"
						}
					],
					"properties": [
						{
							"access": null,
							"name": "instance",
							"type": "CarbonLDP.System.PlatformInstance",
							"description": "The fragment where the actual data of the instance lives on.",
							"optional": false
						}
					]
				},
				{
					"suiteType": "interface",
					"name": "PlatformMetadataFactory",
					"description": "Interface with the factory, decorate and utils elements for `CarbonLDP.System.PlatformMetadata` objects.",
					"generics": null,
					"path": "CarbonLDP.System.PlatformMetadataFactory",
					"properties": [
						{
							"access": null,
							"name": "SCHEMA",
							"type": "CarbonLDP.ObjectSchema",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "TYPE",
							"type": "string",
							"description": null,
							"optional": false
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "PlatformMetadata",
						"type": "CarbonLDP.System.PlatformMetadataFactory",
						"description": null,
						"optional": null
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "Utils",
			"description": "Class with useful functions used in the SDK.",
			"path": "carbonldp/Utils",
			"is-defined": true,
			"methods": {
				"static": [
					{
						"name": "forEachOwnProperty",
						"signatures": [
							{
								"access": "static",
								"name": "forEachOwnProperty",
								"generics": null,
								"description": "Executes an action for each own property of the object.",
								"arguments": [
									{
										"name": "object",
										"type": "Object",
										"description": "The object to iterate over its properties."
									},
									{
										"name": "action",
										"type": "( name:string, value:any ) => boolean",
										"description": "A function that will be called for every property own property in the object. The loop will break if the action function returns `false`."
									}
								],
								"returns": {
									"type": "void"
								},
								"optional": null
							}
						],
						"returns": {
							"type": "void"
						}
					},
					{
						"name": "hasFunction",
						"signatures": [
							{
								"access": "static",
								"name": "hasFunction",
								"generics": null,
								"description": "Checks if the object has a property with that name and if it that property is a function.",
								"arguments": [
									{
										"name": "object",
										"type": "Object"
									},
									{
										"name": "name",
										"type": "string"
									}
								],
								"returns": {
									"type": "boolean"
								},
								"optional": null
							}
						],
						"returns": {
							"type": "boolean"
						}
					},
					{
						"name": "hasProperty",
						"signatures": [
							{
								"access": "static",
								"name": "hasProperty",
								"generics": null,
								"description": "Checks if the object has a property with that name.",
								"arguments": [
									{
										"name": "object",
										"type": "Object"
									},
									{
										"name": "name",
										"type": "string"
									}
								],
								"returns": {
									"type": "boolean"
								},
								"optional": null
							}
						],
						"returns": {
							"type": "boolean"
						}
					},
					{
						"name": "hasPropertyDefined",
						"signatures": [
							{
								"access": "static",
								"name": "hasPropertyDefined",
								"generics": null,
								"description": "Checks if an object has a property defined under that name (even if its value is undefined).",
								"arguments": [
									{
										"name": "object",
										"type": "Object"
									},
									{
										"name": "name",
										"type": "string"
									}
								],
								"returns": {
									"type": "boolean"
								},
								"optional": null
							}
						],
						"returns": {
							"type": "boolean"
						}
					},
					{
						"name": "isArray",
						"signatures": [
							{
								"access": "static",
								"name": "isArray",
								"generics": null,
								"description": "Checks if the value passed is an array.",
								"arguments": [
									{
										"name": "value",
										"type": "any"
									}
								],
								"returns": {
									"type": "boolean"
								},
								"optional": null
							}
						],
						"returns": {
							"type": "boolean"
						}
					},
					{
						"name": "isBoolean",
						"signatures": [
							{
								"access": "static",
								"name": "isBoolean",
								"generics": null,
								"description": "Checks if the value passed is a boolean.",
								"arguments": [
									{
										"name": "value",
										"type": "any"
									}
								],
								"returns": {
									"type": "boolean"
								},
								"optional": null
							}
						],
						"returns": {
							"type": "boolean"
						}
					},
					{
						"name": "isDate",
						"signatures": [
							{
								"access": "static",
								"name": "isDate",
								"generics": null,
								"description": "Checks if the value passed is a Date object.",
								"arguments": [
									{
										"name": "value",
										"type": "any"
									}
								],
								"returns": {
									"type": "boolean"
								},
								"optional": null
							}
						],
						"returns": {
							"type": "boolean"
						}
					},
					{
						"name": "isDefined",
						"signatures": [
							{
								"access": "static",
								"name": "isDefined",
								"generics": null,
								"description": "Checks if the value passed is defined.",
								"arguments": [
									{
										"name": "value",
										"type": "any"
									}
								],
								"returns": {
									"type": "boolean"
								},
								"optional": null
							}
						],
						"returns": {
							"type": "boolean"
						}
					},
					{
						"name": "isDouble",
						"signatures": [
							{
								"access": "static",
								"name": "isDouble",
								"generics": null,
								"description": "Checks if the value passed is a double.",
								"arguments": [
									{
										"name": "value",
										"type": "any"
									}
								],
								"returns": {
									"type": "boolean"
								},
								"optional": null
							}
						],
						"returns": {
							"type": "boolean"
						}
					},
					{
						"name": "isFunction",
						"signatures": [
							{
								"access": "static",
								"name": "isFunction",
								"generics": null,
								"description": "Checks if the value passed is a function.",
								"arguments": [
									{
										"name": "value",
										"type": "any"
									}
								],
								"returns": {
									"type": "boolean"
								},
								"optional": null
							}
						],
						"returns": {
							"type": "boolean"
						}
					},
					{
						"name": "isInteger",
						"signatures": [
							{
								"access": "static",
								"name": "isInteger",
								"generics": null,
								"description": "Checks if the value passed is an integer.",
								"arguments": [
									{
										"name": "value",
										"type": "any"
									}
								],
								"returns": {
									"type": "boolean"
								},
								"optional": null
							}
						],
						"returns": {
							"type": "boolean"
						}
					},
					{
						"name": "isMap",
						"signatures": [
							{
								"access": "static",
								"name": "isMap",
								"generics": null,
								"description": "Checks if the value passed is an ES6 Map.",
								"arguments": [
									{
										"name": "value",
										"type": "any"
									}
								],
								"returns": {
									"type": "boolean"
								},
								"optional": null
							}
						],
						"returns": {
							"type": "boolean"
						}
					},
					{
						"name": "isNull",
						"signatures": [
							{
								"access": "static",
								"name": "isNull",
								"generics": null,
								"description": "Checks if the value passed is null.",
								"arguments": [
									{
										"name": "value",
										"type": "any"
									}
								],
								"returns": {
									"type": "boolean"
								},
								"optional": null
							}
						],
						"returns": {
							"type": "boolean"
						}
					},
					{
						"name": "isNumber",
						"signatures": [
							{
								"access": "static",
								"name": "isNumber",
								"generics": null,
								"description": "Checks if the value passed is a number.",
								"arguments": [
									{
										"name": "value",
										"type": "any"
									}
								],
								"returns": {
									"type": "boolean"
								},
								"optional": null
							}
						],
						"returns": {
							"type": "boolean"
						}
					},
					{
						"name": "isObject",
						"signatures": [
							{
								"access": "static",
								"name": "isObject",
								"generics": null,
								"description": "Checks if the value passed is an object (doesn't include null).",
								"arguments": [
									{
										"name": "value",
										"type": "any"
									}
								],
								"returns": {
									"type": "boolean"
								},
								"optional": null
							}
						],
						"returns": {
							"type": "boolean"
						}
					},
					{
						"name": "isString",
						"signatures": [
							{
								"access": "static",
								"name": "isString",
								"generics": null,
								"description": "Checks if the value passed is a string.",
								"arguments": [
									{
										"name": "value",
										"type": "any"
									}
								],
								"returns": {
									"type": "boolean"
								},
								"optional": null
							}
						],
						"returns": {
							"type": "boolean"
						}
					},
					{
						"name": "parseBoolean",
						"signatures": [
							{
								"access": "static",
								"name": "parseBoolean",
								"generics": null,
								"description": "Parses a string into a boolean.",
								"arguments": [
									{
										"name": "value",
										"type": "string"
									}
								],
								"returns": {
									"type": "boolean"
								},
								"optional": null
							}
						],
						"returns": {
							"type": "boolean"
						}
					}
				]
			},
			"classes": [
				{
					"suiteType": "class",
					"name": "ArrayUtils",
					"description": "Utility functions related to Arrays.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.Utils.ArrayUtils",
					"is-defined": true,
					"methods": {
						"static": [
							{
								"name": "from",
								"signatures": [
									{
										"access": "static",
										"name": "from",
										"generics": null,
										"description": "Collects the values of an ES6 iterator and returns an array.",
										"arguments": [
											{
												"name": "iterator",
												"type": "iterator"
											}
										],
										"returns": {
											"type": "array"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "array"
								}
							},
							{
								"name": "indexOf",
								"signatures": [
									{
										"access": "static",
										"name": "indexOf",
										"generics": [
											"T",
											"W"
										],
										"description": "Returns the index of a element searched in an array with a custom comparator function.\nIf the element was not found `-1` is returned",
										"arguments": [
											{
												"name": "array",
												"type": "Array<T>",
												"description": "The array were to search the element."
											},
											{
												"name": "searchedElement",
												"type": "W",
												"description": "The element searched"
											},
											{
												"name": "comparator",
												"type": "( element:T, searchedElement:W ) => boolean",
												"optional": true,
												"description": "The function that must compare if the two elements provided are de same."
											}
										],
										"returns": {
											"type": "boolean"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "boolean"
								}
							},
							{
								"name": "joinWithoutDuplicates",
								"signatures": [
									{
										"access": "static",
										"name": "joinWithoutDuplicates",
										"generics": null,
										"description": "Takes two or more arrays and joins them while removing duplicates.",
										"arguments": [
											{
												"name": "...arrays",
												"type": "Array<Array<T>>",
												"description": "Every array parameter to merge."
											}
										],
										"returns": {
											"type": "Array<T>"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "Array<T>"
								}
							}
						]
					}
				},
				{
					"suiteType": "class",
					"name": "MapUtils",
					"description": "Utility functions related to ES6 Maps.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.Utils.MapUtils",
					"is-defined": true,
					"methods": {
						"static": [
							{
								"name": "extend",
								"signatures": [
									{
										"access": "static",
										"name": "extend",
										"generics": null,
										"description": "Adds to a target Map all the entries of the subsequents Maps provided. If entries with the same key exists between Maps, the entry's value of the last Map is set to the target Map.",
										"arguments": [
											{
												"name": "toExtend",
												"type": "Map<K, V>",
												"description": "Target Map to extend."
											},
											{
												"name": "...extenders",
												"type": "Map<K, V>[]",
												"description": "Every other Map parameter, from which the entries to be added to the target Map will be taken."
											}
										],
										"returns": {
											"type": "Map<K, V>",
											"description": "Returns the target map provided."
										},
										"optional": null
									}
								],
								"returns": {
									"type": "Map<K, V>",
									"description": "Returns the target map provided."
								}
							},
							{
								"name": "from",
								"signatures": [
									{
										"access": "static",
										"name": "from",
										"generics": null,
										"description": "Takes an object and creates a map from its properties.",
										"arguments": [
											{
												"name": "object",
												"type": "Object"
											}
										],
										"returns": {
											"type": "map"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "map"
								}
							}
						]
					}
				},
				{
					"suiteType": "class",
					"name": "ObjectUtils",
					"description": "Utility functions related to objects.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.Utils.ObjectUtils",
					"is-defined": true,
					"methods": {
						"static": [
							{
								"name": "areEqual",
								"signatures": [
									{
										"access": "static",
										"name": "areEqual",
										"generics": null,
										"description": "Makes a shallow or deep comparison, between all the enumerable properties of the provided objects, depending of the configuration specified.",
										"arguments": [
											{
												"name": "object1",
												"type": "Object",
												"description": "First object to compare."
											},
											{
												"name": "object2",
												"type": "Object",
												"description": "Second object to compare."
											},
											{
												"name": "config",
												"type": "{arrays?:boolean, objects?:boolean}",
												"optional": true,
												"description": "Object that indicates if the arrays or the objects must have a deep comparison or not. By default the comparison is shallow."
											},
											{
												"name": "ignore",
												"type": "{[ key:string ]:boolean}",
												"optional": true,
												"description": "Object that indicates there is any property to ignore."
											}
										],
										"returns": {
											"type": "boolean"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "boolean"
								}
							},
							{
								"name": "areShallowlyEqual",
								"signatures": [
									{
										"access": "static",
										"name": "areShallowlyEqual",
										"generics": null,
										"description": "Checks if an object has the same enumerable properties with the same values as another object.",
										"arguments": [
											{
												"name": "object1",
												"type": "Object",
												"description": "First object to compare."
											},
											{
												"name": "object2",
												"type": "Object",
												"description": "Second object to compare."
											}
										],
										"returns": {
											"type": "boolean"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "boolean"
								}
							},
							{
								"name": "clone",
								"signatures": [
									{
										"access": "static",
										"name": "clone",
										"generics": [
											"T extends Object"
										],
										"description": "Makes a shallow or deep clone of the object provided depending of the configuration specified.",
										"arguments": [
											{
												"name": "object",
												"type": "T",
												"description": "The object to copy."
											},
											{
												"name": "config",
												"type": "{arrays?:boolean, objects?:boolean}",
												"optional": true,
												"description": "Object that indicates if the arrays or objects must be copied or not. By default, arrays and objects will not be deep copied."
											}
										],
										"returns": {
											"type": "T",
											"description": "The copy of the object provided."
										},
										"optional": null
									}
								],
								"returns": {
									"type": "T",
									"description": "The copy of the object provided."
								}
							},
							{
								"name": "extend",
								"signatures": [
									{
										"access": "static",
										"name": "extend",
										"generics": [
											"T extends Object, W extends Object"
										],
										"description": "Extends the target element making a shallow or deep copy of the properties in the source object, depending of the configuration specified.",
										"arguments": [
											{
												"name": "target",
												"type": "T",
												"description": "The object to extend."
											},
											{
												"name": "source",
												"type": "W",
												"description": "The object to copy."
											},
											{
												"name": "config",
												"type": "{arrays?:boolean, objects?:boolean}",
												"optional": true,
												"description": "Object that indicates if the arrays or objects must be copied or not. By default, arrays and objects will not be deep copied."
											}
										],
										"returns": {
											"type": "T & W",
											"description": "The copy of the object provided."
										},
										"optional": null
									}
								],
								"returns": {
									"type": "T & W",
									"description": "The copy of the object provided."
								}
							}
						]
					}
				},
				{
					"suiteType": "class",
					"name": "StringUtils",
					"description": "Utility functions related to strings.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.Utils.StringUtils",
					"is-defined": true,
					"methods": {
						"static": [
							{
								"name": "contains",
								"signatures": [
									{
										"access": "static",
										"name": "contains",
										"generics": null,
										"description": "Checks if a string contains a substring (in any part).",
										"arguments": [
											{
												"name": "string",
												"type": "string"
											},
											{
												"name": "substring",
												"type": "string"
											}
										],
										"returns": {
											"type": "boolean"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "boolean"
								}
							},
							{
								"name": "endsWith",
								"signatures": [
									{
										"access": "static",
										"name": "endsWith",
										"generics": null,
										"description": "Checks if a string ends with a substring.",
										"arguments": [
											{
												"name": "string",
												"type": "string"
											},
											{
												"name": "substring",
												"type": "string"
											}
										],
										"returns": {
											"type": "boolean"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "boolean"
								}
							},
							{
								"name": "startsWith",
								"signatures": [
									{
										"access": "static",
										"name": "startsWith",
										"generics": null,
										"description": "Checks if a string starts with a substring.",
										"arguments": [
											{
												"name": "string",
												"type": "string"
											},
											{
												"name": "substring",
												"type": "string"
											}
										],
										"returns": {
											"type": "boolean"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "boolean"
								}
							}
						]
					}
				},
				{
					"suiteType": "class",
					"name": "UUIDUtils",
					"description": "Utility functions related to UUIDs.",
					"generics": null,
					"interfaces": null,
					"path": "CarbonLDP.Utils.UUIDUtils",
					"is-defined": true,
					"methods": {
						"static": [
							{
								"name": "generate",
								"signatures": [
									{
										"access": "static",
										"name": "generate",
										"generics": null,
										"description": "Generates a new, version 4, UUID.",
										"arguments": [],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							},
							{
								"name": "is",
								"signatures": [
									{
										"access": "static",
										"name": "is",
										"generics": null,
										"description": "Returns true if the string provided is a UUID (version 1 to 5).",
										"arguments": [
											{
												"name": "uuid",
												"type": "string"
											}
										],
										"returns": {
											"type": "string"
										},
										"optional": null
									}
								],
								"returns": {
									"type": "string"
								}
							}
						]
					}
				}
			]
		},
		{
			"suiteType": "module",
			"name": "Vocabularies",
			"description": null,
			"path": "carbonldp/Vocabularies",
			"is-defined": true,
			"reexports": [
				{
					"access": "static",
					"name": "C",
					"originalLocation": "CarbonLDP.Vocabularies.C"
				},
				{
					"access": "static",
					"name": "LDP",
					"originalLocation": "CarbonLDP.Vocabularies.LDP"
				},
				{
					"access": "static",
					"name": "RDF",
					"originalLocation": "CarbonLDP.Vocabularies.RDF"
				},
				{
					"access": "static",
					"name": "SHACL",
					"originalLocation": "CarbonLDP.Vocabularies.SHACL"
				},
				{
					"access": "static",
					"name": "XSD",
					"originalLocation": "CarbonLDP.Vocabularies.XSD"
				}
			]
		},
		{
			"suiteType": "module",
			"name": "C",
			"description": null,
			"path": "carbonldp/Vocabularies/C",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "C",
					"description": "Interface that describes the vocabulary of Carbon LDP.",
					"generics": null,
					"path": "CarbonLDP.Vocabularies.C",
					"properties": [
						{
							"access": null,
							"name": "AccessPoint",
							"type": "https://carbonldp.com/ns/v1/platform#AccessPoint",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "AddMemberAction",
							"type": "https://carbonldp.com/ns/v1/platform#AddMemberAction",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "ChildCreatedEvent",
							"type": "https://carbonldp.com/ns/v1/platform#ChildCreatedEvent",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "Document",
							"type": "https://carbonldp.com/ns/v1/platform#Document",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "DocumentCreatedEventDetails",
							"type": "https://carbonldp.com/ns/v1/platform#DocumentCreatedEventDetails",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "DocumentDeletedEvent",
							"type": "https://carbonldp.com/ns/v1/platform#DocumentDeletedEvent",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "DocumentMetadata",
							"type": "https://carbonldp.com/ns/v1/platform#DocumentMetadata",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "DocumentModifiedEvent",
							"type": "https://carbonldp.com/ns/v1/platform#DocumentModifiedEvent",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "Error",
							"type": "https://carbonldp.com/ns/v1/platform#Error",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "ErrorResponse",
							"type": "https://carbonldp.com/ns/v1/platform#ErrorResponse",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "Instance",
							"type": "https://carbonldp.com/ns/v1/platform#Instance",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "Map",
							"type": "https://carbonldp.com/ns/v1/platform#Map",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "MemberAddedEvent",
							"type": "https://carbonldp.com/ns/v1/platform#MemberAddedEvent",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "MemberAddedEventDetails",
							"type": "https://carbonldp.com/ns/v1/platform#MemberAddedEventDetails",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "MemberRemovedEvent",
							"type": "https://carbonldp.com/ns/v1/platform#MemberRemovedEvent",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "MemberRemovedEventDetails",
							"type": "https://carbonldp.com/ns/v1/platform#MemberRemovedEventDetails",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "NonReadableMembershipResourceTriples",
							"type": "https://carbonldp.com/ns/v1/platform#NonReadableMembershipResourceTriples",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "Platform",
							"type": "https://carbonldp.com/ns/v1/platform#Platform",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "PlatformInstance",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "PreferContainer",
							"type": "https://carbonldp.com/ns/v1/platform#PreferContainer",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "PreferContainmentResources",
							"type": "https://carbonldp.com/ns/v1/platform#PreferContainmentResources",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "PreferContainmentTriples",
							"type": "https://carbonldp.com/ns/v1/platform#PreferContainmentTriples",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "PreferDocumentChecksums",
							"type": "https://carbonldp.com/ns/v1/platform#PreferDocumentChecksums",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "PreferMembershipResources",
							"type": "https://carbonldp.com/ns/v1/platform#PreferMembershipResources",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "PreferMembershipTriples",
							"type": "https://carbonldp.com/ns/v1/platform#PreferMembershipTriples",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "PreferResultsContexts",
							"type": "https://carbonldp.com/ns/v1/platform#PreferResultsContexts",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "QueryMetadata",
							"type": "https://carbonldp.com/ns/v1/platform#QueryMetadata",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "RemoveMemberAction",
							"type": "https://carbonldp.com/ns/v1/platform#RemoveMemberAction",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "ResponseMetadata",
							"type": "https://carbonldp.com/ns/v1/platform#ResponseMetadata",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "ValidationError",
							"type": "https://carbonldp.com/ns/v1/platform#ValidationError",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "VolatileResource",
							"type": "https://carbonldp.com/ns/v1/platform#VolatileResource",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "accessPoint",
							"type": "https://carbonldp.com/ns/v1/platform#accessPoint",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "bNodesMap",
							"type": "https://carbonldp.com/ns/v1/platform#bNodesMap",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "buildDate",
							"type": "https://carbonldp.com/ns/v1/platform#buildDate",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "checksum",
							"type": "https://carbonldp.com/ns/v1/platform#checksum",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "created",
							"type": "https://carbonldp.com/ns/v1/platform#created",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "createdDocument",
							"type": "https://carbonldp.com/ns/v1/platform#createdDocument",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "defaultInteractionModel",
							"type": "https://carbonldp.com/ns/v1/platform#defaultInteractionModel",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "details",
							"type": "https://carbonldp.com/ns/v1/platform#details",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "document",
							"type": "https://carbonldp.com/ns/v1/platform#document",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "documentMetadata",
							"type": "https://carbonldp.com/ns/v1/platform#documentMetadata",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "entry",
							"type": "https://carbonldp.com/ns/v1/platform#entry",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "entryKey",
							"type": "https://carbonldp.com/ns/v1/platform#key",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "entryValue",
							"type": "https://carbonldp.com/ns/v1/platform#value",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "error",
							"type": "https://carbonldp.com/ns/v1/platform#error",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "errorCode",
							"type": "https://carbonldp.com/ns/v1/platform#errorCode",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "errorDetails",
							"type": "https://carbonldp.com/ns/v1/platform#errorDetails",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "errorMessage",
							"type": "https://carbonldp.com/ns/v1/platform#errorMessage",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "errorParameters",
							"type": "https://carbonldp.com/ns/v1/platform#errorParameters",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "httpStatusCode",
							"type": "https://carbonldp.com/ns/v1/platform#httpStatusCode",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "instance",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "mediaType",
							"type": "https://carbonldp.com/ns/v1/platform#mediaType",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "member",
							"type": "https://carbonldp.com/ns/v1/platform#member",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "modified",
							"type": "https://carbonldp.com/ns/v1/platform#modified",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "namespace",
							"type": "https://carbonldp.com/ns/v1/platform#",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "relatedDocument",
							"type": "https://carbonldp.com/ns/v1/platform#relatedDocument",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "requestID",
							"type": "https://carbonldp.com/ns/v1/platform#requestID",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "size",
							"type": "https://carbonldp.com/ns/v1/platform#size",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "target",
							"type": "https://carbonldp.com/ns/v1/platform#target",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "targetMember",
							"type": "https://carbonldp.com/ns/v1/platform#targetMember",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "version",
							"type": "https://carbonldp.com/ns/v1/platform#version",
							"description": null,
							"optional": false
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "C",
						"type": "CarbonLDP.Vocabularies.C",
						"description": "Constant that implements the vocabulary of Carbon LDP.",
						"optional": null,
						"C.targetMember": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "LDP",
			"description": null,
			"path": "carbonldp/Vocabularies/LDP",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "LDP",
					"description": "Interface that describes the used vocabulary defined for the W3C Linked Data Platform (LDP)",
					"generics": null,
					"path": "CarbonLDP.Vocabularies.LDP",
					"properties": [
						{
							"access": null,
							"name": "Ascending",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "BasicContainer",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "Container",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "Descending",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "DirectContainer",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "IndirectContainer",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "MemberSubject",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "NonRDFSource",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "Page",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "PageSortCriterion",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "PreferContainment",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "PreferEmptyContainer",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "PreferMembership",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "PreferMinimalContainer",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "RDFSource",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "Resource",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "constrainedBy",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "contains",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "hasMemberRelation",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "insertedContentRelation",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "isMemberOfRelation",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "member",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "membershipResource",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "namespace",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "pageSequence",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "pageSortCollation",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "pageSortCriteria",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "pageSortOrder",
							"type": "string",
							"description": null,
							"optional": false
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "LDP",
						"type": "CarbonLDP.Vocabularies.LDP",
						"description": "Constant that implements the used vocabulary defined for the W3C Linked Data Platform (LDP)",
						"optional": null,
						"LDP.pageSequence": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "RDF",
			"description": null,
			"path": "carbonldp/Vocabularies/RDF",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "RDFVocab",
					"description": "Interface that defines the used vocabulary defined in the RDF Syntax Specification.",
					"generics": null,
					"path": "CarbonLDP.Vocabularies.RDFVocab",
					"properties": [
						{
							"access": null,
							"name": "namespace",
							"type": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "type",
							"type": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
							"description": null,
							"optional": false
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "RDF",
						"type": "CarbonLDP.Vocabularies.RDFVocab",
						"description": "Constant that implements the used vocabulary defined in the RDF Syntax Specification.",
						"optional": null,
						"LDP.type": true
					}
				]
			}
		},
		{
			"suiteType": "module",
			"name": "SHACL",
			"description": null,
			"path": "carbonldp/Vocabularies/SHACL",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "SHACL",
					"description": "Interface that describes the used vocabulary of the Shapes Constraint Language (SHACL) specification.",
					"generics": null,
					"path": "CarbonLDP.Vocabularies.SHACL",
					"properties": [
						{
							"access": null,
							"name": "ValidationReport",
							"type": "http://www.w3.org/ns/shacl#ValidationReport",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "ValidationResult",
							"type": "http://www.w3.org/ns/shacl#ValidationResult",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "conforms",
							"type": "http://www.w3.org/ns/shacl#conforms",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "detail",
							"type": "http://www.w3.org/ns/shacl#detail",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "focusNode",
							"type": "http://www.w3.org/ns/shacl#focusNode",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "namespace",
							"type": "string",
							"description": "http://www.w3.org/ns/shacl#",
							"optional": false
						},
						{
							"access": null,
							"name": "result",
							"type": "http://www.w3.org/ns/shacl#result",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "resultMessage",
							"type": "http://www.w3.org/ns/shacl#resultMessage",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "resultPath",
							"type": "http://www.w3.org/ns/shacl#resultPath",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "resultSeverity",
							"type": "http://www.w3.org/ns/shacl#resultSeverity",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "shapesGraphWellFormed",
							"type": "http://www.w3.org/ns/shacl#shapesGraphWellFormed",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "sourceConstraintComponent",
							"type": "http://www.w3.org/ns/shacl#sourceConstraintComponent",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "sourceShape",
							"type": "http://www.w3.org/ns/shacl#sourceShape",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "value",
							"type": "http://www.w3.org/ns/shacl#value",
							"description": null,
							"optional": false
						}
					]
				}
			],
			"properties": {
				"SHACL": {
					"CarbonLDP.Vocabularies.SHACL": {
						"access": "SHACL",
						"name": "CarbonLDP.Vocabularies.SHACL",
						"type": "Constant that implements the used vocabulary of the Shapes Constraint Language (SHACL) specification.",
						"description": null,
						"optional": null,
						"SHACL.value": true
					}
				}
			}
		},
		{
			"suiteType": "module",
			"name": "XSD",
			"description": null,
			"path": "carbonldp/Vocabularies/XSD",
			"interfaces": [
				{
					"suiteType": "interface",
					"name": "XSD",
					"description": "Interface that defined the used vocabulary of the data-types defined in the XML Schema Definition Language (XSD).",
					"generics": null,
					"path": "CarbonLDP.Vocabularies.XSD",
					"properties": [
						{
							"access": null,
							"name": "boolean",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "byte",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "date",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "dateTime",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "decimal",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "double",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "duration",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "float",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "gDay",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "gMonth",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "gMonthDay",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "gYear",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "gYearMonth",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "int",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "integer",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "long",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "namespace",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "negativeInteger",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "nonNegativeInteger",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "nonPositiveInteger",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "object",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "positiveInteger",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "short",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "string",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "time",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "unsignedByte",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "unsignedInt",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "unsignedLong",
							"type": "string",
							"description": null,
							"optional": false
						},
						{
							"access": null,
							"name": "unsignedShort",
							"type": "string",
							"description": null,
							"optional": false
						}
					]
				}
			],
			"properties": {
				"static": [
					{
						"access": "static",
						"name": "XSD",
						"type": "CarbonLDP.Vocabularies.XSD",
						"description": "Constant that implements the used vocabulary of the data-types defined in the XML Schema Definition Language (XSD).",
						"optional": null,
						"XSD.object": true
					}
				]
			}
		}
	]
}