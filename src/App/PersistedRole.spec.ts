import {
	STATIC,

	OPTIONAL,
	OBLIGATORY,

	module,
	clazz,
	interfaze,
	method,

	isDefined,
	hasMethod,
	hasProperty,
	extendsClass,
	hasDefaultExport,
	hasSignature,
} from "./../test/JasmineExtender";
import AbstractContext from "./../AbstractContext";
import AppContext from "./Context";
import Documents from "./../Documents";
import * as NS from "./../NS";
import * as PersistedAuthRole from "./../Auth/PersistedRole";
import * as PersistedDocument from "./../PersistedDocument";
import * as Pointer from "./../Pointer";
import * as Roles from "./Roles";
import * as Utils from "./../Utils";

import * as PersistedAppRole from "./PersistedRole";
import DefaultExport from "./PersistedRole";

describe( module( "Carbon/App/PersistedRole" ), ():void => {

	it( isDefined(), ():void => {
		expect( PersistedAppRole ).toBeDefined();
		expect( Utils.isObject( PersistedAppRole ) ).toBe( true );
	} );

	describe( interfaze(
		"Carbon.App.PersistedRole.Class",
		"Specific interface that represents a persisted role of an application."
	), ():void => {

		it( extendsClass( "Carbon.Auth.PersistedRole.Class" ), ():void => {
			let persistedAppRole:PersistedAppRole.Class = <any> {};
			let persistedAuthRole:PersistedAuthRole.Class;

			persistedAuthRole = persistedAppRole;
			expect( persistedAuthRole ).toEqual( jasmine.any( Object ) );
		} );

		it( hasProperty(
			OBLIGATORY,
			"_roles",
			"Carbon.App.Roles.Class",
			"(Internal) Instance of the AppRoles class that manage the current role."
		), ():void => {
			let persistedRole:PersistedAppRole.Class = <any> {};

			class MockedContext extends AbstractContext {
				resolve( uri:string ):string {
					return uri;
				}
			}
			let parentContext:AbstractContext = new MockedContext();
			let appContext:AppContext = new AppContext( parentContext, <any> {
				rootContainer: {
					id: "http://example.com/apps/example-app/",
				},
			} );

			persistedRole._roles = new Roles.Class( appContext );
			expect( persistedRole._roles ).toEqual( jasmine.any( Roles.Class ) );
		} );

		it( hasProperty(
			OPTIONAL,
			"parentRole",
			"Carbon.Pointer.Class",
			"Reference to the parent of the current role."
		), ():void => {
			let parent:Pointer.Class = Pointer.Factory.create();
			let persistedRole:PersistedAppRole.Class = <any> {};

			persistedRole.parentRole = parent;
			expect( Pointer.Factory.is( persistedRole.parentRole ) ).toBe( true );
		} );

		it( hasProperty(
			OPTIONAL,
			"childRole",
			"Carbon.Pointer.Class[]",
			"An array of pointer that references to all the children of the current role."
		), ():void => {
			let children:Pointer.Class[] = [ Pointer.Factory.create() ];
			let persistedRole:PersistedAppRole.Class = <any> {};

			persistedRole.childRoles = children;
			expect( persistedRole.childRoles ).toEqual( jasmine.any( Array ) );
			expect( Pointer.Factory.is( persistedRole.childRoles[ 0 ] ) ).toBe( true );
		} );

		describe( method(
			OBLIGATORY,
			"createChild"
		), ():void => {

			it( hasSignature(
				[ "T" ],
				"Persists a new role with the slug specified as a child of the current role.", [
					{ name: "role", type: "T & Carbon.App.Roles.Class", description: "The role to be persisted." },
					{ name: "slug", type: "string", optional: true, description: "The slug that will be used in the child role URI." },
					{ name: "requestOptions", type: "Carbon.HTTP.Request.Options", optional: true, description: "Customizable options for the request." },
				],
				{ type: "Promise<[ T & Carbon.App.PersistedRole.Class, Carbon.HTTP.Response.Class ]>" }
			), ():void => {} );

			it( hasSignature(
				[ "T" ],
				"Persists a new role as a child of the current role.", [
					{ name: "role", type: "T & Carbon.App.Roles.Class", description: "The role to be persisted." },
					{ name: "requestOptions", type: "Carbon.HTTP.Request.Options", optional: true, description: "Customizable options for the request." },
				],
				{ type: "Promise<[ T & Carbon.App.PersistedRole.Class, Carbon.HTTP.Response.Class ]>" }
			), ():void => {} );

		} );

		describe( method(
			OBLIGATORY,
			"createChildren"
		), ():void => {

			it( hasSignature(
				[ "T" ],
				"Persists multiple new application roles as a children member of the current role.", [
					{ name: "roles", type: "(T & Carbon.App.Roles.Class)[]", description: "The roles to persist." },
					{ name: "slugs", type: "string[]", optional: true, description: "Array with the slugs that corresponds to each object in `roles` parameter, in the order in which they were defined. If an element in the array is undefined or null, the slug will be generated by the platform." },
					{ name: "requestOptions", type: "Carbon.HTTP.Request.Options", optional: true, description: "Customizable options for every creation request." },
				],
				{ type: "Promise<[ (T & Carbon.App.PersistedRole.Class)[], Carbon.HTTP.Response.Class[] ]>", description: "Promise with the array of persisted but UNRESOLVED roles, and an array with the the responses of all the request made, which are the creation requests and an add member request for the parent role at the end." }
			), ():void => {} );

			it( hasSignature(
				[ "T" ],
				"Persists multiple new application roles as a children member of the current role.", [
					{ name: "roles", type: "(T & Carbon.App.Roles.Class)[]", description: "The roles to persist." },
					{ name: "requestOptions", type: "Carbon.HTTP.Request.Options", optional: true, description: "Customizable options for every creation request." },
				],
				{ type: "Promise<[ (T & Carbon.App.PersistedRole.Class)[], Carbon.HTTP.Response.Class[] ]>", description: "Promise with the array of persisted but UNRESOLVED roles, and an array with the the responses of all the request made, which are the creation requests and an add member request for the parent role at the end." }
			), ():void => {} );

		} );


		describe( method(
			OBLIGATORY,
			"createChildAndRetrieve"
		), ():void => {

			it( hasSignature(
				[ "T" ],
				"Persists a new role with the slug specified as a child of the current role and resolves it.", [
					{ name: "role", type: "T & Carbon.App.Roles.Class", description: "The role to be persisted." },
					{ name: "slug", type: "string", optional: true, description: "The slug that will be used in the child role URI." },
					{ name: "requestOptions", type: "Carbon.HTTP.Request.Options", optional: true, description: "Customizable options for the request." },
				],
				{ type: "Promise<[ T & Carbon.App.PersistedRole.Class, Carbon.HTTP.Response.Class ]>" }
			), ():void => {} );

			it( hasSignature(
				[ "T" ],
				"Persists a new role as a child of the current role and resolves it.", [
					{ name: "role", type: "T & Carbon.App.Roles.Class", description: "The role to be persisted." },
					{ name: "requestOptions", type: "Carbon.HTTP.Request.Options", optional: true, description: "Customizable options for the request." },
				],
				{ type: "Promise<[ T & Carbon.App.PersistedRole.Class, Carbon.HTTP.Response.Class ]>" }
			), ():void => {} );

		} );

	} );

	describe( clazz(
		"Carbon.App.PersistedRole.Factory",
		"Factory class for `Carbon.App.PersistedRole.Class` objects"
	), ():void => {

		it( isDefined(), ():void => {
			expect( PersistedAppRole.Factory ).toBeDefined();
			expect( Utils.isFunction( PersistedAppRole.Factory ) ).toBe( true );
		} );

		it( hasMethod(
			STATIC,
			"hasClassProperties",
			"Returns true if the object provided has the properties that defines a `Carbon.App.PersistedRole.Class` object", [
				{ name: "resource", type: "Object" },
			],
			{ type: "boolean" }
		), ():void => {
			expect( PersistedAppRole.Factory.hasClassProperties ).toBeDefined();
			expect( Utils.isFunction( PersistedAppRole.Factory.hasClassProperties ) ).toBe( true );

			let object:any = void 0;
			expect( PersistedAppRole.Factory.hasClassProperties( object ) ).toBe( false );

			object = {
				_roles: null,
				parentRole: null,
				childRoles: null,
			};
			expect( PersistedAppRole.Factory.hasClassProperties( object ) ).toBe( true );

			delete object._roles;
			expect( PersistedAppRole.Factory.hasClassProperties( object ) ).toBe( false );
			object._roles = null;

			delete object.parentRole;
			expect( PersistedAppRole.Factory.hasClassProperties( object ) ).toBe( true );
			object.parentRole = null;

			delete object.childRoles;
			expect( PersistedAppRole.Factory.hasClassProperties( object ) ).toBe( true );
			object.childRoles = null;
		} );

		it( hasMethod(
			STATIC,
			"is",
			"Returns true if the object provided is considered a `Carbon.App.PersistedRole.Class` object", [
				{ name: "object", type: "Object" },
			],
			{ type: "boolean" }
		), ():void => {
			expect( PersistedAppRole.Factory.is ).toBeDefined();
			expect( Utils.isFunction( PersistedAppRole.Factory.is ) ).toBe( true );

			let object:any;

			object = {};
			expect( PersistedAppRole.Factory.is( object ) ).toBe( false );

			object = {
				_roles: null,
				name: null,
				parentRole: null,
				childRoles: null,
				agents: null,
				types: [ NS.CS.Class.AppRole ],
			};
			expect( PersistedAppRole.Factory.is( object ) ).toBe( false );

			object = PersistedDocument.Factory.createFrom( object, "", new Documents() );
			expect( PersistedAppRole.Factory.is( object ) ).toBe( false );

			object = PersistedAuthRole.Factory.decorate( object, null );
			expect( PersistedAppRole.Factory.is( object ) ).toBe( true );
		} );

		it( hasMethod(
			STATIC,
			"decorate",
			[ "T extends Carbon.PersistedDocument.Class" ],
			"Decorates the object provided with the methods and properties of a `Carbon.App.PersistedRole.Class` object.", [
				{ name: "object", type: "T" },
			],
			{ type: "T & Carbon.App.PersistedRole.Class" }
		), ():void => {
			expect( PersistedAppRole.Factory.decorate ).toBeDefined();
			expect( Utils.isFunction( PersistedAppRole.Factory.decorate ) ).toBe( true );

			class MockedContext extends AbstractContext {
				resolve( uri:string ):string {
					return uri;
				}
			}
			let parentContext:AbstractContext = new MockedContext();
			let appContext:AppContext = new AppContext( parentContext, <any> {
				rootContainer: {
					id: "http://example.com/apps/example-app/",
				},
			} );

			interface ThePersistedAppRole {
				myProperty?:string;
			}
			interface MyPersistedAppRole extends PersistedAppRole.Class, ThePersistedAppRole {}

			let spyDecorate:jasmine.Spy = spyOn( PersistedAuthRole.Factory, "decorate" ).and.callThrough();

			let object:PersistedDocument.Class = PersistedDocument.Factory.createFrom( { name: "Role name" }, "", new Documents() );
			let role:MyPersistedAppRole = PersistedAppRole.Factory.decorate( object, appContext.auth.roles );

			expect( PersistedAppRole.Factory.hasClassProperties( role ) ).toBe( true );
			expect( spyDecorate ).toHaveBeenCalledWith( object, appContext.auth.roles );
		} );

	} );

	it( hasDefaultExport( "Carbon.App.PersistedRole.Class" ), ():void => {
		let defaultExport:DefaultExport = <any> {};
		let persistedRole:PersistedAppRole.Class;

		persistedRole = defaultExport;
		expect( persistedRole ).toEqual( jasmine.any( Object ) );
	} );

} );
